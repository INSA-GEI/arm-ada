
BSP Ravenscar-full-armada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f138  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d29c  0801f308  0801f308  0002f308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802c5a4  0802c5a4  0003c5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802c5ac  0802c5ac  0003c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802c5b0  0802c5b0  0003c5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000014c  20000000  0802c5b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sdram        0001fe00  2000014c  0802c700  0004014c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00008e88  2001ff4c  0804c500  0005ff4c  2**2
                  ALLOC
  9 ._user_heap_stack 00001804  20028dd4  0804c500  00068dd4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0005ff4c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000d3cae  00000000  00000000  0005ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0001372a  00000000  00000000  00133c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000506e0  00000000  00000000  00147354  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003e60  00000000  00000000  00197a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000097c8  00000000  00000000  0019b898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00040124  00000000  00000000  001a5060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000709be  00000000  00000000  001e5184  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00127f1c  00000000  00000000  00255b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0037da5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cac4  00000000  00000000  0037dadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2001ff4c 	.word	0x2001ff4c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f2f0 	.word	0x0801f2f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2001ff50 	.word	0x2001ff50
 800020c:	0801f2f0 	.word	0x0801f2f0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
		return true;
	} else
		return false;
#else
	uint8_t tx_buff[3]={addr | 0x80,0,0};
 80005e2:	2400      	movs	r4, #0
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80005e4:	b085      	sub	sp, #20
 80005e6:	4605      	mov	r5, r0
 80005e8:	4616      	mov	r6, r2
	uint8_t tx_buff[3]={addr | 0x80,0,0};
 80005ea:	f88d 1008 	strb.w	r1, [sp, #8]
	uint8_t rx_buff[3];
	uint8_t status;

	//HAL_GPIO_WritePin(dev->cs_gpio, dev->cs_pin, GPIO_PIN_RESET );
	BMP280_CS_ENABLE(dev);
 80005ee:	4622      	mov	r2, r4
 80005f0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80005f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	uint8_t tx_buff[3]={addr | 0x80,0,0};
 80005f4:	f88d 4009 	strb.w	r4, [sp, #9]
 80005f8:	f88d 400a 	strb.w	r4, [sp, #10]
	BMP280_CS_ENABLE(dev);
 80005fc:	f002 f948 	bl	8002890 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(dev->hspi, tx_buff, rx_buff, 3, 1000);
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	aa03      	add	r2, sp, #12
 8000606:	a902      	add	r1, sp, #8
 8000608:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2303      	movs	r3, #3
 800060e:	f004 f876 	bl	80046fe <HAL_SPI_TransmitReceive>
 8000612:	4607      	mov	r7, r0

	BMP280_CS_DISABLE(dev);
 8000614:	2201      	movs	r2, #1
 8000616:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8000618:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800061a:	f002 f939 	bl	8002890 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
 800061e:	b94f      	cbnz	r7, 8000634 <read_register16+0x54>
	else
	{
		*value = (((uint16_t)rx_buff[2])<<8) + (uint16_t)rx_buff[1];
 8000620:	f89d 200e 	ldrb.w	r2, [sp, #14]

		return true;
 8000624:	2001      	movs	r0, #1
		*value = (((uint16_t)rx_buff[2])<<8) + (uint16_t)rx_buff[1];
 8000626:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800062a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800062e:	8033      	strh	r3, [r6, #0]
	}
#endif /* BMP280_SPI */

}
 8000630:	b005      	add	sp, #20
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status != HAL_OK) return false;
 8000634:	4620      	mov	r0, r4
 8000636:	e7fb      	b.n	8000630 <read_register16+0x50>

08000638 <read_data>:

static int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value, uint8_t len) {
 8000638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800063c:	461c      	mov	r4, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
		return 0;
	else
		return 1;
#else
	uint8_t tx_buff[len+1];
 800063e:	3308      	adds	r3, #8
static int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value, uint8_t len) {
 8000640:	b083      	sub	sp, #12
 8000642:	4690      	mov	r8, r2
	uint8_t tx_buff[len+1];
 8000644:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
static int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value, uint8_t len) {
 8000648:	4606      	mov	r6, r0
 800064a:	af02      	add	r7, sp, #8
	uint8_t tx_buff[len+1];
 800064c:	ebad 0d03 	sub.w	sp, sp, r3
 8000650:	f10d 0908 	add.w	r9, sp, #8
	uint8_t rx_buff[len+1];
 8000654:	ebad 0d03 	sub.w	sp, sp, r3
	uint8_t status;
	uint8_t i;

	tx_buff[0]=addr | 0x80;
	for (i=1; i<len+1; i++)
 8000658:	2301      	movs	r3, #1
	tx_buff[0]=addr | 0x80;
 800065a:	464a      	mov	r2, r9
	uint8_t rx_buff[len+1];
 800065c:	ad02      	add	r5, sp, #8
	tx_buff[0]=addr | 0x80;
 800065e:	f802 1b01 	strb.w	r1, [r2], #1
	{
		tx_buff[i]=0;
 8000662:	2100      	movs	r1, #0
	for (i=1; i<len+1; i++)
 8000664:	3301      	adds	r3, #1
		tx_buff[i]=0;
 8000666:	f802 1b01 	strb.w	r1, [r2], #1
	for (i=1; i<len+1; i++)
 800066a:	b2db      	uxtb	r3, r3
 800066c:	429c      	cmp	r4, r3
 800066e:	d2f9      	bcs.n	8000664 <read_data+0x2c>
	}

	BMP280_CS_ENABLE(dev);
 8000670:	2200      	movs	r2, #0
 8000672:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
 8000674:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8000676:	f002 f90b 	bl	8002890 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(dev->hspi, tx_buff, rx_buff, len+1, 1000);
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	4649      	mov	r1, r9
 8000680:	462a      	mov	r2, r5
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	1c63      	adds	r3, r4, #1
 8000686:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000688:	f004 f839 	bl	80046fe <HAL_SPI_TransmitReceive>
 800068c:	4681      	mov	r9, r0

	BMP280_CS_DISABLE(dev);
 800068e:	2201      	movs	r2, #1
 8000690:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
 8000692:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8000694:	f002 f8fc 	bl	8002890 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
 8000698:	f1b9 0f00 	cmp.w	r9, #0
 800069c:	d111      	bne.n	80006c2 <read_data+0x8a>
 800069e:	3c01      	subs	r4, #1
 80006a0:	1c6b      	adds	r3, r5, #1
 80006a2:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80006a6:	b2e4      	uxtb	r4, r4
 80006a8:	3402      	adds	r4, #2
 80006aa:	442c      	add	r4, r5
	else
	{
		for (i=1; i<len+1; i++)
		{
			value[i-1]=rx_buff[i];
 80006ac:	f813 1b01 	ldrb.w	r1, [r3], #1
		for (i=1; i<len+1; i++)
 80006b0:	42a3      	cmp	r3, r4
			value[i-1]=rx_buff[i];
 80006b2:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (i=1; i<len+1; i++)
 80006b6:	d1f9      	bne.n	80006ac <read_data+0x74>
		}

		return true;
 80006b8:	2001      	movs	r0, #1
	}
#endif /* BMP280_SPI */

}
 80006ba:	3704      	adds	r7, #4
 80006bc:	46bd      	mov	sp, r7
 80006be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status != HAL_OK) return false;
 80006c2:	2000      	movs	r0, #0
 80006c4:	e7f9      	b.n	80006ba <read_data+0x82>

080006c6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80006c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
		return false;
	else
		return true;
#else
	uint8_t tx_buff[2]={addr & 0x7F,value};
 80006c8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80006cc:	4604      	mov	r4, r0
	uint8_t tx_buff[2]={addr & 0x7F,value};
 80006ce:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t status;

	BMP280_CS_ENABLE(dev);
 80006d2:	2200      	movs	r2, #0
	uint8_t tx_buff[2]={addr & 0x7F,value};
 80006d4:	f88d 1004 	strb.w	r1, [sp, #4]
	BMP280_CS_ENABLE(dev);
 80006d8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80006da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80006dc:	f002 f8d8 	bl	8002890 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(dev->hspi, tx_buff, 2, 1000);
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	a901      	add	r1, sp, #4
 80006e6:	2202      	movs	r2, #2
 80006e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80006ea:	f003 ff50 	bl	800458e <HAL_SPI_Transmit>
 80006ee:	4605      	mov	r5, r0

	BMP280_CS_DISABLE(dev);
 80006f0:	2201      	movs	r2, #1
 80006f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80006f4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80006f6:	f002 f8cb 	bl	8002890 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
	else return true;
#endif /* BMP280_SPI */
}
 80006fa:	fab5 f085 	clz	r0, r5
 80006fe:	0940      	lsrs	r0, r0, #5
 8000700:	b003      	add	sp, #12
 8000702:	bd30      	pop	{r4, r5, pc}

08000704 <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 8000704:	2303      	movs	r3, #3
	params->filter = BMP280_FILTER_OFF;
 8000706:	2200      	movs	r2, #0
	params->mode = BMP280_MODE_NORMAL;
 8000708:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 800070a:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800070c:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800070e:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000710:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8000712:	7143      	strb	r3, [r0, #5]
}
 8000714:	4770      	bx	lr

08000716 <bmp280_init>:
	}

	return false;
}

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000716:	b573      	push	{r0, r1, r4, r5, r6, lr}

		return false;
	}
#endif /*BMP280_SPI */

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)==false) {
 8000718:	2301      	movs	r3, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800071a:	460e      	mov	r6, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)==false) {
 800071c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8000720:	21d0      	movs	r1, #208	; 0xd0
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000722:	4604      	mov	r4, r0
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)==false) {
 8000724:	f7ff ff88 	bl	8000638 <read_data>
 8000728:	b910      	cbnz	r0, 8000730 <bmp280_init+0x1a>
	if (!read_calibration_data(dev)) {
		return false;
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
		return false;
 800072a:	2000      	movs	r0, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)==false) {
		return false;
	}

	return true;
}
 800072c:	b002      	add	sp, #8
 800072e:	bd70      	pop	{r4, r5, r6, pc}
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000730:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8000734:	2b58      	cmp	r3, #88	; 0x58
 8000736:	d001      	beq.n	800073c <bmp280_init+0x26>
 8000738:	2b60      	cmp	r3, #96	; 0x60
 800073a:	d1f6      	bne.n	800072a <bmp280_init+0x14>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)==false) {
 800073c:	22b6      	movs	r2, #182	; 0xb6
 800073e:	21e0      	movs	r1, #224	; 0xe0
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ffc0 	bl	80006c6 <write_register8>
 8000746:	2800      	cmp	r0, #0
 8000748:	d0ef      	beq.n	800072a <bmp280_init+0x14>
		uint8_t status=0;
 800074a:	2500      	movs	r5, #0
		if ((read_data(dev, BMP280_REG_STATUS, &status, 1)!=false)
 800074c:	2301      	movs	r3, #1
 800074e:	f10d 0206 	add.w	r2, sp, #6
 8000752:	21f3      	movs	r1, #243	; 0xf3
 8000754:	4620      	mov	r0, r4
		uint8_t status=0;
 8000756:	f88d 5006 	strb.w	r5, [sp, #6]
		if ((read_data(dev, BMP280_REG_STATUS, &status, 1)!=false)
 800075a:	f7ff ff6d 	bl	8000638 <read_data>
 800075e:	2800      	cmp	r0, #0
 8000760:	d0f4      	beq.n	800074c <bmp280_init+0x36>
				&& (status & 1) == 0)
 8000762:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000766:	07db      	lsls	r3, r3, #31
 8000768:	d4f0      	bmi.n	800074c <bmp280_init+0x36>
	if (read_register16(dev, 0x88, &dev->dig_T1)
 800076a:	4622      	mov	r2, r4
 800076c:	2188      	movs	r1, #136	; 0x88
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff ff36 	bl	80005e0 <read_register16>
 8000774:	2800      	cmp	r0, #0
 8000776:	d0d8      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000778:	1ca2      	adds	r2, r4, #2
 800077a:	218a      	movs	r1, #138	; 0x8a
 800077c:	4620      	mov	r0, r4
 800077e:	f7ff ff2f 	bl	80005e0 <read_register16>
 8000782:	2800      	cmp	r0, #0
 8000784:	d0d1      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000786:	1d22      	adds	r2, r4, #4
 8000788:	218c      	movs	r1, #140	; 0x8c
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff ff28 	bl	80005e0 <read_register16>
 8000790:	2800      	cmp	r0, #0
 8000792:	d0ca      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000794:	1da2      	adds	r2, r4, #6
 8000796:	218e      	movs	r1, #142	; 0x8e
 8000798:	4620      	mov	r0, r4
 800079a:	f7ff ff21 	bl	80005e0 <read_register16>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d0c3      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80007a2:	f104 0208 	add.w	r2, r4, #8
 80007a6:	2190      	movs	r1, #144	; 0x90
 80007a8:	4620      	mov	r0, r4
 80007aa:	f7ff ff19 	bl	80005e0 <read_register16>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d0bb      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80007b2:	f104 020a 	add.w	r2, r4, #10
 80007b6:	2192      	movs	r1, #146	; 0x92
 80007b8:	4620      	mov	r0, r4
 80007ba:	f7ff ff11 	bl	80005e0 <read_register16>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d0b3      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80007c2:	f104 020c 	add.w	r2, r4, #12
 80007c6:	2194      	movs	r1, #148	; 0x94
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff ff09 	bl	80005e0 <read_register16>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d0ab      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80007d2:	f104 020e 	add.w	r2, r4, #14
 80007d6:	2196      	movs	r1, #150	; 0x96
 80007d8:	4620      	mov	r0, r4
 80007da:	f7ff ff01 	bl	80005e0 <read_register16>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d0a3      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80007e2:	f104 0210 	add.w	r2, r4, #16
 80007e6:	2198      	movs	r1, #152	; 0x98
 80007e8:	4620      	mov	r0, r4
 80007ea:	f7ff fef9 	bl	80005e0 <read_register16>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d09b      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80007f2:	f104 0212 	add.w	r2, r4, #18
 80007f6:	219a      	movs	r1, #154	; 0x9a
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef1 	bl	80005e0 <read_register16>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d093      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000802:	f104 0214 	add.w	r2, r4, #20
 8000806:	219c      	movs	r1, #156	; 0x9c
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fee9 	bl	80005e0 <read_register16>
 800080e:	2800      	cmp	r0, #0
 8000810:	d08b      	beq.n	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0x9e,
 8000812:	f104 0216 	add.w	r2, r4, #22
 8000816:	219e      	movs	r1, #158	; 0x9e
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fee1 	bl	80005e0 <read_register16>
 800081e:	2800      	cmp	r0, #0
 8000820:	d083      	beq.n	800072a <bmp280_init+0x14>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000822:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8000826:	2b60      	cmp	r3, #96	; 0x60
 8000828:	d149      	bne.n	80008be <bmp280_init+0x1a8>
	uint16_t h4=0, h5=0;
 800082a:	2300      	movs	r3, #0
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800082c:	f104 0218 	add.w	r2, r4, #24
 8000830:	21a1      	movs	r1, #161	; 0xa1
 8000832:	4620      	mov	r0, r4
	uint16_t h4=0, h5=0;
 8000834:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000838:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800083c:	2301      	movs	r3, #1
 800083e:	f7ff fefb 	bl	8000638 <read_data>
 8000842:	2800      	cmp	r0, #0
 8000844:	f47f af71 	bne.w	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000848:	f104 021a 	add.w	r2, r4, #26
 800084c:	21e1      	movs	r1, #225	; 0xe1
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff fec6 	bl	80005e0 <read_register16>
 8000854:	2800      	cmp	r0, #0
 8000856:	f43f af68 	beq.w	800072a <bmp280_init+0x14>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800085a:	2301      	movs	r3, #1
 800085c:	f104 021c 	add.w	r2, r4, #28
 8000860:	21e3      	movs	r1, #227	; 0xe3
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff fee8 	bl	8000638 <read_data>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af5e 	bne.w	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0xe4, &h4)
 800086e:	aa01      	add	r2, sp, #4
 8000870:	21e4      	movs	r1, #228	; 0xe4
 8000872:	4620      	mov	r0, r4
 8000874:	f7ff feb4 	bl	80005e0 <read_register16>
 8000878:	2800      	cmp	r0, #0
 800087a:	f43f af56 	beq.w	800072a <bmp280_init+0x14>
			&& read_register16(dev, 0xe5, &h5)
 800087e:	f10d 0206 	add.w	r2, sp, #6
 8000882:	21e5      	movs	r1, #229	; 0xe5
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff feab 	bl	80005e0 <read_register16>
 800088a:	2800      	cmp	r0, #0
 800088c:	f43f af4d 	beq.w	800072a <bmp280_init+0x14>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000890:	2301      	movs	r3, #1
 8000892:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8000896:	21e7      	movs	r1, #231	; 0xe7
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff fecd 	bl	8000638 <read_data>
 800089e:	2800      	cmp	r0, #0
 80008a0:	f47f af43 	bne.w	800072a <bmp280_init+0x14>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80008a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80008a8:	0113      	lsls	r3, r2, #4
 80008aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80008ae:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80008b2:	4313      	orrs	r3, r2
 80008b4:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 80008b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	8423      	strh	r3, [r4, #32]
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80008be:	7872      	ldrb	r2, [r6, #1]
	if (write_register8(dev, BMP280_REG_CONFIG, config)==false) {
 80008c0:	21f5      	movs	r1, #245	; 0xf5
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80008c2:	7973      	ldrb	r3, [r6, #5]
	if (write_register8(dev, BMP280_REG_CONFIG, config)==false) {
 80008c4:	4620      	mov	r0, r4
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)==false) {
 80008cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80008d0:	f7ff fef9 	bl	80006c6 <write_register8>
 80008d4:	2800      	cmp	r0, #0
 80008d6:	f43f af28 	beq.w	800072a <bmp280_init+0x14>
	if (params->mode == BMP280_MODE_FORCED) {
 80008da:	7833      	ldrb	r3, [r6, #0]
													| (params->oversampling_pressure << 2) | (params->mode);
 80008dc:	78b5      	ldrb	r5, [r6, #2]
	if (params->mode == BMP280_MODE_FORCED) {
 80008de:	2b01      	cmp	r3, #1
													| (params->oversampling_pressure << 2) | (params->mode);
 80008e0:	ea4f 0585 	mov.w	r5, r5, lsl #2
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80008e4:	bf04      	itt	eq
 80008e6:	2300      	moveq	r3, #0
 80008e8:	7033      	strbeq	r3, [r6, #0]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80008ea:	78f3      	ldrb	r3, [r6, #3]
													| (params->oversampling_pressure << 2) | (params->mode);
 80008ec:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 80008f0:	7833      	ldrb	r3, [r6, #0]
 80008f2:	431d      	orrs	r5, r3
	if (dev->id == BME280_CHIP_ID) {
 80008f4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80008f8:	2b60      	cmp	r3, #96	; 0x60
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80008fa:	b2ed      	uxtb	r5, r5
	if (dev->id == BME280_CHIP_ID) {
 80008fc:	d008      	beq.n	8000910 <bmp280_init+0x1fa>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)==false) {
 80008fe:	462a      	mov	r2, r5
 8000900:	21f4      	movs	r1, #244	; 0xf4
 8000902:	4620      	mov	r0, r4
 8000904:	f7ff fedf 	bl	80006c6 <write_register8>
 8000908:	3000      	adds	r0, #0
 800090a:	bf18      	it	ne
 800090c:	2001      	movne	r0, #1
 800090e:	e70d      	b.n	800072c <bmp280_init+0x16>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)==false) {
 8000910:	7932      	ldrb	r2, [r6, #4]
 8000912:	21f2      	movs	r1, #242	; 0xf2
 8000914:	4620      	mov	r0, r4
 8000916:	f7ff fed6 	bl	80006c6 <write_register8>
 800091a:	2800      	cmp	r0, #0
 800091c:	d1ef      	bne.n	80008fe <bmp280_init+0x1e8>
 800091e:	e704      	b.n	800072a <bmp280_init+0x14>

08000920 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000920:	4770      	bx	lr

08000922 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8000922:	2000      	movs	r0, #0
 8000924:	4770      	bx	lr
	...

08000928 <ft5336_ReadID>:
{
 8000928:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 800092a:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 800092c:	4c0f      	ldr	r4, [pc, #60]	; (800096c <ft5336_ReadID+0x44>)
{
 800092e:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8000930:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000934:	7823      	ldrb	r3, [r4, #0]
 8000936:	b91b      	cbnz	r3, 8000940 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000938:	f000 fc48 	bl	80011cc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093c:	2301      	movs	r3, #1
 800093e:	7023      	strb	r3, [r4, #0]
{
 8000940:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000942:	b2ed      	uxtb	r5, r5
 8000944:	3c01      	subs	r4, #1
 8000946:	21a8      	movs	r1, #168	; 0xa8
 8000948:	4628      	mov	r0, r5
 800094a:	f000 fc51 	bl	80011f0 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800094e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000952:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8000956:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800095a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800095c:	d103      	bne.n	8000966 <ft5336_ReadID+0x3e>
  return (ucReadId);
 800095e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000962:	b003      	add	sp, #12
 8000964:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000966:	2b51      	cmp	r3, #81	; 0x51
 8000968:	d1ec      	bne.n	8000944 <ft5336_ReadID+0x1c>
 800096a:	e7f8      	b.n	800095e <ft5336_ReadID+0x36>
 800096c:	2001ff68 	.word	0x2001ff68

08000970 <ft5336_TS_DetectTouch>:
{
 8000970:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8000972:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000974:	2102      	movs	r1, #2
 8000976:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8000978:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800097c:	f000 fc38 	bl	80011f0 <TS_IO_Read>
 8000980:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000984:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000988:	f003 030f 	and.w	r3, r3, #15
 800098c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000994:	2b05      	cmp	r3, #5
 8000996:	d901      	bls.n	800099c <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8000998:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800099c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80009a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80009a6:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80009a8:	2200      	movs	r2, #0
 80009aa:	709a      	strb	r2, [r3, #2]
}
 80009ac:	b002      	add	sp, #8
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	2001ff68 	.word	0x2001ff68

080009b4 <ft5336_TS_GetXY>:
{
 80009b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80009b8:	4c27      	ldr	r4, [pc, #156]	; (8000a58 <ft5336_TS_GetXY+0xa4>)
{
 80009ba:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 80009bc:	2500      	movs	r5, #0
{
 80009be:	4688      	mov	r8, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80009c0:	78a2      	ldrb	r2, [r4, #2]
 80009c2:	7863      	ldrb	r3, [r4, #1]
  volatile uint8_t ucReadData = 0;
 80009c4:	f88d 5007 	strb.w	r5, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d93d      	bls.n	8000a48 <ft5336_TS_GetXY+0x94>
 80009cc:	2a09      	cmp	r2, #9
 80009ce:	d83e      	bhi.n	8000a4e <ft5336_TS_GetXY+0x9a>
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <ft5336_TS_GetXY+0xa8>)
 80009d2:	5c99      	ldrb	r1, [r3, r2]
 80009d4:	4413      	add	r3, r2
 80009d6:	f893 a00a 	ldrb.w	sl, [r3, #10]
 80009da:	f893 9014 	ldrb.w	r9, [r3, #20]
 80009de:	7f9d      	ldrb	r5, [r3, #30]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80009e0:	b2c7      	uxtb	r7, r0
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 fc04 	bl	80011f0 <TS_IO_Read>
 80009e8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80009ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009f0:	4651      	mov	r1, sl
 80009f2:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80009f4:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009f6:	f000 fbfb 	bl	80011f0 <TS_IO_Read>
 80009fa:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80009fe:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000a04:	4638      	mov	r0, r7
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000a06:	88a2      	ldrh	r2, [r4, #4]
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a0e:	4313      	orrs	r3, r2
    *X = coord;
 8000a10:	f8a8 3000 	strh.w	r3, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000a14:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000a16:	f000 fbeb 	bl	80011f0 <TS_IO_Read>
 8000a1a:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000a1e:	4629      	mov	r1, r5
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000a24:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000a26:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000a28:	f000 fbe2 	bl	80011f0 <TS_IO_Read>
 8000a2c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000a30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a34:	88a2      	ldrh	r2, [r4, #4]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 8000a40:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000a42:	78a3      	ldrb	r3, [r4, #2]
 8000a44:	3301      	adds	r3, #1
 8000a46:	70a3      	strb	r3, [r4, #2]
}
 8000a48:	b002      	add	sp, #8
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000a4e:	46a9      	mov	r9, r5
 8000a50:	46aa      	mov	sl, r5
 8000a52:	4629      	mov	r1, r5
 8000a54:	e7c4      	b.n	80009e0 <ft5336_TS_GetXY+0x2c>
 8000a56:	bf00      	nop
 8000a58:	2001ff68 	.word	0x2001ff68
 8000a5c:	0801f308 	.word	0x0801f308

08000a60 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000a60:	2201      	movs	r2, #1
 8000a62:	21a4      	movs	r1, #164	; 0xa4
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	f000 bbb3 	b.w	80011d0 <TS_IO_Write>

08000a6a <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	21a4      	movs	r1, #164	; 0xa4
 8000a6e:	b2c0      	uxtb	r0, r0
 8000a70:	f000 bbae 	b.w	80011d0 <TS_IO_Write>

08000a74 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8000a74:	f7ff bff9 	b.w	8000a6a <ft5336_TS_DisableIT>

08000a78 <ft5336_TS_ClearIT>:
 8000a78:	4770      	bx	lr
	...

08000a7c <ft5336_Init>:
{
 8000a7c:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8000a7e:	4c05      	ldr	r4, [pc, #20]	; (8000a94 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8000a80:	20c8      	movs	r0, #200	; 0xc8
 8000a82:	f000 fbc9 	bl	8001218 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a86:	7823      	ldrb	r3, [r4, #0]
 8000a88:	b91b      	cbnz	r3, 8000a92 <ft5336_Init+0x16>
    TS_IO_Init();
 8000a8a:	f000 fb9f 	bl	80011cc <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	7023      	strb	r3, [r4, #0]
}
 8000a92:	bd10      	pop	{r4, pc}
 8000a94:	2001ff68 	.word	0x2001ff68

08000a98 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8000a98:	2300      	movs	r3, #0
{
 8000a9a:	b513      	push	{r0, r1, r4, lr}
 8000a9c:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000a9e:	b2c0      	uxtb	r0, r0
 8000aa0:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8000aa2:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000aa6:	f000 fba3 	bl	80011f0 <TS_IO_Read>
 8000aaa:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8000aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ab2:	6023      	str	r3, [r4, #0]
}
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd10      	pop	{r4, pc}

08000ab8 <ft5336_TS_GetTouchInfo>:
{
 8000ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000abc:	461e      	mov	r6, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 8000ac0:	2400      	movs	r4, #0
{
 8000ac2:	4617      	mov	r7, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000ac4:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8000ac6:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d92d      	bls.n	8000b2a <ft5336_TS_GetTouchInfo+0x72>
 8000ace:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000ad0:	b2c5      	uxtb	r5, r0
 8000ad2:	bf94      	ite	ls
 8000ad4:	4c17      	ldrls	r4, [pc, #92]	; (8000b34 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000ad6:	4621      	movhi	r1, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000ad8:	4628      	mov	r0, r5
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000ada:	bf8f      	iteee	hi
 8000adc:	46a0      	movhi	r8, r4
 8000ade:	1864      	addls	r4, r4, r1
 8000ae0:	f894 1028 	ldrbls.w	r1, [r4, #40]	; 0x28
 8000ae4:	f894 8032 	ldrbls.w	r8, [r4, #50]	; 0x32
 8000ae8:	bf98      	it	ls
 8000aea:	f894 403c 	ldrbls.w	r4, [r4, #60]	; 0x3c
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000aee:	f000 fb7f 	bl	80011f0 <TS_IO_Read>
 8000af2:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000af6:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000af8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000afc:	9b08      	ldr	r3, [sp, #32]
 8000afe:	0989      	lsrs	r1, r1, #6
 8000b00:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000b02:	4641      	mov	r1, r8
 8000b04:	f000 fb74 	bl	80011f0 <TS_IO_Read>
 8000b08:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000b10:	4621      	mov	r1, r4
 8000b12:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000b14:	603b      	str	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000b16:	f000 fb6b 	bl	80011f0 <TS_IO_Read>
 8000b1a:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000b1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000b22:	0912      	lsrs	r2, r2, #4
 8000b24:	f002 0204 	and.w	r2, r2, #4
 8000b28:	6032      	str	r2, [r6, #0]
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b30:	2001ff68 	.word	0x2001ff68
 8000b34:	0801f308 	.word	0x0801f308

08000b38 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000b38:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000b3a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000b3e:	46a4      	mov	ip, r4
  return ret;
}
 8000b40:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000b44:	4760      	bx	ip

08000b46 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000b46:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000b48:	6804      	ldr	r4, [r0, #0]
 8000b4a:	6880      	ldr	r0, [r0, #8]
 8000b4c:	46a4      	mov	ip, r4
  return ret;
}
 8000b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000b52:	4760      	bx	ip

08000b54 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_md_t val)
{
 8000b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b56:	2301      	movs	r3, #1
{
 8000b58:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b5a:	aa01      	add	r2, sp, #4
 8000b5c:	2160      	movs	r1, #96	; 0x60
{
 8000b5e:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b60:	f7ff ffea 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000b64:	b958      	cbnz	r0, 8000b7e <lis2mdl_operating_mode_set+0x2a>
    reg.md = (uint8_t)val;
 8000b66:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b6a:	aa01      	add	r2, sp, #4
 8000b6c:	2160      	movs	r1, #96	; 0x60
 8000b6e:	4620      	mov	r0, r4
    reg.md = (uint8_t)val;
 8000b70:	f365 0301 	bfi	r3, r5, #0, #2
 8000b74:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f7ff ffe4 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000b7e:	b003      	add	sp, #12
 8000b80:	bd30      	pop	{r4, r5, pc}

08000b82 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(lis2mdl_ctx_t *ctx, lis2mdl_odr_t val)
{
 8000b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b84:	2301      	movs	r3, #1
{
 8000b86:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b88:	aa01      	add	r2, sp, #4
 8000b8a:	2160      	movs	r1, #96	; 0x60
{
 8000b8c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b8e:	f7ff ffd3 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000b92:	b958      	cbnz	r0, 8000bac <lis2mdl_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
 8000b94:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000b98:	aa01      	add	r2, sp, #4
 8000b9a:	2160      	movs	r1, #96	; 0x60
 8000b9c:	4620      	mov	r0, r4
    reg.odr = (uint8_t)val;
 8000b9e:	f365 0383 	bfi	r3, r5, #2, #2
 8000ba2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f7ff ffcd 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000bac:	b003      	add	sp, #12
 8000bae:	bd30      	pop	{r4, r5, pc}

08000bb0 <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8000bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000bb2:	2301      	movs	r3, #1
{
 8000bb4:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000bb6:	aa01      	add	r2, sp, #4
 8000bb8:	2160      	movs	r1, #96	; 0x60
{
 8000bba:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000bbc:	f7ff ffbc 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000bc0:	b958      	cbnz	r0, 8000bda <lis2mdl_offset_temp_comp_set+0x2a>
    reg.comp_temp_en = val;
 8000bc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000bc6:	aa01      	add	r2, sp, #4
 8000bc8:	2160      	movs	r1, #96	; 0x60
 8000bca:	4620      	mov	r0, r4
    reg.comp_temp_en = val;
 8000bcc:	f365 13c7 	bfi	r3, r5, #7, #1
 8000bd0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f7ff ffb6 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000bda:	b003      	add	sp, #12
 8000bdc:	bd30      	pop	{r4, r5, pc}

08000bde <lis2mdl_low_pass_bandwidth_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_low_pass_bandwidth_set(lis2mdl_ctx_t *ctx,
                                       lis2mdl_lpf_t val)
{
 8000bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000be0:	2301      	movs	r3, #1
{
 8000be2:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000be4:	aa01      	add	r2, sp, #4
 8000be6:	2161      	movs	r1, #97	; 0x61
{
 8000be8:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000bea:	f7ff ffa5 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000bee:	b958      	cbnz	r0, 8000c08 <lis2mdl_low_pass_bandwidth_set+0x2a>
    reg.lpf = (uint8_t)val;
 8000bf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000bf4:	aa01      	add	r2, sp, #4
 8000bf6:	2161      	movs	r1, #97	; 0x61
 8000bf8:	4620      	mov	r0, r4
    reg.lpf = (uint8_t)val;
 8000bfa:	f365 0300 	bfi	r3, r5, #0, #1
 8000bfe:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c02:	2301      	movs	r3, #1
 8000c04:	f7ff ff9f 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd30      	pop	{r4, r5, pc}

08000c0c <lis2mdl_set_rst_mode_set>:
  * @param  val   change the values of set_rst in reg CFG_REG_B
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_set_rst_t val)
{
 8000c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c0e:	2301      	movs	r3, #1
{
 8000c10:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c12:	aa01      	add	r2, sp, #4
 8000c14:	2161      	movs	r1, #97	; 0x61
{
 8000c16:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c18:	f7ff ff8e 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000c1c:	b958      	cbnz	r0, 8000c36 <lis2mdl_set_rst_mode_set+0x2a>
    reg.set_rst = (uint8_t)val;
 8000c1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c22:	aa01      	add	r2, sp, #4
 8000c24:	2161      	movs	r1, #97	; 0x61
 8000c26:	4620      	mov	r0, r4
    reg.set_rst = (uint8_t)val;
 8000c28:	f365 0342 	bfi	r3, r5, #1, #2
 8000c2c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8000c30:	2301      	movs	r3, #1
 8000c32:	f7ff ff88 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000c36:	b003      	add	sp, #12
 8000c38:	bd30      	pop	{r4, r5, pc}

08000c3a <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8000c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000c3c:	2301      	movs	r3, #1
{
 8000c3e:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000c40:	aa01      	add	r2, sp, #4
 8000c42:	2162      	movs	r1, #98	; 0x62
{
 8000c44:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000c46:	f7ff ff77 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000c4a:	b958      	cbnz	r0, 8000c64 <lis2mdl_block_data_update_set+0x2a>
    reg.bdu = val;
 8000c4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000c50:	aa01      	add	r2, sp, #4
 8000c52:	2162      	movs	r1, #98	; 0x62
 8000c54:	4620      	mov	r0, r4
    reg.bdu = val;
 8000c56:	f365 1304 	bfi	r3, r5, #4, #1
 8000c5a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f7ff ff71 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000c64:	b003      	add	sp, #12
 8000c66:	bd30      	pop	{r4, r5, pc}

08000c68 <lis2mdl_device_id_get>:
  *
  */
int32_t lis2mdl_device_id_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8000c68:	460a      	mov	r2, r1
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	214f      	movs	r1, #79	; 0x4f
 8000c6e:	f7ff bf63 	b.w	8000b38 <lis2mdl_read_reg>

08000c72 <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8000c72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000c74:	2301      	movs	r3, #1
{
 8000c76:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000c78:	aa01      	add	r2, sp, #4
 8000c7a:	2160      	movs	r1, #96	; 0x60
{
 8000c7c:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000c7e:	f7ff ff5b 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000c82:	b958      	cbnz	r0, 8000c9c <lis2mdl_reset_set+0x2a>
    reg.soft_rst = val;
 8000c84:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000c88:	aa01      	add	r2, sp, #4
 8000c8a:	2160      	movs	r1, #96	; 0x60
 8000c8c:	4620      	mov	r0, r4
    reg.soft_rst = val;
 8000c8e:	f365 1345 	bfi	r3, r5, #5, #1
 8000c92:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000c96:	2301      	movs	r3, #1
 8000c98:	f7ff ff55 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd30      	pop	{r4, r5, pc}

08000ca0 <lis2mdl_reset_get>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_get(lis2mdl_ctx_t *ctx, uint8_t *val)
{
 8000ca0:	b513      	push	{r0, r1, r4, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000ca2:	2301      	movs	r3, #1
{
 8000ca4:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8000ca6:	aa01      	add	r2, sp, #4
 8000ca8:	2160      	movs	r1, #96	; 0x60
 8000caa:	f7ff ff45 	bl	8000b38 <lis2mdl_read_reg>
  *val = reg.soft_rst;
 8000cae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000cb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000cb6:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd10      	pop	{r4, pc}

08000cbc <lis2mdl_drdy_on_pin_set>:
  * @param  val   change the values of drdy_on_pin in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_drdy_on_pin_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8000cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000cbe:	2301      	movs	r3, #1
{
 8000cc0:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000cc2:	aa01      	add	r2, sp, #4
 8000cc4:	2162      	movs	r1, #98	; 0x62
{
 8000cc6:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000cc8:	f7ff ff36 	bl	8000b38 <lis2mdl_read_reg>
  
  if(ret == 0){
 8000ccc:	b958      	cbnz	r0, 8000ce6 <lis2mdl_drdy_on_pin_set+0x2a>
    reg.drdy_on_pin = val;
 8000cce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000cd2:	aa01      	add	r2, sp, #4
 8000cd4:	2162      	movs	r1, #98	; 0x62
 8000cd6:	4620      	mov	r0, r4
    reg.drdy_on_pin = val;
 8000cd8:	f365 0300 	bfi	r3, r5, #0, #1
 8000cdc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f7ff ff30 	bl	8000b46 <lis2mdl_write_reg>
  }
  
  return ret;
}
 8000ce6:	b003      	add	sp, #12
 8000ce8:	bd30      	pop	{r4, r5, pc}

08000cea <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8000cea:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000cec:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8000cf0:	46a4      	mov	ip, r4
  return ret;
}
 8000cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000cf6:	4760      	bx	ip

08000cf8 <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000cf8:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000cfa:	6804      	ldr	r4, [r0, #0]
 8000cfc:	6880      	ldr	r0, [r0, #8]
 8000cfe:	46a4      	mov	ip, r4
  return ret;
}
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000d04:	4760      	bx	ip

08000d06 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8000d06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d08:	2301      	movs	r3, #1
{
 8000d0a:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d0c:	aa01      	add	r2, sp, #4
 8000d0e:	2110      	movs	r1, #16
{
 8000d10:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d12:	f7ff ffea 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000d16:	b958      	cbnz	r0, 8000d30 <lsm6ds3_xl_full_scale_set+0x2a>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d1c:	aa01      	add	r2, sp, #4
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4620      	mov	r0, r4
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000d22:	f365 0383 	bfi	r3, r5, #2, #2
 8000d26:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f7ff ffe4 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000d30:	b003      	add	sp, #12
 8000d32:	bd30      	pop	{r4, r5, pc}

08000d34 <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8000d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d36:	2301      	movs	r3, #1
{
 8000d38:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d3a:	aa01      	add	r2, sp, #4
 8000d3c:	2110      	movs	r1, #16
{
 8000d3e:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d40:	f7ff ffd3 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000d44:	b958      	cbnz	r0, 8000d5e <lsm6ds3_xl_data_rate_set+0x2a>
    ctrl1_xl.odr_xl = (uint8_t)val;
 8000d46:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d4a:	aa01      	add	r2, sp, #4
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4620      	mov	r0, r4
    ctrl1_xl.odr_xl = (uint8_t)val;
 8000d50:	f365 1307 	bfi	r3, r5, #4, #4
 8000d54:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f7ff ffcd 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	bd30      	pop	{r4, r5, pc}

08000d62 <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 8000d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d64:	2301      	movs	r3, #1
{
 8000d66:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d68:	aa01      	add	r2, sp, #4
 8000d6a:	2111      	movs	r1, #17
{
 8000d6c:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d6e:	f7ff ffbc 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000d72:	b958      	cbnz	r0, 8000d8c <lsm6ds3_gy_full_scale_set+0x2a>
    ctrl2_g.fs_g = (uint8_t)val;
 8000d74:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d78:	aa01      	add	r2, sp, #4
 8000d7a:	2111      	movs	r1, #17
 8000d7c:	4620      	mov	r0, r4
    ctrl2_g.fs_g = (uint8_t)val;
 8000d7e:	f365 0343 	bfi	r3, r5, #1, #3
 8000d82:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d86:	2301      	movs	r3, #1
 8000d88:	f7ff ffb6 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd30      	pop	{r4, r5, pc}

08000d90 <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8000d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d92:	2301      	movs	r3, #1
{
 8000d94:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d96:	aa01      	add	r2, sp, #4
 8000d98:	2111      	movs	r1, #17
{
 8000d9a:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000d9c:	f7ff ffa5 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000da0:	b958      	cbnz	r0, 8000dba <lsm6ds3_gy_data_rate_set+0x2a>
    ctrl2_g.odr_g = (uint8_t)val;
 8000da2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000da6:	aa01      	add	r2, sp, #4
 8000da8:	2111      	movs	r1, #17
 8000daa:	4620      	mov	r0, r4
    ctrl2_g.odr_g = (uint8_t)val;
 8000dac:	f365 1307 	bfi	r3, r5, #4, #4
 8000db0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8000db4:	2301      	movs	r3, #1
 8000db6:	f7ff ff9f 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000dba:	b003      	add	sp, #12
 8000dbc:	bd30      	pop	{r4, r5, pc}

08000dbe <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8000dbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000dc0:	2301      	movs	r3, #1
{
 8000dc2:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000dc4:	aa01      	add	r2, sp, #4
 8000dc6:	2112      	movs	r1, #18
{
 8000dc8:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000dca:	f7ff ff8e 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000dce:	b958      	cbnz	r0, 8000de8 <lsm6ds3_block_data_update_set+0x2a>
    ctrl3_c.bdu = (uint8_t)val;
 8000dd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000dd4:	aa01      	add	r2, sp, #4
 8000dd6:	2112      	movs	r1, #18
 8000dd8:	4620      	mov	r0, r4
    ctrl3_c.bdu = (uint8_t)val;
 8000dda:	f365 1386 	bfi	r3, r5, #6, #1
 8000dde:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000de2:	2301      	movs	r3, #1
 8000de4:	f7ff ff88 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000de8:	b003      	add	sp, #12
 8000dea:	bd30      	pop	{r4, r5, pc}

08000dec <lsm6ds3_device_id_get>:
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8000dec:	460a      	mov	r2, r1
 8000dee:	2301      	movs	r3, #1
 8000df0:	210f      	movs	r1, #15
 8000df2:	f7ff bf7a 	b.w	8000cea <lsm6ds3_read_reg>

08000df6 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8000df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000df8:	2301      	movs	r3, #1
{
 8000dfa:	460d      	mov	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000dfc:	aa01      	add	r2, sp, #4
 8000dfe:	2112      	movs	r1, #18
{
 8000e00:	4604      	mov	r4, r0
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000e02:	f7ff ff72 	bl	8000cea <lsm6ds3_read_reg>
  if(ret == 0){
 8000e06:	b958      	cbnz	r0, 8000e20 <lsm6ds3_reset_set+0x2a>
    ctrl3_c.sw_reset = (uint8_t)val;
 8000e08:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000e0c:	aa01      	add	r2, sp, #4
 8000e0e:	2112      	movs	r1, #18
 8000e10:	4620      	mov	r0, r4
    ctrl3_c.sw_reset = (uint8_t)val;
 8000e12:	f365 0300 	bfi	r3, r5, #0, #1
 8000e16:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f7ff ff6c 	bl	8000cf8 <lsm6ds3_write_reg>
  }
  return ret;
}
 8000e20:	b003      	add	sp, #12
 8000e22:	bd30      	pop	{r4, r5, pc}

08000e24 <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8000e24:	b513      	push	{r0, r1, r4, lr}
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000e26:	2301      	movs	r3, #1
{
 8000e28:	460c      	mov	r4, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8000e2a:	aa01      	add	r2, sp, #4
 8000e2c:	2112      	movs	r1, #18
 8000e2e:	f7ff ff5c 	bl	8000cea <lsm6ds3_read_reg>
  *val = (uint8_t)ctrl3_c.sw_reset;
 8000e32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e3a:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd10      	pop	{r4, pc}

08000e40 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler : I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	4605      	mov	r5, r0
	if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e46:	f002 f853 	bl	8002ef0 <HAL_I2C_GetState>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d155      	bne.n	8000efa <I2Cx_Init+0xba>
	{
		if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <I2Cx_Init+0x138>)
		{
			/* External, camera and Arduino connector  I2C configuration */
			i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
		}
		i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
		i2c_handler->Init.OwnAddress1      = 0;
 8000e50:	2600      	movs	r6, #0
 8000e52:	4c4a      	ldr	r4, [pc, #296]	; (8000f7c <I2Cx_Init+0x13c>)
		if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e54:	429d      	cmp	r5, r3
		i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
		i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
		i2c_handler->Init.OwnAddress2      = 0;
 8000e56:	616e      	str	r6, [r5, #20]
			i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000e58:	bf0c      	ite	eq
 8000e5a:	4a49      	ldreq	r2, [pc, #292]	; (8000f80 <I2Cx_Init+0x140>)
			i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e5c:	4a49      	ldrne	r2, [pc, #292]	; (8000f84 <I2Cx_Init+0x144>)
	if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e5e:	429d      	cmp	r5, r3
			i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e60:	602a      	str	r2, [r5, #0]
		i2c_handler->Init.OwnAddress1      = 0;
 8000e62:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <I2Cx_Init+0x148>)
 8000e64:	e9c5 2601 	strd	r2, r6, [r5, #4]
		i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	f04f 0201 	mov.w	r2, #1
		i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
		i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e6c:	e9c5 6607 	strd	r6, r6, [r5, #28]
		i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e70:	e9c5 2603 	strd	r2, r6, [r5, #12]
		DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e74:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e76:	d142      	bne.n	8000efe <I2Cx_Init+0xbe>
		DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2080      	movs	r0, #128	; 0x80
		gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e7e:	f04f 0c02 	mov.w	ip, #2
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e82:	a905      	add	r1, sp, #20
		DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e84:	6323      	str	r3, [r4, #48]	; 0x30
 8000e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
		gpio_init_structure.Pull = GPIO_NOPULL;
 8000e88:	9607      	str	r6, [sp, #28]
		DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	9b01      	ldr	r3, [sp, #4]
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e92:	2312      	movs	r3, #18
 8000e94:	e9cd 0305 	strd	r0, r3, [sp, #20]
		gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e98:	2304      	movs	r3, #4
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e9a:	483c      	ldr	r0, [pc, #240]	; (8000f8c <I2Cx_Init+0x14c>)
		gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e9c:	e9cd c308 	strd	ip, r3, [sp, #32]
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ea0:	f001 fc06 	bl	80026b0 <HAL_GPIO_Init>
		gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ea8:	a905      	add	r1, sp, #20
 8000eaa:	4838      	ldr	r0, [pc, #224]	; (8000f8c <I2Cx_Init+0x14c>)
		gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000eac:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eae:	f001 fbff 	bl	80026b0 <HAL_GPIO_Init>
		DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb4:	4632      	mov	r2, r6
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	2048      	movs	r0, #72	; 0x48
		DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000eba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ebe:	6423      	str	r3, [r4, #64]	; 0x40
 8000ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	9b02      	ldr	r3, [sp, #8]
		DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000eca:	6a23      	ldr	r3, [r4, #32]
 8000ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed0:	6223      	str	r3, [r4, #32]
		DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ed8:	6223      	str	r3, [r4, #32]
		HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000eda:	f001 f9b1 	bl	8002240 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ede:	2048      	movs	r0, #72	; 0x48
 8000ee0:	f001 f9e0 	bl	80022a4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ee4:	2049      	movs	r0, #73	; 0x49
 8000ee6:	4632      	mov	r2, r6
 8000ee8:	210f      	movs	r1, #15
 8000eea:	f001 f9a9 	bl	8002240 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000eee:	2049      	movs	r0, #73	; 0x49
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ef0:	f001 f9d8 	bl	80022a4 <HAL_NVIC_EnableIRQ>

		/* Init the I2C */
		I2Cx_MspInit(i2c_handler);
		HAL_I2C_Init(i2c_handler);
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f001 fe21 	bl	8002b3c <HAL_I2C_Init>
	}
}
 8000efa:	b00a      	add	sp, #40	; 0x28
 8000efc:	bd70      	pop	{r4, r5, r6, pc}
		DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000efe:	f043 0302 	orr.w	r3, r3, #2
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f02:	f44f 7280 	mov.w	r2, #256	; 0x100
		gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f06:	2102      	movs	r1, #2
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f08:	4821      	ldr	r0, [pc, #132]	; (8000f90 <I2Cx_Init+0x150>)
		DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0e:	9607      	str	r6, [sp, #28]
		DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	9303      	str	r3, [sp, #12]
 8000f16:	9b03      	ldr	r3, [sp, #12]
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
		gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e9cd 1308 	strd	r1, r3, [sp, #32]
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f24:	a905      	add	r1, sp, #20
 8000f26:	f001 fbc3 	bl	80026b0 <HAL_GPIO_Init>
		gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f2e:	a905      	add	r1, sp, #20
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <I2Cx_Init+0x150>)
		gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f32:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f34:	f001 fbbc 	bl	80026b0 <HAL_GPIO_Init>
		DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f3a:	4632      	mov	r2, r6
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	201f      	movs	r0, #31
		DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f44:	6423      	str	r3, [r4, #64]	; 0x40
 8000f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	9304      	str	r3, [sp, #16]
 8000f4e:	9b04      	ldr	r3, [sp, #16]
		DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f50:	6a23      	ldr	r3, [r4, #32]
 8000f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f56:	6223      	str	r3, [r4, #32]
		DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f58:	6a23      	ldr	r3, [r4, #32]
 8000f5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f5e:	6223      	str	r3, [r4, #32]
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f60:	f001 f96e 	bl	8002240 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000f64:	201f      	movs	r0, #31
 8000f66:	f001 f99d 	bl	80022a4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	4632      	mov	r2, r6
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f001 f966 	bl	8002240 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000f74:	2020      	movs	r0, #32
 8000f76:	e7bb      	b.n	8000ef0 <I2Cx_Init+0xb0>
 8000f78:	2001ff70 	.word	0x2001ff70
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40005c00 	.word	0x40005c00
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40912732 	.word	0x40912732
 8000f8c:	40021c00 	.word	0x40021c00
 8000f90:	40020400 	.word	0x40020400

08000f94 <I2Cx_WriteMultiple>:
		uint8_t Addr,
		uint16_t Reg,
		uint16_t MemAddress,
		uint8_t *Buffer,
		uint16_t Length)
{
 8000f94:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status = HAL_OK;

	status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f96:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f9e:	9402      	str	r4, [sp, #8]
 8000fa0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000fa4:	9401      	str	r4, [sp, #4]
 8000fa6:	9c08      	ldr	r4, [sp, #32]
 8000fa8:	9400      	str	r4, [sp, #0]
 8000faa:	f001 fe32 	bl	8002c12 <HAL_I2C_Mem_Write>

	/* Check the communication status */
	if(status != HAL_OK)
 8000fae:	4604      	mov	r4, r0
 8000fb0:	b128      	cbz	r0, 8000fbe <I2Cx_WriteMultiple+0x2a>
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(i2c_handler);
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f001 fe14 	bl	8002be0 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init(i2c_handler);
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f7ff ff41 	bl	8000e40 <I2Cx_Init>
}
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	b005      	add	sp, #20
 8000fc2:	bd30      	pop	{r4, r5, pc}

08000fc4 <I2Cx_ReadMultiple>:
{
 8000fc4:	b530      	push	{r4, r5, lr}
	status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fc6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8000fca:	b085      	sub	sp, #20
 8000fcc:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fce:	9402      	str	r4, [sp, #8]
 8000fd0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000fd4:	9401      	str	r4, [sp, #4]
 8000fd6:	9c08      	ldr	r4, [sp, #32]
 8000fd8:	9400      	str	r4, [sp, #0]
 8000fda:	f001 fecf 	bl	8002d7c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b128      	cbz	r0, 8000fee <I2Cx_ReadMultiple+0x2a>
	HAL_I2C_DeInit(i2c_handler);
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	f001 fdfc 	bl	8002be0 <HAL_I2C_DeInit>
	I2Cx_Init(i2c_handler);
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff ff29 	bl	8000e40 <I2Cx_Init>
}
 8000fee:	4620      	mov	r0, r4
 8000ff0:	b005      	add	sp, #20
 8000ff2:	bd30      	pop	{r4, r5, pc}

08000ff4 <BSP_LED_Init>:
{
 8000ff4:	b530      	push	{r4, r5, lr}
	if (Led == LED1)
 8000ff6:	4605      	mov	r5, r0
{
 8000ff8:	b087      	sub	sp, #28
	if (Led == LED1)
 8000ffa:	b9c8      	cbnz	r0, 8001030 <BSP_LED_Init+0x3c>
		LED1_GPIO_CLK_ENABLE();
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <BSP_LED_Init+0x40>)
		gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2402      	movs	r4, #2
		HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <BSP_LED_Init+0x44>)
		LED1_GPIO_CLK_ENABLE();
 8001002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001004:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001008:	6319      	str	r1, [r3, #48]	; 0x30
		HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800100a:	a901      	add	r1, sp, #4
		LED1_GPIO_CLK_ENABLE();
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	9b00      	ldr	r3, [sp, #0]
		gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	e9cd 4301 	strd	r4, r3, [sp, #4]
		gpio_init_structure.Pull = GPIO_PULLUP;
 800101c:	9303      	str	r3, [sp, #12]
		gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001022:	f001 fb45 	bl	80026b0 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001026:	462a      	mov	r2, r5
 8001028:	4621      	mov	r1, r4
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <BSP_LED_Init+0x44>)
 800102c:	f001 fc30 	bl	8002890 <HAL_GPIO_WritePin>
}
 8001030:	b007      	add	sp, #28
 8001032:	bd30      	pop	{r4, r5, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40022000 	.word	0x40022000

0800103c <BSP_LED_Toggle>:
	if (Led == LED1)	/* Toggle LED connected to GPIO */
 800103c:	b918      	cbnz	r0, 8001046 <BSP_LED_Toggle+0xa>
		HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800103e:	2102      	movs	r1, #2
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <BSP_LED_Toggle+0xc>)
 8001042:	f001 bc2a 	b.w	800289a <HAL_GPIO_TogglePin>
}
 8001046:	4770      	bx	lr
 8001048:	40022000 	.word	0x40022000

0800104c <BSP_PB_Init>:
{
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <BSP_PB_Init+0x94>)
	BUTTONx_GPIO_CLK_ENABLE(Button);
 800104e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8001054:	b530      	push	{r4, r5, lr}
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001058:	b089      	sub	sp, #36	; 0x24
	BUTTONx_GPIO_CLK_ENABLE(Button);
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4604      	mov	r4, r0
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	b990      	cbnz	r0, 800108a <BSP_PB_Init+0x3e>
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	9b00      	ldr	r3, [sp, #0]
	if(ButtonMode == BUTTON_MODE_GPIO)
 8001068:	b9b9      	cbnz	r1, 800109a <BSP_PB_Init+0x4e>
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <BSP_PB_Init+0x98>)
		gpio_init_structure.Pull = GPIO_NOPULL;
 800106c:	9105      	str	r1, [sp, #20]
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 800106e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
		gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001072:	e9cd 3103 	strd	r3, r1, [sp, #12]
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001076:	2302      	movs	r3, #2
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001078:	a903      	add	r1, sp, #12
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800107a:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <BSP_PB_Init+0x9c>)
 800107e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001082:	f001 fb15 	bl	80026b0 <HAL_GPIO_Init>
}
 8001086:	b009      	add	sp, #36	; 0x24
 8001088:	bd30      	pop	{r4, r5, pc}
	BUTTONx_GPIO_CLK_ENABLE(Button);
 800108a:	2801      	cmp	r0, #1
 800108c:	d102      	bne.n	8001094 <BSP_PB_Init+0x48>
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
 8001092:	e7e9      	b.n	8001068 <BSP_PB_Init+0x1c>
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	9b02      	ldr	r3, [sp, #8]
 8001098:	e7e6      	b.n	8001068 <BSP_PB_Init+0x1c>
	if(ButtonMode == BUTTON_MODE_EXTI)
 800109a:	2901      	cmp	r1, #1
 800109c:	d1f3      	bne.n	8001086 <BSP_PB_Init+0x3a>
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 800109e:	4d11      	ldr	r5, [pc, #68]	; (80010e4 <BSP_PB_Init+0x98>)
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80010a0:	2300      	movs	r3, #0
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 80010a2:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 80010a6:	9203      	str	r2, [sp, #12]
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80010a8:	2202      	movs	r2, #2
 80010aa:	e9cd 3205 	strd	r3, r2, [sp, #20]
		if(Button != BUTTON_WAKEUP)
 80010ae:	b1a4      	cbz	r4, 80010da <BSP_PB_Init+0x8e>
			gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <BSP_PB_Init+0xa0>)
			gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80010b2:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010b4:	a903      	add	r1, sp, #12
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <BSP_PB_Init+0x9c>)
 80010b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80010bc:	eb05 0444 	add.w	r4, r5, r4, lsl #1
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010c0:	f001 faf6 	bl	80026b0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f994 4006 	ldrsb.w	r4, [r4, #6]
 80010ca:	210f      	movs	r1, #15
 80010cc:	4620      	mov	r0, r4
 80010ce:	f001 f8b7 	bl	8002240 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80010d2:	4620      	mov	r0, r4
 80010d4:	f001 f8e6 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 80010d8:	e7d5      	b.n	8001086 <BSP_PB_Init+0x3a>
			gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <BSP_PB_Init+0xa4>)
 80010dc:	e7e9      	b.n	80010b2 <BSP_PB_Init+0x66>
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	0801f350 	.word	0x0801f350
 80010e8:	20000028 	.word	0x20000028
 80010ec:	10210000 	.word	0x10210000
 80010f0:	10110000 	.word	0x10110000

080010f4 <BSP_COM_Init>:
{
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <BSP_COM_Init+0xc0>)
 80010f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80010f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
 80010fa:	b08d      	sub	sp, #52	; 0x34
 80010fc:	460f      	mov	r7, r1
	DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80010fe:	2800      	cmp	r0, #0
 8001100:	d13c      	bne.n	800117c <BSP_COM_Init+0x88>
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
 8001108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110a:	f002 0201 	and.w	r2, r2, #1
 800110e:	9201      	str	r2, [sp, #4]
 8001110:	9a01      	ldr	r2, [sp, #4]
	DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001114:	f042 0202 	orr.w	r2, r2, #2
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
 800111a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111c:	f002 0202 	and.w	r2, r2, #2
 8001120:	9203      	str	r2, [sp, #12]
 8001122:	9a03      	ldr	r2, [sp, #12]
	DISCOVERY_COMx_CLK_ENABLE(COM);
 8001124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001126:	f042 0210 	orr.w	r2, r2, #16
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	9305      	str	r3, [sp, #20]
 8001134:	9b05      	ldr	r3, [sp, #20]
	gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001136:	4c20      	ldr	r4, [pc, #128]	; (80011b8 <BSP_COM_Init+0xc4>)
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001138:	2602      	movs	r6, #2
	HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800113a:	4d20      	ldr	r5, [pc, #128]	; (80011bc <BSP_COM_Init+0xc8>)
 800113c:	a907      	add	r1, sp, #28
	gpio_init_structure.Pin = COM_TX_PIN[COM];
 800113e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001142:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001144:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001148:	960a      	str	r6, [sp, #40]	; 0x28
	gpio_init_structure.Pin = COM_TX_PIN[COM];
 800114a:	89a3      	ldrh	r3, [r4, #12]
	HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800114c:	68e8      	ldr	r0, [r5, #12]
	gpio_init_structure.Pin = COM_TX_PIN[COM];
 800114e:	9307      	str	r3, [sp, #28]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	9309      	str	r3, [sp, #36]	; 0x24
	gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001154:	8a23      	ldrh	r3, [r4, #16]
 8001156:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001158:	f001 faaa 	bl	80026b0 <HAL_GPIO_Init>
	gpio_init_structure.Pin = COM_RX_PIN[COM];
 800115c:	8aa3      	ldrh	r3, [r4, #20]
	HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800115e:	a907      	add	r1, sp, #28
 8001160:	6968      	ldr	r0, [r5, #20]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001162:	e9cd 3607 	strd	r3, r6, [sp, #28]
	gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001166:	8b23      	ldrh	r3, [r4, #24]
 8001168:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800116a:	f001 faa1 	bl	80026b0 <HAL_GPIO_Init>
	huart->Instance = COM_USART[COM];
 800116e:	69eb      	ldr	r3, [r5, #28]
	return HAL_UART_Init(huart);
 8001170:	4638      	mov	r0, r7
	huart->Instance = COM_USART[COM];
 8001172:	603b      	str	r3, [r7, #0]
	return HAL_UART_Init(huart);
 8001174:	f004 f9bf 	bl	80054f6 <HAL_UART_Init>
}
 8001178:	b00d      	add	sp, #52	; 0x34
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800117c:	f042 0204 	orr.w	r2, r2, #4
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
 8001182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001184:	f002 0204 	and.w	r2, r2, #4
 8001188:	9202      	str	r2, [sp, #8]
 800118a:	9a02      	ldr	r2, [sp, #8]
	DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118e:	f042 0204 	orr.w	r2, r2, #4
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
 8001194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001196:	f002 0204 	and.w	r2, r2, #4
 800119a:	9204      	str	r2, [sp, #16]
 800119c:	9a04      	ldr	r2, [sp, #16]
	DISCOVERY_COMx_CLK_ENABLE(COM);
 800119e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	9306      	str	r3, [sp, #24]
 80011ae:	9b06      	ldr	r3, [sp, #24]
 80011b0:	e7c1      	b.n	8001136 <BSP_COM_Init+0x42>
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	0801f350 	.word	0x0801f350
 80011bc:	20000028 	.word	0x20000028

080011c0 <AUDIO_IO_Init>:
 * @brief  Initializes Audio low level.
 * @retval None
 */
void AUDIO_IO_Init(void) 
{
	I2Cx_Init(&hI2cAudioHandler);
 80011c0:	4801      	ldr	r0, [pc, #4]	; (80011c8 <AUDIO_IO_Init+0x8>)
 80011c2:	f7ff be3d 	b.w	8000e40 <I2Cx_Init>
 80011c6:	bf00      	nop
 80011c8:	2001ff70 	.word	0x2001ff70

080011cc <TS_IO_Init>:
 80011cc:	f7ff bff8 	b.w	80011c0 <AUDIO_IO_Init>

080011d0 <TS_IO_Write>:
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80011d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011d2:	ac04      	add	r4, sp, #16
	I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80011d4:	2301      	movs	r3, #1
{
 80011d6:	f804 2d01 	strb.w	r2, [r4, #-1]!
	I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80011da:	460a      	mov	r2, r1
 80011dc:	4601      	mov	r1, r0
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <TS_IO_Write+0x1c>)
 80011e0:	e9cd 4300 	strd	r4, r3, [sp]
 80011e4:	f7ff fed6 	bl	8000f94 <I2Cx_WriteMultiple>
}
 80011e8:	b004      	add	sp, #16
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	2001ff70 	.word	0x2001ff70

080011f0 <TS_IO_Read>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80011f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t read_value = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	aa04      	add	r2, sp, #16
 80011f6:	f802 3d01 	strb.w	r3, [r2, #-1]!

	I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80011fa:	2301      	movs	r3, #1
 80011fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001200:	460a      	mov	r2, r1
 8001202:	4601      	mov	r1, r0
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <TS_IO_Read+0x24>)
 8001206:	f7ff fedd 	bl	8000fc4 <I2Cx_ReadMultiple>

	return read_value;
}
 800120a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800120e:	b005      	add	sp, #20
 8001210:	f85d fb04 	ldr.w	pc, [sp], #4
 8001214:	2001ff70 	.word	0x2001ff70

08001218 <TS_IO_Delay>:
 8001218:	f000 bfee 	b.w	80021f8 <HAL_Delay>

0800121c <HAL_UART_RxCpltCallback>:
}

/**************************** COMx *****************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == COM_USART[COM1])
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_UART_RxCpltCallback+0x18>)
 800121e:	6802      	ldr	r2, [r0, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	429a      	cmp	r2, r3
 8001224:	d105      	bne.n	8001232 <HAL_UART_RxCpltCallback+0x16>
		BSP_STDIO_DataReceived	((char*)(huart->pRxBuffPtr-huart->RxXferSize), huart->RxXferSize);
 8001226:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800122a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800122c:	1a40      	subs	r0, r0, r1
 800122e:	f000 be59 	b.w	8001ee4 <BSP_STDIO_DataReceived>
}
 8001232:	4770      	bx	lr
 8001234:	20000028 	.word	0x20000028

08001238 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8001238:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD_H, reg,
 800123a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	460a      	mov	r2, r1
 8001242:	21d7      	movs	r1, #215	; 0xd7
 8001244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001248:	2301      	movs	r3, #1
 800124a:	f001 fd97 	bl	8002d7c <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
}
 800124e:	2000      	movs	r0, #0
 8001250:	b004      	add	sp, #16
 8001252:	bd10      	pop	{r4, pc}

08001254 <platform_write>:
{
 8001254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD_H, reg,
 8001256:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	460a      	mov	r2, r1
 800125e:	21d7      	movs	r1, #215	; 0xd7
 8001260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001264:	2301      	movs	r3, #1
 8001266:	f001 fcd4 	bl	8002c12 <HAL_I2C_Mem_Write>
}
 800126a:	2000      	movs	r0, #0
 800126c:	b004      	add	sp, #16
 800126e:	bd10      	pop	{r4, pc}

08001270 <BSP_ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_ACC_GYRO_MspInit(void)
{
 8001270:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef gpio_init_structure;
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001272:	4c22      	ldr	r4, [pc, #136]	; (80012fc <BSP_ACC_GYRO_MspInit+0x8c>)
{
 8001274:	b089      	sub	sp, #36	; 0x24

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001276:	f44f 7280 	mov.w	r2, #256	; 0x100
	gpio_init_structure.Pull = GPIO_PULLUP;
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800127a:	2101      	movs	r1, #1
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800127c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800127e:	4d20      	ldr	r5, [pc, #128]	; (8001300 <BSP_ACC_GYRO_MspInit+0x90>)
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001280:	f043 0302 	orr.w	r3, r3, #2
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001284:	4628      	mov	r0, r5
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001286:	6323      	str	r3, [r4, #48]	; 0x30
 8001288:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	9b01      	ldr	r3, [sp, #4]
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001292:	2312      	movs	r3, #18
 8001294:	e9cd 2303 	strd	r2, r3, [sp, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001298:	2302      	movs	r3, #2
 800129a:	e9cd 1305 	strd	r1, r3, [sp, #20]
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800129e:	2304      	movs	r3, #4
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012a0:	a903      	add	r1, sp, #12
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80012a2:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012a4:	f001 fa04 	bl	80026b0 <HAL_GPIO_Init>

	/* Configure I2C Rx as alternate function */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012ac:	a903      	add	r1, sp, #12
 80012ae:	4628      	mov	r0, r5
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80012b0:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80012b2:	f001 f9fd 	bl	80026b0 <HAL_GPIO_Init>
	//	HAL_NVIC_EnableIRQ(I2C1_  SPI2_IRQn);


	/*** Configure the I2C peripheral ***/
	/* Enable I2C clock */
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80012b6:	6c23      	ldr	r3, [r4, #64]	; 0x40

	/* Release the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	210f      	movs	r1, #15
 80012bc:	201f      	movs	r0, #31
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80012be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c2:	6423      	str	r3, [r4, #64]	; 0x40
 80012c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	9b02      	ldr	r3, [sp, #8]
	DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80012ce:	6a23      	ldr	r3, [r4, #32]
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6223      	str	r3, [r4, #32]
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80012d6:	6a23      	ldr	r3, [r4, #32]
 80012d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012dc:	6223      	str	r3, [r4, #32]
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80012de:	f000 ffaf 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80012e2:	201f      	movs	r0, #31
 80012e4:	f000 ffde 	bl	80022a4 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	210f      	movs	r1, #15
 80012ec:	2020      	movs	r0, #32
 80012ee:	f000 ffa7 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80012f2:	2020      	movs	r0, #32
 80012f4:	f000 ffd6 	bl	80022a4 <HAL_NVIC_EnableIRQ>

	//	/* Enable and set EXTI9-5 Interrupt to the lowest priority */
	//	HAL_NVIC_SetPriority(ACC_GYRO_DRDY_EXTI_IRQn, 0xFF, 0);
	//	HAL_NVIC_EnableIRQ(ACC_GYRO_DRDY_EXTI_IRQn);
}
 80012f8:	b009      	add	sp, #36	; 0x24
 80012fa:	bd30      	pop	{r4, r5, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400

08001304 <BSP_ACC_GYRO_Init>:
{ 
 8001304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	I2CHandle.Instance = ACC_GYRO_I2Cx;
 8001306:	4c2b      	ldr	r4, [pc, #172]	; (80013b4 <BSP_ACC_GYRO_Init+0xb0>)
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <BSP_ACC_GYRO_Init+0xb4>)
 800130a:	4626      	mov	r6, r4
 800130c:	f846 3f04 	str.w	r3, [r6, #4]!
	if (HAL_I2C_DeInit(&I2CHandle) != HAL_OK)
 8001310:	4630      	mov	r0, r6
 8001312:	f001 fc65 	bl	8002be0 <HAL_I2C_DeInit>
 8001316:	4605      	mov	r5, r0
 8001318:	b118      	cbz	r0, 8001322 <BSP_ACC_GYRO_Init+0x1e>
		return ACC_ERROR;
 800131a:	2601      	movs	r6, #1
}
 800131c:	4630      	mov	r0, r6
 800131e:	b003      	add	sp, #12
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BSP_ACC_GYRO_MspInit();
 8001322:	f7ff ffa5 	bl	8001270 <BSP_ACC_GYRO_MspInit>
	I2CHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001326:	2701      	movs	r7, #1
	I2CHandle.Init.OwnAddress1     = 0xFF;
 8001328:	23ff      	movs	r3, #255	; 0xff
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <BSP_ACC_GYRO_Init+0xb8>)
	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 800132c:	4630      	mov	r0, r6
	I2CHandle.Init.OwnAddress2     = 0xFF;
 800132e:	61a3      	str	r3, [r4, #24]
	I2CHandle.Init.OwnAddress1     = 0xFF;
 8001330:	e9c4 2302 	strd	r2, r3, [r4, #8]
	I2CHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	e9c4 7504 	strd	r7, r5, [r4, #16]
	I2CHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001338:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 800133c:	f001 fbfe 	bl	8002b3c <HAL_I2C_Init>
 8001340:	4601      	mov	r1, r0
 8001342:	2800      	cmp	r0, #0
 8001344:	d1e9      	bne.n	800131a <BSP_ACC_GYRO_Init+0x16>
	HAL_I2CEx_ConfigAnalogFilter(&I2CHandle,I2C_ANALOGFILTER_ENABLE);
 8001346:	4630      	mov	r0, r6
	sensorCtx.write_reg = platform_write;
 8001348:	4d1d      	ldr	r5, [pc, #116]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
	HAL_I2CEx_ConfigAnalogFilter(&I2CHandle,I2C_ANALOGFILTER_ENABLE);
 800134a:	f001 fdd4 	bl	8002ef6 <HAL_I2CEx_ConfigAnalogFilter>
	sensorCtx.write_reg = platform_write;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <BSP_ACC_GYRO_Init+0xc0>)
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8001350:	f10d 0106 	add.w	r1, sp, #6
 8001354:	4628      	mov	r0, r5
	sensorCtx.write_reg = platform_write;
 8001356:	602b      	str	r3, [r5, #0]
	sensorCtx.read_reg = platform_read;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <BSP_ACC_GYRO_Init+0xc4>)
	sensorCtx.handle = &I2CHandle;
 800135a:	e9c5 3601 	strd	r3, r6, [r5, #4]
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 800135e:	f7ff fd45 	bl	8000dec <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 8001362:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001366:	2b69      	cmp	r3, #105	; 0x69
 8001368:	d1d7      	bne.n	800131a <BSP_ACC_GYRO_Init+0x16>
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 800136a:	4639      	mov	r1, r7
 800136c:	4628      	mov	r0, r5
 800136e:	f7ff fd42 	bl	8000df6 <lsm6ds3_reset_set>
		lsm6ds3_reset_get(&sensorCtx, &rst);
 8001372:	f10d 0107 	add.w	r1, sp, #7
 8001376:	4628      	mov	r0, r5
 8001378:	f7ff fd54 	bl	8000e24 <lsm6ds3_reset_get>
	} while (rst);
 800137c:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8001380:	2e00      	cmp	r6, #0
 8001382:	d1f6      	bne.n	8001372 <BSP_ACC_GYRO_Init+0x6e>
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 8001384:	2101      	movs	r1, #1
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
 8001388:	f7ff fd19 	bl	8000dbe <lsm6ds3_block_data_update_set>
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_4g);
 800138c:	2102      	movs	r1, #2
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
 8001390:	f7ff fcb9 	bl	8000d06 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_1000dps);
 8001394:	2104      	movs	r1, #4
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
 8001398:	f7ff fce3 	bl	8000d62 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_XL_ODR_833Hz);
 800139c:	2107      	movs	r1, #7
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
 80013a0:	f7ff fcc8 	bl	8000d34 <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GY_ODR_833Hz);
 80013a4:	2107      	movs	r1, #7
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <BSP_ACC_GYRO_Init+0xbc>)
 80013a8:	f7ff fcf2 	bl	8000d90 <lsm6ds3_gy_data_rate_set>
	accSensorEnabled = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	7023      	strb	r3, [r4, #0]
	return ACC_OK;
 80013b0:	e7b4      	b.n	800131c <BSP_ACC_GYRO_Init+0x18>
 80013b2:	bf00      	nop
 80013b4:	20020008 	.word	0x20020008
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40912732 	.word	0x40912732
 80013c0:	2002898c 	.word	0x2002898c
 80013c4:	08001255 	.word	0x08001255
 80013c8:	08001239 	.word	0x08001239

080013cc <BSP_KEYS_MspInit>:
{
	GPIO_InitTypeDef gpio_init_structure;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable the Keys (SPI) interface clock */
	KEYS_CLK_ENABLE();
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <BSP_KEYS_MspInit+0xd8>)
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_CS_PIN;
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
	gpio_init_structure.Pull      = GPIO_NOPULL;
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(KEYS_CS_GPIO_PORT, &gpio_init_structure);
 80013ce:	4836      	ldr	r0, [pc, #216]	; (80014a8 <BSP_KEYS_MspInit+0xdc>)
	KEYS_CLK_ENABLE();
 80013d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
{
 80013d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	KEYS_CLK_ENABLE();
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
{
 80013da:	b08b      	sub	sp, #44	; 0x2c
	KEYS_CLK_ENABLE();
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80013de:	2701      	movs	r7, #1
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80013e0:	2400      	movs	r4, #0

	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_LOAD_PIN;
	HAL_GPIO_Init(KEYS_LOAD_GPIO_PORT, &gpio_init_structure);
 80013e2:	4d32      	ldr	r5, [pc, #200]	; (80014ac <BSP_KEYS_MspInit+0xe0>)
	KEYS_CLK_ENABLE();
 80013e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
	HAL_GPIO_Init(KEYS_CS_GPIO_PORT, &gpio_init_structure);
 80013e8:	a905      	add	r1, sp, #20

	//TODO: A supprimer quand le driver BMP280 sera pret
	/* BMP280 CS GPIO pin configuration , to put it high */
	gpio_init_structure.Pin       = GPIO_PIN_8;
 80013ea:	f44f 7680 	mov.w	r6, #256	; 0x100
	KEYS_CLK_ENABLE();
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	9a00      	ldr	r2, [sp, #0]
	KEYS_CS_GPIO_CLK_ENABLE();
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	9a01      	ldr	r2, [sp, #4]
	KEYS_CLK_GPIO_CLK_ENABLE();
 8001404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001412:	9202      	str	r2, [sp, #8]
 8001414:	9a02      	ldr	r2, [sp, #8]
	KEYS_MISO_GPIO_CLK_ENABLE();
 8001416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001418:	f042 0202 	orr.w	r2, r2, #2
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001420:	f002 0202 	and.w	r2, r2, #2
 8001424:	9203      	str	r2, [sp, #12]
 8001426:	9a03      	ldr	r2, [sp, #12]
	KEYS_LOAD_GPIO_CLK_ENABLE();
 8001428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	9304      	str	r3, [sp, #16]
 8001438:	9b04      	ldr	r3, [sp, #16]
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	e9cd 4307 	strd	r4, r3, [sp, #28]
	HAL_GPIO_Init(KEYS_CS_GPIO_PORT, &gpio_init_structure);
 8001446:	f001 f933 	bl	80026b0 <HAL_GPIO_Init>
	gpio_init_structure.Pin       = KEYS_LOAD_PIN;
 800144a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(KEYS_LOAD_GPIO_PORT, &gpio_init_structure);
 800144e:	a905      	add	r1, sp, #20
 8001450:	4628      	mov	r0, r5
	gpio_init_structure.Pin       = KEYS_LOAD_PIN;
 8001452:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(KEYS_LOAD_GPIO_PORT, &gpio_init_structure);
 8001454:	f001 f92c 	bl	80026b0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8001458:	a905      	add	r1, sp, #20
 800145a:	4628      	mov	r0, r5
	gpio_init_structure.Pin       = GPIO_PIN_8;
 800145c:	9605      	str	r6, [sp, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800145e:	f001 f927 	bl	80026b0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8001462:	463a      	mov	r2, r7
 8001464:	4631      	mov	r1, r6
 8001466:	4628      	mov	r0, r5

	/* KEYS CLK GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_CLK_PIN;
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
	gpio_init_structure.Pull      = GPIO_NOPULL;
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8001468:	2505      	movs	r5, #5
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 800146a:	f001 fa11 	bl	8002890 <HAL_GPIO_WritePin>
	gpio_init_structure.Pin       = KEYS_CLK_PIN;
 800146e:	2302      	movs	r3, #2
	HAL_GPIO_Init(KEYS_CLK_GPIO_PORT, &gpio_init_structure);
 8001470:	a905      	add	r1, sp, #20
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <BSP_KEYS_MspInit+0xe4>)
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8001474:	9407      	str	r4, [sp, #28]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8001476:	9509      	str	r5, [sp, #36]	; 0x24
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001478:	e9cd 3305 	strd	r3, r3, [sp, #20]
	HAL_GPIO_Init(KEYS_CLK_GPIO_PORT, &gpio_init_structure);
 800147c:	f001 f918 	bl	80026b0 <HAL_GPIO_Init>

	/* KEYS MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_MISO_PIN;
 8001480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(KEYS_MISO_GPIO_PORT, &gpio_init_structure);
 8001484:	a905      	add	r1, sp, #20
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <BSP_KEYS_MspInit+0xe8>)
	gpio_init_structure.Pin       = KEYS_MISO_PIN;
 8001488:	9305      	str	r3, [sp, #20]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 800148a:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(KEYS_MISO_GPIO_PORT, &gpio_init_structure);
 800148c:	f001 f910 	bl	80026b0 <HAL_GPIO_Init>

	/*##-3- Configure the NVIC for SPI2 #########################################*/
	/* NVIC configuration for SPI2 interrupt */
	HAL_NVIC_SetPriority(SPI2_IRQn, 0x0F, 0);
 8001490:	4622      	mov	r2, r4
 8001492:	210f      	movs	r1, #15
 8001494:	2024      	movs	r0, #36	; 0x24
 8001496:	f000 fed3 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800149a:	2024      	movs	r0, #36	; 0x24
 800149c:	f000 ff02 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 80014a0:	b00b      	add	sp, #44	; 0x2c
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40020400 	.word	0x40020400

080014b8 <BSP_KEYS_Init>:
{ 
 80014b8:	b538      	push	{r3, r4, r5, lr}
	SPIHandle.Instance = KEYS_SPIx;
 80014ba:	4c19      	ldr	r4, [pc, #100]	; (8001520 <BSP_KEYS_Init+0x68>)
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <BSP_KEYS_Init+0x6c>)
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 80014be:	4620      	mov	r0, r4
	SPIHandle.Instance = KEYS_SPIx;
 80014c0:	6023      	str	r3, [r4, #0]
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 80014c2:	f003 f84e 	bl	8004562 <HAL_SPI_DeInit>
 80014c6:	4605      	mov	r5, r0
 80014c8:	b108      	cbz	r0, 80014ce <BSP_KEYS_Init+0x16>
		return KEYS_ERROR;
 80014ca:	2001      	movs	r0, #1
}
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
	BSP_KEYS_MspInit();
 80014ce:	f7ff ff7d 	bl	80013cc <BSP_KEYS_MspInit>
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014d2:	2338      	movs	r3, #56	; 0x38
	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 80014d4:	4620      	mov	r0, r4
	SPIHandle.Init.FirstBit 		= SPI_FIRSTBIT_MSB;
 80014d6:	6225      	str	r5, [r4, #32]
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014d8:	61e3      	str	r3, [r4, #28]
	SPIHandle.Init.DataSize 		= SPI_DATASIZE_8BIT;
 80014da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	SPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES;
 80014de:	e9c4 5302 	strd	r5, r3, [r4, #8]
	SPIHandle.Init.Mode 			=  SPI_MODE_MASTER;
 80014e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014e6:	6063      	str	r3, [r4, #4]
	SPIHandle.Init.NSS 				= SPI_NSS_SOFT;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	61a3      	str	r3, [r4, #24]
	SPIHandle.Init.CRCPolynomial    = 7;
 80014ee:	2307      	movs	r3, #7
	SPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 80014f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
	SPIHandle.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 80014f4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	SPIHandle.Init.CRCPolynomial    = 7;
 80014f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 80014fa:	f002 ffce 	bl	800449a <HAL_SPI_Init>
 80014fe:	4604      	mov	r4, r0
 8001500:	2800      	cmp	r0, #0
 8001502:	d1e2      	bne.n	80014ca <BSP_KEYS_Init+0x12>
	KEYS_CS_DISABLE();
 8001504:	2201      	movs	r2, #1
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <BSP_KEYS_Init+0x70>)
 800150a:	f001 f9c1 	bl	8002890 <HAL_GPIO_WritePin>
	KEYS_SET_SERIAL_MODE();
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <BSP_KEYS_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001516:	f001 f9bb 	bl	8002890 <HAL_GPIO_WritePin>
	return KEYS_OK;
 800151a:	4620      	mov	r0, r4
 800151c:	e7d6      	b.n	80014cc <BSP_KEYS_Init+0x14>
 800151e:	bf00      	nop
 8001520:	2002899c 	.word	0x2002899c
 8001524:	40003800 	.word	0x40003800
 8001528:	40021800 	.word	0x40021800
 800152c:	40020000 	.word	0x40020000

08001530 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8001530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Read multiple command */
	reg |= 0x80;
	HAL_I2C_Mem_Read(handle, LIS2MDL_I2C_ADD, reg,
 8001532:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001536:	9200      	str	r2, [sp, #0]
 8001538:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 800153c:	213d      	movs	r1, #61	; 0x3d
 800153e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	f001 fc1a 	bl	8002d7c <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
}
 8001548:	2000      	movs	r0, #0
 800154a:	b004      	add	sp, #16
 800154c:	bd10      	pop	{r4, pc}

0800154e <platform_write>:
{
 800154e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(handle, LIS2MDL_I2C_ADD, reg,
 8001550:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001554:	9200      	str	r2, [sp, #0]
 8001556:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 800155a:	213d      	movs	r1, #61	; 0x3d
 800155c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	f001 fb56 	bl	8002c12 <HAL_I2C_Mem_Write>
}
 8001566:	2000      	movs	r0, #0
 8001568:	b004      	add	sp, #16
 800156a:	bd10      	pop	{r4, pc}

0800156c <BSP_MAG_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_MAG_MspInit(void)
{
 800156c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef gpio_init_structure;

	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800156e:	4c2c      	ldr	r4, [pc, #176]	; (8001620 <BSP_MAG_MspInit+0xb4>)
{
 8001570:	b088      	sub	sp, #32

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
	gpio_init_structure.Pull = GPIO_PULLUP;
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001576:	2602      	movs	r6, #2
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001578:	6b23      	ldr	r3, [r4, #48]	; 0x30
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800157a:	a903      	add	r1, sp, #12
 800157c:	4d29      	ldr	r5, [pc, #164]	; (8001624 <BSP_MAG_MspInit+0xb8>)
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800157e:	f043 0302 	orr.w	r3, r3, #2
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001582:	4628      	mov	r0, r5
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001584:	6323      	str	r3, [r4, #48]	; 0x30
 8001586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	9b01      	ldr	r3, [sp, #4]
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	e9cd 2303 	strd	r2, r3, [sp, #12]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001596:	2301      	movs	r3, #1
 8001598:	e9cd 3605 	strd	r3, r6, [sp, #20]
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800159c:	2304      	movs	r3, #4
 800159e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80015a0:	f001 f886 	bl	80026b0 <HAL_GPIO_Init>

	/* Configure I2C Rx as alternate function */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80015a8:	a903      	add	r1, sp, #12
 80015aa:	4628      	mov	r0, r5

	/* IT DRDY GPIO pin configuration  */
	gpio_init_structure.Pin       = MAG_DRDY_PIN;
	gpio_init_structure.Pull 	  = GPIO_NOPULL;
 80015ac:	2500      	movs	r5, #0
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80015ae:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80015b0:	f001 f87e 	bl	80026b0 <HAL_GPIO_Init>
	gpio_init_structure.Pin       = MAG_DRDY_PIN;
 80015b4:	2340      	movs	r3, #64	; 0x40
	gpio_init_structure.Speed 	  = GPIO_SPEED_FAST;
	gpio_init_structure.Mode 	  = GPIO_MODE_IT_RISING;
	HAL_GPIO_Init(MAG_DRDY_GPIO_PORT, &gpio_init_structure);
 80015b6:	a903      	add	r1, sp, #12
 80015b8:	481b      	ldr	r0, [pc, #108]	; (8001628 <BSP_MAG_MspInit+0xbc>)
	gpio_init_structure.Pin       = MAG_DRDY_PIN;
 80015ba:	9303      	str	r3, [sp, #12]
	gpio_init_structure.Mode 	  = GPIO_MODE_IT_RISING;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <BSP_MAG_MspInit+0xc0>)
	gpio_init_structure.Speed 	  = GPIO_SPEED_FAST;
 80015be:	e9cd 5605 	strd	r5, r6, [sp, #20]
	gpio_init_structure.Mode 	  = GPIO_MODE_IT_RISING;
 80015c2:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(MAG_DRDY_GPIO_PORT, &gpio_init_structure);
 80015c4:	f001 f874 	bl	80026b0 <HAL_GPIO_Init>
	//	HAL_NVIC_EnableIRQ(I2C1_  SPI2_IRQn);


	/*** Configure the I2C peripheral ***/
	/* Enable I2C clock */
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80015c8:	6c23      	ldr	r3, [r4, #64]	; 0x40

	/* Release the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80015ca:	462a      	mov	r2, r5
 80015cc:	210f      	movs	r1, #15
 80015ce:	201f      	movs	r0, #31
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d4:	6423      	str	r3, [r4, #64]	; 0x40
 80015d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	9b02      	ldr	r3, [sp, #8]
	DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80015e0:	6a23      	ldr	r3, [r4, #32]
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6223      	str	r3, [r4, #32]
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80015e8:	6a23      	ldr	r3, [r4, #32]
 80015ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ee:	6223      	str	r3, [r4, #32]
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80015f0:	f000 fe26 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80015f4:	201f      	movs	r0, #31
 80015f6:	f000 fe55 	bl	80022a4 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80015fa:	462a      	mov	r2, r5
 80015fc:	210f      	movs	r1, #15
 80015fe:	2020      	movs	r0, #32
 8001600:	f000 fe1e 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001604:	2020      	movs	r0, #32
 8001606:	f000 fe4d 	bl	80022a4 <HAL_NVIC_EnableIRQ>

	/* Enable and set EXTI9-5 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(MAG_DRDY_EXTI_IRQn, 0xFF, 0);
 800160a:	462a      	mov	r2, r5
 800160c:	21ff      	movs	r1, #255	; 0xff
 800160e:	2017      	movs	r0, #23
 8001610:	f000 fe16 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MAG_DRDY_EXTI_IRQn);
 8001614:	2017      	movs	r0, #23
 8001616:	f000 fe45 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 800161a:	b008      	add	sp, #32
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400
 8001628:	40021c00 	.word	0x40021c00
 800162c:	10110000 	.word	0x10110000

08001630 <BSP_MAG_Init>:
{ 
 8001630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	I2CHandle.Instance = MAG_I2Cx;
 8001632:	4c2d      	ldr	r4, [pc, #180]	; (80016e8 <BSP_MAG_Init+0xb8>)
 8001634:	4f2d      	ldr	r7, [pc, #180]	; (80016ec <BSP_MAG_Init+0xbc>)
 8001636:	4626      	mov	r6, r4
 8001638:	f846 7f04 	str.w	r7, [r6, #4]!
	if (HAL_I2C_DeInit(&I2CHandle) != HAL_OK)
 800163c:	4630      	mov	r0, r6
 800163e:	f001 facf 	bl	8002be0 <HAL_I2C_DeInit>
 8001642:	4605      	mov	r5, r0
 8001644:	b118      	cbz	r0, 800164e <BSP_MAG_Init+0x1e>
		return MAG_ERROR;
 8001646:	2601      	movs	r6, #1
}
 8001648:	4630      	mov	r0, r6
 800164a:	b003      	add	sp, #12
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BSP_MAG_MspInit();
 800164e:	f7ff ff8d 	bl	800156c <BSP_MAG_MspInit>
	I2CHandle.Init.OwnAddress1     = 0xFF;
 8001652:	23ff      	movs	r3, #255	; 0xff
	I2CHandle.Instance             = MAG_I2Cx;
 8001654:	6067      	str	r7, [r4, #4]
	I2CHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001656:	2701      	movs	r7, #1
	I2CHandle.Init.OwnAddress1     = 0xFF;
 8001658:	4a25      	ldr	r2, [pc, #148]	; (80016f0 <BSP_MAG_Init+0xc0>)
	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 800165a:	4630      	mov	r0, r6
	I2CHandle.Init.OwnAddress2     = 0xFF;
 800165c:	61a3      	str	r3, [r4, #24]
	I2CHandle.Init.OwnAddress1     = 0xFF;
 800165e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	I2CHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001662:	e9c4 7504 	strd	r7, r5, [r4, #16]
	I2CHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001666:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 800166a:	f001 fa67 	bl	8002b3c <HAL_I2C_Init>
 800166e:	2800      	cmp	r0, #0
 8001670:	d1e9      	bne.n	8001646 <BSP_MAG_Init+0x16>
	magCtx.write_reg = platform_write;
 8001672:	4d20      	ldr	r5, [pc, #128]	; (80016f4 <BSP_MAG_Init+0xc4>)
	lis2mdl_device_id_get(&magCtx, &whoamI);
 8001674:	f10d 0106 	add.w	r1, sp, #6
	magCtx.write_reg = platform_write;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <BSP_MAG_Init+0xc8>)
	lis2mdl_device_id_get(&magCtx, &whoamI);
 800167a:	4628      	mov	r0, r5
	magCtx.write_reg = platform_write;
 800167c:	602b      	str	r3, [r5, #0]
	magCtx.read_reg = platform_read;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <BSP_MAG_Init+0xcc>)
	magCtx.handle = &I2CHandle;
 8001680:	e9c5 3601 	strd	r3, r6, [r5, #4]
	lis2mdl_device_id_get(&magCtx, &whoamI);
 8001684:	f7ff faf0 	bl	8000c68 <lis2mdl_device_id_get>
	if (whoamI != LIS2MDL_ID)
 8001688:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800168c:	2b40      	cmp	r3, #64	; 0x40
 800168e:	d1da      	bne.n	8001646 <BSP_MAG_Init+0x16>
	lis2mdl_reset_set(&magCtx, PROPERTY_ENABLE);
 8001690:	4639      	mov	r1, r7
 8001692:	4628      	mov	r0, r5
 8001694:	f7ff faed 	bl	8000c72 <lis2mdl_reset_set>
		lis2mdl_reset_get(&magCtx, &rst);
 8001698:	f10d 0107 	add.w	r1, sp, #7
 800169c:	4628      	mov	r0, r5
 800169e:	f7ff faff 	bl	8000ca0 <lis2mdl_reset_get>
	} while (rst);
 80016a2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80016a6:	2e00      	cmp	r6, #0
 80016a8:	d1f6      	bne.n	8001698 <BSP_MAG_Init+0x68>
	lis2mdl_block_data_update_set(&magCtx, PROPERTY_ENABLE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016ae:	f7ff fac4 	bl	8000c3a <lis2mdl_block_data_update_set>
	lis2mdl_data_rate_set(&magCtx, LIS2MDL_ODR_100Hz);
 80016b2:	2103      	movs	r1, #3
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016b6:	f7ff fa64 	bl	8000b82 <lis2mdl_data_rate_set>
	lis2mdl_set_rst_mode_set(&magCtx, LIS2MDL_SENS_OFF_CANC_EVERY_ODR);
 80016ba:	2101      	movs	r1, #1
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016be:	f7ff faa5 	bl	8000c0c <lis2mdl_set_rst_mode_set>
	lis2mdl_offset_temp_comp_set(&magCtx, PROPERTY_ENABLE);
 80016c2:	2101      	movs	r1, #1
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016c6:	f7ff fa73 	bl	8000bb0 <lis2mdl_offset_temp_comp_set>
	lis2mdl_low_pass_bandwidth_set(&magCtx, LIS2MDL_ODR_DIV_4);
 80016ca:	2101      	movs	r1, #1
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016ce:	f7ff fa86 	bl	8000bde <lis2mdl_low_pass_bandwidth_set>
	lis2mdl_operating_mode_set(&magCtx, LIS2MDL_CONTINUOUS_MODE);
 80016d2:	4631      	mov	r1, r6
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016d6:	f7ff fa3d 	bl	8000b54 <lis2mdl_operating_mode_set>
	lis2mdl_drdy_on_pin_set(&magCtx, PROPERTY_ENABLE);
 80016da:	2101      	movs	r1, #1
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <BSP_MAG_Init+0xc4>)
 80016de:	f7ff faed 	bl	8000cbc <lis2mdl_drdy_on_pin_set>
	magSensorEnabled=1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	7023      	strb	r3, [r4, #0]
	return MAG_OK;
 80016e6:	e7af      	b.n	8001648 <BSP_MAG_Init+0x18>
 80016e8:	20020280 	.word	0x20020280
 80016ec:	40005400 	.word	0x40005400
 80016f0:	40912732 	.word	0x40912732
 80016f4:	20028a00 	.word	0x20028a00
 80016f8:	0800154f 	.word	0x0800154f
 80016fc:	08001531 	.word	0x08001531

08001700 <BSP_PRESSURE_MspInit>:
{
	GPIO_InitTypeDef gpio_init_structure;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable the Keys (SPI) interface clock */
	PRESSURE_CLK_ENABLE();
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <BSP_PRESSURE_MspInit+0xd0>)
 8001702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
	PRESSURE_CLK_ENABLE();
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800170c:	b08b      	sub	sp, #44	; 0x2c
	PRESSURE_CLK_ENABLE();
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* PRESSURE CS GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_CS_PIN;
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
	gpio_init_structure.Pull      = GPIO_NOPULL;
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001710:	2400      	movs	r4, #0
	HAL_GPIO_Init(PRESSURE_CS_GPIO_PORT, &gpio_init_structure);
 8001712:	4d30      	ldr	r5, [pc, #192]	; (80017d4 <BSP_PRESSURE_MspInit+0xd4>)
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001714:	f44f 7680 	mov.w	r6, #256	; 0x100
	PRESSURE_CLK_ENABLE();
 8001718:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800171c:	2701      	movs	r7, #1
	HAL_GPIO_Init(PRESSURE_CS_GPIO_PORT, &gpio_init_structure);
 800171e:	a905      	add	r1, sp, #20
 8001720:	4628      	mov	r0, r5
	PRESSURE_CLK_ENABLE();
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	9a00      	ldr	r2, [sp, #0]
	PRESSURE_CS_GPIO_CLK_ENABLE();
 8001726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
 800172e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001730:	f002 0201 	and.w	r2, r2, #1
 8001734:	9201      	str	r2, [sp, #4]
 8001736:	9a01      	ldr	r2, [sp, #4]
	PRESSURE_CLK_GPIO_CLK_ENABLE();
 8001738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001746:	9202      	str	r2, [sp, #8]
 8001748:	9a02      	ldr	r2, [sp, #8]
	PRESSURE_MISO_GPIO_CLK_ENABLE();
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	f042 0202 	orr.w	r2, r2, #2
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001754:	f002 0202 	and.w	r2, r2, #2
 8001758:	9203      	str	r2, [sp, #12]
 800175a:	9a03      	ldr	r2, [sp, #12]
	PRESSURE_MOSI_GPIO_CLK_ENABLE();
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f042 0202 	orr.w	r2, r2, #2
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	9b04      	ldr	r3, [sp, #16]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800176e:	2303      	movs	r3, #3
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001770:	e9cd 6705 	strd	r6, r7, [sp, #20]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001774:	e9cd 4307 	strd	r4, r3, [sp, #28]
	HAL_GPIO_Init(PRESSURE_CS_GPIO_PORT, &gpio_init_structure);
 8001778:	f000 ff9a 	bl	80026b0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(PRESSURE_CS_GPIO_PORT, PRESSURE_CS_PIN, GPIO_PIN_SET );
 800177c:	463a      	mov	r2, r7
 800177e:	4631      	mov	r1, r6
 8001780:	4628      	mov	r0, r5
 8001782:	f001 f885 	bl	8002890 <HAL_GPIO_WritePin>

	/* PRESSURE CLK GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_CLK_PIN;
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
	gpio_init_structure.Pull      = GPIO_NOPULL;
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8001786:	2505      	movs	r5, #5
	gpio_init_structure.Pin       = PRESSURE_CLK_PIN;
 8001788:	2302      	movs	r3, #2
	HAL_GPIO_Init(PRESSURE_CLK_GPIO_PORT, &gpio_init_structure);
 800178a:	a905      	add	r1, sp, #20

	/* PRESSURE MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_MISO_PIN;
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(PRESSURE_MISO_GPIO_PORT, &gpio_init_structure);
 800178c:	4e12      	ldr	r6, [pc, #72]	; (80017d8 <BSP_PRESSURE_MspInit+0xd8>)
	HAL_GPIO_Init(PRESSURE_CLK_GPIO_PORT, &gpio_init_structure);
 800178e:	4813      	ldr	r0, [pc, #76]	; (80017dc <BSP_PRESSURE_MspInit+0xdc>)
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8001790:	9407      	str	r4, [sp, #28]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8001792:	9509      	str	r5, [sp, #36]	; 0x24
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001794:	e9cd 3305 	strd	r3, r3, [sp, #20]
	HAL_GPIO_Init(PRESSURE_CLK_GPIO_PORT, &gpio_init_structure);
 8001798:	f000 ff8a 	bl	80026b0 <HAL_GPIO_Init>
	gpio_init_structure.Pin       = PRESSURE_MISO_PIN;
 800179c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	HAL_GPIO_Init(PRESSURE_MISO_GPIO_PORT, &gpio_init_structure);
 80017a0:	a905      	add	r1, sp, #20
 80017a2:	4630      	mov	r0, r6
	gpio_init_structure.Pin       = PRESSURE_MISO_PIN;
 80017a4:	9305      	str	r3, [sp, #20]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 80017a6:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(PRESSURE_MISO_GPIO_PORT, &gpio_init_structure);
 80017a8:	f000 ff82 	bl	80026b0 <HAL_GPIO_Init>

	/* PRESSURE MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_MOSI_PIN;
 80017ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(PRESSURE_MOSI_GPIO_PORT, &gpio_init_structure);
 80017b0:	a905      	add	r1, sp, #20
 80017b2:	4630      	mov	r0, r6
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 80017b4:	9509      	str	r5, [sp, #36]	; 0x24
	gpio_init_structure.Pin       = PRESSURE_MOSI_PIN;
 80017b6:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(PRESSURE_MOSI_GPIO_PORT, &gpio_init_structure);
 80017b8:	f000 ff7a 	bl	80026b0 <HAL_GPIO_Init>

	/*##-3- Configure the NVIC for SPI2 #########################################*/
	/* NVIC configuration for SPI2 interrupt */
	HAL_NVIC_SetPriority(SPI2_IRQn, 0x0F, 0);
 80017bc:	4622      	mov	r2, r4
 80017be:	210f      	movs	r1, #15
 80017c0:	2024      	movs	r0, #36	; 0x24
 80017c2:	f000 fd3d 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017c6:	2024      	movs	r0, #36	; 0x24
 80017c8:	f000 fd6c 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 80017cc:	b00b      	add	sp, #44	; 0x2c
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40022000 	.word	0x40022000

080017e0 <BSP_PRESSURE_Init>:
{ 
 80017e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SPIHandle.Instance = PRESSURE_SPIx;
 80017e4:	4c26      	ldr	r4, [pc, #152]	; (8001880 <BSP_PRESSURE_Init+0xa0>)
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <BSP_PRESSURE_Init+0xa4>)
 80017e8:	4627      	mov	r7, r4
	PressureHandle.hspi = &SPIHandle;
 80017ea:	4d27      	ldr	r5, [pc, #156]	; (8001888 <BSP_PRESSURE_Init+0xa8>)
	PressureHandlePtr = &PressureHandle;
 80017ec:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800188c <BSP_PRESSURE_Init+0xac>
	SPIHandle.Instance = PRESSURE_SPIx;
 80017f0:	f847 3f04 	str.w	r3, [r7, #4]!
	PressureHandle.cs_gpio = PRESSURE_CS_GPIO_PORT;
 80017f4:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 80017f8:	4638      	mov	r0, r7
	PressureHandle.hspi = &SPIHandle;
 80017fa:	626f      	str	r7, [r5, #36]	; 0x24
	PressureHandle.cs_gpio = PRESSURE_CS_GPIO_PORT;
 80017fc:	62ab      	str	r3, [r5, #40]	; 0x28
	PressureHandle.cs_pin = PRESSURE_CS_PIN;
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
	PressureHandlePtr = &PressureHandle;
 8001802:	f8c8 5000 	str.w	r5, [r8]
	PressureHandle.cs_pin = PRESSURE_CS_PIN;
 8001806:	85ab      	strh	r3, [r5, #44]	; 0x2c
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 8001808:	f002 feab 	bl	8004562 <HAL_SPI_DeInit>
 800180c:	4606      	mov	r6, r0
 800180e:	b110      	cbz	r0, 8001816 <BSP_PRESSURE_Init+0x36>
		return PRESSURE_ERROR;
 8001810:	2001      	movs	r0, #1
}
 8001812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BSP_PRESSURE_MspInit();
 8001816:	f7ff ff73 	bl	8001700 <BSP_PRESSURE_MspInit>
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800181a:	2338      	movs	r3, #56	; 0x38
	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 800181c:	4638      	mov	r0, r7
	SPIHandle.Init.FirstBit 		= SPI_FIRSTBIT_MSB;
 800181e:	6266      	str	r6, [r4, #36]	; 0x24
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001820:	6223      	str	r3, [r4, #32]
	SPIHandle.Init.DataSize 		= SPI_DATASIZE_8BIT;
 8001822:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	SPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES;
 8001826:	e9c4 6303 	strd	r6, r3, [r4, #12]
	SPIHandle.Init.Mode 			= SPI_MODE_MASTER;
 800182a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800182e:	60a3      	str	r3, [r4, #8]
	SPIHandle.Init.NSS 				= SPI_NSS_SOFT;
 8001830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001834:	61e3      	str	r3, [r4, #28]
	SPIHandle.Init.CRCPolynomial    = 7;
 8001836:	2307      	movs	r3, #7
	SPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001838:	e9c4 6605 	strd	r6, r6, [r4, #20]
	SPIHandle.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800183c:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
	SPIHandle.Init.CRCPolynomial    = 7;
 8001840:	6323      	str	r3, [r4, #48]	; 0x30
	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 8001842:	f002 fe2a 	bl	800449a <HAL_SPI_Init>
 8001846:	4606      	mov	r6, r0
 8001848:	2800      	cmp	r0, #0
 800184a:	d1e1      	bne.n	8001810 <BSP_PRESSURE_Init+0x30>
	PRESSURE_CS_DISABLE(PressureHandlePtr);
 800184c:	f8d8 3000 	ldr.w	r3, [r8]
 8001850:	2201      	movs	r2, #1
 8001852:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8001854:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001856:	f001 f81b 	bl	8002890 <HAL_GPIO_WritePin>
	bmp280_init_default_params(&PressureHandle.params);
 800185a:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 800185e:	f7fe ff51 	bl	8000704 <bmp280_init_default_params>
	if (!bmp280_init(&PressureHandle, &PressureHandle.params)) {
 8001862:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 8001866:	4628      	mov	r0, r5
 8001868:	f7fe ff55 	bl	8000716 <bmp280_init>
 800186c:	2800      	cmp	r0, #0
 800186e:	d0cf      	beq.n	8001810 <BSP_PRESSURE_Init+0x30>
	if (PressureHandle.id != BMP280_CHIP_ID) {
 8001870:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8001874:	2b58      	cmp	r3, #88	; 0x58
 8001876:	d1cb      	bne.n	8001810 <BSP_PRESSURE_Init+0x30>
	pressureSensorEnabled=1;
 8001878:	2301      	movs	r3, #1
	return PRESSURE_OK;
 800187a:	4630      	mov	r0, r6
	pressureSensorEnabled=1;
 800187c:	7023      	strb	r3, [r4, #0]
	return PRESSURE_OK;
 800187e:	e7c8      	b.n	8001812 <BSP_PRESSURE_Init+0x32>
 8001880:	200202d0 	.word	0x200202d0
 8001884:	40003800 	.word	0x40003800
 8001888:	20028a10 	.word	0x20028a10
 800188c:	20028a0c 	.word	0x20028a0c

08001890 <QSPI_AutoPollingMemReady.constprop.1>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001890:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8001896:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800189c:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800189e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80018a0:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80018a2:	2201      	movs	r2, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80018a4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80018a6:	2300      	movs	r3, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80018a8:	9201      	str	r2, [sp, #4]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80018aa:	a906      	add	r1, sp, #24
  s_command.DummyCycles       = 0;
 80018ac:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018ae:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80018b0:	9300      	str	r3, [sp, #0]
  s_config.StatusBytesSize = 1;
 80018b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018b6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80018be:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80018c0:	466a      	mov	r2, sp
  s_config.Interval        = 0x10;
 80018c2:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80018c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c8:	9305      	str	r3, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80018ca:	4603      	mov	r3, r0
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <QSPI_AutoPollingMemReady.constprop.1+0x50>)
 80018ce:	f001 fe31 	bl	8003534 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 80018d2:	3000      	adds	r0, #0
 80018d4:	bf18      	it	ne
 80018d6:	2001      	movne	r0, #1
 80018d8:	b015      	add	sp, #84	; 0x54
 80018da:	f85d fb04 	ldr.w	pc, [sp], #4
 80018de:	bf00      	nop
 80018e0:	20028a48 	.word	0x20028a48

080018e4 <QSPI_WriteEnable.constprop.3>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80018e4:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 80018ea:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <QSPI_WriteEnable.constprop.3+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018f2:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80018f4:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018f6:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80018f8:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80018fa:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018fc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8001900:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8001902:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001904:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001906:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800190a:	f001 fdd0 	bl	80034ae <HAL_QSPI_Command>
 800190e:	b9e0      	cbnz	r0, 800194a <QSPI_WriteEnable.constprop.3+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8001910:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8001912:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001918:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <QSPI_WriteEnable.constprop.3+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800191c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8001920:	2310      	movs	r3, #16
 8001922:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001926:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001928:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800192a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800192e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001932:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001934:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001936:	f241 3388 	movw	r3, #5000	; 0x1388
 800193a:	f001 fdfb 	bl	8003534 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 800193e:	3000      	adds	r0, #0
 8001940:	bf18      	it	ne
 8001942:	2001      	movne	r0, #1
}
 8001944:	b015      	add	sp, #84	; 0x54
 8001946:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800194a:	2001      	movs	r0, #1
 800194c:	e7fa      	b.n	8001944 <QSPI_WriteEnable.constprop.3+0x60>
 800194e:	bf00      	nop
 8001950:	20028a48 	.word	0x20028a48

08001954 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8001954:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800195a:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800195c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001960:	480f      	ldr	r0, [pc, #60]	; (80019a0 <BSP_QSPI_EnableMemoryMappedMode+0x4c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001962:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001964:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001966:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001968:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800196a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800196e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001976:	2300      	movs	r3, #0
 8001978:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800197c:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800197e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001980:	9301      	str	r3, [sp, #4]
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001982:	9207      	str	r2, [sp, #28]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001984:	aa10      	add	r2, sp, #64	; 0x40
 8001986:	f842 3d40 	str.w	r3, [r2, #-64]!
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800198a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800198e:	f001 fe23 	bl	80035d8 <HAL_QSPI_MemoryMapped>
}
 8001992:	3000      	adds	r0, #0
 8001994:	bf18      	it	ne
 8001996:	2001      	movne	r0, #1
 8001998:	b011      	add	sp, #68	; 0x44
 800199a:	f85d fb04 	ldr.w	pc, [sp], #4
 800199e:	bf00      	nop
 80019a0:	20028a48 	.word	0x20028a48

080019a4 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80019a6:	2101      	movs	r1, #1
  QSPI_CLK_ENABLE();
 80019a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019aa:	f042 0202 	orr.w	r2, r2, #2
{
 80019ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
{
 80019b2:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80019b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80019b6:	2409      	movs	r4, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80019b8:	4d41      	ldr	r5, [pc, #260]	; (8001ac0 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80019ba:	2704      	movs	r7, #4
  QSPI_CLK_ENABLE();
 80019bc:	f002 0202 	and.w	r2, r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80019c0:	2600      	movs	r6, #0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80019c2:	4628      	mov	r0, r5
  QSPI_CLK_ENABLE();
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	f042 0202 	orr.w	r2, r2, #2
 80019ce:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	f022 0202 	bic.w	r2, r2, #2
 80019d6:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 80019d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019da:	f042 0202 	orr.w	r2, r2, #2
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
 80019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e2:	f002 0202 	and.w	r2, r2, #2
 80019e6:	9201      	str	r2, [sp, #4]
 80019e8:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 80019ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ec:	f042 0202 	orr.w	r2, r2, #2
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
 80019f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f4:	f002 0202 	and.w	r2, r2, #2
 80019f8:	9202      	str	r2, [sp, #8]
 80019fa:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	f042 0208 	orr.w	r2, r2, #8
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	f002 0208 	and.w	r2, r2, #8
 8001a0a:	9203      	str	r2, [sp, #12]
 8001a0c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8001a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a10:	f042 0208 	orr.w	r2, r2, #8
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
 8001a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a18:	f002 0208 	and.w	r2, r2, #8
 8001a1c:	9204      	str	r2, [sp, #16]
 8001a1e:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
 8001a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2a:	f002 0210 	and.w	r2, r2, #16
 8001a2e:	9205      	str	r2, [sp, #20]
 8001a30:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	f042 0208 	orr.w	r2, r2, #8
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a3a:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	9306      	str	r3, [sp, #24]
 8001a44:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001a52:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001a54:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001a56:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001a58:	f000 fe2a 	bl	80026b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001a5c:	a907      	add	r1, sp, #28
 8001a5e:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001a60:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a62:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001a64:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001a66:	f000 fe23 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8001a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001a6e:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001a70:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001a72:	441d      	add	r5, r3
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8001a74:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001a76:	4628      	mov	r0, r5
 8001a78:	f000 fe1a 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8001a80:	a907      	add	r1, sp, #28
 8001a82:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8001a84:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001a86:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8001a88:	f000 fe12 	bl	80026b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8001a8c:	a907      	add	r1, sp, #28
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <BSP_QSPI_MspInit+0x120>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8001a90:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001a92:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8001a94:	f000 fe0c 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8001a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8001a9c:	a907      	add	r1, sp, #28
 8001a9e:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001aa0:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8001aa2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8001aa4:	f000 fe04 	bl	80026b0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	210f      	movs	r1, #15
 8001aac:	205c      	movs	r0, #92	; 0x5c
 8001aae:	f000 fbc7 	bl	8002240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001ab2:	205c      	movs	r0, #92	; 0x5c
 8001ab4:	f000 fbf6 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 8001ab8:	b00d      	add	sp, #52	; 0x34
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <BSP_QSPI_Init>:
{ 
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8001aca:	4c4a      	ldr	r4, [pc, #296]	; (8001bf4 <BSP_QSPI_Init+0x12c>)
{ 
 8001acc:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <BSP_QSPI_Init+0x130>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001ad0:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8001ad2:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001ad4:	f001 fccf 	bl	8003476 <HAL_QSPI_DeInit>
 8001ad8:	4605      	mov	r5, r0
 8001ada:	b118      	cbz	r0, 8001ae4 <BSP_QSPI_Init+0x1c>
    return QSPI_ERROR;
 8001adc:	2501      	movs	r5, #1
}
 8001ade:	4628      	mov	r0, r5
 8001ae0:	b011      	add	sp, #68	; 0x44
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff ff5c 	bl	80019a4 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8001aec:	2601      	movs	r6, #1
 8001aee:	2304      	movs	r3, #4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8001af4:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001af8:	2310      	movs	r3, #16
 8001afa:	60e3      	str	r3, [r4, #12]
 8001afc:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001b00:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001b04:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8001b0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8001b0e:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001b12:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001b16:	f001 fc51 	bl	80033bc <HAL_QSPI_Init>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1de      	bne.n	8001adc <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b1e:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001b22:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8001b24:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8001b2a:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b2c:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b2e:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b30:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001b32:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b34:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b38:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f001 fcb6 	bl	80034ae <HAL_QSPI_Command>
 8001b42:	b108      	cbz	r0, 8001b48 <BSP_QSPI_Init+0x80>
    return QSPI_NOT_SUPPORTED;
 8001b44:	2504      	movs	r5, #4
 8001b46:	e7ca      	b.n	8001ade <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8001b48:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	a902      	add	r1, sp, #8
 8001b50:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8001b52:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b54:	f001 fcab 	bl	80034ae <HAL_QSPI_Command>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d1f3      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001b5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b60:	f7ff fe96 	bl	8001890 <QSPI_AutoPollingMemReady.constprop.1>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1ed      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8001b68:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8001b6a:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b72:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8001b74:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001b76:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b78:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001b7c:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b80:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b84:	4620      	mov	r0, r4
 8001b86:	f001 fc92 	bl	80034ae <HAL_QSPI_Command>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d1da      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	f10d 0107 	add.w	r1, sp, #7
 8001b96:	4620      	mov	r0, r4
 8001b98:	f001 fdf9 	bl	800378e <HAL_QSPI_Receive>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1d1      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001ba0:	f7ff fea0 	bl	80018e4 <QSPI_WriteEnable.constprop.3>
 8001ba4:	4605      	mov	r5, r0
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d1cc      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001baa:	2381      	movs	r3, #129	; 0x81
 8001bac:	22f0      	movs	r2, #240	; 0xf0
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001bb4:	210a      	movs	r1, #10
 8001bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bba:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bbe:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bc8:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001bca:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001bd0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bd4:	f001 fc6b 	bl	80034ae <HAL_QSPI_Command>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1b3      	bne.n	8001b44 <BSP_QSPI_Init+0x7c>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	f10d 0107 	add.w	r1, sp, #7
 8001be4:	4620      	mov	r0, r4
 8001be6:	f001 fd74 	bl	80036d2 <HAL_QSPI_Transmit>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	f43f af77 	beq.w	8001ade <BSP_QSPI_Init+0x16>
 8001bf0:	e7a8      	b.n	8001b44 <BSP_QSPI_Init+0x7c>
 8001bf2:	bf00      	nop
 8001bf4:	20028a48 	.word	0x20028a48
 8001bf8:	a0001000 	.word	0xa0001000

08001bfc <BSP_RNG_InitGenerator>:
  * @param  RNG_HandleTypeDef
  * @retval None
  */
void BSP_RNG_InitGenerator(void)
{
	RNG_Handle.State = HAL_RNG_STATE_RESET;
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <BSP_RNG_InitGenerator+0xc>)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	7243      	strb	r3, [r0, #9]
	HAL_RNG_Init(&RNG_Handle);
 8001c02:	f002 bb4d 	b.w	80042a0 <HAL_RNG_Init>
 8001c06:	bf00      	nop
 8001c08:	20020338 	.word	0x20020338

08001c0c <HAL_RNG_MspInit>:
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
	/* Reset RNG */
	__HAL_RCC_RNG_FORCE_RESET();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RNG_MspInit+0x30>)
{
 8001c0e:	b082      	sub	sp, #8
	__HAL_RCC_RNG_FORCE_RESET();
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c16:	615a      	str	r2, [r3, #20]

	/* Release Reset RNG */
	__HAL_RCC_RNG_RELEASE_RESET();
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c1e:	615a      	str	r2, [r3, #20]

	/* Enable clock for RNG */
	__HAL_RCC_RNG_CLK_ENABLE();
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	9b01      	ldr	r3, [sp, #4]

	hrng->Instance = RNG;
 8001c32:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RNG_MspInit+0x34>)
 8001c34:	6003      	str	r3, [r0, #0]
}
 8001c36:	b002      	add	sp, #8
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	50060800 	.word	0x50060800

08001c44 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001c48:	4c21      	ldr	r4, [pc, #132]	; (8001cd0 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c4a:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c4c:	4d21      	ldr	r5, [pc, #132]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8001c4e:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c52:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c54:	4621      	mov	r1, r4
{
 8001c56:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001c5e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c62:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001c66:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c6a:	f002 fb51 	bl	8004310 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f000 fac2 	bl	80021f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001c74:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c76:	4621      	mov	r1, r4
 8001c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c7e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001c82:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c86:	f002 fb43 	bl	8004310 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001c8a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c92:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c94:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001c98:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001c9a:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c9e:	f002 fb37 	bl	8004310 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001ca2:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001cac:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001cae:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001cb0:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001cb2:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cb4:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001cbc:	f002 fb28 	bl	8004310 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	4628      	mov	r0, r5
}
 8001cc4:	b003      	add	sp, #12
 8001cc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001cca:	f002 bb38 	b.w	800433e <HAL_SDRAM_ProgramRefreshRate>
 8001cce:	bf00      	nop
 8001cd0:	20020344 	.word	0x20020344
 8001cd4:	20028a94 	.word	0x20028a94

08001cd8 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <BSP_SDRAM_MspInit+0x15c>)
 8001cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
{  
 8001ce0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001ce4:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8001ce8:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001cea:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001cec:	4852      	ldr	r0, [pc, #328]	; (8001e38 <BSP_SDRAM_MspInit+0x160>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cee:	f002 0201 	and.w	r2, r2, #1
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d00:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001d04:	9202      	str	r2, [sp, #8]
 8001d06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0a:	f042 0204 	orr.w	r2, r2, #4
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d12:	f002 0204 	and.w	r2, r2, #4
 8001d16:	9203      	str	r2, [sp, #12]
 8001d18:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	f042 0208 	orr.w	r2, r2, #8
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
 8001d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d24:	f002 0208 	and.w	r2, r2, #8
 8001d28:	9204      	str	r2, [sp, #16]
 8001d2a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2e:	f042 0210 	orr.w	r2, r2, #16
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
 8001d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d36:	f002 0210 	and.w	r2, r2, #16
 8001d3a:	9205      	str	r2, [sp, #20]
 8001d3c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d48:	f002 0220 	and.w	r2, r2, #32
 8001d4c:	9206      	str	r2, [sp, #24]
 8001d4e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
 8001d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001d5e:	9207      	str	r2, [sp, #28]
 8001d60:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d6a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	9308      	str	r3, [sp, #32]
 8001d74:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001d7c:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001d7e:	230c      	movs	r3, #12
 8001d80:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001d82:	2308      	movs	r3, #8
 8001d84:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f000 fc91 	bl	80026b0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001d8e:	f24c 7303 	movw	r3, #50947	; 0xc703
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d92:	4621      	mov	r1, r4
 8001d94:	4829      	ldr	r0, [pc, #164]	; (8001e3c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001d96:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d98:	f000 fc8a 	bl	80026b0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001d9c:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001da0:	4621      	mov	r1, r4
 8001da2:	4827      	ldr	r0, [pc, #156]	; (8001e40 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001da4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001da6:	f000 fc83 	bl	80026b0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001daa:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001dae:	4621      	mov	r1, r4
 8001db0:	4824      	ldr	r0, [pc, #144]	; (8001e44 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001db2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001db4:	f000 fc7c 	bl	80026b0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001db8:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4822      	ldr	r0, [pc, #136]	; (8001e48 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001dc0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001dc2:	f000 fc75 	bl	80026b0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001dc6:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4820      	ldr	r0, [pc, #128]	; (8001e4c <BSP_SDRAM_MspInit+0x174>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001dcc:	2400      	movs	r4, #0
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001dce:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001dd0:	f000 fc6e 	bl	80026b0 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <BSP_SDRAM_MspInit+0x178>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001dd6:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001ddc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001de0:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001de2:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001de4:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001de6:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dee:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df6:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001dfe:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e02:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e04:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <BSP_SDRAM_MspInit+0x17c>)
 8001e0a:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001e0e:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001e10:	6335      	str	r5, [r6, #48]	; 0x30
 8001e12:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 8001e14:	f000 fae6 	bl	80023e4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 fa65 	bl	80022e8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001e1e:	4622      	mov	r2, r4
 8001e20:	210f      	movs	r1, #15
 8001e22:	2038      	movs	r0, #56	; 0x38
 8001e24:	f000 fa0c 	bl	8002240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001e28:	2038      	movs	r0, #56	; 0x38
 8001e2a:	f000 fa3b 	bl	80022a4 <HAL_NVIC_EnableIRQ>
}
 8001e2e:	b00e      	add	sp, #56	; 0x38
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40021c00 	.word	0x40021c00
 8001e50:	20020344 	.word	0x20020344
 8001e54:	40026410 	.word	0x40026410

08001e58 <BSP_SDRAM_Init>:
{ 
 8001e58:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e5a:	4c1b      	ldr	r4, [pc, #108]	; (8001ec8 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8001e5c:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8001e60:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8001e62:	4d1b      	ldr	r5, [pc, #108]	; (8001ed0 <BSP_SDRAM_Init+0x78>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e64:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e68:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001e6a:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e6c:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8001e6e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 8001e72:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 8001e76:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 8001e7a:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e7e:	2210      	movs	r2, #16
 8001e80:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001e82:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e84:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001e8c:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e8e:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e96:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001e9a:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e9c:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001ea0:	f7ff ff1a 	bl	8001cd8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8001eaa:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <BSP_SDRAM_Init+0x7c>)
 8001eac:	f002 fa10 	bl	80042d0 <HAL_SDRAM_Init>
 8001eb0:	b138      	cbz	r0, 8001ec2 <BSP_SDRAM_Init+0x6a>
    sdramstatus = SDRAM_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001eb6:	f240 6003 	movw	r0, #1539	; 0x603
 8001eba:	f7ff fec3 	bl	8001c44 <BSP_SDRAM_Initialization_sequence>
}
 8001ebe:	7820      	ldrb	r0, [r4, #0]
 8001ec0:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8001ec2:	7020      	strb	r0, [r4, #0]
 8001ec4:	e7f7      	b.n	8001eb6 <BSP_SDRAM_Init+0x5e>
 8001ec6:	bf00      	nop
 8001ec8:	20028a94 	.word	0x20028a94
 8001ecc:	a0000140 	.word	0xa0000140
 8001ed0:	20020344 	.word	0x20020344
 8001ed4:	2000004c 	.word	0x2000004c

08001ed8 <BSP_STDIO_IRQHandler>:
	return STDIO_OK;
}

void BSP_STDIO_IRQHandler	(void)
{
	HAL_UART_IRQHandler(&UARTHandle);
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <BSP_STDIO_IRQHandler+0x8>)
 8001eda:	f003 b8a1 	b.w	8005020 <HAL_UART_IRQHandler>
 8001ede:	bf00      	nop
 8001ee0:	20020430 	.word	0x20020430

08001ee4 <BSP_STDIO_DataReceived>:
}

__weak void BSP_STDIO_DataReceived	(char* data, uint16_t length)
{
 8001ee4:	460a      	mov	r2, r1
	//volatile uint8_t status;

	for (int i=0; i<length;i++)
 8001ee6:	2300      	movs	r3, #0
	{
		stdoutBuffer[i] = data[i];
 8001ee8:	4909      	ldr	r1, [pc, #36]	; (8001f10 <BSP_STDIO_DataReceived+0x2c>)
{
 8001eea:	b510      	push	{r4, lr}
	for (int i=0; i<length;i++)
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dc0b      	bgt.n	8001f08 <BSP_STDIO_DataReceived+0x24>
	}

	HAL_UART_Transmit(&UARTHandle, (uint8_t*)stdoutBuffer, length, 100);
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <BSP_STDIO_DataReceived+0x2c>)
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <BSP_STDIO_DataReceived+0x30>)
 8001ef6:	f003 f800 	bl	8004efa <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&UARTHandle,(uint8_t*)stdinBuffer, 1);
 8001efa:	2201      	movs	r2, #1
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <BSP_STDIO_DataReceived+0x34>)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <BSP_STDIO_DataReceived+0x30>)
}
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&UARTHandle,(uint8_t*)stdinBuffer, 1);
 8001f04:	f002 bf85 	b.w	8004e12 <HAL_UART_Receive_IT>
		stdoutBuffer[i] = data[i];
 8001f08:	5cc4      	ldrb	r4, [r0, r3]
 8001f0a:	545c      	strb	r4, [r3, r1]
	for (int i=0; i<length;i++)
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	e7ed      	b.n	8001eec <BSP_STDIO_DataReceived+0x8>
 8001f10:	20028ac8 	.word	0x20028ac8
 8001f14:	20020430 	.word	0x20020430
 8001f18:	20028b2c 	.word	0x20028b2c

08001f1c <BSP_STDIO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_STDIO_MspInit(void)
{
 8001f1c:	b508      	push	{r3, lr}
	/*##-3- Configure the NVIC for USART1 #########################################*/
	/* NVIC configuration for USART1 interrupt */
	HAL_NVIC_SetPriority(DISCOVERY_COM1_IRQn, 0x0F, 0);
 8001f1e:	2025      	movs	r0, #37	; 0x25
 8001f20:	2200      	movs	r2, #0
 8001f22:	210f      	movs	r1, #15
 8001f24:	f000 f98c 	bl	8002240 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_COM1_IRQn);
 8001f28:	2025      	movs	r0, #37	; 0x25
}
 8001f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(DISCOVERY_COM1_IRQn);
 8001f2e:	f000 b9b9 	b.w	80022a4 <HAL_NVIC_EnableIRQ>
	...

08001f34 <BSP_STDIO_Init>:
{ 
 8001f34:	b538      	push	{r3, r4, r5, lr}
	UARTHandle.Instance = USART1;
 8001f36:	4c10      	ldr	r4, [pc, #64]	; (8001f78 <BSP_STDIO_Init+0x44>)
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <BSP_STDIO_Init+0x48>)
	if (HAL_UART_DeInit(&UARTHandle) != HAL_OK)
 8001f3a:	4620      	mov	r0, r4
	UARTHandle.Instance = USART1;
 8001f3c:	6023      	str	r3, [r4, #0]
	if (HAL_UART_DeInit(&UARTHandle) != HAL_OK)
 8001f3e:	f002 ff4c 	bl	8004dda <HAL_UART_DeInit>
 8001f42:	b108      	cbz	r0, 8001f48 <BSP_STDIO_Init+0x14>
		return STDIO_ERROR;
 8001f44:	2001      	movs	r0, #1
}
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
	UARTHandle.Init.BaudRate = 115200;
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	if (BSP_COM_Init(COM1, &UARTHandle) != HAL_OK)
 8001f4c:	4621      	mov	r1, r4
	UARTHandle.Init.OverSampling = USART_OVERSAMPLING_16;
 8001f4e:	61e0      	str	r0, [r4, #28]
	UARTHandle.Init.BaudRate = 115200;
 8001f50:	6062      	str	r2, [r4, #4]
	UARTHandle.Init.Mode = USART_MODE_TX_RX;
 8001f52:	220c      	movs	r2, #12
	UARTHandle.Init.WordLength = USART_WORDLENGTH_8B;
 8001f54:	60a0      	str	r0, [r4, #8]
	UARTHandle.Init.Mode = USART_MODE_TX_RX;
 8001f56:	6162      	str	r2, [r4, #20]
	UARTHandle.Init.StopBits = USART_STOPBITS_1;
 8001f58:	e9c4 0003 	strd	r0, r0, [r4, #12]
	if (BSP_COM_Init(COM1, &UARTHandle) != HAL_OK)
 8001f5c:	f7ff f8ca 	bl	80010f4 <BSP_COM_Init>
 8001f60:	4605      	mov	r5, r0
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d1ee      	bne.n	8001f44 <BSP_STDIO_Init+0x10>
	BSP_STDIO_MspInit();
 8001f66:	f7ff ffd9 	bl	8001f1c <BSP_STDIO_MspInit>
	HAL_UART_Receive_IT(&UARTHandle,(uint8_t*)stdinBuffer, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <BSP_STDIO_Init+0x4c>)
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f002 ff4f 	bl	8004e12 <HAL_UART_Receive_IT>
	return STDIO_OK;
 8001f74:	4628      	mov	r0, r5
 8001f76:	e7e6      	b.n	8001f46 <BSP_STDIO_Init+0x12>
 8001f78:	20020430 	.word	0x20020430
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	20028b2c 	.word	0x20028b2c

08001f84 <BSP_TS_Init>:
 * @param  ts_SizeX: Maximum X size of the TS area on LCD
 * @param  ts_SizeY: Maximum Y size of the TS area on LCD
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
	uint8_t status = TS_OK;
	tsXBoundary = ts_SizeX;
 8001f86:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <BSP_TS_Init+0x30>)
	tsYBoundary = ts_SizeY;

	/* Read ID and verify if the touch screen driver is ready */
	ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001f88:	4d0b      	ldr	r5, [pc, #44]	; (8001fb8 <BSP_TS_Init+0x34>)
	tsXBoundary = ts_SizeX;
 8001f8a:	8020      	strh	r0, [r4, #0]
	ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001f8c:	2070      	movs	r0, #112	; 0x70
 8001f8e:	682b      	ldr	r3, [r5, #0]
	tsYBoundary = ts_SizeY;
 8001f90:	8061      	strh	r1, [r4, #2]
	ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8001f92:	4798      	blx	r3
	if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8001f94:	686b      	ldr	r3, [r5, #4]
 8001f96:	2070      	movs	r0, #112	; 0x70
 8001f98:	4798      	blx	r3
 8001f9a:	2851      	cmp	r0, #81	; 0x51
 8001f9c:	d108      	bne.n	8001fb0 <BSP_TS_Init+0x2c>
	{
		/* Initialize the TS driver structure */
		tsDriver = &ft5336_ts_drv;
		I2cAddress = TS_I2C_ADDRESS;
		tsOrientation = TS_SWAP_XY;
 8001f9e:	2308      	movs	r3, #8
		I2cAddress = TS_I2C_ADDRESS;
 8001fa0:	2070      	movs	r0, #112	; 0x70
		tsDriver = &ft5336_ts_drv;
 8001fa2:	6065      	str	r5, [r4, #4]
		tsOrientation = TS_SWAP_XY;
 8001fa4:	7263      	strb	r3, [r4, #9]

		/* Initialize the TS driver */
		tsDriver->Start(I2cAddress);
 8001fa6:	68eb      	ldr	r3, [r5, #12]
		I2cAddress = TS_I2C_ADDRESS;
 8001fa8:	7220      	strb	r0, [r4, #8]
		tsDriver->Start(I2cAddress);
 8001faa:	4798      	blx	r3
	uint8_t status = TS_OK;
 8001fac:	2000      	movs	r0, #0
	{
		status = TS_DEVICE_NOT_FOUND;
	}

	return status;
}
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
		status = TS_DEVICE_NOT_FOUND;
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	e7fc      	b.n	8001fae <BSP_TS_Init+0x2a>
 8001fb4:	200204a0 	.word	0x200204a0
 8001fb8:	20000000 	.word	0x20000000

08001fbc <BSP_TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8001fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t gestureId = 0;
	uint8_t  ts_status = TS_OK;

	/* Get gesture Id */
	ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <BSP_TS_Get_GestureId+0x5c>)
	uint32_t gestureId = 0;
 8001fc0:	a902      	add	r1, sp, #8
 8001fc2:	2400      	movs	r4, #0
{
 8001fc4:	4605      	mov	r5, r0
	ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001fc6:	7a18      	ldrb	r0, [r3, #8]
	uint32_t gestureId = 0;
 8001fc8:	f841 4d04 	str.w	r4, [r1, #-4]!
	ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8001fcc:	f7fe fd64 	bl	8000a98 <ft5336_TS_GetGestureID>

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 8001fd0:	9801      	ldr	r0, [sp, #4]
 8001fd2:	2818      	cmp	r0, #24
 8001fd4:	d017      	beq.n	8002006 <BSP_TS_Get_GestureId+0x4a>
 8001fd6:	d809      	bhi.n	8001fec <BSP_TS_Get_GestureId+0x30>
 8001fd8:	2810      	cmp	r0, #16
 8001fda:	d00f      	beq.n	8001ffc <BSP_TS_Get_GestureId+0x40>
 8001fdc:	2814      	cmp	r0, #20
 8001fde:	d010      	beq.n	8002002 <BSP_TS_Get_GestureId+0x46>
 8001fe0:	b9b8      	cbnz	r0, 8002012 <BSP_TS_Get_GestureId+0x56>
	uint8_t  ts_status = TS_OK;
 8001fe2:	4604      	mov	r4, r0
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 8001fe4:	62a8      	str	r0, [r5, #40]	; 0x28
		ts_status = TS_ERROR;
		break;
	} /* of switch(gestureId) */

	return(ts_status);
}
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	b003      	add	sp, #12
 8001fea:	bd30      	pop	{r4, r5, pc}
	switch(gestureId)
 8001fec:	2840      	cmp	r0, #64	; 0x40
 8001fee:	d00c      	beq.n	800200a <BSP_TS_Get_GestureId+0x4e>
 8001ff0:	2849      	cmp	r0, #73	; 0x49
 8001ff2:	d00c      	beq.n	800200e <BSP_TS_Get_GestureId+0x52>
 8001ff4:	281c      	cmp	r0, #28
 8001ff6:	d10c      	bne.n	8002012 <BSP_TS_Get_GestureId+0x56>
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e000      	b.n	8001ffe <BSP_TS_Get_GestureId+0x42>
		TS_State->gestureId = GEST_ID_MOVE_UP;
 8001ffc:	2301      	movs	r3, #1
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8001ffe:	62ab      	str	r3, [r5, #40]	; 0x28
		break;
 8002000:	e7f1      	b.n	8001fe6 <BSP_TS_Get_GestureId+0x2a>
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002002:	2302      	movs	r3, #2
 8002004:	e7fb      	b.n	8001ffe <BSP_TS_Get_GestureId+0x42>
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002006:	2303      	movs	r3, #3
 8002008:	e7f9      	b.n	8001ffe <BSP_TS_Get_GestureId+0x42>
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 800200a:	2305      	movs	r3, #5
 800200c:	e7f7      	b.n	8001ffe <BSP_TS_Get_GestureId+0x42>
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800200e:	2306      	movs	r3, #6
 8002010:	e7f5      	b.n	8001ffe <BSP_TS_Get_GestureId+0x42>
		ts_status = TS_ERROR;
 8002012:	2401      	movs	r4, #1
 8002014:	e7e7      	b.n	8001fe6 <BSP_TS_Get_GestureId+0x2a>
 8002016:	bf00      	nop
 8002018:	200204a0 	.word	0x200204a0

0800201c <BSP_TS_GetState>:
{
 800201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002020:	4d5c      	ldr	r5, [pc, #368]	; (8002194 <BSP_TS_GetState+0x178>)
{
 8002022:	b095      	sub	sp, #84	; 0x54
	uint32_t weight = 0;
 8002024:	2400      	movs	r4, #0
{
 8002026:	4680      	mov	r8, r0
	TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002028:	686b      	ldr	r3, [r5, #4]
	uint32_t event = 0;
 800202a:	9407      	str	r4, [sp, #28]
	TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	7a28      	ldrb	r0, [r5, #8]
	uint32_t area = 0;
 8002030:	e9cd 4405 	strd	r4, r4, [sp, #20]
	TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002034:	4798      	blx	r3
 8002036:	f888 0000 	strb.w	r0, [r8]
	if(TS_State->touchDetected)
 800203a:	b170      	cbz	r0, 800205a <BSP_TS_GetState+0x3e>
 800203c:	f108 0616 	add.w	r6, r8, #22
 8002040:	f108 0702 	add.w	r7, r8, #2
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002044:	f105 0a0c 	add.w	sl, r5, #12
	y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002048:	f105 0b20 	add.w	fp, r5, #32
		for(index=0; index < TS_State->touchDetected; index++)
 800204c:	f898 3000 	ldrb.w	r3, [r8]
 8002050:	42a3      	cmp	r3, r4
 8002052:	d805      	bhi.n	8002060 <BSP_TS_GetState+0x44>
		ts_status = BSP_TS_Get_GestureId(TS_State);
 8002054:	4640      	mov	r0, r8
 8002056:	f7ff ffb1 	bl	8001fbc <BSP_TS_Get_GestureId>
}
 800205a:	b015      	add	sp, #84	; 0x54
 800205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002060:	686a      	ldr	r2, [r5, #4]
 8002062:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8002066:	ab0e      	add	r3, sp, #56	; 0x38
 8002068:	0061      	lsls	r1, r4, #1
 800206a:	6952      	ldr	r2, [r2, #20]
 800206c:	9303      	str	r3, [sp, #12]
 800206e:	4694      	mov	ip, r2
 8002070:	7a28      	ldrb	r0, [r5, #8]
 8002072:	eb09 0201 	add.w	r2, r9, r1
 8002076:	4419      	add	r1, r3
 8002078:	4663      	mov	r3, ip
 800207a:	4798      	blx	r3
			if(tsOrientation == TS_SWAP_NONE)
 800207c:	7a68      	ldrb	r0, [r5, #9]
 800207e:	9b03      	ldr	r3, [sp, #12]
 8002080:	a908      	add	r1, sp, #32
 8002082:	2801      	cmp	r0, #1
 8002084:	aa0b      	add	r2, sp, #44	; 0x2c
				x[index] = brute_x[index];
 8002086:	bf01      	itttt	eq
 8002088:	f833 c014 	ldrheq.w	ip, [r3, r4, lsl #1]
 800208c:	f821 c014 	strheq.w	ip, [r1, r4, lsl #1]
				y[index] = brute_y[index];
 8002090:	f839 c014 	ldrheq.w	ip, [r9, r4, lsl #1]
 8002094:	f822 c014 	strheq.w	ip, [r2, r4, lsl #1]
			if(tsOrientation & TS_SWAP_X)
 8002098:	f010 0f02 	tst.w	r0, #2
				x[index] = 4096 - brute_x[index];
 800209c:	bf1e      	ittt	ne
 800209e:	f833 c014 	ldrhne.w	ip, [r3, r4, lsl #1]
 80020a2:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 80020a6:	f821 c014 	strhne.w	ip, [r1, r4, lsl #1]
			if(tsOrientation & TS_SWAP_Y)
 80020aa:	f010 0f04 	tst.w	r0, #4
				y[index] = 4096 - brute_y[index];
 80020ae:	bf1e      	ittt	ne
 80020b0:	f839 c014 	ldrhne.w	ip, [r9, r4, lsl #1]
 80020b4:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 80020b8:	f822 c014 	strhne.w	ip, [r2, r4, lsl #1]
			if(tsOrientation & TS_SWAP_XY)
 80020bc:	0700      	lsls	r0, r0, #28
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80020be:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
				y[index] = brute_x[index];
 80020c2:	bf41      	itttt	mi
 80020c4:	f833 3014 	ldrhmi.w	r3, [r3, r4, lsl #1]
 80020c8:	f822 3014 	strhmi.w	r3, [r2, r4, lsl #1]
				x[index] = brute_y[index];
 80020cc:	f839 3014 	ldrhmi.w	r3, [r9, r4, lsl #1]
 80020d0:	f821 3014 	strhmi.w	r3, [r1, r4, lsl #1]
	if ((int32_t)(480 - x[index])>=0)
 80020d4:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 80020d8:	f5d3 73f0 	rsbs	r3, r3, #480	; 0x1e0
		x[index] = 0;
 80020dc:	bf48      	it	mi
 80020de:	2300      	movmi	r3, #0
 80020e0:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
	if ((int32_t)(260 - y[index])>=0)
 80020e4:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80020e8:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 80020ec:	00a1      	lsls	r1, r4, #2
	if ((int32_t)(260 - y[index])>=0)
 80020ee:	f5d3 7382 	rsbs	r3, r3, #260	; 0x104
		y[index] = 0;
 80020f2:	bf48      	it	mi
 80020f4:	2300      	movmi	r3, #0
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80020f6:	4586      	cmp	lr, r0
		y[index] = 0;
 80020f8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 80020fc:	b283      	uxth	r3, r0
	y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80020fe:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
 8002102:	f851 000b 	ldr.w	r0, [r1, fp]
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002106:	bf8c      	ite	hi
 8002108:	ebae 0303 	subhi.w	r3, lr, r3
 800210c:	eba3 030e 	subls.w	r3, r3, lr
 8002110:	b282      	uxth	r2, r0
	y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002112:	4584      	cmp	ip, r0
	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002114:	b29b      	uxth	r3, r3
	if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002116:	7a28      	ldrb	r0, [r5, #8]
	y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002118:	bf8c      	ite	hi
 800211a:	ebac 0202 	subhi.w	r2, ip, r2
 800211e:	eba2 020c 	subls.w	r2, r2, ip
 8002122:	b292      	uxth	r2, r2
	if ((x_diff + y_diff) > 5)
 8002124:	4413      	add	r3, r2
 8002126:	2b05      	cmp	r3, #5
		_x[index] = x[index];
 8002128:	bfc4      	itt	gt
 800212a:	f84a e001 	strgt.w	lr, [sl, r1]
		_y[index] = y[index];
 800212e:	f84b c001 	strgt.w	ip, [fp, r1]
	if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002132:	2870      	cmp	r0, #112	; 0x70
 8002134:	d116      	bne.n	8002164 <BSP_TS_GetState+0x148>
		TS_State->touchX[index] = x[index];
 8002136:	f8a7 e000 	strh.w	lr, [r7]
		TS_State->touchY[index] = y[index];
 800213a:	f8a7 c00a 	strh.w	ip, [r7, #10]
	ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800213e:	ab07      	add	r3, sp, #28
 8002140:	aa05      	add	r2, sp, #20
 8002142:	4621      	mov	r1, r4
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	ab06      	add	r3, sp, #24
 8002148:	f7fe fcb6 	bl	8000ab8 <ft5336_TS_GetTouchInfo>
	TS_State->touchWeight[index] = weight;
 800214c:	9b05      	ldr	r3, [sp, #20]
 800214e:	f806 3b01 	strb.w	r3, [r6], #1
	TS_State->touchArea[index]   = area;
 8002152:	9b06      	ldr	r3, [sp, #24]
 8002154:	7273      	strb	r3, [r6, #9]
	switch(event)
 8002156:	9b07      	ldr	r3, [sp, #28]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d812      	bhi.n	8002182 <BSP_TS_GetState+0x166>
 800215c:	e8df f003 	tbb	[pc, r3]
 8002160:	1816140f 	.word	0x1816140f
		TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002164:	f85a 3001 	ldr.w	r3, [sl, r1]
 8002168:	882a      	ldrh	r2, [r5, #0]
 800216a:	4353      	muls	r3, r2
		TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800216c:	886a      	ldrh	r2, [r5, #2]
		TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800216e:	0b1b      	lsrs	r3, r3, #12
 8002170:	803b      	strh	r3, [r7, #0]
		TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8002172:	f85b 3001 	ldr.w	r3, [fp, r1]
 8002176:	4353      	muls	r3, r2
 8002178:	0b1b      	lsrs	r3, r3, #12
 800217a:	817b      	strh	r3, [r7, #10]
 800217c:	e7df      	b.n	800213e <BSP_TS_GetState+0x122>
		TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800217e:	2301      	movs	r3, #1
		TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002180:	7133      	strb	r3, [r6, #4]
		for(index=0; index < TS_State->touchDetected; index++)
 8002182:	3401      	adds	r4, #1
 8002184:	3702      	adds	r7, #2
 8002186:	e761      	b.n	800204c <BSP_TS_GetState+0x30>
		TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8002188:	2302      	movs	r3, #2
 800218a:	e7f9      	b.n	8002180 <BSP_TS_GetState+0x164>
		TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800218c:	2303      	movs	r3, #3
 800218e:	e7f7      	b.n	8002180 <BSP_TS_GetState+0x164>
		TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002190:	2300      	movs	r3, #0
 8002192:	e7f5      	b.n	8002180 <BSP_TS_GetState+0x164>
 8002194:	200204a0 	.word	0x200204a0

08002198 <BSP_TS_ITClear>:
 * @brief  Clears all touch screen interrupts.
 */
void BSP_TS_ITClear(void)
{
	/* Clear TS IT pending bits */
	tsDriver->ClearIT(I2cAddress);
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <BSP_TS_ITClear+0xc>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	7a18      	ldrb	r0, [r3, #8]
 800219e:	69d2      	ldr	r2, [r2, #28]
 80021a0:	4710      	bx	r2
 80021a2:	bf00      	nop
 80021a4:	200204a0 	.word	0x200204a0

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021bc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021be:	f000 f82d 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c2:	200f      	movs	r0, #15
 80021c4:	f002 fdd8 	bl	8004d78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80021c8:	f003 fe02 	bl	8005dd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80021cc:	2000      	movs	r0, #0
 80021ce:	bd08      	pop	{r3, pc}
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <HAL_IncTick+0x10>)
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_IncTick+0x14>)
 80021d8:	6811      	ldr	r1, [r2, #0]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20028b90 	.word	0x20028b90
 80021e8:	20000050 	.word	0x20000050

080021ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <HAL_GetTick+0x8>)
 80021ee:	6818      	ldr	r0, [r3, #0]
}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20028b90 	.word	0x20028b90

080021f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fff6 	bl	80021ec <HAL_GetTick>
 8002200:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002204:	bf1e      	ittt	ne
 8002206:	4b04      	ldrne	r3, [pc, #16]	; (8002218 <HAL_Delay+0x20>)
 8002208:	781b      	ldrbne	r3, [r3, #0]
 800220a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	1b40      	subs	r0, r0, r5
 8002212:	42a0      	cmp	r0, r4
 8002214:	d3fa      	bcc.n	800220c <HAL_Delay+0x14>
  {
  }
}
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	20000050 	.word	0x20000050

0800221c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800221e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002222:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002236:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002238:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b570      	push	{r4, r5, r6, lr}
 8002244:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002246:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	2d04      	cmp	r5, #4
 8002256:	bf28      	it	cs
 8002258:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002260:	bf8c      	ite	hi
 8002262:	3c03      	subhi	r4, #3
 8002264:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) < 0)
 8002266:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	ea21 0303 	bic.w	r3, r1, r3
 800226c:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	fa06 f404 	lsl.w	r4, r6, r4
 8002274:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	ea43 0304 	orr.w	r3, r3, r4
 800227c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002280:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) < 0)
 8002282:	da04      	bge.n	800228e <HAL_NVIC_SetPriority+0x4e>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	f000 000f 	and.w	r0, r0, #15
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_NVIC_SetPriority+0x60>)
 800228a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800228c:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002292:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002296:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 800229a:	e7f7      	b.n	800228c <HAL_NVIC_SetPriority+0x4c>
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	e000ed14 	.word	0xe000ed14

080022a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022a4:	0942      	lsrs	r2, r0, #5
 80022a6:	2301      	movs	r3, #1
 80022a8:	f000 001f 	and.w	r0, r0, #31
 80022ac:	fa03 f000 	lsl.w	r0, r3, r0
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_NVIC_EnableIRQ+0x14>)
 80022b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100

080022bc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	2118      	movs	r1, #24
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c6:	3a10      	subs	r2, #16
 80022c8:	f023 0303 	bic.w	r3, r3, #3
 80022cc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80022d2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022d4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022d6:	bf88      	it	hi
 80022d8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022da:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022dc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80022de:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	0801f370 	.word	0x0801f370

080022e8 <HAL_DMA_Init>:
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ff7e 	bl	80021ec <HAL_GetTick>
 80022f0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d071      	beq.n	80023da <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80022f6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80022f8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80022fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	680b      	ldr	r3, [r1, #0]
 8002310:	07d8      	lsls	r0, r3, #31
 8002312:	d43c      	bmi.n	800238e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8002314:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002316:	4d32      	ldr	r5, [pc, #200]	; (80023e0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002318:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800231a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	68e2      	ldr	r2, [r4, #12]
 8002324:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	6922      	ldr	r2, [r4, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	6962      	ldr	r2, [r4, #20]
 800232c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	69e2      	ldr	r2, [r4, #28]
 8002330:	4303      	orrs	r3, r0
 8002332:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	6a22      	ldr	r2, [r4, #32]
 8002336:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002338:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800233a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002340:	bf02      	ittt	eq
 8002342:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002346:	4335      	orreq	r5, r6
 8002348:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800234c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800234e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002350:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002354:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002358:	d10b      	bne.n	8002372 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800235a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800235c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002360:	b13d      	cbz	r5, 8002372 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	b9f8      	cbnz	r0, 80023a4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8002364:	2a01      	cmp	r2, #1
 8002366:	d02d      	beq.n	80023c4 <HAL_DMA_Init+0xdc>
 8002368:	d301      	bcc.n	800236e <HAL_DMA_Init+0x86>
 800236a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800236c:	d101      	bne.n	8002372 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236e:	01ea      	lsls	r2, r5, #7
 8002370:	d42b      	bmi.n	80023ca <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8002372:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff ffa1 	bl	80022bc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800237c:	233f      	movs	r3, #63	; 0x3f
 800237e:	4093      	lsls	r3, r2
 8002380:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002382:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002384:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002386:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002388:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800238c:	e009      	b.n	80023a2 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238e:	f7ff ff2d 	bl	80021ec <HAL_GetTick>
 8002392:	1b40      	subs	r0, r0, r5
 8002394:	2805      	cmp	r0, #5
 8002396:	d9b9      	bls.n	800230c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800239c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80023a8:	d113      	bne.n	80023d2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80023aa:	2a03      	cmp	r2, #3
 80023ac:	d8e1      	bhi.n	8002372 <HAL_DMA_Init+0x8a>
 80023ae:	a001      	add	r0, pc, #4	; (adr r0, 80023b4 <HAL_DMA_Init+0xcc>)
 80023b0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80023b4:	080023cb 	.word	0x080023cb
 80023b8:	0800236f 	.word	0x0800236f
 80023bc:	080023cb 	.word	0x080023cb
 80023c0:	080023c5 	.word	0x080023c5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80023c8:	d1d3      	bne.n	8002372 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ca:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80023cc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ce:	6563      	str	r3, [r4, #84]	; 0x54
 80023d0:	e7e5      	b.n	800239e <HAL_DMA_Init+0xb6>
    switch (tmp)
 80023d2:	2a02      	cmp	r2, #2
 80023d4:	d9f9      	bls.n	80023ca <HAL_DMA_Init+0xe2>
 80023d6:	2a03      	cmp	r2, #3
 80023d8:	e7c8      	b.n	800236c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80023da:	2001      	movs	r0, #1
 80023dc:	e7e1      	b.n	80023a2 <HAL_DMA_Init+0xba>
 80023de:	bf00      	nop
 80023e0:	f010803f 	.word	0xf010803f

080023e4 <HAL_DMA_DeInit>:
{
 80023e4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80023e6:	4605      	mov	r5, r0
 80023e8:	b320      	cbz	r0, 8002434 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80023ea:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80023ee:	b2e4      	uxtb	r4, r4
 80023f0:	2c02      	cmp	r4, #2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80023f4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80023f6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002400:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002402:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002404:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002406:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002408:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800240a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800240c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800240e:	f7ff ff55 	bl	80022bc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002412:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002414:	233f      	movs	r3, #63	; 0x3f
 8002416:	4093      	lsls	r3, r2
 8002418:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800241c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002420:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002424:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002428:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800242c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 8002430:	4620      	mov	r0, r4
 8002432:	e000      	b.n	8002436 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
}
 8002436:	bd38      	pop	{r3, r4, r5, pc}

08002438 <HAL_DMA_Abort>:
{
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7ff fed5 	bl	80021ec <HAL_GetTick>
 8002442:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002444:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002448:	2b02      	cmp	r3, #2
 800244a:	d006      	beq.n	800245a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 800244e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002450:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002452:	2300      	movs	r3, #0
 8002454:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002458:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f022 0216 	bic.w	r2, r2, #22
 8002462:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800246a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800246c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800246e:	b90a      	cbnz	r2, 8002474 <HAL_DMA_Abort+0x3c>
 8002470:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002472:	b11a      	cbz	r2, 800247c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f022 0208 	bic.w	r2, r2, #8
 800247a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	f010 0001 	ands.w	r0, r0, #1
 800248c:	d109      	bne.n	80024a2 <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002490:	233f      	movs	r3, #63	; 0x3f
 8002492:	4093      	lsls	r3, r2
 8002494:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002496:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8002498:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80024a0:	e7da      	b.n	8002458 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a2:	f7ff fea3 	bl	80021ec <HAL_GetTick>
 80024a6:	1b80      	subs	r0, r0, r6
 80024a8:	2805      	cmp	r0, #5
 80024aa:	d9eb      	bls.n	8002484 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ae:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b0:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80024b2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80024b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80024bc:	e7cc      	b.n	8002458 <HAL_DMA_Abort+0x20>

080024be <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
 80024cc:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80024ce:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d0:	2305      	movs	r3, #5
 80024d2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80024d6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80024e4:	2300      	movs	r3, #0
{
 80024e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80024e8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ea:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80024ec:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_DMA_IRQHandler+0x178>)
{
 80024ee:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80024f2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80024f6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f8:	409a      	lsls	r2, r3
 80024fa:	4232      	tst	r2, r6
 80024fc:	d00c      	beq.n	8002518 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024fe:	6801      	ldr	r1, [r0, #0]
 8002500:	6808      	ldr	r0, [r1, #0]
 8002502:	0740      	lsls	r0, r0, #29
 8002504:	d508      	bpl.n	8002518 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002506:	6808      	ldr	r0, [r1, #0]
 8002508:	f020 0004 	bic.w	r0, r0, #4
 800250c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800250e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002510:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	4232      	tst	r2, r6
 800251e:	d008      	beq.n	8002532 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002520:	6821      	ldr	r1, [r4, #0]
 8002522:	6949      	ldr	r1, [r1, #20]
 8002524:	0609      	lsls	r1, r1, #24
 8002526:	d504      	bpl.n	8002532 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002528:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800252c:	f042 0202 	orr.w	r2, r2, #2
 8002530:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002532:	2204      	movs	r2, #4
 8002534:	409a      	lsls	r2, r3
 8002536:	4232      	tst	r2, r6
 8002538:	d008      	beq.n	800254c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	6809      	ldr	r1, [r1, #0]
 800253e:	0788      	lsls	r0, r1, #30
 8002540:	d504      	bpl.n	800254c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002542:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	2210      	movs	r2, #16
 800254e:	409a      	lsls	r2, r3
 8002550:	4232      	tst	r2, r6
 8002552:	d010      	beq.n	8002576 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	0709      	lsls	r1, r1, #28
 800255a:	d50c      	bpl.n	8002576 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800255c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	0350      	lsls	r0, r2, #13
 8002562:	d537      	bpl.n	80025d4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0319      	lsls	r1, r3, #12
 8002568:	d401      	bmi.n	800256e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800256a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800256c:	e000      	b.n	8002570 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800256e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002570:	b10b      	cbz	r3, 8002576 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002572:	4620      	mov	r0, r4
 8002574:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002578:	2220      	movs	r2, #32
 800257a:	408a      	lsls	r2, r1
 800257c:	4232      	tst	r2, r6
 800257e:	d03a      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	06c6      	lsls	r6, r0, #27
 8002586:	d536      	bpl.n	80025f6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002588:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800258a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800258e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002590:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002592:	d127      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002594:	f022 0216 	bic.w	r2, r2, #22
 8002598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025a4:	b90a      	cbnz	r2, 80025aa <HAL_DMA_IRQHandler+0xc6>
 80025a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025a8:	b11a      	cbz	r2, 80025b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f022 0208 	bic.w	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b2:	233f      	movs	r3, #63	; 0x3f
 80025b4:	408b      	lsls	r3, r1
 80025b6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80025b8:	2300      	movs	r3, #0
 80025ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80025be:	2301      	movs	r3, #1
 80025c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80025c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d045      	beq.n	8002656 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80025ca:	4620      	mov	r0, r4
}
 80025cc:	b003      	add	sp, #12
 80025ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80025d2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	05d2      	lsls	r2, r2, #23
 80025d8:	d4c7      	bmi.n	800256a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e7c2      	b.n	800256a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e4:	0350      	lsls	r0, r2, #13
 80025e6:	d527      	bpl.n	8002638 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0319      	lsls	r1, r3, #12
 80025ec:	d431      	bmi.n	8002652 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80025ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80025f0:	b10b      	cbz	r3, 80025f6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80025f2:	4620      	mov	r0, r4
 80025f4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025f8:	b36b      	cbz	r3, 8002656 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025fc:	07da      	lsls	r2, r3, #31
 80025fe:	d519      	bpl.n	8002634 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002600:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002602:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8002604:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002610:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002614:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8002618:	9b01      	ldr	r3, [sp, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	42bb      	cmp	r3, r7
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	d802      	bhi.n	8002628 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	07db      	lsls	r3, r3, #31
 8002626:	d4f7      	bmi.n	8002618 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8002628:	2300      	movs	r3, #0
 800262a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800262e:	2301      	movs	r3, #1
 8002630:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002634:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002636:	e7c6      	b.n	80025c6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800263e:	d108      	bne.n	8002652 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	f021 0110 	bic.w	r1, r1, #16
 8002646:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002648:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800264a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800264e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002652:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002654:	e7cc      	b.n	80025f0 <HAL_DMA_IRQHandler+0x10c>
}
 8002656:	b003      	add	sp, #12
 8002658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265a:	bf00      	nop
 800265c:	20000058 	.word	0x20000058

08002660 <HAL_DMA_RegisterCallback>:
  __HAL_LOCK(hdma);
 8002660:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002664:	2b01      	cmp	r3, #1
{
 8002666:	b510      	push	{r4, lr}
 8002668:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800266a:	d01f      	beq.n	80026ac <HAL_DMA_RegisterCallback+0x4c>
 800266c:	2301      	movs	r3, #1
 800266e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002672:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8002676:	4298      	cmp	r0, r3
 8002678:	d113      	bne.n	80026a2 <HAL_DMA_RegisterCallback+0x42>
    switch (CallbackID)
 800267a:	2905      	cmp	r1, #5
 800267c:	d805      	bhi.n	800268a <HAL_DMA_RegisterCallback+0x2a>
 800267e:	e8df f001 	tbb	[pc, r1]
 8002682:	0603      	.short	0x0603
 8002684:	0e0c0a08 	.word	0x0e0c0a08
      hdma->XferCpltCallback = pCallback;
 8002688:	63e2      	str	r2, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2000      	movs	r0, #0
 800268c:	e00a      	b.n	80026a4 <HAL_DMA_RegisterCallback+0x44>
      hdma->XferHalfCpltCallback = pCallback;
 800268e:	6422      	str	r2, [r4, #64]	; 0x40
 8002690:	e7fb      	b.n	800268a <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1CpltCallback = pCallback;
 8002692:	6462      	str	r2, [r4, #68]	; 0x44
 8002694:	e7f9      	b.n	800268a <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1HalfCpltCallback = pCallback;
 8002696:	64a2      	str	r2, [r4, #72]	; 0x48
 8002698:	e7f7      	b.n	800268a <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferErrorCallback = pCallback;
 800269a:	64e2      	str	r2, [r4, #76]	; 0x4c
 800269c:	e7f5      	b.n	800268a <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferAbortCallback = pCallback;
 800269e:	6522      	str	r2, [r4, #80]	; 0x50
 80026a0:	e7f3      	b.n	800268a <HAL_DMA_RegisterCallback+0x2a>
    status =  HAL_ERROR;
 80026a2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdma);
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80026aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma);
 80026ac:	2002      	movs	r0, #2
 80026ae:	e7fc      	b.n	80026aa <HAL_DMA_RegisterCallback+0x4a>

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b4:	680b      	ldr	r3, [r1, #0]
{
 80026b6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800287c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026bc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4a6c      	ldr	r2, [pc, #432]	; (8002874 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026c2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002880 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80026c6:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80026cc:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d0:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80026d4:	45b4      	cmp	ip, r6
 80026d6:	f040 80b3 	bne.w	8002840 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026da:	684c      	ldr	r4, [r1, #4]
 80026dc:	f024 0710 	bic.w	r7, r4, #16
 80026e0:	2f02      	cmp	r7, #2
 80026e2:	d116      	bne.n	8002712 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80026e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026e8:	f003 0b07 	and.w	fp, r3, #7
 80026ec:	f04f 0e0f 	mov.w	lr, #15
 80026f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80026f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80026f8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026fc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002700:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002704:	690d      	ldr	r5, [r1, #16]
 8002706:	fa05 f50b 	lsl.w	r5, r5, fp
 800270a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800270e:	f8ca 5020 	str.w	r5, [sl, #32]
 8002712:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002716:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002718:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800271c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002720:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002724:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002726:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800272c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272e:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002732:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8002736:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800273a:	d811      	bhi.n	8002760 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800273c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800273e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002742:	68cf      	ldr	r7, [r1, #12]
 8002744:	fa07 fe0a 	lsl.w	lr, r7, sl
 8002748:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 800274c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800274e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002754:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002758:	409f      	lsls	r7, r3
 800275a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800275e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002760:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002762:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002764:	688f      	ldr	r7, [r1, #8]
 8002766:	fa07 f70a 	lsl.w	r7, r7, sl
 800276a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800276c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276e:	00e5      	lsls	r5, r4, #3
 8002770:	d566      	bpl.n	8002840 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002776:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800277a:	f003 0c03 	and.w	ip, r3, #3
 800277e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002786:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800278a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8002792:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002796:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800279a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800279e:	9503      	str	r5, [sp, #12]
 80027a0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027a2:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80027a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027aa:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ae:	4d32      	ldr	r5, [pc, #200]	; (8002878 <HAL_GPIO_Init+0x1c8>)
 80027b0:	42a8      	cmp	r0, r5
 80027b2:	d04c      	beq.n	800284e <HAL_GPIO_Init+0x19e>
 80027b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027b8:	42a8      	cmp	r0, r5
 80027ba:	d04a      	beq.n	8002852 <HAL_GPIO_Init+0x1a2>
 80027bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027c0:	42a8      	cmp	r0, r5
 80027c2:	d048      	beq.n	8002856 <HAL_GPIO_Init+0x1a6>
 80027c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027c8:	42a8      	cmp	r0, r5
 80027ca:	d046      	beq.n	800285a <HAL_GPIO_Init+0x1aa>
 80027cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027d0:	42a8      	cmp	r0, r5
 80027d2:	d044      	beq.n	800285e <HAL_GPIO_Init+0x1ae>
 80027d4:	4548      	cmp	r0, r9
 80027d6:	d044      	beq.n	8002862 <HAL_GPIO_Init+0x1b2>
 80027d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80027dc:	42a8      	cmp	r0, r5
 80027de:	d042      	beq.n	8002866 <HAL_GPIO_Init+0x1b6>
 80027e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027e4:	42a8      	cmp	r0, r5
 80027e6:	d040      	beq.n	800286a <HAL_GPIO_Init+0x1ba>
 80027e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027ec:	42a8      	cmp	r0, r5
 80027ee:	d03e      	beq.n	800286e <HAL_GPIO_Init+0x1be>
 80027f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027f4:	42a8      	cmp	r0, r5
 80027f6:	bf14      	ite	ne
 80027f8:	250a      	movne	r5, #10
 80027fa:	2509      	moveq	r5, #9
 80027fc:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002800:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002804:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002808:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800280a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800280e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002810:	bf0c      	ite	eq
 8002812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002814:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002816:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800281a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800281c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800281e:	bf0c      	ite	eq
 8002820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002822:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002824:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002828:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800282a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800282c:	bf0c      	ite	eq
 800282e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002830:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002832:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002834:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002836:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002838:	bf54      	ite	pl
 800283a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800283c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800283e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002840:	3301      	adds	r3, #1
 8002842:	2b10      	cmp	r3, #16
 8002844:	f47f af3f 	bne.w	80026c6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002848:	b005      	add	sp, #20
 800284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800284e:	2500      	movs	r5, #0
 8002850:	e7d4      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 8002852:	2501      	movs	r5, #1
 8002854:	e7d2      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 8002856:	2502      	movs	r5, #2
 8002858:	e7d0      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 800285a:	2503      	movs	r5, #3
 800285c:	e7ce      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 800285e:	2504      	movs	r5, #4
 8002860:	e7cc      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 8002862:	2505      	movs	r5, #5
 8002864:	e7ca      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 8002866:	2506      	movs	r5, #6
 8002868:	e7c8      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 800286a:	2507      	movs	r5, #7
 800286c:	e7c6      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 800286e:	2508      	movs	r5, #8
 8002870:	e7c4      	b.n	80027fc <HAL_GPIO_Init+0x14c>
 8002872:	bf00      	nop
 8002874:	40013c00 	.word	0x40013c00
 8002878:	40020000 	.word	0x40020000
 800287c:	40023800 	.word	0x40023800
 8002880:	40021400 	.word	0x40021400

08002884 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002884:	6903      	ldr	r3, [r0, #16]
 8002886:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002888:	bf14      	ite	ne
 800288a:	2001      	movne	r0, #1
 800288c:	2000      	moveq	r0, #0
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002890:	b10a      	cbz	r2, 8002896 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002892:	6181      	str	r1, [r0, #24]
  }
}
 8002894:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002896:	0409      	lsls	r1, r1, #16
 8002898:	e7fb      	b.n	8002892 <HAL_GPIO_WritePin+0x2>

0800289a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800289a:	6943      	ldr	r3, [r0, #20]
 800289c:	4059      	eors	r1, r3
 800289e:	6141      	str	r1, [r0, #20]
}
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80028a8:	6959      	ldr	r1, [r3, #20]
 80028aa:	4201      	tst	r1, r0
 80028ac:	d002      	beq.n	80028b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028b0:	f003 f9a8 	bl	8005c04 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b4:	bd08      	pop	{r3, pc}
 80028b6:	bf00      	nop
 80028b8:	40013c00 	.word	0x40013c00

080028bc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028bc:	6803      	ldr	r3, [r0, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	0791      	lsls	r1, r2, #30
 80028c2:	d501      	bpl.n	80028c8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	07d2      	lsls	r2, r2, #31
 80028cc:	d403      	bmi.n	80028d6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	619a      	str	r2, [r3, #24]
  }
}
 80028d6:	4770      	bx	lr

080028d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80028d8:	b530      	push	{r4, r5, lr}
 80028da:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028dc:	6804      	ldr	r4, [r0, #0]
 80028de:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80028e2:	6860      	ldr	r0, [r4, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f3c1 0209 	ubfx	r2, r1, #0, #10
 80028ea:	431a      	orrs	r2, r3
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <I2C_TransferConfig+0x24>)
 80028ee:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80028f2:	ea20 0003 	bic.w	r0, r0, r3
 80028f6:	4302      	orrs	r2, r0
 80028f8:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028fa:	bd30      	pop	{r4, r5, pc}
 80028fc:	03ff63ff 	.word	0x03ff63ff

08002900 <I2C_WaitOnFlagUntilTimeout>:
{
 8002900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002904:	9f06      	ldr	r7, [sp, #24]
 8002906:	4604      	mov	r4, r0
 8002908:	4688      	mov	r8, r1
 800290a:	4616      	mov	r6, r2
 800290c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6993      	ldr	r3, [r2, #24]
 8002912:	ea38 0303 	bics.w	r3, r8, r3
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	42b3      	cmp	r3, r6
 800291e:	d001      	beq.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002920:	2000      	movs	r0, #0
 8002922:	e00b      	b.n	800293c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8002924:	1c6b      	adds	r3, r5, #1
 8002926:	d0f3      	beq.n	8002910 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002928:	b955      	cbnz	r5, 8002940 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800292a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800292c:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 800292e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002938:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002940:	f7ff fc54 	bl	80021ec <HAL_GetTick>
 8002944:	1bc0      	subs	r0, r0, r7
 8002946:	42a8      	cmp	r0, r5
 8002948:	d9e1      	bls.n	800290e <I2C_WaitOnFlagUntilTimeout+0xe>
 800294a:	e7ee      	b.n	800292a <I2C_WaitOnFlagUntilTimeout+0x2a>

0800294c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294c:	6803      	ldr	r3, [r0, #0]
{
 800294e:	b570      	push	{r4, r5, r6, lr}
 8002950:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002952:	6998      	ldr	r0, [r3, #24]
{
 8002954:	460d      	mov	r5, r1
 8002956:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002958:	f010 0010 	ands.w	r0, r0, #16
 800295c:	d112      	bne.n	8002984 <I2C_IsAcknowledgeFailed+0x38>
}
 800295e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002960:	1c69      	adds	r1, r5, #1
 8002962:	d010      	beq.n	8002986 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002964:	b125      	cbz	r5, 8002970 <I2C_IsAcknowledgeFailed+0x24>
 8002966:	f7ff fc41 	bl	80021ec <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	4285      	cmp	r5, r0
 800296e:	d209      	bcs.n	8002984 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8002970:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 8002974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	2300      	movs	r3, #0
 800297a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800297e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002982:	e7ec      	b.n	800295e <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	6999      	ldr	r1, [r3, #24]
 8002988:	068a      	lsls	r2, r1, #26
 800298a:	d5e9      	bpl.n	8002960 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8002990:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002996:	f7ff ff91 	bl	80028bc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800299a:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 800299c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800299e:	6853      	ldr	r3, [r2, #4]
 80029a0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80029a4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80029a8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029b2:	2304      	movs	r3, #4
 80029b4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c4:	e7cb      	b.n	800295e <I2C_IsAcknowledgeFailed+0x12>

080029c6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80029c6:	b570      	push	{r4, r5, r6, lr}
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	079b      	lsls	r3, r3, #30
 80029d4:	d501      	bpl.n	80029da <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80029d6:	2000      	movs	r0, #0
 80029d8:	e015      	b.n	8002a06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	4632      	mov	r2, r6
 80029dc:	4629      	mov	r1, r5
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff ffb4 	bl	800294c <I2C_IsAcknowledgeFailed>
 80029e4:	b9b0      	cbnz	r0, 8002a14 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	1c6a      	adds	r2, r5, #1
 80029e8:	d0f1      	beq.n	80029ce <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ea:	b96d      	cbnz	r5, 8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80029ee:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	2320      	movs	r3, #32
 80029f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002a02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a08:	f7ff fbf0 	bl	80021ec <HAL_GetTick>
 8002a0c:	1b80      	subs	r0, r0, r6
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	d9dd      	bls.n	80029ce <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8002a12:	e7eb      	b.n	80029ec <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
 8002a16:	e7f6      	b.n	8002a06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>

08002a18 <I2C_RequestMemoryWrite>:
{
 8002a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a1a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <I2C_RequestMemoryWrite+0x68>)
{
 8002a1e:	4604      	mov	r4, r0
 8002a20:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a22:	9300      	str	r3, [sp, #0]
{
 8002a24:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2a:	b2fa      	uxtb	r2, r7
 8002a2c:	f7ff ff54 	bl	80028d8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a30:	4632      	mov	r2, r6
 8002a32:	9908      	ldr	r1, [sp, #32]
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ffc6 	bl	80029c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	b128      	cbz	r0, 8002a48 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d110      	bne.n	8002a64 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
}
 8002a44:	b003      	add	sp, #12
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a48:	2f01      	cmp	r7, #1
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	d10c      	bne.n	8002a68 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a56:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	9b08      	ldr	r3, [sp, #32]
 8002a5a:	9600      	str	r6, [sp, #0]
 8002a5c:	f7ff ff50 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d0ef      	beq.n	8002a44 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
 8002a66:	e7ed      	b.n	8002a44 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a68:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	9908      	ldr	r1, [sp, #32]
 8002a6c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a70:	4632      	mov	r2, r6
 8002a72:	f7ff ffa8 	bl	80029c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d1e0      	bne.n	8002a3c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	e7e7      	b.n	8002a4e <I2C_RequestMemoryWrite+0x36>
 8002a7e:	bf00      	nop
 8002a80:	80002000 	.word	0x80002000

08002a84 <I2C_RequestMemoryRead>:
{
 8002a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a86:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <I2C_RequestMemoryRead+0x64>)
{
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a8e:	9300      	str	r3, [sp, #0]
{
 8002a90:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a92:	2300      	movs	r3, #0
 8002a94:	b2fa      	uxtb	r2, r7
 8002a96:	f7ff ff1f 	bl	80028d8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	9908      	ldr	r1, [sp, #32]
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ff91 	bl	80029c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa4:	b128      	cbz	r0, 8002ab2 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d110      	bne.n	8002ace <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
}
 8002aae:	b003      	add	sp, #12
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab2:	2f01      	cmp	r7, #1
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	d10c      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab8:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002aba:	2200      	movs	r2, #0
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac0:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac2:	9b08      	ldr	r3, [sp, #32]
 8002ac4:	9600      	str	r6, [sp, #0]
 8002ac6:	f7ff ff1b 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d0ef      	beq.n	8002aae <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8002ace:	2003      	movs	r0, #3
 8002ad0:	e7ed      	b.n	8002aae <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad2:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad4:	9908      	ldr	r1, [sp, #32]
 8002ad6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	4632      	mov	r2, r6
 8002adc:	f7ff ff73 	bl	80029c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d1e0      	bne.n	8002aa6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	e7e7      	b.n	8002ab8 <I2C_RequestMemoryRead+0x34>
 8002ae8:	80002000 	.word	0x80002000

08002aec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4604      	mov	r4, r0
 8002af0:	460d      	mov	r5, r1
 8002af2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	069b      	lsls	r3, r3, #26
 8002afa:	d501      	bpl.n	8002b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002afc:	2000      	movs	r0, #0
 8002afe:	e013      	b.n	8002b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b00:	4632      	mov	r2, r6
 8002b02:	4629      	mov	r1, r5
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7ff ff21 	bl	800294c <I2C_IsAcknowledgeFailed>
 8002b0a:	b9a0      	cbnz	r0, 8002b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b0c:	b96d      	cbnz	r5, 8002b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002b10:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002b24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b2a:	f7ff fb5f 	bl	80021ec <HAL_GetTick>
 8002b2e:	1b80      	subs	r0, r0, r6
 8002b30:	42a8      	cmp	r0, r5
 8002b32:	d9df      	bls.n	8002af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8002b34:	e7eb      	b.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e7f6      	b.n	8002b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

08002b3a <HAL_I2C_MspInit>:
}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_I2C_Init>:
{
 8002b3c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002b3e:	4604      	mov	r4, r0
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d04a      	beq.n	8002bda <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b4c:	b91b      	cbnz	r3, 8002b56 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002b4e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002b52:	f7ff fff2 	bl	8002b3a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	2324      	movs	r3, #36	; 0x24
 8002b58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b66:	6862      	ldr	r2, [r4, #4]
 8002b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b6c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b7a:	2901      	cmp	r1, #1
 8002b7c:	d124      	bne.n	8002bc8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b82:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b84:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b86:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b90:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b9a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	69a1      	ldr	r1, [r4, #24]
 8002ba2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ba6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002bc6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bc8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bcc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bd0:	d1d8      	bne.n	8002b84 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e7d4      	b.n	8002b84 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e7f3      	b.n	8002bc6 <HAL_I2C_Init+0x8a>

08002bde <HAL_I2C_MspDeInit>:
 8002bde:	4770      	bx	lr

08002be0 <HAL_I2C_DeInit>:
{
 8002be0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002be2:	4604      	mov	r4, r0
 8002be4:	b198      	cbz	r0, 8002c0e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002be6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be8:	2324      	movs	r3, #36	; 0x24
 8002bea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002bf6:	f7ff fff2 	bl	8002bde <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002bfe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c02:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002c0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	e7fc      	b.n	8002c0c <HAL_I2C_DeInit+0x2c>

08002c12 <HAL_I2C_Mem_Write>:
{
 8002c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c16:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c20:	2b20      	cmp	r3, #32
{
 8002c22:	460f      	mov	r7, r1
 8002c24:	9203      	str	r2, [sp, #12]
 8002c26:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002c2a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2e:	f040 80a3 	bne.w	8002d78 <HAL_I2C_Mem_Write+0x166>
    if ((pData == NULL) || (Size == 0U))
 8002c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c34:	b91b      	cbnz	r3, 8002c3e <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
}
 8002c38:	b005      	add	sp, #20
 8002c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8002c3e:	f1ba 0f00 	cmp.w	sl, #0
 8002c42:	d0f8      	beq.n	8002c36 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8002c44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	f000 8095 	beq.w	8002d78 <HAL_I2C_Mem_Write+0x166>
 8002c4e:	2501      	movs	r5, #1
 8002c50:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002c54:	f7ff faca 	bl	80021ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c58:	2319      	movs	r3, #25
 8002c5a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002c5c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5e:	462a      	mov	r2, r5
 8002c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff fe4b 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4680      	mov	r8, r0
 8002c6c:	b9c8      	cbnz	r0, 8002ca2 <HAL_I2C_Mem_Write+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c6e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8002c70:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c72:	9a03      	ldr	r2, [sp, #12]
 8002c74:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c7a:	2340      	movs	r3, #64	; 0x40
 8002c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c82:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c84:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002c86:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c88:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8002c8a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	e9cd 9600 	strd	r9, r6, [sp]
 8002c92:	f7ff fec1 	bl	8002a18 <I2C_RequestMemoryWrite>
 8002c96:	b130      	cbz	r0, 8002ca6 <HAL_I2C_Mem_Write+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c98:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002c9a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d0c9      	beq.n	8002c36 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	e7c8      	b.n	8002c38 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ca8:	2bff      	cmp	r3, #255	; 0xff
 8002caa:	d910      	bls.n	8002cce <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cac:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb6:	4639      	mov	r1, r7
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7ff fe0d 	bl	80028d8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	4632      	mov	r2, r6
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff fe7f 	bl	80029c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc8:	b148      	cbz	r0, 8002cde <HAL_I2C_Mem_Write+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ccc:	e7e7      	b.n	8002c9e <HAL_I2C_Mem_Write+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8002cce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	e7eb      	b.n	8002cb6 <HAL_I2C_Mem_Write+0xa4>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	6262      	str	r2, [r4, #36]	; 0x24
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 8002cea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002cec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002cee:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002cf0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002cf2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002cf4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002cf6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002cfa:	b9b2      	cbnz	r2, 8002d2a <HAL_I2C_Mem_Write+0x118>
 8002cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b19b      	cbz	r3, 8002d2a <HAL_I2C_Mem_Write+0x118>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d02:	9600      	str	r6, [sp, #0]
 8002d04:	464b      	mov	r3, r9
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff fdf9 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d1c7      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d14:	2bff      	cmp	r3, #255	; 0xff
 8002d16:	d927      	bls.n	8002d68 <HAL_I2C_Mem_Write+0x156>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d18:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d22:	4639      	mov	r1, r7
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fdd7 	bl	80028d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002d2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1c5      	bne.n	8002cbe <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	4632      	mov	r2, r6
 8002d34:	4649      	mov	r1, r9
 8002d36:	4620      	mov	r0, r4
 8002d38:	f7ff fed8 	bl	8002aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d1c4      	bne.n	8002cca <HAL_I2C_Mem_Write+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	2120      	movs	r1, #32
 8002d44:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002d4c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002d50:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d5e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d62:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002d66:	e767      	b.n	8002c38 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8002d68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002d70:	b292      	uxth	r2, r2
 8002d72:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	e7d4      	b.n	8002d22 <HAL_I2C_Mem_Write+0x110>
    return HAL_BUSY;
 8002d78:	2002      	movs	r0, #2
 8002d7a:	e75d      	b.n	8002c38 <HAL_I2C_Mem_Write+0x26>

08002d7c <HAL_I2C_Mem_Read>:
{
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002d86:	b085      	sub	sp, #20
 8002d88:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	2b20      	cmp	r3, #32
{
 8002d8c:	460f      	mov	r7, r1
 8002d8e:	9203      	str	r2, [sp, #12]
 8002d90:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002d94:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	f040 80a6 	bne.w	8002ee8 <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d9e:	b91b      	cbnz	r3, 8002da8 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
}
 8002da2:	b005      	add	sp, #20
 8002da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8002da8:	f1ba 0f00 	cmp.w	sl, #0
 8002dac:	d0f8      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8002dae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	f000 8098 	beq.w	8002ee8 <HAL_I2C_Mem_Read+0x16c>
 8002db8:	2501      	movs	r5, #1
 8002dba:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002dbe:	f7ff fa15 	bl	80021ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc2:	2319      	movs	r3, #25
 8002dc4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002dc6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc8:	462a      	mov	r2, r5
 8002dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff fd96 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	b9c8      	cbnz	r0, 8002e0c <HAL_I2C_Mem_Read+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8002dda:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ddc:	9a03      	ldr	r2, [sp, #12]
 8002dde:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dee:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002df0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002df2:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8002df4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002df8:	e9cd 9600 	strd	r9, r6, [sp]
 8002dfc:	f7ff fe42 	bl	8002a84 <I2C_RequestMemoryRead>
 8002e00:	b130      	cbz	r0, 8002e10 <HAL_I2C_Mem_Read+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002e04:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d0c9      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	e7c8      	b.n	8002da2 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_I2C_Mem_Read+0x170>)
 8002e16:	d943      	bls.n	8002ea0 <HAL_I2C_Mem_Read+0x124>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e18:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e20:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e22:	4639      	mov	r1, r7
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff fd57 	bl	80028d8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e2a:	9600      	str	r6, [sp, #0]
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2104      	movs	r1, #4
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff fd64 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d1e7      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x90>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	6261      	str	r1, [r4, #36]	; 0x24
 8002e46:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e4c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002e4e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002e50:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002e52:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002e54:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e56:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002e58:	b9b2      	cbnz	r2, 8002e88 <HAL_I2C_Mem_Read+0x10c>
 8002e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b19b      	cbz	r3, 8002e88 <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e60:	9600      	str	r6, [sp, #0]
 8002e62:	464b      	mov	r3, r9
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff fd4a 	bl	8002900 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d1cd      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	d91c      	bls.n	8002eb0 <HAL_I2C_Mem_Read+0x134>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e76:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e80:	4639      	mov	r1, r7
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff fd28 	bl	80028d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1cc      	bne.n	8002e2a <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	4632      	mov	r2, r6
 8002e92:	4649      	mov	r1, r9
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff fe29 	bl	8002aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e9a:	b188      	cbz	r0, 8002ec0 <HAL_I2C_Mem_Read+0x144>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e9e:	e7b3      	b.n	8002e08 <HAL_I2C_Mem_Read+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8002ea0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	e7b8      	b.n	8002e22 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8002eb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	e7df      	b.n	8002e80 <HAL_I2C_Mem_Read+0x104>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ecc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ed0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ede:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ee2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002ee6:	e75c      	b.n	8002da2 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8002ee8:	2002      	movs	r0, #2
 8002eea:	e75a      	b.n	8002da2 <HAL_I2C_Mem_Read+0x26>
 8002eec:	80002400 	.word	0x80002400

08002ef0 <HAL_I2C_GetState>:
  return hi2c->State;
 8002ef0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	2a20      	cmp	r2, #32
{
 8002efe:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	d11d      	bne.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d019      	beq.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0a:	2324      	movs	r3, #36	; 0x24
 8002f0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	681c      	ldr	r4, [r3, #0]
 8002f14:	f024 0401 	bic.w	r4, r4, #1
 8002f18:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f1a:	681c      	ldr	r4, [r3, #0]
 8002f1c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002f20:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f22:	681c      	ldr	r4, [r3, #0]
 8002f24:	4321      	orrs	r1, r4
 8002f26:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	f041 0101 	orr.w	r1, r1, #1
 8002f2e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f30:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f3a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002f3c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002f3e:	2002      	movs	r0, #2
 8002f40:	e7fc      	b.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002f42 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f42:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f44:	f8d1 c000 	ldr.w	ip, [r1]
{
 8002f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f4c:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f4e:	6804      	ldr	r4, [r0, #0]
 8002f50:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f52:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f56:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f58:	68e5      	ldr	r5, [r4, #12]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002f5a:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002f5e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f62:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f64:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f68:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f6c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f6e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f70:	68e0      	ldr	r0, [r4, #12]
 8002f72:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002f76:	4430      	add	r0, r6
 8002f78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002f7c:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f7e:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002f80:	68e0      	ldr	r0, [r4, #12]
 8002f82:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002f86:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f88:	6898      	ldr	r0, [r3, #8]
 8002f8a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002f8e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002f90:	6888      	ldr	r0, [r1, #8]
 8002f92:	68e6      	ldr	r6, [r4, #12]
 8002f94:	3001      	adds	r0, #1
 8002f96:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002f9a:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f9c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002f9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002fa2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002fa4:	6918      	ldr	r0, [r3, #16]
 8002fa6:	f020 0007 	bic.w	r0, r0, #7
 8002faa:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002fac:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fae:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002fb0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002fb4:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fb8:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002fbc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002fc0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002fc4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002fc8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002fcc:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002fce:	6958      	ldr	r0, [r3, #20]
 8002fd0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002fd4:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002fd6:	6948      	ldr	r0, [r1, #20]
 8002fd8:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002fda:	69d8      	ldr	r0, [r3, #28]
 8002fdc:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002fe0:	f020 0007 	bic.w	r0, r0, #7
 8002fe4:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002fe6:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8002fea:	4305      	orrs	r5, r0
 8002fec:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002fee:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ff0:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ff2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ff6:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ff8:	b31e      	cbz	r6, 8003042 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ffa:	2e01      	cmp	r6, #1
 8002ffc:	d023      	beq.n	8003046 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ffe:	1eb0      	subs	r0, r6, #2
 8003000:	2802      	cmp	r0, #2
 8003002:	d922      	bls.n	800304a <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003004:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8003006:	bf0c      	ite	eq
 8003008:	2002      	moveq	r0, #2
 800300a:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800300c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800300e:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003012:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003016:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003018:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800301a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800301c:	4345      	muls	r5, r0
 800301e:	4378      	muls	r0, r7
 8003020:	3003      	adds	r0, #3
 8003022:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003026:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003028:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800302a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800302e:	f020 0007 	bic.w	r0, r0, #7
 8003032:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003034:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003036:	58a3      	ldr	r3, [r4, r2]
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	50a3      	str	r3, [r4, r2]
}
 800303e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8003042:	2004      	movs	r0, #4
 8003044:	e7e2      	b.n	800300c <LTDC_SetConfig+0xca>
    tmp = 3;
 8003046:	2003      	movs	r0, #3
 8003048:	e7e0      	b.n	800300c <LTDC_SetConfig+0xca>
    tmp = 2;
 800304a:	2002      	movs	r0, #2
 800304c:	e7de      	b.n	800300c <LTDC_SetConfig+0xca>

0800304e <HAL_LTDC_MspInit>:
}
 800304e:	4770      	bx	lr

08003050 <HAL_LTDC_Init>:
{
 8003050:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8003052:	4604      	mov	r4, r0
 8003054:	2800      	cmp	r0, #0
 8003056:	d067      	beq.n	8003128 <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003058:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800305c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003060:	b91b      	cbnz	r3, 800306a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003062:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003066:	f7ff fff2 	bl	800304e <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003078:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800307a:	6999      	ldr	r1, [r3, #24]
 800307c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003080:	4302      	orrs	r2, r0
 8003082:	68e0      	ldr	r0, [r4, #12]
 8003084:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003086:	6920      	ldr	r0, [r4, #16]
 8003088:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 800308a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800308c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800308e:	4927      	ldr	r1, [pc, #156]	; (800312c <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003090:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	400a      	ands	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800309e:	69a0      	ldr	r0, [r4, #24]
 80030a0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80030a2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80030a4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	400a      	ands	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030b2:	6a20      	ldr	r0, [r4, #32]
 80030b4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80030b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030b8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	400a      	ands	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030c8:	4302      	orrs	r2, r0
 80030ca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	4011      	ands	r1, r2
 80030d0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80030d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030dc:	430a      	orrs	r2, r1
 80030de:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80030e2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80030ea:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030ee:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80030f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80030f6:	430a      	orrs	r2, r1
 80030f8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80030fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003100:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	f042 0204 	orr.w	r2, r2, #4
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	f042 0202 	orr.w	r2, r2, #2
 8003112:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800311c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800311e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003122:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003126:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003128:	2001      	movs	r0, #1
 800312a:	e7fc      	b.n	8003126 <HAL_LTDC_Init+0xd6>
 800312c:	f000f800 	.word	0xf000f800

08003130 <HAL_LTDC_ConfigLayer>:
{   
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8003132:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 8003136:	4606      	mov	r6, r0
 8003138:	468c      	mov	ip, r1
 800313a:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 800313c:	2b01      	cmp	r3, #1
 800313e:	f04f 0002 	mov.w	r0, #2
 8003142:	d01d      	beq.n	8003180 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003144:	2434      	movs	r4, #52	; 0x34
 8003146:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003148:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800314c:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800314e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8003152:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003156:	3438      	adds	r4, #56	; 0x38
 8003158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800315c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800315e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003164:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003166:	4630      	mov	r0, r6
 8003168:	4672      	mov	r2, lr
 800316a:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800316c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800316e:	f7ff fee8 	bl	8002f42 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003172:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003174:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003176:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003178:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800317c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003182 <HAL_LTDC_GetState>:
  return hltdc->State;
 8003182:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8003186:	4770      	bx	lr

08003188 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800318a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800318e:	4c19      	ldr	r4, [pc, #100]	; (80031f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a8:	f7ff f820 	bl	80021ec <HAL_GetTick>
 80031ac:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	03da      	lsls	r2, r3, #15
 80031b2:	d50c      	bpl.n	80031ce <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031bc:	f7ff f816 	bl	80021ec <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031c0:	4c0c      	ldr	r4, [pc, #48]	; (80031f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80031c2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	039b      	lsls	r3, r3, #14
 80031c8:	d50a      	bpl.n	80031e0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80031ca:	2000      	movs	r0, #0
 80031cc:	e006      	b.n	80031dc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031ce:	f7ff f80d 	bl	80021ec <HAL_GetTick>
 80031d2:	1b40      	subs	r0, r0, r5
 80031d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031d8:	d9e9      	bls.n	80031ae <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
}
 80031dc:	b003      	add	sp, #12
 80031de:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031e0:	f7ff f804 	bl	80021ec <HAL_GetTick>
 80031e4:	1b40      	subs	r0, r0, r5
 80031e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031ea:	d9eb      	bls.n	80031c4 <HAL_PWREx_EnableOverDrive+0x3c>
 80031ec:	e7f5      	b.n	80031da <HAL_PWREx_EnableOverDrive+0x52>
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000

080031f8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80031f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80031fc:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80031fe:	b136      	cbz	r6, 800320e <QSPI_Config+0x16>
 8003200:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8003204:	d003      	beq.n	800320e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 8003206:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003208:	6804      	ldr	r4, [r0, #0]
 800320a:	3b01      	subs	r3, #1
 800320c:	6123      	str	r3, [r4, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800320e:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8003212:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8003216:	f1ba 0f00 	cmp.w	sl, #0
 800321a:	d04e      	beq.n	80032ba <QSPI_Config+0xc2>
 800321c:	694b      	ldr	r3, [r1, #20]
 800321e:	ea46 0a0a 	orr.w	sl, r6, sl
 8003222:	6805      	ldr	r5, [r0, #0]
 8003224:	f8d1 8000 	ldr.w	r8, [r1]
 8003228:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 800322c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800322e:	ea4a 0a02 	orr.w	sl, sl, r2
 8003232:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003236:	f1bc 0f00 	cmp.w	ip, #0
 800323a:	d026      	beq.n	800328a <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800323c:	688b      	ldr	r3, [r1, #8]
 800323e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8003242:	690e      	ldr	r6, [r1, #16]
 8003244:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003246:	b1a7      	cbz	r7, 8003272 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003248:	ea48 0307 	orr.w	r3, r8, r7
 800324c:	4323      	orrs	r3, r4
 800324e:	ea43 0309 	orr.w	r3, r3, r9
 8003252:	4303      	orrs	r3, r0
 8003254:	68c8      	ldr	r0, [r1, #12]
 8003256:	4333      	orrs	r3, r6
 8003258:	4303      	orrs	r3, r0
 800325a:	ea43 030e 	orr.w	r3, r3, lr
 800325e:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateByteMode | 
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode | 
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003262:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003266:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003268:	d001      	beq.n	800326e <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800326a:	684b      	ldr	r3, [r1, #4]
 800326c:	61ab      	str	r3, [r5, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800326e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003272:	ea48 0304 	orr.w	r3, r8, r4
 8003276:	ea43 0309 	orr.w	r3, r3, r9
 800327a:	4303      	orrs	r3, r0
 800327c:	4333      	orrs	r3, r6
 800327e:	ea43 030e 	orr.w	r3, r3, lr
 8003282:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003286:	616b      	str	r3, [r5, #20]
 8003288:	e7f1      	b.n	800326e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800328a:	b167      	cbz	r7, 80032a6 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800328c:	ea48 0307 	orr.w	r3, r8, r7
 8003290:	4323      	orrs	r3, r4
 8003292:	ea43 0309 	orr.w	r3, r3, r9
 8003296:	4303      	orrs	r3, r0
 8003298:	68c8      	ldr	r0, [r1, #12]
 800329a:	4303      	orrs	r3, r0
 800329c:	ea43 030e 	orr.w	r3, r3, lr
 80032a0:	ea43 030a 	orr.w	r3, r3, sl
 80032a4:	e7dd      	b.n	8003262 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032a6:	ea48 0304 	orr.w	r3, r8, r4
 80032aa:	ea43 0309 	orr.w	r3, r3, r9
 80032ae:	4303      	orrs	r3, r0
 80032b0:	ea43 030e 	orr.w	r3, r3, lr
 80032b4:	ea43 030a 	orr.w	r3, r3, sl
 80032b8:	e7e5      	b.n	8003286 <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80032ba:	f1bc 0f00 	cmp.w	ip, #0
 80032be:	d02c      	beq.n	800331a <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80032c0:	6804      	ldr	r4, [r0, #0]
 80032c2:	688b      	ldr	r3, [r1, #8]
 80032c4:	6908      	ldr	r0, [r1, #16]
 80032c6:	61e3      	str	r3, [r4, #28]
 80032c8:	ea46 030c 	orr.w	r3, r6, ip
 80032cc:	694e      	ldr	r6, [r1, #20]
 80032ce:	ea43 0502 	orr.w	r5, r3, r2
 80032d2:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80032d6:	04b6      	lsls	r6, r6, #18
 80032d8:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80032dc:	b1a7      	cbz	r7, 8003308 <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032de:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80032e0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80032e4:	ea40 0008 	orr.w	r0, r0, r8
 80032e8:	ea43 0300 	orr.w	r3, r3, r0
 80032ec:	68c8      	ldr	r0, [r1, #12]
 80032ee:	ea43 030c 	orr.w	r3, r3, ip
 80032f2:	ea43 0300 	orr.w	r3, r3, r0
 80032f6:	ea43 0306 	orr.w	r3, r3, r6
 80032fa:	ea43 0305 	orr.w	r3, r3, r5
 80032fe:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003300:	d0b5      	beq.n	800326e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003302:	684b      	ldr	r3, [r1, #4]
 8003304:	61a3      	str	r3, [r4, #24]
 8003306:	e7b2      	b.n	800326e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003308:	ea40 0008 	orr.w	r0, r0, r8
 800330c:	4303      	orrs	r3, r0
 800330e:	ea43 030c 	orr.w	r3, r3, ip
 8003312:	4333      	orrs	r3, r6
 8003314:	432b      	orrs	r3, r5
 8003316:	6163      	str	r3, [r4, #20]
 8003318:	e7a9      	b.n	800326e <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800331a:	b1d7      	cbz	r7, 8003352 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800331c:	ea46 0307 	orr.w	r3, r6, r7
 8003320:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003322:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003324:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003328:	ea43 0302 	orr.w	r3, r3, r2
 800332c:	ea43 0304 	orr.w	r3, r3, r4
 8003330:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8003332:	ea43 0304 	orr.w	r3, r3, r4
 8003336:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8003338:	ea43 0304 	orr.w	r3, r3, r4
 800333c:	68cc      	ldr	r4, [r1, #12]
 800333e:	ea43 0304 	orr.w	r3, r3, r4
 8003342:	694c      	ldr	r4, [r1, #20]
 8003344:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8003348:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800334a:	d090      	beq.n	800326e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800334c:	684b      	ldr	r3, [r1, #4]
 800334e:	6183      	str	r3, [r0, #24]
 8003350:	e78d      	b.n	800326e <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003352:	2e00      	cmp	r6, #0
 8003354:	d08b      	beq.n	800326e <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003356:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003358:	6800      	ldr	r0, [r0, #0]
 800335a:	4333      	orrs	r3, r6
 800335c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800335e:	431a      	orrs	r2, r3
 8003360:	694b      	ldr	r3, [r1, #20]
 8003362:	4332      	orrs	r2, r6
 8003364:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8003366:	4332      	orrs	r2, r6
 8003368:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800336c:	6142      	str	r2, [r0, #20]
}
 800336e:	e77e      	b.n	800326e <QSPI_Config+0x76>

08003370 <QSPI_WaitFlagStateUntilTimeout>:
{
 8003370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003374:	9d06      	ldr	r5, [sp, #24]
 8003376:	4604      	mov	r4, r0
 8003378:	460f      	mov	r7, r1
 800337a:	4616      	mov	r6, r2
 800337c:	4698      	mov	r8, r3
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800337e:	6821      	ldr	r1, [r4, #0]
 8003380:	688a      	ldr	r2, [r1, #8]
 8003382:	423a      	tst	r2, r7
 8003384:	bf14      	ite	ne
 8003386:	2201      	movne	r2, #1
 8003388:	2200      	moveq	r2, #0
 800338a:	42b2      	cmp	r2, r6
 800338c:	d101      	bne.n	8003392 <QSPI_WaitFlagStateUntilTimeout+0x22>
  return HAL_OK;
 800338e:	2000      	movs	r0, #0
 8003390:	e00a      	b.n	80033a8 <QSPI_WaitFlagStateUntilTimeout+0x38>
    if (Timeout != HAL_MAX_DELAY)
 8003392:	1c6b      	adds	r3, r5, #1
 8003394:	d0f4      	beq.n	8003380 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003396:	b94d      	cbnz	r5, 80033ac <QSPI_WaitFlagStateUntilTimeout+0x3c>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003398:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800339a:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800339c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80033a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80033a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80033ac:	f7fe ff1e 	bl	80021ec <HAL_GetTick>
 80033b0:	eba0 0008 	sub.w	r0, r0, r8
 80033b4:	42a8      	cmp	r0, r5
 80033b6:	d9e2      	bls.n	800337e <QSPI_WaitFlagStateUntilTimeout+0xe>
 80033b8:	e7ee      	b.n	8003398 <QSPI_WaitFlagStateUntilTimeout+0x28>

080033ba <HAL_QSPI_MspInit>:
}
 80033ba:	4770      	bx	lr

080033bc <HAL_QSPI_Init>:
{
 80033bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7fe ff14 	bl	80021ec <HAL_GetTick>
 80033c4:	4605      	mov	r5, r0
  if(hqspi == NULL)
 80033c6:	2c00      	cmp	r4, #0
 80033c8:	d04d      	beq.n	8003466 <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 80033ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d04b      	beq.n	800346a <HAL_QSPI_Init+0xae>
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80033d8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80033dc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80033e0:	b93a      	cbnz	r2, 80033f2 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 80033e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff ffe7 	bl	80033ba <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80033ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80033f0:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	68a1      	ldr	r1, [r4, #8]
 80033f6:	6802      	ldr	r2, [r0, #0]
 80033f8:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80033fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80033fc:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003404:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003406:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003408:	2200      	movs	r2, #0
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4620      	mov	r0, r4
 800340e:	462b      	mov	r3, r5
 8003410:	f7ff ffae 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8003414:	bb10      	cbnz	r0, 800345c <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	69e5      	ldr	r5, [r4, #28]
 800341a:	68e3      	ldr	r3, [r4, #12]
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	432b      	orrs	r3, r5
 8003420:	6a25      	ldr	r5, [r4, #32]
 8003422:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003426:	432b      	orrs	r3, r5
 8003428:	6865      	ldr	r5, [r4, #4]
 800342a:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800342e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003432:	430b      	orrs	r3, r1
 8003434:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003436:	6855      	ldr	r5, [r2, #4]
 8003438:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800343c:	430b      	orrs	r3, r1
 800343e:	6921      	ldr	r1, [r4, #16]
 8003440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003444:	490a      	ldr	r1, [pc, #40]	; (8003470 <HAL_QSPI_Init+0xb4>)
 8003446:	4029      	ands	r1, r5
 8003448:	430b      	orrs	r3, r1
 800344a:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8003454:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003456:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8003458:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800345c:	2300      	movs	r3, #0
 800345e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003462:	b003      	add	sp, #12
 8003464:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
 8003468:	e7fb      	b.n	8003462 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 800346a:	2002      	movs	r0, #2
 800346c:	e7f9      	b.n	8003462 <HAL_QSPI_Init+0xa6>
 800346e:	bf00      	nop
 8003470:	ffe0f8fe 	.word	0xffe0f8fe

08003474 <HAL_QSPI_MspDeInit>:
 8003474:	4770      	bx	lr

08003476 <HAL_QSPI_DeInit>:
{
 8003476:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8003478:	4604      	mov	r4, r0
 800347a:	b1a0      	cbz	r0, 80034a6 <HAL_QSPI_DeInit+0x30>
  __HAL_LOCK(hqspi);
 800347c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003480:	2b01      	cmp	r3, #1
 8003482:	d012      	beq.n	80034aa <HAL_QSPI_DeInit+0x34>
  __HAL_QSPI_DISABLE(hqspi);
 8003484:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hqspi);
 8003486:	2301      	movs	r3, #1
 8003488:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_QSPI_DISABLE(hqspi);
 800348c:	6813      	ldr	r3, [r2, #0]
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8003494:	f7ff ffee 	bl	8003474 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003498:	2000      	movs	r0, #0
 800349a:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800349c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80034a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80034a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034a6:	2001      	movs	r0, #1
 80034a8:	e7fc      	b.n	80034a4 <HAL_QSPI_DeInit+0x2e>
  __HAL_LOCK(hqspi);
 80034aa:	2002      	movs	r0, #2
 80034ac:	e7fa      	b.n	80034a4 <HAL_QSPI_DeInit+0x2e>

080034ae <HAL_QSPI_Command>:
{
 80034ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	468a      	mov	sl, r1
 80034b6:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7fe fe98 	bl	80021ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80034bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80034c0:	4680      	mov	r8, r0
  __HAL_LOCK(hqspi);
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d034      	beq.n	8003530 <HAL_QSPI_Command+0x82>
 80034c6:	2301      	movs	r3, #1
 80034c8:	2702      	movs	r7, #2
 80034ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80034ce:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
 80034d2:	b2f6      	uxtb	r6, r6
 80034d4:	429e      	cmp	r6, r3
 80034d6:	d129      	bne.n	800352c <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034d8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80034da:	4603      	mov	r3, r0
 80034dc:	f8cd 9000 	str.w	r9, [sp]
 80034e0:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034e2:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80034e4:	4620      	mov	r0, r4
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 80034e6:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80034ea:	f7ff ff41 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80034ee:	4605      	mov	r5, r0
 80034f0:	b9a8      	cbnz	r0, 800351e <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80034f2:	4602      	mov	r2, r0
 80034f4:	4651      	mov	r1, sl
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff fe7e 	bl	80031f8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80034fc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003500:	b95b      	cbnz	r3, 800351a <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003502:	f8cd 9000 	str.w	r9, [sp]
 8003506:	4643      	mov	r3, r8
 8003508:	4632      	mov	r2, r6
 800350a:	4639      	mov	r1, r7
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ff2f 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003512:	4605      	mov	r5, r0
 8003514:	b918      	cbnz	r0, 800351e <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	60df      	str	r7, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;   
 800351a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800351e:	2300      	movs	r3, #0
 8003520:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003524:	4628      	mov	r0, r5
 8003526:	b002      	add	sp, #8
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;   
 800352c:	463d      	mov	r5, r7
 800352e:	e7f6      	b.n	800351e <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8003530:	2502      	movs	r5, #2
 8003532:	e7f7      	b.n	8003524 <HAL_QSPI_Command+0x76>

08003534 <HAL_QSPI_AutoPolling>:
{
 8003534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	4698      	mov	r8, r3
 800353c:	4689      	mov	r9, r1
 800353e:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7fe fe54 	bl	80021ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8003544:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003548:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800354a:	2b01      	cmp	r3, #1
 800354c:	d042      	beq.n	80035d4 <HAL_QSPI_AutoPolling+0xa0>
 800354e:	2301      	movs	r3, #1
 8003550:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003554:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8003558:	b2ed      	uxtb	r5, r5
 800355a:	429d      	cmp	r5, r3
 800355c:	d138      	bne.n	80035d0 <HAL_QSPI_AutoPolling+0x9c>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800355e:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003560:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003562:	f8cd 8000 	str.w	r8, [sp]
 8003566:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003568:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800356a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800356e:	4603      	mov	r3, r0
 8003570:	4620      	mov	r0, r4
 8003572:	f7ff fefd 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003576:	bb28      	cbnz	r0, 80035c4 <HAL_QSPI_AutoPolling+0x90>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003578:	6823      	ldr	r3, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800357a:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800357c:	6832      	ldr	r2, [r6, #0]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003580:	6872      	ldr	r2, [r6, #4]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003584:	68b2      	ldr	r2, [r6, #8]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8003588:	6932      	ldr	r2, [r6, #16]
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003590:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8003594:	430a      	orrs	r2, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003596:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8003598:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800359a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800359e:	68f3      	ldr	r3, [r6, #12]
 80035a0:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80035a4:	f7ff fe28 	bl	80031f8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80035a8:	f8cd 8000 	str.w	r8, [sp]
 80035ac:	463b      	mov	r3, r7
 80035ae:	462a      	mov	r2, r5
 80035b0:	2108      	movs	r1, #8
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7ff fedc 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80035b8:	b920      	cbnz	r0, 80035c4 <HAL_QSPI_AutoPolling+0x90>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80035c0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80035c4:	2300      	movs	r3, #0
 80035c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80035ca:	b003      	add	sp, #12
 80035cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;   
 80035d0:	2002      	movs	r0, #2
 80035d2:	e7f7      	b.n	80035c4 <HAL_QSPI_AutoPolling+0x90>
  __HAL_LOCK(hqspi);
 80035d4:	2002      	movs	r0, #2
 80035d6:	e7f8      	b.n	80035ca <HAL_QSPI_AutoPolling+0x96>

080035d8 <HAL_QSPI_MemoryMapped>:
{
 80035d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035da:	4604      	mov	r4, r0
 80035dc:	4617      	mov	r7, r2
 80035de:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7fe fe04 	bl	80021ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80035e4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80035e8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80035ea:	2a01      	cmp	r2, #1
 80035ec:	d033      	beq.n	8003656 <HAL_QSPI_MemoryMapped+0x7e>
 80035ee:	2201      	movs	r2, #1
 80035f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80035f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80035f8:	2a01      	cmp	r2, #1
 80035fa:	d12a      	bne.n	8003652 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80035fc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80035fe:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003600:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003602:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003604:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003608:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800360a:	9100      	str	r1, [sp, #0]
 800360c:	2120      	movs	r1, #32
 800360e:	f7ff feaf 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8003612:	4605      	mov	r5, r0
 8003614:	b9b8      	cbnz	r0, 8003646 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800361c:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	ea42 0201 	orr.w	r2, r2, r1
 8003626:	601a      	str	r2, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003628:	d107      	bne.n	800363a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800362e:	2210      	movs	r2, #16
 8003630:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003638:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800363a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800363e:	4631      	mov	r1, r6
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff fdd9 	bl	80031f8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8003646:	2300      	movs	r3, #0
 8003648:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800364c:	4628      	mov	r0, r5
 800364e:	b003      	add	sp, #12
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;   
 8003652:	2502      	movs	r5, #2
 8003654:	e7f7      	b.n	8003646 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8003656:	2502      	movs	r5, #2
 8003658:	e7f8      	b.n	800364c <HAL_QSPI_MemoryMapped+0x74>

0800365a <HAL_QSPI_Abort>:
{
 800365a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800365c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800365e:	f7fe fdc5 	bl	80021ec <HAL_GetTick>
 8003662:	4605      	mov	r5, r0
  if ((hqspi->State & 0x2) != 0)
 8003664:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8003668:	f010 0002 	ands.w	r0, r0, #2
 800366c:	d02f      	beq.n	80036ce <HAL_QSPI_Abort+0x74>
    __HAL_UNLOCK(hqspi);
 800366e:	2300      	movs	r3, #0
 8003670:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	0752      	lsls	r2, r2, #29
 800367a:	d50b      	bpl.n	8003694 <HAL_QSPI_Abort+0x3a>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800367c:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800367e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003680:	f022 0204 	bic.w	r2, r2, #4
 8003684:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8003686:	f7fe fed7 	bl	8002438 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800368a:	b118      	cbz	r0, 8003694 <HAL_QSPI_Abort+0x3a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800368c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6463      	str	r3, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8003694:	6822      	ldr	r2, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8003696:	2102      	movs	r1, #2
 8003698:	4620      	mov	r0, r4
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6013      	str	r3, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80036a2:	2201      	movs	r2, #1
 80036a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	462b      	mov	r3, r5
 80036aa:	f7ff fe61 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
    if(status == HAL_OK)
 80036ae:	b970      	cbnz	r0, 80036ce <HAL_QSPI_Abort+0x74>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	2202      	movs	r2, #2
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80036b4:	2120      	movs	r1, #32
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80036b6:	60da      	str	r2, [r3, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80036b8:	4602      	mov	r2, r0
 80036ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036bc:	4620      	mov	r0, r4
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	462b      	mov	r3, r5
 80036c2:	f7ff fe55 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80036c6:	b910      	cbnz	r0, 80036ce <HAL_QSPI_Abort+0x74>
      hqspi->State = HAL_QSPI_STATE_READY;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80036ce:	b003      	add	sp, #12
 80036d0:	bd30      	pop	{r4, r5, pc}

080036d2 <HAL_QSPI_Transmit>:
{
 80036d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	4688      	mov	r8, r1
 80036da:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7fe fd86 	bl	80021ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80036e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80036e4:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d04f      	beq.n	800378a <HAL_QSPI_Transmit+0xb8>
 80036ea:	2301      	movs	r3, #1
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80036ec:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80036ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80036f2:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80036f6:	b2c0      	uxtb	r0, r0
 80036f8:	4298      	cmp	r0, r3
 80036fa:	d144      	bne.n	8003786 <HAL_QSPI_Transmit+0xb4>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8003700:	f1b8 0f00 	cmp.w	r8, #0
 8003704:	d03a      	beq.n	800377c <HAL_QSPI_Transmit+0xaa>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003706:	2312      	movs	r3, #18
 8003708:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 800370c:	692b      	ldr	r3, [r5, #16]
 800370e:	3301      	adds	r3, #1
 8003710:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8003712:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8003714:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8003718:	3301      	adds	r3, #1
 800371a:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800371c:	696b      	ldr	r3, [r5, #20]
 800371e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003722:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0)
 8003724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003726:	b9b3      	cbnz	r3, 8003756 <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003728:	9700      	str	r7, [sp, #0]
 800372a:	4633      	mov	r3, r6
 800372c:	2201      	movs	r2, #1
 800372e:	2102      	movs	r1, #2
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff fe1d 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8003736:	b928      	cbnz	r0, 8003744 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800373c:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800373e:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8003740:	f7ff ff8b 	bl	800365a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;    
 8003744:	2301      	movs	r3, #1
 8003746:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800374a:	2300      	movs	r3, #0
 800374c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003750:	b002      	add	sp, #8
 8003752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003756:	9700      	str	r7, [sp, #0]
 8003758:	4633      	mov	r3, r6
 800375a:	2201      	movs	r2, #1
 800375c:	2104      	movs	r1, #4
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff fe06 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8003764:	2800      	cmp	r0, #0
 8003766:	d1ed      	bne.n	8003744 <HAL_QSPI_Transmit+0x72>
        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8003768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	6262      	str	r2, [r4, #36]	; 0x24
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->TxXferCount--;
 8003774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003776:	3b01      	subs	r3, #1
 8003778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800377a:	e7d3      	b.n	8003724 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800377c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	6463      	str	r3, [r4, #68]	; 0x44
 8003784:	e7e1      	b.n	800374a <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 8003786:	2002      	movs	r0, #2
 8003788:	e7df      	b.n	800374a <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 800378a:	2002      	movs	r0, #2
 800378c:	e7e0      	b.n	8003750 <HAL_QSPI_Transmit+0x7e>

0800378e <HAL_QSPI_Receive>:
{
 800378e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	4617      	mov	r7, r2
 8003796:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7fe fd28 	bl	80021ec <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800379c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800379e:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80037a0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 80037a2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d051      	beq.n	800384e <HAL_QSPI_Receive+0xc0>
 80037aa:	2301      	movs	r3, #1
 80037ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037b0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80037b4:	b2c0      	uxtb	r0, r0
 80037b6:	4298      	cmp	r0, r3
 80037b8:	d147      	bne.n	800384a <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 80037be:	f1b8 0f00 	cmp.w	r8, #0
 80037c2:	d03d      	beq.n	8003840 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80037c4:	2322      	movs	r3, #34	; 0x22
 80037c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80037ca:	692b      	ldr	r3, [r5, #16]
 80037cc:	3301      	adds	r3, #1
 80037ce:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 80037d0:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80037d2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 80037d6:	3301      	adds	r3, #1
 80037d8:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80037da:	696b      	ldr	r3, [r5, #20]
 80037dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80037e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e4:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80037e6:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0)
 80037e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ea:	b9b3      	cbnz	r3, 800381a <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80037ec:	9700      	str	r7, [sp, #0]
 80037ee:	4633      	mov	r3, r6
 80037f0:	2201      	movs	r2, #1
 80037f2:	2102      	movs	r1, #2
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff fdbb 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80037fa:	b928      	cbnz	r0, 8003808 <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	2202      	movs	r2, #2
         status = HAL_QSPI_Abort(hqspi);
 8003800:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003802:	60da      	str	r2, [r3, #12]
         status = HAL_QSPI_Abort(hqspi);
 8003804:	f7ff ff29 	bl	800365a <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;    
 8003808:	2301      	movs	r3, #1
 800380a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800380e:	2300      	movs	r3, #0
 8003810:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003814:	b002      	add	sp, #8
 8003816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800381a:	9700      	str	r7, [sp, #0]
 800381c:	4633      	mov	r3, r6
 800381e:	2201      	movs	r2, #1
 8003820:	2106      	movs	r1, #6
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff fda4 	bl	8003370 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8003828:	2800      	cmp	r0, #0
 800382a:	d1ed      	bne.n	8003808 <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 800382c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	6322      	str	r2, [r4, #48]	; 0x30
 8003832:	f895 2020 	ldrb.w	r2, [r5, #32]
 8003836:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8003838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800383a:	3b01      	subs	r3, #1
 800383c:	63a3      	str	r3, [r4, #56]	; 0x38
 800383e:	e7d3      	b.n	80037e8 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003840:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003842:	f043 0308 	orr.w	r3, r3, #8
 8003846:	6463      	str	r3, [r4, #68]	; 0x44
 8003848:	e7e1      	b.n	800380e <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 800384a:	2002      	movs	r0, #2
 800384c:	e7df      	b.n	800380e <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 800384e:	2002      	movs	r0, #2
 8003850:	e7e0      	b.n	8003814 <HAL_QSPI_Receive+0x86>
	...

08003854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003858:	4604      	mov	r4, r0
 800385a:	b918      	cbnz	r0, 8003864 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800385e:	b002      	add	sp, #8
 8003860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003864:	6803      	ldr	r3, [r0, #0]
 8003866:	07d8      	lsls	r0, r3, #31
 8003868:	d410      	bmi.n	800388c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	0799      	lsls	r1, r3, #30
 800386e:	d45e      	bmi.n	800392e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	0719      	lsls	r1, r3, #28
 8003874:	f100 80a3 	bmi.w	80039be <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	075a      	lsls	r2, r3, #29
 800387c:	f100 80c4 	bmi.w	8003a08 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	69a2      	ldr	r2, [r4, #24]
 8003882:	2a00      	cmp	r2, #0
 8003884:	f040 812e 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8003888:	2000      	movs	r0, #0
 800388a:	e7e8      	b.n	800385e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800388c:	4b93      	ldr	r3, [pc, #588]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	f002 020c 	and.w	r2, r2, #12
 8003894:	2a04      	cmp	r2, #4
 8003896:	d007      	beq.n	80038a8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	f002 020c 	and.w	r2, r2, #12
 800389e:	2a08      	cmp	r2, #8
 80038a0:	d10a      	bne.n	80038b8 <HAL_RCC_OscConfig+0x64>
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	025a      	lsls	r2, r3, #9
 80038a6:	d507      	bpl.n	80038b8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	039b      	lsls	r3, r3, #14
 80038ae:	d5dc      	bpl.n	800386a <HAL_RCC_OscConfig+0x16>
 80038b0:	6863      	ldr	r3, [r4, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1d9      	bne.n	800386a <HAL_RCC_OscConfig+0x16>
 80038b6:	e7d1      	b.n	800385c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b8:	6863      	ldr	r3, [r4, #4]
 80038ba:	4d88      	ldr	r5, [pc, #544]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d111      	bne.n	80038e6 <HAL_RCC_OscConfig+0x92>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038ca:	f7fe fc8f 	bl	80021ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4d83      	ldr	r5, [pc, #524]	; (8003adc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80038d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	039f      	lsls	r7, r3, #14
 80038d6:	d4c8      	bmi.n	800386a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fc88 	bl	80021ec <HAL_GetTick>
 80038dc:	1b80      	subs	r0, r0, r6
 80038de:	2864      	cmp	r0, #100	; 0x64
 80038e0:	d9f7      	bls.n	80038d2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80038e2:	2003      	movs	r0, #3
 80038e4:	e7bb      	b.n	800385e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e6:	b99b      	cbnz	r3, 8003910 <HAL_RCC_OscConfig+0xbc>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038f8:	f7fe fc78 	bl	80021ec <HAL_GetTick>
 80038fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	0398      	lsls	r0, r3, #14
 8003902:	d5b2      	bpl.n	800386a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fc72 	bl	80021ec <HAL_GetTick>
 8003908:	1b80      	subs	r0, r0, r6
 800390a:	2864      	cmp	r0, #100	; 0x64
 800390c:	d9f7      	bls.n	80038fe <HAL_RCC_OscConfig+0xaa>
 800390e:	e7e8      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	d103      	bne.n	8003920 <HAL_RCC_OscConfig+0xcc>
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	602b      	str	r3, [r5, #0]
 800391e:	e7d0      	b.n	80038c2 <HAL_RCC_OscConfig+0x6e>
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392c:	e7cc      	b.n	80038c8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800392e:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	f012 0f0c 	tst.w	r2, #12
 8003936:	d007      	beq.n	8003948 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	f002 020c 	and.w	r2, r2, #12
 800393e:	2a08      	cmp	r2, #8
 8003940:	d111      	bne.n	8003966 <HAL_RCC_OscConfig+0x112>
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0259      	lsls	r1, r3, #9
 8003946:	d40e      	bmi.n	8003966 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	0792      	lsls	r2, r2, #30
 800394e:	d502      	bpl.n	8003956 <HAL_RCC_OscConfig+0x102>
 8003950:	68e2      	ldr	r2, [r4, #12]
 8003952:	2a01      	cmp	r2, #1
 8003954:	d182      	bne.n	800385c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	6921      	ldr	r1, [r4, #16]
 800395a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800395e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003962:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003964:	e784      	b.n	8003870 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	4d5c      	ldr	r5, [pc, #368]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 800396a:	b1bb      	cbz	r3, 800399c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003974:	f7fe fc3a 	bl	80021ec <HAL_GetTick>
 8003978:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	682b      	ldr	r3, [r5, #0]
 800397c:	079f      	lsls	r7, r3, #30
 800397e:	d507      	bpl.n	8003990 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	6922      	ldr	r2, [r4, #16]
 8003984:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003988:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	e76f      	b.n	8003870 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe fc2c 	bl	80021ec <HAL_GetTick>
 8003994:	1b80      	subs	r0, r0, r6
 8003996:	2802      	cmp	r0, #2
 8003998:	d9ef      	bls.n	800397a <HAL_RCC_OscConfig+0x126>
 800399a:	e7a2      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039a4:	f7fe fc22 	bl	80021ec <HAL_GetTick>
 80039a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	0798      	lsls	r0, r3, #30
 80039ae:	f57f af5f 	bpl.w	8003870 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe fc1b 	bl	80021ec <HAL_GetTick>
 80039b6:	1b80      	subs	r0, r0, r6
 80039b8:	2802      	cmp	r0, #2
 80039ba:	d9f6      	bls.n	80039aa <HAL_RCC_OscConfig+0x156>
 80039bc:	e791      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039be:	6963      	ldr	r3, [r4, #20]
 80039c0:	4d46      	ldr	r5, [pc, #280]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 80039c2:	b183      	cbz	r3, 80039e6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80039c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80039cc:	f7fe fc0e 	bl	80021ec <HAL_GetTick>
 80039d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039d4:	079b      	lsls	r3, r3, #30
 80039d6:	f53f af4f 	bmi.w	8003878 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fe fc07 	bl	80021ec <HAL_GetTick>
 80039de:	1b80      	subs	r0, r0, r6
 80039e0:	2802      	cmp	r0, #2
 80039e2:	d9f6      	bls.n	80039d2 <HAL_RCC_OscConfig+0x17e>
 80039e4:	e77d      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80039e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80039ee:	f7fe fbfd 	bl	80021ec <HAL_GetTick>
 80039f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039f6:	079f      	lsls	r7, r3, #30
 80039f8:	f57f af3e 	bpl.w	8003878 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe fbf6 	bl	80021ec <HAL_GetTick>
 8003a00:	1b80      	subs	r0, r0, r6
 8003a02:	2802      	cmp	r0, #2
 8003a04:	d9f6      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1a0>
 8003a06:	e76c      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 8003a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0c:	00d0      	lsls	r0, r2, #3
 8003a0e:	d427      	bmi.n	8003a60 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003a12:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a24:	4d2e      	ldr	r5, [pc, #184]	; (8003ae0 <HAL_RCC_OscConfig+0x28c>)
 8003a26:	682b      	ldr	r3, [r5, #0]
 8003a28:	05d9      	lsls	r1, r3, #23
 8003a2a:	d51b      	bpl.n	8003a64 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	68a3      	ldr	r3, [r4, #8]
 8003a2e:	4d2b      	ldr	r5, [pc, #172]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d127      	bne.n	8003a84 <HAL_RCC_OscConfig+0x230>
 8003a34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a40:	f7fe fbd4 	bl	80021ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	4f25      	ldr	r7, [pc, #148]	; (8003adc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003a46:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4a:	079b      	lsls	r3, r3, #30
 8003a4c:	d53f      	bpl.n	8003ace <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	f43f af16 	beq.w	8003880 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_RCC_OscConfig+0x288>)
 8003a56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	e70f      	b.n	8003880 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8003a60:	2600      	movs	r6, #0
 8003a62:	e7df      	b.n	8003a24 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fbbe 	bl	80021ec <HAL_GetTick>
 8003a70:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	682b      	ldr	r3, [r5, #0]
 8003a74:	05da      	lsls	r2, r3, #23
 8003a76:	d4d9      	bmi.n	8003a2c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fe fbb8 	bl	80021ec <HAL_GetTick>
 8003a7c:	1bc0      	subs	r0, r0, r7
 8003a7e:	2864      	cmp	r0, #100	; 0x64
 8003a80:	d9f7      	bls.n	8003a72 <HAL_RCC_OscConfig+0x21e>
 8003a82:	e72e      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a84:	b9ab      	cbnz	r3, 8003ab2 <HAL_RCC_OscConfig+0x25e>
 8003a86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	672b      	str	r3, [r5, #112]	; 0x70
 8003a92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fba7 	bl	80021ec <HAL_GetTick>
 8003a9e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003aa2:	0798      	lsls	r0, r3, #30
 8003aa4:	d5d3      	bpl.n	8003a4e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fba1 	bl	80021ec <HAL_GetTick>
 8003aaa:	1bc0      	subs	r0, r0, r7
 8003aac:	4540      	cmp	r0, r8
 8003aae:	d9f7      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x24c>
 8003ab0:	e717      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ab6:	d103      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x26c>
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	672b      	str	r3, [r5, #112]	; 0x70
 8003abe:	e7b9      	b.n	8003a34 <HAL_RCC_OscConfig+0x1e0>
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	672b      	str	r3, [r5, #112]	; 0x70
 8003ac6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	e7b5      	b.n	8003a3a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fb8d 	bl	80021ec <HAL_GetTick>
 8003ad2:	eba0 0008 	sub.w	r0, r0, r8
 8003ad6:	42a8      	cmp	r0, r5
 8003ad8:	d9b6      	bls.n	8003a48 <HAL_RCC_OscConfig+0x1f4>
 8003ada:	e702      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae4:	4d24      	ldr	r5, [pc, #144]	; (8003b78 <HAL_RCC_OscConfig+0x324>)
 8003ae6:	68ab      	ldr	r3, [r5, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	f43f aeb5 	beq.w	800385c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003af2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afc:	d12e      	bne.n	8003b5c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8003afe:	f7fe fb75 	bl	80021ec <HAL_GetTick>
 8003b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	0199      	lsls	r1, r3, #6
 8003b08:	d422      	bmi.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4c15      	ldr	r4, [pc, #84]	; (8003b78 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b24:	0852      	lsrs	r2, r2, #1
 8003b26:	3a01      	subs	r2, #1
 8003b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b2c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b36:	f7fe fb59 	bl	80021ec <HAL_GetTick>
 8003b3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	f53f aea2 	bmi.w	8003888 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe fb52 	bl	80021ec <HAL_GetTick>
 8003b48:	1b40      	subs	r0, r0, r5
 8003b4a:	2802      	cmp	r0, #2
 8003b4c:	d9f6      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2e8>
 8003b4e:	e6c8      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fb4c 	bl	80021ec <HAL_GetTick>
 8003b54:	1b80      	subs	r0, r0, r6
 8003b56:	2802      	cmp	r0, #2
 8003b58:	d9d4      	bls.n	8003b04 <HAL_RCC_OscConfig+0x2b0>
 8003b5a:	e6c2      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fb46 	bl	80021ec <HAL_GetTick>
 8003b60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	f57f ae8f 	bpl.w	8003888 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fb3f 	bl	80021ec <HAL_GetTick>
 8003b6e:	1b00      	subs	r0, r0, r4
 8003b70:	2802      	cmp	r0, #2
 8003b72:	d9f6      	bls.n	8003b62 <HAL_RCC_OscConfig+0x30e>
 8003b74:	e6b5      	b.n	80038e2 <HAL_RCC_OscConfig+0x8e>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b7c:	4913      	ldr	r1, [pc, #76]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b80:	688b      	ldr	r3, [r1, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x16>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8e:	4810      	ldr	r0, [pc, #64]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8003b92:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8003b94:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b96:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b98:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ba0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003ba8:	bf1a      	itte	ne
 8003baa:	480a      	ldrne	r0, [pc, #40]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x58>)
 8003bac:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4808      	ldreq	r0, [pc, #32]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x54>)
 8003bb0:	fba1 0100 	umull	r0, r1, r1, r0
 8003bb4:	f7fc fb94 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x50>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bc8:	e7e4      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x18>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	017d7840 	.word	0x017d7840

08003bd8 <HAL_RCC_ClockConfig>:
{
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003bde:	4604      	mov	r4, r0
 8003be0:	b910      	cbnz	r0, 8003be8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_RCC_ClockConfig+0x128>)
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d327      	bcc.n	8003c44 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	078f      	lsls	r7, r1, #30
 8003bf8:	d42f      	bmi.n	8003c5a <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	07c8      	lsls	r0, r1, #31
 8003bfc:	d442      	bmi.n	8003c84 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfe:	4a40      	ldr	r2, [pc, #256]	; (8003d00 <HAL_RCC_ClockConfig+0x128>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	d865      	bhi.n	8003cd6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	0751      	lsls	r1, r2, #29
 8003c0e:	d46e      	bmi.n	8003cee <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	0713      	lsls	r3, r2, #28
 8003c12:	d507      	bpl.n	8003c24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	6893      	ldr	r3, [r2, #8]
 8003c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c24:	f7ff ffaa 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
 8003c2a:	4a37      	ldr	r2, [pc, #220]	; (8003d08 <HAL_RCC_ClockConfig+0x130>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c32:	5cd3      	ldrb	r3, [r2, r3]
 8003c34:	40d8      	lsrs	r0, r3
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_RCC_ClockConfig+0x134>)
 8003c38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c3a:	200f      	movs	r0, #15
 8003c3c:	f001 f89c 	bl	8004d78 <HAL_InitTick>
  return HAL_OK;
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7cf      	b.n	8003be4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	f023 030f 	bic.w	r3, r3, #15
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d1c4      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xa>
 8003c58:	e7cc      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5a:	f011 0f04 	tst.w	r1, #4
 8003c5e:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c68:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	070e      	lsls	r6, r1, #28
 8003c6c:	d503      	bpl.n	8003c76 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68a0      	ldr	r0, [r4, #8]
 8003c7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c7e:	4302      	orrs	r2, r0
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e7ba      	b.n	8003bfa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c84:	6861      	ldr	r1, [r4, #4]
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
 8003c88:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	d0a6      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c94:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c96:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4e1a      	ldr	r6, [pc, #104]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9c:	f022 0203 	bic.w	r2, r2, #3
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003ca4:	f7fe faa2 	bl	80021ec <HAL_GetTick>
 8003ca8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	68b3      	ldr	r3, [r6, #8]
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cb6:	d0a2      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fe fa98 	bl	80021ec <HAL_GetTick>
 8003cbc:	1bc0      	subs	r0, r0, r7
 8003cbe:	4540      	cmp	r0, r8
 8003cc0:	d9f3      	bls.n	8003caa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	e78e      	b.n	8003be4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc6:	2902      	cmp	r1, #2
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cce:	e7e0      	b.n	8003c92 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	f012 0f02 	tst.w	r2, #2
 8003cd4:	e7dd      	b.n	8003c92 <HAL_RCC_ClockConfig+0xba>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	f023 030f 	bic.w	r3, r3, #15
 8003cdc:	432b      	orrs	r3, r5
 8003cde:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	42ab      	cmp	r3, r5
 8003ce8:	f47f af7b 	bne.w	8003be2 <HAL_RCC_ClockConfig+0xa>
 8003cec:	e78d      	b.n	8003c0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cee:	4905      	ldr	r1, [pc, #20]	; (8003d04 <HAL_RCC_ClockConfig+0x12c>)
 8003cf0:	68e0      	ldr	r0, [r4, #12]
 8003cf2:	688b      	ldr	r3, [r1, #8]
 8003cf4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003cf8:	4303      	orrs	r3, r0
 8003cfa:	608b      	str	r3, [r1, #8]
 8003cfc:	e788      	b.n	8003c10 <HAL_RCC_ClockConfig+0x38>
 8003cfe:	bf00      	nop
 8003d00:	40023c00 	.word	0x40023c00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	0801f389 	.word	0x0801f389
 8003d0c:	20000058 	.word	0x20000058

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d1e:	6810      	ldr	r0, [r2, #0]
}
 8003d20:	40d8      	lsrs	r0, r3
 8003d22:	4770      	bx	lr
 8003d24:	40023800 	.word	0x40023800
 8003d28:	0801f399 	.word	0x0801f399
 8003d2c:	20000058 	.word	0x20000058

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d32:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d3a:	5cd3      	ldrb	r3, [r2, r3]
 8003d3c:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d3e:	6810      	ldr	r0, [r2, #0]
}
 8003d40:	40d8      	lsrs	r0, r3
 8003d42:	4770      	bx	lr
 8003d44:	40023800 	.word	0x40023800
 8003d48:	0801f399 	.word	0x0801f399
 8003d4c:	20000058 	.word	0x20000058

08003d50 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d50:	230f      	movs	r3, #15
 8003d52:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetClockConfig+0x34>)
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	f002 0203 	and.w	r2, r2, #3
 8003d5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003d64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003d6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003d76:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_GetClockConfig+0x38>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	600b      	str	r3, [r1, #0]
}
 8003d82:	4770      	bx	lr
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40023c00 	.word	0x40023c00

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d90:	6802      	ldr	r2, [r0, #0]
{
 8003d92:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d94:	f012 0601 	ands.w	r6, r2, #1
 8003d98:	d00b      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d9a:	4bb8      	ldr	r3, [pc, #736]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003da2:	6099      	str	r1, [r3, #8]
 8003da4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003daa:	fab6 f686 	clz	r6, r6
 8003dae:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003db2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8003db6:	d012      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db8:	49b0      	ldr	r1, [pc, #704]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dba:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003dbc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8003dc8:	bf08      	it	eq
 8003dca:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dcc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dd0:	bf16      	itet	ne
 8003dd2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003dd6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dd8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dde:	02d1      	lsls	r1, r2, #11
 8003de0:	d510      	bpl.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de2:	48a6      	ldr	r0, [pc, #664]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003de6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dea:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003df2:	ea43 0301 	orr.w	r3, r3, r1
 8003df6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dfa:	f000 8185 	beq.w	8004108 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	bf08      	it	eq
 8003e02:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8003e04:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8003e08:	bf18      	it	ne
 8003e0a:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d531      	bpl.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e10:	4b9a      	ldr	r3, [pc, #616]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e12:	4f9b      	ldr	r7, [pc, #620]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fe f9dd 	bl	80021ec <HAL_GetTick>
 8003e32:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	05db      	lsls	r3, r3, #23
 8003e38:	f140 8168 	bpl.w	800410c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e3c:	4f8f      	ldr	r7, [pc, #572]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e40:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003e44:	f040 816d 	bne.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e4a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003e4e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e54:	f040 818b 	bne.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003e58:	6891      	ldr	r1, [r2, #8]
 8003e5a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003e5e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003e62:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003e66:	4301      	orrs	r1, r0
 8003e68:	6091      	str	r1, [r2, #8]
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	06da      	lsls	r2, r3, #27
 8003e78:	d50c      	bpl.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e7a:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e7c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e80:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003e84:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003e88:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e8e:	4301      	orrs	r1, r0
 8003e90:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e94:	045f      	lsls	r7, r3, #17
 8003e96:	d508      	bpl.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e98:	4978      	ldr	r1, [pc, #480]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e9a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ea0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003ea4:	4302      	orrs	r2, r0
 8003ea6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eaa:	0418      	lsls	r0, r3, #16
 8003eac:	d508      	bpl.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eae:	4973      	ldr	r1, [pc, #460]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eb0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003eb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eb6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003eba:	4302      	orrs	r2, r0
 8003ebc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec0:	03d9      	lsls	r1, r3, #15
 8003ec2:	d508      	bpl.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec4:	496d      	ldr	r1, [pc, #436]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ec6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003ec8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ecc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003ed0:	4302      	orrs	r2, r0
 8003ed2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ed6:	039a      	lsls	r2, r3, #14
 8003ed8:	d508      	bpl.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eda:	4968      	ldr	r1, [pc, #416]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003edc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003ede:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ee2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003ee6:	4302      	orrs	r2, r0
 8003ee8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eec:	065f      	lsls	r7, r3, #25
 8003eee:	d508      	bpl.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef0:	4962      	ldr	r1, [pc, #392]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ef2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003ef4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ef8:	f022 0203 	bic.w	r2, r2, #3
 8003efc:	4302      	orrs	r2, r0
 8003efe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f02:	0618      	lsls	r0, r3, #24
 8003f04:	d508      	bpl.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f06:	495d      	ldr	r1, [pc, #372]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f08:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003f0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f0e:	f022 020c 	bic.w	r2, r2, #12
 8003f12:	4302      	orrs	r2, r0
 8003f14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f18:	05d9      	lsls	r1, r3, #23
 8003f1a:	d508      	bpl.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1c:	4957      	ldr	r1, [pc, #348]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f1e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003f20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f24:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003f28:	4302      	orrs	r2, r0
 8003f2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2e:	059a      	lsls	r2, r3, #22
 8003f30:	d508      	bpl.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f32:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f34:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003f36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f3e:	4302      	orrs	r2, r0
 8003f40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f44:	055f      	lsls	r7, r3, #21
 8003f46:	d508      	bpl.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f48:	494c      	ldr	r1, [pc, #304]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f54:	4302      	orrs	r2, r0
 8003f56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f5a:	0518      	lsls	r0, r3, #20
 8003f5c:	d508      	bpl.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f5e:	4947      	ldr	r1, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f6a:	4302      	orrs	r2, r0
 8003f6c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f70:	04d9      	lsls	r1, r3, #19
 8003f72:	d508      	bpl.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f74:	4941      	ldr	r1, [pc, #260]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f76:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003f78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f80:	4302      	orrs	r2, r0
 8003f82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f86:	049a      	lsls	r2, r3, #18
 8003f88:	d508      	bpl.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f8a:	493c      	ldr	r1, [pc, #240]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003f8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f96:	4302      	orrs	r2, r0
 8003f98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f9c:	025f      	lsls	r7, r3, #9
 8003f9e:	d508      	bpl.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fa0:	4936      	ldr	r1, [pc, #216]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fa2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003fa4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fa8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003fac:	4302      	orrs	r2, r0
 8003fae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fb2:	0298      	lsls	r0, r3, #10
 8003fb4:	d50c      	bpl.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fb6:	4831      	ldr	r0, [pc, #196]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003fba:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8003fbe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fc2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8003fc6:	bf08      	it	eq
 8003fc8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8003fd0:	f013 0f08 	tst.w	r3, #8
 8003fd4:	bf18      	it	ne
 8003fd6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fd8:	0359      	lsls	r1, r3, #13
 8003fda:	d508      	bpl.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fdc:	4927      	ldr	r1, [pc, #156]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fde:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003fe0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fe4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fe8:	4302      	orrs	r2, r0
 8003fea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fee:	021a      	lsls	r2, r3, #8
 8003ff0:	d509      	bpl.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ff2:	4922      	ldr	r1, [pc, #136]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ff4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003ff8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ffc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004000:	4302      	orrs	r2, r0
 8004002:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004006:	2e01      	cmp	r6, #1
 8004008:	f000 80b5 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800400c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004010:	f000 80b1 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004014:	2d01      	cmp	r5, #1
 8004016:	d175      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004018:	4d18      	ldr	r5, [pc, #96]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fe f8e3 	bl	80021ec <HAL_GetTick>
 8004026:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	009f      	lsls	r7, r3, #2
 800402c:	f100 8127 	bmi.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	030e      	lsls	r6, r1, #12
 8004034:	d501      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004038:	b11b      	cbz	r3, 8004042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800403a:	02cd      	lsls	r5, r1, #11
 800403c:	d522      	bpl.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800403e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004040:	bb03      	cbnz	r3, 8004084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004044:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004048:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800404c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004050:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004054:	4303      	orrs	r3, r0
 8004056:	6960      	ldr	r0, [r4, #20]
 8004058:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800405c:	69a0      	ldr	r0, [r4, #24]
 800405e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004062:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004066:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800406a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800406c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004070:	3801      	subs	r0, #1
 8004072:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004076:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004084:	0288      	lsls	r0, r1, #10
 8004086:	d515      	bpl.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004088:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408e:	d111      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004090:	4a82      	ldr	r2, [pc, #520]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004092:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004096:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800409a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800409e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80040a2:	4303      	orrs	r3, r0
 80040a4:	6960      	ldr	r0, [r4, #20]
 80040a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80040aa:	6a20      	ldr	r0, [r4, #32]
 80040ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040b4:	070a      	lsls	r2, r1, #28
 80040b6:	d519      	bpl.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b8:	4978      	ldr	r1, [pc, #480]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80040ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040c2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80040c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ca:	4313      	orrs	r3, r2
 80040cc:	6962      	ldr	r2, [r4, #20]
 80040ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80040d2:	69e2      	ldr	r2, [r4, #28]
 80040d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040dc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80040e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040ec:	4c6b      	ldr	r4, [pc, #428]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fe f879 	bl	80021ec <HAL_GetTick>
 80040fa:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f140 80c4 	bpl.w	800428c <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004104:	2000      	movs	r0, #0
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1; 
 8004108:	2601      	movs	r6, #1
 800410a:	e67b      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fe f86e 	bl	80021ec <HAL_GetTick>
 8004110:	eba0 0008 	sub.w	r0, r0, r8
 8004114:	2864      	cmp	r0, #100	; 0x64
 8004116:	f67f ae8d 	bls.w	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800411a:	2003      	movs	r0, #3
}
 800411c:	b003      	add	sp, #12
 800411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004122:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004124:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004128:	429a      	cmp	r2, r3
 800412a:	f43f ae8d 	beq.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004130:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004136:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800413a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800413e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004142:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004144:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004148:	07d8      	lsls	r0, r3, #31
 800414a:	f57f ae7d 	bpl.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800414e:	f7fe f84d 	bl	80021ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004156:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415a:	0799      	lsls	r1, r3, #30
 800415c:	f53f ae74 	bmi.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fe f844 	bl	80021ec <HAL_GetTick>
 8004164:	eba0 0008 	sub.w	r0, r0, r8
 8004168:	4548      	cmp	r0, r9
 800416a:	d9f5      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800416c:	e7d5      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416e:	6891      	ldr	r1, [r2, #8]
 8004170:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004174:	e678      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 8004176:	4e49      	ldr	r6, [pc, #292]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800417e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004180:	f7fe f834 	bl	80021ec <HAL_GetTick>
 8004184:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004186:	6833      	ldr	r3, [r6, #0]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	d472      	bmi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	07d7      	lsls	r7, r2, #31
 8004190:	d512      	bpl.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004194:	b983      	cbnz	r3, 80041b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004196:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800419a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800419e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6861      	ldr	r1, [r4, #4]
 80041aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80041ae:	68a1      	ldr	r1, [r4, #8]
 80041b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80041b4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041b8:	0316      	lsls	r6, r2, #12
 80041ba:	d503      	bpl.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80041bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c2:	d005      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80041c4:	02d0      	lsls	r0, r2, #11
 80041c6:	d51e      	bpl.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80041c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ce:	d11a      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041d0:	4932      	ldr	r1, [pc, #200]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80041d2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041d6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041de:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80041e2:	4303      	orrs	r3, r0
 80041e4:	6860      	ldr	r0, [r4, #4]
 80041e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80041ea:	68e0      	ldr	r0, [r4, #12]
 80041ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80041f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80041f4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80041f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041fa:	f020 001f 	bic.w	r0, r0, #31
 80041fe:	3b01      	subs	r3, #1
 8004200:	4303      	orrs	r3, r0
 8004202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	01d1      	lsls	r1, r2, #7
 8004208:	d511      	bpl.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800420a:	4924      	ldr	r1, [pc, #144]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800420c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004210:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004214:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004218:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800421c:	4303      	orrs	r3, r0
 800421e:	6860      	ldr	r0, [r4, #4]
 8004220:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004224:	6920      	ldr	r0, [r4, #16]
 8004226:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800422a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800422e:	0192      	lsls	r2, r2, #6
 8004230:	d50d      	bpl.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800423c:	68e2      	ldr	r2, [r4, #12]
 800423e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004242:	68a2      	ldr	r2, [r4, #8]
 8004244:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800424a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800424e:	4e13      	ldr	r6, [pc, #76]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004256:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004258:	f7fd ffc8 	bl	80021ec <HAL_GetTick>
 800425c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800425e:	6833      	ldr	r3, [r6, #0]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	f53f aed7 	bmi.w	8004014 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004266:	f7fd ffc1 	bl	80021ec <HAL_GetTick>
 800426a:	1bc0      	subs	r0, r0, r7
 800426c:	2864      	cmp	r0, #100	; 0x64
 800426e:	d9f6      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004270:	e753      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004272:	f7fd ffbb 	bl	80021ec <HAL_GetTick>
 8004276:	1bc0      	subs	r0, r0, r7
 8004278:	2864      	cmp	r0, #100	; 0x64
 800427a:	d984      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800427c:	e74d      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800427e:	f7fd ffb5 	bl	80021ec <HAL_GetTick>
 8004282:	1b80      	subs	r0, r0, r6
 8004284:	2864      	cmp	r0, #100	; 0x64
 8004286:	f67f aecf 	bls.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800428a:	e746      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800428c:	f7fd ffae 	bl	80021ec <HAL_GetTick>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	2864      	cmp	r0, #100	; 0x64
 8004294:	f67f af32 	bls.w	80040fc <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004298:	e73f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 80042a0:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 80042a2:	4604      	mov	r4, r0
 80042a4:	b188      	cbz	r0, 80042ca <HAL_RNG_Init+0x2a>
  {
    return HAL_ERROR;
  }

  if(hrng->State == HAL_RNG_STATE_RESET)
 80042a6:	7a43      	ldrb	r3, [r0, #9]
 80042a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042ac:	b913      	cbnz	r3, 80042b4 <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80042ae:	7202      	strb	r2, [r0, #8]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80042b0:	f7fd fcac 	bl	8001c0c <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80042b4:	2302      	movs	r3, #2

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80042b6:	6822      	ldr	r2, [r4, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Return function status */
  return HAL_OK;
 80042b8:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_BUSY;
 80042ba:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_ENABLE(hrng);
 80042bc:	6813      	ldr	r3, [r2, #0]
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 80042c4:	2301      	movs	r3, #1
 80042c6:	7263      	strb	r3, [r4, #9]
}
 80042c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042ca:	2001      	movs	r0, #1
 80042cc:	e7fc      	b.n	80042c8 <HAL_RNG_Init+0x28>

080042ce <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80042ce:	4770      	bx	lr

080042d0 <HAL_SDRAM_Init>:
{   
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	460d      	mov	r5, r1
  if(hsdram == NULL)
 80042d4:	4604      	mov	r4, r0
 80042d6:	b1c8      	cbz	r0, 800430c <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80042d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80042dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042e0:	b91b      	cbnz	r3, 80042ea <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80042e2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80042e6:	f7ff fff2 	bl	80042ce <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80042ea:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80042ec:	1d21      	adds	r1, r4, #4
 80042ee:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80042f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80042f4:	f001 f932 	bl	800555c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80042f8:	6862      	ldr	r2, [r4, #4]
 80042fa:	4629      	mov	r1, r5
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	f001 f963 	bl	80055c8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004302:	2301      	movs	r3, #1
  return HAL_OK;
 8004304:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004306:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800430a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800430c:	2001      	movs	r0, #1
 800430e:	e7fc      	b.n	800430a <HAL_SDRAM_Init+0x3a>

08004310 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004314:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8004318:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800431a:	b2c0      	uxtb	r0, r0
 800431c:	2802      	cmp	r0, #2
 800431e:	d00d      	beq.n	800433c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004320:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004322:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004324:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004328:	f001 f992 	bl	8005650 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800432c:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800432e:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004330:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004332:	bf0c      	ite	eq
 8004334:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004336:	2301      	movne	r3, #1
 8004338:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800433c:	bd38      	pop	{r3, r4, r5, pc}

0800433e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004342:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004346:	b2c0      	uxtb	r0, r0
 8004348:	2802      	cmp	r0, #2
 800434a:	d009      	beq.n	8004360 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800434c:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800434e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004350:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004354:	f001 f98f 	bl	8005676 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004358:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800435a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800435c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004360:	bd10      	pop	{r4, pc}

08004362 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004362:	6803      	ldr	r3, [r0, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800436a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	6842      	ldr	r2, [r0, #4]
 800436e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004372:	d10a      	bne.n	800438a <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8004374:	6882      	ldr	r2, [r0, #8]
 8004376:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800437a:	d002      	beq.n	8004382 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004380:	d103      	bne.n	800438a <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004388:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800438a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800438c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004390:	d109      	bne.n	80043a6 <SPI_WaitFifoStateUntilTimeout.part.1+0x44>
        {
          SPI_RESET_CRC(hspi);
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004398:	0412      	lsls	r2, r2, #16
 800439a:	0c12      	lsrs	r2, r2, #16
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ac:	2300      	movs	r3, #0
 80043ae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80043b2:	2003      	movs	r0, #3
 80043b4:	4770      	bx	lr

080043b6 <SPI_WaitFlagStateUntilTimeout>:
{
 80043b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80043be:	4605      	mov	r5, r0
 80043c0:	460f      	mov	r7, r1
 80043c2:	4616      	mov	r6, r2
 80043c4:	461c      	mov	r4, r3
  while ((hspi->Instance->SR & Flag) != State)
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	6898      	ldr	r0, [r3, #8]
 80043ca:	4038      	ands	r0, r7
 80043cc:	42b0      	cmp	r0, r6
 80043ce:	d102      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x20>
}
 80043d0:	2000      	movs	r0, #0
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	1c62      	adds	r2, r4, #1
 80043d8:	d0f6      	beq.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80043da:	b924      	cbnz	r4, 80043e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80043dc:	4628      	mov	r0, r5
}
 80043de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	f7ff bfbe 	b.w	8004362 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80043e6:	f7fd ff01 	bl	80021ec <HAL_GetTick>
 80043ea:	eba0 0008 	sub.w	r0, r0, r8
 80043ee:	42a0      	cmp	r0, r4
 80043f0:	d3e9      	bcc.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0x10>
 80043f2:	e7f3      	b.n	80043dc <SPI_WaitFlagStateUntilTimeout+0x26>

080043f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80043f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043fc:	4607      	mov	r7, r0
 80043fe:	460e      	mov	r6, r1
 8004400:	4615      	mov	r5, r2
 8004402:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	6890      	ldr	r0, [r2, #8]
 8004408:	4030      	ands	r0, r6
 800440a:	42a8      	cmp	r0, r5
 800440c:	d103      	bne.n	8004416 <SPI_WaitFifoStateUntilTimeout+0x22>
      }
    }
  }

  return HAL_OK;
}
 800440e:	2000      	movs	r0, #0
 8004410:	b002      	add	sp, #8
 8004412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004416:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800441a:	d106      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x36>
 800441c:	b92d      	cbnz	r5, 800442a <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800441e:	7b13      	ldrb	r3, [r2, #12]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 8004426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800442a:	1c63      	adds	r3, r4, #1
 800442c:	d0eb      	beq.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x12>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800442e:	b92c      	cbnz	r4, 800443c <SPI_WaitFifoStateUntilTimeout+0x48>
 8004430:	4638      	mov	r0, r7
}
 8004432:	b002      	add	sp, #8
 8004434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	f7ff bf93 	b.w	8004362 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800443c:	f7fd fed6 	bl	80021ec <HAL_GetTick>
 8004440:	eba0 0008 	sub.w	r0, r0, r8
 8004444:	42a0      	cmp	r0, r4
 8004446:	d3dd      	bcc.n	8004404 <SPI_WaitFifoStateUntilTimeout+0x10>
 8004448:	e7f2      	b.n	8004430 <SPI_WaitFifoStateUntilTimeout+0x3c>

0800444a <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800444a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800444c:	460b      	mov	r3, r1
 800444e:	9200      	str	r2, [sp, #0]
{
 8004450:	460d      	mov	r5, r1
 8004452:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004454:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004458:	2200      	movs	r2, #0
{
 800445a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800445c:	f7ff ffca 	bl	80043f4 <SPI_WaitFifoStateUntilTimeout>
 8004460:	4602      	mov	r2, r0
 8004462:	b128      	cbz	r0, 8004470 <SPI_EndRxTxTransaction+0x26>
    return HAL_TIMEOUT;
  }
  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004464:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004466:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004468:	f043 0320 	orr.w	r3, r3, #32
 800446c:	6623      	str	r3, [r4, #96]	; 0x60
 800446e:	e011      	b.n	8004494 <SPI_EndRxTxTransaction+0x4a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	9600      	str	r6, [sp, #0]
 8004472:	462b      	mov	r3, r5
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff ff9d 	bl	80043b6 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4602      	mov	r2, r0
 800447e:	2800      	cmp	r0, #0
 8004480:	d1f0      	bne.n	8004464 <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004482:	9600      	str	r6, [sp, #0]
 8004484:	462b      	mov	r3, r5
 8004486:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800448a:	4620      	mov	r0, r4
 800448c:	f7ff ffb2 	bl	80043f4 <SPI_WaitFifoStateUntilTimeout>
 8004490:	2800      	cmp	r0, #0
 8004492:	d1e7      	bne.n	8004464 <SPI_EndRxTxTransaction+0x1a>
  }
  return HAL_OK;
}
 8004494:	b002      	add	sp, #8
 8004496:	bd70      	pop	{r4, r5, r6, pc}

08004498 <HAL_SPI_MspInit>:
}
 8004498:	4770      	bx	lr

0800449a <HAL_SPI_Init>:
{
 800449a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800449c:	4604      	mov	r4, r0
 800449e:	2800      	cmp	r0, #0
 80044a0:	d058      	beq.n	8004554 <HAL_SPI_Init+0xba>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80044a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044aa:	b91b      	cbnz	r3, 80044b4 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 80044ac:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80044b0:	f7ff fff2 	bl	8004498 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80044b6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044b8:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80044ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80044be:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c0:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ce:	d843      	bhi.n	8004558 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044d4:	d000      	beq.n	80044d8 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80044d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044da:	b92b      	cbnz	r3, 80044e8 <HAL_SPI_Init+0x4e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044dc:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80044e0:	bf8c      	ite	hi
 80044e2:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80044e4:	2301      	movls	r3, #1
 80044e6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80044e8:	69a1      	ldr	r1, [r4, #24]
 80044ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044ec:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80044f0:	433b      	orrs	r3, r7
 80044f2:	6927      	ldr	r7, [r4, #16]
 80044f4:	433b      	orrs	r3, r7
 80044f6:	6967      	ldr	r7, [r4, #20]
 80044f8:	433b      	orrs	r3, r7
 80044fa:	69e7      	ldr	r7, [r4, #28]
 80044fc:	433b      	orrs	r3, r7
 80044fe:	6a27      	ldr	r7, [r4, #32]
 8004500:	433b      	orrs	r3, r7
 8004502:	f401 7700 	and.w	r7, r1, #512	; 0x200
 8004506:	4333      	orrs	r3, r6
 8004508:	433b      	orrs	r3, r7
 800450a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800450c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800450e:	2b02      	cmp	r3, #2
 8004510:	d103      	bne.n	800451a <HAL_SPI_Init+0x80>
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004518:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800451a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451c:	0c09      	lsrs	r1, r1, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800451e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004522:	ea45 0503 	orr.w	r5, r5, r3
 8004526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004528:	f001 0104 	and.w	r1, r1, #4
 800452c:	ea45 0503 	orr.w	r5, r5, r3
 8004530:	ea45 0501 	orr.w	r5, r5, r1
 8004534:	ea40 0005 	orr.w	r0, r0, r5
 8004538:	6050      	str	r0, [r2, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800453a:	d101      	bne.n	8004540 <HAL_SPI_Init+0xa6>
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800453c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800453e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004540:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004542:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004548:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800454a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800454e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
 8004556:	e7fc      	b.n	8004552 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004558:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800455a:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800455e:	e7b9      	b.n	80044d4 <HAL_SPI_Init+0x3a>

08004560 <HAL_SPI_MspDeInit>:
 8004560:	4770      	bx	lr

08004562 <HAL_SPI_DeInit>:
{
 8004562:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004564:	4604      	mov	r4, r0
 8004566:	b180      	cbz	r0, 800458a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004568:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800456a:	2302      	movs	r3, #2
 800456c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004576:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004578:	f7ff fff2 	bl	8004560 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800457c:	2000      	movs	r0, #0
 800457e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8004580:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8004584:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8004588:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800458a:	2001      	movs	r0, #1
 800458c:	e7fc      	b.n	8004588 <HAL_SPI_DeInit+0x26>

0800458e <HAL_SPI_Transmit>:
{
 800458e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004592:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004594:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 800459c:	2b01      	cmp	r3, #1
{
 800459e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80045a0:	f000 80ab 	beq.w	80046fa <HAL_SPI_Transmit+0x16c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80045aa:	f7fd fe1f 	bl	80021ec <HAL_GetTick>
 80045ae:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80045b0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80045b4:	b2c0      	uxtb	r0, r0
 80045b6:	2801      	cmp	r0, #1
 80045b8:	f040 809d 	bne.w	80046f6 <HAL_SPI_Transmit+0x168>
  if ((pData == NULL) || (Size == 0U))
 80045bc:	2d00      	cmp	r5, #0
 80045be:	d077      	beq.n	80046b0 <HAL_SPI_Transmit+0x122>
 80045c0:	f1b8 0f00 	cmp.w	r8, #0
 80045c4:	d074      	beq.n	80046b0 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045c6:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045c8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045ca:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	6820      	ldr	r0, [r4, #0]
 80045d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80045da:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80045de:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045e2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80045e6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ea:	68a3      	ldr	r3, [r4, #8]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d103      	bne.n	80045fa <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 80045f2:	6803      	ldr	r3, [r0, #0]
 80045f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f8:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004600:	d109      	bne.n	8004616 <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 8004602:	6803      	ldr	r3, [r0, #0]
 8004604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	6003      	str	r3, [r0, #0]
 800460e:	6803      	ldr	r3, [r0, #0]
 8004610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004614:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004616:	6803      	ldr	r3, [r0, #0]
 8004618:	065b      	lsls	r3, r3, #25
 800461a:	d403      	bmi.n	8004624 <HAL_SPI_Transmit+0x96>
    __HAL_SPI_ENABLE(hspi);
 800461c:	6803      	ldr	r3, [r0, #0]
 800461e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004622:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	68e3      	ldr	r3, [r4, #12]
 8004626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462a:	d81c      	bhi.n	8004666 <HAL_SPI_Transmit+0xd8>
    while (hspi->TxXferCount > 0U)
 800462c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	b1eb      	cbz	r3, 800466e <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	0792      	lsls	r2, r2, #30
 8004638:	d553      	bpl.n	80046e2 <HAL_SPI_Transmit+0x154>
        if (hspi->TxXferCount > 1U)
 800463a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800463c:	2a01      	cmp	r2, #1
 800463e:	d948      	bls.n	80046d2 <HAL_SPI_Transmit+0x144>
          hspi->Instance->DR = *((uint16_t *)pData);
 8004640:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004644:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8004646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004648:	3b02      	subs	r3, #2
 800464a:	b29b      	uxth	r3, r3
 800464c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800464e:	e7ed      	b.n	800462c <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	0790      	lsls	r0, r2, #30
 8004656:	d529      	bpl.n	80046ac <HAL_SPI_Transmit+0x11e>
        hspi->Instance->DR = *((uint16_t *)pData);
 8004658:	f835 2b02 	ldrh.w	r2, [r5], #2
 800465c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800465e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004660:	3b01      	subs	r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_SPI_Transmit+0xc2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004674:	d104      	bne.n	8004680 <HAL_SPI_Transmit+0xf2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	6813      	ldr	r3, [r2, #0]
 800467a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800467e:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004680:	463a      	mov	r2, r7
 8004682:	4631      	mov	r1, r6
 8004684:	4620      	mov	r0, r4
 8004686:	f7ff fee0 	bl	800444a <SPI_EndRxTxTransaction>
 800468a:	b108      	cbz	r0, 8004690 <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468c:	2320      	movs	r3, #32
 800468e:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	b933      	cbnz	r3, 80046a2 <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	9201      	str	r2, [sp, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80046a4:	3000      	adds	r0, #0
 80046a6:	bf18      	it	ne
 80046a8:	2001      	movne	r0, #1
error:
 80046aa:	e001      	b.n	80046b0 <HAL_SPI_Transmit+0x122>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80046ac:	b94e      	cbnz	r6, 80046c2 <HAL_SPI_Transmit+0x134>
          errorcode = HAL_TIMEOUT;
 80046ae:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046b6:	2300      	movs	r3, #0
 80046b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80046bc:	b002      	add	sp, #8
 80046be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80046c2:	1c71      	adds	r1, r6, #1
 80046c4:	d0cf      	beq.n	8004666 <HAL_SPI_Transmit+0xd8>
 80046c6:	f7fd fd91 	bl	80021ec <HAL_GetTick>
 80046ca:	1bc0      	subs	r0, r0, r7
 80046cc:	42b0      	cmp	r0, r6
 80046ce:	d3ca      	bcc.n	8004666 <HAL_SPI_Transmit+0xd8>
 80046d0:	e7ed      	b.n	80046ae <HAL_SPI_Transmit+0x120>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80046d2:	782a      	ldrb	r2, [r5, #0]
 80046d4:	3501      	adds	r5, #1
 80046d6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80046d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80046e0:	e7a4      	b.n	800462c <HAL_SPI_Transmit+0x9e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	d0e3      	beq.n	80046ae <HAL_SPI_Transmit+0x120>
 80046e6:	1c73      	adds	r3, r6, #1
 80046e8:	d0a0      	beq.n	800462c <HAL_SPI_Transmit+0x9e>
 80046ea:	f7fd fd7f 	bl	80021ec <HAL_GetTick>
 80046ee:	1bc0      	subs	r0, r0, r7
 80046f0:	42b0      	cmp	r0, r6
 80046f2:	d39b      	bcc.n	800462c <HAL_SPI_Transmit+0x9e>
 80046f4:	e7db      	b.n	80046ae <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 80046f6:	2002      	movs	r0, #2
 80046f8:	e7da      	b.n	80046b0 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 80046fa:	2002      	movs	r0, #2
 80046fc:	e7de      	b.n	80046bc <HAL_SPI_Transmit+0x12e>

080046fe <HAL_SPI_TransmitReceive>:
{
 80046fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004702:	4698      	mov	r8, r3
 8004704:	b085      	sub	sp, #20
  __IO uint16_t tmpreg = 0U;
 8004706:	2300      	movs	r3, #0
{
 8004708:	4604      	mov	r4, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4691      	mov	r9, r2
  __IO uint16_t tmpreg = 0U;
 800470e:	f8ad 300e 	strh.w	r3, [sp, #14]
  __HAL_LOCK(hspi);
 8004712:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8004716:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8004718:	2b01      	cmp	r3, #1
 800471a:	f000 8199 	beq.w	8004a50 <HAL_SPI_TransmitReceive+0x352>
 800471e:	2301      	movs	r3, #1
 8004720:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004724:	f7fd fd62 	bl	80021ec <HAL_GetTick>
  tmp  = hspi->State;
 8004728:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800472c:	4607      	mov	r7, r0
  tmp1 = hspi->Init.Mode;
 800472e:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8004730:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004732:	2b01      	cmp	r3, #1
 8004734:	d00a      	beq.n	800474c <HAL_SPI_TransmitReceive+0x4e>
 8004736:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800473a:	f040 8187 	bne.w	8004a4c <HAL_SPI_TransmitReceive+0x34e>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800473e:	68a2      	ldr	r2, [r4, #8]
 8004740:	2a00      	cmp	r2, #0
 8004742:	f040 8183 	bne.w	8004a4c <HAL_SPI_TransmitReceive+0x34e>
 8004746:	2b04      	cmp	r3, #4
 8004748:	f040 8180 	bne.w	8004a4c <HAL_SPI_TransmitReceive+0x34e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800474c:	2d00      	cmp	r5, #0
 800474e:	f000 8166 	beq.w	8004a1e <HAL_SPI_TransmitReceive+0x320>
 8004752:	f1b9 0f00 	cmp.w	r9, #0
 8004756:	f000 8162 	beq.w	8004a1e <HAL_SPI_TransmitReceive+0x320>
 800475a:	f1b8 0f00 	cmp.w	r8, #0
 800475e:	f000 815e 	beq.w	8004a1e <HAL_SPI_TransmitReceive+0x320>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004762:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004766:	2b04      	cmp	r3, #4
 8004768:	d002      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x72>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800476a:	2305      	movs	r3, #5
 800476c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004772:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004774:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004778:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 800477e:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004782:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004786:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004788:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800478c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8004790:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8004794:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004796:	d109      	bne.n	80047ac <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800479e:	0412      	lsls	r2, r2, #16
 80047a0:	0c12      	lsrs	r2, r2, #16
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047aa:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80047ac:	68e0      	ldr	r0, [r4, #12]
 80047ae:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0xbe>
 80047b4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80047b8:	2a01      	cmp	r2, #1
 80047ba:	d936      	bls.n	800482a <HAL_SPI_TransmitReceive+0x12c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047c2:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	0652      	lsls	r2, r2, #25
 80047c8:	d403      	bmi.n	80047d2 <HAL_SPI_TransmitReceive+0xd4>
    __HAL_SPI_ENABLE(hspi);
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80047d6:	d97d      	bls.n	80048d4 <HAL_SPI_TransmitReceive+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80047d8:	b119      	cbz	r1, 80047e2 <HAL_SPI_TransmitReceive+0xe4>
 80047da:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80047dc:	b292      	uxth	r2, r2
 80047de:	2a01      	cmp	r2, #1
 80047e0:	d106      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80047e2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80047e6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80047e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80047f0:	f04f 0801 	mov.w	r8, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	b9db      	cbnz	r3, 8004832 <HAL_SPI_TransmitReceive+0x134>
 80047fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80047fe:	b29b      	uxth	r3, r3
 8004800:	b9bb      	cbnz	r3, 8004832 <HAL_SPI_TransmitReceive+0x134>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	f040 80f0 	bne.w	80049ec <HAL_SPI_TransmitReceive+0x2ee>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800480c:	2201      	movs	r2, #1
 800480e:	9700      	str	r7, [sp, #0]
 8004810:	4633      	mov	r3, r6
 8004812:	4620      	mov	r0, r4
 8004814:	4611      	mov	r1, r2
 8004816:	f7ff fdce 	bl	80043b6 <SPI_WaitFlagStateUntilTimeout>
 800481a:	2800      	cmp	r0, #0
 800481c:	f000 80db 	beq.w	80049d6 <HAL_SPI_TransmitReceive+0x2d8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004820:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	6623      	str	r3, [r4, #96]	; 0x60
 8004828:	e049      	b.n	80048be <HAL_SPI_TransmitReceive+0x1c0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004830:	e7c7      	b.n	80047c2 <HAL_SPI_TransmitReceive+0xc4>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004832:	f1b8 0f00 	cmp.w	r8, #0
 8004836:	d028      	beq.n	800488a <HAL_SPI_TransmitReceive+0x18c>
 8004838:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	b32b      	cbz	r3, 800488a <HAL_SPI_TransmitReceive+0x18c>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	0790      	lsls	r0, r2, #30
 8004844:	d521      	bpl.n	800488a <HAL_SPI_TransmitReceive+0x18c>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004846:	f835 2b02 	ldrh.w	r2, [r5], #2
 800484a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800484c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800484e:	3a01      	subs	r2, #1
 8004850:	b292      	uxth	r2, r2
 8004852:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004854:	f8b4 803e 	ldrh.w	r8, [r4, #62]	; 0x3e
 8004858:	fa1f f888 	uxth.w	r8, r8
 800485c:	f1b8 0f00 	cmp.w	r8, #0
 8004860:	d111      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x188>
 8004862:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004864:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004868:	d10f      	bne.n	800488a <HAL_SPI_TransmitReceive+0x18c>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	0751      	lsls	r1, r2, #29
 800486e:	d406      	bmi.n	800487e <HAL_SPI_TransmitReceive+0x180>
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	0712      	lsls	r2, r2, #28
 8004874:	d503      	bpl.n	800487e <HAL_SPI_TransmitReceive+0x180>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004884:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 8004886:	f04f 0800 	mov.w	r8, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800488a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800488e:	b29b      	uxth	r3, r3
 8004890:	b173      	cbz	r3, 80048b0 <HAL_SPI_TransmitReceive+0x1b2>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	07d0      	lsls	r0, r2, #31
 8004898:	d50a      	bpl.n	80048b0 <HAL_SPI_TransmitReceive+0x1b2>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800489a:	68db      	ldr	r3, [r3, #12]
        txallowed = 1U;
 800489c:	f04f 0801 	mov.w	r8, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80048a0:	f829 3b02 	strh.w	r3, [r9], #2
        hspi->RxXferCount--;
 80048a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80048b0:	1c71      	adds	r1, r6, #1
 80048b2:	d09f      	beq.n	80047f4 <HAL_SPI_TransmitReceive+0xf6>
 80048b4:	f7fd fc9a 	bl	80021ec <HAL_GetTick>
 80048b8:	1bc0      	subs	r0, r0, r7
 80048ba:	42b0      	cmp	r0, r6
 80048bc:	d39a      	bcc.n	80047f4 <HAL_SPI_TransmitReceive+0xf6>
          errorcode = HAL_TIMEOUT;
 80048be:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048c6:	2300      	movs	r3, #0
 80048c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80048cc:	4628      	mov	r0, r5
 80048ce:	b005      	add	sp, #20
 80048d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80048d4:	b119      	cbz	r1, 80048de <HAL_SPI_TransmitReceive+0x1e0>
 80048d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80048d8:	b292      	uxth	r2, r2
 80048da:	2a01      	cmp	r2, #1
 80048dc:	d106      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x1ee>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
 80048de:	f815 2b01 	ldrb.w	r2, [r5], #1
 80048e2:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80048e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80048ec:	f04f 0801 	mov.w	r8, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b923      	cbnz	r3, 8004900 <HAL_SPI_TransmitReceive+0x202>
 80048f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d080      	beq.n	8004802 <HAL_SPI_TransmitReceive+0x104>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	d02c      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x262>
 8004906:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	b34b      	cbz	r3, 8004960 <HAL_SPI_TransmitReceive+0x262>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	0792      	lsls	r2, r2, #30
 8004912:	d525      	bpl.n	8004960 <HAL_SPI_TransmitReceive+0x262>
        if (hspi->TxXferCount > 1U)
 8004914:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004916:	2a01      	cmp	r2, #1
 8004918:	d949      	bls.n	80049ae <HAL_SPI_TransmitReceive+0x2b0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800491a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800491e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8004920:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004922:	3b02      	subs	r3, #2
 8004924:	b29b      	uxth	r3, r3
 8004926:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004928:	f8b4 803e 	ldrh.w	r8, [r4, #62]	; 0x3e
 800492c:	fa1f f888 	uxth.w	r8, r8
 8004930:	f1b8 0f00 	cmp.w	r8, #0
 8004934:	d112      	bne.n	800495c <HAL_SPI_TransmitReceive+0x25e>
 8004936:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004938:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800493c:	d110      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x262>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	0750      	lsls	r0, r2, #29
 8004944:	d406      	bmi.n	8004954 <HAL_SPI_TransmitReceive+0x256>
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	0711      	lsls	r1, r2, #28
 800494a:	d503      	bpl.n	8004954 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800495a:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800495c:	f04f 0800 	mov.w	r8, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004960:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004964:	b29b      	uxth	r3, r3
 8004966:	b1d3      	cbz	r3, 800499e <HAL_SPI_TransmitReceive+0x2a0>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	07d2      	lsls	r2, r2, #31
 800496e:	d516      	bpl.n	800499e <HAL_SPI_TransmitReceive+0x2a0>
        if (hspi->RxXferCount > 1U)
 8004970:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004974:	2a01      	cmp	r2, #1
 8004976:	d922      	bls.n	80049be <HAL_SPI_TransmitReceive+0x2c0>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	f829 2b02 	strh.w	r2, [r9], #2
          hspi->RxXferCount -= 2U;
 800497e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004982:	3a02      	subs	r2, #2
 8004984:	b292      	uxth	r2, r2
 8004986:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800498a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800498e:	2a01      	cmp	r2, #1
 8004990:	d803      	bhi.n	800499a <HAL_SPI_TransmitReceive+0x29c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004998:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800499a:	f04f 0801 	mov.w	r8, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800499e:	1c73      	adds	r3, r6, #1
 80049a0:	d0a6      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x1f2>
 80049a2:	f7fd fc23 	bl	80021ec <HAL_GetTick>
 80049a6:	1bc0      	subs	r0, r0, r7
 80049a8:	42b0      	cmp	r0, r6
 80049aa:	d3a1      	bcc.n	80048f0 <HAL_SPI_TransmitReceive+0x1f2>
 80049ac:	e787      	b.n	80048be <HAL_SPI_TransmitReceive+0x1c0>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80049ae:	782a      	ldrb	r2, [r5, #0]
 80049b0:	3501      	adds	r5, #1
 80049b2:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80049b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80049bc:	e7b4      	b.n	8004928 <HAL_SPI_TransmitReceive+0x22a>
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049be:	7b1b      	ldrb	r3, [r3, #12]
 80049c0:	f109 0901 	add.w	r9, r9, #1
 80049c4:	f809 3c01 	strb.w	r3, [r9, #-1]
          hspi->RxXferCount--;
 80049c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80049d4:	e7e1      	b.n	800499a <HAL_SPI_TransmitReceive+0x29c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049d6:	68e2      	ldr	r2, [r4, #12]
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80049de:	d120      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x324>
      tmpreg = hspi->Instance->DR;
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80049e4:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 80049e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	6895      	ldr	r5, [r2, #8]
 80049f0:	f015 0510 	ands.w	r5, r5, #16
 80049f4:	d007      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x308>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80049f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80049f8:	2501      	movs	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004a00:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004a04:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a06:	463a      	mov	r2, r7
 8004a08:	4631      	mov	r1, r6
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fd1d 	bl	800444a <SPI_EndRxTxTransaction>
 8004a10:	b108      	cbz	r0, 8004a16 <HAL_SPI_TransmitReceive+0x318>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a12:	2320      	movs	r3, #32
 8004a14:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f43f af51 	beq.w	80048c0 <HAL_SPI_TransmitReceive+0x1c2>
    errorcode = HAL_ERROR;
 8004a1e:	2501      	movs	r5, #1
 8004a20:	e74e      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x1c2>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a22:	7b1b      	ldrb	r3, [r3, #12]
 8004a24:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 8004a28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d1dc      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x2ee>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004a32:	2201      	movs	r2, #1
 8004a34:	9700      	str	r7, [sp, #0]
 8004a36:	4633      	mov	r3, r6
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	f7ff fcbb 	bl	80043b6 <SPI_WaitFlagStateUntilTimeout>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f47f aeed 	bne.w	8004820 <HAL_SPI_TransmitReceive+0x122>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	7b1b      	ldrb	r3, [r3, #12]
 8004a4a:	e7cb      	b.n	80049e4 <HAL_SPI_TransmitReceive+0x2e6>
    errorcode = HAL_BUSY;
 8004a4c:	2502      	movs	r5, #2
 8004a4e:	e737      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x1c2>
  __HAL_LOCK(hspi);
 8004a50:	2502      	movs	r5, #2
 8004a52:	e73b      	b.n	80048cc <HAL_SPI_TransmitReceive+0x1ce>

08004a54 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a56:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a70:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8004a72:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIM_OC_DelayElapsedCallback>:
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_IC_CaptureCallback>:
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_PWM_PulseFinishedCallback>:
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_TriggerCallback>:
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a8e:	6803      	ldr	r3, [r0, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	0791      	lsls	r1, r2, #30
{
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a98:	d50f      	bpl.n	8004aba <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	0792      	lsls	r2, r2, #30
 8004a9e:	d50c      	bpl.n	8004aba <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa0:	f06f 0202 	mvn.w	r2, #2
 8004aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004aa8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8004aac:	0799      	lsls	r1, r3, #30
 8004aae:	f000 8085 	beq.w	8004bbc <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	f7ff ffe9 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	0752      	lsls	r2, r2, #29
 8004ac0:	d510      	bpl.n	8004ae4 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	0750      	lsls	r0, r2, #29
 8004ac6:	d50d      	bpl.n	8004ae4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac8:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004ad2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004ad6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ada:	d075      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004adc:	f7ff ffd4 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	0711      	lsls	r1, r2, #28
 8004aea:	d50f      	bpl.n	8004b0c <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	0712      	lsls	r2, r2, #28
 8004af0:	d50c      	bpl.n	8004b0c <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af2:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004afc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afe:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004b00:	079b      	lsls	r3, r3, #30
 8004b02:	d067      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	f7ff ffc0 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	06d0      	lsls	r0, r2, #27
 8004b12:	d510      	bpl.n	8004b36 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	06d1      	lsls	r1, r2, #27
 8004b18:	d50d      	bpl.n	8004b36 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b1a:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b22:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004b24:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b26:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8004b28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b2c:	d058      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	f7ff ffab 	bl	8004a88 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	2300      	movs	r3, #0
 8004b34:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	07d2      	lsls	r2, r2, #31
 8004b3c:	d508      	bpl.n	8004b50 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	07d0      	lsls	r0, r2, #31
 8004b42:	d505      	bpl.n	8004b50 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4c:	f000 f916 	bl	8004d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	0611      	lsls	r1, r2, #24
 8004b56:	d508      	bpl.n	8004b6a <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	0612      	lsls	r2, r2, #24
 8004b5c:	d505      	bpl.n	8004b6a <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b66:	f000 f8c4 	bl	8004cf2 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	05d0      	lsls	r0, r2, #23
 8004b70:	d508      	bpl.n	8004b84 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	0611      	lsls	r1, r2, #24
 8004b76:	d505      	bpl.n	8004b84 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b80:	f000 f8b7 	bl	8004cf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	0652      	lsls	r2, r2, #25
 8004b8a:	d508      	bpl.n	8004b9e <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	0650      	lsls	r0, r2, #25
 8004b90:	d505      	bpl.n	8004b9e <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b98:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b9a:	f7ff ff77 	bl	8004a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	0691      	lsls	r1, r2, #26
 8004ba4:	d522      	bpl.n	8004bec <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	0692      	lsls	r2, r2, #26
 8004baa:	d51f      	bpl.n	8004bec <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bac:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8004bb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8004bb8:	f000 b89a 	b.w	8004cf0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	f7ff ff63 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f7ff ff62 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
 8004bc6:	e776      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc8:	f7ff ff5d 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff ff5c 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd2:	e785      	b.n	8004ae0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd4:	f7ff ff57 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff ff56 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
 8004bde:	e793      	b.n	8004b08 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	f7ff ff51 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff50 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
 8004bea:	e7a2      	b.n	8004b32 <HAL_TIM_IRQHandler+0xa4>
}
 8004bec:	bd10      	pop	{r4, pc}
	...

08004bf0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004bf2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004bf4:	4290      	cmp	r0, r2
 8004bf6:	d012      	beq.n	8004c1e <TIM_Base_SetConfig+0x2e>
 8004bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bfc:	d00f      	beq.n	8004c1e <TIM_Base_SetConfig+0x2e>
 8004bfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c02:	4290      	cmp	r0, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0x2e>
 8004c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0a:	4290      	cmp	r0, r2
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0x2e>
 8004c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c12:	4290      	cmp	r0, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0x2e>
 8004c16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c1a:	4290      	cmp	r0, r2
 8004c1c:	d119      	bne.n	8004c52 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004c1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c24:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004c26:	4a23      	ldr	r2, [pc, #140]	; (8004cb4 <TIM_Base_SetConfig+0xc4>)
 8004c28:	4290      	cmp	r0, r2
 8004c2a:	d029      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c30:	d026      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c36:	4290      	cmp	r0, r2
 8004c38:	d022      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3e:	4290      	cmp	r0, r2
 8004c40:	d01e      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c46:	4290      	cmp	r0, r2
 8004c48:	d01a      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c4e:	4290      	cmp	r0, r2
 8004c50:	d016      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <TIM_Base_SetConfig+0xc8>)
 8004c54:	4290      	cmp	r0, r2
 8004c56:	d013      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c5c:	4290      	cmp	r0, r2
 8004c5e:	d00f      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c64:	4290      	cmp	r0, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c68:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c6c:	4290      	cmp	r0, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c74:	4290      	cmp	r0, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_Base_SetConfig+0x90>
 8004c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c7c:	4290      	cmp	r0, r2
 8004c7e:	d103      	bne.n	8004c88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c84:	68ca      	ldr	r2, [r1, #12]
 8004c86:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c88:	694a      	ldr	r2, [r1, #20]
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004c90:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c92:	688b      	ldr	r3, [r1, #8]
 8004c94:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004c96:	680b      	ldr	r3, [r1, #0]
 8004c98:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <TIM_Base_SetConfig+0xc4>)
 8004c9c:	4298      	cmp	r0, r3
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xb8>
 8004ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	d101      	bne.n	8004cac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	690b      	ldr	r3, [r1, #16]
 8004caa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cac:	2301      	movs	r3, #1
 8004cae:	6143      	str	r3, [r0, #20]
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40014000 	.word	0x40014000

08004cbc <HAL_TIM_Base_Init>:
{ 
 8004cbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	b1a0      	cbz	r0, 8004cec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004cc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cca:	b91b      	cbnz	r3, 8004cd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004ccc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004cd0:	f7ff fec0 	bl	8004a54 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004cd4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8004cda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cde:	f7ff ff87 	bl	8004bf0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004ce2:	2301      	movs	r3, #1
  return HAL_OK;
 8004ce4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8004ce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004cea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004cec:	2001      	movs	r0, #1
 8004cee:	e7fc      	b.n	8004cea <HAL_TIM_Base_Init+0x2e>

08004cf0 <HAL_TIMEx_CommutationCallback>:
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIMEx_BreakCallback>:
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_InitTick_TIM6>:
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick_TIM6 (uint32_t TickPriority)
{
 8004cf4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004cf6:	4601      	mov	r1, r0
{
 8004cf8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2036      	movs	r0, #54	; 0x36
 8004cfe:	f7fd fa9f 	bl	8002240 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d02:	2036      	movs	r0, #54	; 0x36
 8004d04:	f7fd face 	bl	80022a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d08:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <HAL_InitTick_TIM6+0x74>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d0a:	a901      	add	r1, sp, #4
 8004d0c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d10:	f042 0210 	orr.w	r2, r2, #16
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d20:	f7ff f816 	bl	8003d50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	b9cb      	cbnz	r3, 8004d5c <HAL_InitTick_TIM6+0x68>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fe fff2 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8004d2c:	4c0f      	ldr	r4, [pc, #60]	; (8004d6c <HAL_InitTick_TIM6+0x78>)
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_InitTick_TIM6+0x7c>)
 8004d30:	6023      	str	r3, [r4, #0]
     + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
     + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     + ClockDivision = 0
     + Counter direction = Up
   */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8004d32:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004d36:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_InitTick_TIM6+0x80>)
 8004d3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d3e:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8004d40:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8004d42:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8004d44:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8004d46:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d48:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d4a:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8004d4c:	f7ff ffb6 	bl	8004cbc <HAL_TIM_Base_Init>
 8004d50:	b940      	cbnz	r0, 8004d64 <HAL_InitTick_TIM6+0x70>
    {
      /* Start the TIM time Base generation in interrupt mode */
      return HAL_TIM_Base_Start_IT(&TimHandle);
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7ff fe8c 	bl	8004a70 <HAL_TIM_Base_Start_IT>
    }

  /* Return function status */
  return HAL_ERROR;
}
 8004d58:	b008      	add	sp, #32
 8004d5a:	bd10      	pop	{r4, pc}
      uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe ffd8 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8004d60:	0040      	lsls	r0, r0, #1
 8004d62:	e7e3      	b.n	8004d2c <HAL_InitTick_TIM6+0x38>
  return HAL_ERROR;
 8004d64:	2001      	movs	r0, #1
 8004d66:	e7f7      	b.n	8004d58 <HAL_InitTick_TIM6+0x64>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	20028b94 	.word	0x20028b94
 8004d70:	40001000 	.word	0x40001000
 8004d74:	000f4240 	.word	0x000f4240

08004d78 <HAL_InitTick>:

HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
  return HAL_InitTick_TIM6(TickPriority);
 8004d78:	f7ff bfbc 	b.w	8004cf4 <HAL_InitTick_TIM6>

08004d7c <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim  TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &TimHandle) { // must be incremented only in case of TIM 6
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8004d7e:	4283      	cmp	r3, r0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8004d82:	f7fd ba27 	b.w	80021d4 <HAL_IncTick>
  }
}
 8004d86:	4770      	bx	lr
 8004d88:	20028b94 	.word	0x20028b94

08004d8c <TIM6_DAC_IRQHandler>:
/**
 * @brief  This function handles TIM interrupt request.
 * @retval None
 */
void TIM6_DAC_IRQHandler(void)
{
 8004d8c:	b508      	push	{r3, lr}
  static int counter=0;
  HAL_TIM_IRQHandler(&TimHandle);
 8004d8e:	4809      	ldr	r0, [pc, #36]	; (8004db4 <TIM6_DAC_IRQHandler+0x28>)
 8004d90:	f7ff fe7d 	bl	8004a8e <HAL_TIM_IRQHandler>

  lv_tick_inc(1);
 8004d94:	2001      	movs	r0, #1
 8004d96:	f00d ffc7 	bl	8012d28 <lv_tick_inc>

  counter++;
 8004d9a:	4a07      	ldr	r2, [pc, #28]	; (8004db8 <TIM6_DAC_IRQHandler+0x2c>)
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	3301      	adds	r3, #1
  if (counter >=5) {
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	dc01      	bgt.n	8004da8 <TIM6_DAC_IRQHandler+0x1c>
  counter++;
 8004da4:	6013      	str	r3, [r2, #0]
    counter=0;
    lv_task_handler();
  }

}
 8004da6:	bd08      	pop	{r3, pc}
    counter=0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	6013      	str	r3, [r2, #0]
}
 8004dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_task_handler();
 8004db0:	f00f bdc4 	b.w	801493c <lv_task_handler>
 8004db4:	20028b94 	.word	0x20028b94
 8004db8:	200204d4 	.word	0x200204d4

08004dbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
}
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_UART_MspInit>:
}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_MspDeInit>:
 8004dd8:	4770      	bx	lr

08004dda <HAL_UART_DeInit>:
{
 8004dda:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 8004ddc:	4605      	mov	r5, r0
 8004dde:	b1b0      	cbz	r0, 8004e0e <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8004de0:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8004de2:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004de8:	6803      	ldr	r3, [r0, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8004df2:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004df4:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004df6:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004df8:	f7ff ffee 	bl	8004dd8 <HAL_UART_MspDeInit>
  return HAL_OK;
 8004dfc:	4620      	mov	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	66ec      	str	r4, [r5, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8004e00:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->gState    = HAL_UART_STATE_RESET;
 8004e04:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8004e08:	f885 406a 	strb.w	r4, [r5, #106]	; 0x6a
}
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7fc      	b.n	8004e0c <HAL_UART_DeInit+0x32>

08004e12 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8004e12:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d13d      	bne.n	8004e96 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	d039      	beq.n	8004e92 <HAL_UART_Receive_IT+0x80>
 8004e1e:	2a00      	cmp	r2, #0
 8004e20:	d037      	beq.n	8004e92 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8004e22:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d035      	beq.n	8004e96 <HAL_UART_Receive_IT+0x84>
 8004e2a:	2301      	movs	r3, #1
    huart->pRxBuffPtr = pData;
 8004e2c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8004e2e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 8004e32:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8004e36:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 8004e38:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e40:	d119      	bne.n	8004e76 <HAL_UART_Receive_IT+0x64>
 8004e42:	6903      	ldr	r3, [r0, #16]
 8004e44:	b9ab      	cbnz	r3, 8004e72 <HAL_UART_Receive_IT+0x60>
 8004e46:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004e4a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e50:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e54:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8004e5a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8004e5e:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	6891      	ldr	r1, [r2, #8]
 8004e62:	f041 0101 	orr.w	r1, r1, #1
 8004e66:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8004e6e:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8004e70:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8004e72:	23ff      	movs	r3, #255	; 0xff
 8004e74:	e7e9      	b.n	8004e4a <HAL_UART_Receive_IT+0x38>
 8004e76:	b923      	cbnz	r3, 8004e82 <HAL_UART_Receive_IT+0x70>
 8004e78:	6903      	ldr	r3, [r0, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f9      	beq.n	8004e72 <HAL_UART_Receive_IT+0x60>
 8004e7e:	237f      	movs	r3, #127	; 0x7f
 8004e80:	e7e3      	b.n	8004e4a <HAL_UART_Receive_IT+0x38>
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e86:	d1e2      	bne.n	8004e4e <HAL_UART_Receive_IT+0x3c>
 8004e88:	6903      	ldr	r3, [r0, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f7      	beq.n	8004e7e <HAL_UART_Receive_IT+0x6c>
 8004e8e:	233f      	movs	r3, #63	; 0x3f
 8004e90:	e7db      	b.n	8004e4a <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8004e92:	2001      	movs	r0, #1
 8004e94:	4770      	bx	lr
    return HAL_BUSY;
 8004e96:	2002      	movs	r0, #2
}
 8004e98:	4770      	bx	lr

08004e9a <UART_WaitOnFlagUntilTimeout>:
{
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	9d06      	ldr	r5, [sp, #24]
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea8:	6821      	ldr	r1, [r4, #0]
 8004eaa:	69ca      	ldr	r2, [r1, #28]
 8004eac:	ea37 0302 	bics.w	r3, r7, r2
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2201      	moveq	r2, #1
 8004eb4:	2200      	movne	r2, #0
 8004eb6:	42b2      	cmp	r2, r6
 8004eb8:	d001      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e014      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8004ebe:	1c6b      	adds	r3, r5, #1
 8004ec0:	d0f3      	beq.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004ec2:	b99d      	cbnz	r5, 8004eec <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004ec6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ece:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8004eec:	f7fd f97e 	bl	80021ec <HAL_GetTick>
 8004ef0:	eba0 0008 	sub.w	r0, r0, r8
 8004ef4:	42a8      	cmp	r0, r5
 8004ef6:	d3d7      	bcc.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0xe>
 8004ef8:	e7e4      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x2a>

08004efa <HAL_UART_Transmit>:
{
 8004efa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004efe:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8004f00:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8004f04:	4604      	mov	r4, r0
 8004f06:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8004f08:	2b20      	cmp	r3, #32
{
 8004f0a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004f0c:	d14c      	bne.n	8004fa8 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8004f0e:	2900      	cmp	r1, #0
 8004f10:	d048      	beq.n	8004fa4 <HAL_UART_Transmit+0xaa>
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d046      	beq.n	8004fa4 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8004f16:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d044      	beq.n	8004fa8 <HAL_UART_Transmit+0xae>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f28:	2321      	movs	r3, #33	; 0x21
 8004f2a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8004f2e:	f7fd f95d 	bl	80021ec <HAL_GetTick>
 8004f32:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8004f34:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f38:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004f3c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004f40:	b292      	uxth	r2, r2
 8004f42:	b962      	cbnz	r2, 8004f5e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f44:	9700      	str	r7, [sp, #0]
 8004f46:	4633      	mov	r3, r6
 8004f48:	2140      	movs	r1, #64	; 0x40
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7ff ffa5 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004f50:	b998      	cbnz	r0, 8004f7a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8004f52:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004f54:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8004f58:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8004f5c:	e00e      	b.n	8004f7c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8004f5e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f62:	2200      	movs	r2, #0
 8004f64:	9700      	str	r7, [sp, #0]
 8004f66:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8004f68:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	4633      	mov	r3, r6
 8004f74:	f7ff ff91 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 8004f78:	b118      	cbz	r0, 8004f82 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8004f7a:	2003      	movs	r0, #3
}
 8004f7c:	b002      	add	sp, #8
 8004f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8a:	d107      	bne.n	8004f9c <HAL_UART_Transmit+0xa2>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	b92b      	cbnz	r3, 8004f9c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004f90:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f98:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8004f9a:	e7cf      	b.n	8004f3c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004f9c:	782b      	ldrb	r3, [r5, #0]
 8004f9e:	3501      	adds	r5, #1
 8004fa0:	6293      	str	r3, [r2, #40]	; 0x28
 8004fa2:	e7cb      	b.n	8004f3c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	e7e9      	b.n	8004f7c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8004fa8:	2002      	movs	r0, #2
 8004faa:	e7e7      	b.n	8004f7c <HAL_UART_Transmit+0x82>

08004fac <HAL_UART_TxCpltCallback>:
 8004fac:	4770      	bx	lr

08004fae <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fae:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8004fb2:	6802      	ldr	r2, [r0, #0]
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
{
 8004fb6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb8:	d12a      	bne.n	8005010 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fba:	6884      	ldr	r4, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8004fbc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004fc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004fc6:	d11d      	bne.n	8005004 <UART_Receive_IT+0x56>
 8004fc8:	6904      	ldr	r4, [r0, #16]
 8004fca:	b9dc      	cbnz	r4, 8005004 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fce:	4011      	ands	r1, r2
 8004fd0:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8004fd4:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8004fd6:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8004fda:	3c01      	subs	r4, #1
 8004fdc:	b2a4      	uxth	r4, r4
 8004fde:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8004fe2:	b96c      	cbnz	r4, 8005000 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe4:	6803      	ldr	r3, [r0, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fec:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8004ffc:	f7fc f90e 	bl	800121c <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8005000:	2000      	movs	r0, #0
 8005002:	e00a      	b.n	800501a <UART_Receive_IT+0x6c>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005006:	1c5c      	adds	r4, r3, #1
 8005008:	4011      	ands	r1, r2
 800500a:	6544      	str	r4, [r0, #84]	; 0x54
 800500c:	7019      	strb	r1, [r3, #0]
 800500e:	e7e2      	b.n	8004fd6 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005010:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8005012:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	6193      	str	r3, [r2, #24]
}
 800501a:	bd10      	pop	{r4, pc}

0800501c <HAL_UART_ErrorCallback>:
 800501c:	4770      	bx	lr
	...

08005020 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005020:	6803      	ldr	r3, [r0, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005024:	6819      	ldr	r1, [r3, #0]
{
 8005026:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8005028:	0716      	lsls	r6, r2, #28
{
 800502a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800502c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 800502e:	d107      	bne.n	8005040 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005030:	0695      	lsls	r5, r2, #26
 8005032:	d561      	bpl.n	80050f8 <HAL_UART_IRQHandler+0xd8>
 8005034:	068e      	lsls	r6, r1, #26
 8005036:	d55f      	bpl.n	80050f8 <HAL_UART_IRQHandler+0xd8>
}
 8005038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800503c:	f7ff bfb7 	b.w	8004fae <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8005040:	f015 0001 	ands.w	r0, r5, #1
 8005044:	d102      	bne.n	800504c <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005046:	f411 7f90 	tst.w	r1, #288	; 0x120
 800504a:	d055      	beq.n	80050f8 <HAL_UART_IRQHandler+0xd8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800504c:	07d5      	lsls	r5, r2, #31
 800504e:	d507      	bpl.n	8005060 <HAL_UART_IRQHandler+0x40>
 8005050:	05ce      	lsls	r6, r1, #23
 8005052:	d505      	bpl.n	8005060 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005054:	2501      	movs	r5, #1
 8005056:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005058:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800505a:	f045 0501 	orr.w	r5, r5, #1
 800505e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005060:	0795      	lsls	r5, r2, #30
 8005062:	d506      	bpl.n	8005072 <HAL_UART_IRQHandler+0x52>
 8005064:	b128      	cbz	r0, 8005072 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005066:	2502      	movs	r5, #2
 8005068:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800506a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800506c:	f045 0504 	orr.w	r5, r5, #4
 8005070:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005072:	0756      	lsls	r6, r2, #29
 8005074:	d506      	bpl.n	8005084 <HAL_UART_IRQHandler+0x64>
 8005076:	b128      	cbz	r0, 8005084 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005078:	2504      	movs	r5, #4
 800507a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800507c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800507e:	f045 0502 	orr.w	r5, r5, #2
 8005082:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005084:	0715      	lsls	r5, r2, #28
 8005086:	d507      	bpl.n	8005098 <HAL_UART_IRQHandler+0x78>
 8005088:	068e      	lsls	r6, r1, #26
 800508a:	d400      	bmi.n	800508e <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800508c:	b120      	cbz	r0, 8005098 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800508e:	2008      	movs	r0, #8
 8005090:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005092:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005094:	4303      	orrs	r3, r0
 8005096:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005098:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800509a:	b343      	cbz	r3, 80050ee <HAL_UART_IRQHandler+0xce>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509c:	0695      	lsls	r5, r2, #26
 800509e:	d504      	bpl.n	80050aa <HAL_UART_IRQHandler+0x8a>
 80050a0:	0688      	lsls	r0, r1, #26
 80050a2:	d502      	bpl.n	80050aa <HAL_UART_IRQHandler+0x8a>
        UART_Receive_IT(huart);
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7ff ff82 	bl	8004fae <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80050aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 80050ac:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80050ae:	0719      	lsls	r1, r3, #28
 80050b0:	d404      	bmi.n	80050bc <HAL_UART_IRQHandler+0x9c>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80050b6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80050ba:	d019      	beq.n	80050f0 <HAL_UART_IRQHandler+0xd0>
        UART_EndRxTransfer(huart);
 80050bc:	f7ff fe7e 	bl	8004dbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	0652      	lsls	r2, r2, #25
 80050c6:	d50f      	bpl.n	80050e8 <HAL_UART_IRQHandler+0xc8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c8:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80050ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80050d2:	b148      	cbz	r0, 80050e8 <HAL_UART_IRQHandler+0xc8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_UART_IRQHandler+0x154>)
 80050d6:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d8:	f7fd f9f1 	bl	80024be <HAL_DMA_Abort_IT>
 80050dc:	b138      	cbz	r0, 80050ee <HAL_UART_IRQHandler+0xce>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050de:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80050e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80050e6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7ff ff97 	bl	800501c <HAL_UART_ErrorCallback>
}
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80050f0:	f7ff ff94 	bl	800501c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80050f6:	e7fa      	b.n	80050ee <HAL_UART_IRQHandler+0xce>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050f8:	0616      	lsls	r6, r2, #24
 80050fa:	d52b      	bpl.n	8005154 <HAL_UART_IRQHandler+0x134>
 80050fc:	060d      	lsls	r5, r1, #24
 80050fe:	d529      	bpl.n	8005154 <HAL_UART_IRQHandler+0x134>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005100:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8005104:	2a21      	cmp	r2, #33	; 0x21
 8005106:	d1f2      	bne.n	80050ee <HAL_UART_IRQHandler+0xce>
    if(huart->TxXferCount == 0U)
 8005108:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800510c:	b292      	uxth	r2, r2
 800510e:	b942      	cbnz	r2, 8005122 <HAL_UART_IRQHandler+0x102>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005116:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e7e5      	b.n	80050ee <HAL_UART_IRQHandler+0xce>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	68a1      	ldr	r1, [r4, #8]
 8005124:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005126:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800512a:	d10e      	bne.n	800514a <HAL_UART_IRQHandler+0x12a>
 800512c:	6921      	ldr	r1, [r4, #16]
 800512e:	b961      	cbnz	r1, 800514a <HAL_UART_IRQHandler+0x12a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005130:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005134:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005138:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800513a:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 800513c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005140:	3b01      	subs	r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005148:	e7d1      	b.n	80050ee <HAL_UART_IRQHandler+0xce>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800514a:	1c51      	adds	r1, r2, #1
 800514c:	64e1      	str	r1, [r4, #76]	; 0x4c
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	629a      	str	r2, [r3, #40]	; 0x28
 8005152:	e7f3      	b.n	800513c <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005154:	0650      	lsls	r0, r2, #25
 8005156:	d5ca      	bpl.n	80050ee <HAL_UART_IRQHandler+0xce>
 8005158:	064a      	lsls	r2, r1, #25
 800515a:	d5c8      	bpl.n	80050ee <HAL_UART_IRQHandler+0xce>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800515c:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 800515e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005164:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005166:	2320      	movs	r3, #32
 8005168:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800516c:	f7ff ff1e 	bl	8004fac <HAL_UART_TxCpltCallback>
 8005170:	e7bd      	b.n	80050ee <HAL_UART_IRQHandler+0xce>
 8005172:	bf00      	nop
 8005174:	08005179 	.word	0x08005179

08005178 <UART_DMAAbortOnError>:
{
 8005178:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800517a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005182:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8005186:	f7ff ff49 	bl	800501c <HAL_UART_ErrorCallback>
}
 800518a:	bd08      	pop	{r3, pc}

0800518c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800518c:	b538      	push	{r3, r4, r5, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800518e:	69c2      	ldr	r2, [r0, #28]
{
 8005190:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005192:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005194:	6881      	ldr	r1, [r0, #8]
 8005196:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005198:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800519a:	4301      	orrs	r1, r0
 800519c:	6960      	ldr	r0, [r4, #20]
 800519e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80051a0:	488f      	ldr	r0, [pc, #572]	; (80053e0 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a2:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80051a4:	4028      	ands	r0, r5
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80051a6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80051a8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051aa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80051ac:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80051b4:	4301      	orrs	r1, r0
 80051b6:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80051b8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80051ba:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80051bc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80051be:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80051c2:	4301      	orrs	r1, r0
 80051c4:	6099      	str	r1, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c6:	4987      	ldr	r1, [pc, #540]	; (80053e4 <UART_SetConfig+0x258>)
 80051c8:	428b      	cmp	r3, r1
 80051ca:	d119      	bne.n	8005200 <UART_SetConfig+0x74>
 80051cc:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80051d0:	4885      	ldr	r0, [pc, #532]	; (80053e8 <UART_SetConfig+0x25c>)
 80051d2:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80051d6:	f001 0103 	and.w	r1, r1, #3
 80051da:	5c41      	ldrb	r1, [r0, r1]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051e0:	f040 80b5 	bne.w	800534e <UART_SetConfig+0x1c2>
  {
    switch (clocksource)
 80051e4:	2908      	cmp	r1, #8
 80051e6:	f200 80af 	bhi.w	8005348 <UART_SetConfig+0x1bc>
 80051ea:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051ee:	0029      	.short	0x0029
 80051f0:	00e900de 	.word	0x00e900de
 80051f4:	00f500ad 	.word	0x00f500ad
 80051f8:	00ad00ad 	.word	0x00ad00ad
 80051fc:	004400ad 	.word	0x004400ad
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005200:	497a      	ldr	r1, [pc, #488]	; (80053ec <UART_SetConfig+0x260>)
 8005202:	428b      	cmp	r3, r1
 8005204:	d109      	bne.n	800521a <UART_SetConfig+0x8e>
 8005206:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 800520a:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 800520e:	4976      	ldr	r1, [pc, #472]	; (80053e8 <UART_SetConfig+0x25c>)
 8005210:	f000 000c 	and.w	r0, r0, #12
 8005214:	4401      	add	r1, r0
 8005216:	7909      	ldrb	r1, [r1, #4]
 8005218:	e7e0      	b.n	80051dc <UART_SetConfig+0x50>
 800521a:	4975      	ldr	r1, [pc, #468]	; (80053f0 <UART_SetConfig+0x264>)
 800521c:	428b      	cmp	r3, r1
 800521e:	d12f      	bne.n	8005280 <UART_SetConfig+0xf4>
 8005220:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
 8005224:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 8005228:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800522c:	2910      	cmp	r1, #16
 800522e:	f000 80d0 	beq.w	80053d2 <UART_SetConfig+0x246>
 8005232:	d817      	bhi.n	8005264 <UART_SetConfig+0xd8>
 8005234:	2900      	cmp	r1, #0
 8005236:	d158      	bne.n	80052ea <UART_SetConfig+0x15e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005238:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800523c:	f040 8090 	bne.w	8005360 <UART_SetConfig+0x1d4>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005240:	f7fe fd66 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005244:	6861      	ldr	r1, [r4, #4]
 8005246:	084a      	lsrs	r2, r1, #1
 8005248:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800524c:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005250:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005252:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005254:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005258:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800525c:	6821      	ldr	r1, [r4, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8005262:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005264:	2920      	cmp	r1, #32
 8005266:	f000 80a8 	beq.w	80053ba <UART_SetConfig+0x22e>
 800526a:	2930      	cmp	r1, #48	; 0x30
 800526c:	d13d      	bne.n	80052ea <UART_SetConfig+0x15e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005272:	f040 8092 	bne.w	800539a <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005276:	6860      	ldr	r0, [r4, #4]
 8005278:	0843      	lsrs	r3, r0, #1
 800527a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800527e:	e0a5      	b.n	80053cc <UART_SetConfig+0x240>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005280:	495c      	ldr	r1, [pc, #368]	; (80053f4 <UART_SetConfig+0x268>)
 8005282:	428b      	cmp	r3, r1
 8005284:	d10e      	bne.n	80052a4 <UART_SetConfig+0x118>
 8005286:	f501 31f6 	add.w	r1, r1, #125952	; 0x1ec00
 800528a:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 800528e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 8005292:	2940      	cmp	r1, #64	; 0x40
 8005294:	f000 809d 	beq.w	80053d2 <UART_SetConfig+0x246>
 8005298:	d9cc      	bls.n	8005234 <UART_SetConfig+0xa8>
 800529a:	2980      	cmp	r1, #128	; 0x80
 800529c:	f000 808d 	beq.w	80053ba <UART_SetConfig+0x22e>
 80052a0:	29c0      	cmp	r1, #192	; 0xc0
 80052a2:	e7e3      	b.n	800526c <UART_SetConfig+0xe0>
 80052a4:	4954      	ldr	r1, [pc, #336]	; (80053f8 <UART_SetConfig+0x26c>)
 80052a6:	428b      	cmp	r3, r1
 80052a8:	d110      	bne.n	80052cc <UART_SetConfig+0x140>
 80052aa:	f501 31f4 	add.w	r1, r1, #124928	; 0x1e800
 80052ae:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80052b2:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80052b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80052ba:	f000 808a 	beq.w	80053d2 <UART_SetConfig+0x246>
 80052be:	d9b9      	bls.n	8005234 <UART_SetConfig+0xa8>
 80052c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80052c4:	d079      	beq.n	80053ba <UART_SetConfig+0x22e>
 80052c6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80052ca:	e7cf      	b.n	800526c <UART_SetConfig+0xe0>
 80052cc:	494b      	ldr	r1, [pc, #300]	; (80053fc <UART_SetConfig+0x270>)
 80052ce:	428b      	cmp	r3, r1
 80052d0:	d113      	bne.n	80052fa <UART_SetConfig+0x16e>
 80052d2:	f501 3192 	add.w	r1, r1, #74752	; 0x12400
 80052d6:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80052da:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80052de:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052e2:	d076      	beq.n	80053d2 <UART_SetConfig+0x246>
 80052e4:	d803      	bhi.n	80052ee <UART_SetConfig+0x162>
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d05c      	beq.n	80053a4 <UART_SetConfig+0x218>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80052ea:	2110      	movs	r1, #16
 80052ec:	e776      	b.n	80051dc <UART_SetConfig+0x50>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ee:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80052f2:	d062      	beq.n	80053ba <UART_SetConfig+0x22e>
 80052f4:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80052f8:	e7b8      	b.n	800526c <UART_SetConfig+0xe0>
 80052fa:	4941      	ldr	r1, [pc, #260]	; (8005400 <UART_SetConfig+0x274>)
 80052fc:	428b      	cmp	r3, r1
 80052fe:	d10f      	bne.n	8005320 <UART_SetConfig+0x194>
 8005300:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8005304:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 8005308:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 800530c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005310:	d05f      	beq.n	80053d2 <UART_SetConfig+0x246>
 8005312:	d98f      	bls.n	8005234 <UART_SetConfig+0xa8>
 8005314:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005318:	d04f      	beq.n	80053ba <UART_SetConfig+0x22e>
 800531a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800531e:	e7a5      	b.n	800526c <UART_SetConfig+0xe0>
 8005320:	4938      	ldr	r1, [pc, #224]	; (8005404 <UART_SetConfig+0x278>)
 8005322:	428b      	cmp	r3, r1
 8005324:	d144      	bne.n	80053b0 <UART_SetConfig+0x224>
 8005326:	f501 31de 	add.w	r1, r1, #113664	; 0x1bc00
 800532a:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 800532e:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8005332:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005336:	d04c      	beq.n	80053d2 <UART_SetConfig+0x246>
 8005338:	f67f af7c 	bls.w	8005234 <UART_SetConfig+0xa8>
 800533c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005340:	d03b      	beq.n	80053ba <UART_SetConfig+0x22e>
 8005342:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8005346:	e791      	b.n	800526c <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 8005348:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800534a:	2300      	movs	r3, #0
 800534c:	e782      	b.n	8005254 <UART_SetConfig+0xc8>
    switch (clocksource)
 800534e:	2908      	cmp	r1, #8
 8005350:	d831      	bhi.n	80053b6 <UART_SetConfig+0x22a>
 8005352:	e8df f001 	tbb	[pc, r1]
 8005356:	1105      	.short	0x1105
 8005358:	301f3014 	.word	0x301f3014
 800535c:	3030      	.short	0x3030
 800535e:	22          	.byte	0x22
 800535f:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005360:	f7fe fcd6 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005364:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005368:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800536c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005370:	b280      	uxth	r0, r0
 8005372:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005374:	2000      	movs	r0, #0
      break;
 8005376:	e774      	b.n	8005262 <UART_SetConfig+0xd6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005378:	f7fe fcda 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 800537c:	e7f2      	b.n	8005364 <UART_SetConfig+0x1d8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800537e:	6861      	ldr	r1, [r4, #4]
 8005380:	084a      	lsrs	r2, r1, #1
 8005382:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8005386:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800538a:	fbb2 f2f1 	udiv	r2, r2, r1
 800538e:	b292      	uxth	r2, r2
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	e7ef      	b.n	8005374 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005394:	f7fe fbf2 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8005398:	e7e4      	b.n	8005364 <UART_SetConfig+0x1d8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800539a:	6861      	ldr	r1, [r4, #4]
 800539c:	084a      	lsrs	r2, r1, #1
 800539e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80053a2:	e7f2      	b.n	800538a <UART_SetConfig+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053a8:	d1e6      	bne.n	8005378 <UART_SetConfig+0x1ec>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80053aa:	f7fe fcc1 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80053ae:	e749      	b.n	8005244 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053b4:	d0c8      	beq.n	8005348 <UART_SetConfig+0x1bc>
        ret = HAL_ERROR;
 80053b6:	2001      	movs	r0, #1
  return ret;
 80053b8:	e753      	b.n	8005262 <UART_SetConfig+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053be:	d1de      	bne.n	800537e <UART_SetConfig+0x1f2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80053c0:	6860      	ldr	r0, [r4, #4]
 80053c2:	0843      	lsrs	r3, r0, #1
 80053c4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80053c8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80053d0:	e73e      	b.n	8005250 <UART_SetConfig+0xc4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053d6:	d1dd      	bne.n	8005394 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80053d8:	f7fe fbd0 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 80053dc:	e732      	b.n	8005244 <UART_SetConfig+0xb8>
 80053de:	bf00      	nop
 80053e0:	efff69f3 	.word	0xefff69f3
 80053e4:	40011000 	.word	0x40011000
 80053e8:	0801f378 	.word	0x0801f378
 80053ec:	40004400 	.word	0x40004400
 80053f0:	40004800 	.word	0x40004800
 80053f4:	40004c00 	.word	0x40004c00
 80053f8:	40005000 	.word	0x40005000
 80053fc:	40011400 	.word	0x40011400
 8005400:	40007800 	.word	0x40007800
 8005404:	40007c00 	.word	0x40007c00

08005408 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005408:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800540a:	07da      	lsls	r2, r3, #31
{
 800540c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800540e:	d506      	bpl.n	800541e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005410:	6801      	ldr	r1, [r0, #0]
 8005412:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005414:	684a      	ldr	r2, [r1, #4]
 8005416:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800541a:	4322      	orrs	r2, r4
 800541c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541e:	079c      	lsls	r4, r3, #30
 8005420:	d506      	bpl.n	8005430 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005422:	6801      	ldr	r1, [r0, #0]
 8005424:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005426:	684a      	ldr	r2, [r1, #4]
 8005428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800542c:	4322      	orrs	r2, r4
 800542e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005430:	0759      	lsls	r1, r3, #29
 8005432:	d506      	bpl.n	8005442 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005434:	6801      	ldr	r1, [r0, #0]
 8005436:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005438:	684a      	ldr	r2, [r1, #4]
 800543a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800543e:	4322      	orrs	r2, r4
 8005440:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005442:	071a      	lsls	r2, r3, #28
 8005444:	d506      	bpl.n	8005454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005446:	6801      	ldr	r1, [r0, #0]
 8005448:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800544a:	684a      	ldr	r2, [r1, #4]
 800544c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005450:	4322      	orrs	r2, r4
 8005452:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005454:	06dc      	lsls	r4, r3, #27
 8005456:	d506      	bpl.n	8005466 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	6801      	ldr	r1, [r0, #0]
 800545a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800545c:	688a      	ldr	r2, [r1, #8]
 800545e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005462:	4322      	orrs	r2, r4
 8005464:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005466:	0699      	lsls	r1, r3, #26
 8005468:	d506      	bpl.n	8005478 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800546a:	6801      	ldr	r1, [r0, #0]
 800546c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800546e:	688a      	ldr	r2, [r1, #8]
 8005470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005474:	4322      	orrs	r2, r4
 8005476:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005478:	065a      	lsls	r2, r3, #25
 800547a:	d510      	bpl.n	800549e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800547c:	6801      	ldr	r1, [r0, #0]
 800547e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005480:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005482:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005486:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800548a:	ea42 0204 	orr.w	r2, r2, r4
 800548e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005490:	d105      	bne.n	800549e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005492:	684a      	ldr	r2, [r1, #4]
 8005494:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005496:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800549a:	4322      	orrs	r2, r4
 800549c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	d506      	bpl.n	80054b0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80054a6:	6853      	ldr	r3, [r2, #4]
 80054a8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6053      	str	r3, [r2, #4]
  }
}
 80054b0:	bd10      	pop	{r4, pc}

080054b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	2500      	movs	r5, #0
{
 80054b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054ba:	f7fc fe97 	bl	80021ec <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054be:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80054c0:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	0712      	lsls	r2, r2, #28
 80054c6:	d409      	bmi.n	80054dc <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80054c8:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ca:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80054cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80054d0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80054d4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80054d8:	b003      	add	sp, #12
 80054da:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054dc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80054e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054e4:	4620      	mov	r0, r4
 80054e6:	9200      	str	r2, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	f7ff fcd6 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d0ea      	beq.n	80054c8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80054f2:	2003      	movs	r0, #3
 80054f4:	e7f0      	b.n	80054d8 <UART_CheckIdleState+0x26>

080054f6 <HAL_UART_Init>:
{
 80054f6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80054f8:	4604      	mov	r4, r0
 80054fa:	b360      	cbz	r0, 8005556 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80054fc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005500:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005504:	b91b      	cbnz	r3, 800550e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005506:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800550a:	f7ff fc64 	bl	8004dd6 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800550e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005512:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005514:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005520:	f7ff fe34 	bl	800518c <UART_SetConfig>
 8005524:	2801      	cmp	r0, #1
 8005526:	d016      	beq.n	8005556 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	b113      	cbz	r3, 8005532 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800552c:	4620      	mov	r0, r4
 800552e:	f7ff ff6b 	bl	8005408 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005532:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005534:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800553c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005544:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
}
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005550:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005552:	f7ff bfae 	b.w	80054b2 <UART_CheckIdleState>
}
 8005556:	2001      	movs	r0, #1
 8005558:	bd10      	pop	{r4, pc}
	...

0800555c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005562:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8005566:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800556a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800556e:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005572:	6809      	ldr	r1, [r1, #0]
 8005574:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005576:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005578:	2901      	cmp	r1, #1
 800557a:	4912      	ldr	r1, [pc, #72]	; (80055c4 <FMC_SDRAM_Init+0x68>)
 800557c:	d00f      	beq.n	800559e <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800557e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005580:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005582:	432a      	orrs	r2, r5
 8005584:	ea42 0308 	orr.w	r3, r2, r8
 8005588:	ea43 030e 	orr.w	r3, r3, lr
 800558c:	ea43 030c 	orr.w	r3, r3, ip
 8005590:	433b      	orrs	r3, r7
 8005592:	4333      	orrs	r3, r6
 8005594:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005596:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005598:	2000      	movs	r0, #0
 800559a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800559e:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80055a0:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80055a2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80055a6:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055a8:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80055ac:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055ae:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80055b2:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055b4:	ea42 020c 	orr.w	r2, r2, ip
 80055b8:	433a      	orrs	r2, r7
 80055ba:	4332      	orrs	r2, r6
 80055bc:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80055be:	6042      	str	r2, [r0, #4]
 80055c0:	e7ea      	b.n	8005598 <FMC_SDRAM_Init+0x3c>
 80055c2:	bf00      	nop
 80055c4:	ffff8000 	.word	0xffff8000

080055c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80055c8:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80055ca:	2a01      	cmp	r2, #1
{
 80055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ce:	680c      	ldr	r4, [r1, #0]
 80055d0:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 80055d4:	694b      	ldr	r3, [r1, #20]
 80055d6:	688e      	ldr	r6, [r1, #8]
 80055d8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80055dc:	690d      	ldr	r5, [r1, #16]
 80055de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80055e2:	684c      	ldr	r4, [r1, #4]
 80055e4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80055e8:	6989      	ldr	r1, [r1, #24]
 80055ea:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80055ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80055f2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80055f6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80055fa:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80055fe:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8005602:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8005606:	ea4f 6101 	mov.w	r1, r1, lsl #24
 800560a:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 800560e:	d00c      	beq.n	800562a <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005610:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005614:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005616:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005618:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800561c:	4333      	orrs	r3, r6
 800561e:	432b      	orrs	r3, r5
 8005620:	430b      	orrs	r3, r1
 8005622:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005624:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8005626:	2000      	movs	r0, #0
 8005628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800562a:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800562c:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005630:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005634:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005638:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800563c:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800563e:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005640:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005642:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005644:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005648:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800564a:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800564c:	60c2      	str	r2, [r0, #12]
 800564e:	e7ea      	b.n	8005626 <FMC_SDRAM_Timing_Init+0x5e>

08005650 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005650:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 8005654:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005656:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8005658:	68ca      	ldr	r2, [r1, #12]
{
 800565a:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800565c:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800565e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005662:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8005664:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005666:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005668:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800566c:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800566e:	9b01      	ldr	r3, [sp, #4]
 8005670:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8005672:	b002      	add	sp, #8
 8005674:	bd10      	pop	{r4, pc}

08005676 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005676:	6943      	ldr	r3, [r0, #20]
 8005678:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800567c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800567e:	2000      	movs	r0, #0
 8005680:	4770      	bx	lr
	...

08005684 <SCB_CleanInvalidateDCache>:
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <SCB_CleanInvalidateDCache+0x50>)
 8005686:	2300      	movs	r3, #0
{
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800568a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800568e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005692:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005696:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800569a:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800569e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80056a2:	07a5      	lsls	r5, r4, #30
 80056a4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80056a6:	ea03 0c06 	and.w	ip, r3, r6
 80056aa:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80056ac:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80056ae:	ea4c 0700 	orr.w	r7, ip, r0
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 80056b2:	3901      	subs	r1, #1
 80056b4:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80056b8:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways--);
 80056bc:	1c4f      	adds	r7, r1, #1
 80056be:	d1f6      	bne.n	80056ae <SCB_CleanInvalidateDCache+0x2a>
 80056c0:	3b20      	subs	r3, #32
    } while(sets--);
 80056c2:	f113 0f20 	cmn.w	r3, #32
 80056c6:	d1ee      	bne.n	80056a6 <SCB_CleanInvalidateDCache+0x22>
 80056c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80056cc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80056d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d2:	bf00      	nop
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <DMA_TransferError>:
 * @retval None
 */
static void DMA_TransferError(DMA_HandleTypeDef *han)
{

}
 80056d8:	4770      	bx	lr
	...

080056dc <tft_init>:
{
 80056dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(our_disp != NULL)
 80056e0:	4cb1      	ldr	r4, [pc, #708]	; (80059a8 <tft_init+0x2cc>)
{
 80056e2:	b097      	sub	sp, #92	; 0x5c
  if(our_disp != NULL)
 80056e4:	6825      	ldr	r5, [r4, #0]
 80056e6:	b10d      	cbz	r5, 80056ec <tft_init+0x10>
    abort();
 80056e8:	f019 f96f 	bl	801e9ca <abort>
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80056ec:	2328      	movs	r3, #40	; 0x28
 80056ee:	f04f 0809 	mov.w	r8, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80056f2:	2635      	movs	r6, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80056f4:	f240 171b 	movw	r7, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80056f8:	f240 1c1d 	movw	ip, #285	; 0x11d
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80056fc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8005700:	e9c4 3806 	strd	r3, r8, [r4, #24]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005704:	230b      	movs	r3, #11
 8005706:	e9c4 6308 	strd	r6, r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800570a:	f240 2315 	movw	r3, #533	; 0x215
 800570e:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005712:	f240 2335 	movw	r3, #565	; 0x235
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005716:	2708      	movs	r7, #8
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005718:	e9c4 3c0c 	strd	r3, ip, [r4, #48]	; 0x30
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800571c:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800571e:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005722:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005726:	2305      	movs	r3, #5
 8005728:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800572c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005730:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005734:	f7fe fb2a 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005738:	f44f 7388 	mov.w	r3, #272	; 0x110
 800573c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  hLtdcHandler.Instance = LTDC;
 8005740:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005742:	8725      	strh	r5, [r4, #56]	; 0x38
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005744:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005748:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
  hLtdcHandler.Instance = LTDC;
 800574c:	4b97      	ldr	r3, [pc, #604]	; (80059ac <tft_init+0x2d0>)
 800574e:	f840 3f04 	str.w	r3, [r0, #4]!
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005752:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005756:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800575a:	f7fd fd12 	bl	8003182 <HAL_LTDC_GetState>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 808a 	bne.w	8005878 <tft_init+0x19c>
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005764:	4b92      	ldr	r3, [pc, #584]	; (80059b0 <tft_init+0x2d4>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005766:	2502      	movs	r5, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005768:	260e      	movs	r6, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800576a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 800576c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800576e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005772:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005776:	645a      	str	r2, [r3, #68]	; 0x44
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005784:	f042 0210 	orr.w	r2, r2, #16
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
 800578a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578c:	f002 0210 	and.w	r2, r2, #16
 8005790:	9202      	str	r2, [sp, #8]
 8005792:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80057a2:	9203      	str	r2, [sp, #12]
 80057a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
 80057ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80057b4:	9204      	str	r2, [sp, #16]
 80057b6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80057b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
 80057c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80057c6:	9205      	str	r2, [sp, #20]
 80057c8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80057ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
 80057d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80057d8:	9206      	str	r2, [sp, #24]
 80057da:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
 80057e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80057ea:	9207      	str	r2, [sp, #28]
 80057ec:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80057ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80057f8:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80057fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80057fe:	e9cd 050b 	strd	r0, r5, [sp, #44]	; 0x2c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005802:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005804:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005808:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800580a:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800580c:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005810:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005814:	f7fc ff4c 	bl	80026b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005818:	a909      	add	r1, sp, #36	; 0x24
 800581a:	4866      	ldr	r0, [pc, #408]	; (80059b4 <tft_init+0x2d8>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800581c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005820:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005824:	f7fc ff44 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005828:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800582c:	a909      	add	r1, sp, #36	; 0x24
 800582e:	4862      	ldr	r0, [pc, #392]	; (80059b8 <tft_init+0x2dc>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005830:	960d      	str	r6, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005832:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005836:	f7fc ff3b 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800583a:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800583e:	a909      	add	r1, sp, #36	; 0x24
 8005840:	485e      	ldr	r0, [pc, #376]	; (80059bc <tft_init+0x2e0>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005842:	960d      	str	r6, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005844:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8005848:	f7fc ff32 	bl	80026b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800584c:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800584e:	a909      	add	r1, sp, #36	; 0x24
 8005850:	485b      	ldr	r0, [pc, #364]	; (80059c0 <tft_init+0x2e4>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005852:	960d      	str	r6, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005854:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005858:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800585a:	f7fc ff29 	bl	80026b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800585e:	a909      	add	r1, sp, #36	; 0x24
 8005860:	4855      	ldr	r0, [pc, #340]	; (80059b8 <tft_init+0x2dc>)
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005862:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005866:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005868:	f7fc ff22 	bl	80026b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800586c:	a909      	add	r1, sp, #36	; 0x24
 800586e:	4854      	ldr	r0, [pc, #336]	; (80059c0 <tft_init+0x2e4>)
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005870:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005874:	f7fc ff1c 	bl	80026b0 <HAL_GPIO_Init>
  HAL_LTDC_Init(&hLtdcHandler);
 8005878:	4852      	ldr	r0, [pc, #328]	; (80059c4 <tft_init+0x2e8>)
      my_fb[i] = 0;
 800587a:	2500      	movs	r5, #0
  HAL_LTDC_Init(&hLtdcHandler);
 800587c:	f7fd fbe8 	bl	8003050 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005880:	2201      	movs	r2, #1
 8005882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005886:	484c      	ldr	r0, [pc, #304]	; (80059b8 <tft_init+0x2dc>)
 8005888:	f7fd f802 	bl	8002890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800588c:	2201      	movs	r2, #1
 800588e:	2108      	movs	r1, #8
 8005890:	484b      	ldr	r0, [pc, #300]	; (80059c0 <tft_init+0x2e4>)
 8005892:	f7fc fffd 	bl	8002890 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8005896:	f7fc fadf 	bl	8001e58 <BSP_SDRAM_Init>
 800589a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 800589e:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <tft_init+0x2ec>)
      my_fb[i] = 0;
 80058a0:	f823 5b02 	strh.w	r5, [r3], #2
  for(i = 0; i < (TFT_HOR_RES * TFT_VER_RES) ; i++)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d1fb      	bne.n	80058a0 <tft_init+0x1c4>
  layer_cfg.WindowY1 = TFT_VER_RES;
 80058a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80058ac:	2102      	movs	r1, #2
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80058ae:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  layer_cfg.WindowX0 = 0;
 80058b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  layer_cfg.ImageWidth = TFT_HOR_RES;
 80058b6:	9314      	str	r3, [sp, #80]	; 0x50
  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 80058b8:	2604      	movs	r6, #4
  layer_cfg.WindowX0 = 0;
 80058ba:	9509      	str	r5, [sp, #36]	; 0x24
  layer_cfg.ImageHeight = TFT_VER_RES;
 80058bc:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  layer_cfg.WindowY1 = TFT_VER_RES;
 80058c0:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80058c4:	21ff      	movs	r1, #255	; 0xff
  layer_cfg.Backcolor.Green = 0;
 80058c6:	f04f 0300 	mov.w	r3, #0
  layer_cfg.Alpha = 255;
 80058ca:	e9cd 150e 	strd	r1, r5, [sp, #56]	; 0x38
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80058ce:	2107      	movs	r1, #7
  layer_cfg.Backcolor.Green = 0;
 80058d0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80058d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80058d8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80058dc:	4839      	ldr	r0, [pc, #228]	; (80059c4 <tft_init+0x2e8>)
  layer_cfg.WindowX1 = TFT_HOR_RES;
 80058de:	e9cd 250a 	strd	r2, r5, [sp, #40]	; 0x28
  layer_cfg.FBStartAdress = FB_Address;
 80058e2:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, 0);
 80058e6:	2200      	movs	r2, #0
 80058e8:	a909      	add	r1, sp, #36	; 0x24
 80058ea:	f7fd fc21 	bl	8003130 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80058ee:	6862      	ldr	r2, [r4, #4]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80058f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058f4:	4830      	ldr	r0, [pc, #192]	; (80059b8 <tft_init+0x2dc>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80058f6:	6993      	ldr	r3, [r2, #24]
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80058fe:	2201      	movs	r2, #1
 8005900:	f7fc ffc6 	bl	8002890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005904:	2108      	movs	r1, #8
 8005906:	2201      	movs	r2, #1
 8005908:	482d      	ldr	r0, [pc, #180]	; (80059c0 <tft_init+0x2e4>)
 800590a:	f7fc ffc1 	bl	8002890 <HAL_GPIO_WritePin>
  DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 800590e:	2380      	movs	r3, #128	; 0x80
  DmaHandle.Init.Channel = CPY_BUF_DMA_CHANNEL;                   /* DMA_CHANNEL_0                    */
 8005910:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;                /* M2M transfer mode                */
 8005914:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8005918:	f44f 7300 	mov.w	r3, #512	; 0x200
  DmaHandle.Init.Mode = DMA_NORMAL;                               /* Normal DMA mode                  */
 800591c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;                     /* Peripheral increment mode Enable */
 8005920:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 8005924:	f44f 6380 	mov.w	r3, #1024	; 0x400
  DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL; /* FIFO threshold: 1/4 full   */
 8005928:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                        /* Memory increment mode Enable     */
 800592c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 8005930:	f44f 6300 	mov.w	r3, #2048	; 0x800
  DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;                    /* Memory burst                     */
 8005934:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Peripheral data alignment : 16bit */
 8005938:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;      /* memory data alignment : 16bit     */
 800593c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;                 /* Peripheral burst                 */
 8005940:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;      /* memory data alignment : 16bit     */
 8005944:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 8005948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 800594c:	4d1f      	ldr	r5, [pc, #124]	; (80059cc <tft_init+0x2f0>)
  DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;                    /* priority level : high            */
 800594e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <tft_init+0x2f4>)
  if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8005954:	4628      	mov	r0, r5
  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;                  /* FIFO mode enabled                */
 8005956:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
  DmaHandle.Instance = CPY_BUF_DMA_STREAM;
 800595a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  if(HAL_DMA_Init(&DmaHandle) != HAL_OK)
 800595e:	f7fc fcc3 	bl	80022e8 <HAL_DMA_Init>
 8005962:	4601      	mov	r1, r0
 8005964:	b100      	cbz	r0, 8005968 <tft_init+0x28c>
 8005966:	e7fe      	b.n	8005966 <tft_init+0x28a>
  HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, DMA_TransferComplete);
 8005968:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <tft_init+0x2f8>)
 800596a:	4628      	mov	r0, r5
 800596c:	f7fc fe78 	bl	8002660 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, DMA_TransferError);
 8005970:	4628      	mov	r0, r5
  lv_disp_buf_init(&disp_buf_1, buf1_1, buf1_2, LV_HOR_RES_MAX * 68);   /*Initialize the display buffer*/
 8005972:	3560      	adds	r5, #96	; 0x60
  HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, DMA_TransferError);
 8005974:	4631      	mov	r1, r6
 8005976:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <tft_init+0x2fc>)
 8005978:	f7fc fe72 	bl	8002660 <HAL_DMA_RegisterCallback>
  lv_disp_buf_init(&disp_buf_1, buf1_1, buf1_2, LV_HOR_RES_MAX * 68);   /*Initialize the display buffer*/
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <tft_init+0x300>)
 800597e:	4918      	ldr	r1, [pc, #96]	; (80059e0 <tft_init+0x304>)
 8005980:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8005984:	4628      	mov	r0, r5
 8005986:	f00d f831 	bl	80129ec <lv_disp_buf_init>
  lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 800598a:	a809      	add	r0, sp, #36	; 0x24
 800598c:	f00d f80c 	bl	80129a8 <lv_disp_drv_init>
  disp_drv.hor_res = 480;
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <tft_init+0x308>)
  our_disp = lv_disp_drv_register(&disp_drv);
 8005992:	a809      	add	r0, sp, #36	; 0x24
  disp_drv.buffer = &disp_buf_1;
 8005994:	950a      	str	r5, [sp, #40]	; 0x28
  disp_drv.hor_res = 480;
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
  disp_drv.flush_cb = ex_disp_flush;
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <tft_init+0x30c>)
 800599a:	930c      	str	r3, [sp, #48]	; 0x30
  our_disp = lv_disp_drv_register(&disp_drv);
 800599c:	f00d f8ca 	bl	8012b34 <lv_disp_drv_register>
 80059a0:	6020      	str	r0, [r4, #0]
}
 80059a2:	b017      	add	sp, #92	; 0x5c
 80059a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059a8:	200204d8 	.word	0x200204d8
 80059ac:	40016800 	.word	0x40016800
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40021800 	.word	0x40021800
 80059b8:	40022000 	.word	0x40022000
 80059bc:	40022400 	.word	0x40022400
 80059c0:	40022800 	.word	0x40022800
 80059c4:	200204dc 	.word	0x200204dc
 80059c8:	c003fc00 	.word	0xc003fc00
 80059cc:	20020608 	.word	0x20020608
 80059d0:	40026410 	.word	0x40026410
 80059d4:	08005b09 	.word	0x08005b09
 80059d8:	080056d9 	.word	0x080056d9
 80059dc:	2000014c 	.word	0x2000014c
 80059e0:	2001004c 	.word	0x2001004c
 80059e4:	011001e0 	.word	0x011001e0
 80059e8:	08005a49 	.word	0x08005a49

080059ec <HAL_VirtualDMA_Start_IT>:
  dest=(uint16_t *)((uint32_t)my_fb + (uint32_t)(TFT_HOR_RES*TFT_VER_RES*2)-((uint32_t)DstAddress-(uint32_t)my_fb));
 80059ec:	f1c2 4200 	rsb	r2, r2, #2147483648	; 0x80000000
  src=(uint16_t *)SrcAddress;
 80059f0:	f8df c050 	ldr.w	ip, [pc, #80]	; 8005a44 <HAL_VirtualDMA_Start_IT+0x58>
  dest=(uint16_t *)((uint32_t)my_fb + (uint32_t)(TFT_HOR_RES*TFT_VER_RES*2)-((uint32_t)DstAddress-(uint32_t)my_fb));
 80059f4:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
  src=(uint16_t *)SrcAddress;
 80059f8:	f8cc 1000 	str.w	r1, [ip]
 80059fc:	3902      	subs	r1, #2
{
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a00:	4411      	add	r1, r2
  dest--;
 8005a02:	1e94      	subs	r4, r2, #2
 8005a04:	4f0d      	ldr	r7, [pc, #52]	; (8005a3c <HAL_VirtualDMA_Start_IT+0x50>)
  for (i=0; i<DataLength; i++)
 8005a06:	2600      	movs	r6, #0
 8005a08:	4d0d      	ldr	r5, [pc, #52]	; (8005a40 <HAL_VirtualDMA_Start_IT+0x54>)
  dest--;
 8005a0a:	603c      	str	r4, [r7, #0]
  for (i=0; i<DataLength; i++)
 8005a0c:	602e      	str	r6, [r5, #0]
 8005a0e:	f8d5 e000 	ldr.w	lr, [r5]
 8005a12:	1b0a      	subs	r2, r1, r4
 8005a14:	459e      	cmp	lr, r3
 8005a16:	d307      	bcc.n	8005a28 <HAL_VirtualDMA_Start_IT+0x3c>
 8005a18:	b116      	cbz	r6, 8005a20 <HAL_VirtualDMA_Start_IT+0x34>
 8005a1a:	f8cc 2000 	str.w	r2, [ip]
 8005a1e:	603c      	str	r4, [r7, #0]
  hdma->XferCpltCallback(hdma);
 8005a20:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005a22:	4798      	blx	r3
}
 8005a24:	2000      	movs	r0, #0
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *dest-- = *src++;
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	2601      	movs	r6, #1
 8005a2c:	3c02      	subs	r4, #2
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	8062      	strh	r2, [r4, #2]
  for (i=0; i<DataLength; i++)
 8005a32:	682a      	ldr	r2, [r5, #0]
 8005a34:	3201      	adds	r2, #1
 8005a36:	602a      	str	r2, [r5, #0]
 8005a38:	e7e9      	b.n	8005a0e <HAL_VirtualDMA_Start_IT+0x22>
 8005a3a:	bf00      	nop
 8005a3c:	20028bd4 	.word	0x20028bd4
 8005a40:	20028bd8 	.word	0x20028bd8
 8005a44:	20028bdc 	.word	0x20028bdc

08005a48 <ex_disp_flush>:
{
 8005a48:	b570      	push	{r4, r5, r6, lr}
  int32_t x2 = area->x2;
 8005a4a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  if(x2 < 0) return;
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	db52      	blt.n	8005af8 <ex_disp_flush+0xb0>
  int32_t y2 = area->y2;
 8005a52:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
  if(y2 < 0) return;
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	db4e      	blt.n	8005af8 <ex_disp_flush+0xb0>
  int32_t x1 = area->x1;
 8005a5a:	f9b1 0000 	ldrsh.w	r0, [r1]
  if(x1 > TFT_HOR_RES - 1) return;
 8005a5e:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 8005a62:	da49      	bge.n	8005af8 <ex_disp_flush+0xb0>
  int32_t y1 = area->y1;
 8005a64:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  if(y1 > TFT_VER_RES - 1) return;
 8005a68:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8005a6c:	da44      	bge.n	8005af8 <ex_disp_flush+0xb0>
  x1_flush = act_x1;
 8005a6e:	4c23      	ldr	r4, [pc, #140]	; (8005afc <ex_disp_flush+0xb4>)
  x2_flush = act_x2;
 8005a70:	f240 11df 	movw	r1, #479	; 0x1df
  int32_t act_x1 = x1 < 0 ? 0 : x1;
 8005a74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  int32_t act_y1 = y1 < 0 ? 0 : y1;
 8005a78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  x2_flush = act_x2;
 8005a7c:	428e      	cmp	r6, r1
 8005a7e:	bfd4      	ite	le
 8005a80:	f8c4 61b8 	strle.w	r6, [r4, #440]	; 0x1b8
 8005a84:	f8c4 11b8 	strgt.w	r1, [r4, #440]	; 0x1b8
  y2_fill = act_y2;
 8005a88:	f240 110f 	movw	r1, #271	; 0x10f
  x1_flush = act_x1;
 8005a8c:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
  y2_fill = act_y2;
 8005a90:	428d      	cmp	r5, r1
 8005a92:	bfd4      	ite	le
 8005a94:	f8c4 51bc 	strle.w	r5, [r4, #444]	; 0x1bc
 8005a98:	f8c4 11bc 	strgt.w	r1, [r4, #444]	; 0x1bc
  y_fill_act = act_y1;
 8005a9c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  buf_to_flush = color_p;
 8005aa0:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
  SCB_CleanInvalidateDCache();
 8005aa4:	f7ff fdee 	bl	8005684 <SCB_CleanInvalidateDCache>
  __ASM volatile ("dsb 0xF":::"memory");
 8005aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005aac:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <ex_disp_flush+0xb8>)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005abc:	f3bf 8f6f 	isb	sy
  uint32_t length = (x2_flush - x1_flush + 1);
 8005ac0:	f8d4 61b4 	ldr.w	r6, [r4, #436]	; 0x1b4
 8005ac4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8005ac8:	1b9b      	subs	r3, r3, r6
 8005aca:	1c5d      	adds	r5, r3, #1
  if(SCB->CCR & (uint32_t)SCB_CCR_DC_Msk) {
 8005acc:	6953      	ldr	r3, [r2, #20]
 8005ace:	03db      	lsls	r3, r3, #15
 8005ad0:	d501      	bpl.n	8005ad6 <ex_disp_flush+0x8e>
    SCB_CleanInvalidateDCache();
 8005ad2:	f7ff fdd7 	bl	8005684 <SCB_CleanInvalidateDCache>
  err = HAL_VirtualDMA_Start_IT(&DmaHandle,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],length);
 8005ad6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005ada:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 8005ade:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
 8005ae2:	fb03 6202 	mla	r2, r3, r2, r6
 8005ae6:	4807      	ldr	r0, [pc, #28]	; (8005b04 <ex_disp_flush+0xbc>)
 8005ae8:	462b      	mov	r3, r5
 8005aea:	0052      	lsls	r2, r2, #1
 8005aec:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8005af0:	f7ff ff7c 	bl	80059ec <HAL_VirtualDMA_Start_IT>
  if(err != HAL_OK)
 8005af4:	b100      	cbz	r0, 8005af8 <ex_disp_flush+0xb0>
 8005af6:	e7fe      	b.n	8005af6 <ex_disp_flush+0xae>
}
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	bf00      	nop
 8005afc:	200204d8 	.word	0x200204d8
 8005b00:	e000ed00 	.word	0xe000ed00
 8005b04:	20020608 	.word	0x20020608

08005b08 <DMA_TransferComplete>:
{
 8005b08:	b538      	push	{r3, r4, r5, lr}
  y_fill_act ++;
 8005b0a:	4c1a      	ldr	r4, [pc, #104]	; (8005b74 <DMA_TransferComplete+0x6c>)
 8005b0c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
  if(y_fill_act > y2_fill) {
 8005b10:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
  y_fill_act ++;
 8005b14:	3201      	adds	r2, #1
  if(y_fill_act > y2_fill) {
 8005b16:	429a      	cmp	r2, r3
  y_fill_act ++;
 8005b18:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
  if(y_fill_act > y2_fill) {
 8005b1c:	dd12      	ble.n	8005b44 <DMA_TransferComplete+0x3c>
    SCB_CleanInvalidateDCache();
 8005b1e:	f7ff fdb1 	bl	8005684 <SCB_CleanInvalidateDCache>
  __ASM volatile ("dsb 0xF":::"memory");
 8005b22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <DMA_TransferComplete+0x70>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b36:	f3bf 8f6f 	isb	sy
    lv_disp_flush_ready(&our_disp->driver);
 8005b3a:	6820      	ldr	r0, [r4, #0]
}
 8005b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_disp_flush_ready(&our_disp->driver);
 8005b40:	f00c bfbc 	b.w	8012abc <lv_disp_flush_ready>
    uint32_t length = (x2_flush - x1_flush + 1);
 8005b44:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8005b48:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    buf_to_flush += x2_flush - x1_flush + 1;
 8005b4c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
    uint32_t length = (x2_flush - x1_flush + 1);
 8005b50:	1b5b      	subs	r3, r3, r5
    buf_to_flush += x2_flush - x1_flush + 1;
 8005b52:	3301      	adds	r3, #1
 8005b54:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8005b58:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
    if(HAL_VirtualDMA_Start_IT(han,(uint32_t)buf_to_flush, (uint32_t)&my_fb[y_fill_act * TFT_HOR_RES + x1_flush],
 8005b5c:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
 8005b60:	fb04 5202 	mla	r2, r4, r2, r5
 8005b64:	0052      	lsls	r2, r2, #1
 8005b66:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8005b6a:	f7ff ff3f 	bl	80059ec <HAL_VirtualDMA_Start_IT>
 8005b6e:	b100      	cbz	r0, 8005b72 <DMA_TransferComplete+0x6a>
 8005b70:	e7fe      	b.n	8005b70 <DMA_TransferComplete+0x68>
}
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200204d8 	.word	0x200204d8
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <DMA2_Stream0_IRQHandler>:
 * @retval None
 */
void CPY_BUF_DMA_STREAM_IRQHANDLER(void)
{
  /* Check the interrupt and clear flag */
  HAL_DMA_IRQHandler(&DmaHandle);
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <DMA2_Stream0_IRQHandler+0x8>)
 8005b7e:	f7fc bcb1 	b.w	80024e4 <HAL_DMA_IRQHandler>
 8005b82:	bf00      	nop
 8005b84:	20020608 	.word	0x20020608

08005b88 <touchpad_read>:
 * @param x put the x coordinate here
 * @param y put the y coordinate here
 * @return true: the device is pressed, false: released
 */
static bool touchpad_read(lv_indev_drv_t *indev, lv_indev_data_t *data)
{
 8005b88:	b538      	push	{r3, r4, r5, lr}
  /* Read your touchpad */
  static int16_t last_x = 0;
  static int16_t last_y = 0;
  BSP_LED_Toggle(LED1);

  BSP_TS_GetState(&TS_State);
 8005b8a:	4c0d      	ldr	r4, [pc, #52]	; (8005bc0 <touchpad_read+0x38>)
  BSP_LED_Toggle(LED1);
 8005b8c:	2000      	movs	r0, #0
{
 8005b8e:	460d      	mov	r5, r1
  BSP_LED_Toggle(LED1);
 8005b90:	f7fb fa54 	bl	800103c <BSP_LED_Toggle>
  BSP_TS_GetState(&TS_State);
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7fc fa41 	bl	800201c <BSP_TS_GetState>
  if(TS_State.touchDetected) {
 8005b9a:	7823      	ldrb	r3, [r4, #0]
 8005b9c:	b15b      	cbz	r3, 8005bb6 <touchpad_read+0x2e>
    data->point.x = TS_State.touchX[0];
    data->point.y = TS_State.touchY[0];
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    data->point.x = TS_State.touchX[0];
 8005ba2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    /* Rotation of screen */
    //data->point.x = TFT_HOR_RES - data->point.x;
    //data->point.y = TFT_VER_RES - data->point.y;

    last_x = data->point.x;
    last_y = data->point.y;
 8005ba6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    data->point.y = TS_State.touchY[0];
 8005ba8:	806b      	strh	r3, [r5, #2]
    data->state = LV_INDEV_STATE_PR;
 8005baa:	2301      	movs	r3, #1
    data->point.x = TS_State.touchX[0];
 8005bac:	802a      	strh	r2, [r5, #0]
    last_x = data->point.x;
 8005bae:	85a2      	strh	r2, [r4, #44]	; 0x2c
  } else {
    data->point.x = last_x;
    data->point.y = last_y;
    data->state = LV_INDEV_STATE_REL;
 8005bb0:	73ab      	strb	r3, [r5, #14]
  }

  return false;   /*false: no more data to read because we are no buffering*/
}
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
    data->point.x = last_x;
 8005bb6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005bb8:	802a      	strh	r2, [r5, #0]
    data->point.y = last_y;
 8005bba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8005bbc:	806a      	strh	r2, [r5, #2]
 8005bbe:	e7f7      	b.n	8005bb0 <touchpad_read+0x28>
 8005bc0:	200206a0 	.word	0x200206a0

08005bc4 <touchpad_init>:
{
 8005bc4:	b500      	push	{lr}
 8005bc6:	b089      	sub	sp, #36	; 0x24
  BSP_TS_Init(TFT_HOR_RES, TFT_VER_RES);
 8005bc8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005bcc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005bd0:	f7fc f9d8 	bl	8001f84 <BSP_TS_Init>
  lv_indev_drv_init(&indev_drv);                  /*Basic initialization*/
 8005bd4:	a801      	add	r0, sp, #4
 8005bd6:	f00d f82d 	bl	8012c34 <lv_indev_drv_init>
  indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 8005bda:	2301      	movs	r3, #1
  lv_indev_drv_register(&indev_drv);
 8005bdc:	a801      	add	r0, sp, #4
  indev_drv.type = LV_INDEV_TYPE_POINTER;         /*The touchpad is pointer type device*/
 8005bde:	f88d 3004 	strb.w	r3, [sp, #4]
  indev_drv.read_cb = touchpad_read;
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <touchpad_init+0x2c>)
 8005be4:	9302      	str	r3, [sp, #8]
  lv_indev_drv_register(&indev_drv);
 8005be6:	f00d f835 	bl	8012c54 <lv_indev_drv_register>
}
 8005bea:	b009      	add	sp, #36	; 0x24
 8005bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bf0:	08005b89 	.word	0x08005b89

08005bf4 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8005bf4:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
 8005bf6:	f00c ff07 	bl	8012a08 <lv_disp_get_default>
}
 8005bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
 8005bfe:	f000 ba3b 	b.w	8006078 <lv_disp_get_scr_act>
	...

08005c04 <HAL_GPIO_EXTI_Callback>:
{                                                     
  static uint32_t debounce_time = 0;                   
  static volatile uint32_t counter_mag=0;              
  static volatile uint32_t counter_acc_gyro=0;         
                                                       
  switch (GPIO_Pin)                                    
 8005c04:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{                                                     
 8005c08:	4601      	mov	r1, r0
 8005c0a:	b510      	push	{r4, lr}
  switch (GPIO_Pin)                                    
 8005c0c:	d022      	beq.n	8005c54 <HAL_GPIO_EXTI_Callback+0x50>
 8005c0e:	d802      	bhi.n	8005c16 <HAL_GPIO_EXTI_Callback+0x12>
 8005c10:	2840      	cmp	r0, #64	; 0x40
 8005c12:	d01a      	beq.n	8005c4a <HAL_GPIO_EXTI_Callback+0x46>
                                                       
      default:                                             
        /* Unknown interrupt */                             
        break;                                             
    }                                                    
}                                                     
 8005c14:	bd10      	pop	{r4, pc}
  switch (GPIO_Pin)                                    
 8005c16:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005c1a:	d00b      	beq.n	8005c34 <HAL_GPIO_EXTI_Callback+0x30>
 8005c1c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005c20:	d1f8      	bne.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
        if (HAL_GPIO_ReadPin(TS_INT_GPIO_PORT, TS_INT_PIN)) 
 8005c22:	480f      	ldr	r0, [pc, #60]	; (8005c60 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005c24:	f7fc fe2e 	bl	8002884 <HAL_GPIO_ReadPin>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d0f3      	beq.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
}                                                     
 8005c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            BSP_TS_ITClear();                                  
 8005c30:	f7fc bab2 	b.w	8002198 <BSP_TS_ITClear>
        if ((HAL_GetTick() - debounce_time) > 50)           
 8005c34:	4c0b      	ldr	r4, [pc, #44]	; (8005c64 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c36:	f7fc fad9 	bl	80021ec <HAL_GetTick>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	1ac0      	subs	r0, r0, r3
 8005c3e:	2832      	cmp	r0, #50	; 0x32
 8005c40:	d9e8      	bls.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
            debounce_time = HAL_GetTick();                     
 8005c42:	f7fc fad3 	bl	80021ec <HAL_GetTick>
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	e7e4      	b.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
        counter_mag++;                                      
 8005c4a:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c4c:	6853      	ldr	r3, [r2, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	6053      	str	r3, [r2, #4]
        break;                                              
 8005c52:	e7df      	b.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
        counter_acc_gyro++;                                 
 8005c54:	4a03      	ldr	r2, [pc, #12]	; (8005c64 <HAL_GPIO_EXTI_Callback+0x60>)
 8005c56:	6893      	ldr	r3, [r2, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	6093      	str	r3, [r2, #8]
        break;                                              
 8005c5c:	e7da      	b.n	8005c14 <HAL_GPIO_EXTI_Callback+0x10>
 8005c5e:	bf00      	nop
 8005c60:	40022000 	.word	0x40022000
 8005c64:	200206d0 	.word	0x200206d0

08005c68 <MAIN_SystemInit>:
 * @brief  Fault Manager Enable.
 * @param  None
 * @retval None
 */
void MAIN_SystemInit(void)              
{   
 8005c68:	b508      	push	{r3, lr}
  /* Init standard IO serial link */            
  BSP_STDIO_Init();                             
 8005c6a:	f7fc f963 	bl	8001f34 <BSP_STDIO_Init>
                                                
  /* Init led1 */                               
  BSP_LED_Init(LED1);                           
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f7fb f9c0 	bl	8000ff4 <BSP_LED_Init>
                                                
  /* Configure the User Button in GPIO Mode */  
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);    
 8005c74:	2100      	movs	r1, #0
 8005c76:	2002      	movs	r0, #2
 8005c78:	f7fb f9e8 	bl	800104c <BSP_PB_Init>
                 
  /* Init External SRAM */
  BSP_SDRAM_Init();
 8005c7c:	f7fc f8ec 	bl	8001e58 <BSP_SDRAM_Init>
  
  /* Init QSPI */                               
  BSP_QSPI_Init();                              
 8005c80:	f7fb ff22 	bl	8001ac8 <BSP_QSPI_Init>
  BSP_QSPI_EnableMemoryMappedMode();            
 8005c84:	f7fb fe66 	bl	8001954 <BSP_QSPI_EnableMemoryMappedMode>
                                                
  /* Init Keys */                               
  BSP_KEYS_Init();                              
 8005c88:	f7fb fc16 	bl	80014b8 <BSP_KEYS_Init>
                                                
  /* Init magnetic sensor */                    
  BSP_MAG_Init();                               
 8005c8c:	f7fb fcd0 	bl	8001630 <BSP_MAG_Init>
                                                
  /* Init accelerometer and gyroscope sensor */ 
  BSP_ACC_GYRO_Init();                          
 8005c90:	f7fb fb38 	bl	8001304 <BSP_ACC_GYRO_Init>
                                                
  /* Init pressure sensor */                    
  BSP_PRESSURE_Init();                                                                                            
 8005c94:	f7fb fda4 	bl	80017e0 <BSP_PRESSURE_Init>
                                                
  /* Init RNG */                                
  BSP_RNG_InitGenerator();
}
 8005c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_RNG_InitGenerator();
 8005c9c:	f7fb bfae 	b.w	8001bfc <BSP_RNG_InitGenerator>

08005ca0 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8005ca0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8005ca6:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ca8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005caa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005cac:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cae:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cb0:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cb8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005cbc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005cc0:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005cc4:	2308      	movs	r3, #8

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005cc6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005cc8:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005cca:	f7fd fdc3 	bl	8003854 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8005cce:	b100      	cbz	r0, 8005cd2 <SystemClock_Config+0x32>
 8005cd0:	e7fe      	b.n	8005cd0 <SystemClock_Config+0x30>
    {
      while(1) { ; }
    }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8005cd2:	f7fd fa59 	bl	8003188 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 8005cd6:	b100      	cbz	r0, 8005cda <SystemClock_Config+0x3a>
 8005cd8:	e7fe      	b.n	8005cd8 <SystemClock_Config+0x38>
    {
      while(1) { ; }
    }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005cda:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005cdc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ce0:	9003      	str	r0, [sp, #12]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005ce2:	2105      	movs	r1, #5
 8005ce4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ce6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005cf2:	f7fd ff71 	bl	8003bd8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8005cf6:	b100      	cbz	r0, 8005cfa <SystemClock_Config+0x5a>
 8005cf8:	e7fe      	b.n	8005cf8 <SystemClock_Config+0x58>
    {
      while(1) { ; }
    }
}
 8005cfa:	b012      	add	sp, #72	; 0x48
 8005cfc:	bd10      	pop	{r4, pc}
	...

08005d00 <SYSTEM_ShowSystemVersion>:
  
  SYSTEM_ShowSystemVersion(BL_MAJOR_VERSION, BL_MINOR_VERSION);
}

void SYSTEM_ShowSystemVersion(int MajV, int MinV)
{
 8005d00:	b510      	push	{r4, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
  char str[30];
  sprintf (str, "System ver. %d.%d", BL_MAJOR_VERSION, BL_MINOR_VERSION);
 8005d04:	2302      	movs	r3, #2
 8005d06:	2203      	movs	r2, #3
 8005d08:	491f      	ldr	r1, [pc, #124]	; (8005d88 <SYSTEM_ShowSystemVersion+0x88>)
 8005d0a:	a802      	add	r0, sp, #8
 8005d0c:	f018 feec 	bl	801eae8 <siprintf>
  
  LV_IMG_DECLARE(logo);
  
  lv_obj_t *label1 = lv_label_create(lv_scr_act(),NULL);
 8005d10:	f7ff ff70 	bl	8005bf4 <lv_scr_act>
 8005d14:	2100      	movs	r1, #0
 8005d16:	f017 fc23 	bl	801d560 <lv_label_create>
 8005d1a:	4604      	mov	r4, r0
    lv_label_set_text(label1, str);
 8005d1c:	a902      	add	r1, sp, #8
 8005d1e:	f017 fb29 	bl	801d374 <lv_label_set_text>
  lv_obj_set_width(label1, 150);  /*Set smaller width to make the lines wrap*/
 8005d22:	4620      	mov	r0, r4
 8005d24:	2196      	movs	r1, #150	; 0x96
 8005d26:	f002 fe29 	bl	800897c <lv_obj_set_width>
  lv_label_set_align(label1, LV_LABEL_ALIGN_CENTER);
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	f016 fd9d 	bl	801c86c <lv_label_set_align>
  lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 80);
 8005d32:	2350      	movs	r3, #80	; 0x50
 8005d34:	4620      	mov	r0, r4
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f002 fa49 	bl	80081d4 <lv_obj_align>

  lv_obj_t *img = lv_img_create(lv_scr_act(),NULL);
 8005d42:	f7ff ff57 	bl	8005bf4 <lv_scr_act>
 8005d46:	2100      	movs	r1, #0
 8005d48:	f016 faf4 	bl	801c334 <lv_img_create>
  lv_img_set_src(img, &logo);
 8005d4c:	490f      	ldr	r1, [pc, #60]	; (8005d8c <SYSTEM_ShowSystemVersion+0x8c>)
  lv_obj_t *img = lv_img_create(lv_scr_act(),NULL);
 8005d4e:	4604      	mov	r4, r0
  lv_img_set_src(img, &logo);
 8005d50:	f016 fa22 	bl	801c198 <lv_img_set_src>
  lv_obj_align(img, NULL, LV_ALIGN_CENTER, 0, -30);
 8005d54:	f06f 031d 	mvn.w	r3, #29
 8005d58:	4620      	mov	r0, r4
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4619      	mov	r1, r3
 8005d62:	f002 fa37 	bl	80081d4 <lv_obj_align>
  
  lv_task_handler();
 8005d66:	f00e fde9 	bl	801493c <lv_task_handler>
  HAL_Delay(2000);
 8005d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d6e:	f7fc fa43 	bl	80021f8 <HAL_Delay>
  
  lv_obj_clean(lv_scr_act()); 
 8005d72:	f7ff ff3f 	bl	8005bf4 <lv_scr_act>
 8005d76:	f003 fcf5 	bl	8009764 <lv_obj_clean>
  lv_task_handler(); 
 8005d7a:	f00e fddf 	bl	801493c <lv_task_handler>
  HAL_Delay(200);
 8005d7e:	20c8      	movs	r0, #200	; 0xc8
 8005d80:	f7fc fa3a 	bl	80021f8 <HAL_Delay>
}
 8005d84:	b00a      	add	sp, #40	; 0x28
 8005d86:	bd10      	pop	{r4, pc}
 8005d88:	0802c334 	.word	0x0802c334
 8005d8c:	080229f0 	.word	0x080229f0

08005d90 <init_bsp>:
{
 8005d90:	b508      	push	{r3, lr}
  Pipo();
 8005d92:	f000 f848 	bl	8005e26 <Pipo>
  SystemClock_Config();
 8005d96:	f7ff ff83 	bl	8005ca0 <SystemClock_Config>
  HAL_Init();
 8005d9a:	f7fc fa05 	bl	80021a8 <HAL_Init>
  MAIN_SystemInit();
 8005d9e:	f7ff ff63 	bl	8005c68 <MAIN_SystemInit>
  lv_init();
 8005da2:	f001 fd7b 	bl	800789c <lv_init>
  tft_init();
 8005da6:	f7ff fc99 	bl	80056dc <tft_init>
  touchpad_init();
 8005daa:	f7ff ff0b 	bl	8005bc4 <touchpad_init>
  WRAPPER_Init();
 8005dae:	f018 fc53 	bl	801e658 <WRAPPER_Init>
  lv_obj_clean(lv_scr_act()); 
 8005db2:	f7ff ff1f 	bl	8005bf4 <lv_scr_act>
 8005db6:	f003 fcd5 	bl	8009764 <lv_obj_clean>
  lv_task_handler();
 8005dba:	f00e fdbf 	bl	801493c <lv_task_handler>
  HAL_Delay(200);
 8005dbe:	20c8      	movs	r0, #200	; 0xc8
 8005dc0:	f7fc fa1a 	bl	80021f8 <HAL_Delay>
  SYSTEM_ShowSystemVersion(BL_MAJOR_VERSION, BL_MINOR_VERSION);
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	2003      	movs	r0, #3
}
 8005dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SYSTEM_ShowSystemVersion(BL_MAJOR_VERSION, BL_MINOR_VERSION);
 8005dcc:	f7ff bf98 	b.w	8005d00 <SYSTEM_ShowSystemVersion>

08005dd0 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8005dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RNG_HandleTypeDef RNG_Handle;

	RNG_Handle.State = HAL_RNG_STATE_READY;
 8005dd2:	2301      	movs	r3, #1
	HAL_RNG_MspInit(&RNG_Handle);
 8005dd4:	a801      	add	r0, sp, #4
	RNG_Handle.State = HAL_RNG_STATE_READY;
 8005dd6:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_RNG_MspInit(&RNG_Handle);
 8005dda:	f7fb ff17 	bl	8001c0c <HAL_RNG_MspInit>
}
 8005dde:	b005      	add	sp, #20
 8005de0:	f85d fb04 	ldr.w	pc, [sp], #4

08005de4 <NMI_Handler>:
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
	asm ("MOV		R0, #0\n\t"
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	4669      	mov	r1, sp
 8005dea:	f018 bc0d 	b.w	801e608 <PANIC_ReadStack>
 8005dee:	e7fe      	b.n	8005dee <NMI_Handler+0xa>

08005df0 <HardFault_Handler>:
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
	asm ("MOV		R0, #1\n\t"
 8005df0:	f04f 0001 	mov.w	r0, #1
 8005df4:	4669      	mov	r1, sp
 8005df6:	f018 bc07 	b.w	801e608 <PANIC_ReadStack>
 8005dfa:	e7fe      	b.n	8005dfa <HardFault_Handler+0xa>

08005dfc <MemManage_Handler>:
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
	asm ("MOV		R0, #2\n\t"
 8005dfc:	f04f 0002 	mov.w	r0, #2
 8005e00:	4669      	mov	r1, sp
 8005e02:	f018 bc01 	b.w	801e608 <PANIC_ReadStack>
 8005e06:	e7fe      	b.n	8005e06 <MemManage_Handler+0xa>

08005e08 <BusFault_Handler>:
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
	asm ("MOV		R0, #3\n\t"
 8005e08:	f04f 0003 	mov.w	r0, #3
 8005e0c:	4669      	mov	r1, sp
 8005e0e:	f018 bbfb 	b.w	801e608 <PANIC_ReadStack>
 8005e12:	e7fe      	b.n	8005e12 <BusFault_Handler+0xa>

08005e14 <UsageFault_Handler>:
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
	asm ("MOV		R0, #4\n\t"
 8005e14:	f04f 0004 	mov.w	r0, #4
 8005e18:	4669      	mov	r1, sp
 8005e1a:	f018 bbf5 	b.w	801e608 <PANIC_ReadStack>
 8005e1e:	e7fe      	b.n	8005e1e <UsageFault_Handler+0xa>

08005e20 <DebugMon_Handler>:
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
}
 8005e20:	4770      	bx	lr

08005e22 <SysTick_Handler>:
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
	HAL_IncTick();
 8005e22:	f7fc b9d7 	b.w	80021d4 <HAL_IncTick>

08005e26 <Pipo>:
 8005e26:	4770      	bx	lr

08005e28 <EXTI0_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8005e28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e2c:	f7fc bd3a 	b.w	80028a4 <HAL_GPIO_EXTI_IRQHandler>

08005e30 <EXTI2_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI2_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005e30:	2004      	movs	r0, #4
 8005e32:	f7fc bd37 	b.w	80028a4 <HAL_GPIO_EXTI_IRQHandler>
	...

08005e38 <EXTI9_5_IRQHandler>:
 * @retval None
 */
void EXTI9_5_IRQHandler(void)
{
	/* Interrupt handler shared between ACC GYRo DRDY and MAG DRDY interrupt */
	if (__HAL_GPIO_EXTI_GET_IT(ACC_GYRO_DRDY_PIN ) != RESET)
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <EXTI9_5_IRQHandler+0x14>)
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	05db      	lsls	r3, r3, #23
	{
		HAL_GPIO_EXTI_IRQHandler(ACC_GYRO_DRDY_PIN );   /* SD detect event or touch screen interrupt */
 8005e3e:	bf4c      	ite	mi
 8005e40:	f44f 7080 	movmi.w	r0, #256	; 0x100
	}
	else
	{     /* User button event or Touch screen interrupt */
		HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_PIN);
 8005e44:	2040      	movpl	r0, #64	; 0x40
 8005e46:	f7fc bd2d 	b.w	80028a4 <HAL_GPIO_EXTI_IRQHandler>
 8005e4a:	bf00      	nop
 8005e4c:	40013c00 	.word	0x40013c00

08005e50 <EXTI15_10_IRQHandler>:
 * @retval None
 */
void EXTI15_10_IRQHandler(void)
{
	/* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
	if (__HAL_GPIO_EXTI_GET_IT(KEY_BUTTON_PIN) == RESET)
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <EXTI15_10_IRQHandler+0x14>)
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	051b      	lsls	r3, r3, #20
	{
		HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8005e56:	bf54      	ite	pl
 8005e58:	f44f 4020 	movpl.w	r0, #40960	; 0xa000
	}
	else
	{     /* User button event or Touch screen interrupt */
		HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8005e5c:	f44f 6000 	movmi.w	r0, #2048	; 0x800
 8005e60:	f7fc bd20 	b.w	80028a4 <HAL_GPIO_EXTI_IRQHandler>
 8005e64:	40013c00 	.word	0x40013c00

08005e68 <DMA2_Stream7_IRQHandler>:
 * @param None
 * @retval None
 */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <DMA2_Stream7_IRQHandler+0x8>)
 8005e6a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005e6c:	f7fc bb3a 	b.w	80024e4 <HAL_DMA_IRQHandler>
 8005e70:	200200dc 	.word	0x200200dc

08005e74 <DMA2_Stream4_IRQHandler>:
 * @param  None
 * @retval None
 */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005e74:	4b01      	ldr	r3, [pc, #4]	; (8005e7c <DMA2_Stream4_IRQHandler+0x8>)
 8005e76:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005e78:	f7fc bb34 	b.w	80024e4 <HAL_DMA_IRQHandler>
 8005e7c:	20020058 	.word	0x20020058

08005e80 <USART1_IRQHandler>:
 * @param  None
 * @retval None
 */
void USART1_IRQHandler(void)
{
	BSP_STDIO_IRQHandler();
 8005e80:	f7fc b82a 	b.w	8001ed8 <BSP_STDIO_IRQHandler>

08005e84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e84:	4a67      	ldr	r2, [pc, #412]	; (8006024 <SystemInit+0x1a0>)
  /* Enable GPIOC, GPIOD, GPIOE, GPIOF, GPIOG and GPIOH interface 
  clock */
  RCC->AHB1ENR |= 0x000000FC;
  
  /* Connect PCx pins to FMC Alternate function */
  GPIOC->AFR[0]  = 0x0000C000;
 8005e86:	f44f 4040 	mov.w	r0, #49152	; 0xc000
{
 8005e8a:	b082      	sub	sp, #8
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005e98:	4b63      	ldr	r3, [pc, #396]	; (8006028 <SystemInit+0x1a4>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005ea6:	6819      	ldr	r1, [r3, #0]
 8005ea8:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8005eac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005eb0:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005eb2:	495e      	ldr	r1, [pc, #376]	; (800602c <SystemInit+0x1a8>)
 8005eb4:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005eb6:	6819      	ldr	r1, [r3, #0]
 8005eb8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005ebc:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8005ebe:	60da      	str	r2, [r3, #12]
  RCC->AHB1ENR |= 0x000000FC;
 8005ec0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ec2:	f041 01fc 	orr.w	r1, r1, #252	; 0xfc
 8005ec6:	6319      	str	r1, [r3, #48]	; 0x30
  GPIOC->AFR[0]  = 0x0000C000;
 8005ec8:	4959      	ldr	r1, [pc, #356]	; (8006030 <SystemInit+0x1ac>)
 8005eca:	6208      	str	r0, [r1, #32]
  GPIOC->AFR[1]  = 0x00000000;
  /* Configure PCx pins in Alternate function mode */ 
  GPIOC->MODER   = 0x00000080;
 8005ecc:	2080      	movs	r0, #128	; 0x80
  GPIOC->AFR[1]  = 0x00000000;
 8005ece:	624a      	str	r2, [r1, #36]	; 0x24
  GPIOC->MODER   = 0x00000080;
 8005ed0:	6008      	str	r0, [r1, #0]
  /* Configure PCx pins speed to 50 MHz */
  GPIOC->OSPEEDR = 0x00000080;
 8005ed2:	6088      	str	r0, [r1, #8]
  /* Configure PCx pins Output type to push-pull */
  GPIOC->OTYPER  = 0x00000000;
  /* No pull-up, pull-down for PCx pins */
  GPIOC->PUPDR   = 0x00000040;
 8005ed4:	2040      	movs	r0, #64	; 0x40
  GPIOC->OTYPER  = 0x00000000;
 8005ed6:	604a      	str	r2, [r1, #4]
  GPIOC->PUPDR   = 0x00000040;
 8005ed8:	60c8      	str	r0, [r1, #12]
  
  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0]  = 0x000000CC;
 8005eda:	20cc      	movs	r0, #204	; 0xcc
 8005edc:	f8c1 0420 	str.w	r0, [r1, #1056]	; 0x420
  GPIOD->AFR[1]  = 0xCC000CCC;
 8005ee0:	4854      	ldr	r0, [pc, #336]	; (8006034 <SystemInit+0x1b0>)
 8005ee2:	f8c1 0424 	str.w	r0, [r1, #1060]	; 0x424
  /* Configure PDx pins in Alternate function mode */ 
  GPIOD->MODER   = 0xA02A000A;
 8005ee6:	4854      	ldr	r0, [pc, #336]	; (8006038 <SystemInit+0x1b4>)
 8005ee8:	f8c1 0400 	str.w	r0, [r1, #1024]	; 0x400
  /* Configure PDx pins speed to 50 MHz */
  GPIOD->OSPEEDR = 0xA02A000A;
 8005eec:	f8c1 0408 	str.w	r0, [r1, #1032]	; 0x408
  /* Configure PDx pins Output type to push-pull */
  GPIOD->OTYPER  = 0x00000000;
  /* No pull-up, pull-down for PDx pins */ 
  GPIOD->PUPDR   = 0x50150005;
 8005ef0:	4852      	ldr	r0, [pc, #328]	; (800603c <SystemInit+0x1b8>)
  GPIOD->OTYPER  = 0x00000000;
 8005ef2:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
  GPIOD->PUPDR   = 0x50150005;
 8005ef6:	f8c1 040c 	str.w	r0, [r1, #1036]	; 0x40c
  
  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0]  = 0xC00000CC;
 8005efa:	4851      	ldr	r0, [pc, #324]	; (8006040 <SystemInit+0x1bc>)
 8005efc:	f8c1 0820 	str.w	r0, [r1, #2080]	; 0x820
  GPIOE->AFR[1]  = 0xCCCCCCCC;
 8005f00:	f04f 30cc 	mov.w	r0, #3435973836	; 0xcccccccc
 8005f04:	f8c1 0824 	str.w	r0, [r1, #2084]	; 0x824
  /* Configure PEx pins in Alternate function mode */ 
  GPIOE->MODER   = 0xAAAA800A;
 8005f08:	484e      	ldr	r0, [pc, #312]	; (8006044 <SystemInit+0x1c0>)
 8005f0a:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
  /* Configure PEx pins speed to 50 MHz */
  GPIOE->OSPEEDR = 0xAAAA800A;
 8005f0e:	f8c1 0808 	str.w	r0, [r1, #2056]	; 0x808
  /* Configure PEx pins Output type to push-pull */
  GPIOE->OTYPER  = 0x00000000;
  /* No pull-up, pull-down for PEx pins */ 
  GPIOE->PUPDR   = 0x55554005;
 8005f12:	484d      	ldr	r0, [pc, #308]	; (8006048 <SystemInit+0x1c4>)
  GPIOE->OTYPER  = 0x00000000;
 8005f14:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
  GPIOE->PUPDR   = 0x55554005;
 8005f18:	f8c1 080c 	str.w	r0, [r1, #2060]	; 0x80c
  
  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0]  = 0x00CCCCCC;
 8005f1c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005f20:	484a      	ldr	r0, [pc, #296]	; (800604c <SystemInit+0x1c8>)
 8005f22:	6208      	str	r0, [r1, #32]
  GPIOF->AFR[1]  = 0xCCCCC000;
 8005f24:	484a      	ldr	r0, [pc, #296]	; (8006050 <SystemInit+0x1cc>)
 8005f26:	6248      	str	r0, [r1, #36]	; 0x24
  /* Configure PFx pins in Alternate function mode */ 
  GPIOF->MODER   = 0xAA800AAA;
 8005f28:	484a      	ldr	r0, [pc, #296]	; (8006054 <SystemInit+0x1d0>)
 8005f2a:	6008      	str	r0, [r1, #0]
  /* Configure PFx pins speed to 50 MHz */
  GPIOF->OSPEEDR = 0xAA800AAA;
 8005f2c:	6088      	str	r0, [r1, #8]
  /* Configure PFx pins Output type to push-pull */
  GPIOF->OTYPER  = 0x00000000;
  /* No pull-up, pull-down for PFx pins */ 
  GPIOF->PUPDR   = 0x55400555;
 8005f2e:	484a      	ldr	r0, [pc, #296]	; (8006058 <SystemInit+0x1d4>)
  GPIOF->OTYPER  = 0x00000000;
 8005f30:	604a      	str	r2, [r1, #4]
  GPIOF->PUPDR   = 0x55400555;
 8005f32:	60c8      	str	r0, [r1, #12]
  
  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0]  = 0x00CC00CC;
 8005f34:	f04f 10cc 	mov.w	r0, #13369548	; 0xcc00cc
 8005f38:	f8c1 0420 	str.w	r0, [r1, #1056]	; 0x420
  GPIOG->AFR[1]  = 0xC000000C;
 8005f3c:	4847      	ldr	r0, [pc, #284]	; (800605c <SystemInit+0x1d8>)
 8005f3e:	f8c1 0424 	str.w	r0, [r1, #1060]	; 0x424
  /* Configure PGx pins in Alternate function mode */ 
  GPIOG->MODER   = 0x80020A0A;
 8005f42:	4847      	ldr	r0, [pc, #284]	; (8006060 <SystemInit+0x1dc>)
 8005f44:	f8c1 0400 	str.w	r0, [r1, #1024]	; 0x400
  /* Configure PGx pins speed to 50 MHz */
  GPIOG->OSPEEDR = 0x80020A0A;
 8005f48:	f8c1 0408 	str.w	r0, [r1, #1032]	; 0x408
  /* Configure PGx pins Output type to push-pull */
  GPIOG->OTYPER  = 0x00000000;
  /* No pull-up, pull-down for PGx pins */ 
  GPIOG->PUPDR   = 0x40010505;
 8005f4c:	4845      	ldr	r0, [pc, #276]	; (8006064 <SystemInit+0x1e0>)
  GPIOG->OTYPER  = 0x00000000;
 8005f4e:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
  GPIOG->PUPDR   = 0x40010505;
 8005f52:	f8c1 040c 	str.w	r0, [r1, #1036]	; 0x40c
  
  /* Connect PHx pins to FMC Alternate function */
  GPIOH->AFR[0]  = 0x00C0C000;
 8005f56:	4844      	ldr	r0, [pc, #272]	; (8006068 <SystemInit+0x1e4>)
 8005f58:	f8c1 0820 	str.w	r0, [r1, #2080]	; 0x820
  GPIOH->AFR[1]  = 0x00000000;
  /* Configure PHx pins in Alternate function mode */ 
  GPIOH->MODER   = 0x00000880;
 8005f5c:	f44f 6008 	mov.w	r0, #2176	; 0x880
  GPIOH->AFR[1]  = 0x00000000;
 8005f60:	f8c1 2824 	str.w	r2, [r1, #2084]	; 0x824
  GPIOH->MODER   = 0x00000880;
 8005f64:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
  /* Configure PHx pins speed to 50 MHz */
  GPIOH->OSPEEDR = 0x00000880;
 8005f68:	f8c1 0808 	str.w	r0, [r1, #2056]	; 0x808
  /* Configure PHx pins Output type to push-pull */
  GPIOH->OTYPER  = 0x00000000;
 8005f6c:	f8c1 2804 	str.w	r2, [r1, #2052]	; 0x804
  /* No pull-up, pull-down for PHx pins */ 
  GPIOH->PUPDR   = 0x00000440;
 8005f70:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8005f74:	f8c1 280c 	str.w	r2, [r1, #2060]	; 0x80c
  FMC_Bank5_6->SDTR[0]  = 0x01115351;
  
  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6->SDCMR = 0x00000011; 
  tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 8005f78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC->AHB3ENR |= 0x00000001;
 8005f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
  FMC_Bank5_6->SDCR[0]  = 0x00001954;
 8005f84:	f641 1354 	movw	r3, #6484	; 0x1954
 8005f88:	4a38      	ldr	r2, [pc, #224]	; (800606c <SystemInit+0x1e8>)
 8005f8a:	6013      	str	r3, [r2, #0]
  FMC_Bank5_6->SDTR[0]  = 0x01115351;
 8005f8c:	4b38      	ldr	r3, [pc, #224]	; (8006070 <SystemInit+0x1ec>)
 8005f8e:	6093      	str	r3, [r2, #8]
  FMC_Bank5_6->SDCMR = 0x00000011; 
 8005f90:	2311      	movs	r3, #17
 8005f92:	6113      	str	r3, [r2, #16]
  tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 8005f94:	6993      	ldr	r3, [r2, #24]
 8005f96:	f003 0320 	and.w	r3, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 8005f9a:	b10b      	cbz	r3, 8005fa0 <SystemInit+0x11c>
 8005f9c:	3901      	subs	r1, #1
 8005f9e:	d12d      	bne.n	8005ffc <SystemInit+0x178>
  {
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
  }

  /* Delay */
  for (index = 0; index<1000; index++);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	9201      	str	r2, [sp, #4]
 8005fa4:	9a01      	ldr	r2, [sp, #4]
 8005fa6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005faa:	d32b      	bcc.n	8006004 <SystemInit+0x180>
  
  /* PALL command */
  FMC_Bank5_6->SDCMR = 0x00000012;           
 8005fac:	2112      	movs	r1, #18
 8005fae:	4a2f      	ldr	r2, [pc, #188]	; (800606c <SystemInit+0x1e8>)
 8005fb0:	6111      	str	r1, [r2, #16]
 8005fb2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  timeout = 0xFFFF;
  while((tmpreg != 0) && (timeout-- > 0))
 8005fb6:	b10b      	cbz	r3, 8005fbc <SystemInit+0x138>
 8005fb8:	3901      	subs	r1, #1
 8005fba:	d126      	bne.n	800600a <SystemInit+0x186>
  {
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
  }
  
  /* Auto refresh command */
  FMC_Bank5_6->SDCMR = 0x000000F3;
 8005fbc:	21f3      	movs	r1, #243	; 0xf3
 8005fbe:	6111      	str	r1, [r2, #16]
 8005fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005fc4:	4929      	ldr	r1, [pc, #164]	; (800606c <SystemInit+0x1e8>)
  timeout = 0xFFFF;
  while((tmpreg != 0) && (timeout-- > 0))
 8005fc6:	b10b      	cbz	r3, 8005fcc <SystemInit+0x148>
 8005fc8:	3a01      	subs	r2, #1
 8005fca:	d122      	bne.n	8006012 <SystemInit+0x18e>
  {
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
  }
 
  /* MRD register program */
  FMC_Bank5_6->SDCMR = 0x00044014;
 8005fcc:	4a29      	ldr	r2, [pc, #164]	; (8006074 <SystemInit+0x1f0>)
 8005fce:	610a      	str	r2, [r1, #16]
 8005fd0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005fd4:	4a25      	ldr	r2, [pc, #148]	; (800606c <SystemInit+0x1e8>)
  timeout = 0xFFFF;
  while((tmpreg != 0) && (timeout-- > 0))
 8005fd6:	b10b      	cbz	r3, 8005fdc <SystemInit+0x158>
 8005fd8:	3901      	subs	r1, #1
 8005fda:	d11e      	bne.n	800601a <SystemInit+0x196>
  {
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
  } 
  
  /* Set refresh count */
  tmpreg = FMC_Bank5_6->SDRTR;
 8005fdc:	6953      	ldr	r3, [r2, #20]
  FMC_Bank5_6->SDRTR = (tmpreg | (0x0000050C<<1));
 8005fde:	f443 6321 	orr.w	r3, r3, #2576	; 0xa10
 8005fe2:	f043 0308 	orr.w	r3, r3, #8
 8005fe6:	6153      	str	r3, [r2, #20]
  
  /* Disable write protection */
  tmpreg = FMC_Bank5_6->SDCR[0]; 
 8005fe8:	6813      	ldr	r3, [r2, #0]
  FMC_Bank5_6->SDCR[0] = (tmpreg & 0xFFFFFDFF);
 8005fea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fee:	6013      	str	r3, [r2, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ff0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <SystemInit+0x1a0>)
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	b002      	add	sp, #8
 8005ffa:	4770      	bx	lr
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 8005ffc:	6993      	ldr	r3, [r2, #24]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	e7ca      	b.n	8005f9a <SystemInit+0x116>
  for (index = 0; index<1000; index++);
 8006004:	9a01      	ldr	r2, [sp, #4]
 8006006:	3201      	adds	r2, #1
 8006008:	e7cb      	b.n	8005fa2 <SystemInit+0x11e>
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 800600a:	6993      	ldr	r3, [r2, #24]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	e7d1      	b.n	8005fb6 <SystemInit+0x132>
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 8006012:	698b      	ldr	r3, [r1, #24]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	e7d5      	b.n	8005fc6 <SystemInit+0x142>
    tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
 800601a:	6993      	ldr	r3, [r2, #24]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	e7d9      	b.n	8005fd6 <SystemInit+0x152>
 8006022:	bf00      	nop
 8006024:	e000ed00 	.word	0xe000ed00
 8006028:	40023800 	.word	0x40023800
 800602c:	24003010 	.word	0x24003010
 8006030:	40020800 	.word	0x40020800
 8006034:	cc000ccc 	.word	0xcc000ccc
 8006038:	a02a000a 	.word	0xa02a000a
 800603c:	50150005 	.word	0x50150005
 8006040:	c00000cc 	.word	0xc00000cc
 8006044:	aaaa800a 	.word	0xaaaa800a
 8006048:	55554005 	.word	0x55554005
 800604c:	00cccccc 	.word	0x00cccccc
 8006050:	ccccc000 	.word	0xccccc000
 8006054:	aa800aaa 	.word	0xaa800aaa
 8006058:	55400555 	.word	0x55400555
 800605c:	c000000c 	.word	0xc000000c
 8006060:	80020a0a 	.word	0x80020a0a
 8006064:	40010505 	.word	0x40010505
 8006068:	00c0c000 	.word	0x00c0c000
 800606c:	a0000140 	.word	0xa0000140
 8006070:	01115351 	.word	0x01115351
 8006074:	00044014 	.word	0x00044014

08006078 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8006078:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800607a:	b910      	cbnz	r0, 8006082 <lv_disp_get_scr_act+0xa>
 800607c:	f00c fcc4 	bl	8012a08 <lv_disp_get_default>
    if(!disp) {
 8006080:	b100      	cbz	r0, 8006084 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8006082:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8006084:	bd08      	pop	{r3, pc}

08006086 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8006086:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8006088:	b910      	cbnz	r0, 8006090 <lv_disp_get_scr_prev+0xa>
 800608a:	f00c fcbd 	bl	8012a08 <lv_disp_get_default>
    if(!disp) {
 800608e:	b100      	cbz	r0, 8006092 <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8006090:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8006092:	bd08      	pop	{r3, pc}

08006094 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8006094:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8006096:	b910      	cbnz	r0, 800609e <lv_disp_get_layer_top+0xa>
 8006098:	f00c fcb6 	bl	8012a08 <lv_disp_get_default>
    if(!disp) {
 800609c:	b100      	cbz	r0, 80060a0 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800609e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 80060a0:	bd08      	pop	{r3, pc}

080060a2 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80060a2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80060a4:	b910      	cbnz	r0, 80060ac <lv_disp_get_layer_sys+0xa>
 80060a6:	f00c fcaf 	bl	8012a08 <lv_disp_get_default>
    if(!disp) {
 80060aa:	b100      	cbz	r0, 80060ae <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 80060ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80060ae:	bd08      	pop	{r3, pc}

080060b0 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 80060b0:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 80060b2:	2400      	movs	r4, #0
    while(i != NULL) {
 80060b4:	b928      	cbnz	r0, 80060c2 <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 80060b6:	b16c      	cbz	r4, 80060d4 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 80060b8:	4620      	mov	r0, r4
    }
}
 80060ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 80060be:	f001 bfa5 	b.w	800800c <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 80060c2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80060c6:	f013 0f20 	tst.w	r3, #32
 80060ca:	bf18      	it	ne
 80060cc:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 80060ce:	f001 fd5d 	bl	8007b8c <lv_obj_get_parent>
 80060d2:	e7ef      	b.n	80060b4 <obj_to_foreground+0x4>
}
 80060d4:	bd10      	pop	{r4, pc}

080060d6 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80060d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	4689      	mov	r9, r1
 80060de:	4692      	mov	sl, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 80060e0:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
 80060e2:	f04f 0801 	mov.w	r8, #1
    lv_obj_t ** obj_sentinel = NULL;
 80060e6:	2700      	movs	r7, #0
        if(obj_next == NULL) {
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	d159      	bne.n	80061a0 <focus_next_core.part.0+0xca>
            if(group->wrap || obj_sentinel == NULL) {
 80060ec:	7d23      	ldrb	r3, [r4, #20]
 80060ee:	06da      	lsls	r2, r3, #27
 80060f0:	d403      	bmi.n	80060fa <focus_next_core.part.0+0x24>
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d05f      	beq.n	80061b6 <focus_next_core.part.0+0xe0>
}
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 80060fa:	f1b8 0f00 	cmp.w	r8, #0
 80060fe:	d0fa      	beq.n	80060f6 <focus_next_core.part.0+0x20>
                obj_next  = begin(&group->obj_ll);
 8006100:	4620      	mov	r0, r4
 8006102:	47c8      	blx	r9
 8006104:	4606      	mov	r6, r0
        if(obj_sentinel == NULL) {
 8006106:	2f00      	cmp	r7, #0
 8006108:	d142      	bne.n	8006190 <focus_next_core.part.0+0xba>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800610a:	2e00      	cmp	r6, #0
 800610c:	d0f3      	beq.n	80060f6 <focus_next_core.part.0+0x20>
 800610e:	4635      	mov	r5, r6
                can_begin = false;
 8006110:	f04f 0800 	mov.w	r8, #0
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8006114:	2100      	movs	r1, #0
 8006116:	6828      	ldr	r0, [r5, #0]
 8006118:	f002 fc70 	bl	80089fc <lv_obj_get_state>
 800611c:	0683      	lsls	r3, r0, #26
 800611e:	d43d      	bmi.n	800619c <focus_next_core.part.0+0xc6>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8006120:	6828      	ldr	r0, [r5, #0]
 8006122:	f001 feb3 	bl	8007e8c <lv_obj_get_hidden>
 8006126:	4607      	mov	r7, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d137      	bne.n	800619c <focus_next_core.part.0+0xc6>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800612c:	68e3      	ldr	r3, [r4, #12]
 800612e:	42ab      	cmp	r3, r5
 8006130:	d0e1      	beq.n	80060f6 <focus_next_core.part.0+0x20>
    if(group->obj_focus) {
 8006132:	b183      	cbz	r3, 8006156 <focus_next_core.part.0+0x80>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	463a      	mov	r2, r7
 8006138:	2117      	movs	r1, #23
 800613a:	69c3      	ldr	r3, [r0, #28]
 800613c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	463a      	mov	r2, r7
 8006142:	210e      	movs	r1, #14
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f001 fcb5 	bl	8007ab4 <lv_event_send>
        if(res != LV_RES_OK) return;
 800614a:	2801      	cmp	r0, #1
 800614c:	d1d3      	bne.n	80060f6 <focus_next_core.part.0+0x20>
        lv_obj_invalidate(*group->obj_focus);
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f001 ff2b 	bl	8007fac <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8006156:	6828      	ldr	r0, [r5, #0]
 8006158:	2200      	movs	r2, #0
 800615a:	2116      	movs	r1, #22
    group->obj_focus = obj_next;
 800615c:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800615e:	69c3      	ldr	r3, [r0, #28]
 8006160:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8006162:	68e3      	ldr	r3, [r4, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	210d      	movs	r1, #13
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f001 fca3 	bl	8007ab4 <lv_event_send>
    if(res != LV_RES_OK) return;
 800616e:	2801      	cmp	r0, #1
 8006170:	d1c1      	bne.n	80060f6 <focus_next_core.part.0+0x20>
    obj_to_foreground(*group->obj_focus);
 8006172:	68e3      	ldr	r3, [r4, #12]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	f7ff ff9b 	bl	80060b0 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f001 ff15 	bl	8007fac <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0b6      	beq.n	80060f6 <focus_next_core.part.0+0x20>
 8006188:	4620      	mov	r0, r4
}
 800618a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 800618e:	4718      	bx	r3
                obj_next  = begin(&group->obj_ll);
 8006190:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8006192:	463e      	mov	r6, r7
                can_begin = false;
 8006194:	f04f 0800 	mov.w	r8, #0
        if(obj_next == NULL) continue;
 8006198:	2d00      	cmp	r5, #0
 800619a:	d1bb      	bne.n	8006114 <focus_next_core.part.0+0x3e>
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800619c:	4637      	mov	r7, r6
 800619e:	e7a3      	b.n	80060e8 <focus_next_core.part.0+0x12>
        if(obj_sentinel == NULL) {
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	bf14      	ite	ne
 80061a4:	463e      	movne	r6, r7
 80061a6:	462e      	moveq	r6, r5
            obj_next = move(&group->obj_ll, obj_next);
 80061a8:	4629      	mov	r1, r5
 80061aa:	4620      	mov	r0, r4
 80061ac:	47d0      	blx	sl
            if(obj_next == obj_sentinel) return;
 80061ae:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 80061b0:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 80061b2:	d1f1      	bne.n	8006198 <focus_next_core.part.0+0xc2>
 80061b4:	e79f      	b.n	80060f6 <focus_next_core.part.0+0x20>
                if(!can_begin) return;
 80061b6:	f1b8 0f00 	cmp.w	r8, #0
 80061ba:	d09c      	beq.n	80060f6 <focus_next_core.part.0+0x20>
                obj_next  = begin(&group->obj_ll);
 80061bc:	4620      	mov	r0, r4
 80061be:	47c8      	blx	r9
 80061c0:	4606      	mov	r6, r0
 80061c2:	e7a2      	b.n	800610a <focus_next_core.part.0+0x34>

080061c4 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80061c4:	2118      	movs	r1, #24
 80061c6:	4801      	ldr	r0, [pc, #4]	; (80061cc <_lv_group_init+0x8>)
 80061c8:	f00d bb05 	b.w	80137d6 <_lv_ll_init>
 80061cc:	20028d50 	.word	0x20028d50

080061d0 <lv_group_focus_next>:
    if(group->frozen) return;
 80061d0:	7d03      	ldrb	r3, [r0, #20]
 80061d2:	07db      	lsls	r3, r3, #31
 80061d4:	d403      	bmi.n	80061de <lv_group_focus_next+0xe>
 80061d6:	4a02      	ldr	r2, [pc, #8]	; (80061e0 <lv_group_focus_next+0x10>)
 80061d8:	4902      	ldr	r1, [pc, #8]	; (80061e4 <lv_group_focus_next+0x14>)
 80061da:	f7ff bf7c 	b.w	80060d6 <focus_next_core.part.0>
}
 80061de:	4770      	bx	lr
 80061e0:	08013861 	.word	0x08013861
 80061e4:	08013855 	.word	0x08013855

080061e8 <lv_group_focus_prev>:
    if(group->frozen) return;
 80061e8:	7d03      	ldrb	r3, [r0, #20]
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d403      	bmi.n	80061f6 <lv_group_focus_prev+0xe>
 80061ee:	4a02      	ldr	r2, [pc, #8]	; (80061f8 <lv_group_focus_prev+0x10>)
 80061f0:	4902      	ldr	r1, [pc, #8]	; (80061fc <lv_group_focus_prev+0x14>)
 80061f2:	f7ff bf70 	b.w	80060d6 <focus_next_core.part.0>
}
 80061f6:	4770      	bx	lr
 80061f8:	0801386b 	.word	0x0801386b
 80061fc:	0801385b 	.word	0x0801385b

08006200 <lv_group_refocus>:
{
 8006200:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8006202:	7d03      	ldrb	r3, [r0, #20]
{
 8006204:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8006206:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 800620a:	f043 0310 	orr.w	r3, r3, #16
 800620e:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8006210:	071b      	lsls	r3, r3, #28
 8006212:	d406      	bmi.n	8006222 <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8006214:	f7ff ffdc 	bl	80061d0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8006218:	7d23      	ldrb	r3, [r4, #20]
 800621a:	f365 1304 	bfi	r3, r5, #4, #1
 800621e:	7523      	strb	r3, [r4, #20]
}
 8006220:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8006222:	f7ff ffe1 	bl	80061e8 <lv_group_focus_prev>
 8006226:	e7f7      	b.n	8006218 <lv_group_refocus+0x18>

08006228 <lv_group_add_obj>:
{
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	460c      	mov	r4, r1
    if(group == NULL) return;
 800622c:	4605      	mov	r5, r0
 800622e:	b368      	cbz	r0, 800628c <lv_group_add_obj+0x64>
    _LV_LL_READ(group->obj_ll, obj_i) {
 8006230:	f00d fb10 	bl	8013854 <_lv_ll_get_head>
 8006234:	b9b0      	cbnz	r0, 8006264 <lv_group_add_obj+0x3c>
    if(obj->group_p) {
 8006236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006238:	b133      	cbz	r3, 8006248 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 800623a:	4620      	mov	r0, r4
 800623c:	f003 faa8 	bl	8009790 <lv_obj_is_focused>
 8006240:	b110      	cbz	r0, 8006248 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8006242:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006244:	f7ff ffdc 	bl	8006200 <lv_group_refocus>
    obj->group_p     = group;
 8006248:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800624a:	4628      	mov	r0, r5
 800624c:	f00d fae6 	bl	801381c <_lv_ll_ins_tail>
 8006250:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
 8006252:	f00d f9d1 	bl	80135f8 <lv_debug_check_null>
 8006256:	4603      	mov	r3, r0
 8006258:	b960      	cbnz	r0, 8006274 <lv_group_add_obj+0x4c>
 800625a:	4632      	mov	r2, r6
 800625c:	480c      	ldr	r0, [pc, #48]	; (8006290 <lv_group_add_obj+0x68>)
 800625e:	f00d f9cf 	bl	8013600 <lv_debug_log_error>
 8006262:	e7fe      	b.n	8006262 <lv_group_add_obj+0x3a>
        if((*obj_i) == obj) {
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	42a3      	cmp	r3, r4
 8006268:	d010      	beq.n	800628c <lv_group_add_obj+0x64>
    _LV_LL_READ(group->obj_ll, obj_i) {
 800626a:	4601      	mov	r1, r0
 800626c:	4628      	mov	r0, r5
 800626e:	f00d faf7 	bl	8013860 <_lv_ll_get_next>
 8006272:	e7df      	b.n	8006234 <lv_group_add_obj+0xc>
    if(next == NULL) return;
 8006274:	b156      	cbz	r6, 800628c <lv_group_add_obj+0x64>
    *next = obj;
 8006276:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8006278:	4628      	mov	r0, r5
 800627a:	f00d faeb 	bl	8013854 <_lv_ll_get_head>
 800627e:	4286      	cmp	r6, r0
 8006280:	d104      	bne.n	800628c <lv_group_add_obj+0x64>
        lv_group_refocus(group);
 8006282:	4628      	mov	r0, r5
}
 8006284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8006288:	f7ff bfba 	b.w	8006200 <lv_group_refocus>
}
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	bf00      	nop
 8006290:	0802c346 	.word	0x0802c346

08006294 <lv_group_remove_obj>:
{
 8006294:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8006296:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 8006298:	4606      	mov	r6, r0
    if(g == NULL) return;
 800629a:	2c00      	cmp	r4, #0
 800629c:	d031      	beq.n	8006302 <lv_group_remove_obj+0x6e>
    if(*g->obj_focus == obj) {
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4283      	cmp	r3, r0
 80062a4:	d116      	bne.n	80062d4 <lv_group_remove_obj+0x40>
        if(g->frozen) g->frozen = 0;
 80062a6:	7d23      	ldrb	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80062a8:	4620      	mov	r0, r4
        if(g->frozen) g->frozen = 0;
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	bf44      	itt	mi
 80062ae:	f36f 0300 	bfcmi	r3, #0, #1
 80062b2:	7523      	strbmi	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80062b4:	f00d face 	bl	8013854 <_lv_ll_get_head>
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	4283      	cmp	r3, r0
 80062bc:	d122      	bne.n	8006304 <lv_group_remove_obj+0x70>
 80062be:	4620      	mov	r0, r4
 80062c0:	f00d facb 	bl	801385a <_lv_ll_get_tail>
 80062c4:	68e3      	ldr	r3, [r4, #12]
 80062c6:	4298      	cmp	r0, r3
 80062c8:	d11c      	bne.n	8006304 <lv_group_remove_obj+0x70>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	2200      	movs	r2, #0
 80062ce:	2117      	movs	r1, #23
 80062d0:	69c3      	ldr	r3, [r0, #28]
 80062d2:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 80062d4:	68e3      	ldr	r3, [r4, #12]
    _LV_LL_READ(g->obj_ll, i) {
 80062d6:	4620      	mov	r0, r4
    if(*g->obj_focus == obj) {
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 80062dc:	bf04      	itt	eq
 80062de:	2300      	moveq	r3, #0
 80062e0:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(g->obj_ll, i) {
 80062e2:	f00d fab7 	bl	8013854 <_lv_ll_get_head>
 80062e6:	4605      	mov	r5, r0
 80062e8:	b158      	cbz	r0, 8006302 <lv_group_remove_obj+0x6e>
        if(*i == obj) {
 80062ea:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 80062ec:	4629      	mov	r1, r5
 80062ee:	4620      	mov	r0, r4
        if(*i == obj) {
 80062f0:	42b3      	cmp	r3, r6
 80062f2:	d10b      	bne.n	800630c <lv_group_remove_obj+0x78>
            _lv_ll_remove(&g->obj_ll, i);
 80062f4:	f00d faeb 	bl	80138ce <_lv_ll_remove>
            lv_mem_free(i);
 80062f8:	4628      	mov	r0, r5
 80062fa:	f00d fc73 	bl	8013be4 <lv_mem_free>
            obj->group_p = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8006302:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff ff7b 	bl	8006200 <lv_group_refocus>
 800630a:	e7e3      	b.n	80062d4 <lv_group_remove_obj+0x40>
    _LV_LL_READ(g->obj_ll, i) {
 800630c:	f00d faa8 	bl	8013860 <_lv_ll_get_next>
 8006310:	e7e9      	b.n	80062e6 <lv_group_remove_obj+0x52>

08006312 <lv_group_get_focused>:
    if(!group) return NULL;
 8006312:	b110      	cbz	r0, 800631a <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8006314:	68c0      	ldr	r0, [r0, #12]
 8006316:	b100      	cbz	r0, 800631a <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8006318:	6800      	ldr	r0, [r0, #0]
}
 800631a:	4770      	bx	lr

0800631c <lv_group_send_data>:
{
 800631c:	b513      	push	{r0, r1, r4, lr}
 800631e:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8006320:	f7ff fff7 	bl	8006312 <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8006324:	4604      	mov	r4, r0
 8006326:	b160      	cbz	r0, 8006342 <lv_group_send_data+0x26>
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8006328:	69c3      	ldr	r3, [r0, #28]
 800632a:	aa01      	add	r2, sp, #4
 800632c:	2118      	movs	r1, #24
 800632e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8006330:	2801      	cmp	r0, #1
 8006332:	d104      	bne.n	800633e <lv_group_send_data+0x22>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8006334:	aa01      	add	r2, sp, #4
 8006336:	210c      	movs	r1, #12
 8006338:	4620      	mov	r0, r4
 800633a:	f001 fbbb 	bl	8007ab4 <lv_event_send>
}
 800633e:	b002      	add	sp, #8
 8006340:	bd10      	pop	{r4, pc}
    if(act == NULL) return LV_RES_OK;
 8006342:	2001      	movs	r0, #1
 8006344:	e7fb      	b.n	800633e <lv_group_send_data+0x22>

08006346 <lv_group_set_editing>:
{
 8006346:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 8006348:	4604      	mov	r4, r0
 800634a:	b1e0      	cbz	r0, 8006386 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800634c:	7d03      	ldrb	r3, [r0, #20]
 800634e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8006352:	428a      	cmp	r2, r1
 8006354:	d017      	beq.n	8006386 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 8006356:	f361 0341 	bfi	r3, r1, #1, #1
 800635a:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
 800635c:	f7ff ffd9 	bl	8006312 <lv_group_get_focused>
    if(focused) {
 8006360:	4605      	mov	r5, r0
 8006362:	b180      	cbz	r0, 8006386 <lv_group_set_editing+0x40>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8006364:	69c3      	ldr	r3, [r0, #28]
 8006366:	2200      	movs	r2, #0
 8006368:	2116      	movs	r1, #22
 800636a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800636c:	68e3      	ldr	r3, [r4, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	210d      	movs	r1, #13
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	f001 fb9e 	bl	8007ab4 <lv_event_send>
        if(res != LV_RES_OK) return;
 8006378:	2801      	cmp	r0, #1
 800637a:	d104      	bne.n	8006386 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 800637c:	4628      	mov	r0, r5
}
 800637e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 8006382:	f001 be13 	b.w	8007fac <lv_obj_invalidate>
}
 8006386:	bd38      	pop	{r3, r4, r5, pc}

08006388 <lv_group_focus_obj>:
{
 8006388:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 800638a:	4606      	mov	r6, r0
 800638c:	b190      	cbz	r0, 80063b4 <lv_group_focus_obj+0x2c>
    lv_group_t * g = obj->group_p;
 800638e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    if(g == NULL) return;
 8006390:	b184      	cbz	r4, 80063b4 <lv_group_focus_obj+0x2c>
    if(g->frozen != 0) return;
 8006392:	7d23      	ldrb	r3, [r4, #20]
 8006394:	07db      	lsls	r3, r3, #31
 8006396:	d40d      	bmi.n	80063b4 <lv_group_focus_obj+0x2c>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8006398:	68e3      	ldr	r3, [r4, #12]
 800639a:	b113      	cbz	r3, 80063a2 <lv_group_focus_obj+0x1a>
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4283      	cmp	r3, r0
 80063a0:	d008      	beq.n	80063b4 <lv_group_focus_obj+0x2c>
    lv_group_set_editing(g, false);
 80063a2:	4620      	mov	r0, r4
 80063a4:	2100      	movs	r1, #0
 80063a6:	f7ff ffce 	bl	8006346 <lv_group_set_editing>
    _LV_LL_READ(g->obj_ll, i) {
 80063aa:	4620      	mov	r0, r4
 80063ac:	f00d fa52 	bl	8013854 <_lv_ll_get_head>
 80063b0:	4605      	mov	r5, r0
 80063b2:	b900      	cbnz	r0, 80063b6 <lv_group_focus_obj+0x2e>
}
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	42b3      	cmp	r3, r6
 80063ba:	d12e      	bne.n	800641a <lv_group_focus_obj+0x92>
            if(g->obj_focus != NULL) {
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	b183      	cbz	r3, 80063e2 <lv_group_focus_obj+0x5a>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2117      	movs	r1, #23
 80063c6:	69c3      	ldr	r3, [r0, #28]
 80063c8:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	210e      	movs	r1, #14
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f001 fb6f 	bl	8007ab4 <lv_event_send>
                if(res != LV_RES_OK) return;
 80063d6:	2801      	cmp	r0, #1
 80063d8:	d1ec      	bne.n	80063b4 <lv_group_focus_obj+0x2c>
                lv_obj_invalidate(*g->obj_focus);
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f001 fde5 	bl	8007fac <lv_obj_invalidate>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80063e2:	6828      	ldr	r0, [r5, #0]
 80063e4:	2200      	movs	r2, #0
            g->obj_focus = i;
 80063e6:	60e5      	str	r5, [r4, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80063e8:	2116      	movs	r1, #22
 80063ea:	69c3      	ldr	r3, [r0, #28]
 80063ec:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b10b      	cbz	r3, 80063f6 <lv_group_focus_obj+0x6e>
 80063f2:	4620      	mov	r0, r4
 80063f4:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	210d      	movs	r1, #13
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f001 fb59 	bl	8007ab4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8006402:	2801      	cmp	r0, #1
 8006404:	d1d6      	bne.n	80063b4 <lv_group_focus_obj+0x2c>
                lv_obj_invalidate(*g->obj_focus);
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f001 fdcf 	bl	8007fac <lv_obj_invalidate>
                obj_to_foreground(*g->obj_focus);
 800640e:	68e3      	ldr	r3, [r4, #12]
}
 8006410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                obj_to_foreground(*g->obj_focus);
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f7ff be4b 	b.w	80060b0 <obj_to_foreground>
    _LV_LL_READ(g->obj_ll, i) {
 800641a:	4629      	mov	r1, r5
 800641c:	4620      	mov	r0, r4
 800641e:	f00d fa1f 	bl	8013860 <_lv_ll_get_next>
 8006422:	e7c5      	b.n	80063b0 <lv_group_focus_obj+0x28>

08006424 <lv_group_get_editing>:
    if(!group) return false;
 8006424:	b110      	cbz	r0, 800642c <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 8006426:	7d00      	ldrb	r0, [r0, #20]
 8006428:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800642c:	4770      	bx	lr
	...

08006430 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 8006430:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8006434:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    }

    return proc->reset_query ? true : false;
}
 8006436:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
 800643a:	bf42      	ittt	mi
 800643c:	4b01      	ldrmi	r3, [pc, #4]	; (8006444 <indev_reset_check+0x14>)
 800643e:	2200      	movmi	r2, #0
 8006440:	601a      	strmi	r2, [r3, #0]
}
 8006442:	4770      	bx	lr
 8006444:	200206dc 	.word	0x200206dc

08006448 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8006448:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800644c:	0793      	lsls	r3, r2, #30
{
 800644e:	b510      	push	{r4, lr}
    if(indev->proc.reset_query) {
 8006450:	d51b      	bpl.n	800648a <indev_proc_reset_query_handler+0x42>
        indev->proc.pr_timestamp                    = 0;
 8006452:	2300      	movs	r3, #0
        indev->proc.types.pointer.drag_limit_out    = 0;
 8006454:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.reset_query                     = 0;
 8006458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800645c:	2403      	movs	r4, #3
 800645e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8006462:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.reset_query                     = 0;
 8006466:	f363 0241 	bfi	r2, r3, #1, #1
        indev->proc.types.pointer.gesture_sum.y     = 0;
 800646a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800646e:	f364 0184 	bfi	r1, r4, #2, #3
        indev->proc.reset_query                     = 0;
 8006472:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
 8006476:	4a05      	ldr	r2, [pc, #20]	; (800648c <indev_proc_reset_query_handler+0x44>)
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8006478:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev_obj_act                               = NULL;
 800647c:	6013      	str	r3, [r2, #0]
        indev->proc.longpr_rep_timestamp            = 0;
 800647e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
        indev->proc.types.pointer.drag_sum.y        = 0;
 8006482:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.act_obj           = NULL;
 8006486:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
}
 800648a:	bd10      	pop	{r4, pc}
 800648c:	200206dc 	.word	0x200206dc

08006490 <get_dragged_obj>:
{
 8006490:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
 8006492:	4604      	mov	r4, r0
 8006494:	b930      	cbnz	r0, 80064a4 <get_dragged_obj+0x14>
 8006496:	2400      	movs	r4, #0
}
 8006498:	4620      	mov	r0, r4
 800649a:	bd10      	pop	{r4, pc}
        drag_obj = lv_obj_get_parent(drag_obj);
 800649c:	4620      	mov	r0, r4
 800649e:	f001 fb75 	bl	8007b8c <lv_obj_get_parent>
 80064a2:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80064a4:	4620      	mov	r0, r4
 80064a6:	f002 f833 	bl	8008510 <lv_obj_get_drag_parent>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0f4      	beq.n	8006498 <get_dragged_obj+0x8>
 80064ae:	2c00      	cmp	r4, #0
 80064b0:	d1f4      	bne.n	800649c <get_dragged_obj+0xc>
 80064b2:	e7f0      	b.n	8006496 <get_dragged_obj+0x6>

080064b4 <indev_drag_throw.part.2>:
static void indev_drag_throw(lv_indev_proc_t * proc)
 80064b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80064b8:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 80064ba:	69c0      	ldr	r0, [r0, #28]
 80064bc:	f7ff ffe8 	bl	8006490 <get_dragged_obj>
    if(drag_obj == NULL) return;
 80064c0:	4605      	mov	r5, r0
 80064c2:	b1b8      	cbz	r0, 80064f4 <indev_drag_throw.part.2+0x40>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 80064c4:	f002 f812 	bl	80084ec <lv_obj_get_drag_throw>
 80064c8:	4f4e      	ldr	r7, [pc, #312]	; (8006604 <indev_drag_throw.part.2+0x150>)
 80064ca:	b9b0      	cbnz	r0, 80064fa <indev_drag_throw.part.2+0x46>
        proc->types.pointer.drag_in_prog = 0;
 80064cc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80064d0:	2113      	movs	r1, #19
 80064d2:	687a      	ldr	r2, [r7, #4]
        proc->types.pointer.drag_in_prog = 0;
 80064d4:	f360 0341 	bfi	r3, r0, #1, #1
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80064d8:	4628      	mov	r0, r5
        proc->types.pointer.drag_in_prog = 0;
 80064da:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80064de:	69eb      	ldr	r3, [r5, #28]
 80064e0:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7ff ffa4 	bl	8006430 <indev_reset_check>
 80064e8:	4602      	mov	r2, r0
 80064ea:	b918      	cbnz	r0, 80064f4 <indev_drag_throw.part.2+0x40>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 80064ec:	2109      	movs	r1, #9
 80064ee:	4628      	mov	r0, r5
 80064f0:	f001 fae0 	bl	8007ab4 <lv_event_send>
}
 80064f4:	b004      	add	sp, #16
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80064fa:	4628      	mov	r0, r5
 80064fc:	f001 ffe4 	bl	80084c8 <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8006500:	687a      	ldr	r2, [r7, #4]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8006502:	4680      	mov	r8, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8006504:	2064      	movs	r0, #100	; 0x64
 8006506:	7d51      	ldrb	r1, [r2, #21]
 8006508:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
 800650c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8006510:	4359      	muls	r1, r3
 8006512:	fb91 f1f0 	sdiv	r1, r1, r0
    proc->types.pointer.drag_throw_vect.x =
 8006516:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8006518:	7d53      	ldrb	r3, [r2, #21]
 800651a:	1ac1      	subs	r1, r0, r3
 800651c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8006520:	434b      	muls	r3, r1
 8006522:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
 8006526:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8006528:	6961      	ldr	r1, [r4, #20]
 800652a:	2900      	cmp	r1, #0
 800652c:	d062      	beq.n	80065f4 <indev_drag_throw.part.2+0x140>
        lv_obj_get_coords(drag_obj, &coords_ori);
 800652e:	4669      	mov	r1, sp
 8006530:	4628      	mov	r0, r5
 8006532:	f001 fb85 	bl	8007c40 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8006536:	4628      	mov	r0, r5
 8006538:	f001 fb98 	bl	8007c6c <lv_obj_get_x>
 800653c:	8aa6      	ldrh	r6, [r4, #20]
 800653e:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8006540:	4628      	mov	r0, r5
 8006542:	f001 fbad 	bl	8007ca0 <lv_obj_get_y>
 8006546:	8ae2      	ldrh	r2, [r4, #22]
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8006548:	f1b8 0f03 	cmp.w	r8, #3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 800654c:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 800654e:	4402      	add	r2, r0
 8006550:	b211      	sxth	r1, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8006552:	d138      	bne.n	80065c6 <indev_drag_throw.part.2+0x112>
 8006554:	460a      	mov	r2, r1
 8006556:	4628      	mov	r0, r5
 8006558:	4631      	mov	r1, r6
 800655a:	f001 fd83 	bl	8008064 <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
 800655e:	a902      	add	r1, sp, #8
 8006560:	4628      	mov	r0, r5
 8006562:	f001 fb6d 	bl	8007c40 <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8006566:	f9bd 2000 	ldrsh.w	r2, [sp]
 800656a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d003      	beq.n	800657a <indev_drag_throw.part.2+0xc6>
 8006572:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1bc      	bne.n	80064f4 <indev_drag_throw.part.2+0x40>
 800657a:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800657e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006582:	429a      	cmp	r2, r3
 8006584:	d003      	beq.n	800658e <indev_drag_throw.part.2+0xda>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8006586:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1b2      	bne.n	80064f4 <indev_drag_throw.part.2+0x40>
            proc->types.pointer.drag_in_prog      = 0;
 800658e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006592:	687a      	ldr	r2, [r7, #4]
            proc->types.pointer.drag_in_prog      = 0;
 8006594:	f36f 0341 	bfc	r3, #1, #1
 8006598:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	60e3      	str	r3, [r4, #12]
            proc->types.pointer.drag_throw_vect.x = 0;
 80065a0:	6163      	str	r3, [r4, #20]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80065a2:	69eb      	ldr	r3, [r5, #28]
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80065a4:	2113      	movs	r1, #19
 80065a6:	4628      	mov	r0, r5
 80065a8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff ff40 	bl	8006430 <indev_reset_check>
 80065b0:	4602      	mov	r2, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d19e      	bne.n	80064f4 <indev_drag_throw.part.2+0x40>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 80065b6:	2109      	movs	r1, #9
 80065b8:	4628      	mov	r0, r5
 80065ba:	f001 fa7b 	bl	8007ab4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff ff36 	bl	8006430 <indev_reset_check>
 80065c4:	e796      	b.n	80064f4 <indev_drag_throw.part.2+0x40>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 80065c6:	f1b8 0f01 	cmp.w	r8, #1
 80065ca:	d104      	bne.n	80065d6 <indev_drag_throw.part.2+0x122>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	f001 fd9a 	bl	8008108 <lv_obj_set_x>
 80065d4:	e7c3      	b.n	800655e <indev_drag_throw.part.2+0xaa>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 80065d6:	f1b8 0f02 	cmp.w	r8, #2
 80065da:	d103      	bne.n	80065e4 <indev_drag_throw.part.2+0x130>
            else lv_obj_set_y(drag_obj, act_y);
 80065dc:	4628      	mov	r0, r5
 80065de:	f001 fdab 	bl	8008138 <lv_obj_set_y>
 80065e2:	e7bc      	b.n	800655e <indev_drag_throw.part.2+0xaa>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 80065e4:	f1b8 0f04 	cmp.w	r8, #4
 80065e8:	d1b9      	bne.n	800655e <indev_drag_throw.part.2+0xaa>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 80065ea:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f4      	beq.n	80065dc <indev_drag_throw.part.2+0x128>
 80065f2:	e7eb      	b.n	80065cc <indev_drag_throw.part.2+0x118>
        proc->types.pointer.drag_in_prog = 0;
 80065f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80065f8:	f361 0341 	bfi	r3, r1, #1, #1
 80065fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006600:	69eb      	ldr	r3, [r5, #28]
 8006602:	e7cf      	b.n	80065a4 <indev_drag_throw.part.2+0xf0>
 8006604:	200206dc 	.word	0x200206dc

08006608 <lv_indev_reset.part.3>:
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
 8006608:	b570      	push	{r4, r5, r6, lr}
            if(indev_act == i) indev_obj_act = NULL;
 800660a:	4e13      	ldr	r6, [pc, #76]	; (8006658 <lv_indev_reset.part.3+0x50>)
 800660c:	2500      	movs	r5, #0
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
 800660e:	4604      	mov	r4, r0
        lv_indev_t * i = lv_indev_get_next(NULL);
 8006610:	2000      	movs	r0, #0
 8006612:	f00c fb5b 	bl	8012ccc <lv_indev_get_next>
        while(i) {
 8006616:	b900      	cbnz	r0, 800661a <lv_indev_reset.part.3+0x12>
}
 8006618:	bd70      	pop	{r4, r5, r6, pc}
            i->proc.reset_query = 1;
 800661a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800661e:	f043 0302 	orr.w	r3, r3, #2
 8006622:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8006626:	6873      	ldr	r3, [r6, #4]
 8006628:	4298      	cmp	r0, r3
 800662a:	bf08      	it	eq
 800662c:	6035      	streq	r5, [r6, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 800662e:	b174      	cbz	r4, 800664e <lv_indev_reset.part.3+0x46>
 8006630:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006632:	429c      	cmp	r4, r3
 8006634:	d00b      	beq.n	800664e <lv_indev_reset.part.3+0x46>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8006636:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006638:	429c      	cmp	r4, r3
 800663a:	d101      	bne.n	8006640 <lv_indev_reset.part.3+0x38>
                i->proc.types.pointer.act_obj = NULL;
 800663c:	6345      	str	r5, [r0, #52]	; 0x34
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 800663e:	b114      	cbz	r4, 8006646 <lv_indev_reset.part.3+0x3e>
 8006640:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006642:	429c      	cmp	r4, r3
 8006644:	d100      	bne.n	8006648 <lv_indev_reset.part.3+0x40>
                i->proc.types.pointer.last_obj = NULL;
 8006646:	6385      	str	r5, [r0, #56]	; 0x38
            i = lv_indev_get_next(i);
 8006648:	f00c fb40 	bl	8012ccc <lv_indev_get_next>
 800664c:	e7e3      	b.n	8006616 <lv_indev_reset.part.3+0xe>
                i->proc.types.pointer.last_pressed = NULL;
 800664e:	63c5      	str	r5, [r0, #60]	; 0x3c
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8006650:	2c00      	cmp	r4, #0
 8006652:	d0f3      	beq.n	800663c <lv_indev_reset.part.3+0x34>
 8006654:	e7ef      	b.n	8006636 <lv_indev_reset.part.3+0x2e>
 8006656:	bf00      	nop
 8006658:	200206dc 	.word	0x200206dc

0800665c <indev_proc_release>:
{
 800665c:	b538      	push	{r3, r4, r5, lr}
    if(proc->wait_until_release != 0) {
 800665e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8006662:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8006664:	071a      	lsls	r2, r3, #28
 8006666:	d508      	bpl.n	800667a <indev_proc_release+0x1e>
        proc->types.pointer.act_obj  = NULL;
 8006668:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 800666a:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.last_obj = NULL;
 800666e:	e9c0 2206 	strd	r2, r2, [r0, #24]
        proc->longpr_rep_timestamp   = 0;
 8006672:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
        proc->wait_until_release     = 0;
 8006676:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
 800667a:	69a0      	ldr	r0, [r4, #24]
 800667c:	4d4b      	ldr	r5, [pc, #300]	; (80067ac <indev_proc_release+0x150>)
 800667e:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 8006680:	b330      	cbz	r0, 80066d0 <indev_proc_release+0x74>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8006682:	2110      	movs	r1, #16
 8006684:	f002 f9aa 	bl	80089dc <lv_obj_is_protected>
 8006688:	2800      	cmp	r0, #0
 800668a:	d04d      	beq.n	8006728 <indev_proc_release+0xcc>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 800668c:	6828      	ldr	r0, [r5, #0]
 800668e:	210e      	movs	r1, #14
 8006690:	686a      	ldr	r2, [r5, #4]
 8006692:	69c3      	ldr	r3, [r0, #28]
 8006694:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff feca 	bl	8006430 <indev_reset_check>
 800669c:	2800      	cmp	r0, #0
 800669e:	d142      	bne.n	8006726 <indev_proc_release+0xca>
            if(proc->types.pointer.drag_in_prog == 0) {
 80066a0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80066a4:	079b      	lsls	r3, r3, #30
 80066a6:	d525      	bpl.n	80066f4 <indev_proc_release+0x98>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2107      	movs	r1, #7
 80066ac:	6828      	ldr	r0, [r5, #0]
 80066ae:	f001 fa01 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff febc 	bl	8006430 <indev_reset_check>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d134      	bne.n	8006726 <indev_proc_release+0xca>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 80066bc:	6828      	ldr	r0, [r5, #0]
 80066be:	f7ff fee7 	bl	8006490 <get_dragged_obj>
        if(drag_obj) {
 80066c2:	4605      	mov	r5, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d152      	bne.n	800676e <indev_proc_release+0x112>
        proc->types.pointer.act_obj = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61a3      	str	r3, [r4, #24]
        proc->longpr_rep_timestamp  = 0;
 80066cc:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 80066d0:	69e3      	ldr	r3, [r4, #28]
 80066d2:	b343      	cbz	r3, 8006726 <indev_proc_release+0xca>
 80066d4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80066d8:	079a      	lsls	r2, r3, #30
 80066da:	d424      	bmi.n	8006726 <indev_proc_release+0xca>
    if(proc->types.pointer.drag_in_prog == 0) return;
 80066dc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80066e0:	079b      	lsls	r3, r3, #30
 80066e2:	d502      	bpl.n	80066ea <indev_proc_release+0x8e>
 80066e4:	4620      	mov	r0, r4
 80066e6:	f7ff fee5 	bl	80064b4 <indev_drag_throw.part.2>
        if(indev_reset_check(proc)) return;
 80066ea:	4620      	mov	r0, r4
}
 80066ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(indev_reset_check(proc)) return;
 80066f0:	f7ff be9e 	b.w	8006430 <indev_reset_check>
                if(proc->long_pr_sent == 0) {
 80066f4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80066f8:	f012 0201 	ands.w	r2, r2, #1
 80066fc:	d00a      	beq.n	8006714 <indev_proc_release+0xb8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80066fe:	2200      	movs	r2, #0
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006700:	2106      	movs	r1, #6
 8006702:	6828      	ldr	r0, [r5, #0]
 8006704:	f001 f9d6 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006708:	4620      	mov	r0, r4
 800670a:	f7ff fe91 	bl	8006430 <indev_reset_check>
 800670e:	2800      	cmp	r0, #0
 8006710:	d0ca      	beq.n	80066a8 <indev_proc_release+0x4c>
 8006712:	e008      	b.n	8006726 <indev_proc_release+0xca>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8006714:	2103      	movs	r1, #3
 8006716:	6828      	ldr	r0, [r5, #0]
 8006718:	f001 f9cc 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 800671c:	4620      	mov	r0, r4
 800671e:	f7ff fe87 	bl	8006430 <indev_reset_check>
 8006722:	2800      	cmp	r0, #0
 8006724:	d0eb      	beq.n	80066fe <indev_proc_release+0xa2>
}
 8006726:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8006728:	6828      	ldr	r0, [r5, #0]
 800672a:	210e      	movs	r1, #14
 800672c:	686a      	ldr	r2, [r5, #4]
 800672e:	69c3      	ldr	r3, [r0, #28]
 8006730:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8006732:	4620      	mov	r0, r4
 8006734:	f7ff fe7c 	bl	8006430 <indev_reset_check>
 8006738:	2800      	cmp	r0, #0
 800673a:	d1f4      	bne.n	8006726 <indev_proc_release+0xca>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 800673c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006740:	07d8      	lsls	r0, r3, #31
 8006742:	d505      	bpl.n	8006750 <indev_proc_release+0xf4>
            if(proc->types.pointer.drag_in_prog == 0) {
 8006744:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006748:	f012 0202 	ands.w	r2, r2, #2
 800674c:	d0d8      	beq.n	8006700 <indev_proc_release+0xa4>
 800674e:	e7ab      	b.n	80066a8 <indev_proc_release+0x4c>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8006750:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8006754:	f012 0202 	ands.w	r2, r2, #2
 8006758:	d1f4      	bne.n	8006744 <indev_proc_release+0xe8>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800675a:	2103      	movs	r1, #3
 800675c:	6828      	ldr	r0, [r5, #0]
 800675e:	f001 f9a9 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006762:	4620      	mov	r0, r4
 8006764:	f7ff fe64 	bl	8006430 <indev_reset_check>
 8006768:	2800      	cmp	r0, #0
 800676a:	d0eb      	beq.n	8006744 <indev_proc_release+0xe8>
 800676c:	e7db      	b.n	8006726 <indev_proc_release+0xca>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 800676e:	f001 febd 	bl	80084ec <lv_obj_get_drag_throw>
 8006772:	2800      	cmp	r0, #0
 8006774:	d0a8      	beq.n	80066c8 <indev_proc_release+0x6c>
 8006776:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800677a:	0799      	lsls	r1, r3, #30
 800677c:	d5a4      	bpl.n	80066c8 <indev_proc_release+0x6c>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 800677e:	69eb      	ldr	r3, [r5, #28]
 8006780:	b11b      	cbz	r3, 800678a <indev_proc_release+0x12e>
 8006782:	2200      	movs	r2, #0
 8006784:	2112      	movs	r1, #18
 8006786:	4628      	mov	r0, r5
 8006788:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff fe50 	bl	8006430 <indev_reset_check>
 8006790:	4602      	mov	r2, r0
 8006792:	2800      	cmp	r0, #0
 8006794:	d1c7      	bne.n	8006726 <indev_proc_release+0xca>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8006796:	210a      	movs	r1, #10
 8006798:	4628      	mov	r0, r5
 800679a:	f001 f98b 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff fe46 	bl	8006430 <indev_reset_check>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d08f      	beq.n	80066c8 <indev_proc_release+0x6c>
 80067a8:	e7bd      	b.n	8006726 <indev_proc_release+0xca>
 80067aa:	bf00      	nop
 80067ac:	200206dc 	.word	0x200206dc

080067b0 <_lv_indev_init>:
{
 80067b0:	2000      	movs	r0, #0
 80067b2:	f7ff bf29 	b.w	8006608 <lv_indev_reset.part.3>
	...

080067b8 <lv_indev_get_act>:
}
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <lv_indev_get_act+0x8>)
 80067ba:	6858      	ldr	r0, [r3, #4]
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	200206dc 	.word	0x200206dc

080067c4 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80067c4:	b100      	cbz	r0, 80067c8 <lv_indev_get_type+0x4>
    return indev->driver.type;
 80067c6:	7800      	ldrb	r0, [r0, #0]
}
 80067c8:	4770      	bx	lr
	...

080067cc <lv_indev_reset>:
    if(indev) {
 80067cc:	b300      	cbz	r0, 8006810 <lv_indev_reset+0x44>
        indev->proc.reset_query = 1;
 80067ce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80067d2:	f043 0302 	orr.w	r3, r3, #2
 80067d6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <lv_indev_reset+0x4c>)
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4282      	cmp	r2, r0
 80067e0:	bf04      	itt	eq
 80067e2:	2200      	moveq	r2, #0
 80067e4:	601a      	streq	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80067e6:	b171      	cbz	r1, 8006806 <lv_indev_reset+0x3a>
 80067e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80067ea:	428b      	cmp	r3, r1
 80067ec:	d00b      	beq.n	8006806 <lv_indev_reset+0x3a>
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80067ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d102      	bne.n	80067fa <lv_indev_reset+0x2e>
            indev->proc.types.pointer.act_obj = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	6343      	str	r3, [r0, #52]	; 0x34
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80067f8:	b111      	cbz	r1, 8006800 <lv_indev_reset+0x34>
 80067fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80067fc:	428b      	cmp	r3, r1
 80067fe:	d10a      	bne.n	8006816 <lv_indev_reset+0x4a>
            indev->proc.types.pointer.last_obj = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	6383      	str	r3, [r0, #56]	; 0x38
 8006804:	4770      	bx	lr
            indev->proc.types.pointer.last_pressed = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	63c3      	str	r3, [r0, #60]	; 0x3c
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800680a:	2900      	cmp	r1, #0
 800680c:	d0f2      	beq.n	80067f4 <lv_indev_reset+0x28>
 800680e:	e7ee      	b.n	80067ee <lv_indev_reset+0x22>
 8006810:	4608      	mov	r0, r1
 8006812:	f7ff bef9 	b.w	8006608 <lv_indev_reset.part.3>
}
 8006816:	4770      	bx	lr
 8006818:	200206dc 	.word	0x200206dc

0800681c <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
 800681c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006820:	f36f 0300 	bfc	r3, #0, #1
{
 8006824:	b510      	push	{r4, lr}
 8006826:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 8006828:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 800682c:	f00c fa86 	bl	8012d3c <lv_tick_get>
 8006830:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8006832:	f00c fa83 	bl	8012d3c <lv_tick_get>
 8006836:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8006838:	bd10      	pop	{r4, pc}

0800683a <lv_indev_get_point>:
    if(indev == NULL) {
 800683a:	b910      	cbnz	r0, 8006842 <lv_indev_get_point+0x8>
        point->x = 0;
 800683c:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 800683e:	8048      	strh	r0, [r1, #2]
        return;
 8006840:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8006842:	7803      	ldrb	r3, [r0, #0]
 8006844:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8006848:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 800684a:	bf09      	itett	eq
 800684c:	f9b0 3020 	ldrsheq.w	r3, [r0, #32]
        point->x = -1;
 8006850:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 8006854:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8006856:	f9b0 3022 	ldrsheq.w	r3, [r0, #34]	; 0x22
        point->x = -1;
 800685a:	bf18      	it	ne
 800685c:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800685e:	804b      	strh	r3, [r1, #2]
}
 8006860:	4770      	bx	lr

08006862 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8006862:	b150      	cbz	r0, 800687a <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8006864:	7803      	ldrb	r3, [r0, #0]
 8006866:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800686a:	2b01      	cmp	r3, #1
 800686c:	d104      	bne.n	8006878 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800686e:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 8006872:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006876:	4770      	bx	lr
    if(indev == NULL) return false;
 8006878:	2000      	movs	r0, #0
}
 800687a:	4770      	bx	lr

0800687c <lv_indev_get_obj_act>:
}
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <lv_indev_get_obj_act+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	200206dc 	.word	0x200206dc

08006888 <lv_indev_search_obj>:
{
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	4605      	mov	r5, r0
 800688c:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
 800688e:	f002 ffab 	bl	80097e8 <lv_obj_hittest>
 8006892:	b908      	cbnz	r0, 8006898 <lv_indev_search_obj+0x10>
    lv_obj_t * found_p = NULL;
 8006894:	2000      	movs	r0, #0
}
 8006896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(obj->child_ll, i) {
 8006898:	1d2e      	adds	r6, r5, #4
 800689a:	4630      	mov	r0, r6
 800689c:	f00c ffda 	bl	8013854 <_lv_ll_get_head>
 80068a0:	4604      	mov	r4, r0
 80068a2:	b930      	cbnz	r0, 80068b2 <lv_indev_search_obj+0x2a>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80068a4:	4628      	mov	r0, r5
 80068a6:	f001 fdeb 	bl	8008480 <lv_obj_get_click>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0f2      	beq.n	8006894 <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
 80068ae:	462c      	mov	r4, r5
 80068b0:	e012      	b.n	80068d8 <lv_indev_search_obj+0x50>
            found_p = lv_indev_search_obj(i, point);
 80068b2:	4639      	mov	r1, r7
 80068b4:	4620      	mov	r0, r4
 80068b6:	f7ff ffe7 	bl	8006888 <lv_indev_search_obj>
            if(found_p != NULL) {
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d1eb      	bne.n	8006896 <lv_indev_search_obj+0xe>
        _LV_LL_READ(obj->child_ll, i) {
 80068be:	4621      	mov	r1, r4
 80068c0:	4630      	mov	r0, r6
 80068c2:	f00c ffcd 	bl	8013860 <_lv_ll_get_next>
 80068c6:	e7eb      	b.n	80068a0 <lv_indev_search_obj+0x18>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80068c8:	4620      	mov	r0, r4
 80068ca:	f001 fadf 	bl	8007e8c <lv_obj_get_hidden>
 80068ce:	b928      	cbnz	r0, 80068dc <lv_indev_search_obj+0x54>
                hidden_i = lv_obj_get_parent(hidden_i);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f001 f95b 	bl	8007b8c <lv_obj_get_parent>
 80068d6:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
 80068d8:	2c00      	cmp	r4, #0
 80068da:	d1f5      	bne.n	80068c8 <lv_indev_search_obj+0x40>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	4628      	mov	r0, r5
 80068e0:	f002 f87c 	bl	80089dc <lv_obj_is_protected>
 80068e4:	b948      	cbnz	r0, 80068fa <lv_indev_search_obj+0x72>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	d1d4      	bne.n	8006894 <lv_indev_search_obj+0xc>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f002 f885 	bl	80089fc <lv_obj_get_state>
 80068f2:	0683      	lsls	r3, r0, #26
 80068f4:	d4ce      	bmi.n	8006894 <lv_indev_search_obj+0xc>
 80068f6:	4628      	mov	r0, r5
 80068f8:	e7cd      	b.n	8006896 <lv_indev_search_obj+0xe>
                if(hidden_i == NULL) found_p = obj;
 80068fa:	2c00      	cmp	r4, #0
 80068fc:	d0fb      	beq.n	80068f6 <lv_indev_search_obj+0x6e>
 80068fe:	e7c9      	b.n	8006894 <lv_indev_search_obj+0xc>

08006900 <indev_proc_press>:
{
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 8006906:	4db5      	ldr	r5, [pc, #724]	; (8006bdc <indev_proc_press+0x2dc>)
 8006908:	6980      	ldr	r0, [r0, #24]
{
 800690a:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
 800690c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
 8006910:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 8006912:	071b      	lsls	r3, r3, #28
 8006914:	f100 8141 	bmi.w	8006b9a <indev_proc_press+0x29a>
    lv_disp_t * disp = indev_act->driver.disp;
 8006918:	686b      	ldr	r3, [r5, #4]
 800691a:	68de      	ldr	r6, [r3, #12]
    if(indev_obj_act == NULL) {
 800691c:	bb20      	cbnz	r0, 8006968 <indev_proc_press+0x68>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 800691e:	1d27      	adds	r7, r4, #4
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff fbbe 	bl	80060a2 <lv_disp_get_layer_sys>
 8006926:	4639      	mov	r1, r7
 8006928:	f7ff ffae 	bl	8006888 <lv_indev_search_obj>
 800692c:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 800692e:	b930      	cbnz	r0, 800693e <indev_proc_press+0x3e>
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff fbaf 	bl	8006094 <lv_disp_get_layer_top>
 8006936:	4639      	mov	r1, r7
 8006938:	f7ff ffa6 	bl	8006888 <lv_indev_search_obj>
 800693c:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b933      	cbnz	r3, 8006950 <indev_proc_press+0x50>
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff fb98 	bl	8006078 <lv_disp_get_scr_act>
 8006948:	4639      	mov	r1, r7
 800694a:	f7ff ff9d 	bl	8006888 <lv_indev_search_obj>
 800694e:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8006950:	69e3      	ldr	r3, [r4, #28]
 8006952:	b193      	cbz	r3, 800697a <indev_proc_press+0x7a>
        proc->types.pointer.drag_throw_vect.x = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	6163      	str	r3, [r4, #20]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8006958:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800695c:	079e      	lsls	r6, r3, #30
 800695e:	d50c      	bpl.n	800697a <indev_proc_press+0x7a>
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff fda7 	bl	80064b4 <indev_drag_throw.part.2>
 8006966:	e008      	b.n	800697a <indev_proc_press+0x7a>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8006968:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800696c:	079f      	lsls	r7, r3, #30
 800696e:	d409      	bmi.n	8006984 <indev_proc_press+0x84>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8006970:	2110      	movs	r1, #16
 8006972:	f002 f833 	bl	80089dc <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8006976:	2800      	cmp	r0, #0
 8006978:	d0d1      	beq.n	800691e <indev_proc_press+0x1e>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 800697a:	69a6      	ldr	r6, [r4, #24]
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	429e      	cmp	r6, r3
 8006980:	f040 8082 	bne.w	8006a88 <indev_proc_press+0x188>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8006984:	8923      	ldrh	r3, [r4, #8]
 8006986:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8006988:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800698c:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800698e:	88e1      	ldrh	r1, [r4, #6]
 8006990:	8963      	ldrh	r3, [r4, #10]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8006992:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8006996:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8006998:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800699a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 800699e:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 80069a0:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 80069a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 80069a6:	b209      	sxth	r1, r1
    if(proc->types.pointer.drag_throw_vect.x < 0)
 80069a8:	2a00      	cmp	r2, #0
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 80069aa:	ea4f 03e3 	mov.w	r3, r3, asr #3
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 80069ae:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 80069b0:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 80069b2:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
 80069b4:	f280 8157 	bge.w	8006c66 <indev_proc_press+0x366>
        proc->types.pointer.drag_throw_vect.x++;
 80069b8:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
 80069ba:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f280 8156 	bge.w	8006c6e <indev_proc_press+0x36e>
        proc->types.pointer.drag_throw_vect.y++;
 80069c2:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
 80069c4:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 80069c6:	8aa3      	ldrh	r3, [r4, #20]
 80069c8:	eb03 0060 	add.w	r0, r3, r0, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80069cc:	8ae3      	ldrh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 80069ce:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80069d0:	eb03 0161 	add.w	r1, r3, r1, asr #1
    if(indev_obj_act != NULL) {
 80069d4:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80069d6:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
 80069d8:	2800      	cmp	r0, #0
 80069da:	f000 80de 	beq.w	8006b9a <indev_proc_press+0x29a>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 80069de:	686a      	ldr	r2, [r5, #4]
 80069e0:	210c      	movs	r1, #12
 80069e2:	69c3      	ldr	r3, [r0, #28]
 80069e4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff fd22 	bl	8006430 <indev_reset_check>
 80069ec:	4602      	mov	r2, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 80d3 	bne.w	8006b9a <indev_proc_press+0x29a>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80069f4:	2101      	movs	r1, #1
 80069f6:	6828      	ldr	r0, [r5, #0]
 80069f8:	f001 f85c 	bl	8007ab4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7ff fd17 	bl	8006430 <indev_reset_check>
 8006a02:	4680      	mov	r8, r0
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f040 80c8 	bne.w	8006b9a <indev_proc_press+0x29a>
        if(indev_act->proc.wait_until_release) return;
 8006a0a:	686b      	ldr	r3, [r5, #4]
 8006a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a10:	0719      	lsls	r1, r3, #28
 8006a12:	f100 80c2 	bmi.w	8006b9a <indev_proc_press+0x29a>
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 8006a16:	69a0      	ldr	r0, [r4, #24]
 8006a18:	f7ff fd3a 	bl	8006490 <get_dragged_obj>
    if(drag_obj == NULL) return;
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f000 8202 	beq.w	8006e28 <indev_proc_press+0x528>
    if(lv_obj_get_drag(drag_obj) == false) return;
 8006a24:	f001 fd3e 	bl	80084a4 <lv_obj_get_drag>
 8006a28:	4681      	mov	r9, r0
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f000 81fc 	beq.w	8006e28 <indev_proc_press+0x528>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8006a30:	4630      	mov	r0, r6
 8006a32:	f001 fd49 	bl	80084c8 <lv_obj_get_drag_dir>
    if(proc->types.pointer.drag_limit_out == 0) {
 8006a36:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8006a3a:	4607      	mov	r7, r0
    if(proc->types.pointer.drag_limit_out == 0) {
 8006a3c:	07da      	lsls	r2, r3, #31
 8006a3e:	f100 813a 	bmi.w	8006cb6 <indev_proc_press+0x3b6>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8006a42:	8a22      	ldrh	r2, [r4, #16]
 8006a44:	89a3      	ldrh	r3, [r4, #12]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8006a46:	89e1      	ldrh	r1, [r4, #14]
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8006a48:	441a      	add	r2, r3
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8006a4a:	8a63      	ldrh	r3, [r4, #18]
 8006a4c:	440b      	add	r3, r1
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006a4e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006a52:	3802      	subs	r0, #2
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8006a54:	b212      	sxth	r2, r2
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8006a56:	b21b      	sxth	r3, r3
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006a58:	b2c0      	uxtb	r0, r0
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8006a5a:	8222      	strh	r2, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8006a5c:	8263      	strh	r3, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006a5e:	2801      	cmp	r0, #1
 8006a60:	d90d      	bls.n	8006a7e <indev_proc_press+0x17e>
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8006a62:	2f04      	cmp	r7, #4
 8006a64:	f040 8107 	bne.w	8006c76 <indev_proc_press+0x376>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8006a68:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 8006a6c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8006a70:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8006a74:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8006a78:	4584      	cmp	ip, r0
 8006a7a:	f300 80ff 	bgt.w	8006c7c <indev_proc_press+0x37c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8006a7e:	2901      	cmp	r1, #1
 8006a80:	f040 8107 	bne.w	8006c92 <indev_proc_press+0x392>
                ver_en = true;
 8006a84:	46c8      	mov	r8, r9
 8006a86:	e0f9      	b.n	8006c7c <indev_proc_press+0x37c>
 8006a88:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8006a8c:	88a2      	ldrh	r2, [r4, #4]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8006a8e:	8163      	strh	r3, [r4, #10]
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8006a90:	8122      	strh	r2, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	d16d      	bne.n	8006b72 <indev_proc_press+0x272>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8006a96:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 8006a98:	e9c4 3306 	strd	r3, r3, [r4, #24]
        if(indev_obj_act != NULL) {
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f43f af71 	beq.w	8006984 <indev_proc_press+0x84>
            proc->pr_timestamp                 = lv_tick_get();
 8006aa2:	f00c f94b 	bl	8012d3c <lv_tick_get>
            proc->long_pr_sent                 = 0;
 8006aa6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8006aaa:	2203      	movs	r2, #3
            proc->types.pointer.gesture_sum.x  = 0;
 8006aac:	2600      	movs	r6, #0
            proc->long_pr_sent                 = 0;
 8006aae:	f36f 0300 	bfc	r3, #0, #1
            proc->pr_timestamp                 = lv_tick_get();
 8006ab2:	62e0      	str	r0, [r4, #44]	; 0x2c
            lv_obj_t * i        = indev_obj_act;
 8006ab4:	6828      	ldr	r0, [r5, #0]
            proc->long_pr_sent                 = 0;
 8006ab6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 8006aba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8006abe:	84e6      	strh	r6, [r4, #38]	; 0x26
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8006ac0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
            proc->types.pointer.gesture_sum.y  = 0;
 8006ac4:	8526      	strh	r6, [r4, #40]	; 0x28
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8006ac6:	f362 0384 	bfi	r3, r2, #2, #3
            proc->types.pointer.gesture_sent   = 0;
 8006aca:	f36f 1345 	bfc	r3, #5, #1
            proc->types.pointer.vect.y         = 0;
 8006ace:	e9c4 6603 	strd	r6, r6, [r4, #12]
            proc->types.pointer.gesture_sent   = 0;
 8006ad2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            while(i != NULL) {
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d162      	bne.n	8006ba0 <indev_proc_press+0x2a0>
            if(last_top != NULL) {
 8006ada:	b116      	cbz	r6, 8006ae2 <indev_proc_press+0x1e2>
                lv_obj_move_foreground(last_top);
 8006adc:	4630      	mov	r0, r6
 8006ade:	f001 fa95 	bl	800800c <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8006ae2:	6828      	ldr	r0, [r5, #0]
 8006ae4:	210b      	movs	r1, #11
 8006ae6:	686a      	ldr	r2, [r5, #4]
 8006ae8:	69c3      	ldr	r3, [r0, #28]
 8006aea:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8006aec:	4620      	mov	r0, r4
 8006aee:	f7ff fc9f 	bl	8006430 <indev_reset_check>
 8006af2:	4602      	mov	r2, r0
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d150      	bne.n	8006b9a <indev_proc_press+0x29a>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8006af8:	4601      	mov	r1, r0
 8006afa:	6828      	ldr	r0, [r5, #0]
 8006afc:	f000 ffda 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fc95 	bl	8006430 <indev_reset_check>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d147      	bne.n	8006b9a <indev_proc_press+0x29a>
            if(indev_act->proc.wait_until_release) return;
 8006b0a:	686f      	ldr	r7, [r5, #4]
 8006b0c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006b10:	0718      	lsls	r0, r3, #28
 8006b12:	d442      	bmi.n	8006b9a <indev_proc_press+0x29a>
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 8006b14:	6828      	ldr	r0, [r5, #0]
 8006b16:	f003 ff33 	bl	800a980 <lv_obj_get_focused_obj>
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8006b1a:	2120      	movs	r1, #32
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 8006b1c:	4681      	mov	r9, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8006b1e:	6828      	ldr	r0, [r5, #0]
 8006b20:	f001 ff5c 	bl	80089dc <lv_obj_is_protected>
 8006b24:	b9f0      	cbnz	r0, 8006b64 <indev_proc_press+0x264>
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	4599      	cmp	r9, r3
 8006b2a:	d01b      	beq.n	8006b64 <indev_proc_press+0x264>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 8006b2c:	4648      	mov	r0, r9
            indev_click_focus(&indev_act->proc);
 8006b2e:	f107 061c 	add.w	r6, r7, #28
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 8006b32:	f002 fd73 	bl	800961c <lv_obj_get_group>
 8006b36:	4682      	mov	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8006b38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f000 826d 	beq.w	800701a <indev_proc_press+0x71a>
 8006b40:	f002 fd6c 	bl	800961c <lv_obj_get_group>
        if(g_act == g_prev) {
 8006b44:	4582      	cmp	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8006b46:	4680      	mov	r8, r0
        if(g_act == g_prev) {
 8006b48:	d14a      	bne.n	8006be0 <indev_proc_press+0x2e0>
            if(g_act) {
 8006b4a:	f1ba 0f00 	cmp.w	sl, #0
 8006b4e:	f000 8268 	beq.w	8007022 <indev_proc_press+0x722>
                lv_group_focus_obj(obj_to_focus);
 8006b52:	4648      	mov	r0, r9
 8006b54:	f7ff fc18 	bl	8006388 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f7ff fc69 	bl	8006430 <indev_reset_check>
 8006b5e:	b908      	cbnz	r0, 8006b64 <indev_proc_press+0x264>
        proc->types.pointer.last_pressed = obj_to_focus;
 8006b60:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
            if(indev_reset_check(proc)) return;
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fc63 	bl	8006430 <indev_reset_check>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f43f af0a 	beq.w	8006984 <indev_proc_press+0x84>
 8006b70:	e013      	b.n	8006b9a <indev_proc_press+0x29a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8006b72:	686a      	ldr	r2, [r5, #4]
 8006b74:	210d      	movs	r1, #13
 8006b76:	69f3      	ldr	r3, [r6, #28]
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7ff fc57 	bl	8006430 <indev_reset_check>
 8006b82:	4602      	mov	r2, r0
 8006b84:	b948      	cbnz	r0, 8006b9a <indev_proc_press+0x29a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8006b86:	2102      	movs	r1, #2
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 ff93 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f7ff fc4e 	bl	8006430 <indev_reset_check>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f af7e 	beq.w	8006a96 <indev_proc_press+0x196>
}
 8006b9a:	b005      	add	sp, #20
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
 8006ba0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006ba4:	f013 0f20 	tst.w	r3, #32
 8006ba8:	bf18      	it	ne
 8006baa:	4606      	movne	r6, r0
                i = lv_obj_get_parent(i);
 8006bac:	f000 ffee 	bl	8007b8c <lv_obj_get_parent>
 8006bb0:	e791      	b.n	8006ad6 <indev_proc_press+0x1d6>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2117      	movs	r1, #23
 8006bb6:	f000 ffad 	bl	8007b14 <lv_signal_send>
                    if(indev_reset_check(proc)) return;
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff fc38 	bl	8006430 <indev_reset_check>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d1ce      	bne.n	8006b64 <indev_proc_press+0x264>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8006bc6:	210e      	movs	r1, #14
 8006bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006bca:	f000 ff73 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff fc2e 	bl	8006430 <indev_reset_check>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f000 8228 	beq.w	800702a <indev_proc_press+0x72a>
 8006bda:	e7c3      	b.n	8006b64 <indev_proc_press+0x264>
 8006bdc:	200206dc 	.word	0x200206dc
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8006be0:	bb20      	cbnz	r0, 8006c2c <indev_proc_press+0x32c>
 8006be2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006be4:	b308      	cbz	r0, 8006c2a <indev_proc_press+0x32a>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2117      	movs	r1, #23
 8006bea:	f000 ff93 	bl	8007b14 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7ff fc1e 	bl	8006430 <indev_reset_check>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d1b4      	bne.n	8006b64 <indev_proc_press+0x264>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8006bfa:	210e      	movs	r1, #14
 8006bfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006bfe:	f000 ff59 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff fc14 	bl	8006430 <indev_reset_check>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d1ab      	bne.n	8006b64 <indev_proc_press+0x264>
            if(g_act) {
 8006c0c:	f1ba 0f00 	cmp.w	sl, #0
 8006c10:	d19f      	bne.n	8006b52 <indev_proc_press+0x252>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 8006c12:	4652      	mov	r2, sl
 8006c14:	2116      	movs	r1, #22
 8006c16:	4648      	mov	r0, r9
 8006c18:	f000 ff7c 	bl	8007b14 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff fc07 	bl	8006430 <indev_reset_check>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d19e      	bne.n	8006b64 <indev_proc_press+0x264>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8006c26:	4652      	mov	r2, sl
 8006c28:	e20b      	b.n	8007042 <indev_proc_press+0x742>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8006c2a:	4680      	mov	r8, r0
                if(proc->types.pointer.last_pressed) {
 8006c2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d0ec      	beq.n	8006c0c <indev_proc_press+0x30c>
                    if(g_prev == NULL) {
 8006c32:	f1b8 0f00 	cmp.w	r8, #0
 8006c36:	d10a      	bne.n	8006c4e <indev_proc_press+0x34e>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8006c38:	4642      	mov	r2, r8
 8006c3a:	2117      	movs	r1, #23
 8006c3c:	f000 ff6a 	bl	8007b14 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff fbf5 	bl	8006430 <indev_reset_check>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d18c      	bne.n	8006b64 <indev_proc_press+0x264>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	e7d5      	b.n	8006bfa <indev_proc_press+0x2fa>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2115      	movs	r1, #21
 8006c52:	f000 ff5f 	bl	8007b14 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff fbea 	bl	8006430 <indev_reset_check>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d180      	bne.n	8006b64 <indev_proc_press+0x264>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 8006c62:	210f      	movs	r1, #15
 8006c64:	e7ca      	b.n	8006bfc <indev_proc_press+0x2fc>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8006c66:	f43f aea9 	beq.w	80069bc <indev_proc_press+0xbc>
        proc->types.pointer.drag_throw_vect.x--;
 8006c6a:	3a01      	subs	r2, #1
 8006c6c:	e6a5      	b.n	80069ba <indev_proc_press+0xba>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8006c6e:	f43f aeaa 	beq.w	80069c6 <indev_proc_press+0xc6>
        proc->types.pointer.drag_throw_vect.y--;
 8006c72:	3b01      	subs	r3, #1
 8006c74:	e6a6      	b.n	80069c4 <indev_proc_press+0xc4>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8006c76:	2901      	cmp	r1, #1
 8006c78:	f040 80d6 	bne.w	8006e28 <indev_proc_press+0x528>
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	6869      	ldr	r1, [r5, #4]
 8006c80:	bfb8      	it	lt
 8006c82:	4252      	neglt	r2, r2
 8006c84:	7d09      	ldrb	r1, [r1, #20]
 8006c86:	428a      	cmp	r2, r1
 8006c88:	da0b      	bge.n	8006ca2 <indev_proc_press+0x3a2>
 8006c8a:	f1b8 0f00 	cmp.w	r8, #0
 8006c8e:	f000 80cb 	beq.w	8006e28 <indev_proc_press+0x528>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	686a      	ldr	r2, [r5, #4]
 8006c96:	bfb8      	it	lt
 8006c98:	425b      	neglt	r3, r3
 8006c9a:	7d12      	ldrb	r2, [r2, #20]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	f2c0 80c3 	blt.w	8006e28 <indev_proc_press+0x528>
            proc->types.pointer.drag_limit_out = 1;
 8006ca2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    if(proc->types.pointer.drag_limit_out != 0) {
 8006cae:	07db      	lsls	r3, r3, #31
 8006cb0:	f140 80ba 	bpl.w	8006e28 <indev_proc_press+0x528>
            drag_just_started                   = true;
 8006cb4:	46c8      	mov	r8, r9
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80b5 	beq.w	8006e28 <indev_proc_press+0x528>
            lv_coord_t prev_x     = drag_obj->coords.x1;
 8006cbe:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8006cc2:	4630      	mov	r0, r6
            lv_coord_t prev_x     = drag_obj->coords.x1;
 8006cc4:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 8006cc6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8006cca:	9302      	str	r3, [sp, #8]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8006ccc:	f000 ff5e 	bl	8007b8c <lv_obj_get_parent>
 8006cd0:	f001 f800 	bl	8007cd4 <lv_obj_get_width>
 8006cd4:	4682      	mov	sl, r0
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f000 ff58 	bl	8007b8c <lv_obj_get_parent>
 8006cdc:	f001 f808 	bl	8007cf0 <lv_obj_get_height>
 8006ce0:	4683      	mov	fp, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 ffc2 	bl	8007c6c <lv_obj_get_x>
 8006ce8:	4681      	mov	r9, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8006cea:	4630      	mov	r0, r6
 8006cec:	f000 ffd8 	bl	8007ca0 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006cf0:	2f03      	cmp	r7, #3
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8006cf2:	4602      	mov	r2, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 8006cf4:	d116      	bne.n	8006d24 <indev_proc_press+0x424>
                if(drag_just_started) {
 8006cf6:	f1b8 0f00 	cmp.w	r8, #0
 8006cfa:	d00d      	beq.n	8006d18 <indev_proc_press+0x418>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8006cfc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006d00:	f367 0384 	bfi	r3, r7, #2, #3
 8006d04:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 8006d08:	8a23      	ldrh	r3, [r4, #16]
 8006d0a:	eb09 0103 	add.w	r1, r9, r3
                    act_y += proc->types.pointer.drag_sum.y;
 8006d0e:	8a63      	ldrh	r3, [r4, #18]
 8006d10:	441a      	add	r2, r3
                    act_x += proc->types.pointer.drag_sum.x;
 8006d12:	fa0f f981 	sxth.w	r9, r1
                    act_y += proc->types.pointer.drag_sum.y;
 8006d16:	b212      	sxth	r2, r2
                act_x += proc->types.pointer.vect.x;
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	eb09 0103 	add.w	r1, r9, r3
 8006d1e:	fa0f f981 	sxth.w	r9, r1
 8006d22:	e024      	b.n	8006d6e <indev_proc_press+0x46e>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 8006d24:	2f01      	cmp	r7, #1
 8006d26:	d111      	bne.n	8006d4c <indev_proc_press+0x44c>
 8006d28:	fa1f f389 	uxth.w	r3, r9
                if(drag_just_started) {
 8006d2c:	f1b8 0f00 	cmp.w	r8, #0
 8006d30:	d0f2      	beq.n	8006d18 <indev_proc_press+0x418>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8006d32:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8006d36:	f367 0184 	bfi	r1, r7, #2, #3
 8006d3a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
 8006d3e:	2100      	movs	r1, #0
 8006d40:	8261      	strh	r1, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 8006d42:	8a21      	ldrh	r1, [r4, #16]
 8006d44:	4419      	add	r1, r3
 8006d46:	fa0f f981 	sxth.w	r9, r1
 8006d4a:	e7e5      	b.n	8006d18 <indev_proc_press+0x418>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8006d4c:	2f02      	cmp	r7, #2
 8006d4e:	f040 811f 	bne.w	8006f90 <indev_proc_press+0x690>
                if(drag_just_started) {
 8006d52:	f1b8 0f00 	cmp.w	r8, #0
 8006d56:	d00a      	beq.n	8006d6e <indev_proc_press+0x46e>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8006d58:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006d5c:	f367 0384 	bfi	r3, r7, #2, #3
 8006d60:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 8006d68:	8a63      	ldrh	r3, [r4, #18]
 8006d6a:	441a      	add	r2, r3
 8006d6c:	b212      	sxth	r2, r2
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 8006d6e:	1ebb      	subs	r3, r7, #2
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d90d      	bls.n	8006d92 <indev_proc_press+0x492>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8006d76:	2f04      	cmp	r7, #4
 8006d78:	d10e      	bne.n	8006d98 <indev_proc_press+0x498>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8006d7a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8006d7e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8006d82:	2800      	cmp	r0, #0
 8006d84:	bfb8      	it	lt
 8006d86:	4240      	neglt	r0, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bfb8      	it	lt
 8006d8c:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	da02      	bge.n	8006d98 <indev_proc_press+0x498>
                act_y += proc->types.pointer.vect.y;
 8006d92:	89e3      	ldrh	r3, [r4, #14]
 8006d94:	441a      	add	r2, r3
 8006d96:	b212      	sxth	r2, r2
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 8006d98:	686b      	ldr	r3, [r5, #4]
 8006d9a:	9203      	str	r2, [sp, #12]
            uint16_t inv_buf_size =
 8006d9c:	68d8      	ldr	r0, [r3, #12]
 8006d9e:	f00b fe9f 	bl	8012ae0 <lv_disp_get_inv_buf_size>
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8006da2:	9a03      	ldr	r2, [sp, #12]
            uint16_t inv_buf_size =
 8006da4:	4607      	mov	r7, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8006da6:	4649      	mov	r1, r9
 8006da8:	4630      	mov	r0, r6
 8006daa:	f001 f95b 	bl	8008064 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 8006dae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8006db2:	9a01      	ldr	r2, [sp, #4]
            proc->types.pointer.drag_in_prog = 1;
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8006dbc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d11d      	bne.n	8006e00 <indev_proc_press+0x500>
 8006dc4:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8006dc8:	9a02      	ldr	r2, [sp, #8]
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d118      	bne.n	8006e00 <indev_proc_press+0x500>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f000 fedc 	bl	8007b8c <lv_obj_get_parent>
 8006dd4:	f000 ff7e 	bl	8007cd4 <lv_obj_get_width>
 8006dd8:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f000 fed6 	bl	8007b8c <lv_obj_get_parent>
 8006de0:	f000 ff86 	bl	8007cf0 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8006de4:	45ca      	cmp	sl, r9
 8006de6:	d10b      	bne.n	8006e00 <indev_proc_press+0x500>
 8006de8:	4583      	cmp	fp, r0
 8006dea:	d109      	bne.n	8006e00 <indev_proc_press+0x500>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8006dec:	686b      	ldr	r3, [r5, #4]
 8006dee:	68d8      	ldr	r0, [r3, #12]
 8006df0:	f00b fe76 	bl	8012ae0 <lv_disp_get_inv_buf_size>
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8006df4:	686b      	ldr	r3, [r5, #4]
 8006df6:	1bc1      	subs	r1, r0, r7
 8006df8:	68d8      	ldr	r0, [r3, #12]
 8006dfa:	b289      	uxth	r1, r1
 8006dfc:	f00b fe75 	bl	8012aea <_lv_disp_pop_from_inv_buf>
            if(drag_just_started) {
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d010      	beq.n	8006e28 <indev_proc_press+0x528>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 8006e06:	686a      	ldr	r2, [r5, #4]
 8006e08:	2111      	movs	r1, #17
 8006e0a:	69f3      	ldr	r3, [r6, #28]
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff fb0d 	bl	8006430 <indev_reset_check>
 8006e16:	4602      	mov	r2, r0
 8006e18:	b930      	cbnz	r0, 8006e28 <indev_proc_press+0x528>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8006e1a:	2108      	movs	r1, #8
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 fe49 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fb04 	bl	8006430 <indev_reset_check>
    if(proc->types.pointer.gesture_sent) return;
 8006e28:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006e2c:	069e      	lsls	r6, r3, #26
 8006e2e:	d450      	bmi.n	8006ed2 <indev_proc_press+0x5d2>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8006e30:	69a6      	ldr	r6, [r4, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	d04d      	beq.n	8006ed2 <indev_proc_press+0x5d2>
 8006e36:	4630      	mov	r0, r6
 8006e38:	f001 fb6f 	bl	800851a <lv_obj_get_gesture_parent>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f040 80e2 	bne.w	8007006 <indev_proc_press+0x706>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8006e42:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8006e46:	686a      	ldr	r2, [r5, #4]
 8006e48:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8006e4c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006e50:	7d97      	ldrb	r7, [r2, #22]
 8006e52:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 8006e56:	45bc      	cmp	ip, r7
 8006e58:	da07      	bge.n	8006e6a <indev_proc_press+0x56a>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8006e5a:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 8006e5e:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8006e62:	4567      	cmp	r7, ip
        proc->types.pointer.gesture_sum.x = 0;
 8006e64:	bfc4      	itt	gt
 8006e66:	84e0      	strhgt	r0, [r4, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
 8006e68:	8520      	strhgt	r0, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8006e6a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8006e6c:	4401      	add	r1, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8006e6e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8006e70:	b209      	sxth	r1, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8006e72:	4403      	add	r3, r0
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8006e74:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8006e78:	84e1      	strh	r1, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8006e7a:	b21b      	sxth	r3, r3
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8006e7c:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8006e80:	8523      	strh	r3, [r4, #40]	; 0x28
 8006e82:	ea83 77e3 	eor.w	r7, r3, r3, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8006e86:	7dd0      	ldrb	r0, [r2, #23]
 8006e88:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
 8006e8c:	4584      	cmp	ip, r0
 8006e8e:	dc01      	bgt.n	8006e94 <indev_proc_press+0x594>
 8006e90:	42b8      	cmp	r0, r7
 8006e92:	da1e      	bge.n	8006ed2 <indev_proc_press+0x5d2>
        proc->types.pointer.gesture_sent = 1;
 8006e94:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 8006e98:	45bc      	cmp	ip, r7
        proc->types.pointer.gesture_sent = 1;
 8006e9a:	f040 0020 	orr.w	r0, r0, #32
 8006e9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 8006ea2:	f340 80b5 	ble.w	8007010 <indev_proc_press+0x710>
            if(proc->types.pointer.gesture_sum.x > 0)
 8006ea6:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 8006ea8:	bfcc      	ite	gt
 8006eaa:	2303      	movgt	r3, #3
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 8006eac:	2302      	movle	r3, #2
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 8006eae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 8006eb2:	2114      	movs	r1, #20
 8006eb4:	69f3      	ldr	r3, [r6, #28]
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff fab8 	bl	8006430 <indev_reset_check>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	b930      	cbnz	r0, 8006ed2 <indev_proc_press+0x5d2>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 8006ec4:	210b      	movs	r1, #11
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 fdf4 	bl	8007ab4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7ff faaf 	bl	8006430 <indev_reset_check>
        if(indev_reset_check(proc)) return;
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff faac 	bl	8006430 <indev_reset_check>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	f47f ae5e 	bne.w	8006b9a <indev_proc_press+0x29a>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8006ede:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006ee2:	0798      	lsls	r0, r3, #30
 8006ee4:	f53f ae59 	bmi.w	8006b9a <indev_proc_press+0x29a>
 8006ee8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006eec:	07d9      	lsls	r1, r3, #31
 8006eee:	d429      	bmi.n	8006f44 <indev_proc_press+0x644>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8006ef0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ef2:	f00b ff2d 	bl	8012d50 <lv_tick_elaps>
 8006ef6:	686a      	ldr	r2, [r5, #4]
 8006ef8:	8b13      	ldrh	r3, [r2, #24]
 8006efa:	4298      	cmp	r0, r3
 8006efc:	d91d      	bls.n	8006f3a <indev_proc_press+0x63a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 8006efe:	6828      	ldr	r0, [r5, #0]
 8006f00:	210f      	movs	r1, #15
 8006f02:	69c3      	ldr	r3, [r0, #28]
 8006f04:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff fa92 	bl	8006430 <indev_reset_check>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f47f ae43 	bne.w	8006b9a <indev_proc_press+0x29a>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8006f14:	2104      	movs	r1, #4
 8006f16:	6828      	ldr	r0, [r5, #0]
 8006f18:	f000 fdcc 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff fa87 	bl	8006430 <indev_reset_check>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f47f ae39 	bne.w	8006b9a <indev_proc_press+0x29a>
                proc->long_pr_sent = 1;
 8006f28:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
 8006f34:	f00b ff02 	bl	8012d3c <lv_tick_get>
 8006f38:	6320      	str	r0, [r4, #48]	; 0x30
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8006f3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006f3e:	079a      	lsls	r2, r3, #30
 8006f40:	f53f ae2b 	bmi.w	8006b9a <indev_proc_press+0x29a>
 8006f44:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006f48:	07db      	lsls	r3, r3, #31
 8006f4a:	f57f ae26 	bpl.w	8006b9a <indev_proc_press+0x29a>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 8006f4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006f50:	f00b fefe 	bl	8012d50 <lv_tick_elaps>
 8006f54:	686a      	ldr	r2, [r5, #4]
 8006f56:	8b53      	ldrh	r3, [r2, #26]
 8006f58:	4298      	cmp	r0, r3
 8006f5a:	f67f ae1e 	bls.w	8006b9a <indev_proc_press+0x29a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 8006f5e:	6828      	ldr	r0, [r5, #0]
 8006f60:	2110      	movs	r1, #16
 8006f62:	69c3      	ldr	r3, [r0, #28]
 8006f64:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7ff fa62 	bl	8006430 <indev_reset_check>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f47f ae13 	bne.w	8006b9a <indev_proc_press+0x29a>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8006f74:	2105      	movs	r1, #5
 8006f76:	6828      	ldr	r0, [r5, #0]
 8006f78:	f000 fd9c 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f7ff fa57 	bl	8006430 <indev_reset_check>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f47f ae09 	bne.w	8006b9a <indev_proc_press+0x29a>
                proc->longpr_rep_timestamp = lv_tick_get();
 8006f88:	f00b fed8 	bl	8012d3c <lv_tick_get>
 8006f8c:	6320      	str	r0, [r4, #48]	; 0x30
 8006f8e:	e604      	b.n	8006b9a <indev_proc_press+0x29a>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8006f90:	2f04      	cmp	r7, #4
 8006f92:	f47f aeec 	bne.w	8006d6e <indev_proc_press+0x46e>
                if(drag_just_started) {
 8006f96:	f1b8 0f00 	cmp.w	r8, #0
 8006f9a:	d01a      	beq.n	8006fd2 <indev_proc_press+0x6d2>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8006f9c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8006fa0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8006fa4:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8006fa8:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 8006fac:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 8006fb0:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 8006fb4:	45e6      	cmp	lr, ip
 8006fb6:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
 8006fba:	dd18      	ble.n	8006fee <indev_proc_press+0x6ee>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8006fbc:	2301      	movs	r3, #1
                        act_x += proc->types.pointer.drag_sum.x;
 8006fbe:	eb00 0109 	add.w	r1, r0, r9
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8006fc2:	f363 0c84 	bfi	ip, r3, #2, #3
                        act_x += proc->types.pointer.drag_sum.x;
 8006fc6:	fa0f f981 	sxth.w	r9, r1
                        proc->types.pointer.drag_sum.y = 0;
 8006fca:	2300      	movs	r3, #0
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8006fcc:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
 8006fd0:	8263      	strh	r3, [r4, #18]
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8006fd2:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8006fd6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	bfb8      	it	lt
 8006fde:	4240      	neglt	r0, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfb8      	it	lt
 8006fe4:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8006fe6:	4298      	cmp	r0, r3
 8006fe8:	f73f ae96 	bgt.w	8006d18 <indev_proc_press+0x418>
 8006fec:	e6bf      	b.n	8006d6e <indev_proc_press+0x46e>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8006fee:	4660      	mov	r0, ip
 8006ff0:	f04f 0c02 	mov.w	ip, #2
                        act_y += proc->types.pointer.drag_sum.y;
 8006ff4:	441a      	add	r2, r3
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8006ff6:	f36c 0084 	bfi	r0, ip, #2, #3
                        act_y += proc->types.pointer.drag_sum.y;
 8006ffa:	b212      	sxth	r2, r2
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8006ffc:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
 8007000:	2000      	movs	r0, #0
 8007002:	8220      	strh	r0, [r4, #16]
 8007004:	e7e5      	b.n	8006fd2 <indev_proc_press+0x6d2>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8007006:	4630      	mov	r0, r6
 8007008:	f000 fdc0 	bl	8007b8c <lv_obj_get_parent>
 800700c:	4606      	mov	r6, r0
 800700e:	e710      	b.n	8006e32 <indev_proc_press+0x532>
            if(proc->types.pointer.gesture_sum.y > 0)
 8007010:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 8007012:	bfcc      	ite	gt
 8007014:	2301      	movgt	r3, #1
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 8007016:	2300      	movle	r3, #0
 8007018:	e749      	b.n	8006eae <indev_proc_press+0x5ae>
        if(g_act == g_prev) {
 800701a:	f1ba 0f00 	cmp.w	sl, #0
 800701e:	f47f ade0 	bne.w	8006be2 <indev_proc_press+0x2e2>
                if(proc->types.pointer.last_pressed) {
 8007022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007024:	2800      	cmp	r0, #0
 8007026:	f47f adc4 	bne.w	8006bb2 <indev_proc_press+0x2b2>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 800702a:	2200      	movs	r2, #0
 800702c:	2116      	movs	r1, #22
 800702e:	4648      	mov	r0, r9
 8007030:	f000 fd70 	bl	8007b14 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff f9fb 	bl	8006430 <indev_reset_check>
 800703a:	4602      	mov	r2, r0
 800703c:	2800      	cmp	r0, #0
 800703e:	f47f ad91 	bne.w	8006b64 <indev_proc_press+0x264>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8007042:	210d      	movs	r1, #13
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fd35 	bl	8007ab4 <lv_event_send>
 800704a:	e585      	b.n	8006b58 <indev_proc_press+0x258>

0800704c <_lv_indev_read_task>:
{
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    indev_act = task->user_data;
 8007050:	68c4      	ldr	r4, [r0, #12]
{
 8007052:	b086      	sub	sp, #24
    indev_act = task->user_data;
 8007054:	4dab      	ldr	r5, [pc, #684]	; (8007304 <_lv_indev_read_task+0x2b8>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8007056:	68e3      	ldr	r3, [r4, #12]
    indev_act = task->user_data;
 8007058:	606c      	str	r4, [r5, #4]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 800705a:	2b00      	cmp	r3, #0
 800705c:	d05c      	beq.n	8007118 <_lv_indev_read_task+0xcc>
    indev_proc_reset_query_handler(indev_act);
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff f9f2 	bl	8006448 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 8007064:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
 8007068:	f016 0604 	ands.w	r6, r6, #4
 800706c:	d154      	bne.n	8007118 <_lv_indev_read_task+0xcc>
        more_to_read = _lv_indev_read(indev_act, &data);
 800706e:	a902      	add	r1, sp, #8
 8007070:	6868      	ldr	r0, [r5, #4]
 8007072:	f00b fe35 	bl	8012ce0 <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8007076:	686c      	ldr	r4, [r5, #4]
        more_to_read = _lv_indev_read(indev_act, &data);
 8007078:	4680      	mov	r8, r0
        indev_proc_reset_query_handler(indev_act);
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff f9e4 	bl	8006448 <indev_proc_reset_query_handler>
        indev_act->proc.state = data.state;
 8007080:	f89d 3016 	ldrb.w	r3, [sp, #22]
        indev_obj_act = NULL;
 8007084:	602e      	str	r6, [r5, #0]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8007086:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
 8007088:	7723      	strb	r3, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 800708a:	d105      	bne.n	8007098 <_lv_indev_read_task+0x4c>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 800708c:	68e4      	ldr	r4, [r4, #12]
 800708e:	f00b fe55 	bl	8012d3c <lv_tick_get>
 8007092:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
 8007096:	e006      	b.n	80070a6 <_lv_indev_read_task+0x5a>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8007098:	7823      	ldrb	r3, [r4, #0]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d103      	bne.n	80070a6 <_lv_indev_read_task+0x5a>
 800709e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f2      	bne.n	800708c <_lv_indev_read_task+0x40>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 80070a6:	686c      	ldr	r4, [r5, #4]
 80070a8:	7823      	ldrb	r3, [r4, #0]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d120      	bne.n	80070f0 <_lv_indev_read_task+0xa4>
    if(i->cursor != NULL &&
 80070ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070b0:	b148      	cbz	r0, 80070c6 <_lv_indev_read_task+0x7a>
 80070b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d005      	beq.n	80070c6 <_lv_indev_read_task+0x7a>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80070ba:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80070be:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80070c2:	f000 ffcf 	bl	8008064 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 80070c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80070ca:	f104 001c 	add.w	r0, r4, #28
 80070ce:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
 80070d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80070d4:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
 80070d6:	7f23      	ldrb	r3, [r4, #28]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d106      	bne.n	80070ea <_lv_indev_read_task+0x9e>
        indev_proc_press(&i->proc);
 80070dc:	f7ff fc10 	bl	8006900 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 80070e0:	8c23      	ldrh	r3, [r4, #32]
 80070e2:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 80070e4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80070e6:	84e3      	strh	r3, [r4, #38]	; 0x26
 80070e8:	e00e      	b.n	8007108 <_lv_indev_read_task+0xbc>
        indev_proc_release(&i->proc);
 80070ea:	f7ff fab7 	bl	800665c <indev_proc_release>
 80070ee:	e7f7      	b.n	80070e0 <_lv_indev_read_task+0x94>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	f040 8139 	bne.w	8007368 <_lv_indev_read_task+0x31c>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80070f6:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80070fa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80070fe:	2901      	cmp	r1, #1
 8007100:	f003 0208 	and.w	r2, r3, #8
 8007104:	d10b      	bne.n	800711e <_lv_indev_read_task+0xd2>
 8007106:	b1a2      	cbz	r2, 8007132 <_lv_indev_read_task+0xe6>
        indev_proc_reset_query_handler(indev_act);
 8007108:	6868      	ldr	r0, [r5, #4]
 800710a:	f7ff f99d 	bl	8006448 <indev_proc_reset_query_handler>
    } while(more_to_read);
 800710e:	f1b8 0f00 	cmp.w	r8, #0
 8007112:	d1ac      	bne.n	800706e <_lv_indev_read_task+0x22>
    indev_obj_act = NULL;
 8007114:	e9c5 8800 	strd	r8, r8, [r5]
}
 8007118:	b006      	add	sp, #24
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(i->proc.wait_until_release) {
 800711e:	b142      	cbz	r2, 8007132 <_lv_indev_read_task+0xe6>
        i->proc.long_pr_sent            = 0;
 8007120:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
        i->proc.pr_timestamp            = 0;
 8007124:	64a6      	str	r6, [r4, #72]	; 0x48
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8007126:	f884 6020 	strb.w	r6, [r4, #32]
        i->proc.long_pr_sent            = 0;
 800712a:	f366 0300 	bfi	r3, r6, #0, #1
 800712e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    lv_group_t * g = i->group;
 8007132:	6da7      	ldr	r7, [r4, #88]	; 0x58
    if(g == NULL) return;
 8007134:	2f00      	cmp	r7, #0
 8007136:	d0e7      	beq.n	8007108 <_lv_indev_read_task+0xbc>
    indev_obj_act = lv_group_get_focused(g);
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff f8ea 	bl	8006312 <lv_group_get_focused>
 800713e:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8007140:	2800      	cmp	r0, #0
 8007142:	d0e1      	beq.n	8007108 <_lv_indev_read_task+0xbc>
    i->proc.types.keypad.last_state = data->state;
 8007144:	f89d 2016 	ldrb.w	r2, [sp, #22]
    i->proc.types.keypad.last_key = data->key;
 8007148:	f8dd c00c 	ldr.w	ip, [sp, #12]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 800714c:	2a01      	cmp	r2, #1
    uint32_t prev_key = i->proc.types.keypad.last_key;
 800714e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8007150:	f894 9020 	ldrb.w	r9, [r4, #32]
    i->proc.types.keypad.last_key = data->key;
 8007154:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8007158:	f884 2020 	strb.w	r2, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 800715c:	f040 80c1 	bne.w	80072e2 <_lv_indev_read_task+0x296>
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	d143      	bne.n	80071ee <_lv_indev_read_task+0x1a2>
        i->proc.pr_timestamp = lv_tick_get();
 8007166:	f00b fde9 	bl	8012d3c <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 800716a:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 800716c:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 800716e:	290a      	cmp	r1, #10
 8007170:	d114      	bne.n	800719c <_lv_indev_read_task+0x150>
            lv_group_send_data(g, LV_KEY_ENTER);
 8007172:	4638      	mov	r0, r7
            if(indev_reset_check(&i->proc)) return;
 8007174:	341c      	adds	r4, #28
            lv_group_send_data(g, LV_KEY_ENTER);
 8007176:	f7ff f8d1 	bl	800631c <lv_group_send_data>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800717a:	6828      	ldr	r0, [r5, #0]
 800717c:	464a      	mov	r2, r9
 800717e:	210b      	movs	r1, #11
 8007180:	69c3      	ldr	r3, [r0, #28]
 8007182:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff f953 	bl	8006430 <indev_reset_check>
 800718a:	4602      	mov	r2, r0
 800718c:	2800      	cmp	r0, #0
 800718e:	d1bb      	bne.n	8007108 <_lv_indev_read_task+0xbc>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8007190:	4601      	mov	r1, r0
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8007192:	6828      	ldr	r0, [r5, #0]
 8007194:	f000 fc8e 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8007198:	4620      	mov	r0, r4
 800719a:	e00b      	b.n	80071b4 <_lv_indev_read_task+0x168>
        else if(data->key == LV_KEY_ESC) {
 800719c:	291b      	cmp	r1, #27
 800719e:	d10d      	bne.n	80071bc <_lv_indev_read_task+0x170>
            lv_group_send_data(g, LV_KEY_ESC);
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7ff f8bb 	bl	800631c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80071a6:	464a      	mov	r2, r9
 80071a8:	2114      	movs	r1, #20
 80071aa:	6828      	ldr	r0, [r5, #0]
 80071ac:	f000 fc82 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80071b0:	f104 001c 	add.w	r0, r4, #28
                if(indev_reset_check(&i->proc)) return;
 80071b4:	f7ff f93c 	bl	8006430 <indev_reset_check>
 80071b8:	b1b8      	cbz	r0, 80071ea <_lv_indev_read_task+0x19e>
 80071ba:	e7a5      	b.n	8007108 <_lv_indev_read_task+0xbc>
        else if(data->key == LV_KEY_NEXT) {
 80071bc:	2909      	cmp	r1, #9
 80071be:	d107      	bne.n	80071d0 <_lv_indev_read_task+0x184>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80071c0:	4638      	mov	r0, r7
 80071c2:	4649      	mov	r1, r9
 80071c4:	f7ff f8bf 	bl	8006346 <lv_group_set_editing>
            lv_group_focus_next(g);
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff f801 	bl	80061d0 <lv_group_focus_next>
 80071ce:	e7ef      	b.n	80071b0 <_lv_indev_read_task+0x164>
        else if(data->key == LV_KEY_PREV) {
 80071d0:	290b      	cmp	r1, #11
 80071d2:	d107      	bne.n	80071e4 <_lv_indev_read_task+0x198>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80071d4:	4638      	mov	r0, r7
 80071d6:	4649      	mov	r1, r9
 80071d8:	f7ff f8b5 	bl	8006346 <lv_group_set_editing>
            lv_group_focus_prev(g);
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff f803 	bl	80061e8 <lv_group_focus_prev>
 80071e2:	e7e5      	b.n	80071b0 <_lv_indev_read_task+0x164>
            lv_group_send_data(g, data->key);
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff f899 	bl	800631c <lv_group_send_data>
    indev_obj_act = NULL;
 80071ea:	602e      	str	r6, [r5, #0]
 80071ec:	e78c      	b.n	8007108 <_lv_indev_read_task+0xbc>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 80071ee:	f1b9 0f01 	cmp.w	r9, #1
 80071f2:	d1fa      	bne.n	80071ea <_lv_indev_read_task+0x19e>
        if(data->key == LV_KEY_ENTER) {
 80071f4:	f1bc 0f0a 	cmp.w	ip, #10
 80071f8:	d025      	beq.n	8007246 <_lv_indev_read_task+0x1fa>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80071fa:	f894 9050 	ldrb.w	r9, [r4, #80]	; 0x50
 80071fe:	f019 0901 	ands.w	r9, r9, #1
 8007202:	d137      	bne.n	8007274 <_lv_indev_read_task+0x228>
 8007204:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007206:	f00b fda3 	bl	8012d50 <lv_tick_elaps>
 800720a:	8b23      	ldrh	r3, [r4, #24]
 800720c:	4298      	cmp	r0, r3
 800720e:	d931      	bls.n	8007274 <_lv_indev_read_task+0x228>
            i->proc.long_pr_sent = 1;
 8007210:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007214:	f043 0301 	orr.w	r3, r3, #1
 8007218:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	2b0a      	cmp	r3, #10
 8007220:	d1e3      	bne.n	80071ea <_lv_indev_read_task+0x19e>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8007222:	f00b fd8b 	bl	8012d3c <lv_tick_get>
 8007226:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8007228:	6828      	ldr	r0, [r5, #0]
                if(indev_reset_check(&i->proc)) return;
 800722a:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 800722c:	464a      	mov	r2, r9
 800722e:	210f      	movs	r1, #15
 8007230:	69c3      	ldr	r3, [r0, #28]
 8007232:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8007234:	4620      	mov	r0, r4
 8007236:	f7ff f8fb 	bl	8006430 <indev_reset_check>
 800723a:	4602      	mov	r2, r0
 800723c:	2800      	cmp	r0, #0
 800723e:	f47f af63 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8007242:	2104      	movs	r1, #4
 8007244:	e7a5      	b.n	8007192 <_lv_indev_read_task+0x146>
            if(indev_reset_check(&i->proc)) return;
 8007246:	f104 0a1c 	add.w	sl, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 800724a:	2200      	movs	r2, #0
 800724c:	69c3      	ldr	r3, [r0, #28]
 800724e:	210c      	movs	r1, #12
 8007250:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8007252:	4650      	mov	r0, sl
 8007254:	f7ff f8ec 	bl	8006430 <indev_reset_check>
 8007258:	4602      	mov	r2, r0
 800725a:	2800      	cmp	r0, #0
 800725c:	f47f af54 	bne.w	8007108 <_lv_indev_read_task+0xbc>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8007260:	4649      	mov	r1, r9
 8007262:	6828      	ldr	r0, [r5, #0]
 8007264:	f000 fc26 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8007268:	4650      	mov	r0, sl
 800726a:	f7ff f8e1 	bl	8006430 <indev_reset_check>
 800726e:	2800      	cmp	r0, #0
 8007270:	d0c3      	beq.n	80071fa <_lv_indev_read_task+0x1ae>
 8007272:	e749      	b.n	8007108 <_lv_indev_read_task+0xbc>
        else if(i->proc.long_pr_sent != 0 &&
 8007274:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007278:	07d8      	lsls	r0, r3, #31
 800727a:	d5b6      	bpl.n	80071ea <_lv_indev_read_task+0x19e>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 800727c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800727e:	f00b fd67 	bl	8012d50 <lv_tick_elaps>
 8007282:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8007284:	4298      	cmp	r0, r3
 8007286:	d9b0      	bls.n	80071ea <_lv_indev_read_task+0x19e>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8007288:	f00b fd58 	bl	8012d3c <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 800728c:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800728e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8007290:	341c      	adds	r4, #28
            if(data->key == LV_KEY_ENTER) {
 8007292:	290a      	cmp	r1, #10
 8007294:	d10d      	bne.n	80072b2 <_lv_indev_read_task+0x266>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8007296:	6828      	ldr	r0, [r5, #0]
 8007298:	2200      	movs	r2, #0
 800729a:	2110      	movs	r1, #16
 800729c:	69c3      	ldr	r3, [r0, #28]
 800729e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80072a0:	4620      	mov	r0, r4
 80072a2:	f7ff f8c5 	bl	8006430 <indev_reset_check>
 80072a6:	4602      	mov	r2, r0
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f47f af2d 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80072ae:	2105      	movs	r1, #5
 80072b0:	e76f      	b.n	8007192 <_lv_indev_read_task+0x146>
            else if(data->key == LV_KEY_NEXT) {
 80072b2:	2909      	cmp	r1, #9
 80072b4:	d107      	bne.n	80072c6 <_lv_indev_read_task+0x27a>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80072b6:	4638      	mov	r0, r7
 80072b8:	2100      	movs	r1, #0
 80072ba:	f7ff f844 	bl	8006346 <lv_group_set_editing>
                lv_group_focus_next(g);
 80072be:	4638      	mov	r0, r7
 80072c0:	f7fe ff86 	bl	80061d0 <lv_group_focus_next>
 80072c4:	e768      	b.n	8007198 <_lv_indev_read_task+0x14c>
            else if(data->key == LV_KEY_PREV) {
 80072c6:	290b      	cmp	r1, #11
 80072c8:	d107      	bne.n	80072da <_lv_indev_read_task+0x28e>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80072ca:	4638      	mov	r0, r7
 80072cc:	2100      	movs	r1, #0
 80072ce:	f7ff f83a 	bl	8006346 <lv_group_set_editing>
                lv_group_focus_prev(g);
 80072d2:	4638      	mov	r0, r7
 80072d4:	f7fe ff88 	bl	80061e8 <lv_group_focus_prev>
 80072d8:	e75e      	b.n	8007198 <_lv_indev_read_task+0x14c>
                lv_group_send_data(g, data->key);
 80072da:	4638      	mov	r0, r7
 80072dc:	f7ff f81e 	bl	800631c <lv_group_send_data>
 80072e0:	e75a      	b.n	8007198 <_lv_indev_read_task+0x14c>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d181      	bne.n	80071ea <_lv_indev_read_task+0x19e>
 80072e6:	f1b9 0f01 	cmp.w	r9, #1
 80072ea:	f47f af7e 	bne.w	80071ea <_lv_indev_read_task+0x19e>
        if(data->key == LV_KEY_ENTER) {
 80072ee:	290a      	cmp	r1, #10
        data->key = prev_key;
 80072f0:	9103      	str	r1, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 80072f2:	d009      	beq.n	8007308 <_lv_indev_read_task+0x2bc>
        i->proc.long_pr_sent = 0;
 80072f4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp = 0;
 80072f8:	64a6      	str	r6, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 80072fa:	f366 0300 	bfi	r3, r6, #0, #1
 80072fe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007302:	e772      	b.n	80071ea <_lv_indev_read_task+0x19e>
 8007304:	200206dc 	.word	0x200206dc
            if(indev_reset_check(&i->proc)) return;
 8007308:	f104 071c 	add.w	r7, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800730c:	69c3      	ldr	r3, [r0, #28]
 800730e:	210e      	movs	r1, #14
 8007310:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8007312:	4638      	mov	r0, r7
 8007314:	f7ff f88c 	bl	8006430 <indev_reset_check>
 8007318:	2800      	cmp	r0, #0
 800731a:	f47f aef5 	bne.w	8007108 <_lv_indev_read_task+0xbc>
            if(i->proc.long_pr_sent == 0) {
 800731e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8007322:	f012 0201 	ands.w	r2, r2, #1
 8007326:	d015      	beq.n	8007354 <_lv_indev_read_task+0x308>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8007328:	2200      	movs	r2, #0
 800732a:	2106      	movs	r1, #6
 800732c:	6828      	ldr	r0, [r5, #0]
 800732e:	f000 fbc1 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff f87c 	bl	8006430 <indev_reset_check>
 8007338:	4602      	mov	r2, r0
 800733a:	2800      	cmp	r0, #0
 800733c:	f47f aee4 	bne.w	8007108 <_lv_indev_read_task+0xbc>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8007340:	2107      	movs	r1, #7
 8007342:	6828      	ldr	r0, [r5, #0]
 8007344:	f000 fbb6 	bl	8007ab4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff f871 	bl	8006430 <indev_reset_check>
 800734e:	2800      	cmp	r0, #0
 8007350:	d0d0      	beq.n	80072f4 <_lv_indev_read_task+0x2a8>
 8007352:	e6d9      	b.n	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8007354:	2103      	movs	r1, #3
 8007356:	6828      	ldr	r0, [r5, #0]
 8007358:	f000 fbac 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff f867 	bl	8006430 <indev_reset_check>
 8007362:	2800      	cmp	r0, #0
 8007364:	d0e0      	beq.n	8007328 <_lv_indev_read_task+0x2dc>
 8007366:	e6cf      	b.n	8007108 <_lv_indev_read_task+0xbc>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8007368:	2b04      	cmp	r3, #4
 800736a:	f040 81d6 	bne.w	800771a <_lv_indev_read_task+0x6ce>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 800736e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8007372:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007376:	2a01      	cmp	r2, #1
 8007378:	f003 0108 	and.w	r1, r3, #8
 800737c:	d151      	bne.n	8007422 <_lv_indev_read_task+0x3d6>
 800737e:	2900      	cmp	r1, #0
 8007380:	f47f aec2 	bne.w	8007108 <_lv_indev_read_task+0xbc>
    i->proc.types.keypad.last_key   = data->key;
 8007384:	9b03      	ldr	r3, [sp, #12]
    lv_group_t * g = i->group;
 8007386:	6da7      	ldr	r7, [r4, #88]	; 0x58
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8007388:	f894 9020 	ldrb.w	r9, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 800738c:	6263      	str	r3, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 800738e:	f884 2020 	strb.w	r2, [r4, #32]
    if(g == NULL) return;
 8007392:	2f00      	cmp	r7, #0
 8007394:	f43f aeb8 	beq.w	8007108 <_lv_indev_read_task+0xbc>
    indev_obj_act = lv_group_get_focused(g);
 8007398:	4638      	mov	r0, r7
 800739a:	f7fe ffba 	bl	8006312 <lv_group_get_focused>
 800739e:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f43f aeb1 	beq.w	8007108 <_lv_indev_read_task+0xbc>
    if(data->state != LV_INDEV_STATE_REL) {
 80073a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80073aa:	b10b      	cbz	r3, 80073b0 <_lv_indev_read_task+0x364>
        data->enc_diff = 0;
 80073ac:	f8ad 6014 	strh.w	r6, [sp, #20]
    indev_obj_act = lv_group_get_focused(g);
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7fe ffae 	bl	8006312 <lv_group_get_focused>
 80073b6:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f43f aea5 	beq.w	8007108 <_lv_indev_read_task+0xbc>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 80073be:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80073c2:	2901      	cmp	r1, #1
 80073c4:	f040 80e2 	bne.w	800758c <_lv_indev_read_task+0x540>
 80073c8:	f1b9 0f00 	cmp.w	r9, #0
 80073cc:	d165      	bne.n	800749a <_lv_indev_read_task+0x44e>
        i->proc.pr_timestamp = lv_tick_get();
 80073ce:	f00b fcb5 	bl	8012d3c <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80073d2:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 80073d4:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 80073d6:	290a      	cmp	r1, #10
 80073d8:	d12f      	bne.n	800743a <_lv_indev_read_task+0x3ee>
            bool editable = false;
 80073da:	aa06      	add	r2, sp, #24
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80073dc:	6828      	ldr	r0, [r5, #0]
 80073de:	2119      	movs	r1, #25
            bool editable = false;
 80073e0:	f802 9d11 	strb.w	r9, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80073e4:	69c3      	ldr	r3, [r0, #28]
 80073e6:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff f81b 	bl	8006424 <lv_group_get_editing>
 80073ee:	b910      	cbnz	r0, 80073f6 <_lv_indev_read_task+0x3aa>
 80073f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80073f4:	bb73      	cbnz	r3, 8007454 <_lv_indev_read_task+0x408>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 80073f6:	6828      	ldr	r0, [r5, #0]
                if(indev_reset_check(&i->proc)) return;
 80073f8:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 80073fa:	2200      	movs	r2, #0
 80073fc:	210b      	movs	r1, #11
 80073fe:	69c3      	ldr	r3, [r0, #28]
 8007400:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8007402:	4620      	mov	r0, r4
 8007404:	f7ff f814 	bl	8006430 <indev_reset_check>
 8007408:	4602      	mov	r2, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	f47f ae7c 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8007410:	4601      	mov	r1, r0
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8007412:	6828      	ldr	r0, [r5, #0]
 8007414:	f000 fb4e 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8007418:	4620      	mov	r0, r4
                if(indev_reset_check(&i->proc)) return;
 800741a:	f7ff f809 	bl	8006430 <indev_reset_check>
 800741e:	b1c8      	cbz	r0, 8007454 <_lv_indev_read_task+0x408>
 8007420:	e672      	b.n	8007108 <_lv_indev_read_task+0xbc>
    if(i->proc.wait_until_release) {
 8007422:	2900      	cmp	r1, #0
 8007424:	d0ae      	beq.n	8007384 <_lv_indev_read_task+0x338>
        i->proc.long_pr_sent            = 0;
 8007426:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
        i->proc.pr_timestamp            = 0;
 800742a:	64a6      	str	r6, [r4, #72]	; 0x48
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 800742c:	f884 6020 	strb.w	r6, [r4, #32]
        i->proc.long_pr_sent            = 0;
 8007430:	f366 0300 	bfi	r3, r6, #0, #1
 8007434:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007438:	e7a4      	b.n	8007384 <_lv_indev_read_task+0x338>
        else if(data->key == LV_KEY_LEFT) {
 800743a:	2914      	cmp	r1, #20
 800743c:	d103      	bne.n	8007446 <_lv_indev_read_task+0x3fa>
                data->enc_diff--;
 800743e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8007442:	3b01      	subs	r3, #1
 8007444:	e004      	b.n	8007450 <_lv_indev_read_task+0x404>
        else if(data->key == LV_KEY_RIGHT) {
 8007446:	2913      	cmp	r1, #19
 8007448:	d117      	bne.n	800747a <_lv_indev_read_task+0x42e>
            data->enc_diff++;
 800744a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800744e:	3301      	adds	r3, #1
 8007450:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(data->enc_diff != 0) {
 8007454:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    indev_obj_act = NULL;
 8007458:	602e      	str	r6, [r5, #0]
    if(data->enc_diff != 0) {
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f ae54 	beq.w	8007108 <_lv_indev_read_task+0xbc>
        if(lv_group_get_editing(g)) {
 8007460:	4638      	mov	r0, r7
 8007462:	f7fe ffdf 	bl	8006424 <lv_group_get_editing>
 8007466:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800746a:	2800      	cmp	r0, #0
 800746c:	f000 813a 	beq.w	80076e4 <_lv_indev_read_task+0x698>
            if(data->enc_diff < 0) {
 8007470:	2b00      	cmp	r3, #0
 8007472:	f280 8129 	bge.w	80076c8 <_lv_indev_read_task+0x67c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8007476:	2400      	movs	r4, #0
 8007478:	e120      	b.n	80076bc <_lv_indev_read_task+0x670>
        else if(data->key == LV_KEY_ESC) {
 800747a:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 800747c:	4638      	mov	r0, r7
        else if(data->key == LV_KEY_ESC) {
 800747e:	d109      	bne.n	8007494 <_lv_indev_read_task+0x448>
            lv_group_send_data(g, LV_KEY_ESC);
 8007480:	f7fe ff4c 	bl	800631c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8007484:	464a      	mov	r2, r9
 8007486:	2114      	movs	r1, #20
 8007488:	6828      	ldr	r0, [r5, #0]
 800748a:	f000 fb13 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800748e:	f104 001c 	add.w	r0, r4, #28
 8007492:	e7c2      	b.n	800741a <_lv_indev_read_task+0x3ce>
            lv_group_send_data(g, data->key);
 8007494:	f7fe ff42 	bl	800631c <lv_group_send_data>
 8007498:	e7dc      	b.n	8007454 <_lv_indev_read_task+0x408>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 800749a:	f1b9 0f01 	cmp.w	r9, #1
 800749e:	d1d9      	bne.n	8007454 <_lv_indev_read_task+0x408>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80074a0:	f894 9050 	ldrb.w	r9, [r4, #80]	; 0x50
 80074a4:	f019 0901 	ands.w	r9, r9, #1
 80074a8:	d147      	bne.n	800753a <_lv_indev_read_task+0x4ee>
 80074aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80074ac:	f00b fc50 	bl	8012d50 <lv_tick_elaps>
 80074b0:	8b23      	ldrh	r3, [r4, #24]
 80074b2:	4298      	cmp	r0, r3
 80074b4:	d941      	bls.n	800753a <_lv_indev_read_task+0x4ee>
            i->proc.long_pr_sent = 1;
 80074b6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80074c2:	f00b fc3b 	bl	8012d3c <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80074c6:	9b03      	ldr	r3, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80074c8:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 80074ca:	2b0a      	cmp	r3, #10
 80074cc:	d117      	bne.n	80074fe <_lv_indev_read_task+0x4b2>
                bool editable = false;
 80074ce:	aa06      	add	r2, sp, #24
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80074d0:	6828      	ldr	r0, [r5, #0]
 80074d2:	2119      	movs	r1, #25
                bool editable = false;
 80074d4:	f802 9d11 	strb.w	r9, [r2, #-17]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80074d8:	69c3      	ldr	r3, [r0, #28]
 80074da:	4798      	blx	r3
                if(editable) {
 80074dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80074e0:	b1a2      	cbz	r2, 800750c <_lv_indev_read_task+0x4c0>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
 80074e2:	4638      	mov	r0, r7
 80074e4:	f00c fa59 	bl	801399a <_lv_ll_get_len>
 80074e8:	2801      	cmp	r0, #1
 80074ea:	d908      	bls.n	80074fe <_lv_indev_read_task+0x4b2>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7fe ff99 	bl	8006424 <lv_group_get_editing>
 80074f2:	f080 0101 	eor.w	r1, r0, #1
 80074f6:	4638      	mov	r0, r7
 80074f8:	b2c9      	uxtb	r1, r1
 80074fa:	f7fe ff24 	bl	8006346 <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 80074fe:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007502:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 8007506:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800750a:	e7a3      	b.n	8007454 <_lv_indev_read_task+0x408>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 800750c:	6828      	ldr	r0, [r5, #0]
                    if(indev_reset_check(&i->proc)) return;
 800750e:	f104 091c 	add.w	r9, r4, #28
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8007512:	210f      	movs	r1, #15
 8007514:	69c3      	ldr	r3, [r0, #28]
 8007516:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 8007518:	4648      	mov	r0, r9
 800751a:	f7fe ff89 	bl	8006430 <indev_reset_check>
 800751e:	4602      	mov	r2, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	f47f adf1 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8007526:	2104      	movs	r1, #4
 8007528:	6828      	ldr	r0, [r5, #0]
 800752a:	f000 fac3 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 800752e:	4648      	mov	r0, r9
 8007530:	f7fe ff7e 	bl	8006430 <indev_reset_check>
 8007534:	2800      	cmp	r0, #0
 8007536:	d0e2      	beq.n	80074fe <_lv_indev_read_task+0x4b2>
 8007538:	e5e6      	b.n	8007108 <_lv_indev_read_task+0xbc>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 800753a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d588      	bpl.n	8007454 <_lv_indev_read_task+0x408>
 8007542:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007544:	f00b fc04 	bl	8012d50 <lv_tick_elaps>
 8007548:	8b63      	ldrh	r3, [r4, #26]
 800754a:	4298      	cmp	r0, r3
 800754c:	d982      	bls.n	8007454 <_lv_indev_read_task+0x408>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800754e:	f00b fbf5 	bl	8012d3c <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8007552:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8007554:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8007556:	290a      	cmp	r1, #10
 8007558:	d10e      	bne.n	8007578 <_lv_indev_read_task+0x52c>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 800755a:	6828      	ldr	r0, [r5, #0]
                if(indev_reset_check(&i->proc)) return;
 800755c:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 800755e:	2200      	movs	r2, #0
 8007560:	2110      	movs	r1, #16
 8007562:	69c3      	ldr	r3, [r0, #28]
 8007564:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8007566:	4620      	mov	r0, r4
 8007568:	f7fe ff62 	bl	8006430 <indev_reset_check>
 800756c:	4602      	mov	r2, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	f47f adca 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8007574:	2105      	movs	r1, #5
 8007576:	e74c      	b.n	8007412 <_lv_indev_read_task+0x3c6>
            else if(data->key == LV_KEY_LEFT) {
 8007578:	2914      	cmp	r1, #20
 800757a:	f43f af60 	beq.w	800743e <_lv_indev_read_task+0x3f2>
            else if(data->key == LV_KEY_RIGHT) {
 800757e:	2913      	cmp	r1, #19
 8007580:	f43f af63 	beq.w	800744a <_lv_indev_read_task+0x3fe>
                lv_group_send_data(g, data->key);
 8007584:	4638      	mov	r0, r7
 8007586:	f7fe fec9 	bl	800631c <lv_group_send_data>
 800758a:	e780      	b.n	800748e <_lv_indev_read_task+0x442>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 800758c:	2900      	cmp	r1, #0
 800758e:	f47f af61 	bne.w	8007454 <_lv_indev_read_task+0x408>
 8007592:	f1b9 0f01 	cmp.w	r9, #1
 8007596:	f47f af5d 	bne.w	8007454 <_lv_indev_read_task+0x408>
        if(data->key == LV_KEY_ENTER) {
 800759a:	9a03      	ldr	r2, [sp, #12]
 800759c:	2a0a      	cmp	r2, #10
 800759e:	d13a      	bne.n	8007616 <_lv_indev_read_task+0x5ca>
            bool editable = false;
 80075a0:	aa06      	add	r2, sp, #24
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80075a2:	69c3      	ldr	r3, [r0, #28]
            bool editable = false;
 80075a4:	f802 1d11 	strb.w	r1, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80075a8:	2119      	movs	r1, #25
 80075aa:	4798      	blx	r3
            if(editable == false) {
 80075ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	d136      	bne.n	8007622 <_lv_indev_read_task+0x5d6>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80075b4:	6828      	ldr	r0, [r5, #0]
                if(indev_reset_check(&i->proc)) return;
 80075b6:	f104 091c 	add.w	r9, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80075ba:	210e      	movs	r1, #14
 80075bc:	69c3      	ldr	r3, [r0, #28]
 80075be:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80075c0:	4648      	mov	r0, r9
 80075c2:	f7fe ff35 	bl	8006430 <indev_reset_check>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f47f ad9e 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80075cc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80075d0:	f012 0201 	ands.w	r2, r2, #1
 80075d4:	d103      	bne.n	80075de <_lv_indev_read_task+0x592>
 80075d6:	2103      	movs	r1, #3
 80075d8:	6828      	ldr	r0, [r5, #0]
 80075da:	f000 fa6b 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80075de:	4648      	mov	r0, r9
 80075e0:	f7fe ff26 	bl	8006430 <indev_reset_check>
 80075e4:	4602      	mov	r2, r0
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f47f ad8e 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80075ec:	2106      	movs	r1, #6
 80075ee:	6828      	ldr	r0, [r5, #0]
 80075f0:	f000 fa60 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80075f4:	4648      	mov	r0, r9
 80075f6:	f7fe ff1b 	bl	8006430 <indev_reset_check>
 80075fa:	4602      	mov	r2, r0
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f47f ad83 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8007602:	2107      	movs	r1, #7
 8007604:	6828      	ldr	r0, [r5, #0]
 8007606:	f000 fa55 	bl	8007ab4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800760a:	4648      	mov	r0, r9
 800760c:	f7fe ff10 	bl	8006430 <indev_reset_check>
 8007610:	2800      	cmp	r0, #0
 8007612:	f47f ad79 	bne.w	8007108 <_lv_indev_read_task+0xbc>
        i->proc.long_pr_sent = 0;
 8007616:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp = 0;
 800761a:	64a6      	str	r6, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 800761c:	f366 0300 	bfi	r3, r6, #0, #1
 8007620:	e771      	b.n	8007506 <_lv_indev_read_task+0x4ba>
            else if(g->editing) {
 8007622:	7d3a      	ldrb	r2, [r7, #20]
 8007624:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007628:	0792      	lsls	r2, r2, #30
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	d539      	bpl.n	80076a4 <_lv_indev_read_task+0x658>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 8007630:	bb93      	cbnz	r3, 8007698 <_lv_indev_read_task+0x64c>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8007632:	6828      	ldr	r0, [r5, #0]
                    if(indev_reset_check(&i->proc)) return;
 8007634:	f104 091c 	add.w	r9, r4, #28
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8007638:	2200      	movs	r2, #0
 800763a:	210e      	movs	r1, #14
 800763c:	69c3      	ldr	r3, [r0, #28]
 800763e:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 8007640:	4648      	mov	r0, r9
 8007642:	f7fe fef5 	bl	8006430 <indev_reset_check>
 8007646:	4602      	mov	r2, r0
 8007648:	2800      	cmp	r0, #0
 800764a:	f47f ad5d 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800764e:	2103      	movs	r1, #3
 8007650:	6828      	ldr	r0, [r5, #0]
 8007652:	f000 fa2f 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8007656:	4648      	mov	r0, r9
 8007658:	f7fe feea 	bl	8006430 <indev_reset_check>
 800765c:	4602      	mov	r2, r0
 800765e:	2800      	cmp	r0, #0
 8007660:	f47f ad52 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8007664:	2106      	movs	r1, #6
 8007666:	6828      	ldr	r0, [r5, #0]
 8007668:	f000 fa24 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 800766c:	4648      	mov	r0, r9
 800766e:	f7fe fedf 	bl	8006430 <indev_reset_check>
 8007672:	4602      	mov	r2, r0
 8007674:	2800      	cmp	r0, #0
 8007676:	f47f ad47 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 800767a:	2107      	movs	r1, #7
 800767c:	6828      	ldr	r0, [r5, #0]
 800767e:	f000 fa19 	bl	8007ab4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8007682:	4648      	mov	r0, r9
 8007684:	f7fe fed4 	bl	8006430 <indev_reset_check>
 8007688:	2800      	cmp	r0, #0
 800768a:	f47f ad3d 	bne.w	8007108 <_lv_indev_read_task+0xbc>
                    lv_group_send_data(g, LV_KEY_ENTER);
 800768e:	210a      	movs	r1, #10
 8007690:	4638      	mov	r0, r7
 8007692:	f7fe fe43 	bl	800631c <lv_group_send_data>
 8007696:	e7be      	b.n	8007616 <_lv_indev_read_task+0x5ca>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 8007698:	4638      	mov	r0, r7
 800769a:	f00c f97e 	bl	801399a <_lv_ll_get_len>
 800769e:	2801      	cmp	r0, #1
 80076a0:	d8b9      	bhi.n	8007616 <_lv_indev_read_task+0x5ca>
 80076a2:	e7c6      	b.n	8007632 <_lv_indev_read_task+0x5e6>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1b6      	bne.n	8007616 <_lv_indev_read_task+0x5ca>
                lv_group_set_editing(g, true); /*Set edit mode*/
 80076a8:	4649      	mov	r1, r9
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7fe fe4b 	bl	8006346 <lv_group_set_editing>
 80076b0:	e7b1      	b.n	8007616 <_lv_indev_read_task+0x5ca>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 80076b2:	3401      	adds	r4, #1
 80076b4:	2114      	movs	r1, #20
 80076b6:	4638      	mov	r0, r7
 80076b8:	f7fe fe30 	bl	800631c <lv_group_send_data>
 80076bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80076c0:	425b      	negs	r3, r3
 80076c2:	429c      	cmp	r4, r3
 80076c4:	dbf5      	blt.n	80076b2 <_lv_indev_read_task+0x666>
 80076c6:	e51f      	b.n	8007108 <_lv_indev_read_task+0xbc>
            else if(data->enc_diff > 0) {
 80076c8:	f43f ad1e 	beq.w	8007108 <_lv_indev_read_task+0xbc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 80076cc:	2400      	movs	r4, #0
 80076ce:	e004      	b.n	80076da <_lv_indev_read_task+0x68e>
 80076d0:	3401      	adds	r4, #1
 80076d2:	2113      	movs	r1, #19
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7fe fe21 	bl	800631c <lv_group_send_data>
 80076da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80076de:	429c      	cmp	r4, r3
 80076e0:	dbf6      	blt.n	80076d0 <_lv_indev_read_task+0x684>
 80076e2:	e511      	b.n	8007108 <_lv_indev_read_task+0xbc>
            if(data->enc_diff < 0) {
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0b      	bge.n	8007700 <_lv_indev_read_task+0x6b4>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 80076e8:	4604      	mov	r4, r0
 80076ea:	e003      	b.n	80076f4 <_lv_indev_read_task+0x6a8>
 80076ec:	3401      	adds	r4, #1
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7fe fd7a 	bl	80061e8 <lv_group_focus_prev>
 80076f4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80076f8:	425b      	negs	r3, r3
 80076fa:	429c      	cmp	r4, r3
 80076fc:	dbf6      	blt.n	80076ec <_lv_indev_read_task+0x6a0>
 80076fe:	e503      	b.n	8007108 <_lv_indev_read_task+0xbc>
            else if(data->enc_diff > 0) {
 8007700:	f43f ad02 	beq.w	8007108 <_lv_indev_read_task+0xbc>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8007704:	4604      	mov	r4, r0
 8007706:	e003      	b.n	8007710 <_lv_indev_read_task+0x6c4>
 8007708:	3401      	adds	r4, #1
 800770a:	4638      	mov	r0, r7
 800770c:	f7fe fd60 	bl	80061d0 <lv_group_focus_next>
 8007710:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007714:	429c      	cmp	r4, r3
 8007716:	dbf7      	blt.n	8007708 <_lv_indev_read_task+0x6bc>
 8007718:	e4f6      	b.n	8007108 <_lv_indev_read_task+0xbc>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 800771a:	2b03      	cmp	r3, #3
 800771c:	f47f acf4 	bne.w	8007108 <_lv_indev_read_task+0xbc>
    if(i->btn_points == NULL) {
 8007720:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007722:	2b00      	cmp	r3, #0
 8007724:	f43f acf0 	beq.w	8007108 <_lv_indev_read_task+0xbc>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	f104 071c 	add.w	r7, r4, #28
 800772e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007732:	f933 a022 	ldrsh.w	sl, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PR) {
 8007736:	f89d 3016 	ldrb.w	r3, [sp, #22]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 800773a:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10a      	bne.n	8007758 <_lv_indev_read_task+0x70c>
        if(i->proc.types.pointer.last_point.x != x ||
 8007742:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8007746:	4553      	cmp	r3, sl
 8007748:	d103      	bne.n	8007752 <_lv_indev_read_task+0x706>
 800774a:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800774e:	454b      	cmp	r3, r9
 8007750:	d002      	beq.n	8007758 <_lv_indev_read_task+0x70c>
            indev_proc_release(&i->proc);
 8007752:	4638      	mov	r0, r7
 8007754:	f7fe ff82 	bl	800665c <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 8007758:	4638      	mov	r0, r7
 800775a:	f7fe fe69 	bl	8006430 <indev_reset_check>
 800775e:	2800      	cmp	r0, #0
 8007760:	f47f acd2 	bne.w	8007108 <_lv_indev_read_task+0xbc>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8007764:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007768:	4638      	mov	r0, r7
    i->proc.types.pointer.act_point.x = x;
 800776a:	f8a4 a020 	strh.w	sl, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 800776e:	2b01      	cmp	r3, #1
    i->proc.types.pointer.act_point.y = y;
 8007770:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8007774:	d108      	bne.n	8007788 <_lv_indev_read_task+0x73c>
 8007776:	f7ff f8c3 	bl	8006900 <indev_proc_press>
    if(indev_reset_check(&i->proc)) return;
 800777a:	4638      	mov	r0, r7
 800777c:	f7fe fe58 	bl	8006430 <indev_reset_check>
 8007780:	2800      	cmp	r0, #0
 8007782:	f43f acad 	beq.w	80070e0 <_lv_indev_read_task+0x94>
 8007786:	e4bf      	b.n	8007108 <_lv_indev_read_task+0xbc>
    else indev_proc_release(&i->proc);
 8007788:	f7fe ff68 	bl	800665c <indev_proc_release>
 800778c:	e7f5      	b.n	800777a <_lv_indev_read_task+0x72e>
 800778e:	bf00      	nop

08007790 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
 8007790:	2850      	cmp	r0, #80	; 0x50
 8007792:	d00e      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 8007794:	d81d      	bhi.n	80077d2 <style_prop_is_cacheble+0x42>
 8007796:	2818      	cmp	r0, #24
 8007798:	d80d      	bhi.n	80077b6 <style_prop_is_cacheble+0x26>
 800779a:	2815      	cmp	r0, #21
 800779c:	d209      	bcs.n	80077b2 <style_prop_is_cacheble+0x22>
 800779e:	2807      	cmp	r0, #7
 80077a0:	d804      	bhi.n	80077ac <style_prop_is_cacheble+0x1c>
 80077a2:	2804      	cmp	r0, #4
 80077a4:	d205      	bcs.n	80077b2 <style_prop_is_cacheble+0x22>
 80077a6:	3801      	subs	r0, #1
 80077a8:	2801      	cmp	r0, #1
 80077aa:	e001      	b.n	80077b0 <style_prop_is_cacheble+0x20>
 80077ac:	3810      	subs	r0, #16
 80077ae:	2803      	cmp	r0, #3
 80077b0:	d809      	bhi.n	80077c6 <style_prop_is_cacheble+0x36>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 80077b2:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
 80077b4:	4770      	bx	lr
    switch(prop) {
 80077b6:	2833      	cmp	r0, #51	; 0x33
 80077b8:	d807      	bhi.n	80077ca <style_prop_is_cacheble+0x3a>
 80077ba:	2830      	cmp	r0, #48	; 0x30
 80077bc:	d2f9      	bcs.n	80077b2 <style_prop_is_cacheble+0x22>
 80077be:	2820      	cmp	r0, #32
 80077c0:	d0f7      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077c2:	282c      	cmp	r0, #44	; 0x2c
 80077c4:	d0f5      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
            return false;
 80077c6:	2000      	movs	r0, #0
 80077c8:	4770      	bx	lr
    switch(prop) {
 80077ca:	2840      	cmp	r0, #64	; 0x40
 80077cc:	d0f1      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077ce:	2842      	cmp	r0, #66	; 0x42
 80077d0:	e7f8      	b.n	80077c4 <style_prop_is_cacheble+0x34>
 80077d2:	28ff      	cmp	r0, #255	; 0xff
 80077d4:	d0ed      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077d6:	d80c      	bhi.n	80077f2 <style_prop_is_cacheble+0x62>
 80077d8:	286e      	cmp	r0, #110	; 0x6e
 80077da:	d0ea      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077dc:	d803      	bhi.n	80077e6 <style_prop_is_cacheble+0x56>
 80077de:	2854      	cmp	r0, #84	; 0x54
 80077e0:	d0e7      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077e2:	2860      	cmp	r0, #96	; 0x60
 80077e4:	e7ee      	b.n	80077c4 <style_prop_is_cacheble+0x34>
 80077e6:	287f      	cmp	r0, #127	; 0x7f
 80077e8:	d0e3      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077ea:	2891      	cmp	r0, #145	; 0x91
 80077ec:	d0e1      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077ee:	2872      	cmp	r0, #114	; 0x72
 80077f0:	e7e8      	b.n	80077c4 <style_prop_is_cacheble+0x34>
 80077f2:	f248 0383 	movw	r3, #32899	; 0x8083
 80077f6:	4298      	cmp	r0, r3
 80077f8:	d0db      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 80077fa:	d808      	bhi.n	800780e <style_prop_is_cacheble+0x7e>
 80077fc:	f248 030c 	movw	r3, #32780	; 0x800c
 8007800:	4298      	cmp	r0, r3
 8007802:	d0d6      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 8007804:	d3df      	bcc.n	80077c6 <style_prop_is_cacheble+0x36>
 8007806:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800780a:	3880      	subs	r0, #128	; 0x80
 800780c:	e7cc      	b.n	80077a8 <style_prop_is_cacheble+0x18>
 800780e:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8007812:	4298      	cmp	r0, r3
 8007814:	d0cd      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 8007816:	f248 03ad 	movw	r3, #32941	; 0x80ad
 800781a:	4298      	cmp	r0, r3
 800781c:	d0c9      	beq.n	80077b2 <style_prop_is_cacheble+0x22>
 800781e:	f248 038e 	movw	r3, #32910	; 0x808e
 8007822:	4298      	cmp	r0, r3
 8007824:	e7ce      	b.n	80077c4 <style_prop_is_cacheble+0x34>

08007826 <refresh_children_position>:
{
 8007826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _LV_LL_READ(obj->child_ll, i) {
 800782a:	1d05      	adds	r5, r0, #4
{
 800782c:	460e      	mov	r6, r1
 800782e:	4617      	mov	r7, r2
    _LV_LL_READ(obj->child_ll, i) {
 8007830:	4628      	mov	r0, r5
        i->coords.x1 += x_diff;
 8007832:	fa1f f886 	uxth.w	r8, r6
    _LV_LL_READ(obj->child_ll, i) {
 8007836:	f00c f80d 	bl	8013854 <_lv_ll_get_head>
 800783a:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 800783c:	fa1f f987 	uxth.w	r9, r7
    _LV_LL_READ(obj->child_ll, i) {
 8007840:	b90c      	cbnz	r4, 8007846 <refresh_children_position+0x20>
}
 8007842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 8007846:	8a23      	ldrh	r3, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 8007848:	4620      	mov	r0, r4
 800784a:	463a      	mov	r2, r7
 800784c:	4631      	mov	r1, r6
        i->coords.x1 += x_diff;
 800784e:	4443      	add	r3, r8
 8007850:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8007852:	8a63      	ldrh	r3, [r4, #18]
 8007854:	444b      	add	r3, r9
 8007856:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 8007858:	8aa3      	ldrh	r3, [r4, #20]
 800785a:	4443      	add	r3, r8
 800785c:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 800785e:	8ae3      	ldrh	r3, [r4, #22]
 8007860:	444b      	add	r3, r9
 8007862:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8007864:	f7ff ffdf 	bl	8007826 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f00b fff8 	bl	8013860 <_lv_ll_get_next>
 8007870:	4604      	mov	r4, r0
 8007872:	e7e5      	b.n	8007840 <refresh_children_position+0x1a>

08007874 <lv_obj_add_state.part.37>:
void lv_obj_set_click(lv_obj_t * obj, bool en)
 8007874:	b508      	push	{r3, lr}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007876:	4602      	mov	r2, r0
 8007878:	2300      	movs	r3, #0
 800787a:	4802      	ldr	r0, [pc, #8]	; (8007884 <lv_obj_add_state.part.37+0x10>)
 800787c:	f00b fec0 	bl	8013600 <lv_debug_log_error>
 8007880:	e7fe      	b.n	8007880 <lv_obj_add_state.part.37+0xc>
 8007882:	bf00      	nop
 8007884:	0802c354 	.word	0x0802c354

08007888 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8007888:	3901      	subs	r1, #1
 800788a:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800788e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007892:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 8007896:	4298      	cmp	r0, r3
 8007898:	d1f9      	bne.n	800788e <lv_area_copy+0x6>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
 800789a:	4770      	bx	lr

0800789c <lv_init>:
{
 800789c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(lv_initialized) {
 800789e:	4c1a      	ldr	r4, [pc, #104]	; (8007908 <lv_init+0x6c>)
 80078a0:	7823      	ldrb	r3, [r4, #0]
 80078a2:	bb73      	cbnz	r3, 8007902 <lv_init+0x66>
    _lv_mem_init();
 80078a4:	f00c f944 	bl	8013b30 <_lv_mem_init>
    _lv_task_core_init();
 80078a8:	f00c ff9a 	bl	80147e0 <_lv_task_core_init>
    _lv_fs_init();
 80078ac:	f00b fec2 	bl	8013634 <_lv_fs_init>
    _lv_anim_core_init();
 80078b0:	f00b fb20 	bl	8012ef4 <_lv_anim_core_init>
    _lv_group_init();
 80078b4:	f7fe fc86 	bl	80061c4 <_lv_group_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 80078b8:	2110      	movs	r1, #16
 80078ba:	4814      	ldr	r0, [pc, #80]	; (800790c <lv_init+0x70>)
 80078bc:	f00b ff8b 	bl	80137d6 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80078c0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80078c4:	4812      	ldr	r0, [pc, #72]	; (8007910 <lv_init+0x74>)
 80078c6:	f00b ff86 	bl	80137d6 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80078ca:	2160      	movs	r1, #96	; 0x60
 80078cc:	4811      	ldr	r0, [pc, #68]	; (8007914 <lv_init+0x78>)
 80078ce:	f00b ff82 	bl	80137d6 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 80078d2:	4b11      	ldr	r3, [pc, #68]	; (8007918 <lv_init+0x7c>)
 80078d4:	2202      	movs	r2, #2
 80078d6:	f244 6196 	movw	r1, #18070	; 0x4696
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f240 5016 	movw	r0, #1302	; 0x516
 80078e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80078e4:	f00f ff44 	bl	8017770 <lv_theme_material_init>
    lv_theme_set_act(th);
 80078e8:	f00d fc5e 	bl	80151a8 <lv_theme_set_act>
    _lv_refr_init();
 80078ec:	f003 fa60 	bl	800adb0 <_lv_refr_init>
    _lv_indev_init();
 80078f0:	f7fe ff5e 	bl	80067b0 <_lv_indev_init>
    _lv_img_decoder_init();
 80078f4:	f00a fd1a 	bl	801232c <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 80078f8:	2001      	movs	r0, #1
 80078fa:	f00a f905 	bl	8011b08 <lv_img_cache_set_size>
    lv_initialized = true;
 80078fe:	2301      	movs	r3, #1
 8007900:	7023      	strb	r3, [r4, #0]
}
 8007902:	b004      	add	sp, #16
 8007904:	bd10      	pop	{r4, pc}
 8007906:	bf00      	nop
 8007908:	200206e4 	.word	0x200206e4
 800790c:	20028ca0 	.word	0x20028ca0
 8007910:	20028bfc 	.word	0x20028bfc
 8007914:	20028bf0 	.word	0x20028bf0
 8007918:	20000064 	.word	0x20000064

0800791c <lv_obj_set_ext_click_area>:
{
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	460f      	mov	r7, r1
 8007922:	4615      	mov	r5, r2
 8007924:	461e      	mov	r6, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007926:	f00b fe67 	bl	80135f8 <lv_debug_check_null>
 800792a:	b928      	cbnz	r0, 8007938 <lv_obj_set_ext_click_area+0x1c>
 800792c:	4603      	mov	r3, r0
 800792e:	4622      	mov	r2, r4
 8007930:	4808      	ldr	r0, [pc, #32]	; (8007954 <lv_obj_set_ext_click_area+0x38>)
 8007932:	f00b fe65 	bl	8013600 <lv_debug_log_error>
 8007936:	e7fe      	b.n	8007936 <lv_obj_set_ext_click_area+0x1a>
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
 8007938:	42bd      	cmp	r5, r7
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 800793a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
 800793e:	bfb8      	it	lt
 8007940:	463d      	movlt	r5, r7
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 8007942:	42b2      	cmp	r2, r6
 8007944:	4613      	mov	r3, r2
 8007946:	bfb8      	it	lt
 8007948:	4633      	movlt	r3, r6
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
 800794a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 800794e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8007952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007954:	0802c354 	.word	0x0802c354

08007958 <lv_obj_set_adv_hittest>:
{
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800795e:	f00b fe4b 	bl	80135f8 <lv_debug_check_null>
 8007962:	4603      	mov	r3, r0
 8007964:	b920      	cbnz	r0, 8007970 <lv_obj_set_adv_hittest+0x18>
 8007966:	4622      	mov	r2, r4
 8007968:	4805      	ldr	r0, [pc, #20]	; (8007980 <lv_obj_set_adv_hittest+0x28>)
 800796a:	f00b fe49 	bl	8013600 <lv_debug_log_error>
 800796e:	e7fe      	b.n	800796e <lv_obj_set_adv_hittest+0x16>
    obj->adv_hittest = en == false ? 0 : 1;
 8007970:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007974:	f365 13c7 	bfi	r3, r5, #7, #1
 8007978:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	0802c354 	.word	0x0802c354

08007984 <lv_obj_set_click>:
{
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800798a:	f00b fe35 	bl	80135f8 <lv_debug_check_null>
 800798e:	b910      	cbnz	r0, 8007996 <lv_obj_set_click+0x12>
 8007990:	4620      	mov	r0, r4
 8007992:	f7ff ff6f 	bl	8007874 <lv_obj_add_state.part.37>
    obj->click = (en == true ? 1 : 0);
 8007996:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800799a:	f365 0300 	bfi	r3, r5, #0, #1
 800799e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80079a2:	bd38      	pop	{r3, r4, r5, pc}

080079a4 <lv_obj_add_protect>:
{
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4604      	mov	r4, r0
 80079a8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80079aa:	f00b fe25 	bl	80135f8 <lv_debug_check_null>
 80079ae:	4603      	mov	r3, r0
 80079b0:	b920      	cbnz	r0, 80079bc <lv_obj_add_protect+0x18>
 80079b2:	4622      	mov	r2, r4
 80079b4:	4804      	ldr	r0, [pc, #16]	; (80079c8 <lv_obj_add_protect+0x24>)
 80079b6:	f00b fe23 	bl	8013600 <lv_debug_log_error>
 80079ba:	e7fe      	b.n	80079ba <lv_obj_add_protect+0x16>
    obj->protect |= prot;
 80079bc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80079c0:	430d      	orrs	r5, r1
 80079c2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	0802c354 	.word	0x0802c354

080079cc <lv_obj_clear_protect>:
{
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80079d2:	f00b fe11 	bl	80135f8 <lv_debug_check_null>
 80079d6:	4603      	mov	r3, r0
 80079d8:	b920      	cbnz	r0, 80079e4 <lv_obj_clear_protect+0x18>
 80079da:	4622      	mov	r2, r4
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <lv_obj_clear_protect+0x28>)
 80079de:	f00b fe0f 	bl	8013600 <lv_debug_log_error>
 80079e2:	e7fe      	b.n	80079e2 <lv_obj_clear_protect+0x16>
    obj->protect &= prot;
 80079e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80079e8:	ea23 0105 	bic.w	r1, r3, r5
 80079ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	0802c354 	.word	0x0802c354

080079f8 <lv_obj_set_event_cb>:
{
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4604      	mov	r4, r0
 80079fc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80079fe:	f00b fdfb 	bl	80135f8 <lv_debug_check_null>
 8007a02:	4603      	mov	r3, r0
 8007a04:	b920      	cbnz	r0, 8007a10 <lv_obj_set_event_cb+0x18>
 8007a06:	4622      	mov	r2, r4
 8007a08:	4802      	ldr	r0, [pc, #8]	; (8007a14 <lv_obj_set_event_cb+0x1c>)
 8007a0a:	f00b fdf9 	bl	8013600 <lv_debug_log_error>
 8007a0e:	e7fe      	b.n	8007a0e <lv_obj_set_event_cb+0x16>
    obj->event_cb = event_cb;
 8007a10:	61a5      	str	r5, [r4, #24]
}
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	0802c354 	.word	0x0802c354

08007a18 <lv_event_send_func>:
{
 8007a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	b085      	sub	sp, #20
 8007a20:	4616      	mov	r6, r2
 8007a22:	461f      	mov	r7, r3
    if(obj != NULL) {
 8007a24:	460d      	mov	r5, r1
 8007a26:	b149      	cbz	r1, 8007a3c <lv_event_send_func+0x24>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007a28:	4608      	mov	r0, r1
 8007a2a:	f00b fde5 	bl	80135f8 <lv_debug_check_null>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	b920      	cbnz	r0, 8007a3c <lv_event_send_func+0x24>
 8007a32:	462a      	mov	r2, r5
 8007a34:	481d      	ldr	r0, [pc, #116]	; (8007aac <lv_event_send_func+0x94>)
 8007a36:	f00b fde3 	bl	8013600 <lv_debug_log_error>
 8007a3a:	e7fe      	b.n	8007a3a <lv_event_send_func+0x22>
    event_temp_data.deleted = false;
 8007a3c:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 8007a3e:	4c1c      	ldr	r4, [pc, #112]	; (8007ab0 <lv_event_send_func+0x98>)
    event_temp_data.obj     = obj;
 8007a40:	9501      	str	r5, [sp, #4]
    event_temp_data.deleted = false;
 8007a42:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 8007a46:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	b103      	cbz	r3, 8007a4e <lv_event_send_func+0x36>
        event_temp_data.prev = event_temp_data_head;
 8007a4c:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
 8007a4e:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 8007a50:	f8d4 9008 	ldr.w	r9, [r4, #8]
    event_act_data                   = data;
 8007a54:	60a7      	str	r7, [r4, #8]
    event_temp_data_head = &event_temp_data;
 8007a56:	6063      	str	r3, [r4, #4]
    lv_indev_t * indev_act = lv_indev_get_act();
 8007a58:	f7fe feae 	bl	80067b8 <lv_indev_get_act>
    if(indev_act) {
 8007a5c:	b118      	cbz	r0, 8007a66 <lv_event_send_func+0x4e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8007a5e:	6883      	ldr	r3, [r0, #8]
 8007a60:	b10b      	cbz	r3, 8007a66 <lv_event_send_func+0x4e>
 8007a62:	4631      	mov	r1, r6
 8007a64:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8007a66:	f1b8 0f00 	cmp.w	r8, #0
 8007a6a:	d002      	beq.n	8007a72 <lv_event_send_func+0x5a>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
 8007a72:	6863      	ldr	r3, [r4, #4]
    event_act_data = event_act_data_save;
 8007a74:	f8c4 9008 	str.w	r9, [r4, #8]
    event_temp_data_head = event_temp_data_head->prev;
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	6063      	str	r3, [r4, #4]
    if(event_temp_data.deleted) {
 8007a7c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007a80:	b983      	cbnz	r3, 8007aa4 <lv_event_send_func+0x8c>
    if(obj) {
 8007a82:	b18d      	cbz	r5, 8007aa8 <lv_event_send_func+0x90>
        if(obj->parent_event && obj->parent) {
 8007a84:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8007a88:	065a      	lsls	r2, r3, #25
 8007a8a:	d50d      	bpl.n	8007aa8 <lv_event_send_func+0x90>
 8007a8c:	6828      	ldr	r0, [r5, #0]
 8007a8e:	b158      	cbz	r0, 8007aa8 <lv_event_send_func+0x90>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 8007a90:	463a      	mov	r2, r7
 8007a92:	4631      	mov	r1, r6
 8007a94:	f000 f80e 	bl	8007ab4 <lv_event_send>
        return LV_RES_INV;
 8007a98:	1e43      	subs	r3, r0, #1
 8007a9a:	4258      	negs	r0, r3
 8007a9c:	4158      	adcs	r0, r3
}
 8007a9e:	b005      	add	sp, #20
 8007aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LV_RES_INV;
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e7fa      	b.n	8007a9e <lv_event_send_func+0x86>
    return LV_RES_OK;
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	e7f8      	b.n	8007a9e <lv_event_send_func+0x86>
 8007aac:	0802c354 	.word	0x0802c354
 8007ab0:	200206e4 	.word	0x200206e4

08007ab4 <lv_event_send>:
{
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	4616      	mov	r6, r2
    if(obj == NULL) return LV_RES_OK;
 8007aba:	4604      	mov	r4, r0
 8007abc:	b180      	cbz	r0, 8007ae0 <lv_event_send+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007abe:	f00b fd9b 	bl	80135f8 <lv_debug_check_null>
 8007ac2:	b928      	cbnz	r0, 8007ad0 <lv_event_send+0x1c>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	4806      	ldr	r0, [pc, #24]	; (8007ae4 <lv_event_send+0x30>)
 8007aca:	f00b fd99 	bl	8013600 <lv_debug_log_error>
 8007ace:	e7fe      	b.n	8007ace <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8007ad0:	4633      	mov	r3, r6
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	69a0      	ldr	r0, [r4, #24]
}
 8007ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8007adc:	f7ff bf9c 	b.w	8007a18 <lv_event_send_func>
}
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	0802c354 	.word	0x0802c354

08007ae8 <lv_event_get_data>:
}
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <lv_event_get_data+0x8>)
 8007aea:	6898      	ldr	r0, [r3, #8]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	200206e4 	.word	0x200206e4

08007af4 <lv_obj_set_signal_cb>:
{
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4604      	mov	r4, r0
 8007af8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007afa:	f00b fd7d 	bl	80135f8 <lv_debug_check_null>
 8007afe:	4603      	mov	r3, r0
 8007b00:	b920      	cbnz	r0, 8007b0c <lv_obj_set_signal_cb+0x18>
 8007b02:	4622      	mov	r2, r4
 8007b04:	4802      	ldr	r0, [pc, #8]	; (8007b10 <lv_obj_set_signal_cb+0x1c>)
 8007b06:	f00b fd7b 	bl	8013600 <lv_debug_log_error>
 8007b0a:	e7fe      	b.n	8007b0a <lv_obj_set_signal_cb+0x16>
    obj->signal_cb = signal_cb;
 8007b0c:	61e5      	str	r5, [r4, #28]
}
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	0802c354 	.word	0x0802c354

08007b14 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
 8007b14:	b110      	cbz	r0, 8007b1c <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8007b16:	69c3      	ldr	r3, [r0, #28]
 8007b18:	b103      	cbz	r3, 8007b1c <lv_signal_send+0x8>
 8007b1a:	4718      	bx	r3
}
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	4770      	bx	lr

08007b20 <lv_obj_set_design_cb>:
{
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4604      	mov	r4, r0
 8007b24:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b26:	f00b fd67 	bl	80135f8 <lv_debug_check_null>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	b920      	cbnz	r0, 8007b38 <lv_obj_set_design_cb+0x18>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	4802      	ldr	r0, [pc, #8]	; (8007b3c <lv_obj_set_design_cb+0x1c>)
 8007b32:	f00b fd65 	bl	8013600 <lv_debug_log_error>
 8007b36:	e7fe      	b.n	8007b36 <lv_obj_set_design_cb+0x16>
    obj->design_cb = design_cb;
 8007b38:	6225      	str	r5, [r4, #32]
}
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	0802c354 	.word	0x0802c354

08007b40 <lv_obj_allocate_ext_attr>:
{
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4604      	mov	r4, r0
 8007b44:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b46:	f00b fd57 	bl	80135f8 <lv_debug_check_null>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	b920      	cbnz	r0, 8007b58 <lv_obj_allocate_ext_attr+0x18>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <lv_obj_allocate_ext_attr+0x28>)
 8007b52:	f00b fd55 	bl	8013600 <lv_debug_log_error>
 8007b56:	e7fe      	b.n	8007b56 <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
 8007b58:	4629      	mov	r1, r5
 8007b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b5c:	f00c f9bc 	bl	8013ed8 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
 8007b60:	b100      	cbz	r0, 8007b64 <lv_obj_allocate_ext_attr+0x24>
    obj->ext_attr = new_ext;
 8007b62:	6260      	str	r0, [r4, #36]	; 0x24
}
 8007b64:	bd38      	pop	{r3, r4, r5, pc}
 8007b66:	bf00      	nop
 8007b68:	0802c354 	.word	0x0802c354

08007b6c <lv_obj_refresh_ext_draw_pad>:
{
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b70:	f00b fd42 	bl	80135f8 <lv_debug_check_null>
 8007b74:	b910      	cbnz	r0, 8007b7c <lv_obj_refresh_ext_draw_pad+0x10>
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7ff fe7c 	bl	8007874 <lv_obj_add_state.part.37>
    obj->ext_draw_pad = 0;
 8007b7c:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8007b7e:	69e3      	ldr	r3, [r4, #28]
 8007b80:	4620      	mov	r0, r4
 8007b82:	2106      	movs	r1, #6
    obj->ext_draw_pad = 0;
 8007b84:	8662      	strh	r2, [r4, #50]	; 0x32
}
 8007b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8007b8a:	4718      	bx	r3

08007b8c <lv_obj_get_parent>:
{
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b90:	f00b fd32 	bl	80135f8 <lv_debug_check_null>
 8007b94:	b910      	cbnz	r0, 8007b9c <lv_obj_get_parent+0x10>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff fe6c 	bl	8007874 <lv_obj_add_state.part.37>
}
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <lv_obj_get_screen>:
{
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007ba4:	f00b fd28 	bl	80135f8 <lv_debug_check_null>
 8007ba8:	b918      	cbnz	r0, 8007bb2 <lv_obj_get_screen+0x12>
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff fe62 	bl	8007874 <lv_obj_add_state.part.37>
 8007bb0:	4604      	mov	r4, r0
        par   = lv_obj_get_parent(act_p);
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7ff ffea 	bl	8007b8c <lv_obj_get_parent>
    } while(par != NULL);
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d1f9      	bne.n	8007bb0 <lv_obj_get_screen+0x10>
}
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <lv_obj_get_disp>:
{
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007bc4:	f00b fd18 	bl	80135f8 <lv_debug_check_null>
 8007bc8:	b910      	cbnz	r0, 8007bd0 <lv_obj_get_disp+0x10>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff fe52 	bl	8007874 <lv_obj_add_state.part.37>
    if(obj->parent == NULL)
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b11b      	cbz	r3, 8007bdc <lv_obj_get_disp+0x1c>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7ff ffe3 	bl	8007ba0 <lv_obj_get_screen>
 8007bda:	4605      	mov	r5, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8007bdc:	480d      	ldr	r0, [pc, #52]	; (8007c14 <lv_obj_get_disp+0x54>)
 8007bde:	f00b fe39 	bl	8013854 <_lv_ll_get_head>
 8007be2:	4f0c      	ldr	r7, [pc, #48]	; (8007c14 <lv_obj_get_disp+0x54>)
 8007be4:	4604      	mov	r4, r0
 8007be6:	b90c      	cbnz	r4, 8007bec <lv_obj_get_disp+0x2c>
}
 8007be8:	4620      	mov	r0, r4
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
 8007bec:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f00b fe2f 	bl	8013854 <_lv_ll_get_head>
 8007bf6:	b928      	cbnz	r0, 8007c04 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f00b fe30 	bl	8013860 <_lv_ll_get_next>
 8007c00:	4604      	mov	r4, r0
 8007c02:	e7f0      	b.n	8007be6 <lv_obj_get_disp+0x26>
            if(s == scr) return d;
 8007c04:	4285      	cmp	r5, r0
 8007c06:	d0ef      	beq.n	8007be8 <lv_obj_get_disp+0x28>
        _LV_LL_READ(d->scr_ll, s) {
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f00b fe28 	bl	8013860 <_lv_ll_get_next>
 8007c10:	e7f1      	b.n	8007bf6 <lv_obj_get_disp+0x36>
 8007c12:	bf00      	nop
 8007c14:	20028bfc 	.word	0x20028bfc

08007c18 <lv_obj_get_child>:
{
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c1e:	f00b fceb 	bl	80135f8 <lv_debug_check_null>
 8007c22:	b910      	cbnz	r0, 8007c2a <lv_obj_get_child+0x12>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7ff fe25 	bl	8007874 <lv_obj_add_state.part.37>
 8007c2a:	1d20      	adds	r0, r4, #4
    if(child == NULL) {
 8007c2c:	b91d      	cbnz	r5, 8007c36 <lv_obj_get_child+0x1e>
}
 8007c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_head(&obj->child_ll);
 8007c32:	f00b be0f 	b.w	8013854 <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
 8007c36:	4629      	mov	r1, r5
}
 8007c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_next(&obj->child_ll, child);
 8007c3c:	f00b be10 	b.w	8013860 <_lv_ll_get_next>

08007c40 <lv_obj_get_coords>:
{
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c46:	f00b fcd7 	bl	80135f8 <lv_debug_check_null>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	b920      	cbnz	r0, 8007c58 <lv_obj_get_coords+0x18>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4805      	ldr	r0, [pc, #20]	; (8007c68 <lv_obj_get_coords+0x28>)
 8007c52:	f00b fcd5 	bl	8013600 <lv_debug_log_error>
 8007c56:	e7fe      	b.n	8007c56 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
 8007c58:	f104 0110 	add.w	r1, r4, #16
 8007c5c:	4628      	mov	r0, r5
}
 8007c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_area_copy(cords_p, &obj->coords);
 8007c62:	f7ff be11 	b.w	8007888 <lv_area_copy>
 8007c66:	bf00      	nop
 8007c68:	0802c354 	.word	0x0802c354

08007c6c <lv_obj_get_x>:
{
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c70:	f00b fcc2 	bl	80135f8 <lv_debug_check_null>
 8007c74:	4603      	mov	r3, r0
 8007c76:	b920      	cbnz	r0, 8007c82 <lv_obj_get_x+0x16>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	4808      	ldr	r0, [pc, #32]	; (8007c9c <lv_obj_get_x+0x30>)
 8007c7c:	f00b fcc0 	bl	8013600 <lv_debug_log_error>
 8007c80:	e7fe      	b.n	8007c80 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7ff ff82 	bl	8007b8c <lv_obj_get_parent>
    if(parent) {
 8007c88:	b120      	cbz	r0, 8007c94 <lv_obj_get_x+0x28>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8007c8a:	8a23      	ldrh	r3, [r4, #16]
 8007c8c:	8a00      	ldrh	r0, [r0, #16]
 8007c8e:	1a18      	subs	r0, r3, r0
 8007c90:	b200      	sxth	r0, r0
}
 8007c92:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
 8007c94:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8007c98:	e7fb      	b.n	8007c92 <lv_obj_get_x+0x26>
 8007c9a:	bf00      	nop
 8007c9c:	0802c354 	.word	0x0802c354

08007ca0 <lv_obj_get_y>:
{
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007ca4:	f00b fca8 	bl	80135f8 <lv_debug_check_null>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	b920      	cbnz	r0, 8007cb6 <lv_obj_get_y+0x16>
 8007cac:	4622      	mov	r2, r4
 8007cae:	4808      	ldr	r0, [pc, #32]	; (8007cd0 <lv_obj_get_y+0x30>)
 8007cb0:	f00b fca6 	bl	8013600 <lv_debug_log_error>
 8007cb4:	e7fe      	b.n	8007cb4 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff ff68 	bl	8007b8c <lv_obj_get_parent>
    if(parent) {
 8007cbc:	b120      	cbz	r0, 8007cc8 <lv_obj_get_y+0x28>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8007cbe:	8a63      	ldrh	r3, [r4, #18]
 8007cc0:	8a40      	ldrh	r0, [r0, #18]
 8007cc2:	1a18      	subs	r0, r3, r0
 8007cc4:	b200      	sxth	r0, r0
}
 8007cc6:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
 8007cc8:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8007ccc:	e7fb      	b.n	8007cc6 <lv_obj_get_y+0x26>
 8007cce:	bf00      	nop
 8007cd0:	0802c354 	.word	0x0802c354

08007cd4 <lv_obj_get_width>:
{
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007cd8:	f00b fc8e 	bl	80135f8 <lv_debug_check_null>
 8007cdc:	b910      	cbnz	r0, 8007ce4 <lv_obj_get_width+0x10>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff fdc8 	bl	8007874 <lv_obj_add_state.part.37>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007ce4:	8aa0      	ldrh	r0, [r4, #20]
 8007ce6:	8a23      	ldrh	r3, [r4, #16]
 8007ce8:	3001      	adds	r0, #1
 8007cea:	1ac0      	subs	r0, r0, r3
}
 8007cec:	b200      	sxth	r0, r0
 8007cee:	bd10      	pop	{r4, pc}

08007cf0 <lv_obj_get_height>:
{
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007cf4:	f00b fc80 	bl	80135f8 <lv_debug_check_null>
 8007cf8:	b910      	cbnz	r0, 8007d00 <lv_obj_get_height+0x10>
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff fdba 	bl	8007874 <lv_obj_add_state.part.37>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007d00:	8ae0      	ldrh	r0, [r4, #22]
 8007d02:	8a63      	ldrh	r3, [r4, #18]
 8007d04:	3001      	adds	r0, #1
 8007d06:	1ac0      	subs	r0, r0, r3
}
 8007d08:	b200      	sxth	r0, r0
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <lv_obj_get_auto_realign>:
{
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007d10:	f00b fc72 	bl	80135f8 <lv_debug_check_null>
 8007d14:	4603      	mov	r3, r0
 8007d16:	b920      	cbnz	r0, 8007d22 <lv_obj_get_auto_realign+0x16>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4804      	ldr	r0, [pc, #16]	; (8007d2c <lv_obj_get_auto_realign+0x20>)
 8007d1c:	f00b fc70 	bl	8013600 <lv_debug_log_error>
 8007d20:	e7fe      	b.n	8007d20 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
 8007d22:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
 8007d26:	f000 0001 	and.w	r0, r0, #1
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	0802c354 	.word	0x0802c354

08007d30 <lv_obj_get_style_list>:
{
 8007d30:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8007d32:	b911      	cbnz	r1, 8007d3a <lv_obj_get_style_list+0xa>
 8007d34:	3028      	adds	r0, #40	; 0x28
}
 8007d36:	b002      	add	sp, #8
 8007d38:	bd10      	pop	{r4, pc}
    info.result = NULL;
 8007d3a:	2400      	movs	r4, #0
    info.part = part;
 8007d3c:	f88d 1000 	strb.w	r1, [sp]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8007d40:	466a      	mov	r2, sp
 8007d42:	2108      	movs	r1, #8
    info.result = NULL;
 8007d44:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8007d46:	f7ff fee5 	bl	8007b14 <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
 8007d4a:	2801      	cmp	r0, #1
    return info.result;
 8007d4c:	bf0c      	ite	eq
 8007d4e:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
 8007d50:	4620      	movne	r0, r4
 8007d52:	e7f0      	b.n	8007d36 <lv_obj_get_style_list+0x6>

08007d54 <trans_del>:
{
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	4680      	mov	r8, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007d5a:	4819      	ldr	r0, [pc, #100]	; (8007dc0 <trans_del+0x6c>)
{
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	4616      	mov	r6, r2
 8007d60:	4699      	mov	r9, r3
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007d62:	4f17      	ldr	r7, [pc, #92]	; (8007dc0 <trans_del+0x6c>)
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007d64:	f00b fd79 	bl	801385a <_lv_ll_get_tail>
 8007d68:	4604      	mov	r4, r0
    while(tr != NULL) {
 8007d6a:	b90c      	cbnz	r4, 8007d70 <trans_del+0x1c>
}
 8007d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(tr == tr_limit) break;
 8007d70:	454c      	cmp	r4, r9
 8007d72:	d0fb      	beq.n	8007d6c <trans_del+0x18>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007d74:	4621      	mov	r1, r4
 8007d76:	4638      	mov	r0, r7
 8007d78:	f00b fd77 	bl	801386a <_lv_ll_get_prev>
 8007d7c:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 8007d7e:	6820      	ldr	r0, [r4, #0]
 8007d80:	4540      	cmp	r0, r8
 8007d82:	d11b      	bne.n	8007dbc <trans_del+0x68>
 8007d84:	79a1      	ldrb	r1, [r4, #6]
 8007d86:	42a9      	cmp	r1, r5
 8007d88:	d001      	beq.n	8007d8e <trans_del+0x3a>
 8007d8a:	2dff      	cmp	r5, #255	; 0xff
 8007d8c:	d116      	bne.n	8007dbc <trans_del+0x68>
 8007d8e:	88a3      	ldrh	r3, [r4, #4]
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	d001      	beq.n	8007d98 <trans_del+0x44>
 8007d94:	2eff      	cmp	r6, #255	; 0xff
 8007d96:	d111      	bne.n	8007dbc <trans_del+0x68>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8007d98:	f7ff ffca 	bl	8007d30 <lv_obj_get_style_list>
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8007d9c:	f003 fdbf 	bl	800b91e <_lv_style_list_get_transition_style>
            lv_style_remove_prop(style_trans, tr->prop);
 8007da0:	88a1      	ldrh	r1, [r4, #4]
 8007da2:	f003 fbf0 	bl	800b586 <lv_style_remove_prop>
            lv_anim_del(tr, NULL);
 8007da6:	2100      	movs	r1, #0
 8007da8:	4620      	mov	r0, r4
 8007daa:	f00b f8df 	bl	8012f6c <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007dae:	4638      	mov	r0, r7
 8007db0:	4621      	mov	r1, r4
 8007db2:	f00b fd8c 	bl	80138ce <_lv_ll_remove>
            lv_mem_free(tr);
 8007db6:	4620      	mov	r0, r4
 8007db8:	f00b ff14 	bl	8013be4 <lv_mem_free>
{
 8007dbc:	4654      	mov	r4, sl
 8007dbe:	e7d4      	b.n	8007d6a <trans_del+0x16>
 8007dc0:	20028ca0 	.word	0x20028ca0

08007dc4 <lv_obj_clean_style_list>:
{
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8007dca:	f7ff ffb1 	bl	8007d30 <lv_obj_get_style_list>
    if(style_dsc == NULL) {
 8007dce:	b148      	cbz	r0, 8007de4 <lv_obj_clean_style_list+0x20>
    _lv_style_list_reset(style_dsc);
 8007dd0:	f003 fdad 	bl	800b92e <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	2300      	movs	r3, #0
 8007dda:	22ff      	movs	r2, #255	; 0xff
}
 8007ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    trans_del(obj, part, 0xFF, NULL);
 8007de0:	f7ff bfb8 	b.w	8007d54 <trans_del>
}
 8007de4:	bd70      	pop	{r4, r5, r6, pc}

08007de6 <_lv_obj_disable_style_caching>:
{
 8007de6:	b570      	push	{r4, r5, r6, lr}
 8007de8:	4606      	mov	r6, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8007dee:	b2e1      	uxtb	r1, r4
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ff9d 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 8007df6:	b970      	cbnz	r0, 8007e16 <_lv_obj_disable_style_caching+0x30>
{
 8007df8:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f7ff ff97 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 8007e02:	b138      	cbz	r0, 8007e14 <_lv_obj_disable_style_caching+0x2e>
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8007e04:	3401      	adds	r4, #1
        list->ignore_cache = dis;
 8007e06:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8007e08:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 8007e0a:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8007e0e:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
 8007e10:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8007e12:	d1f2      	bne.n	8007dfa <_lv_obj_disable_style_caching+0x14>
}
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
        list->ignore_cache = dis;
 8007e16:	7943      	ldrb	r3, [r0, #5]
 8007e18:	3401      	adds	r4, #1
 8007e1a:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8007e1e:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
 8007e20:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8007e22:	d1e4      	bne.n	8007dee <_lv_obj_disable_style_caching+0x8>
 8007e24:	e7e8      	b.n	8007df8 <_lv_obj_disable_style_caching+0x12>
	...

08007e28 <trans_anim_ready_cb>:
{
 8007e28:	b570      	push	{r4, r5, r6, lr}
    bool running = false;
 8007e2a:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007e2c:	4e16      	ldr	r6, [pc, #88]	; (8007e88 <trans_anim_ready_cb+0x60>)
    lv_style_trans_t * tr = a->var;
 8007e2e:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007e30:	4815      	ldr	r0, [pc, #84]	; (8007e88 <trans_anim_ready_cb+0x60>)
 8007e32:	f00b fd0f 	bl	8013854 <_lv_ll_get_head>
 8007e36:	b990      	cbnz	r0, 8007e5e <trans_anim_ready_cb+0x36>
    if(!running) {
 8007e38:	b945      	cbnz	r5, 8007e4c <trans_anim_ready_cb+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8007e3a:	79a1      	ldrb	r1, [r4, #6]
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	f7ff ff77 	bl	8007d30 <lv_obj_get_style_list>
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8007e42:	f003 fd6c 	bl	800b91e <_lv_style_list_get_transition_style>
        lv_style_remove_prop(style_trans, tr->prop);
 8007e46:	88a1      	ldrh	r1, [r4, #4]
 8007e48:	f003 fb9d 	bl	800b586 <lv_style_remove_prop>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	480e      	ldr	r0, [pc, #56]	; (8007e88 <trans_anim_ready_cb+0x60>)
 8007e50:	f00b fd3d 	bl	80138ce <_lv_ll_remove>
    lv_mem_free(tr);
 8007e54:	4620      	mov	r0, r4
}
 8007e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(tr);
 8007e5a:	f00b bec3 	b.w	8013be4 <lv_mem_free>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 8007e5e:	42a0      	cmp	r0, r4
 8007e60:	d00c      	beq.n	8007e7c <trans_anim_ready_cb+0x54>
 8007e62:	6802      	ldr	r2, [r0, #0]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d108      	bne.n	8007e7c <trans_anim_ready_cb+0x54>
 8007e6a:	6843      	ldr	r3, [r0, #4]
 8007e6c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf08      	it	eq
 8007e7a:	2501      	moveq	r5, #1
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f00b fcee 	bl	8013860 <_lv_ll_get_next>
 8007e84:	e7d7      	b.n	8007e36 <trans_anim_ready_cb+0xe>
 8007e86:	bf00      	nop
 8007e88:	20028ca0 	.word	0x20028ca0

08007e8c <lv_obj_get_hidden>:
{
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007e90:	f00b fbb2 	bl	80135f8 <lv_debug_check_null>
 8007e94:	b910      	cbnz	r0, 8007e9c <lv_obj_get_hidden+0x10>
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff fcec 	bl	8007874 <lv_obj_add_state.part.37>
    return obj->hidden == 0 ? false : true;
 8007e9c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8007ea0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8007ea4:	bd10      	pop	{r4, pc}

08007ea6 <lv_obj_area_is_visible>:
{
 8007ea6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007eaa:	4607      	mov	r7, r0
 8007eac:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
 8007eae:	f7ff ffed 	bl	8007e8c <lv_obj_get_hidden>
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d157      	bne.n	8007f68 <lv_obj_area_is_visible+0xc2>
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff fe71 	bl	8007ba0 <lv_obj_get_screen>
 8007ebe:	4604      	mov	r4, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8007ec0:	f7ff fe7e 	bl	8007bc0 <lv_obj_get_disp>
 8007ec4:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8007ec6:	f7fe f8d7 	bl	8006078 <lv_disp_get_scr_act>
 8007eca:	4284      	cmp	r4, r0
 8007ecc:	d129      	bne.n	8007f22 <lv_obj_area_is_visible+0x7c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 8007ece:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
 8007ed2:	f107 0110 	add.w	r1, r7, #16
 8007ed6:	4668      	mov	r0, sp
 8007ed8:	f7ff fcd6 	bl	8007888 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8007edc:	f8bd 2000 	ldrh.w	r2, [sp]
 8007ee0:	b2a3      	uxth	r3, r4
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4630      	mov	r0, r6
        obj_coords.x1 -= ext_size;
 8007ee6:	1ad2      	subs	r2, r2, r3
 8007ee8:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
 8007eec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007ef0:	1ad2      	subs	r2, r2, r3
 8007ef2:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 8007ef6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007efa:	441a      	add	r2, r3
 8007efc:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
 8007f00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007f04:	4413      	add	r3, r2
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8007f06:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
 8007f08:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8007f0c:	f00b f8f1 	bl	80130f2 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
 8007f10:	4680      	mov	r8, r0
 8007f12:	b1b0      	cbz	r0, 8007f42 <lv_obj_area_is_visible+0x9c>
        lv_obj_t * par = lv_obj_get_parent(obj);
 8007f14:	4638      	mov	r0, r7
            par = lv_obj_get_parent(par);
 8007f16:	f7ff fe39 	bl	8007b8c <lv_obj_get_parent>
 8007f1a:	4604      	mov	r4, r0
        while(par != NULL) {
 8007f1c:	b9a8      	cbnz	r0, 8007f4a <lv_obj_area_is_visible+0xa4>
    return true;
 8007f1e:	4645      	mov	r5, r8
 8007f20:	e00f      	b.n	8007f42 <lv_obj_area_is_visible+0x9c>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8007f22:	4640      	mov	r0, r8
 8007f24:	f7fe f8af 	bl	8006086 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8007f28:	4284      	cmp	r4, r0
 8007f2a:	d0d0      	beq.n	8007ece <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f7fe f8b1 	bl	8006094 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8007f32:	4284      	cmp	r4, r0
 8007f34:	d0cb      	beq.n	8007ece <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8007f36:	4640      	mov	r0, r8
 8007f38:	f7fe f8b3 	bl	80060a2 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8007f3c:	4284      	cmp	r4, r0
 8007f3e:	d0c6      	beq.n	8007ece <lv_obj_area_is_visible+0x28>
    return true;
 8007f40:	2501      	movs	r5, #1
}
 8007f42:	4628      	mov	r0, r5
 8007f44:	b002      	add	sp, #8
 8007f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
 8007f4a:	f104 0210 	add.w	r2, r4, #16
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4630      	mov	r0, r6
 8007f52:	f00b f8ce 	bl	80130f2 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0f3      	beq.n	8007f42 <lv_obj_area_is_visible+0x9c>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7ff ff96 	bl	8007e8c <lv_obj_get_hidden>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d1ee      	bne.n	8007f42 <lv_obj_area_is_visible+0x9c>
            par = lv_obj_get_parent(par);
 8007f64:	4620      	mov	r0, r4
 8007f66:	e7d6      	b.n	8007f16 <lv_obj_area_is_visible+0x70>
    if(lv_obj_get_hidden(obj)) return false;
 8007f68:	2500      	movs	r5, #0
 8007f6a:	e7ea      	b.n	8007f42 <lv_obj_area_is_visible+0x9c>

08007f6c <lv_obj_invalidate_area>:
{
 8007f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007f72:	f00b fb41 	bl	80135f8 <lv_debug_check_null>
 8007f76:	4603      	mov	r3, r0
 8007f78:	b920      	cbnz	r0, 8007f84 <lv_obj_invalidate_area+0x18>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	480a      	ldr	r0, [pc, #40]	; (8007fa8 <lv_obj_invalidate_area+0x3c>)
 8007f7e:	f00b fb3f 	bl	8013600 <lv_debug_log_error>
 8007f82:	e7fe      	b.n	8007f82 <lv_obj_invalidate_area+0x16>
    lv_area_copy(&area_tmp, area);
 8007f84:	4629      	mov	r1, r5
 8007f86:	4668      	mov	r0, sp
 8007f88:	f7ff fc7e 	bl	8007888 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8007f8c:	4669      	mov	r1, sp
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff ff89 	bl	8007ea6 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8007f94:	b128      	cbz	r0, 8007fa2 <lv_obj_invalidate_area+0x36>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff fe12 	bl	8007bc0 <lv_obj_get_disp>
 8007f9c:	4669      	mov	r1, sp
 8007f9e:	f002 ff08 	bl	800adb2 <_lv_inv_area>
}
 8007fa2:	b003      	add	sp, #12
 8007fa4:	bd30      	pop	{r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0802c354 	.word	0x0802c354

08007fac <lv_obj_invalidate>:
{
 8007fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fae:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007fb0:	f00b fb22 	bl	80135f8 <lv_debug_check_null>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	b920      	cbnz	r0, 8007fc2 <lv_obj_invalidate+0x16>
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4813      	ldr	r0, [pc, #76]	; (8008008 <lv_obj_invalidate+0x5c>)
 8007fbc:	f00b fb20 	bl	8013600 <lv_debug_log_error>
 8007fc0:	e7fe      	b.n	8007fc0 <lv_obj_invalidate+0x14>
    lv_coord_t ext_size = obj->ext_draw_pad;
 8007fc2:	f9b5 4032 	ldrsh.w	r4, [r5, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
 8007fc6:	f105 0110 	add.w	r1, r5, #16
 8007fca:	4668      	mov	r0, sp
 8007fcc:	f7ff fc5c 	bl	8007888 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8007fd0:	f8bd 2000 	ldrh.w	r2, [sp]
 8007fd4:	b2a3      	uxth	r3, r4
    lv_obj_invalidate_area(obj, &obj_coords);
 8007fd6:	4669      	mov	r1, sp
 8007fd8:	4628      	mov	r0, r5
    obj_coords.x1 -= ext_size;
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
 8007fe0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
 8007fea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007fee:	441a      	add	r2, r3
 8007ff0:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8007ff4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8007ffe:	f7ff ffb5 	bl	8007f6c <lv_obj_invalidate_area>
}
 8008002:	b003      	add	sp, #12
 8008004:	bd30      	pop	{r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	0802c354 	.word	0x0802c354

0800800c <lv_obj_move_foreground>:
{
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008010:	f00b faf2 	bl	80135f8 <lv_debug_check_null>
 8008014:	4603      	mov	r3, r0
 8008016:	b920      	cbnz	r0, 8008022 <lv_obj_move_foreground+0x16>
 8008018:	462a      	mov	r2, r5
 800801a:	4811      	ldr	r0, [pc, #68]	; (8008060 <lv_obj_move_foreground+0x54>)
 800801c:	f00b faf0 	bl	8013600 <lv_debug_log_error>
 8008020:	e7fe      	b.n	8008020 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fdb2 	bl	8007b8c <lv_obj_get_parent>
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8008028:	1d06      	adds	r6, r0, #4
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800802a:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 800802c:	4630      	mov	r0, r6
 800802e:	f00b fc11 	bl	8013854 <_lv_ll_get_head>
 8008032:	4285      	cmp	r5, r0
 8008034:	d012      	beq.n	800805c <lv_obj_move_foreground+0x50>
    lv_obj_invalidate(parent);
 8008036:	4620      	mov	r0, r4
 8008038:	f7ff ffb8 	bl	8007fac <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800803c:	462a      	mov	r2, r5
 800803e:	4631      	mov	r1, r6
 8008040:	4630      	mov	r0, r6
 8008042:	2301      	movs	r3, #1
 8008044:	f00b fc7c 	bl	8013940 <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008048:	69e3      	ldr	r3, [r4, #28]
 800804a:	462a      	mov	r2, r5
 800804c:	4620      	mov	r0, r4
 800804e:	2101      	movs	r1, #1
 8008050:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8008052:	4620      	mov	r0, r4
}
 8008054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 8008058:	f7ff bfa8 	b.w	8007fac <lv_obj_invalidate>
}
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	bf00      	nop
 8008060:	0802c354 	.word	0x0802c354

08008064 <lv_obj_set_pos>:
{
 8008064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800806e:	f00b fac3 	bl	80135f8 <lv_debug_check_null>
 8008072:	4603      	mov	r3, r0
 8008074:	b920      	cbnz	r0, 8008080 <lv_obj_set_pos+0x1c>
 8008076:	4622      	mov	r2, r4
 8008078:	4822      	ldr	r0, [pc, #136]	; (8008104 <lv_obj_set_pos+0xa0>)
 800807a:	f00b fac1 	bl	8013600 <lv_debug_log_error>
 800807e:	e7fe      	b.n	800807e <lv_obj_set_pos+0x1a>
    lv_obj_t * par = obj->parent;
 8008080:	6827      	ldr	r7, [r4, #0]
    if(par) {
 8008082:	b12f      	cbz	r7, 8008090 <lv_obj_set_pos+0x2c>
        x = x + par->coords.x1;
 8008084:	8a39      	ldrh	r1, [r7, #16]
        y = y + par->coords.y1;
 8008086:	8a7a      	ldrh	r2, [r7, #18]
        x = x + par->coords.x1;
 8008088:	440d      	add	r5, r1
        y = y + par->coords.y1;
 800808a:	4416      	add	r6, r2
        x = x + par->coords.x1;
 800808c:	b22d      	sxth	r5, r5
        y = y + par->coords.y1;
 800808e:	b236      	sxth	r6, r6
    diff.x = x - obj->coords.x1;
 8008090:	8a21      	ldrh	r1, [r4, #16]
    diff.y = y - obj->coords.y1;
 8008092:	8a62      	ldrh	r2, [r4, #18]
    diff.x = x - obj->coords.x1;
 8008094:	1a6d      	subs	r5, r5, r1
    diff.y = y - obj->coords.y1;
 8008096:	1ab6      	subs	r6, r6, r2
    diff.x = x - obj->coords.x1;
 8008098:	b2ad      	uxth	r5, r5
    diff.y = y - obj->coords.y1;
 800809a:	b2b6      	uxth	r6, r6
    diff.x = x - obj->coords.x1;
 800809c:	fa0f f885 	sxth.w	r8, r5
    diff.y = y - obj->coords.y1;
 80080a0:	fa0f f986 	sxth.w	r9, r6
    if(diff.x == 0 && diff.y == 0) return;
 80080a4:	f1b8 0f00 	cmp.w	r8, #0
 80080a8:	d102      	bne.n	80080b0 <lv_obj_set_pos+0x4c>
 80080aa:	f1b9 0f00 	cmp.w	r9, #0
 80080ae:	d025      	beq.n	80080fc <lv_obj_set_pos+0x98>
    lv_obj_invalidate(obj);
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff ff7b 	bl	8007fac <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80080b6:	4669      	mov	r1, sp
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7ff fdc1 	bl	8007c40 <lv_obj_get_coords>
    obj->coords.x1 += diff.x;
 80080be:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 80080c0:	8aa1      	ldrh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 80080c2:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 80080c4:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 80080c6:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x2 += diff.x;
 80080c8:	440d      	add	r5, r1
    refresh_children_position(obj, diff.x, diff.y);
 80080ca:	4641      	mov	r1, r8
    obj->coords.x1 += diff.x;
 80080cc:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 80080ce:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80080d0:	82a5      	strh	r5, [r4, #20]
    obj->coords.y1 += diff.y;
 80080d2:	4433      	add	r3, r6
    obj->coords.y2 += diff.y;
 80080d4:	4416      	add	r6, r2
    refresh_children_position(obj, diff.x, diff.y);
 80080d6:	464a      	mov	r2, r9
    obj->coords.y1 += diff.y;
 80080d8:	8263      	strh	r3, [r4, #18]
    obj->coords.y2 += diff.y;
 80080da:	82e6      	strh	r6, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 80080dc:	f7ff fba3 	bl	8007826 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 80080e0:	69e3      	ldr	r3, [r4, #28]
 80080e2:	466a      	mov	r2, sp
 80080e4:	2102      	movs	r1, #2
 80080e6:	4620      	mov	r0, r4
 80080e8:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80080ea:	b127      	cbz	r7, 80080f6 <lv_obj_set_pos+0x92>
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4622      	mov	r2, r4
 80080f0:	2101      	movs	r1, #1
 80080f2:	4638      	mov	r0, r7
 80080f4:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7ff ff58 	bl	8007fac <lv_obj_invalidate>
}
 80080fc:	b003      	add	sp, #12
 80080fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008102:	bf00      	nop
 8008104:	0802c354 	.word	0x0802c354

08008108 <lv_obj_set_x>:
{
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4604      	mov	r4, r0
 800810c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800810e:	f00b fa73 	bl	80135f8 <lv_debug_check_null>
 8008112:	4603      	mov	r3, r0
 8008114:	b920      	cbnz	r0, 8008120 <lv_obj_set_x+0x18>
 8008116:	4622      	mov	r2, r4
 8008118:	4806      	ldr	r0, [pc, #24]	; (8008134 <lv_obj_set_x+0x2c>)
 800811a:	f00b fa71 	bl	8013600 <lv_debug_log_error>
 800811e:	e7fe      	b.n	800811e <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8008120:	4620      	mov	r0, r4
 8008122:	f7ff fdbd 	bl	8007ca0 <lv_obj_get_y>
 8008126:	4629      	mov	r1, r5
 8008128:	4602      	mov	r2, r0
 800812a:	4620      	mov	r0, r4
}
 800812c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8008130:	f7ff bf98 	b.w	8008064 <lv_obj_set_pos>
 8008134:	0802c354 	.word	0x0802c354

08008138 <lv_obj_set_y>:
{
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800813e:	f00b fa5b 	bl	80135f8 <lv_debug_check_null>
 8008142:	4603      	mov	r3, r0
 8008144:	b920      	cbnz	r0, 8008150 <lv_obj_set_y+0x18>
 8008146:	4622      	mov	r2, r4
 8008148:	4806      	ldr	r0, [pc, #24]	; (8008164 <lv_obj_set_y+0x2c>)
 800814a:	f00b fa59 	bl	8013600 <lv_debug_log_error>
 800814e:	e7fe      	b.n	800814e <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff fd8b 	bl	8007c6c <lv_obj_get_x>
 8008156:	462a      	mov	r2, r5
 8008158:	4601      	mov	r1, r0
 800815a:	4620      	mov	r0, r4
}
 800815c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8008160:	f7ff bf80 	b.w	8008064 <lv_obj_set_pos>
 8008164:	0802c354 	.word	0x0802c354

08008168 <obj_align_core>:
{
 8008168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800816a:	4604      	mov	r4, r0
 800816c:	461e      	mov	r6, r3
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 800816e:	f101 0010 	add.w	r0, r1, #16
 8008172:	ab01      	add	r3, sp, #4
 8008174:	f104 0110 	add.w	r1, r4, #16
{
 8008178:	f89d 5020 	ldrb.w	r5, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 800817c:	f00b f8fe 	bl	801337c <_lv_area_align>
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8008180:	4620      	mov	r0, r4
 8008182:	f7ff fd03 	bl	8007b8c <lv_obj_get_parent>
    new_pos.y += y_ofs;
 8008186:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800818a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    new_pos.x += x_ofs;
 800818e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
    new_pos.y += y_ofs;
 8008192:	440a      	add	r2, r1
    new_pos.x += x_ofs;
 8008194:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    lv_coord_t par_abs_y  = par->coords.y1;
 8008198:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
 800819c:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
 800819e:	8a00      	ldrh	r0, [r0, #16]
    new_pos.y -= par_abs_y;
 80081a0:	1ad2      	subs	r2, r2, r3
    new_pos.x -= par_abs_x;
 80081a2:	1a09      	subs	r1, r1, r0
    new_pos.y -= par_abs_y;
 80081a4:	b212      	sxth	r2, r2
    new_pos.x -= par_abs_x;
 80081a6:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
 80081a8:	f8ad 2006 	strh.w	r2, [sp, #6]
    new_pos.x -= par_abs_x;
 80081ac:	f8ad 1004 	strh.w	r1, [sp, #4]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 80081b0:	b146      	cbz	r6, 80081c4 <obj_align_core+0x5c>
 80081b2:	4620      	mov	r0, r4
 80081b4:	b11d      	cbz	r5, 80081be <obj_align_core+0x56>
 80081b6:	f7ff ff55 	bl	8008064 <lv_obj_set_pos>
}
 80081ba:	b003      	add	sp, #12
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
 80081be:	f7ff ffa3 	bl	8008108 <lv_obj_set_x>
 80081c2:	e7fa      	b.n	80081ba <obj_align_core+0x52>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
 80081c4:	2d00      	cmp	r5, #0
 80081c6:	d0f8      	beq.n	80081ba <obj_align_core+0x52>
 80081c8:	4611      	mov	r1, r2
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff ffb4 	bl	8008138 <lv_obj_set_y>
}
 80081d0:	e7f3      	b.n	80081ba <obj_align_core+0x52>
	...

080081d4 <lv_obj_align>:
{
 80081d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	4690      	mov	r8, r2
 80081de:	461f      	mov	r7, r3
 80081e0:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80081e4:	f00b fa08 	bl	80135f8 <lv_debug_check_null>
 80081e8:	b910      	cbnz	r0, 80081f0 <lv_obj_align+0x1c>
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7ff fb42 	bl	8007874 <lv_obj_add_state.part.37>
    if(base == NULL) base = lv_obj_get_parent(obj);
 80081f0:	b91d      	cbnz	r5, 80081fa <lv_obj_align+0x26>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff fcca 	bl	8007b8c <lv_obj_get_parent>
 80081f8:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 80081fa:	4628      	mov	r0, r5
 80081fc:	f00b f9fc 	bl	80135f8 <lv_debug_check_null>
 8008200:	4603      	mov	r3, r0
 8008202:	b920      	cbnz	r0, 800820e <lv_obj_align+0x3a>
 8008204:	462a      	mov	r2, r5
 8008206:	480e      	ldr	r0, [pc, #56]	; (8008240 <lv_obj_align+0x6c>)
 8008208:	f00b f9fa 	bl	8013600 <lv_debug_log_error>
 800820c:	e7fe      	b.n	800820c <lv_obj_align+0x38>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
 800820e:	2301      	movs	r3, #1
 8008210:	4642      	mov	r2, r8
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800821c:	f7ff ffa4 	bl	8008168 <obj_align_core>
    obj->realign.mid_align = 0;
 8008220:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 8008224:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 0;
 8008228:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_ofs;
 800822c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8008230:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
 8008234:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
 8008236:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 800823a:	b004      	add	sp, #16
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	0802c354 	.word	0x0802c354

08008244 <obj_align_mid_core>:
{
 8008244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	b085      	sub	sp, #20
 800824a:	4682      	mov	sl, r0
 800824c:	460d      	mov	r5, r1
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800824e:	f04f 0802 	mov.w	r8, #2
{
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8008258:	9203      	str	r2, [sp, #12]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8008260:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8008264:	9302      	str	r3, [sp, #8]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8008266:	f7ff fd01 	bl	8007c6c <lv_obj_get_x>
 800826a:	4604      	mov	r4, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
 800826c:	4650      	mov	r0, sl
 800826e:	f7ff fd17 	bl	8007ca0 <lv_obj_get_y>
 8008272:	4681      	mov	r9, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008274:	4650      	mov	r0, sl
 8008276:	f7ff fd2d 	bl	8007cd4 <lv_obj_get_width>
 800827a:	fb90 f0f8 	sdiv	r0, r0, r8
 800827e:	b207      	sxth	r7, r0
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008280:	4650      	mov	r0, sl
 8008282:	f7ff fd35 	bl	8007cf0 <lv_obj_get_height>
    switch(align) {
 8008286:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008288:	fb90 f0f8 	sdiv	r0, r0, r8
 800828c:	b206      	sxth	r6, r0
    switch(align) {
 800828e:	2a14      	cmp	r2, #20
 8008290:	d826      	bhi.n	80082e0 <obj_align_mid_core+0x9c>
 8008292:	e8df f002 	tbb	[pc, r2]
 8008296:	4f0b      	.short	0x4f0b
 8008298:	445b5d1b 	.word	0x445b5d1b
 800829c:	4f635169 	.word	0x4f635169
 80082a0:	445b5d1b 	.word	0x445b5d1b
 80082a4:	5b514f69 	.word	0x5b514f69
 80082a8:	635d      	.short	0x635d
 80082aa:	69          	.byte	0x69
 80082ab:	00          	.byte	0x00
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7ff fd11 	bl	8007cd4 <lv_obj_get_width>
 80082b2:	fb90 f4f8 	sdiv	r4, r0, r8
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80082b6:	4628      	mov	r0, r5
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80082b8:	1be4      	subs	r4, r4, r7
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80082ba:	f7ff fd19 	bl	8007cf0 <lv_obj_get_height>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80082be:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80082c0:	fb90 f0f8 	sdiv	r0, r0, r8
            new_y = lv_obj_get_height(base) - obj_h_half;
 80082c4:	1b80      	subs	r0, r0, r6
 80082c6:	fa0f f980 	sxth.w	r9, r0
            break;
 80082ca:	e009      	b.n	80082e0 <obj_align_mid_core+0x9c>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7ff fd01 	bl	8007cd4 <lv_obj_get_width>
 80082d2:	fb90 f0f8 	sdiv	r0, r0, r8
 80082d6:	1bc4      	subs	r4, r0, r7
            new_x = -obj_w_half;
 80082d8:	b224      	sxth	r4, r4
            new_y = -obj_h_half;
 80082da:	4276      	negs	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80082dc:	fa0f f986 	sxth.w	r9, r6
    lv_obj_t * par        = lv_obj_get_parent(obj);
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7ff fc53 	bl	8007b8c <lv_obj_get_parent>
    new_y += y_ofs + base_abs_y;
 80082e6:	8a6a      	ldrh	r2, [r5, #18]
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	4413      	add	r3, r2
    new_y -= par_abs_y;
 80082ec:	8a42      	ldrh	r2, [r0, #18]
    new_y += y_ofs + base_abs_y;
 80082ee:	eb03 0609 	add.w	r6, r3, r9
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 80082f2:	9b00      	ldr	r3, [sp, #0]
    new_y -= par_abs_y;
 80082f4:	1ab2      	subs	r2, r6, r2
 80082f6:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d040      	beq.n	800837e <obj_align_mid_core+0x13a>
    new_x += x_ofs + base_abs_x;
 80082fc:	8a29      	ldrh	r1, [r5, #16]
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	440b      	add	r3, r1
 8008302:	4619      	mov	r1, r3
 8008304:	4421      	add	r1, r4
    new_x -= par_abs_x;
 8008306:	8a04      	ldrh	r4, [r0, #16]
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8008308:	4650      	mov	r0, sl
    new_x -= par_abs_x;
 800830a:	1b09      	subs	r1, r1, r4
 800830c:	b209      	sxth	r1, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 800830e:	f1bb 0f00 	cmp.w	fp, #0
 8008312:	d02f      	beq.n	8008374 <obj_align_mid_core+0x130>
}
 8008314:	b005      	add	sp, #20
 8008316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 800831a:	f7ff bea3 	b.w	8008064 <lv_obj_set_pos>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800831e:	4628      	mov	r0, r5
 8008320:	f7ff fcd8 	bl	8007cd4 <lv_obj_get_width>
 8008324:	fb90 f0f8 	sdiv	r0, r0, r8
 8008328:	1bc4      	subs	r4, r0, r7
            new_x = -obj_w_half;
 800832a:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) - obj_h_half;
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff fcdf 	bl	8007cf0 <lv_obj_get_height>
 8008332:	e7c7      	b.n	80082c4 <obj_align_mid_core+0x80>
            new_x = -obj_w_half;
 8008334:	427c      	negs	r4, r7
 8008336:	e7cf      	b.n	80082d8 <obj_align_mid_core+0x94>
            new_x = -obj_w_half;
 8008338:	427c      	negs	r4, r7
 800833a:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff fcd7 	bl	8007cf0 <lv_obj_get_height>
 8008342:	2302      	movs	r3, #2
 8008344:	fb90 f3f3 	sdiv	r3, r0, r3
 8008348:	1b9e      	subs	r6, r3, r6
 800834a:	e7c7      	b.n	80082dc <obj_align_mid_core+0x98>
            new_x = -obj_w_half;
 800834c:	427c      	negs	r4, r7
 800834e:	e7ec      	b.n	800832a <obj_align_mid_core+0xe6>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008350:	4628      	mov	r0, r5
 8008352:	f7ff fcbf 	bl	8007cd4 <lv_obj_get_width>
 8008356:	1bc0      	subs	r0, r0, r7
 8008358:	b204      	sxth	r4, r0
 800835a:	e7be      	b.n	80082da <obj_align_mid_core+0x96>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800835c:	4628      	mov	r0, r5
 800835e:	f7ff fcb9 	bl	8007cd4 <lv_obj_get_width>
 8008362:	1bc0      	subs	r0, r0, r7
 8008364:	b204      	sxth	r4, r0
 8008366:	e7e9      	b.n	800833c <obj_align_mid_core+0xf8>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008368:	4628      	mov	r0, r5
 800836a:	f7ff fcb3 	bl	8007cd4 <lv_obj_get_width>
 800836e:	1bc0      	subs	r0, r0, r7
 8008370:	b204      	sxth	r4, r0
 8008372:	e7db      	b.n	800832c <obj_align_mid_core+0xe8>
}
 8008374:	b005      	add	sp, #20
 8008376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(x_set) lv_obj_set_x(obj, new_x);
 800837a:	f7ff bec5 	b.w	8008108 <lv_obj_set_x>
    else if(y_set) lv_obj_set_y(obj, new_y);
 800837e:	f1bb 0f00 	cmp.w	fp, #0
 8008382:	d006      	beq.n	8008392 <obj_align_mid_core+0x14e>
 8008384:	4611      	mov	r1, r2
 8008386:	4650      	mov	r0, sl
}
 8008388:	b005      	add	sp, #20
 800838a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(y_set) lv_obj_set_y(obj, new_y);
 800838e:	f7ff bed3 	b.w	8008138 <lv_obj_set_y>
}
 8008392:	b005      	add	sp, #20
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008398 <lv_obj_align_mid>:
{
 8008398:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	4690      	mov	r8, r2
 80083a2:	461f      	mov	r7, r3
 80083a4:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80083a8:	f00b f926 	bl	80135f8 <lv_debug_check_null>
 80083ac:	b910      	cbnz	r0, 80083b4 <lv_obj_align_mid+0x1c>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff fa60 	bl	8007874 <lv_obj_add_state.part.37>
    if(base == NULL) {
 80083b4:	b91d      	cbnz	r5, 80083be <lv_obj_align_mid+0x26>
        base = lv_obj_get_parent(obj);
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff fbe8 	bl	8007b8c <lv_obj_get_parent>
 80083bc:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 80083be:	4628      	mov	r0, r5
 80083c0:	f00b f91a 	bl	80135f8 <lv_debug_check_null>
 80083c4:	4603      	mov	r3, r0
 80083c6:	b920      	cbnz	r0, 80083d2 <lv_obj_align_mid+0x3a>
 80083c8:	462a      	mov	r2, r5
 80083ca:	480e      	ldr	r0, [pc, #56]	; (8008404 <lv_obj_align_mid+0x6c>)
 80083cc:	f00b f918 	bl	8013600 <lv_debug_log_error>
 80083d0:	e7fe      	b.n	80083d0 <lv_obj_align_mid+0x38>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 80083d2:	2301      	movs	r3, #1
 80083d4:	4642      	mov	r2, r8
 80083d6:	4629      	mov	r1, r5
 80083d8:	4620      	mov	r0, r4
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80083e0:	f7ff ff30 	bl	8008244 <obj_align_mid_core>
    obj->realign.mid_align = 1;
 80083e4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 80083e8:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 1;
 80083ec:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_ofs;
 80083f0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 80083f4:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
 80083f8:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
 80083fa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 80083fe:	b004      	add	sp, #16
 8008400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008404:	0802c354 	.word	0x0802c354

08008408 <lv_obj_realign>:
{
 8008408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800840c:	f00b f8f4 	bl	80135f8 <lv_debug_check_null>
 8008410:	4603      	mov	r3, r0
 8008412:	b920      	cbnz	r0, 800841e <lv_obj_realign+0x16>
 8008414:	4622      	mov	r2, r4
 8008416:	480c      	ldr	r0, [pc, #48]	; (8008448 <lv_obj_realign+0x40>)
 8008418:	f00b f8f2 	bl	8013600 <lv_debug_log_error>
 800841c:	e7fe      	b.n	800841c <lv_obj_realign+0x14>
 800841e:	f9b4 0046 	ldrsh.w	r0, [r4, #70]	; 0x46
    if(obj->realign.mid_align)
 8008422:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
 8008426:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008428:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800842c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008430:	9000      	str	r0, [sp, #0]
 8008432:	4620      	mov	r0, r4
    if(obj->realign.mid_align)
 8008434:	07ac      	lsls	r4, r5, #30
 8008436:	d503      	bpl.n	8008440 <lv_obj_realign+0x38>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008438:	f7ff ffae 	bl	8008398 <lv_obj_align_mid>
}
 800843c:	b003      	add	sp, #12
 800843e:	bd30      	pop	{r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008440:	f7ff fec8 	bl	80081d4 <lv_obj_align>
}
 8008444:	e7fa      	b.n	800843c <lv_obj_realign+0x34>
 8008446:	bf00      	nop
 8008448:	0802c354 	.word	0x0802c354

0800844c <refresh_children_style>:
{
 800844c:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 800844e:	2100      	movs	r1, #0
{
 8008450:	4605      	mov	r5, r0
        child = lv_obj_get_child(obj, child);
 8008452:	f7ff fbe1 	bl	8007c18 <lv_obj_get_child>
 8008456:	4604      	mov	r4, r0
    while(child != NULL) {
 8008458:	b900      	cbnz	r0, 800845c <refresh_children_style+0x10>
}
 800845a:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
 800845c:	4620      	mov	r0, r4
 800845e:	f7ff fda5 	bl	8007fac <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8008462:	2104      	movs	r1, #4
 8008464:	69e3      	ldr	r3, [r4, #28]
 8008466:	2200      	movs	r2, #0
 8008468:	4620      	mov	r0, r4
 800846a:	4798      	blx	r3
        lv_obj_invalidate(child);
 800846c:	4620      	mov	r0, r4
 800846e:	f7ff fd9d 	bl	8007fac <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff ffea 	bl	800844c <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8008478:	4621      	mov	r1, r4
 800847a:	4628      	mov	r0, r5
 800847c:	e7e9      	b.n	8008452 <refresh_children_style+0x6>
	...

08008480 <lv_obj_get_click>:
{
 8008480:	b510      	push	{r4, lr}
 8008482:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008484:	f00b f8b8 	bl	80135f8 <lv_debug_check_null>
 8008488:	4603      	mov	r3, r0
 800848a:	b920      	cbnz	r0, 8008496 <lv_obj_get_click+0x16>
 800848c:	4622      	mov	r2, r4
 800848e:	4804      	ldr	r0, [pc, #16]	; (80084a0 <lv_obj_get_click+0x20>)
 8008490:	f00b f8b6 	bl	8013600 <lv_debug_log_error>
 8008494:	e7fe      	b.n	8008494 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
 8008496:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 800849a:	f000 0001 	and.w	r0, r0, #1
 800849e:	bd10      	pop	{r4, pc}
 80084a0:	0802c354 	.word	0x0802c354

080084a4 <lv_obj_get_drag>:
{
 80084a4:	b510      	push	{r4, lr}
 80084a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80084a8:	f00b f8a6 	bl	80135f8 <lv_debug_check_null>
 80084ac:	4603      	mov	r3, r0
 80084ae:	b920      	cbnz	r0, 80084ba <lv_obj_get_drag+0x16>
 80084b0:	4622      	mov	r2, r4
 80084b2:	4804      	ldr	r0, [pc, #16]	; (80084c4 <lv_obj_get_drag+0x20>)
 80084b4:	f00b f8a4 	bl	8013600 <lv_debug_log_error>
 80084b8:	e7fe      	b.n	80084b8 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
 80084ba:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 80084be:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80084c2:	bd10      	pop	{r4, pc}
 80084c4:	0802c354 	.word	0x0802c354

080084c8 <lv_obj_get_drag_dir>:
{
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80084cc:	f00b f894 	bl	80135f8 <lv_debug_check_null>
 80084d0:	4603      	mov	r3, r0
 80084d2:	b920      	cbnz	r0, 80084de <lv_obj_get_drag_dir+0x16>
 80084d4:	4622      	mov	r2, r4
 80084d6:	4804      	ldr	r0, [pc, #16]	; (80084e8 <lv_obj_get_drag_dir+0x20>)
 80084d8:	f00b f892 	bl	8013600 <lv_debug_log_error>
 80084dc:	e7fe      	b.n	80084dc <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
 80084de:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 80084e2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80084e6:	bd10      	pop	{r4, pc}
 80084e8:	0802c354 	.word	0x0802c354

080084ec <lv_obj_get_drag_throw>:
{
 80084ec:	b510      	push	{r4, lr}
 80084ee:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80084f0:	f00b f882 	bl	80135f8 <lv_debug_check_null>
 80084f4:	4603      	mov	r3, r0
 80084f6:	b920      	cbnz	r0, 8008502 <lv_obj_get_drag_throw+0x16>
 80084f8:	4622      	mov	r2, r4
 80084fa:	4804      	ldr	r0, [pc, #16]	; (800850c <lv_obj_get_drag_throw+0x20>)
 80084fc:	f00b f880 	bl	8013600 <lv_debug_log_error>
 8008500:	e7fe      	b.n	8008500 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
 8008502:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8008506:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800850a:	bd10      	pop	{r4, pc}
 800850c:	0802c354 	.word	0x0802c354

08008510 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 8008510:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
 8008514:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8008518:	4770      	bx	lr

0800851a <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
 800851a:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800851e:	f000 0001 	and.w	r0, r0, #1
 8008522:	4770      	bx	lr

08008524 <lv_obj_get_base_dir>:
{
 8008524:	b510      	push	{r4, lr}
 8008526:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008528:	f00b f866 	bl	80135f8 <lv_debug_check_null>
 800852c:	b910      	cbnz	r0, 8008534 <lv_obj_get_base_dir+0x10>
 800852e:	4620      	mov	r0, r4
 8008530:	f7ff f9a0 	bl	8007874 <lv_obj_add_state.part.37>
}
 8008534:	2000      	movs	r0, #0
 8008536:	bd10      	pop	{r4, pc}

08008538 <lv_obj_create>:
{
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	460d      	mov	r5, r1
    if(parent == NULL) {
 800853e:	4606      	mov	r6, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d16f      	bne.n	8008624 <lv_obj_create+0xec>
        lv_disp_t * disp = lv_disp_get_default();
 8008544:	f00a fa60 	bl	8012a08 <lv_disp_get_default>
        if(!disp) {
 8008548:	b918      	cbnz	r0, 8008552 <lv_obj_create+0x1a>
            return NULL;
 800854a:	2400      	movs	r4, #0
}
 800854c:	4620      	mov	r0, r4
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8008552:	3030      	adds	r0, #48	; 0x30
 8008554:	f00b f947 	bl	80137e6 <_lv_ll_ins_head>
 8008558:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 800855a:	f00b f84d 	bl	80135f8 <lv_debug_check_null>
 800855e:	4603      	mov	r3, r0
 8008560:	b920      	cbnz	r0, 800856c <lv_obj_create+0x34>
 8008562:	4622      	mov	r2, r4
 8008564:	48d2      	ldr	r0, [pc, #840]	; (80088b0 <lv_obj_create+0x378>)
 8008566:	f00b f84b 	bl	8013600 <lv_debug_log_error>
 800856a:	e7fe      	b.n	800856a <lv_obj_create+0x32>
        if(new_obj == NULL) return NULL;
 800856c:	2c00      	cmp	r4, #0
 800856e:	d0ec      	beq.n	800854a <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8008570:	214c      	movs	r1, #76	; 0x4c
 8008572:	4620      	mov	r0, r4
 8008574:	f00b fd7c 	bl	8014070 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8008578:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->event_cb = NULL;
 800857c:	61a6      	str	r6, [r4, #24]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800857e:	4630      	mov	r0, r6
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8008580:	f366 1346 	bfi	r3, r6, #5, #2
        new_obj->coords.x1    = 0;
 8008584:	6126      	str	r6, [r4, #16]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8008586:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 800858a:	4bca      	ldr	r3, [pc, #808]	; (80088b4 <lv_obj_create+0x37c>)
 800858c:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 800858e:	4bca      	ldr	r3, [pc, #808]	; (80088b8 <lv_obj_create+0x380>)
 8008590:	6223      	str	r3, [r4, #32]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8008592:	f00a fa3f 	bl	8012a14 <lv_disp_get_hor_res>
 8008596:	3801      	subs	r0, #1
 8008598:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800859a:	4630      	mov	r0, r6
 800859c:	f00a fa4c 	bl	8012a38 <lv_disp_get_ver_res>
 80085a0:	3801      	subs	r0, #1
 80085a2:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 80085a4:	214c      	movs	r1, #76	; 0x4c
 80085a6:	1d20      	adds	r0, r4, #4
 80085a8:	f00b f915 	bl	80137d6 <_lv_ll_init>
    new_obj->realign.align        = LV_ALIGN_CENTER;
 80085ac:	2300      	movs	r3, #0
    new_obj->realign.auto_realign = 0;
 80085ae:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80085b2:	2103      	movs	r1, #3
    new_obj->ext_draw_pad = 0;
 80085b4:	f04f 0801 	mov.w	r8, #1
    lv_style_list_init(&new_obj->style_list);
 80085b8:	f104 0728 	add.w	r7, r4, #40	; 0x28
    new_obj->realign.auto_realign = 0;
 80085bc:	f363 0200 	bfi	r2, r3, #0, #1
    new_obj->realign.align        = LV_ALIGN_CENTER;
 80085c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
 80085c4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    lv_style_list_init(&new_obj->style_list);
 80085c8:	4638      	mov	r0, r7
    new_obj->realign.auto_realign = 0;
 80085ca:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80085ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    new_obj->realign.yofs         = 0;
 80085d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80085d6:	f361 0284 	bfi	r2, r1, #2, #3
    new_obj->gesture_parent = parent ? 1 : 0;
 80085da:	1af1      	subs	r1, r6, r3
    new_obj->realign.base         = NULL;
 80085dc:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->gesture_parent = parent ? 1 : 0;
 80085de:	bf18      	it	ne
 80085e0:	2101      	movne	r1, #1
    new_obj->ext_click_pad_hor = 0;
 80085e2:	6323      	str	r3, [r4, #48]	; 0x30
    new_obj->ext_draw_pad = 0;
 80085e4:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
 80085e8:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->group_p = NULL;
 80085ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80085ee:	87a3      	strh	r3, [r4, #60]	; 0x3c
    new_obj->focus_parent  = 0;
 80085f0:	f363 0241 	bfi	r2, r3, #1, #1
    new_obj->ext_attr = NULL;
 80085f4:	6263      	str	r3, [r4, #36]	; 0x24
    new_obj->focus_parent  = 0;
 80085f6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    lv_style_list_init(&new_obj->style_list);
 80085fa:	f002 fedc 	bl	800b3b6 <lv_style_list_init>
    if(copy == NULL) {
 80085fe:	2d00      	cmp	r5, #0
 8008600:	f040 8098 	bne.w	8008734 <lv_obj_create+0x1fc>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8008604:	2e00      	cmp	r6, #0
 8008606:	f000 8090 	beq.w	800872a <lv_obj_create+0x1f2>
 800860a:	2102      	movs	r1, #2
 800860c:	4620      	mov	r0, r4
 800860e:	f00c fdd1 	bl	80151b4 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8008612:	69f3      	ldr	r3, [r6, #28]
 8008614:	4622      	mov	r2, r4
 8008616:	2101      	movs	r1, #1
 8008618:	4630      	mov	r0, r6
 800861a:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800861c:	4620      	mov	r0, r4
 800861e:	f7ff fcc5 	bl	8007fac <lv_obj_invalidate>
 8008622:	e793      	b.n	800854c <lv_obj_create+0x14>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 8008624:	f00a ffe8 	bl	80135f8 <lv_debug_check_null>
 8008628:	4603      	mov	r3, r0
 800862a:	b920      	cbnz	r0, 8008636 <lv_obj_create+0xfe>
 800862c:	4632      	mov	r2, r6
 800862e:	48a3      	ldr	r0, [pc, #652]	; (80088bc <lv_obj_create+0x384>)
 8008630:	f00a ffe6 	bl	8013600 <lv_debug_log_error>
 8008634:	e7fe      	b.n	8008634 <lv_obj_create+0xfc>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
 8008636:	1d30      	adds	r0, r6, #4
 8008638:	f00b f8d5 	bl	80137e6 <_lv_ll_ins_head>
 800863c:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 800863e:	f00a ffdb 	bl	80135f8 <lv_debug_check_null>
 8008642:	4603      	mov	r3, r0
 8008644:	b920      	cbnz	r0, 8008650 <lv_obj_create+0x118>
 8008646:	4622      	mov	r2, r4
 8008648:	4899      	ldr	r0, [pc, #612]	; (80088b0 <lv_obj_create+0x378>)
 800864a:	f00a ffd9 	bl	8013600 <lv_debug_log_error>
 800864e:	e7fe      	b.n	800864e <lv_obj_create+0x116>
        if(new_obj == NULL) return NULL;
 8008650:	2c00      	cmp	r4, #0
 8008652:	f43f af7a 	beq.w	800854a <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8008656:	214c      	movs	r1, #76	; 0x4c
 8008658:	4620      	mov	r0, r4
 800865a:	f00b fd09 	bl	8014070 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 800865e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->event_cb = NULL;
 8008662:	f04f 0900 	mov.w	r9, #0
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008666:	2732      	movs	r7, #50	; 0x32
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8008668:	f36f 1346 	bfc	r3, #5, #2
        new_obj->parent = parent;
 800866c:	6026      	str	r6, [r4, #0]
        new_obj->event_cb = NULL;
 800866e:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008672:	4648      	mov	r0, r9
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8008674:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 8008678:	4b8e      	ldr	r3, [pc, #568]	; (80088b4 <lv_obj_create+0x37c>)
 800867a:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 800867c:	4b8e      	ldr	r3, [pc, #568]	; (80088b8 <lv_obj_create+0x380>)
 800867e:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
 8008680:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8008684:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008686:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800868a:	f00a f9e7 	bl	8012a5c <lv_disp_get_dpi>
 800868e:	4378      	muls	r0, r7
 8008690:	28ef      	cmp	r0, #239	; 0xef
 8008692:	dd2d      	ble.n	80086f0 <lv_obj_create+0x1b8>
 8008694:	4648      	mov	r0, r9
 8008696:	f00a f9e1 	bl	8012a5c <lv_disp_get_dpi>
 800869a:	2350      	movs	r3, #80	; 0x50
 800869c:	fb00 3007 	mla	r0, r0, r7, r3
 80086a0:	27a0      	movs	r7, #160	; 0xa0
 80086a2:	fb90 f0f7 	sdiv	r0, r0, r7
 80086a6:	b280      	uxth	r0, r0
 80086a8:	4440      	add	r0, r8
 80086aa:	82e0      	strh	r0, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
 80086ac:	4620      	mov	r0, r4
 80086ae:	f7ff ff39 	bl	8008524 <lv_obj_get_base_dir>
 80086b2:	2801      	cmp	r0, #1
 80086b4:	4680      	mov	r8, r0
 80086b6:	d11d      	bne.n	80086f4 <lv_obj_create+0x1bc>
            new_obj->coords.x2    = parent->coords.x2;
 80086b8:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 80086bc:	2764      	movs	r7, #100	; 0x64
 80086be:	2000      	movs	r0, #0
            new_obj->coords.x2    = parent->coords.x2;
 80086c0:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 80086c2:	f8b6 9014 	ldrh.w	r9, [r6, #20]
 80086c6:	f00a f9c9 	bl	8012a5c <lv_disp_get_dpi>
 80086ca:	4378      	muls	r0, r7
 80086cc:	28ef      	cmp	r0, #239	; 0xef
 80086ce:	dd0a      	ble.n	80086e6 <lv_obj_create+0x1ae>
 80086d0:	2000      	movs	r0, #0
 80086d2:	f00a f9c3 	bl	8012a5c <lv_disp_get_dpi>
 80086d6:	2350      	movs	r3, #80	; 0x50
 80086d8:	fb00 3007 	mla	r0, r0, r7, r3
 80086dc:	27a0      	movs	r7, #160	; 0xa0
 80086de:	fb90 f0f7 	sdiv	r0, r0, r7
 80086e2:	fa1f f880 	uxth.w	r8, r0
 80086e6:	eba9 0808 	sub.w	r8, r9, r8
 80086ea:	f8a4 8010 	strh.w	r8, [r4, #16]
 80086ee:	e759      	b.n	80085a4 <lv_obj_create+0x6c>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 80086f0:	2001      	movs	r0, #1
 80086f2:	e7d9      	b.n	80086a8 <lv_obj_create+0x170>
            new_obj->coords.x1    = parent->coords.x1;
 80086f4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80086f8:	2764      	movs	r7, #100	; 0x64
 80086fa:	2000      	movs	r0, #0
            new_obj->coords.x1    = parent->coords.x1;
 80086fc:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80086fe:	f8b6 8010 	ldrh.w	r8, [r6, #16]
 8008702:	f00a f9ab 	bl	8012a5c <lv_disp_get_dpi>
 8008706:	4378      	muls	r0, r7
 8008708:	28ef      	cmp	r0, #239	; 0xef
 800870a:	dd0c      	ble.n	8008726 <lv_obj_create+0x1ee>
 800870c:	2000      	movs	r0, #0
 800870e:	f00a f9a5 	bl	8012a5c <lv_disp_get_dpi>
 8008712:	2350      	movs	r3, #80	; 0x50
 8008714:	fb00 3007 	mla	r0, r0, r7, r3
 8008718:	27a0      	movs	r7, #160	; 0xa0
 800871a:	fb90 f0f7 	sdiv	r0, r0, r7
 800871e:	b280      	uxth	r0, r0
 8008720:	4440      	add	r0, r8
 8008722:	82a0      	strh	r0, [r4, #20]
 8008724:	e73e      	b.n	80085a4 <lv_obj_create+0x6c>
 8008726:	2001      	movs	r0, #1
 8008728:	e7fa      	b.n	8008720 <lv_obj_create+0x1e8>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 800872a:	4641      	mov	r1, r8
 800872c:	4620      	mov	r0, r4
 800872e:	f00c fd41 	bl	80151b4 <lv_theme_apply>
 8008732:	e70b      	b.n	800854c <lv_obj_create+0x14>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 8008734:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8008738:	4638      	mov	r0, r7
 800873a:	f003 f928 	bl	800b98e <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
 800873e:	f104 0010 	add.w	r0, r4, #16
 8008742:	f105 0110 	add.w	r1, r5, #16
 8008746:	f7ff f89f 	bl	8007888 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800874a:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
        new_obj->base_dir = copy->base_dir;
 800874e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8008752:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 8008754:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8008758:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 800875c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8008760:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
 8008764:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8008768:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800876c:	f363 1246 	bfi	r2, r3, #5, #2
 8008770:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
 8008774:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8008778:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 800877c:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008780:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
        new_obj->realign.xofs         = copy->realign.xofs;
 8008784:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
 8008788:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
 800878c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
 8008790:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008792:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008794:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8008798:	f362 0300 	bfi	r3, r2, #0, #1
        new_obj->adv_hittest  = copy->adv_hittest;
 800879c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80087a0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
 80087a4:	69ab      	ldr	r3, [r5, #24]
 80087a6:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 80087a8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80087ac:	09db      	lsrs	r3, r3, #7
 80087ae:	f363 12c7 	bfi	r2, r3, #7, #1
 80087b2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
 80087b6:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 80087ba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80087be:	f362 0300 	bfi	r3, r2, #0, #1
 80087c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
 80087c6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80087ca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80087ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80087d2:	f363 0241 	bfi	r2, r3, #1, #1
 80087d6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
 80087da:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80087de:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80087e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80087e6:	f363 0284 	bfi	r2, r3, #2, #3
 80087ea:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
 80087ee:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80087f2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80087f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80087fa:	f363 0282 	bfi	r2, r3, #2, #1
 80087fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8008808:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800880c:	f363 02c3 	bfi	r2, r3, #3, #1
 8008810:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800881a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800881e:	f363 1204 	bfi	r2, r3, #4, #1
 8008822:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800882c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008830:	f363 1245 	bfi	r2, r3, #5, #1
 8008834:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800883e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008842:	f363 1286 	bfi	r2, r3, #6, #1
 8008846:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
 800884a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800884e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 8008852:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008856:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
 800885a:	f362 0300 	bfi	r3, r2, #0, #1
 800885e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 8008862:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8008866:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800886a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800886e:	f363 0241 	bfi	r2, r3, #1, #1
 8008872:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
 8008876:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008878:	b110      	cbz	r0, 8008880 <lv_obj_create+0x348>
            lv_group_add_obj(copy->group_p, new_obj);
 800887a:	4621      	mov	r1, r4
 800887c:	f7fd fcd4 	bl	8006228 <lv_group_add_obj>
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8008880:	4628      	mov	r0, r5
 8008882:	f7ff f983 	bl	8007b8c <lv_obj_get_parent>
 8008886:	b178      	cbz	r0, 80088a8 <lv_obj_create+0x370>
 8008888:	2e00      	cmp	r6, #0
 800888a:	f43f ae5f 	beq.w	800854c <lv_obj_create+0x14>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800888e:	4628      	mov	r0, r5
 8008890:	f7ff f9ec 	bl	8007c6c <lv_obj_get_x>
 8008894:	4607      	mov	r7, r0
 8008896:	4628      	mov	r0, r5
 8008898:	f7ff fa02 	bl	8007ca0 <lv_obj_get_y>
 800889c:	4639      	mov	r1, r7
 800889e:	4602      	mov	r2, r0
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7ff fbdf 	bl	8008064 <lv_obj_set_pos>
 80088a6:	e6b4      	b.n	8008612 <lv_obj_create+0xda>
    if(parent != NULL) {
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	f47f aeb2 	bne.w	8008612 <lv_obj_create+0xda>
 80088ae:	e64d      	b.n	800854c <lv_obj_create+0x14>
 80088b0:	0802c346 	.word	0x0802c346
 80088b4:	0800a995 	.word	0x0800a995
 80088b8:	08009b3d 	.word	0x08009b3d
 80088bc:	0802c354 	.word	0x0802c354

080088c0 <lv_obj_set_size>:
{
 80088c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c2:	4604      	mov	r4, r0
 80088c4:	460d      	mov	r5, r1
 80088c6:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80088c8:	f00a fe96 	bl	80135f8 <lv_debug_check_null>
 80088cc:	4603      	mov	r3, r0
 80088ce:	b920      	cbnz	r0, 80088da <lv_obj_set_size+0x1a>
 80088d0:	4622      	mov	r2, r4
 80088d2:	4829      	ldr	r0, [pc, #164]	; (8008978 <lv_obj_set_size+0xb8>)
 80088d4:	f00a fe94 	bl	8013600 <lv_debug_log_error>
 80088d8:	e7fe      	b.n	80088d8 <lv_obj_set_size+0x18>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff f9fa 	bl	8007cd4 <lv_obj_get_width>
 80088e0:	42a8      	cmp	r0, r5
 80088e2:	d033      	beq.n	800894c <lv_obj_set_size+0x8c>
    lv_obj_invalidate(obj);
 80088e4:	4620      	mov	r0, r4
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80088e6:	3e01      	subs	r6, #1
    lv_obj_invalidate(obj);
 80088e8:	f7ff fb60 	bl	8007fac <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80088ec:	4669      	mov	r1, sp
 80088ee:	4620      	mov	r0, r4
 80088f0:	b2ad      	uxth	r5, r5
 80088f2:	f7ff f9a5 	bl	8007c40 <lv_obj_get_coords>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80088f6:	8a63      	ldrh	r3, [r4, #18]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
 80088f8:	4620      	mov	r0, r4
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80088fa:	441e      	add	r6, r3
 80088fc:	82e6      	strh	r6, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
 80088fe:	f7ff fe11 	bl	8008524 <lv_obj_get_base_dir>
 8008902:	2801      	cmp	r0, #1
 8008904:	d129      	bne.n	800895a <lv_obj_set_size+0x9a>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8008906:	f1c5 0501 	rsb	r5, r5, #1
 800890a:	8aa3      	ldrh	r3, [r4, #20]
 800890c:	441d      	add	r5, r3
 800890e:	8225      	strh	r5, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8008910:	69e3      	ldr	r3, [r4, #28]
 8008912:	466a      	mov	r2, sp
 8008914:	2102      	movs	r1, #2
 8008916:	4620      	mov	r0, r4
 8008918:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
 800891a:	4620      	mov	r0, r4
 800891c:	f7ff f936 	bl	8007b8c <lv_obj_get_parent>
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008920:	b118      	cbz	r0, 800892a <lv_obj_set_size+0x6a>
 8008922:	69c3      	ldr	r3, [r0, #28]
 8008924:	4622      	mov	r2, r4
 8008926:	2101      	movs	r1, #1
 8008928:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 800892a:	1d26      	adds	r6, r4, #4
 800892c:	4630      	mov	r0, r6
 800892e:	f00a ff91 	bl	8013854 <_lv_ll_get_head>
 8008932:	4605      	mov	r5, r0
 8008934:	b9b0      	cbnz	r0, 8008964 <lv_obj_set_size+0xa4>
    lv_obj_invalidate(obj);
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff fb38 	bl	8007fac <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800893c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8008940:	07db      	lsls	r3, r3, #31
 8008942:	d508      	bpl.n	8008956 <lv_obj_set_size+0x96>
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff fd5f 	bl	8008408 <lv_obj_realign>
 800894a:	e004      	b.n	8008956 <lv_obj_set_size+0x96>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800894c:	4620      	mov	r0, r4
 800894e:	f7ff f9cf 	bl	8007cf0 <lv_obj_get_height>
 8008952:	42b0      	cmp	r0, r6
 8008954:	d1c6      	bne.n	80088e4 <lv_obj_set_size+0x24>
}
 8008956:	b002      	add	sp, #8
 8008958:	bd70      	pop	{r4, r5, r6, pc}
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800895a:	3d01      	subs	r5, #1
 800895c:	8a23      	ldrh	r3, [r4, #16]
 800895e:	441d      	add	r5, r3
 8008960:	82a5      	strh	r5, [r4, #20]
 8008962:	e7d5      	b.n	8008910 <lv_obj_set_size+0x50>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
 8008964:	69eb      	ldr	r3, [r5, #28]
 8008966:	466a      	mov	r2, sp
 8008968:	2103      	movs	r1, #3
 800896a:	4628      	mov	r0, r5
 800896c:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 800896e:	4629      	mov	r1, r5
 8008970:	4630      	mov	r0, r6
 8008972:	f00a ff75 	bl	8013860 <_lv_ll_get_next>
 8008976:	e7dc      	b.n	8008932 <lv_obj_set_size+0x72>
 8008978:	0802c354 	.word	0x0802c354

0800897c <lv_obj_set_width>:
{
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4604      	mov	r4, r0
 8008980:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008982:	f00a fe39 	bl	80135f8 <lv_debug_check_null>
 8008986:	4603      	mov	r3, r0
 8008988:	b920      	cbnz	r0, 8008994 <lv_obj_set_width+0x18>
 800898a:	4622      	mov	r2, r4
 800898c:	4806      	ldr	r0, [pc, #24]	; (80089a8 <lv_obj_set_width+0x2c>)
 800898e:	f00a fe37 	bl	8013600 <lv_debug_log_error>
 8008992:	e7fe      	b.n	8008992 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff f9ab 	bl	8007cf0 <lv_obj_get_height>
 800899a:	4629      	mov	r1, r5
 800899c:	4602      	mov	r2, r0
 800899e:	4620      	mov	r0, r4
}
 80089a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 80089a4:	f7ff bf8c 	b.w	80088c0 <lv_obj_set_size>
 80089a8:	0802c354 	.word	0x0802c354

080089ac <lv_obj_set_height>:
{
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80089b2:	f00a fe21 	bl	80135f8 <lv_debug_check_null>
 80089b6:	4603      	mov	r3, r0
 80089b8:	b920      	cbnz	r0, 80089c4 <lv_obj_set_height+0x18>
 80089ba:	4622      	mov	r2, r4
 80089bc:	4806      	ldr	r0, [pc, #24]	; (80089d8 <lv_obj_set_height+0x2c>)
 80089be:	f00a fe1f 	bl	8013600 <lv_debug_log_error>
 80089c2:	e7fe      	b.n	80089c2 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff f985 	bl	8007cd4 <lv_obj_get_width>
 80089ca:	462a      	mov	r2, r5
 80089cc:	4601      	mov	r1, r0
 80089ce:	4620      	mov	r0, r4
}
 80089d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80089d4:	f7ff bf74 	b.w	80088c0 <lv_obj_set_size>
 80089d8:	0802c354 	.word	0x0802c354

080089dc <lv_obj_is_protected>:
{
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80089e2:	f00a fe09 	bl	80135f8 <lv_debug_check_null>
 80089e6:	b910      	cbnz	r0, 80089ee <lv_obj_is_protected+0x12>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7fe ff43 	bl	8007874 <lv_obj_add_state.part.37>
    return (obj->protect & prot) == 0 ? false : true;
 80089ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80089f2:	421d      	tst	r5, r3
}
 80089f4:	bf14      	ite	ne
 80089f6:	2001      	movne	r0, #1
 80089f8:	2000      	moveq	r0, #0
 80089fa:	bd38      	pop	{r3, r4, r5, pc}

080089fc <lv_obj_get_state>:
{
 80089fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089fe:	4604      	mov	r4, r0
 8008a00:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008a02:	f00a fdf9 	bl	80135f8 <lv_debug_check_null>
 8008a06:	4603      	mov	r3, r0
 8008a08:	b920      	cbnz	r0, 8008a14 <lv_obj_get_state+0x18>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	480b      	ldr	r0, [pc, #44]	; (8008a3c <lv_obj_get_state+0x40>)
 8008a0e:	f00a fdf7 	bl	8013600 <lv_debug_log_error>
 8008a12:	e7fe      	b.n	8008a12 <lv_obj_get_state+0x16>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8008a14:	2d3f      	cmp	r5, #63	; 0x3f
 8008a16:	d803      	bhi.n	8008a20 <lv_obj_get_state+0x24>
 8008a18:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
 8008a1c:	b003      	add	sp, #12
 8008a1e:	bd30      	pop	{r4, r5, pc}
    info.result = LV_STATE_DEFAULT;
 8008a20:	2300      	movs	r3, #0
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 8008a22:	aa01      	add	r2, sp, #4
 8008a24:	2109      	movs	r1, #9
 8008a26:	4620      	mov	r0, r4
    info.part = part;
 8008a28:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 8008a2c:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 8008a30:	f7ff f870 	bl	8007b14 <lv_signal_send>
    return info.result;
 8008a34:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8008a38:	e7f0      	b.n	8008a1c <lv_obj_get_state+0x20>
 8008a3a:	bf00      	nop
 8008a3c:	0802c354 	.word	0x0802c354

08008a40 <_lv_obj_get_style_color>:
{
 8008a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	4605      	mov	r5, r0
 8008a46:	460e      	mov	r6, r1
 8008a48:	4617      	mov	r7, r2
    while(parent) {
 8008a4a:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8008a4c:	f342 2807 	sbfx	r8, r2, #8, #8
    while(parent) {
 8008a50:	b945      	cbnz	r5, 8008a64 <_lv_obj_get_style_color+0x24>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8008a52:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 8008a56:	3c29      	subs	r4, #41	; 0x29
 8008a58:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
 8008a5a:	bf96      	itet	ls
 8008a5c:	4b12      	ldrls	r3, [pc, #72]	; (8008aa8 <_lv_obj_get_style_color+0x68>)
 8008a5e:	2000      	movhi	r0, #0
 8008a60:	8818      	ldrhls	r0, [r3, #0]
 8008a62:	e014      	b.n	8008a8e <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	f7ff f962 	bl	8007d30 <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
 8008a6c:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8008a6e:	4681      	mov	r9, r0
        lv_state_t state = lv_obj_get_state(parent, part);
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7ff ffc3 	bl	80089fc <lv_obj_get_state>
        res = _lv_style_list_get_color(list, prop, &value_act);
 8008a76:	aa01      	add	r2, sp, #4
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8008a78:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 8008a7c:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(list, prop, &value_act);
 8008a7e:	4648      	mov	r0, r9
 8008a80:	4621      	mov	r1, r4
 8008a82:	f003 f864 	bl	800bb4e <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
 8008a86:	2801      	cmp	r0, #1
 8008a88:	d104      	bne.n	8008a94 <_lv_obj_get_style_color+0x54>
 8008a8a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 8008a8e:	b003      	add	sp, #12
 8008a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8008a94:	f1b8 0f00 	cmp.w	r8, #0
 8008a98:	dadb      	bge.n	8008a52 <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
 8008a9a:	b91e      	cbnz	r6, 8008aa4 <_lv_obj_get_style_color+0x64>
        parent = lv_obj_get_parent(parent);
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7ff f875 	bl	8007b8c <lv_obj_get_parent>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	e7d3      	b.n	8008a50 <_lv_obj_get_style_color+0x10>
 8008aa8:	0801f3a2 	.word	0x0801f3a2

08008aac <_lv_obj_get_style_int>:
{
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attr = prop_ori >> 8;
 8008ab0:	0a13      	lsrs	r3, r2, #8
{
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	4689      	mov	r9, r1
 8008ab8:	4690      	mov	r8, r2
    while(parent) {
 8008aba:	4616      	mov	r6, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008abc:	f248 0a83 	movw	sl, #32899	; 0x8083
 8008ac0:	f248 0ba0 	movw	fp, #32928	; 0x80a0
    attr = prop_ori >> 8;
 8008ac4:	9301      	str	r3, [sp, #4]
    while(parent) {
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d03b      	beq.n	8008b42 <_lv_obj_get_style_int+0x96>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8008aca:	4649      	mov	r1, r9
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7ff f92f 	bl	8007d30 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8008ad2:	7942      	ldrb	r2, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8008ad4:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 8008ad6:	0710      	lsls	r0, r2, #28
 8008ad8:	d418      	bmi.n	8008b0c <_lv_obj_get_style_int+0x60>
 8008ada:	7929      	ldrb	r1, [r5, #4]
 8008adc:	0689      	lsls	r1, r1, #26
 8008ade:	d015      	beq.n	8008b0c <_lv_obj_get_style_int+0x60>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8008ae0:	f012 0f04 	tst.w	r2, #4
 8008ae4:	f426 44fe 	bic.w	r4, r6, #32512	; 0x7f00
 8008ae8:	d104      	bne.n	8008af4 <_lv_obj_get_style_int+0x48>
 8008aea:	4622      	mov	r2, r4
 8008aec:	4649      	mov	r1, r9
 8008aee:	4638      	mov	r0, r7
 8008af0:	f000 f8c6 	bl	8008c80 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008af4:	2c33      	cmp	r4, #51	; 0x33
 8008af6:	d06b      	beq.n	8008bd0 <_lv_obj_get_style_int+0x124>
 8008af8:	dc40      	bgt.n	8008b7c <_lv_obj_get_style_int+0xd0>
 8008afa:	2c13      	cmp	r4, #19
 8008afc:	dc2d      	bgt.n	8008b5a <_lv_obj_get_style_int+0xae>
 8008afe:	2c10      	cmp	r4, #16
 8008b00:	da75      	bge.n	8008bee <_lv_obj_get_style_int+0x142>
 8008b02:	2c02      	cmp	r4, #2
 8008b04:	d059      	beq.n	8008bba <_lv_obj_get_style_int+0x10e>
 8008b06:	dc15      	bgt.n	8008b34 <_lv_obj_get_style_int+0x88>
 8008b08:	2c01      	cmp	r4, #1
 8008b0a:	d068      	beq.n	8008bde <_lv_obj_get_style_int+0x132>
        lv_state_t state = lv_obj_get_state(parent, part);
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f7ff ff74 	bl	80089fc <lv_obj_get_state>
        res = _lv_style_list_get_int(list, prop, &value_act);
 8008b14:	f10d 020e 	add.w	r2, sp, #14
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8008b18:	eb08 2000 	add.w	r0, r8, r0, lsl #8
 8008b1c:	b286      	uxth	r6, r0
        res = _lv_style_list_get_int(list, prop, &value_act);
 8008b1e:	4628      	mov	r0, r5
 8008b20:	4631      	mov	r1, r6
 8008b22:	f002 ffd1 	bl	800bac8 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
 8008b26:	2801      	cmp	r0, #1
 8008b28:	d165      	bne.n	8008bf6 <_lv_obj_get_style_int+0x14a>
 8008b2a:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
 8008b2e:	b005      	add	sp, #20
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008b34:	3c04      	subs	r4, #4
 8008b36:	2c03      	cmp	r4, #3
 8008b38:	d8e8      	bhi.n	8008b0c <_lv_obj_get_style_int+0x60>
                    if(list->transform_all_zero) def = true;
 8008b3a:	f995 2005 	ldrsb.w	r2, [r5, #5]
                    if(list->border_post_off) def = true;
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	dae4      	bge.n	8008b0c <_lv_obj_get_style_int+0x60>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8008b42:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
    switch(prop) {
 8008b46:	b2b6      	uxth	r6, r6
 8008b48:	2e22      	cmp	r6, #34	; 0x22
 8008b4a:	d069      	beq.n	8008c20 <_lv_obj_get_style_int+0x174>
 8008b4c:	d860      	bhi.n	8008c10 <_lv_obj_get_style_int+0x164>
 8008b4e:	2e03      	cmp	r6, #3
 8008b50:	d064      	beq.n	8008c1c <_lv_obj_get_style_int+0x170>
 8008b52:	2e07      	cmp	r6, #7
 8008b54:	d066      	beq.n	8008c24 <_lv_obj_get_style_int+0x178>
    return 0;
 8008b56:	2000      	movs	r0, #0
 8008b58:	e7e9      	b.n	8008b2e <_lv_obj_get_style_int+0x82>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008b5a:	2c20      	cmp	r4, #32
 8008b5c:	d018      	beq.n	8008b90 <_lv_obj_get_style_int+0xe4>
 8008b5e:	dc06      	bgt.n	8008b6e <_lv_obj_get_style_int+0xc2>
 8008b60:	3c15      	subs	r4, #21
 8008b62:	2c03      	cmp	r4, #3
 8008b64:	d8d2      	bhi.n	8008b0c <_lv_obj_get_style_int+0x60>
                    if(list->margin_all_zero) def = true;
 8008b66:	79aa      	ldrb	r2, [r5, #6]
 8008b68:	f012 0f02 	tst.w	r2, #2
 8008b6c:	e02c      	b.n	8008bc8 <_lv_obj_get_style_int+0x11c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008b6e:	2c31      	cmp	r4, #49	; 0x31
 8008b70:	d02c      	beq.n	8008bcc <_lv_obj_get_style_int+0x120>
 8008b72:	dc0d      	bgt.n	8008b90 <_lv_obj_get_style_int+0xe4>
 8008b74:	2c30      	cmp	r4, #48	; 0x30
 8008b76:	d1c9      	bne.n	8008b0c <_lv_obj_get_style_int+0x60>
                    if(list->border_width_zero) def = true;
 8008b78:	79aa      	ldrb	r2, [r5, #6]
 8008b7a:	e023      	b.n	8008bc4 <_lv_obj_get_style_int+0x118>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008b7c:	2c72      	cmp	r4, #114	; 0x72
 8008b7e:	d007      	beq.n	8008b90 <_lv_obj_get_style_int+0xe4>
 8008b80:	dc0c      	bgt.n	8008b9c <_lv_obj_get_style_int+0xf0>
 8008b82:	2c50      	cmp	r4, #80	; 0x50
 8008b84:	d02f      	beq.n	8008be6 <_lv_obj_get_style_int+0x13a>
 8008b86:	dc05      	bgt.n	8008b94 <_lv_obj_get_style_int+0xe8>
 8008b88:	2c40      	cmp	r4, #64	; 0x40
 8008b8a:	d024      	beq.n	8008bd6 <_lv_obj_get_style_int+0x12a>
 8008b8c:	2c42      	cmp	r4, #66	; 0x42
 8008b8e:	d1bd      	bne.n	8008b0c <_lv_obj_get_style_int+0x60>
                    if(list->blend_mode_all_normal) def = true;
 8008b90:	79aa      	ldrb	r2, [r5, #6]
 8008b92:	e029      	b.n	8008be8 <_lv_obj_get_style_int+0x13c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8008b94:	2c54      	cmp	r4, #84	; 0x54
 8008b96:	d0fb      	beq.n	8008b90 <_lv_obj_get_style_int+0xe4>
 8008b98:	2c60      	cmp	r4, #96	; 0x60
 8008b9a:	e7f8      	b.n	8008b8e <_lv_obj_get_style_int+0xe2>
 8008b9c:	f248 0381 	movw	r3, #32897	; 0x8081
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	dc05      	bgt.n	8008bb0 <_lv_obj_get_style_int+0x104>
 8008ba4:	f248 0280 	movw	r2, #32896	; 0x8080
 8008ba8:	4294      	cmp	r4, r2
 8008baa:	da0a      	bge.n	8008bc2 <_lv_obj_get_style_int+0x116>
 8008bac:	2c91      	cmp	r4, #145	; 0x91
 8008bae:	e7ee      	b.n	8008b8e <_lv_obj_get_style_int+0xe2>
 8008bb0:	4554      	cmp	r4, sl
 8008bb2:	d0ed      	beq.n	8008b90 <_lv_obj_get_style_int+0xe4>
 8008bb4:	db1d      	blt.n	8008bf2 <_lv_obj_get_style_int+0x146>
 8008bb6:	455c      	cmp	r4, fp
 8008bb8:	e7e9      	b.n	8008b8e <_lv_obj_get_style_int+0xe2>
                    if(list->clip_corner_off) def = true;
 8008bba:	796a      	ldrb	r2, [r5, #5]
                    if(list->text_decor_none) def = true;
 8008bbc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bc0:	e002      	b.n	8008bc8 <_lv_obj_get_style_int+0x11c>
                    if(list->text_space_zero) def = true;
 8008bc2:	79ea      	ldrb	r2, [r5, #7]
                    if(list->border_width_zero) def = true;
 8008bc4:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
 8008bc8:	d0a0      	beq.n	8008b0c <_lv_obj_get_style_int+0x60>
 8008bca:	e7ba      	b.n	8008b42 <_lv_obj_get_style_int+0x96>
                    if(list->border_side_full) def = true;
 8008bcc:	79aa      	ldrb	r2, [r5, #6]
 8008bce:	e7f5      	b.n	8008bbc <_lv_obj_get_style_int+0x110>
                    if(list->border_post_off) def = true;
 8008bd0:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8008bd4:	e7b3      	b.n	8008b3e <_lv_obj_get_style_int+0x92>
                    if(list->outline_width_zero) def = true;
 8008bd6:	79ea      	ldrb	r2, [r5, #7]
                    if(list->pad_all_zero) def = true;
 8008bd8:	f012 0f01 	tst.w	r2, #1
 8008bdc:	e7f4      	b.n	8008bc8 <_lv_obj_get_style_int+0x11c>
                    if(list->radius_zero) def = true;
 8008bde:	796a      	ldrb	r2, [r5, #5]
 8008be0:	f012 0f10 	tst.w	r2, #16
 8008be4:	e7f0      	b.n	8008bc8 <_lv_obj_get_style_int+0x11c>
                    if(list->shadow_width_zero) def = true;
 8008be6:	79ea      	ldrb	r2, [r5, #7]
                    if(list->blend_mode_all_normal) def = true;
 8008be8:	f012 0f04 	tst.w	r2, #4
 8008bec:	e7ec      	b.n	8008bc8 <_lv_obj_get_style_int+0x11c>
                    if(list->pad_all_zero) def = true;
 8008bee:	79aa      	ldrb	r2, [r5, #6]
 8008bf0:	e7f2      	b.n	8008bd8 <_lv_obj_get_style_int+0x12c>
                    if(list->text_decor_none) def = true;
 8008bf2:	79ea      	ldrb	r2, [r5, #7]
 8008bf4:	e7e2      	b.n	8008bbc <_lv_obj_get_style_int+0x110>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	061b      	lsls	r3, r3, #24
 8008bfa:	d5a2      	bpl.n	8008b42 <_lv_obj_get_style_int+0x96>
        if(part != LV_OBJ_PART_MAIN) {
 8008bfc:	f1b9 0f00 	cmp.w	r9, #0
 8008c00:	d103      	bne.n	8008c0a <_lv_obj_get_style_int+0x15e>
        parent = lv_obj_get_parent(parent);
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7fe ffc2 	bl	8007b8c <lv_obj_get_parent>
 8008c08:	4607      	mov	r7, r0
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	e75a      	b.n	8008ac6 <_lv_obj_get_style_int+0x1a>
    switch(prop) {
 8008c10:	2e31      	cmp	r6, #49	; 0x31
 8008c12:	d00a      	beq.n	8008c2a <_lv_obj_get_style_int+0x17e>
 8008c14:	2ec0      	cmp	r6, #192	; 0xc0
 8008c16:	d19e      	bne.n	8008b56 <_lv_obj_get_style_int+0xaa>
            return LV_DPI / 8;
 8008c18:	2010      	movs	r0, #16
 8008c1a:	e788      	b.n	8008b2e <_lv_obj_get_style_int+0x82>
            return LV_DPI / 20;
 8008c1c:	2006      	movs	r0, #6
 8008c1e:	e786      	b.n	8008b2e <_lv_obj_get_style_int+0x82>
            return 255;
 8008c20:	20ff      	movs	r0, #255	; 0xff
 8008c22:	e784      	b.n	8008b2e <_lv_obj_get_style_int+0x82>
            return LV_IMG_ZOOM_NONE;
 8008c24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008c28:	e781      	b.n	8008b2e <_lv_obj_get_style_int+0x82>
            return LV_BORDER_SIDE_FULL;
 8008c2a:	200f      	movs	r0, #15
 8008c2c:	e77f      	b.n	8008b2e <_lv_obj_get_style_int+0x82>

08008c2e <lv_obj_get_style_clip_corner>:
    _OBJ_GET_STYLE(prop_name, func_name, value_type, style_type)                                                         \
    _OBJ_SET_STYLE_LOCAL(prop_name, func_name, value_type, style_type)                                                   \
    _OBJ_SET_STYLE(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 8008c2e:	b508      	push	{r3, lr}
 8008c30:	2202      	movs	r2, #2
 8008c32:	f7ff ff3b 	bl	8008aac <_lv_obj_get_style_int>
 8008c36:	3000      	adds	r0, #0
 8008c38:	bf18      	it	ne
 8008c3a:	2001      	movne	r0, #1
 8008c3c:	bd08      	pop	{r3, pc}
	...

08008c40 <lv_obj_get_width_fit>:
{
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8008c44:	f00a fcd8 	bl	80135f8 <lv_debug_check_null>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	b920      	cbnz	r0, 8008c56 <lv_obj_get_width_fit+0x16>
 8008c4c:	462a      	mov	r2, r5
 8008c4e:	480b      	ldr	r0, [pc, #44]	; (8008c7c <lv_obj_get_width_fit+0x3c>)
 8008c50:	f00a fcd6 	bl	8013600 <lv_debug_log_error>
 8008c54:	e7fe      	b.n	8008c54 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8008c56:	2212      	movs	r2, #18
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7ff ff26 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8008c60:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8008c62:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8008c64:	2100      	movs	r1, #0
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7ff ff20 	bl	8008aac <_lv_obj_get_style_int>
 8008c6c:	4606      	mov	r6, r0
    return lv_obj_get_width(obj) - left - right;
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f7ff f830 	bl	8007cd4 <lv_obj_get_width>
 8008c74:	1b00      	subs	r0, r0, r4
 8008c76:	1b80      	subs	r0, r0, r6
}
 8008c78:	b200      	sxth	r0, r0
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	0802c354 	.word	0x0802c354

08008c80 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
 8008c84:	4610      	mov	r0, r2
{
 8008c86:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
 8008c88:	f7fe fd82 	bl	8007790 <style_prop_is_cacheble>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f000 8118 	beq.w	8008ec2 <update_style_cache+0x242>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8008c92:	4628      	mov	r0, r5
 8008c94:	f7ff f84c 	bl	8007d30 <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
 8008c98:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8008c9a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8008c9c:	f248 020c 	movw	r2, #32780	; 0x800c
    bool ignore_cache_ori = list->ignore_cache;
 8008ca0:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
 8008ca4:	f043 0308 	orr.w	r3, r3, #8
 8008ca8:	4631      	mov	r1, r6
 8008caa:	7143      	strb	r3, [r0, #5]
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 f99f 	bl	8008ff0 <_lv_obj_get_style_opa>

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8008cb2:	f1a0 0cff 	sub.w	ip, r0, #255	; 0xff
 8008cb6:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8008cb8:	f248 0282 	movw	r2, #32898	; 0x8082
 8008cbc:	f1dc 0000 	rsbs	r0, ip, #0
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	eb40 000c 	adc.w	r0, r0, ip
 8008cc6:	f360 1345 	bfi	r3, r0, #5, #1
 8008cca:	4628      	mov	r0, r5
 8008ccc:	7163      	strb	r3, [r4, #5]
 8008cce:	f7ff feed 	bl	8008aac <_lv_obj_get_style_int>
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8008cd2:	79e3      	ldrb	r3, [r4, #7]
 8008cd4:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8008cd6:	f248 028e 	movw	r2, #32910	; 0x808e
 8008cda:	4631      	mov	r1, r6
 8008cdc:	fab0 f080 	clz	r0, r0
 8008ce0:	0940      	lsrs	r0, r0, #5
 8008ce2:	f360 1386 	bfi	r3, r0, #6, #1
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	71e3      	strb	r3, [r4, #7]
 8008cea:	f000 f9e7 	bl	80090bc <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 8008cee:	4bbf      	ldr	r3, [pc, #764]	; (8008fec <update_style_cache+0x36c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8008cf0:	f248 0280 	movw	r2, #32896	; 0x8080
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	eba3 0e00 	sub.w	lr, r3, r0
 8008cfa:	79e3      	ldrb	r3, [r4, #7]
 8008cfc:	f1de 0000 	rsbs	r0, lr, #0
 8008d00:	eb40 000e 	adc.w	r0, r0, lr
 8008d04:	f360 13c7 	bfi	r3, r0, #7, #1
 8008d08:	4628      	mov	r0, r5

    list->text_space_zero = 1;
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f043 0320 	orr.w	r3, r3, #32
 8008d10:	71e3      	strb	r3, [r4, #7]
 8008d12:	f7ff fecb 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f000 80d4 	beq.w	8008ec4 <update_style_cache+0x244>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
 8008d1c:	79e3      	ldrb	r3, [r4, #7]
 8008d1e:	f36f 1345 	bfc	r3, #5, #1
 8008d22:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8008d24:	222c      	movs	r2, #44	; 0x2c
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f000 f961 	bl	8008ff0 <_lv_obj_get_style_opa>
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8008d2e:	fab0 f280 	clz	r2, r0
 8008d32:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8008d34:	4631      	mov	r1, r6
 8008d36:	0952      	lsrs	r2, r2, #5
 8008d38:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8008d3c:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
 8008d40:	4250      	negs	r0, r2
 8008d42:	4150      	adcs	r0, r2
 8008d44:	2230      	movs	r2, #48	; 0x30
 8008d46:	f360 1304 	bfi	r3, r0, #4, #1
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	71a3      	strb	r3, [r4, #6]
 8008d4e:	f7ff fead 	bl	8008aac <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8008d52:	fab0 f080 	clz	r0, r0
 8008d56:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8008d58:	2231      	movs	r2, #49	; 0x31
 8008d5a:	0940      	lsrs	r0, r0, #5
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	f360 1345 	bfi	r3, r0, #5, #1
 8008d62:	4628      	mov	r0, r5
 8008d64:	71a3      	strb	r3, [r4, #6]
 8008d66:	f7ff fea1 	bl	8008aac <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8008d6a:	79a3      	ldrb	r3, [r4, #6]
 8008d6c:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8008d6e:	2233      	movs	r2, #51	; 0x33
 8008d70:	f1a0 010f 	sub.w	r1, r0, #15
 8008d74:	4248      	negs	r0, r1
 8008d76:	4148      	adcs	r0, r1
 8008d78:	4631      	mov	r1, r6
 8008d7a:	f360 1386 	bfi	r3, r0, #6, #1
 8008d7e:	4628      	mov	r0, r5
 8008d80:	71a3      	strb	r3, [r4, #6]
 8008d82:	f7ff fe93 	bl	8008aac <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8008d86:	fab0 f080 	clz	r0, r0
 8008d8a:	79a3      	ldrb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 8008d8c:	4631      	mov	r1, r6
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8008d8e:	0940      	lsrs	r0, r0, #5
 8008d90:	f360 13c7 	bfi	r3, r0, #7, #1
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 8008d94:	4628      	mov	r0, r5
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8008d96:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 8008d98:	f7ff ff49 	bl	8008c2e <lv_obj_get_style_clip_corner>
 8008d9c:	7963      	ldrb	r3, [r4, #5]
 8008d9e:	f080 0001 	eor.w	r0, r0, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8008da2:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8008da6:	4631      	mov	r1, r6
 8008da8:	f360 1386 	bfi	r3, r0, #6, #1
 8008dac:	4628      	mov	r0, r5
 8008dae:	7163      	strb	r3, [r4, #5]
 8008db0:	f000 f91e 	bl	8008ff0 <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8008db4:	fab0 f080 	clz	r0, r0
 8008db8:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 8008dba:	2240      	movs	r2, #64	; 0x40
 8008dbc:	0940      	lsrs	r0, r0, #5
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	f360 1304 	bfi	r3, r0, #4, #1
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	71e3      	strb	r3, [r4, #7]
 8008dc8:	f7ff fe70 	bl	8008aac <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 8008dcc:	fab0 f080 	clz	r0, r0
 8008dd0:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr)
 8008dd2:	226e      	movs	r2, #110	; 0x6e
 8008dd4:	0940      	lsrs	r0, r0, #5
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	f360 0300 	bfi	r3, r0, #0, #1
 8008ddc:	4628      	mov	r0, r5
 8008dde:	71e3      	strb	r3, [r4, #7]
 8008de0:	f000 f96c 	bl	80090bc <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 8008de4:	fab0 f080 	clz	r0, r0
 8008de8:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8008dea:	2201      	movs	r2, #1
 8008dec:	0940      	lsrs	r0, r0, #5
 8008dee:	4631      	mov	r1, r6
 8008df0:	f360 0341 	bfi	r3, r0, #1, #1
 8008df4:	4628      	mov	r0, r5
 8008df6:	71e3      	strb	r3, [r4, #7]
 8008df8:	f7ff fe58 	bl	8008aac <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8008dfc:	fab0 f080 	clz	r0, r0
 8008e00:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 8008e02:	2250      	movs	r2, #80	; 0x50
 8008e04:	0940      	lsrs	r0, r0, #5
 8008e06:	4631      	mov	r1, r6
 8008e08:	f360 1304 	bfi	r3, r0, #4, #1
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	7163      	strb	r3, [r4, #5]
 8008e10:	f7ff fe4c 	bl	8008aac <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 8008e14:	fab0 f080 	clz	r0, r0
 8008e18:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 8008e1a:	227f      	movs	r2, #127	; 0x7f
 8008e1c:	0940      	lsrs	r0, r0, #5
 8008e1e:	4631      	mov	r1, r6
 8008e20:	f360 0382 	bfi	r3, r0, #2, #1
 8008e24:	4628      	mov	r0, r5
 8008e26:	71e3      	strb	r3, [r4, #7]
 8008e28:	f000 f948 	bl	80090bc <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8008e2c:	fab0 f080 	clz	r0, r0
 8008e30:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 8008e32:	2206      	movs	r2, #6
 8008e34:	0940      	lsrs	r0, r0, #5
 8008e36:	4631      	mov	r1, r6
 8008e38:	f360 03c3 	bfi	r3, r0, #3, #1
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	71e3      	strb	r3, [r4, #7]

    list->transform_all_zero  = 1;
 8008e40:	7963      	ldrb	r3, [r4, #5]
 8008e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e46:	7163      	strb	r3, [r4, #5]
 8008e48:	f7ff fe30 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d043      	beq.n	8008ed8 <update_style_cache+0x258>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
 8008e50:	7963      	ldrb	r3, [r4, #5]
 8008e52:	f36f 13c7 	bfc	r3, #7, #1
 8008e56:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
 8008e58:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f043 0301 	orr.w	r3, r3, #1
 8008e64:	71a3      	strb	r3, [r4, #6]
 8008e66:	f7ff fe21 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d04b      	beq.n	8008f06 <update_style_cache+0x286>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
 8008e6e:	79a3      	ldrb	r3, [r4, #6]
 8008e70:	f36f 0300 	bfc	r3, #0, #1
 8008e74:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
 8008e76:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 8008e78:	2215      	movs	r2, #21
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f043 0302 	orr.w	r3, r3, #2
 8008e82:	71a3      	strb	r3, [r4, #6]
 8008e84:	f7ff fe12 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d052      	beq.n	8008f32 <update_style_cache+0x2b2>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
 8008e8c:	79a3      	ldrb	r3, [r4, #6]
 8008e8e:	f36f 0341 	bfc	r3, #1, #1
 8008e92:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
 8008e94:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 8008e96:	2220      	movs	r2, #32
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f043 0304 	orr.w	r3, r3, #4
 8008ea0:	71a3      	strb	r3, [r4, #6]
 8008ea2:	f7ff fe03 	bl	8008aac <_lv_obj_get_style_int>
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008ea6:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008eaa:	d058      	beq.n	8008f5e <update_style_cache+0x2de>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
 8008eac:	79a3      	ldrb	r3, [r4, #6]
 8008eae:	f36f 0382 	bfc	r3, #2, #1
 8008eb2:	71a3      	strb	r3, [r4, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 8008eb4:	7963      	ldrb	r3, [r4, #5]
 8008eb6:	f367 03c3 	bfi	r3, r7, #3, #1
    list->valid_cache = 1;
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f043 0304 	orr.w	r3, r3, #4
 8008ec0:	7163      	strb	r3, [r4, #5]
}
 8008ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8008ec4:	f248 0281 	movw	r2, #32897	; 0x8081
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7ff fdee 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f47f af23 	bne.w	8008d1c <update_style_cache+0x9c>
 8008ed6:	e725      	b.n	8008d24 <update_style_cache+0xa4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8008ed8:	2204      	movs	r2, #4
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	f7ff fde5 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1b4      	bne.n	8008e50 <update_style_cache+0x1d0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8008ee6:	2205      	movs	r2, #5
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	f7ff fdde 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1ad      	bne.n	8008e50 <update_style_cache+0x1d0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f7ff fdd7 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 8008efe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008f02:	d1a5      	bne.n	8008e50 <update_style_cache+0x1d0>
 8008f04:	e7a8      	b.n	8008e58 <update_style_cache+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8008f06:	2211      	movs	r2, #17
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff fdce 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d1ac      	bne.n	8008e6e <update_style_cache+0x1ee>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8008f14:	2212      	movs	r2, #18
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7ff fdc7 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d1a5      	bne.n	8008e6e <update_style_cache+0x1ee>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8008f22:	2213      	movs	r2, #19
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	f7ff fdc0 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d19e      	bne.n	8008e6e <update_style_cache+0x1ee>
 8008f30:	e7a1      	b.n	8008e76 <update_style_cache+0x1f6>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8008f32:	2216      	movs	r2, #22
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	f7ff fdb8 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d1a5      	bne.n	8008e8c <update_style_cache+0x20c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8008f40:	2217      	movs	r2, #23
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7ff fdb1 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d19e      	bne.n	8008e8c <update_style_cache+0x20c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 8008f4e:	2218      	movs	r2, #24
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7ff fdaa 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d197      	bne.n	8008e8c <update_style_cache+0x20c>
 8008f5c:	e79a      	b.n	8008e94 <update_style_cache+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
 8008f5e:	2232      	movs	r2, #50	; 0x32
 8008f60:	4631      	mov	r1, r6
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7ff fda2 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008f68:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008f6c:	d19e      	bne.n	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int)
 8008f6e:	2260      	movs	r2, #96	; 0x60
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	f7ff fd9a 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008f78:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008f7c:	d196      	bne.n	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int)
 8008f7e:	2242      	movs	r2, #66	; 0x42
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	f7ff fd92 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008f88:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008f8c:	d18e      	bne.n	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int)
 8008f8e:	2272      	movs	r2, #114	; 0x72
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7ff fd8a 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008f98:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008f9c:	d186      	bne.n	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
 8008f9e:	f248 0283 	movw	r2, #32899	; 0x8083
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f7ff fd81 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008faa:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008fae:	f47f af7d 	bne.w	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int)
 8008fb2:	2291      	movs	r2, #145	; 0x91
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7ff fd78 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008fbc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008fc0:	f47f af74 	bne.w	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
 8008fc4:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f7ff fd6e 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008fd0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008fd4:	f47f af6a 	bne.w	8008eac <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int)
 8008fd8:	2254      	movs	r2, #84	; 0x54
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7ff fd65 	bl	8008aac <_lv_obj_get_style_int>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8008fe2:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008fe6:	f47f af61 	bne.w	8008eac <update_style_cache+0x22c>
 8008fea:	e763      	b.n	8008eb4 <update_style_cache+0x234>
 8008fec:	20000064 	.word	0x20000064

08008ff0 <_lv_obj_get_style_opa>:
{
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
 8008ffc:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
 8009000:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8009002:	f248 0a0c 	movw	sl, #32780	; 0x800c
 8009006:	f248 0bad 	movw	fp, #32941	; 0x80ad
    while(parent) {
 800900a:	b965      	cbnz	r5, 8009026 <_lv_obj_get_style_opa+0x36>
    prop = prop & (~LV_STYLE_STATE_MASK);
 800900c:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 8009010:	b2a4      	uxth	r4, r4
 8009012:	2c6d      	cmp	r4, #109	; 0x6d
 8009014:	d050      	beq.n	80090b8 <_lv_obj_get_style_opa+0xc8>
 8009016:	f248 03ad 	movw	r3, #32941	; 0x80ad
 800901a:	429c      	cmp	r4, r3
 800901c:	d04c      	beq.n	80090b8 <_lv_obj_get_style_opa+0xc8>
 800901e:	2c2c      	cmp	r4, #44	; 0x2c
 8009020:	d04a      	beq.n	80090b8 <_lv_obj_get_style_opa+0xc8>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8009022:	20ff      	movs	r0, #255	; 0xff
 8009024:	e037      	b.n	8009096 <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8009026:	4639      	mov	r1, r7
 8009028:	4628      	mov	r0, r5
 800902a:	f7fe fe81 	bl	8007d30 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 800902e:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8009030:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 8009032:	0718      	lsls	r0, r3, #28
 8009034:	d41e      	bmi.n	8009074 <_lv_obj_get_style_opa+0x84>
 8009036:	7932      	ldrb	r2, [r6, #4]
 8009038:	0691      	lsls	r1, r2, #26
 800903a:	d01b      	beq.n	8009074 <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800903c:	f013 0f04 	tst.w	r3, #4
 8009040:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
 8009044:	d106      	bne.n	8009054 <_lv_obj_get_style_opa+0x64>
 8009046:	461a      	mov	r2, r3
 8009048:	4639      	mov	r1, r7
 800904a:	4628      	mov	r0, r5
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f7ff fe17 	bl	8008c80 <update_style_cache>
 8009052:	9b01      	ldr	r3, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8009054:	4553      	cmp	r3, sl
 8009056:	d009      	beq.n	800906c <_lv_obj_get_style_opa+0x7c>
 8009058:	455b      	cmp	r3, fp
 800905a:	d01f      	beq.n	800909c <_lv_obj_get_style_opa+0xac>
 800905c:	2b2c      	cmp	r3, #44	; 0x2c
 800905e:	d109      	bne.n	8009074 <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8009060:	79b3      	ldrb	r3, [r6, #6]
 8009062:	06da      	lsls	r2, r3, #27
 8009064:	d4dd      	bmi.n	8009022 <_lv_obj_get_style_opa+0x32>
                    if(list->bg_opa_transp) def = true;
 8009066:	f013 0f08 	tst.w	r3, #8
 800906a:	e002      	b.n	8009072 <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
 800906c:	7973      	ldrb	r3, [r6, #5]
 800906e:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
 8009072:	d1cb      	bne.n	800900c <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
 8009074:	4639      	mov	r1, r7
 8009076:	4628      	mov	r0, r5
 8009078:	f7ff fcc0 	bl	80089fc <lv_obj_get_state>
        res = _lv_style_list_get_opa(list, prop, &value_act);
 800907c:	f10d 020f 	add.w	r2, sp, #15
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8009080:	eb08 2000 	add.w	r0, r8, r0, lsl #8
 8009084:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(list, prop, &value_act);
 8009086:	4630      	mov	r0, r6
 8009088:	4621      	mov	r1, r4
 800908a:	f002 fda3 	bl	800bbd4 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
 800908e:	2801      	cmp	r0, #1
 8009090:	d108      	bne.n	80090a4 <_lv_obj_get_style_opa+0xb4>
 8009092:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8009096:	b005      	add	sp, #20
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
 800909c:	79f3      	ldrb	r3, [r6, #7]
 800909e:	f013 0f10 	tst.w	r3, #16
 80090a2:	e7e6      	b.n	8009072 <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80090a4:	f019 0f80 	tst.w	r9, #128	; 0x80
 80090a8:	d0b0      	beq.n	800900c <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
 80090aa:	b91f      	cbnz	r7, 80090b4 <_lv_obj_get_style_opa+0xc4>
        parent = lv_obj_get_parent(parent);
 80090ac:	4628      	mov	r0, r5
 80090ae:	f7fe fd6d 	bl	8007b8c <lv_obj_get_parent>
 80090b2:	4605      	mov	r5, r0
 80090b4:	2700      	movs	r7, #0
 80090b6:	e7a8      	b.n	800900a <_lv_obj_get_style_opa+0x1a>
            return LV_OPA_TRANSP;
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7ec      	b.n	8009096 <_lv_obj_get_style_opa+0xa6>

080090bc <_lv_obj_get_style_ptr>:
{
 80090bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	4605      	mov	r5, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	4691      	mov	r9, r2
    while(parent) {
 80090c6:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80090c8:	f248 0a8e 	movw	sl, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80090cc:	f342 2b07 	sbfx	fp, r2, #8, #8
    while(parent) {
 80090d0:	b325      	cbz	r5, 800911c <_lv_obj_get_style_ptr+0x60>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80090d2:	4639      	mov	r1, r7
 80090d4:	4628      	mov	r0, r5
 80090d6:	f7fe fe2b 	bl	8007d30 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 80090da:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80090dc:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 80090de:	0719      	lsls	r1, r3, #28
 80090e0:	d42d      	bmi.n	800913e <_lv_obj_get_style_ptr+0x82>
 80090e2:	7902      	ldrb	r2, [r0, #4]
 80090e4:	0692      	lsls	r2, r2, #26
 80090e6:	d02a      	beq.n	800913e <_lv_obj_get_style_ptr+0x82>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80090e8:	f013 0f04 	tst.w	r3, #4
 80090ec:	f424 48fe 	bic.w	r8, r4, #32512	; 0x7f00
 80090f0:	d104      	bne.n	80090fc <_lv_obj_get_style_ptr+0x40>
 80090f2:	4642      	mov	r2, r8
 80090f4:	4639      	mov	r1, r7
 80090f6:	4628      	mov	r0, r5
 80090f8:	f7ff fdc2 	bl	8008c80 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80090fc:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8009100:	d008      	beq.n	8009114 <_lv_obj_get_style_ptr+0x58>
 8009102:	45d0      	cmp	r8, sl
 8009104:	d017      	beq.n	8009136 <_lv_obj_get_style_ptr+0x7a>
 8009106:	f1b8 0f6e 	cmp.w	r8, #110	; 0x6e
 800910a:	d118      	bne.n	800913e <_lv_obj_get_style_ptr+0x82>
                    if(list->pattern_img_null) def = true;
 800910c:	79f3      	ldrb	r3, [r6, #7]
 800910e:	f013 0f02 	tst.w	r3, #2
 8009112:	e002      	b.n	800911a <_lv_obj_get_style_ptr+0x5e>
                    if(list->value_txt_str) def = true;
 8009114:	79f3      	ldrb	r3, [r6, #7]
 8009116:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
 800911a:	d010      	beq.n	800913e <_lv_obj_get_style_ptr+0x82>
    prop = prop & (~LV_STYLE_STATE_MASK);
 800911c:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 8009120:	b2a4      	uxth	r4, r4
 8009122:	2cbe      	cmp	r4, #190	; 0xbe
 8009124:	d02a      	beq.n	800917c <_lv_obj_get_style_ptr+0xc0>
 8009126:	f248 038e 	movw	r3, #32910	; 0x808e
 800912a:	429c      	cmp	r4, r3
 800912c:	d023      	beq.n	8009176 <_lv_obj_get_style_ptr+0xba>
 800912e:	2c7e      	cmp	r4, #126	; 0x7e
 8009130:	d021      	beq.n	8009176 <_lv_obj_get_style_ptr+0xba>
    return NULL;
 8009132:	2000      	movs	r0, #0
 8009134:	e012      	b.n	800915c <_lv_obj_get_style_ptr+0xa0>
                    if(list->text_font_normal) def = true;
 8009136:	f996 3007 	ldrsb.w	r3, [r6, #7]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dbee      	blt.n	800911c <_lv_obj_get_style_ptr+0x60>
        lv_state_t state = lv_obj_get_state(parent, part);
 800913e:	4639      	mov	r1, r7
 8009140:	4628      	mov	r0, r5
 8009142:	f7ff fc5b 	bl	80089fc <lv_obj_get_state>
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8009146:	aa01      	add	r2, sp, #4
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8009148:	eb09 2000 	add.w	r0, r9, r0, lsl #8
 800914c:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 800914e:	4630      	mov	r0, r6
 8009150:	4621      	mov	r1, r4
 8009152:	f002 fd82 	bl	800bc5a <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8009156:	2801      	cmp	r0, #1
 8009158:	d103      	bne.n	8009162 <_lv_obj_get_style_ptr+0xa6>
 800915a:	9801      	ldr	r0, [sp, #4]
}
 800915c:	b003      	add	sp, #12
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8009162:	f1bb 0f00 	cmp.w	fp, #0
 8009166:	dad9      	bge.n	800911c <_lv_obj_get_style_ptr+0x60>
        if(part != LV_OBJ_PART_MAIN) {
 8009168:	b91f      	cbnz	r7, 8009172 <_lv_obj_get_style_ptr+0xb6>
        parent = lv_obj_get_parent(parent);
 800916a:	4628      	mov	r0, r5
 800916c:	f7fe fd0e 	bl	8007b8c <lv_obj_get_parent>
 8009170:	4605      	mov	r5, r0
 8009172:	2700      	movs	r7, #0
 8009174:	e7ac      	b.n	80090d0 <_lv_obj_get_style_ptr+0x14>
            return lv_theme_get_font_normal();
 8009176:	f00c f8af 	bl	80152d8 <lv_theme_get_font_normal>
 800917a:	e7ef      	b.n	800915c <_lv_obj_get_style_ptr+0xa0>
            return &lv_anim_path_def;
 800917c:	4800      	ldr	r0, [pc, #0]	; (8009180 <_lv_obj_get_style_ptr+0xc4>)
 800917e:	e7ed      	b.n	800915c <_lv_obj_get_style_ptr+0xa0>
 8009180:	08022928 	.word	0x08022928

08009184 <trans_anim_start_cb>:
{
 8009184:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
 8009186:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
 8009188:	88a5      	ldrh	r5, [r4, #4]
 800918a:	6820      	ldr	r0, [r4, #0]
 800918c:	f005 030f 	and.w	r3, r5, #15
 8009190:	79a1      	ldrb	r1, [r4, #6]
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 8009192:	462a      	mov	r2, r5
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8009194:	2b08      	cmp	r3, #8
 8009196:	d80c      	bhi.n	80091b2 <trans_anim_start_cb+0x2e>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 8009198:	f7ff fc88 	bl	8008aac <_lv_obj_get_style_int>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 800919c:	8120      	strh	r0, [r4, #8]
    tr->prop = 0;
 800919e:	2300      	movs	r3, #0
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 80091a0:	462a      	mov	r2, r5
 80091a2:	79a1      	ldrb	r1, [r4, #6]
    tr->prop = 0;
 80091a4:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 80091a6:	4623      	mov	r3, r4
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	f7fe fdd3 	bl	8007d54 <trans_del>
    tr->prop = prop_tmp;
 80091ae:	80a5      	strh	r5, [r4, #4]
}
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 80091b2:	2b0b      	cmp	r3, #11
 80091b4:	d802      	bhi.n	80091bc <trans_anim_start_cb+0x38>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 80091b6:	f7ff fc43 	bl	8008a40 <_lv_obj_get_style_color>
 80091ba:	e7ef      	b.n	800919c <trans_anim_start_cb+0x18>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 80091bc:	2b0d      	cmp	r3, #13
 80091be:	d803      	bhi.n	80091c8 <trans_anim_start_cb+0x44>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 80091c0:	f7ff ff16 	bl	8008ff0 <_lv_obj_get_style_opa>
 80091c4:	7220      	strb	r0, [r4, #8]
 80091c6:	e7ea      	b.n	800919e <trans_anim_start_cb+0x1a>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 80091c8:	f7ff ff78 	bl	80090bc <_lv_obj_get_style_ptr>
 80091cc:	60a0      	str	r0, [r4, #8]
 80091ce:	e7e6      	b.n	800919e <trans_anim_start_cb+0x1a>

080091d0 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 80091d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	4605      	mov	r5, r0
 80091d6:	2700      	movs	r7, #0
 80091d8:	b2fe      	uxtb	r6, r7
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80091da:	4628      	mov	r0, r5
 80091dc:	4631      	mov	r1, r6
 80091de:	f7fe fda7 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 80091e2:	4604      	mov	r4, r0
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d054      	beq.n	8009292 <update_style_cache_children+0xc2>

        bool ignore_cache_ori = list->ignore_cache;
 80091e8:	7943      	ldrb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 80091ea:	f248 020c 	movw	r2, #32780	; 0x800c
 80091ee:	4631      	mov	r1, r6
 80091f0:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
 80091f4:	f043 0308 	orr.w	r3, r3, #8
 80091f8:	7143      	strb	r3, [r0, #5]
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7ff fef8 	bl	8008ff0 <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009200:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8009204:	f248 0282 	movw	r2, #32898	; 0x8082
 8009208:	4631      	mov	r1, r6
 800920a:	4258      	negs	r0, r3
 800920c:	4158      	adcs	r0, r3
 800920e:	7963      	ldrb	r3, [r4, #5]
 8009210:	f360 1345 	bfi	r3, r0, #5, #1
 8009214:	4628      	mov	r0, r5
 8009216:	7163      	strb	r3, [r4, #5]
 8009218:	f7ff fc48 	bl	8008aac <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 800921c:	79e3      	ldrb	r3, [r4, #7]
 800921e:	b2c0      	uxtb	r0, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8009220:	f248 028e 	movw	r2, #32910	; 0x808e
 8009224:	4631      	mov	r1, r6
 8009226:	fab0 f080 	clz	r0, r0
 800922a:	0940      	lsrs	r0, r0, #5
 800922c:	f360 1386 	bfi	r3, r0, #6, #1
 8009230:	4628      	mov	r0, r5
 8009232:	71e3      	strb	r3, [r4, #7]
 8009234:	f7ff ff42 	bl	80090bc <_lv_obj_get_style_ptr>
 8009238:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 800923a:	f00c f84d 	bl	80152d8 <lv_theme_get_font_normal>
 800923e:	79e3      	ldrb	r3, [r4, #7]
 8009240:	eba9 0200 	sub.w	r2, r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8009244:	4631      	mov	r1, r6
 8009246:	4250      	negs	r0, r2
 8009248:	4150      	adcs	r0, r2
 800924a:	f248 02ad 	movw	r2, #32941	; 0x80ad
 800924e:	f360 13c7 	bfi	r3, r0, #7, #1
 8009252:	4628      	mov	r0, r5
 8009254:	71e3      	strb	r3, [r4, #7]
 8009256:	f7ff fecb 	bl	8008ff0 <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 800925a:	fab0 f080 	clz	r0, r0
 800925e:	79e3      	ldrb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8009260:	f248 0280 	movw	r2, #32896	; 0x8080
 8009264:	0940      	lsrs	r0, r0, #5
 8009266:	4631      	mov	r1, r6
 8009268:	f360 1304 	bfi	r3, r0, #4, #1
 800926c:	4628      	mov	r0, r5

        list->text_space_zero = 1;
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f043 0320 	orr.w	r3, r3, #32
 8009274:	71e3      	strb	r3, [r4, #7]
 8009276:	f7ff fc19 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 800927a:	b190      	cbz	r0, 80092a2 <update_style_cache_children+0xd2>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
 800927c:	79e3      	ldrb	r3, [r4, #7]
 800927e:	f36f 1345 	bfc	r3, #5, #1
 8009282:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8009284:	7963      	ldrb	r3, [r4, #5]
 8009286:	3701      	adds	r7, #1
 8009288:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 800928c:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
 800928e:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009290:	d1a2      	bne.n	80091d8 <update_style_cache_children+0x8>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009292:	2100      	movs	r1, #0
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 8009294:	4628      	mov	r0, r5
 8009296:	f7fe fcbf 	bl	8007c18 <lv_obj_get_child>
 800929a:	4604      	mov	r4, r0
    while(child) {
 800929c:	b950      	cbnz	r0, 80092b4 <update_style_cache_children+0xe4>
    }

}
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 80092a2:	f248 0281 	movw	r2, #32897	; 0x8081
 80092a6:	4631      	mov	r1, r6
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff fbff 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d1e4      	bne.n	800927c <update_style_cache_children+0xac>
 80092b2:	e7e7      	b.n	8009284 <update_style_cache_children+0xb4>
        update_style_cache_children(child);
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7ff ff8b 	bl	80091d0 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 80092ba:	4621      	mov	r1, r4
 80092bc:	e7ea      	b.n	8009294 <update_style_cache_children+0xc4>

080092be <invalidate_style_cache.isra.29.part.30>:
/**
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 80092be:	b538      	push	{r3, r4, r5, lr}
 80092c0:	4605      	mov	r5, r0
 80092c2:	2400      	movs	r4, #0
{
    if(style_prop_is_cacheble(prop) == false) return;

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80092c4:	b2e1      	uxtb	r1, r4
 80092c6:	4628      	mov	r0, r5
 80092c8:	f7fe fd32 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 80092cc:	b130      	cbz	r0, 80092dc <invalidate_style_cache.isra.29.part.30+0x1e>
        list->valid_cache = 0;
 80092ce:	7943      	ldrb	r3, [r0, #5]
 80092d0:	3401      	adds	r4, #1
 80092d2:	f36f 0382 	bfc	r3, #2, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80092d6:	2c40      	cmp	r4, #64	; 0x40
        list->valid_cache = 0;
 80092d8:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80092da:	d1f3      	bne.n	80092c4 <invalidate_style_cache.isra.29.part.30+0x6>
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 80092dc:	2440      	movs	r4, #64	; 0x40
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7fe fd25 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 80092e6:	b138      	cbz	r0, 80092f8 <invalidate_style_cache.isra.29.part.30+0x3a>
 80092e8:	3401      	adds	r4, #1
        list->valid_cache = 0;
 80092ea:	7943      	ldrb	r3, [r0, #5]
 80092ec:	b2e4      	uxtb	r4, r4
 80092ee:	f36f 0382 	bfc	r3, #2, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80092f2:	2cff      	cmp	r4, #255	; 0xff
        list->valid_cache = 0;
 80092f4:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80092f6:	d1f2      	bne.n	80092de <invalidate_style_cache.isra.29.part.30+0x20>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80092f8:	2100      	movs	r1, #0
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7fe fc8c 	bl	8007c18 <lv_obj_get_child>
 8009300:	4604      	mov	r4, r0
    while(child) {
 8009302:	b900      	cbnz	r0, 8009306 <invalidate_style_cache.isra.29.part.30+0x48>
    }
}
 8009304:	bd38      	pop	{r3, r4, r5, pc}
        update_style_cache_children(child);
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff ff62 	bl	80091d0 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 800930c:	4621      	mov	r1, r4
 800930e:	e7f4      	b.n	80092fa <invalidate_style_cache.isra.29.part.30+0x3c>

08009310 <lv_obj_refresh_style>:
{
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009316:	f00a f96f 	bl	80135f8 <lv_debug_check_null>
 800931a:	4603      	mov	r3, r0
 800931c:	b920      	cbnz	r0, 8009328 <lv_obj_refresh_style+0x18>
 800931e:	462a      	mov	r2, r5
 8009320:	4832      	ldr	r0, [pc, #200]	; (80093ec <lv_obj_refresh_style+0xdc>)
 8009322:	f00a f96d 	bl	8013600 <lv_debug_log_error>
 8009326:	e7fe      	b.n	8009326 <lv_obj_refresh_style+0x16>
    if(style_prop_is_cacheble(prop) == false) return;
 8009328:	4620      	mov	r0, r4
 800932a:	f7fe fa31 	bl	8007790 <style_prop_is_cacheble>
 800932e:	b110      	cbz	r0, 8009336 <lv_obj_refresh_style+0x26>
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff ffc4 	bl	80092be <invalidate_style_cache.isra.29.part.30>
    switch(prop) {
 8009336:	2c71      	cmp	r4, #113	; 0x71
 8009338:	d834      	bhi.n	80093a4 <lv_obj_refresh_style+0x94>
 800933a:	2c70      	cmp	r4, #112	; 0x70
 800933c:	d20b      	bcs.n	8009356 <lv_obj_refresh_style+0x46>
 800933e:	2c41      	cmp	r4, #65	; 0x41
 8009340:	d823      	bhi.n	800938a <lv_obj_refresh_style+0x7a>
 8009342:	2c40      	cmp	r4, #64	; 0x40
 8009344:	d207      	bcs.n	8009356 <lv_obj_refresh_style+0x46>
 8009346:	2c02      	cmp	r4, #2
 8009348:	d325      	bcc.n	8009396 <lv_obj_refresh_style+0x86>
 800934a:	2c07      	cmp	r4, #7
 800934c:	d903      	bls.n	8009356 <lv_obj_refresh_style+0x46>
 800934e:	f1a4 0310 	sub.w	r3, r4, #16
 8009352:	2b08      	cmp	r3, #8
 8009354:	d81f      	bhi.n	8009396 <lv_obj_refresh_style+0x86>
        lv_obj_invalidate(obj);
 8009356:	4628      	mov	r0, r5
 8009358:	f7fe fe28 	bl	8007fac <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 800935c:	69eb      	ldr	r3, [r5, #28]
 800935e:	2200      	movs	r2, #0
 8009360:	2104      	movs	r1, #4
 8009362:	4628      	mov	r0, r5
 8009364:	4798      	blx	r3
        switch(prop) {
 8009366:	2c15      	cmp	r4, #21
 8009368:	d303      	bcc.n	8009372 <lv_obj_refresh_style+0x62>
 800936a:	2c18      	cmp	r4, #24
 800936c:	d934      	bls.n	80093d8 <lv_obj_refresh_style+0xc8>
 800936e:	2cff      	cmp	r4, #255	; 0xff
 8009370:	d032      	beq.n	80093d8 <lv_obj_refresh_style+0xc8>
        lv_obj_invalidate(obj);
 8009372:	4628      	mov	r0, r5
 8009374:	f7fe fe1a 	bl	8007fac <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8009378:	2cff      	cmp	r4, #255	; 0xff
 800937a:	d001      	beq.n	8009380 <lv_obj_refresh_style+0x70>
 800937c:	0423      	lsls	r3, r4, #16
 800937e:	d533      	bpl.n	80093e8 <lv_obj_refresh_style+0xd8>
 8009380:	4628      	mov	r0, r5
}
 8009382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8009386:	f7ff b861 	b.w	800844c <refresh_children_style>
    switch(prop) {
 800938a:	2c53      	cmp	r4, #83	; 0x53
 800938c:	d808      	bhi.n	80093a0 <lv_obj_refresh_style+0x90>
 800938e:	2c50      	cmp	r4, #80	; 0x50
 8009390:	d2e1      	bcs.n	8009356 <lv_obj_refresh_style+0x46>
 8009392:	2c4c      	cmp	r4, #76	; 0x4c
 8009394:	d0df      	beq.n	8009356 <lv_obj_refresh_style+0x46>
        lv_obj_invalidate(obj);
 8009396:	4628      	mov	r0, r5
}
 8009398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 800939c:	f7fe be06 	b.w	8007fac <lv_obj_invalidate>
    switch(prop) {
 80093a0:	2c5c      	cmp	r4, #92	; 0x5c
 80093a2:	e7f7      	b.n	8009394 <lv_obj_refresh_style+0x84>
 80093a4:	2c7f      	cmp	r4, #127	; 0x7f
 80093a6:	d807      	bhi.n	80093b8 <lv_obj_refresh_style+0xa8>
 80093a8:	2c7e      	cmp	r4, #126	; 0x7e
 80093aa:	d2d4      	bcs.n	8009356 <lv_obj_refresh_style+0x46>
 80093ac:	2c73      	cmp	r4, #115	; 0x73
 80093ae:	d3f2      	bcc.n	8009396 <lv_obj_refresh_style+0x86>
 80093b0:	2c75      	cmp	r4, #117	; 0x75
 80093b2:	d9d0      	bls.n	8009356 <lv_obj_refresh_style+0x46>
 80093b4:	2c7c      	cmp	r4, #124	; 0x7c
 80093b6:	e7ed      	b.n	8009394 <lv_obj_refresh_style+0x84>
 80093b8:	f248 0381 	movw	r3, #32897	; 0x8081
 80093bc:	429c      	cmp	r4, r3
 80093be:	d807      	bhi.n	80093d0 <lv_obj_refresh_style+0xc0>
 80093c0:	f248 0380 	movw	r3, #32896	; 0x8080
 80093c4:	429c      	cmp	r4, r3
 80093c6:	d2c6      	bcs.n	8009356 <lv_obj_refresh_style+0x46>
 80093c8:	2c90      	cmp	r4, #144	; 0x90
 80093ca:	d0c4      	beq.n	8009356 <lv_obj_refresh_style+0x46>
 80093cc:	2cff      	cmp	r4, #255	; 0xff
 80093ce:	e7e1      	b.n	8009394 <lv_obj_refresh_style+0x84>
 80093d0:	f248 038e 	movw	r3, #32910	; 0x808e
 80093d4:	429c      	cmp	r4, r3
 80093d6:	e7dd      	b.n	8009394 <lv_obj_refresh_style+0x84>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 80093d8:	6828      	ldr	r0, [r5, #0]
 80093da:	2800      	cmp	r0, #0
 80093dc:	d0c9      	beq.n	8009372 <lv_obj_refresh_style+0x62>
 80093de:	69c3      	ldr	r3, [r0, #28]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2101      	movs	r1, #1
 80093e4:	4798      	blx	r3
 80093e6:	e7c4      	b.n	8009372 <lv_obj_refresh_style+0x62>
}
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	bf00      	nop
 80093ec:	0802c354 	.word	0x0802c354

080093f0 <lv_obj_reset_style_list>:
{
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
 80093f6:	f7fe fce5 	bl	8007dc4 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 80093fa:	22ff      	movs	r2, #255	; 0xff
 80093fc:	4629      	mov	r1, r5
 80093fe:	4620      	mov	r0, r4
}
 8009400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8009404:	f7ff bf84 	b.w	8009310 <lv_obj_refresh_style>

08009408 <report_style_mod_core>:
{
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	4606      	mov	r6, r0
 800940c:	460d      	mov	r5, r1
 800940e:	2400      	movs	r4, #0
 8009410:	b2e7      	uxtb	r7, r4
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009412:	4628      	mov	r0, r5
 8009414:	4639      	mov	r1, r7
 8009416:	f7fe fc8b 	bl	8007d30 <lv_obj_get_style_list>
        if(list == NULL) break;
 800941a:	b328      	cbz	r0, 8009468 <report_style_mod_core+0x60>
        for(ci = 0; ci < list->style_cnt; ci++) {
 800941c:	7902      	ldrb	r2, [r0, #4]
 800941e:	f04f 0c00 	mov.w	ip, #0
 8009422:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009426:	4672      	mov	r2, lr
 8009428:	fa5f f38c 	uxtb.w	r3, ip
 800942c:	459e      	cmp	lr, r3
 800942e:	d918      	bls.n	8009462 <report_style_mod_core+0x5a>
    if(list->has_trans && list->skip_trans) id++;
 8009430:	8881      	ldrh	r1, [r0, #4]
 8009432:	f401 71c0 	and.w	r1, r1, #384	; 0x180
 8009436:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
 800943a:	bf04      	itt	eq
 800943c:	3301      	addeq	r3, #1
 800943e:	b2db      	uxtbeq	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009440:	b1ca      	cbz	r2, 8009476 <report_style_mod_core+0x6e>
 8009442:	459e      	cmp	lr, r3
 8009444:	d917      	bls.n	8009476 <report_style_mod_core+0x6e>
    return list->style_list[id];
 8009446:	6801      	ldr	r1, [r0, #0]
 8009448:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            if(_class == style || style == NULL) {
 800944c:	429e      	cmp	r6, r3
 800944e:	d003      	beq.n	8009458 <report_style_mod_core+0x50>
 8009450:	f10c 0c01 	add.w	ip, ip, #1
 8009454:	2e00      	cmp	r6, #0
 8009456:	d1e7      	bne.n	8009428 <report_style_mod_core+0x20>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8009458:	22ff      	movs	r2, #255	; 0xff
 800945a:	4639      	mov	r1, r7
 800945c:	4628      	mov	r0, r5
 800945e:	f7ff ff57 	bl	8009310 <lv_obj_refresh_style>
 8009462:	3401      	adds	r4, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009464:	2c40      	cmp	r4, #64	; 0x40
 8009466:	d1d3      	bne.n	8009410 <report_style_mod_core+0x8>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009468:	2100      	movs	r1, #0
        child = lv_obj_get_child(obj, child);
 800946a:	4628      	mov	r0, r5
 800946c:	f7fe fbd4 	bl	8007c18 <lv_obj_get_child>
 8009470:	4604      	mov	r4, r0
    while(child) {
 8009472:	b910      	cbnz	r0, 800947a <report_style_mod_core+0x72>
}
 8009474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e7e8      	b.n	800944c <report_style_mod_core+0x44>
        report_style_mod_core(style, child);
 800947a:	4621      	mov	r1, r4
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff ffc3 	bl	8009408 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 8009482:	4621      	mov	r1, r4
 8009484:	e7f1      	b.n	800946a <report_style_mod_core+0x62>

08009486 <lv_obj_report_style_mod>:
{
 8009486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009488:	4607      	mov	r7, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 800948a:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 800948c:	f009 fb1c 	bl	8012ac8 <lv_disp_get_next>
 8009490:	4604      	mov	r4, r0
    while(d) {
 8009492:	b900      	cbnz	r0, 8009496 <lv_obj_report_style_mod+0x10>
}
 8009494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, i) {
 8009496:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800949a:	4630      	mov	r0, r6
 800949c:	f00a f9da 	bl	8013854 <_lv_ll_get_head>
 80094a0:	4605      	mov	r5, r0
 80094a2:	b908      	cbnz	r0, 80094a8 <lv_obj_report_style_mod+0x22>
        d = lv_disp_get_next(d);
 80094a4:	4620      	mov	r0, r4
 80094a6:	e7f1      	b.n	800948c <lv_obj_report_style_mod+0x6>
            report_style_mod_core(style, i);
 80094a8:	4629      	mov	r1, r5
 80094aa:	4638      	mov	r0, r7
 80094ac:	f7ff ffac 	bl	8009408 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 80094b0:	4629      	mov	r1, r5
 80094b2:	4630      	mov	r0, r6
 80094b4:	f00a f9d4 	bl	8013860 <_lv_ll_get_next>
 80094b8:	e7f2      	b.n	80094a0 <lv_obj_report_style_mod+0x1a>

080094ba <trans_anim_cb>:
{
 80094ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094bc:	4604      	mov	r4, r0
 80094be:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 80094c0:	7981      	ldrb	r1, [r0, #6]
 80094c2:	6800      	ldr	r0, [r0, #0]
 80094c4:	f7fe fc34 	bl	8007d30 <lv_obj_get_style_list>
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 80094c8:	f002 fa29 	bl	800b91e <_lv_style_list_get_transition_style>
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 80094cc:	88a1      	ldrh	r1, [r4, #4]
 80094ce:	f001 030f 	and.w	r3, r1, #15
 80094d2:	2b08      	cmp	r3, #8
 80094d4:	d817      	bhi.n	8009506 <trans_anim_cb+0x4c>
        if(v == 0) x = tr->start_value._int;
 80094d6:	b955      	cbnz	r5, 80094ee <trans_anim_cb+0x34>
 80094d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
 80094dc:	f002 f87c 	bl	800b5d8 <_lv_style_set_int>
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 80094e0:	88a2      	ldrh	r2, [r4, #4]
 80094e2:	79a1      	ldrb	r1, [r4, #6]
 80094e4:	6820      	ldr	r0, [r4, #0]
}
 80094e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 80094ea:	f7ff bf11 	b.w	8009310 <lv_obj_refresh_style>
        else if(v == 255) x = tr->end_value._int;
 80094ee:	2dff      	cmp	r5, #255	; 0xff
 80094f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f4:	d0f2      	beq.n	80094dc <trans_anim_cb+0x22>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 80094f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80094fa:	1ad2      	subs	r2, r2, r3
 80094fc:	4355      	muls	r5, r2
 80094fe:	eb03 2525 	add.w	r5, r3, r5, asr #8
 8009502:	b22a      	sxth	r2, r5
 8009504:	e7ea      	b.n	80094dc <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8009506:	2b0b      	cmp	r3, #11
 8009508:	d83f      	bhi.n	800958a <trans_anim_cb+0xd0>
        if(v <= 0) x = tr->start_value._color;
 800950a:	2d00      	cmp	r5, #0
 800950c:	dc03      	bgt.n	8009516 <trans_anim_cb+0x5c>
 800950e:	8922      	ldrh	r2, [r4, #8]
        _lv_style_set_color(style, tr->prop, x);
 8009510:	f002 f8b0 	bl	800b674 <_lv_style_set_color>
 8009514:	e7e4      	b.n	80094e0 <trans_anim_cb+0x26>
        else if(v >= 255) x = tr->end_value._color;
 8009516:	2dfe      	cmp	r5, #254	; 0xfe
 8009518:	dd01      	ble.n	800951e <trans_anim_cb+0x64>
 800951a:	89a2      	ldrh	r2, [r4, #12]
 800951c:	e7f8      	b.n	8009510 <trans_anim_cb+0x56>
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800951e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009522:	f1c5 07ff 	rsb	r7, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009526:	89a6      	ldrh	r6, [r4, #12]
 8009528:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800952c:	7a62      	ldrb	r2, [r4, #9]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800952e:	f3c6 1645 	ubfx	r6, r6, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009532:	f894 e008 	ldrb.w	lr, [r4, #8]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009536:	fb07 fc0c 	mul.w	ip, r7, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800953a:	7b63      	ldrb	r3, [r4, #13]
 800953c:	08d2      	lsrs	r2, r2, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800953e:	f00e 0e1f 	and.w	lr, lr, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009542:	fb15 c606 	smlabb	r6, r5, r6, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009546:	f894 c00c 	ldrb.w	ip, [r4, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800954a:	437a      	muls	r2, r7
 800954c:	08db      	lsrs	r3, r3, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800954e:	f00c 0c1f 	and.w	ip, ip, #31
 8009552:	fb07 f70e 	mul.w	r7, r7, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009556:	fb15 2303 	smlabb	r3, r5, r3, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800955a:	3680      	adds	r6, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800955c:	fb15 750c 	smlabb	r5, r5, ip, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009560:	f248 0281 	movw	r2, #32897	; 0x8081
 8009564:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009566:	3580      	adds	r5, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009568:	4356      	muls	r6, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800956a:	4353      	muls	r3, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800956c:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800956e:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009572:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009576:	0dd5      	lsrs	r5, r2, #23
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f365 0204 	bfi	r2, r5, #0, #5
 8009580:	f366 124a 	bfi	r2, r6, #5, #6
 8009584:	f363 22cf 	bfi	r2, r3, #11, #5
 8009588:	e7c2      	b.n	8009510 <trans_anim_cb+0x56>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 800958a:	2b0d      	cmp	r3, #13
 800958c:	d80f      	bhi.n	80095ae <trans_anim_cb+0xf4>
        if(v <= 0) x = tr->start_value._opa;
 800958e:	2d00      	cmp	r5, #0
 8009590:	dc03      	bgt.n	800959a <trans_anim_cb+0xe0>
 8009592:	7a22      	ldrb	r2, [r4, #8]
        _lv_style_set_opa(style, tr->prop, x);
 8009594:	f002 f8bc 	bl	800b710 <_lv_style_set_opa>
 8009598:	e7a2      	b.n	80094e0 <trans_anim_cb+0x26>
        else if(v >= 255) x = tr->end_value._opa;
 800959a:	2dfe      	cmp	r5, #254	; 0xfe
 800959c:	7b22      	ldrb	r2, [r4, #12]
 800959e:	dcf9      	bgt.n	8009594 <trans_anim_cb+0xda>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 80095a0:	7a23      	ldrb	r3, [r4, #8]
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	4355      	muls	r5, r2
 80095a6:	eb03 2525 	add.w	r5, r3, r5, asr #8
 80095aa:	b2ea      	uxtb	r2, r5
 80095ac:	e7f2      	b.n	8009594 <trans_anim_cb+0xda>
        if(v < 128) x = tr->start_value._ptr;
 80095ae:	2d7f      	cmp	r5, #127	; 0x7f
 80095b0:	bfd4      	ite	le
 80095b2:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
 80095b4:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
 80095b6:	f002 f8fb 	bl	800b7b0 <_lv_style_set_ptr>
 80095ba:	e791      	b.n	80094e0 <trans_anim_cb+0x26>

080095bc <lv_obj_get_signal_cb>:
{
 80095bc:	b510      	push	{r4, lr}
 80095be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80095c0:	f00a f81a 	bl	80135f8 <lv_debug_check_null>
 80095c4:	4603      	mov	r3, r0
 80095c6:	b920      	cbnz	r0, 80095d2 <lv_obj_get_signal_cb+0x16>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4803      	ldr	r0, [pc, #12]	; (80095d8 <lv_obj_get_signal_cb+0x1c>)
 80095cc:	f00a f818 	bl	8013600 <lv_debug_log_error>
 80095d0:	e7fe      	b.n	80095d0 <lv_obj_get_signal_cb+0x14>
}
 80095d2:	69e0      	ldr	r0, [r4, #28]
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	bf00      	nop
 80095d8:	0802c354 	.word	0x0802c354

080095dc <lv_obj_get_design_cb>:
{
 80095dc:	b510      	push	{r4, lr}
 80095de:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80095e0:	f00a f80a 	bl	80135f8 <lv_debug_check_null>
 80095e4:	4603      	mov	r3, r0
 80095e6:	b920      	cbnz	r0, 80095f2 <lv_obj_get_design_cb+0x16>
 80095e8:	4622      	mov	r2, r4
 80095ea:	4803      	ldr	r0, [pc, #12]	; (80095f8 <lv_obj_get_design_cb+0x1c>)
 80095ec:	f00a f808 	bl	8013600 <lv_debug_log_error>
 80095f0:	e7fe      	b.n	80095f0 <lv_obj_get_design_cb+0x14>
}
 80095f2:	6a20      	ldr	r0, [r4, #32]
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	bf00      	nop
 80095f8:	0802c354 	.word	0x0802c354

080095fc <lv_obj_get_ext_attr>:
{
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009600:	f009 fffa 	bl	80135f8 <lv_debug_check_null>
 8009604:	4603      	mov	r3, r0
 8009606:	b920      	cbnz	r0, 8009612 <lv_obj_get_ext_attr+0x16>
 8009608:	4622      	mov	r2, r4
 800960a:	4803      	ldr	r0, [pc, #12]	; (8009618 <lv_obj_get_ext_attr+0x1c>)
 800960c:	f009 fff8 	bl	8013600 <lv_debug_log_error>
 8009610:	e7fe      	b.n	8009610 <lv_obj_get_ext_attr+0x14>
}
 8009612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009614:	bd10      	pop	{r4, pc}
 8009616:	bf00      	nop
 8009618:	0802c354 	.word	0x0802c354

0800961c <lv_obj_get_group>:
{
 800961c:	b510      	push	{r4, lr}
 800961e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009620:	f009 ffea 	bl	80135f8 <lv_debug_check_null>
 8009624:	b910      	cbnz	r0, 800962c <lv_obj_get_group+0x10>
 8009626:	4620      	mov	r0, r4
 8009628:	f7fe f924 	bl	8007874 <lv_obj_add_state.part.37>
}
 800962c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800962e:	bd10      	pop	{r4, pc}

08009630 <obj_del_core>:
{
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8009634:	2200      	movs	r2, #0
 8009636:	2115      	movs	r1, #21
 8009638:	f7fe fa3c 	bl	8007ab4 <lv_event_send>
    lv_group_t * group = lv_obj_get_group(obj);
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff ffed 	bl	800961c <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8009642:	4607      	mov	r7, r0
 8009644:	b110      	cbz	r0, 800964c <obj_del_core+0x1c>
 8009646:	4620      	mov	r0, r4
 8009648:	f7fc fe24 	bl	8006294 <lv_group_remove_obj>
    i = _lv_ll_get_head(&(obj->child_ll));
 800964c:	1d26      	adds	r6, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
 800964e:	4630      	mov	r0, r6
 8009650:	f00a f900 	bl	8013854 <_lv_ll_get_head>
 8009654:	4605      	mov	r5, r0
    while(i != NULL) {
 8009656:	bb58      	cbnz	r0, 80096b0 <obj_del_core+0x80>
    lv_anim_del(obj, NULL);
 8009658:	4601      	mov	r1, r0
 800965a:	4620      	mov	r0, r4
 800965c:	f009 fc86 	bl	8012f6c <lv_anim_del>
    trans_del(obj, 0xFF, 0xFF, NULL);
 8009660:	22ff      	movs	r2, #255	; 0xff
 8009662:	462b      	mov	r3, r5
 8009664:	4620      	mov	r0, r4
 8009666:	4611      	mov	r1, r2
 8009668:	f7fe fb74 	bl	8007d54 <trans_del>
    lv_event_temp_data_t * t = event_temp_data_head;
 800966c:	4b24      	ldr	r3, [pc, #144]	; (8009700 <obj_del_core+0xd0>)
 800966e:	685e      	ldr	r6, [r3, #4]
        if(t->obj == obj) t->deleted = true;
 8009670:	2301      	movs	r3, #1
    while(t) {
 8009672:	bb0e      	cbnz	r6, 80096b8 <obj_del_core+0x88>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8009674:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 8009676:	f009 fb29 	bl	8012ccc <lv_indev_get_next>
 800967a:	4605      	mov	r5, r0
    while(indev) {
 800967c:	bb10      	cbnz	r0, 80096c4 <obj_del_core+0x94>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800967e:	4602      	mov	r2, r0
 8009680:	4601      	mov	r1, r0
 8009682:	69e3      	ldr	r3, [r4, #28]
 8009684:	4620      	mov	r0, r4
 8009686:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
 8009688:	4620      	mov	r0, r4
 800968a:	f7fe fa7f 	bl	8007b8c <lv_obj_get_parent>
    if(par == NULL) { /*It is a screen*/
 800968e:	bba0      	cbnz	r0, 80096fa <obj_del_core+0xca>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8009690:	4620      	mov	r0, r4
 8009692:	f7fe fa95 	bl	8007bc0 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
 8009696:	4621      	mov	r1, r4
 8009698:	3030      	adds	r0, #48	; 0x30
        _lv_ll_remove(&(par->child_ll), obj);
 800969a:	f00a f918 	bl	80138ce <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 800969e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096a0:	b108      	cbz	r0, 80096a6 <obj_del_core+0x76>
 80096a2:	f00a fa9f 	bl	8013be4 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 80096a6:	4620      	mov	r0, r4
}
 80096a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 80096ac:	f00a ba9a 	b.w	8013be4 <lv_mem_free>
        obj_del_core(i);
 80096b0:	4628      	mov	r0, r5
 80096b2:	f7ff ffbd 	bl	8009630 <obj_del_core>
 80096b6:	e7ca      	b.n	800964e <obj_del_core+0x1e>
        if(t->obj == obj) t->deleted = true;
 80096b8:	6832      	ldr	r2, [r6, #0]
 80096ba:	4294      	cmp	r4, r2
 80096bc:	bf08      	it	eq
 80096be:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
 80096c0:	68b6      	ldr	r6, [r6, #8]
 80096c2:	e7d6      	b.n	8009672 <obj_del_core+0x42>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80096c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	d002      	beq.n	80096d0 <obj_del_core+0xa0>
 80096ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	d103      	bne.n	80096d8 <obj_del_core+0xa8>
            lv_indev_reset(indev, obj);
 80096d0:	4621      	mov	r1, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7fd f87a 	bl	80067cc <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 80096d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80096da:	42a3      	cmp	r3, r4
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 80096dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 80096de:	bf08      	it	eq
 80096e0:	63ee      	streq	r6, [r5, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 80096e2:	42bb      	cmp	r3, r7
 80096e4:	d107      	bne.n	80096f6 <obj_del_core+0xc6>
 80096e6:	f7fd f8c9 	bl	800687c <lv_indev_get_obj_act>
 80096ea:	4284      	cmp	r4, r0
 80096ec:	d103      	bne.n	80096f6 <obj_del_core+0xc6>
            lv_indev_reset(indev, obj);
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f7fd f86b 	bl	80067cc <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 80096f6:	4628      	mov	r0, r5
 80096f8:	e7bd      	b.n	8009676 <obj_del_core+0x46>
        _lv_ll_remove(&(par->child_ll), obj);
 80096fa:	4621      	mov	r1, r4
 80096fc:	3004      	adds	r0, #4
 80096fe:	e7cc      	b.n	800969a <obj_del_core+0x6a>
 8009700:	200206e4 	.word	0x200206e4

08009704 <lv_obj_del>:
{
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009708:	f009 ff76 	bl	80135f8 <lv_debug_check_null>
 800970c:	4603      	mov	r3, r0
 800970e:	b920      	cbnz	r0, 800971a <lv_obj_del+0x16>
 8009710:	4622      	mov	r2, r4
 8009712:	4813      	ldr	r0, [pc, #76]	; (8009760 <lv_obj_del+0x5c>)
 8009714:	f009 ff74 	bl	8013600 <lv_debug_log_error>
 8009718:	e7fe      	b.n	8009718 <lv_obj_del+0x14>
    lv_obj_invalidate(obj);
 800971a:	4620      	mov	r0, r4
 800971c:	f7fe fc46 	bl	8007fac <lv_obj_invalidate>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8009720:	4620      	mov	r0, r4
 8009722:	f7fe fa33 	bl	8007b8c <lv_obj_get_parent>
    if(par == NULL) {
 8009726:	4607      	mov	r7, r0
 8009728:	b9b0      	cbnz	r0, 8009758 <lv_obj_del+0x54>
        disp = lv_obj_get_disp(obj);
 800972a:	4620      	mov	r0, r4
 800972c:	f7fe fa48 	bl	8007bc0 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
 8009730:	4606      	mov	r6, r0
 8009732:	b178      	cbz	r0, 8009754 <lv_obj_del+0x50>
        if(disp->act_scr == obj) act_scr_del = true;
 8009734:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009736:	1b2b      	subs	r3, r5, r4
 8009738:	425d      	negs	r5, r3
 800973a:	415d      	adcs	r5, r3
    obj_del_core(obj);
 800973c:	4620      	mov	r0, r4
 800973e:	f7ff ff77 	bl	8009630 <obj_del_core>
    if(par) {
 8009742:	b127      	cbz	r7, 800974e <lv_obj_del+0x4a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2200      	movs	r2, #0
 8009748:	2101      	movs	r1, #1
 800974a:	4638      	mov	r0, r7
 800974c:	4798      	blx	r3
    if(act_scr_del)  {
 800974e:	b10d      	cbz	r5, 8009754 <lv_obj_del+0x50>
        disp->act_scr = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	63f3      	str	r3, [r6, #60]	; 0x3c
}
 8009754:	2000      	movs	r0, #0
 8009756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
 8009758:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
 800975a:	462e      	mov	r6, r5
 800975c:	e7ee      	b.n	800973c <lv_obj_del+0x38>
 800975e:	bf00      	nop
 8009760:	0802c354 	.word	0x0802c354

08009764 <lv_obj_clean>:
{
 8009764:	b510      	push	{r4, lr}
 8009766:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009768:	f009 ff46 	bl	80135f8 <lv_debug_check_null>
 800976c:	4603      	mov	r3, r0
 800976e:	b930      	cbnz	r0, 800977e <lv_obj_clean+0x1a>
 8009770:	4622      	mov	r2, r4
 8009772:	4806      	ldr	r0, [pc, #24]	; (800978c <lv_obj_clean+0x28>)
 8009774:	f009 ff44 	bl	8013600 <lv_debug_log_error>
 8009778:	e7fe      	b.n	8009778 <lv_obj_clean+0x14>
        lv_obj_del(child);
 800977a:	f7ff ffc3 	bl	8009704 <lv_obj_del>
        child = lv_obj_get_child(obj, NULL);    /*Get the new first child*/
 800977e:	2100      	movs	r1, #0
 8009780:	4620      	mov	r0, r4
 8009782:	f7fe fa49 	bl	8007c18 <lv_obj_get_child>
    while(child) {
 8009786:	2800      	cmp	r0, #0
 8009788:	d1f7      	bne.n	800977a <lv_obj_clean+0x16>
}
 800978a:	bd10      	pop	{r4, pc}
 800978c:	0802c354 	.word	0x0802c354

08009790 <lv_obj_is_focused>:
{
 8009790:	b510      	push	{r4, lr}
 8009792:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8009794:	f009 ff30 	bl	80135f8 <lv_debug_check_null>
 8009798:	b910      	cbnz	r0, 80097a0 <lv_obj_is_focused+0x10>
 800979a:	4620      	mov	r0, r4
 800979c:	f7fe f86a 	bl	8007874 <lv_obj_add_state.part.37>
    if(obj->group_p) {
 80097a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80097a2:	b120      	cbz	r0, 80097ae <lv_obj_is_focused+0x1e>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80097a4:	f7fc fdb5 	bl	8006312 <lv_group_get_focused>
 80097a8:	1a23      	subs	r3, r4, r0
 80097aa:	4258      	negs	r0, r3
 80097ac:	4158      	adcs	r0, r3
}
 80097ae:	bd10      	pop	{r4, pc}

080097b0 <lv_obj_is_point_on_coords>:
{
 80097b0:	b507      	push	{r0, r1, r2, lr}
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 80097b2:	8a02      	ldrh	r2, [r0, #16]
 80097b4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80097b8:	1ad2      	subs	r2, r2, r3
 80097ba:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 80097be:	8a82      	ldrh	r2, [r0, #20]
 80097c0:	4413      	add	r3, r2
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 80097c2:	8a42      	ldrh	r2, [r0, #18]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 80097c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 80097c8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80097cc:	1ad2      	subs	r2, r2, r3
 80097ce:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80097d2:	8ac2      	ldrh	r2, [r0, #22]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80097d4:	4668      	mov	r0, sp
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80097d6:	4413      	add	r3, r2
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80097d8:	2200      	movs	r2, #0
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80097da:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80097de:	f009 fcd4 	bl	801318a <_lv_area_is_point_on>
}
 80097e2:	b003      	add	sp, #12
 80097e4:	f85d fb04 	ldr.w	pc, [sp], #4

080097e8 <lv_obj_hittest>:
{
 80097e8:	b513      	push	{r0, r1, r4, lr}
    if(obj->adv_hittest) {
 80097ea:	f990 4034 	ldrsb.w	r4, [r0, #52]	; 0x34
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	da0b      	bge.n	800980a <lv_obj_hittest+0x22>
        hit_info.result = true;
 80097f2:	2201      	movs	r2, #1
        hit_info.point = point;
 80097f4:	9100      	str	r1, [sp, #0]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 80097f6:	69c3      	ldr	r3, [r0, #28]
 80097f8:	210a      	movs	r1, #10
        hit_info.result = true;
 80097fa:	f88d 2004 	strb.w	r2, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 80097fe:	466a      	mov	r2, sp
 8009800:	4798      	blx	r3
        return hit_info.result;
 8009802:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8009806:	b002      	add	sp, #8
 8009808:	bd10      	pop	{r4, pc}
        return lv_obj_is_point_on_coords(obj, point);
 800980a:	f7ff ffd1 	bl	80097b0 <lv_obj_is_point_on_coords>
 800980e:	e7fa      	b.n	8009806 <lv_obj_hittest+0x1e>

08009810 <lv_obj_handle_get_type_signal>:
{
 8009810:	2300      	movs	r3, #0
 8009812:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
 8009814:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8009818:	b2da      	uxtb	r2, r3
 800981a:	b11c      	cbz	r4, 8009824 <lv_obj_handle_get_type_signal+0x14>
 800981c:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800981e:	2b07      	cmp	r3, #7
 8009820:	d1f8      	bne.n	8009814 <lv_obj_handle_get_type_signal+0x4>
 8009822:	461a      	mov	r2, r3
    buf->type[i] = name;
 8009824:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
 8009828:	2001      	movs	r0, #1
 800982a:	bd10      	pop	{r4, pc}

0800982c <lv_obj_init_draw_rect_dsc>:
{
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	4605      	mov	r5, r0
 8009830:	460e      	mov	r6, r1
 8009832:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8009834:	2201      	movs	r2, #1
 8009836:	f7ff f939 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 800983a:	f248 020c 	movw	r2, #32780	; 0x800c
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800983e:	8020      	strh	r0, [r4, #0]
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	f7ff fbd4 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(opa_scale <= LV_OPA_MIN) {
 8009848:	2802      	cmp	r0, #2
 800984a:	4607      	mov	r7, r0
 800984c:	d809      	bhi.n	8009862 <lv_obj_init_draw_rect_dsc+0x36>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 800984e:	2300      	movs	r3, #0
 8009850:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 8009852:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8009854:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 8009858:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
 800985c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8009862:	7b23      	ldrb	r3, [r4, #12]
 8009864:	b36b      	cbz	r3, 80098c2 <lv_obj_init_draw_rect_dsc+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8009866:	222c      	movs	r2, #44	; 0x2c
 8009868:	4631      	mov	r1, r6
 800986a:	4628      	mov	r0, r5
 800986c:	f7ff fbc0 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8009870:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8009872:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8009874:	d925      	bls.n	80098c2 <lv_obj_init_draw_rect_dsc+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8009876:	2229      	movs	r2, #41	; 0x29
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	f7ff f8e0 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int)
 8009880:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 8009882:	8060      	strh	r0, [r4, #2]
 8009884:	4631      	mov	r1, r6
 8009886:	4628      	mov	r0, r5
 8009888:	f7ff f910 	bl	8008aac <_lv_obj_get_style_int>
 800988c:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 800988e:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 8009890:	b188      	cbz	r0, 80098b6 <lv_obj_init_draw_rect_dsc+0x8a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
 8009892:	222a      	movs	r2, #42	; 0x2a
 8009894:	4631      	mov	r1, r6
 8009896:	4628      	mov	r0, r5
 8009898:	f7ff f8d2 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int)
 800989c:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 800989e:	80a0      	strh	r0, [r4, #4]
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff f902 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int)
 80098a8:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 80098aa:	8120      	strh	r0, [r4, #8]
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	f7ff f8fc 	bl	8008aac <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 80098b4:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 80098b6:	2220      	movs	r2, #32
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7ff f8f6 	bl	8008aac <_lv_obj_get_style_int>
 80098c0:	7360      	strb	r0, [r4, #13]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 80098c2:	2230      	movs	r2, #48	; 0x30
 80098c4:	4631      	mov	r1, r6
 80098c6:	4628      	mov	r0, r5
 80098c8:	f7ff f8f0 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80098cc:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
 80098ce:	b1e0      	cbz	r0, 800990a <lv_obj_init_draw_rect_dsc+0xde>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 80098d0:	7d23      	ldrb	r3, [r4, #20]
 80098d2:	b1d3      	cbz	r3, 800990a <lv_obj_init_draw_rect_dsc+0xde>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 80098d4:	223c      	movs	r2, #60	; 0x3c
 80098d6:	4631      	mov	r1, r6
 80098d8:	4628      	mov	r0, r5
 80098da:	f7ff fb89 	bl	8008ff0 <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80098de:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80098e0:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80098e2:	d90c      	bls.n	80098fe <lv_obj_init_draw_rect_dsc+0xd2>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 80098e4:	2231      	movs	r2, #49	; 0x31
 80098e6:	4631      	mov	r1, r6
 80098e8:	4628      	mov	r0, r5
 80098ea:	f7ff f8df 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 80098ee:	2239      	movs	r2, #57	; 0x39
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80098f0:	b2c0      	uxtb	r0, r0
 80098f2:	4631      	mov	r1, r6
 80098f4:	8260      	strh	r0, [r4, #18]
 80098f6:	4628      	mov	r0, r5
 80098f8:	f7ff f8a2 	bl	8008a40 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 80098fc:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
 80098fe:	2232      	movs	r2, #50	; 0x32
 8009900:	4631      	mov	r1, r6
 8009902:	4628      	mov	r0, r5
 8009904:	f7ff f8d2 	bl	8008aac <_lv_obj_get_style_int>
 8009908:	7560      	strb	r0, [r4, #21]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800990a:	2240      	movs	r2, #64	; 0x40
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	f7ff f8cc 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8009914:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
 8009916:	b1d8      	cbz	r0, 8009950 <lv_obj_init_draw_rect_dsc+0x124>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8009918:	7fa3      	ldrb	r3, [r4, #30]
 800991a:	b1cb      	cbz	r3, 8009950 <lv_obj_init_draw_rect_dsc+0x124>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800991c:	224c      	movs	r2, #76	; 0x4c
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	f7ff fb65 	bl	8008ff0 <_lv_obj_get_style_opa>
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8009926:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8009928:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 800992a:	d90b      	bls.n	8009944 <lv_obj_init_draw_rect_dsc+0x118>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 800992c:	2241      	movs	r2, #65	; 0x41
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	f7ff f8bb 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 8009936:	2249      	movs	r2, #73	; 0x49
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8009938:	83a0      	strh	r0, [r4, #28]
 800993a:	4631      	mov	r1, r6
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff f87f 	bl	8008a40 <_lv_obj_get_style_color>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 8009942:	8320      	strh	r0, [r4, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int)
 8009944:	2242      	movs	r2, #66	; 0x42
 8009946:	4631      	mov	r1, r6
 8009948:	4628      	mov	r0, r5
 800994a:	f7ff f8af 	bl	8008aac <_lv_obj_get_style_int>
 800994e:	77e0      	strb	r0, [r4, #31]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr)
 8009950:	226e      	movs	r2, #110	; 0x6e
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	f7ff fbb1 	bl	80090bc <_lv_obj_get_style_ptr>
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 800995a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
 800995c:	b3d0      	cbz	r0, 80099d4 <lv_obj_init_draw_rect_dsc+0x1a8>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 800995e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009962:	b3bb      	cbz	r3, 80099d4 <lv_obj_init_draw_rect_dsc+0x1a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa)
 8009964:	226c      	movs	r2, #108	; 0x6c
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff fb41 	bl	8008ff0 <_lv_obj_get_style_opa>
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 800996e:	2802      	cmp	r0, #2
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 8009970:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8009974:	d92e      	bls.n	80099d4 <lv_obj_init_draw_rect_dsc+0x1a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa)
 8009976:	226d      	movs	r2, #109	; 0x6d
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	f7ff fb38 	bl	8008ff0 <_lv_obj_get_style_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int)
 8009980:	2261      	movs	r2, #97	; 0x61
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 8009982:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	f7ff f88f 	bl	8008aac <_lv_obj_get_style_int>
 800998e:	3000      	adds	r0, #0
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 8009990:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009994:	bf18      	it	ne
 8009996:	2001      	movne	r0, #1
 8009998:	f360 0300 	bfi	r3, r0, #0, #1
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 800999c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 800999e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 80099a2:	f003 fc55 	bl	800d250 <lv_img_src_get_type>
 80099a6:	2802      	cmp	r0, #2
 80099a8:	f040 80bc 	bne.w	8009b24 <lv_obj_init_draw_rect_dsc+0x2f8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color)
 80099ac:	2269      	movs	r2, #105	; 0x69
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	f7ff f845 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 80099b6:	f248 028e 	movw	r2, #32910	; 0x808e
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80099ba:	86a0      	strh	r0, [r4, #52]	; 0x34
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	f7ff fb7c 	bl	80090bc <_lv_obj_get_style_ptr>
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80099c4:	6320      	str	r0, [r4, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int)
 80099c6:	2260      	movs	r2, #96	; 0x60
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7ff f86e 	bl	8008aac <_lv_obj_get_style_int>
 80099d0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 80099d4:	2250      	movs	r2, #80	; 0x50
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	f7ff f867 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 80099de:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
 80099e0:	b358      	cbz	r0, 8009a3a <lv_obj_init_draw_rect_dsc+0x20e>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80099e2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d927      	bls.n	8009a3a <lv_obj_init_draw_rect_dsc+0x20e>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa)
 80099ea:	225c      	movs	r2, #92	; 0x5c
 80099ec:	4631      	mov	r1, r6
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fafe 	bl	8008ff0 <_lv_obj_get_style_opa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80099f4:	2802      	cmp	r0, #2
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 80099f6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80099fa:	d91e      	bls.n	8009a3a <lv_obj_init_draw_rect_dsc+0x20e>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int)
 80099fc:	2251      	movs	r2, #81	; 0x51
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7ff f853 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int)
 8009a06:	2252      	movs	r2, #82	; 0x52
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8009a08:	84a0      	strh	r0, [r4, #36]	; 0x24
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff f84d 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int)
 8009a12:	2253      	movs	r2, #83	; 0x53
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8009a14:	84e0      	strh	r0, [r4, #38]	; 0x26
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f7ff f847 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color)
 8009a1e:	2259      	movs	r2, #89	; 0x59
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8009a20:	8520      	strh	r0, [r4, #40]	; 0x28
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	f7ff f80b 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int)
 8009a2a:	2254      	movs	r2, #84	; 0x54
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
 8009a2c:	8420      	strh	r0, [r4, #32]
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff f83b 	bl	8008aac <_lv_obj_get_style_int>
 8009a36:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 8009a3a:	227f      	movs	r2, #127	; 0x7f
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f7ff fb3c 	bl	80090bc <_lv_obj_get_style_ptr>
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 8009a44:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d043      	beq.n	8009ad2 <lv_obj_init_draw_rect_dsc+0x2a6>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 8009a4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d93f      	bls.n	8009ad2 <lv_obj_init_draw_rect_dsc+0x2a6>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
 8009a52:	227c      	movs	r2, #124	; 0x7c
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7ff faca 	bl	8008ff0 <_lv_obj_get_style_opa>
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 8009a5c:	2802      	cmp	r0, #2
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 8009a5e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 8009a62:	d936      	bls.n	8009ad2 <lv_obj_init_draw_rect_dsc+0x2a6>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 8009a64:	2273      	movs	r2, #115	; 0x73
 8009a66:	4631      	mov	r1, r6
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f7ff f81f 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 8009a6e:	2274      	movs	r2, #116	; 0x74
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 8009a70:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	f7ff f818 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 8009a7c:	2279      	movs	r2, #121	; 0x79
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 8009a7e:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7fe ffdb 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 8009a8a:	227e      	movs	r2, #126	; 0x7e
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 8009a8c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
 8009a90:	4631      	mov	r1, r6
 8009a92:	4628      	mov	r0, r5
 8009a94:	f7ff fb12 	bl	80090bc <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 8009a98:	2270      	movs	r2, #112	; 0x70
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 8009a9a:	6420      	str	r0, [r4, #64]	; 0x40
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f7ff f804 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int)
 8009aa4:	2271      	movs	r2, #113	; 0x71
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8009aa6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7fe fffd 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 8009ab2:	2275      	movs	r2, #117	; 0x75
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 8009ab4:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4628      	mov	r0, r5
 8009abc:	f7fe fff6 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int)
 8009ac0:	2272      	movs	r2, #114	; 0x72
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 8009ac2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int)
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f7fe ffef 	bl	8008aac <_lv_obj_get_style_int>
 8009ace:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if(opa_scale < LV_OPA_MAX) {
 8009ad2:	2ffc      	cmp	r7, #252	; 0xfc
 8009ad4:	f63f aec4 	bhi.w	8009860 <lv_obj_init_draw_rect_dsc+0x34>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 8009ad8:	b2b8      	uxth	r0, r7
 8009ada:	7b23      	ldrb	r3, [r4, #12]
 8009adc:	fb13 f300 	smulbb	r3, r3, r0
 8009ae0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009ae4:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 8009ae6:	7d23      	ldrb	r3, [r4, #20]
 8009ae8:	fb13 f300 	smulbb	r3, r3, r0
 8009aec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009af0:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8009af2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8009af6:	fb13 f300 	smulbb	r3, r3, r0
 8009afa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009afe:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 8009b02:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009b06:	fb13 f300 	smulbb	r3, r3, r0
 8009b0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009b0e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 8009b12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009b16:	fb13 f000 	smulbb	r0, r3, r0
 8009b1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009b1e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8009b22:	e69d      	b.n	8009860 <lv_obj_init_draw_rect_dsc+0x34>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 8009b24:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	f67f af4c 	bls.w	80099c6 <lv_obj_init_draw_rect_dsc+0x19a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color)
 8009b2e:	2269      	movs	r2, #105	; 0x69
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	f7fe ff84 	bl	8008a40 <_lv_obj_get_style_color>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 8009b38:	86a0      	strh	r0, [r4, #52]	; 0x34
 8009b3a:	e744      	b.n	80099c6 <lv_obj_init_draw_rect_dsc+0x19a>

08009b3c <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8009b3c:	2a02      	cmp	r2, #2
{
 8009b3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	b09b      	sub	sp, #108	; 0x6c
 8009b46:	4688      	mov	r8, r1
 8009b48:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8009b4a:	d15d      	bne.n	8009c08 <lv_obj_design+0xcc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f7ff f86e 	bl	8008c2e <lv_obj_get_style_clip_corner>
 8009b52:	4605      	mov	r5, r0
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d155      	bne.n	8009c04 <lv_obj_design+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8009b58:	4601      	mov	r1, r0
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f7fe ffa5 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009b62:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8009b64:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009b66:	4629      	mov	r1, r5
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f7fe ff9f 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009b6e:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009b70:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009b72:	4629      	mov	r1, r5
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7fe ff99 	bl	8008aac <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8009b7a:	f104 0110 	add.w	r1, r4, #16
 8009b7e:	4606      	mov	r6, r0
 8009b80:	a805      	add	r0, sp, #20
 8009b82:	f7fd fe81 	bl	8007888 <lv_area_copy>
        coords.x1 -= w;
 8009b86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8009b8a:	b2b8      	uxth	r0, r7
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	a905      	add	r1, sp, #20
        coords.x1 -= w;
 8009b90:	1a1b      	subs	r3, r3, r0
 8009b92:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
 8009b96:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009b9a:	4418      	add	r0, r3
        coords.y1 -= h;
 8009b9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        coords.x2 += w;
 8009ba0:	f8ad 0018 	strh.w	r0, [sp, #24]
        coords.y1 -= h;
 8009ba4:	b2b0      	uxth	r0, r6
 8009ba6:	1a1b      	subs	r3, r3, r0
 8009ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
 8009bac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8009bb0:	4418      	add	r0, r3
 8009bb2:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f009 fb97 	bl	80132ea <_lv_area_is_in>
 8009bbc:	b918      	cbnz	r0, 8009bc6 <lv_obj_design+0x8a>
 8009bbe:	2002      	movs	r0, #2
}
 8009bc0:	b01b      	add	sp, #108	; 0x6c
 8009bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8009bc6:	222c      	movs	r2, #44	; 0x2c
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f7ff fa10 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8009bd0:	28fc      	cmp	r0, #252	; 0xfc
 8009bd2:	d9f4      	bls.n	8009bbe <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7fe ff67 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8009bde:	b2c1      	uxtb	r1, r0
 8009be0:	2900      	cmp	r1, #0
 8009be2:	d1ec      	bne.n	8009bbe <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
 8009be4:	2232      	movs	r2, #50	; 0x32
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7fe ff60 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8009bec:	b2c1      	uxtb	r1, r0
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	d1e5      	bne.n	8009bbe <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8009bf2:	f248 020c 	movw	r2, #32780	; 0x800c
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7ff f9fa 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8009bfc:	28fc      	cmp	r0, #252	; 0xfc
 8009bfe:	d9de      	bls.n	8009bbe <lv_obj_design+0x82>
        return LV_DESIGN_RES_COVER;
 8009c00:	2001      	movs	r0, #1
 8009c02:	e7dd      	b.n	8009bc0 <lv_obj_design+0x84>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8009c04:	2003      	movs	r0, #3
 8009c06:	e7db      	b.n	8009bc0 <lv_obj_design+0x84>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d17a      	bne.n	8009d02 <lv_obj_design+0x1c6>
        lv_draw_rect_dsc_init(&draw_dsc);
 8009c0c:	a805      	add	r0, sp, #20
 8009c0e:	f005 fe4b 	bl	800f8a8 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8009c12:	2233      	movs	r2, #51	; 0x33
 8009c14:	4629      	mov	r1, r5
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7fe ff48 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8009c1c:	b128      	cbz	r0, 8009c2a <lv_obj_design+0xee>
            draw_dsc.border_post = 1;
 8009c1e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8009c22:	f043 0301 	orr.w	r3, r3, #1
 8009c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8009c2a:	aa05      	add	r2, sp, #20
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4620      	mov	r0, r4
        lv_area_copy(&coords, &obj->coords);
 8009c30:	f104 0710 	add.w	r7, r4, #16
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8009c34:	f7ff fdfa 	bl	800982c <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009c38:	2204      	movs	r2, #4
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7fe ff35 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009c42:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009c44:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009c46:	2100      	movs	r1, #0
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7fe ff2f 	bl	8008aac <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4605      	mov	r5, r0
 8009c52:	a801      	add	r0, sp, #4
 8009c54:	f7fd fe18 	bl	8007888 <lv_area_copy>
        coords.x1 -= w;
 8009c58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c5c:	b2b0      	uxth	r0, r6
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8009c5e:	4641      	mov	r1, r8
 8009c60:	aa05      	add	r2, sp, #20
        coords.x1 -= w;
 8009c62:	1a1b      	subs	r3, r3, r0
 8009c64:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
 8009c68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009c6c:	4418      	add	r0, r3
        coords.y1 -= h;
 8009c6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        coords.x2 += w;
 8009c72:	f8ad 0008 	strh.w	r0, [sp, #8]
        coords.y1 -= h;
 8009c76:	b2a8      	uxth	r0, r5
 8009c78:	1a1b      	subs	r3, r3, r0
 8009c7a:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
 8009c7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009c82:	4418      	add	r0, r3
 8009c84:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8009c88:	a801      	add	r0, sp, #4
 8009c8a:	f005 fe31 	bl	800f8f0 <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7fe ffcc 	bl	8008c2e <lv_obj_get_style_clip_corner>
 8009c96:	b378      	cbz	r0, 8009cf8 <lv_obj_design+0x1bc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8009c98:	201c      	movs	r0, #28
 8009c9a:	f00a f94b 	bl	8013f34 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7fe ff01 	bl	8008aac <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8009caa:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8009cae:	4602      	mov	r2, r0
 8009cb0:	07db      	lsls	r3, r3, #31
 8009cb2:	d523      	bpl.n	8009cfc <lv_obj_design+0x1c0>
 8009cb4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d91f      	bls.n	8009cfc <lv_obj_design+0x1c0>
 8009cbc:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dd1b      	ble.n	8009cfc <lv_obj_design+0x1c0>
                cc_area.x1 = obj->coords.x1 + 1;
 8009cc4:	8a23      	ldrh	r3, [r4, #16]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8009cc6:	a903      	add	r1, sp, #12
                cc_area.x1 = obj->coords.x1 + 1;
 8009cc8:	3301      	adds	r3, #1
 8009cca:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
 8009cce:	8a63      	ldrh	r3, [r4, #18]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
 8009cd6:	8aa3      	ldrh	r3, [r4, #20]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
 8009cde:	8ae3      	ldrh	r3, [r4, #22]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8009ce6:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f005 fa55 	bl	800f198 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8009cee:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f005 f958 	bl	800efa8 <lv_draw_mask_add>
    return LV_DESIGN_RES_OK;
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e761      	b.n	8009bc0 <lv_obj_design+0x84>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4639      	mov	r1, r7
 8009d00:	e7f2      	b.n	8009ce8 <lv_obj_design+0x1ac>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8009d02:	2a01      	cmp	r2, #1
 8009d04:	d1f8      	bne.n	8009cf8 <lv_obj_design+0x1bc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8009d06:	2100      	movs	r1, #0
 8009d08:	f7fe ff91 	bl	8008c2e <lv_obj_get_style_clip_corner>
 8009d0c:	b128      	cbz	r0, 8009d1a <lv_obj_design+0x1de>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8009d0e:	f504 7018 	add.w	r0, r4, #608	; 0x260
 8009d12:	f005 f999 	bl	800f048 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 8009d16:	f009 ffa3 	bl	8013c60 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8009d1a:	2233      	movs	r2, #51	; 0x33
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7fe fec4 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0e7      	beq.n	8009cf8 <lv_obj_design+0x1bc>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8009d28:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8009d2a:	a805      	add	r0, sp, #20
 8009d2c:	f005 fdbc 	bl	800f8a8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8009d30:	aa05      	add	r2, sp, #20
 8009d32:	4629      	mov	r1, r5
 8009d34:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8009d36:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8009d3a:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8009d3e:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8009d42:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8009d46:	f7ff fd71 	bl	800982c <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7fe feac 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009d54:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 8009d56:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 8009d58:	4629      	mov	r1, r5
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f7fe fea6 	bl	8008aac <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
 8009d60:	f104 0110 	add.w	r1, r4, #16
 8009d64:	4606      	mov	r6, r0
 8009d66:	a803      	add	r0, sp, #12
 8009d68:	f7fd fd8e 	bl	8007888 <lv_area_copy>
            coords.x1 -= w;
 8009d6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009d70:	b2b8      	uxth	r0, r7
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8009d72:	aa05      	add	r2, sp, #20
 8009d74:	4641      	mov	r1, r8
            coords.x1 -= w;
 8009d76:	1a1b      	subs	r3, r3, r0
 8009d78:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
 8009d7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8009d80:	4418      	add	r0, r3
            coords.y1 -= h;
 8009d82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.x2 += w;
 8009d86:	f8ad 0010 	strh.w	r0, [sp, #16]
            coords.y1 -= h;
 8009d8a:	b2b0      	uxth	r0, r6
 8009d8c:	1a1b      	subs	r3, r3, r0
 8009d8e:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
 8009d92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009d96:	4418      	add	r0, r3
 8009d98:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8009d9c:	a803      	add	r0, sp, #12
 8009d9e:	f005 fda7 	bl	800f8f0 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 8009da2:	4628      	mov	r0, r5
 8009da4:	e70c      	b.n	8009bc0 <lv_obj_design+0x84>

08009da6 <lv_obj_init_draw_label_dsc>:
{
 8009da6:	b570      	push	{r4, r5, r6, lr}
 8009da8:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa)
 8009daa:	f248 028c 	movw	r2, #32908	; 0x808c
 8009dae:	4605      	mov	r5, r0
 8009db0:	460e      	mov	r6, r1
 8009db2:	f7ff f91d 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8009db6:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8009db8:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8009dba:	d952      	bls.n	8009e62 <lv_obj_init_draw_label_dsc+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8009dbc:	f248 020c 	movw	r2, #32780	; 0x800c
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f7ff f914 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8009dc8:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8009dca:	bf9f      	itttt	ls
 8009dcc:	7b23      	ldrbls	r3, [r4, #12]
 8009dce:	fb13 f000 	smulbbls	r0, r3, r0
 8009dd2:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8009dd6:	7320      	strbls	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8009dd8:	7b23      	ldrb	r3, [r4, #12]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d941      	bls.n	8009e62 <lv_obj_init_draw_label_dsc+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8009dde:	f248 0289 	movw	r2, #32905	; 0x8089
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	f7fe fe2b 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 8009dea:	f248 0280 	movw	r2, #32896	; 0x8080
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8009dee:	8020      	strh	r0, [r4, #0]
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7fe fe5a 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8009df8:	f248 0281 	movw	r2, #32897	; 0x8081
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8009dfc:	8220      	strh	r0, [r4, #16]
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4628      	mov	r0, r5
 8009e02:	f7fe fe53 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8009e06:	f248 0282 	movw	r2, #32898	; 0x8082
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8009e0a:	81e0      	strh	r0, [r4, #14]
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f7fe fe4c 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
 8009e14:	f248 0283 	movw	r2, #32899	; 0x8083
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
 8009e18:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f7fe fe44 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8009e24:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
 8009e28:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7ff f944 	bl	80090bc <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8009e34:	6962      	ldr	r2, [r4, #20]
 8009e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8009e3a:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d010      	beq.n	8009e62 <lv_obj_init_draw_label_dsc+0xbc>
 8009e40:	69a2      	ldr	r2, [r4, #24]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d00d      	beq.n	8009e62 <lv_obj_init_draw_label_dsc+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 8009e46:	f248 028a 	movw	r2, #32906	; 0x808a
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7fe fdf7 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 8009e52:	f248 028b 	movw	r2, #32907	; 0x808b
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 8009e56:	8060      	strh	r0, [r4, #2]
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f7fe fdf0 	bl	8008a40 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8009e60:	80a0      	strh	r0, [r4, #4]
}
 8009e62:	bd70      	pop	{r4, r5, r6, pc}

08009e64 <lv_obj_init_draw_img_dsc>:
{
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
 8009e68:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	f7ff f8be 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009e74:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8009e76:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009e78:	d93c      	bls.n	8009ef4 <lv_obj_init_draw_img_dsc+0x90>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8009e7a:	f248 020c 	movw	r2, #32780	; 0x800c
 8009e7e:	4629      	mov	r1, r5
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff f8b5 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8009e86:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8009e88:	bf9f      	itttt	ls
 8009e8a:	7823      	ldrbls	r3, [r4, #0]
 8009e8c:	fb13 f000 	smulbbls	r0, r3, r0
 8009e90:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8009e94:	7020      	strbls	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009e96:	7823      	ldrb	r3, [r4, #0]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d92b      	bls.n	8009ef4 <lv_obj_init_draw_img_dsc+0x90>
    draw_dsc->angle = 0;
 8009e9c:	2300      	movs	r3, #0
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8009e9e:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
 8009ea0:	4630      	mov	r0, r6
    draw_dsc->angle = 0;
 8009ea2:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8009ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea8:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009eaa:	8ab2      	ldrh	r2, [r6, #20]
 8009eac:	8a33      	ldrh	r3, [r6, #16]
 8009eae:	3201      	adds	r2, #1
 8009eb0:	1ad2      	subs	r2, r2, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8009eb2:	b212      	sxth	r2, r2
 8009eb4:	fb92 f2f1 	sdiv	r2, r2, r1
 8009eb8:	80a2      	strh	r2, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009eba:	8af3      	ldrh	r3, [r6, #22]
 8009ebc:	8a72      	ldrh	r2, [r6, #18]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	f248 02ad 	movw	r2, #32941	; 0x80ad
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8009ec6:	b21b      	sxth	r3, r3
 8009ec8:	fb93 f3f1 	sdiv	r3, r3, r1
 8009ecc:	4629      	mov	r1, r5
 8009ece:	80e3      	strh	r3, [r4, #6]
 8009ed0:	f7ff f88e 	bl	8008ff0 <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 8009ed4:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8009ed6:	b130      	cbz	r0, 8009ee6 <lv_obj_init_draw_img_dsc+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8009ed8:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8009edc:	4629      	mov	r1, r5
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7fe fdae 	bl	8008a40 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 8009ee4:	81a0      	strh	r0, [r4, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
 8009ee6:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7fe fddd 	bl	8008aac <_lv_obj_get_style_int>
 8009ef2:	73a0      	strb	r0, [r4, #14]
}
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}

08009ef6 <lv_obj_init_draw_line_dsc>:
{
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8009efa:	2290      	movs	r2, #144	; 0x90
 8009efc:	4605      	mov	r5, r0
 8009efe:	460e      	mov	r6, r1
 8009f00:	f7fe fdd4 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8009f04:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d043      	beq.n	8009f92 <lv_obj_init_draw_line_dsc+0x9c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
 8009f0a:	229c      	movs	r2, #156	; 0x9c
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f7ff f86e 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009f14:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8009f16:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009f18:	d93b      	bls.n	8009f92 <lv_obj_init_draw_line_dsc+0x9c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 8009f1a:	f248 020c 	movw	r2, #32780	; 0x800c
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4628      	mov	r0, r5
 8009f22:	f7ff f865 	bl	8008ff0 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8009f26:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8009f28:	bf9f      	itttt	ls
 8009f2a:	7a23      	ldrbls	r3, [r4, #8]
 8009f2c:	fb13 f000 	smulbbls	r0, r3, r0
 8009f30:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8009f34:	7220      	strbls	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8009f36:	7a23      	ldrb	r3, [r4, #8]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d92a      	bls.n	8009f92 <lv_obj_init_draw_line_dsc+0x9c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8009f3c:	2299      	movs	r2, #153	; 0x99
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	f7fe fd7d 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int)
 8009f46:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8009f48:	8020      	strh	r0, [r4, #0]
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7fe fdad 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8009f52:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8009f54:	b128      	cbz	r0, 8009f62 <lv_obj_init_draw_line_dsc+0x6c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
 8009f56:	2293      	movs	r2, #147	; 0x93
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f7fe fda6 	bl	8008aac <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8009f60:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 8009f62:	2294      	movs	r2, #148	; 0x94
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	f7fe fda0 	bl	8008aac <_lv_obj_get_style_int>
 8009f6c:	3000      	adds	r0, #0
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8009f6e:	7a63      	ldrb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int)
 8009f70:	f04f 0291 	mov.w	r2, #145	; 0x91
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 8009f74:	bf18      	it	ne
 8009f76:	2001      	movne	r0, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int)
 8009f78:	4631      	mov	r1, r6
 8009f7a:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 8009f7e:	f360 03c3 	bfi	r3, r0, #3, #1
 8009f82:	4628      	mov	r0, r5
 8009f84:	7263      	strb	r3, [r4, #9]
 8009f86:	f7fe fd91 	bl	8008aac <_lv_obj_get_style_int>
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 8009f8a:	7a63      	ldrb	r3, [r4, #9]
 8009f8c:	f360 0301 	bfi	r3, r0, #0, #2
 8009f90:	7263      	strb	r3, [r4, #9]
}
 8009f92:	bd70      	pop	{r4, r5, r6, pc}

08009f94 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8009f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	4614      	mov	r4, r2
 8009f9a:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
 8009f9c:	2101      	movs	r1, #1
{
 8009f9e:	4605      	mov	r5, r0
    _lv_memset_00(shot, sizeof(style_snapshot_t));
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
 8009fa0:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    _lv_obj_disable_style_caching(obj, true);
 8009fa4:	f7fd ff1f 	bl	8007de6 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8009fa8:	21bc      	movs	r1, #188	; 0xbc
 8009faa:	4620      	mov	r0, r4
 8009fac:	f00a f860 	bl	8014070 <_lv_memset_00>
    lv_draw_img_dsc_init(&shot->img);
 8009fb0:	f104 0982 	add.w	r9, r4, #130	; 0x82
    lv_draw_rect_dsc_init(&shot->rect);
 8009fb4:	4620      	mov	r0, r4
    lv_draw_line_dsc_init(&shot->line);
 8009fb6:	f104 0878 	add.w	r8, r4, #120	; 0x78
    lv_draw_rect_dsc_init(&shot->rect);
 8009fba:	f005 fc75 	bl	800f8a8 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	f003 f96a 	bl	800d298 <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8009fc4:	4648      	mov	r0, r9
 8009fc6:	f003 f835 	bl	800d034 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f003 ffc0 	bl	800df50 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7fd feac 	bl	8007d30 <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
 8009fd8:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009fda:	4607      	mov	r7, r0
    list->skip_trans = 1;

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009fdc:	4622      	mov	r2, r4
    bool trans_ori = list->skip_trans;
 8009fde:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009fe6:	4631      	mov	r1, r6
    list->skip_trans = 1;
 8009fe8:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009fea:	4628      	mov	r0, r5
 8009fec:	f7ff fc1e 	bl	800982c <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f7ff fed6 	bl	8009da6 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 8009ffa:	464a      	mov	r2, r9
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7ff ff30 	bl	8009e64 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 800a004:	4642      	mov	r2, r8
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	f7ff ff74 	bl	8009ef6 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 800a00e:	2210      	movs	r2, #16
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	f7fe fd4a 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 800a018:	2211      	movs	r2, #17

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 800a01a:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	f7fe fd43 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 800a026:	2213      	movs	r2, #19
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 800a028:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
 800a02c:	4631      	mov	r1, r6
 800a02e:	4628      	mov	r0, r5
 800a030:	f7fe fd3c 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 800a034:	2212      	movs	r2, #18
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 800a036:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	f7fe fd35 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 800a042:	2214      	movs	r2, #20
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 800a044:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
 800a048:	4631      	mov	r1, r6
 800a04a:	4628      	mov	r0, r5
 800a04c:	f7fe fd2e 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 800a050:	2215      	movs	r2, #21
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 800a052:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	f7fe fd27 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 800a05e:	2216      	movs	r2, #22
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 800a060:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	f7fe fd20 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 800a06c:	2217      	movs	r2, #23
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 800a06e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
 800a072:	4631      	mov	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	f7fe fd19 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 800a07a:	2218      	movs	r2, #24
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 800a07c:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	f7fe fd12 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 800a088:	2203      	movs	r2, #3
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 800a08a:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	f7fe fd0b 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800a096:	2204      	movs	r2, #4
    shot->size = lv_obj_get_style_size(obj, part);
 800a098:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f7fe fd04 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800a0a4:	2205      	movs	r2, #5
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 800a0a6:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f7fe fcfd 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 800a0b2:	2206      	movs	r2, #6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 800a0b4:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7fe fcf6 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 800a0c0:	2207      	movs	r2, #7
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 800a0c2:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f7fe fcef 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 800a0ce:	22c0      	movs	r2, #192	; 0xc0
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 800a0d0:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7fe fce8 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int)
 800a0dc:	22c1      	movs	r2, #193	; 0xc1
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 800a0de:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f7fe fce1 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int)
 800a0ea:	22c2      	movs	r2, #194	; 0xc2
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 800a0ec:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f7fe fcda 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 800a0f8:	22c3      	movs	r2, #195	; 0xc3
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 800a0fa:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	f7fe fcd3 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 800a106:	22c9      	movs	r2, #201	; 0xc9
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 800a108:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	f7fe fc96 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 800a114:	22ca      	movs	r2, #202	; 0xca
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 800a116:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	f7fe fc8f 	bl	8008a40 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 800a122:	f248 020c 	movw	r2, #32780	; 0x800c
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 800a126:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	f7fe ff5f 	bl	8008ff0 <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 800a132:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 800a134:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 800a138:	4628      	mov	r0, r5
 800a13a:	f7fe fd78 	bl	8008c2e <lv_obj_get_style_clip_corner>
 800a13e:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 800a142:	2233      	movs	r2, #51	; 0x33
 800a144:	4631      	mov	r1, r6
 800a146:	f360 0300 	bfi	r3, r0, #0, #1
 800a14a:	4628      	mov	r0, r5
 800a14c:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 800a150:	f7fe fcac 	bl	8008aac <_lv_obj_get_style_int>
 800a154:	3000      	adds	r0, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 800a156:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb

    _lv_obj_disable_style_caching(obj, false);
 800a15a:	f04f 0100 	mov.w	r1, #0
 800a15e:	bf18      	it	ne
 800a160:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 800a162:	f360 0341 	bfi	r3, r0, #1, #1
    _lv_obj_disable_style_caching(obj, false);
 800a166:	4628      	mov	r0, r5
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 800a168:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
 800a16c:	f7fd fe3b 	bl	8007de6 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 800a170:	797b      	ldrb	r3, [r7, #5]
 800a172:	f36b 0300 	bfi	r3, fp, #0, #1
 800a176:	717b      	strb	r3, [r7, #5]
}
 800a178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a17c <lv_obj_set_state.part.36>:
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 800a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_state_t prev_state = obj->state;
 800a180:	2500      	movs	r5, #0
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 800a182:	b0eb      	sub	sp, #428	; 0x1ac
    lv_state_t prev_state = obj->state;
 800a184:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 800a188:	4604      	mov	r4, r0
 800a18a:	468b      	mov	fp, r1
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 800a18c:	462e      	mov	r6, r5
    lv_state_t prev_state = obj->state;
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	b2ef      	uxtb	r7, r5
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 800a192:	4620      	mov	r0, r4
 800a194:	4639      	mov	r1, r7
 800a196:	f7fd fdcb 	bl	8007d30 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f000 8097 	beq.w	800a2ce <lv_obj_set_state.part.36+0x152>
        obj->state = prev_state;
 800a1a0:	9b01      	ldr	r3, [sp, #4]
        style_snapshot(obj, part, &shot_pre);
 800a1a2:	aa0c      	add	r2, sp, #48	; 0x30
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a1a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
 800a1ac:	f7ff fef2 	bl	8009f94 <style_snapshot>
        style_snapshot(obj, part, &shot_post);
 800a1b0:	aa3b      	add	r2, sp, #236	; 0xec
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4620      	mov	r0, r4
        obj->state = new_state;
 800a1b6:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
 800a1ba:	f7ff feeb 	bl	8009f94 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 800a1be:	22bc      	movs	r2, #188	; 0xbc
 800a1c0:	a93b      	add	r1, sp, #236	; 0xec
 800a1c2:	a80c      	add	r0, sp, #48	; 0x30
 800a1c4:	f014 fc32 	bl	801ea2c <memcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d07c      	beq.n	800a2c6 <lv_obj_set_state.part.36+0x14a>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 800a1cc:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
 800a1d0:	f9bd 317e 	ldrsh.w	r3, [sp, #382]	; 0x17e
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	f040 8098 	bne.w	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 800a1da:	f9bd 20c4 	ldrsh.w	r2, [sp, #196]	; 0xc4
 800a1de:	f9bd 3180 	ldrsh.w	r3, [sp, #384]	; 0x180
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	f040 8091 	bne.w	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 800a1e8:	f9bd 20c8 	ldrsh.w	r2, [sp, #200]	; 0xc8
 800a1ec:	f9bd 3182 	ldrsh.w	r3, [sp, #386]	; 0x182
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	f040 808a 	bne.w	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 800a1f6:	f9bd 20c6 	ldrsh.w	r2, [sp, #198]	; 0xc6
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	f040 8085 	bne.w	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 800a200:	f9bd 20ca 	ldrsh.w	r2, [sp, #202]	; 0xca
 800a204:	f9bd 3186 	ldrsh.w	r3, [sp, #390]	; 0x186
 800a208:	429a      	cmp	r2, r3
 800a20a:	d17e      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 800a20c:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
 800a210:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	; 0x188
 800a214:	429a      	cmp	r2, r3
 800a216:	d178      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 800a218:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
 800a21c:	f9bd 318a 	ldrsh.w	r3, [sp, #394]	; 0x18a
 800a220:	429a      	cmp	r2, r3
 800a222:	d172      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 800a224:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
 800a228:	f9bd 218e 	ldrsh.w	r2, [sp, #398]	; 0x18e
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d16c      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 800a230:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	; 0xd2
 800a234:	429a      	cmp	r2, r3
 800a236:	d168      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 800a238:	f9bd 20d6 	ldrsh.w	r2, [sp, #214]	; 0xd6
 800a23c:	f9bd 3192 	ldrsh.w	r3, [sp, #402]	; 0x192
 800a240:	429a      	cmp	r2, r3
 800a242:	d162      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 800a244:	f9bd 20d8 	ldrsh.w	r2, [sp, #216]	; 0xd8
 800a248:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	; 0x194
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d15c      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 800a250:	f9bd 20da 	ldrsh.w	r2, [sp, #218]	; 0xda
 800a254:	f9bd 3196 	ldrsh.w	r3, [sp, #406]	; 0x196
 800a258:	429a      	cmp	r2, r3
 800a25a:	d156      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 800a25c:	f9bd 20dc 	ldrsh.w	r2, [sp, #220]	; 0xdc
 800a260:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	; 0x198
 800a264:	429a      	cmp	r2, r3
 800a266:	d150      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 800a268:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 800a26c:	f9bd 3106 	ldrsh.w	r3, [sp, #262]	; 0x106
 800a270:	429a      	cmp	r2, r3
 800a272:	d14a      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 800a274:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 800a278:	f9bd 3108 	ldrsh.w	r3, [sp, #264]	; 0x108
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d144      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800a280:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a282:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800a284:	429a      	cmp	r2, r3
 800a286:	d140      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 800a288:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800a28c:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 800a290:	429a      	cmp	r2, r3
 800a292:	d13a      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 800a294:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
 800a298:	f9bd 3114 	ldrsh.w	r3, [sp, #276]	; 0x114
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d134      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 800a2a0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800a2a4:	f9bd 310e 	ldrsh.w	r3, [sp, #270]	; 0x10e
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d12e      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 800a2ac:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 800a2b0:	f9bd 3110 	ldrsh.w	r3, [sp, #272]	; 0x110
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d128      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 800a2b8:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800a2bc:	f9bd 3112 	ldrsh.w	r3, [sp, #274]	; 0x112
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d122      	bne.n	800a30a <lv_obj_set_state.part.36+0x18e>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 800a2c4:	2601      	movs	r6, #1
 800a2c6:	3501      	adds	r5, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 800a2c8:	2d40      	cmp	r5, #64	; 0x40
 800a2ca:	f47f af61 	bne.w	800a190 <lv_obj_set_state.part.36+0x14>
    obj->state = new_state;
 800a2ce:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
 800a2d2:	b1be      	cbz	r6, 800a304 <lv_obj_set_state.part.36+0x188>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9303      	str	r3, [sp, #12]
 800a2d8:	f89d 500c 	ldrb.w	r5, [sp, #12]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7fd fd26 	bl	8007d30 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 800a2e4:	9005      	str	r0, [sp, #20]
 800a2e6:	b140      	cbz	r0, 800a2fa <lv_obj_set_state.part.36+0x17e>
        if(style_list->ignore_trans) continue;
 800a2e8:	7943      	ldrb	r3, [r0, #5]
 800a2ea:	f013 0702 	ands.w	r7, r3, #2
 800a2ee:	d00e      	beq.n	800a30e <lv_obj_set_state.part.36+0x192>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	3301      	adds	r3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 800a2f4:	2b40      	cmp	r3, #64	; 0x40
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	d1ee      	bne.n	800a2d8 <lv_obj_set_state.part.36+0x15c>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 800a2fa:	2e01      	cmp	r6, #1
 800a2fc:	d102      	bne.n	800a304 <lv_obj_set_state.part.36+0x188>
        lv_obj_invalidate(obj);
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7fd fe54 	bl	8007fac <lv_obj_invalidate>
}
 800a304:	b06b      	add	sp, #428	; 0x1ac
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            cmp_res = STYLE_COMPARE_DIFF;
 800a30a:	2602      	movs	r6, #2
 800a30c:	e7df      	b.n	800a2ce <lv_obj_set_state.part.36+0x152>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800a30e:	22b0      	movs	r2, #176	; 0xb0
 800a310:	4629      	mov	r1, r5
 800a312:	4620      	mov	r0, r4
 800a314:	f7fe fbca 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 800a318:	22b1      	movs	r2, #177	; 0xb1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 800a31a:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 800a31c:	4629      	mov	r1, r5
 800a31e:	4620      	mov	r0, r4
 800a320:	f7fe fbc4 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
 800a324:	22be      	movs	r2, #190	; 0xbe
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 800a326:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
 800a328:	4629      	mov	r1, r5
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7fe fec6 	bl	80090bc <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int)
 800a330:	22b2      	movs	r2, #178	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
 800a332:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int)
 800a334:	4629      	mov	r1, r5
 800a336:	4620      	mov	r0, r4
 800a338:	f7fe fbb8 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int)
 800a33c:	22b3      	movs	r2, #179	; 0xb3
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 800a33e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800a342:	4629      	mov	r1, r5
 800a344:	4620      	mov	r0, r4
 800a346:	f7fe fbb1 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int)
 800a34a:	22b4      	movs	r2, #180	; 0xb4
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 800a34c:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800a350:	4629      	mov	r1, r5
 800a352:	4620      	mov	r0, r4
 800a354:	f7fe fbaa 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
 800a358:	22b5      	movs	r2, #181	; 0xb5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 800a35a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800a35e:	4629      	mov	r1, r5
 800a360:	4620      	mov	r0, r4
 800a362:	f7fe fba3 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 800a366:	22b6      	movs	r2, #182	; 0xb6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 800a368:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 800a36c:	4629      	mov	r1, r5
 800a36e:	4620      	mov	r0, r4
 800a370:	f7fe fb9c 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 800a374:	22b7      	movs	r2, #183	; 0xb7
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 800a376:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800a37a:	4629      	mov	r1, r5
 800a37c:	4620      	mov	r0, r4
 800a37e:	f7fe fb95 	bl	8008aac <_lv_obj_get_style_int>
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 800a382:	9704      	str	r7, [sp, #16]
 800a384:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
            if(props[i] != 0) {
 800a388:	ab0c      	add	r3, sp, #48	; 0x30
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 800a390:	2f00      	cmp	r7, #0
 800a392:	f000 80c1 	beq.w	800a518 <lv_obj_set_state.part.36+0x39c>
                _lv_style_list_add_trans_style(style_list);
 800a396:	9805      	ldr	r0, [sp, #20]
 800a398:	f001 fb68 	bl	800ba6c <_lv_style_list_add_trans_style>
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 800a39c:	4629      	mov	r1, r5
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7fd fcc6 	bl	8007d30 <lv_obj_get_style_list>
 800a3a4:	4680      	mov	r8, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 800a3a6:	f001 faba 	bl	800b91e <_lv_style_list_get_transition_style>
 800a3aa:	4682      	mov	sl, r0
    bool cache_ori = style_list->ignore_cache;
 800a3ac:	f898 3005 	ldrb.w	r3, [r8, #5]
 800a3b0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800a3b4:	9202      	str	r2, [sp, #8]
 800a3b6:	f007 020f 	and.w	r2, r7, #15
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 800a3ba:	2a08      	cmp	r2, #8
 800a3bc:	f200 80bb 	bhi.w	800a536 <lv_obj_set_state.part.36+0x3ba>
        style_list->ignore_cache = 1;
 800a3c0:	f043 0309 	orr.w	r3, r3, #9
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 800a3c4:	463a      	mov	r2, r7
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4620      	mov	r0, r4
        style_list->ignore_cache = 1;
 800a3ca:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 800a3d4:	f7fe fb6a 	bl	8008aac <_lv_obj_get_style_int>
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 800a3d8:	463a      	mov	r2, r7
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 800a3da:	9009      	str	r0, [sp, #36]	; 0x24
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 800a3dc:	4629      	mov	r1, r5
        obj->state = new_state;
 800a3de:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7fe fb62 	bl	8008aac <_lv_obj_get_style_int>
        style_list->skip_trans = 0;
 800a3e8:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cache_ori;
 800a3ec:	9b02      	ldr	r3, [sp, #8]
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 800a3ee:	4681      	mov	r9, r0
        style_list->ignore_cache = cache_ori;
 800a3f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3f4:	f363 02c3 	bfi	r2, r3, #3, #1
 800a3f8:	f888 2005 	strb.w	r2, [r8, #5]
        if(int1 == int2)  return NULL;
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	4283      	cmp	r3, r0
 800a400:	f000 808a 	beq.w	800a518 <lv_obj_set_state.part.36+0x39c>
        obj->state = prev_state;
 800a404:	9b01      	ldr	r3, [sp, #4]
        int1 = _lv_obj_get_style_int(obj, part, prop);
 800a406:	463a      	mov	r2, r7
 800a408:	4629      	mov	r1, r5
 800a40a:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a40c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 800a410:	f7fe fb4c 	bl	8008aac <_lv_obj_get_style_int>
        obj->state = new_state;
 800a414:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 800a418:	4602      	mov	r2, r0
        int1 = _lv_obj_get_style_int(obj, part, prop);
 800a41a:	4680      	mov	r8, r0
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 800a41c:	4639      	mov	r1, r7
 800a41e:	4650      	mov	r0, sl
 800a420:	f001 f8da 	bl	800b5d8 <_lv_style_set_int>
        if(prop == LV_STYLE_RADIUS) {
 800a424:	2f01      	cmp	r7, #1
 800a426:	d125      	bne.n	800a474 <lv_obj_set_state.part.36+0x2f8>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 800a428:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a42c:	4598      	cmp	r8, r3
 800a42e:	d001      	beq.n	800a434 <lv_obj_set_state.part.36+0x2b8>
 800a430:	4599      	cmp	r9, r3
 800a432:	d11f      	bne.n	800a474 <lv_obj_set_state.part.36+0x2f8>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a434:	4620      	mov	r0, r4
 800a436:	f7fd fc4d 	bl	8007cd4 <lv_obj_get_width>
 800a43a:	2302      	movs	r3, #2
 800a43c:	fb90 f0f3 	sdiv	r0, r0, r3
 800a440:	fa0f fa80 	sxth.w	sl, r0
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 800a444:	4620      	mov	r0, r4
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a446:	9302      	str	r3, [sp, #8]
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 800a448:	f7fd fc44 	bl	8007cd4 <lv_obj_get_width>
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	fb90 f0f3 	sdiv	r0, r0, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a452:	f647 73ff 	movw	r3, #32767	; 0x7fff
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 800a456:	b200      	sxth	r0, r0
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a458:	4598      	cmp	r8, r3
 800a45a:	d122      	bne.n	800a4a2 <lv_obj_set_state.part.36+0x326>
 800a45c:	4582      	cmp	sl, r0
 800a45e:	da16      	bge.n	800a48e <lv_obj_set_state.part.36+0x312>
 800a460:	f10a 0801 	add.w	r8, sl, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a464:	4599      	cmp	r9, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a466:	fa0f f888 	sxth.w	r8, r8
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a46a:	d103      	bne.n	800a474 <lv_obj_set_state.part.36+0x2f8>
 800a46c:	f10a 0901 	add.w	r9, sl, #1
 800a470:	fa0f f989 	sxth.w	r9, r9
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a474:	48a4      	ldr	r0, [pc, #656]	; (800a708 <lv_obj_set_state.part.36+0x58c>)
 800a476:	f009 f9b6 	bl	80137e6 <_lv_ll_ins_head>
 800a47a:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 800a47c:	f009 f8bc 	bl	80135f8 <lv_debug_check_null>
 800a480:	4603      	mov	r3, r0
 800a482:	b998      	cbnz	r0, 800a4ac <lv_obj_set_state.part.36+0x330>
 800a484:	4652      	mov	r2, sl
 800a486:	48a1      	ldr	r0, [pc, #644]	; (800a70c <lv_obj_set_state.part.36+0x590>)
 800a488:	f009 f8ba 	bl	8013600 <lv_debug_log_error>
 800a48c:	e7fe      	b.n	800a48c <lv_obj_set_state.part.36+0x310>
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a48e:	f100 0801 	add.w	r8, r0, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a492:	4599      	cmp	r9, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a494:	fa0f f888 	sxth.w	r8, r8
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800a498:	d1ec      	bne.n	800a474 <lv_obj_set_state.part.36+0x2f8>
 800a49a:	3001      	adds	r0, #1
 800a49c:	fa0f f980 	sxth.w	r9, r0
 800a4a0:	e7e8      	b.n	800a474 <lv_obj_set_state.part.36+0x2f8>
 800a4a2:	4599      	cmp	r9, r3
 800a4a4:	d1e6      	bne.n	800a474 <lv_obj_set_state.part.36+0x2f8>
 800a4a6:	4582      	cmp	sl, r0
 800a4a8:	daf7      	bge.n	800a49a <lv_obj_set_state.part.36+0x31e>
 800a4aa:	e7df      	b.n	800a46c <lv_obj_set_state.part.36+0x2f0>
        if(tr == NULL) return NULL;
 800a4ac:	f1ba 0f00 	cmp.w	sl, #0
 800a4b0:	d032      	beq.n	800a518 <lv_obj_set_state.part.36+0x39c>
        tr->start_value._int = int1;
 800a4b2:	f8aa 8008 	strh.w	r8, [sl, #8]
        tr->end_value._int = int2;
 800a4b6:	f8aa 900c 	strh.w	r9, [sl, #12]
                    tr->obj = obj;
 800a4ba:	f8ca 4000 	str.w	r4, [sl]
                    lv_anim_init(&a);
 800a4be:	a83b      	add	r0, sp, #236	; 0xec
                    tr->prop = props[i];
 800a4c0:	f8aa 7004 	strh.w	r7, [sl, #4]
                    tr->part = part;
 800a4c4:	f88a 5006 	strb.w	r5, [sl, #6]
                    lv_anim_init(&a);
 800a4c8:	f008 fd30 	bl	8012f2c <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 800a4cc:	4b90      	ldr	r3, [pc, #576]	; (800a710 <lv_obj_set_state.part.36+0x594>)
 800a4ce:	9a06      	ldr	r2, [sp, #24]
 800a4d0:	933c      	str	r3, [sp, #240]	; 0xf0
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
 800a4d2:	4b90      	ldr	r3, [pc, #576]	; (800a714 <lv_obj_set_state.part.36+0x598>)
 800a4d4:	1dd1      	adds	r1, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
 800a4d6:	aa3f      	add	r2, sp, #252	; 0xfc
    a->var     = var;
 800a4d8:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
    a->start_cb = start_cb;
 800a4dc:	933d      	str	r3, [sp, #244]	; 0xf4
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 800a4de:	4b8e      	ldr	r3, [pc, #568]	; (800a718 <lv_obj_set_state.part.36+0x59c>)
 800a4e0:	933e      	str	r3, [sp, #248]	; 0xf8
    a->start = start;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9341      	str	r3, [sp, #260]	; 0x104
    a->current = start;
 800a4e6:	9342      	str	r3, [sp, #264]	; 0x108
    a->end   = end;
 800a4e8:	23ff      	movs	r3, #255	; 0xff
 800a4ea:	9343      	str	r3, [sp, #268]	; 0x10c
    a->time     = duration;
 800a4ec:	9b08      	ldr	r3, [sp, #32]
 800a4ee:	9344      	str	r3, [sp, #272]	; 0x110
    a->act_time = -(int32_t)(delay);
 800a4f0:	9b07      	ldr	r3, [sp, #28]
 800a4f2:	425b      	negs	r3, r3
 800a4f4:	9345      	str	r3, [sp, #276]	; 0x114
 800a4f6:	9b06      	ldr	r3, [sp, #24]
 800a4f8:	3b01      	subs	r3, #1
        *d8 = *s8;
 800a4fa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    while(len) {
 800a4fe:	4299      	cmp	r1, r3
        *d8 = *s8;
 800a500:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800a504:	d1f9      	bne.n	800a4fa <lv_obj_set_state.part.36+0x37e>
                    a.early_apply = 0;
 800a506:	f89d 3126 	ldrb.w	r3, [sp, #294]	; 0x126
                    lv_anim_start(&a);
 800a50a:	a83b      	add	r0, sp, #236	; 0xec
                    a.early_apply = 0;
 800a50c:	f36f 0300 	bfc	r3, #0, #1
 800a510:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
                    lv_anim_start(&a);
 800a514:	f008 fd52 	bl	8012fbc <lv_anim_start>
 800a518:	9b04      	ldr	r3, [sp, #16]
 800a51a:	3301      	adds	r3, #1
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 800a51c:	2b06      	cmp	r3, #6
 800a51e:	9304      	str	r3, [sp, #16]
 800a520:	f47f af32 	bne.w	800a388 <lv_obj_set_state.part.36+0x20c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 800a524:	2e02      	cmp	r6, #2
 800a526:	f040 80ea 	bne.w	800a6fe <lv_obj_set_state.part.36+0x582>
 800a52a:	22ff      	movs	r2, #255	; 0xff
 800a52c:	4629      	mov	r1, r5
 800a52e:	4620      	mov	r0, r4
 800a530:	f7fe feee 	bl	8009310 <lv_obj_refresh_style>
 800a534:	e6dc      	b.n	800a2f0 <lv_obj_set_state.part.36+0x174>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 800a536:	2a0b      	cmp	r2, #11
 800a538:	d849      	bhi.n	800a5ce <lv_obj_set_state.part.36+0x452>
        style_list->ignore_cache = 1;
 800a53a:	f043 0309 	orr.w	r3, r3, #9
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 800a53e:	463a      	mov	r2, r7
 800a540:	4629      	mov	r1, r5
 800a542:	4620      	mov	r0, r4
        style_list->ignore_cache = 1;
 800a544:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 800a54e:	f7fe fa77 	bl	8008a40 <_lv_obj_get_style_color>
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800a552:	463a      	mov	r2, r7
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 800a554:	4681      	mov	r9, r0
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800a556:	4629      	mov	r1, r5
        obj->state = new_state;
 800a558:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800a55c:	4620      	mov	r0, r4
 800a55e:	f7fe fa6f 	bl	8008a40 <_lv_obj_get_style_color>
        style_list->skip_trans = 0;
 800a562:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cache_ori;
 800a566:	9902      	ldr	r1, [sp, #8]
        if(c1.full == c2.full) return NULL;
 800a568:	fa1f f989 	uxth.w	r9, r9
        style_list->ignore_cache = cache_ori;
 800a56c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800a570:	4603      	mov	r3, r0
        style_list->ignore_cache = cache_ori;
 800a572:	f361 02c3 	bfi	r2, r1, #3, #1
 800a576:	f888 2005 	strb.w	r2, [r8, #5]
        if(c1.full == c2.full) return NULL;
 800a57a:	b282      	uxth	r2, r0
 800a57c:	9302      	str	r3, [sp, #8]
 800a57e:	4591      	cmp	r9, r2
 800a580:	d0ca      	beq.n	800a518 <lv_obj_set_state.part.36+0x39c>
        obj->state = prev_state;
 800a582:	9b01      	ldr	r3, [sp, #4]
        c1 = _lv_obj_get_style_color(obj, part, prop);
 800a584:	463a      	mov	r2, r7
 800a586:	4629      	mov	r1, r5
 800a588:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a58a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 800a58e:	f7fe fa57 	bl	8008a40 <_lv_obj_get_style_color>
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 800a592:	4639      	mov	r1, r7
 800a594:	4602      	mov	r2, r0
        c1 = _lv_obj_get_style_color(obj, part, prop);
 800a596:	4681      	mov	r9, r0
        obj->state = new_state;
 800a598:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 800a59c:	4650      	mov	r0, sl
 800a59e:	f001 f869 	bl	800b674 <_lv_style_set_color>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a5a2:	4859      	ldr	r0, [pc, #356]	; (800a708 <lv_obj_set_state.part.36+0x58c>)
 800a5a4:	f009 f91f 	bl	80137e6 <_lv_ll_ins_head>
 800a5a8:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 800a5aa:	f009 f825 	bl	80135f8 <lv_debug_check_null>
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	b928      	cbnz	r0, 800a5be <lv_obj_set_state.part.36+0x442>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	4855      	ldr	r0, [pc, #340]	; (800a70c <lv_obj_set_state.part.36+0x590>)
 800a5b8:	f009 f822 	bl	8013600 <lv_debug_log_error>
 800a5bc:	e7fe      	b.n	800a5bc <lv_obj_set_state.part.36+0x440>
        if(tr == NULL) return NULL;
 800a5be:	f1ba 0f00 	cmp.w	sl, #0
 800a5c2:	d0a9      	beq.n	800a518 <lv_obj_set_state.part.36+0x39c>
        tr->start_value._color = c1;
 800a5c4:	f8aa 9008 	strh.w	r9, [sl, #8]
        tr->end_value._color = c2;
 800a5c8:	f8aa 300c 	strh.w	r3, [sl, #12]
 800a5cc:	e775      	b.n	800a4ba <lv_obj_set_state.part.36+0x33e>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 800a5ce:	2a0d      	cmp	r2, #13
 800a5d0:	d846      	bhi.n	800a660 <lv_obj_set_state.part.36+0x4e4>
        style_list->ignore_cache = 1;
 800a5d2:	f043 0309 	orr.w	r3, r3, #9
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a5d6:	463a      	mov	r2, r7
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4620      	mov	r0, r4
        style_list->ignore_cache = 1;
 800a5dc:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a5e6:	f7fe fd03 	bl	8008ff0 <_lv_obj_get_style_opa>
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 800a5ea:	463a      	mov	r2, r7
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a5ec:	9009      	str	r0, [sp, #36]	; 0x24
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 800a5ee:	4629      	mov	r1, r5
        obj->state = new_state;
 800a5f0:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7fe fcfb 	bl	8008ff0 <_lv_obj_get_style_opa>
        style_list->skip_trans = 0;
 800a5fa:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cache_ori;
 800a5fe:	9b02      	ldr	r3, [sp, #8]
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 800a600:	4681      	mov	r9, r0
        style_list->ignore_cache = cache_ori;
 800a602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a606:	f363 02c3 	bfi	r2, r3, #3, #1
 800a60a:	f888 2005 	strb.w	r2, [r8, #5]
        if(o1 == o2) return NULL;
 800a60e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a610:	4283      	cmp	r3, r0
 800a612:	d081      	beq.n	800a518 <lv_obj_set_state.part.36+0x39c>
        obj->state = prev_state;
 800a614:	9b01      	ldr	r3, [sp, #4]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a616:	463a      	mov	r2, r7
 800a618:	4629      	mov	r1, r5
 800a61a:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a61c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a620:	f7fe fce6 	bl	8008ff0 <_lv_obj_get_style_opa>
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 800a624:	4639      	mov	r1, r7
 800a626:	4602      	mov	r2, r0
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800a628:	4680      	mov	r8, r0
        obj->state = new_state;
 800a62a:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 800a62e:	4650      	mov	r0, sl
 800a630:	f001 f86e 	bl	800b710 <_lv_style_set_opa>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a634:	4834      	ldr	r0, [pc, #208]	; (800a708 <lv_obj_set_state.part.36+0x58c>)
 800a636:	f009 f8d6 	bl	80137e6 <_lv_ll_ins_head>
 800a63a:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 800a63c:	f008 ffdc 	bl	80135f8 <lv_debug_check_null>
 800a640:	4603      	mov	r3, r0
 800a642:	b920      	cbnz	r0, 800a64e <lv_obj_set_state.part.36+0x4d2>
 800a644:	4652      	mov	r2, sl
 800a646:	4831      	ldr	r0, [pc, #196]	; (800a70c <lv_obj_set_state.part.36+0x590>)
 800a648:	f008 ffda 	bl	8013600 <lv_debug_log_error>
 800a64c:	e7fe      	b.n	800a64c <lv_obj_set_state.part.36+0x4d0>
        if(tr == NULL) return NULL;
 800a64e:	f1ba 0f00 	cmp.w	sl, #0
 800a652:	f43f af61 	beq.w	800a518 <lv_obj_set_state.part.36+0x39c>
        tr->start_value._opa = o1;
 800a656:	f88a 8008 	strb.w	r8, [sl, #8]
        tr->end_value._opa = o2;
 800a65a:	f88a 900c 	strb.w	r9, [sl, #12]
 800a65e:	e72c      	b.n	800a4ba <lv_obj_set_state.part.36+0x33e>
        obj->state = prev_state;
 800a660:	9b01      	ldr	r3, [sp, #4]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a662:	463a      	mov	r2, r7
 800a664:	4629      	mov	r1, r5
 800a666:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a668:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
 800a66c:	f898 3005 	ldrb.w	r3, [r8, #5]
        style_list->ignore_cache = 1;
 800a670:	f043 0309 	orr.w	r3, r3, #9
 800a674:	f888 3005 	strb.w	r3, [r8, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a678:	f7fe fd20 	bl	80090bc <_lv_obj_get_style_ptr>
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800a67c:	463a      	mov	r2, r7
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a67e:	900b      	str	r0, [sp, #44]	; 0x2c
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800a680:	4629      	mov	r1, r5
        obj->state = new_state;
 800a682:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800a686:	4620      	mov	r0, r4
 800a688:	f7fe fd18 	bl	80090bc <_lv_obj_get_style_ptr>
 800a68c:	a96a      	add	r1, sp, #424	; 0x1a8
        style_list->ignore_cache = cache_ori;
 800a68e:	9a02      	ldr	r2, [sp, #8]
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800a690:	4681      	mov	r9, r0
 800a692:	f841 0dbc 	str.w	r0, [r1, #-188]!
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 800a696:	a80b      	add	r0, sp, #44	; 0x2c
        style_list->skip_trans = 0;
 800a698:	f898 3005 	ldrb.w	r3, [r8, #5]
        style_list->ignore_cache = cache_ori;
 800a69c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6a0:	f362 03c3 	bfi	r3, r2, #3, #1
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 800a6a4:	2204      	movs	r2, #4
        style_list->ignore_cache = cache_ori;
 800a6a6:	f888 3005 	strb.w	r3, [r8, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 800a6aa:	f014 f9bf 	bl	801ea2c <memcmp>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f43f af32 	beq.w	800a518 <lv_obj_set_state.part.36+0x39c>
        obj->state = prev_state;
 800a6b4:	9b01      	ldr	r3, [sp, #4]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4620      	mov	r0, r4
        obj->state = prev_state;
 800a6bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a6c0:	f7fe fcfc 	bl	80090bc <_lv_obj_get_style_ptr>
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4602      	mov	r2, r0
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800a6c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6ca:	4680      	mov	r8, r0
        obj->state = new_state;
 800a6cc:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f001 f86d 	bl	800b7b0 <_lv_style_set_ptr>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a6d6:	480c      	ldr	r0, [pc, #48]	; (800a708 <lv_obj_set_state.part.36+0x58c>)
 800a6d8:	f009 f885 	bl	80137e6 <_lv_ll_ins_head>
 800a6dc:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 800a6de:	f008 ff8b 	bl	80135f8 <lv_debug_check_null>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	b920      	cbnz	r0, 800a6f0 <lv_obj_set_state.part.36+0x574>
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	4808      	ldr	r0, [pc, #32]	; (800a70c <lv_obj_set_state.part.36+0x590>)
 800a6ea:	f008 ff89 	bl	8013600 <lv_debug_log_error>
 800a6ee:	e7fe      	b.n	800a6ee <lv_obj_set_state.part.36+0x572>
        if(tr == NULL) return NULL;
 800a6f0:	f1ba 0f00 	cmp.w	sl, #0
 800a6f4:	f43f af10 	beq.w	800a518 <lv_obj_set_state.part.36+0x39c>
        tr->end_value._ptr = p2;
 800a6f8:	e9ca 8902 	strd	r8, r9, [sl, #8]
 800a6fc:	e6dd      	b.n	800a4ba <lv_obj_set_state.part.36+0x33e>
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7fe fddd 	bl	80092be <invalidate_style_cache.isra.29.part.30>
 800a704:	e5f4      	b.n	800a2f0 <lv_obj_set_state.part.36+0x174>
 800a706:	bf00      	nop
 800a708:	20028ca0 	.word	0x20028ca0
 800a70c:	0802c346 	.word	0x0802c346
 800a710:	080094bb 	.word	0x080094bb
 800a714:	08009185 	.word	0x08009185
 800a718:	08007e29 	.word	0x08007e29

0800a71c <lv_obj_set_state>:
{
 800a71c:	b538      	push	{r3, r4, r5, lr}
    if(obj->state == new_state) return;
 800a71e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800a722:	4604      	mov	r4, r0
 800a724:	460d      	mov	r5, r1
    if(obj->state == new_state) return;
 800a726:	428b      	cmp	r3, r1
 800a728:	d00e      	beq.n	800a748 <lv_obj_set_state+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800a72a:	f008 ff65 	bl	80135f8 <lv_debug_check_null>
 800a72e:	4603      	mov	r3, r0
 800a730:	b920      	cbnz	r0, 800a73c <lv_obj_set_state+0x20>
 800a732:	4622      	mov	r2, r4
 800a734:	4805      	ldr	r0, [pc, #20]	; (800a74c <lv_obj_set_state+0x30>)
 800a736:	f008 ff63 	bl	8013600 <lv_debug_log_error>
 800a73a:	e7fe      	b.n	800a73a <lv_obj_set_state+0x1e>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4620      	mov	r0, r4
}
 800a740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a744:	f7ff bd1a 	b.w	800a17c <lv_obj_set_state.part.36>
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	0802c354 	.word	0x0802c354

0800a750 <lv_obj_add_state>:
{
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4605      	mov	r5, r0
 800a754:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800a756:	f008 ff4f 	bl	80135f8 <lv_debug_check_null>
 800a75a:	b910      	cbnz	r0, 800a762 <lv_obj_add_state+0x12>
 800a75c:	4628      	mov	r0, r5
 800a75e:	f7fd f889 	bl	8007874 <lv_obj_add_state.part.37>
    lv_state_t new_state = obj->state | state;
 800a762:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800a766:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
 800a76a:	428b      	cmp	r3, r1
 800a76c:	d004      	beq.n	800a778 <lv_obj_add_state+0x28>
        lv_obj_set_state(obj, new_state);
 800a76e:	4628      	mov	r0, r5
}
 800a770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_state(obj, new_state);
 800a774:	f7ff bfd2 	b.w	800a71c <lv_obj_set_state>
}
 800a778:	bd38      	pop	{r3, r4, r5, pc}

0800a77a <lv_obj_clear_state>:
{
 800a77a:	b538      	push	{r3, r4, r5, lr}
 800a77c:	4605      	mov	r5, r0
 800a77e:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800a780:	f008 ff3a 	bl	80135f8 <lv_debug_check_null>
 800a784:	b910      	cbnz	r0, 800a78c <lv_obj_clear_state+0x12>
 800a786:	4628      	mov	r0, r5
 800a788:	f7fd f874 	bl	8007874 <lv_obj_add_state.part.37>
    lv_state_t new_state = obj->state & (~state);
 800a78c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800a790:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
 800a794:	428b      	cmp	r3, r1
 800a796:	d004      	beq.n	800a7a2 <lv_obj_clear_state+0x28>
        lv_obj_set_state(obj, new_state);
 800a798:	4628      	mov	r0, r5
}
 800a79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_state(obj, new_state);
 800a79e:	f7ff bfbd 	b.w	800a71c <lv_obj_set_state>
}
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}

0800a7a4 <lv_obj_get_draw_rect_ext_pad_size>:
{
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 800a7a8:	2250      	movs	r2, #80	; 0x50
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	f7fe f97c 	bl	8008aac <_lv_obj_get_style_int>
    if(sh_width) {
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f040 80b6 	bne.w	800a928 <lv_obj_get_draw_rect_ext_pad_size+0x184>
    lv_coord_t s = 0;
 800a7bc:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
 800a7be:	227f      	movs	r2, #127	; 0x7f
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f7fe fc7a 	bl	80090bc <_lv_obj_get_style_ptr>
    if(value_str) {
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d07d      	beq.n	800a8ca <lv_obj_get_draw_rect_ext_pad_size+0x126>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa)
 800a7ce:	227c      	movs	r2, #124	; 0x7c
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7fe fc0c 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
 800a7d8:	2802      	cmp	r0, #2
 800a7da:	d976      	bls.n	800a8ca <lv_obj_get_draw_rect_ext_pad_size+0x126>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 800a7dc:	2270      	movs	r2, #112	; 0x70
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4628      	mov	r0, r5
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 800a7e2:	2700      	movs	r7, #0
 800a7e4:	f7fe f962 	bl	8008aac <_lv_obj_get_style_int>
 800a7e8:	2270      	movs	r2, #112	; 0x70
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f7fe f95c 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800a7f4:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int)
 800a7f6:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f7fe fc5e 	bl	80090bc <_lv_obj_get_style_ptr>
 800a800:	f647 4318 	movw	r3, #31768	; 0x7c18
 800a804:	4602      	mov	r2, r0
 800a806:	4641      	mov	r1, r8
 800a808:	a804      	add	r0, sp, #16
 800a80a:	f8cd a000 	str.w	sl, [sp]
 800a80e:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800a812:	464b      	mov	r3, r9
 800a814:	f00a fc08 	bl	8015028 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
 800a818:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 800a81c:	2275      	movs	r2, #117	; 0x75
 800a81e:	4631      	mov	r1, r6
 800a820:	3b01      	subs	r3, #1
 800a822:	4628      	mov	r0, r5
            value_area.x1 = 0;
 800a824:	9706      	str	r7, [sp, #24]
            value_area.x2 = txt_size.x - 1;
 800a826:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
 800a82a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a82e:	3b01      	subs	r3, #1
 800a830:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a834:	f7fe f93a 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 800a838:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int)
 800a83a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	f7fe f934 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 800a844:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int)
 800a846:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int)
 800a848:	4631      	mov	r1, r6
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7fe f92e 	bl	8008aac <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 800a850:	ab05      	add	r3, sp, #20
 800a852:	4607      	mov	r7, r0
 800a854:	fa5f f289 	uxtb.w	r2, r9
 800a858:	a906      	add	r1, sp, #24
 800a85a:	f105 0010 	add.w	r0, r5, #16
 800a85e:	f008 fd8d 	bl	801337c <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
 800a862:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a866:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800a86a:	4443      	add	r3, r8
            value_area.y1 += p_align.y + yofs;
 800a86c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800a870:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
            value_area.x1 += p_align.x + xofs;
 800a874:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
 800a876:	443a      	add	r2, r7
            value_area.x1 += p_align.x + xofs;
 800a878:	4418      	add	r0, r3
            value_area.y1 += p_align.y + yofs;
 800a87a:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800a87c:	b200      	sxth	r0, r0
 800a87e:	1a09      	subs	r1, r1, r0
            value_area.y1 += p_align.y + yofs;
 800a880:	f8bd 001a 	ldrh.w	r0, [sp, #26]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800a884:	428c      	cmp	r4, r1
            value_area.y1 += p_align.y + yofs;
 800a886:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800a888:	bfb8      	it	lt
 800a88a:	460c      	movlt	r4, r1
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 800a88c:	b200      	sxth	r0, r0
 800a88e:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 800a892:	b224      	sxth	r4, r4
 800a894:	1a09      	subs	r1, r1, r0
 800a896:	42a1      	cmp	r1, r4
 800a898:	bfb8      	it	lt
 800a89a:	4621      	movlt	r1, r4
            value_area.x2 += p_align.x + xofs;
 800a89c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800a8a0:	4423      	add	r3, r4
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 800a8a2:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
 800a8a6:	b21b      	sxth	r3, r3
 800a8a8:	1b1c      	subs	r4, r3, r4
 800a8aa:	b20b      	sxth	r3, r1
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	bfb8      	it	lt
 800a8b0:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
 800a8b2:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 800a8b6:	4422      	add	r2, r4
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 800a8b8:	b214      	sxth	r4, r2
 800a8ba:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 800a8be:	1aa2      	subs	r2, r4, r2
 800a8c0:	b21c      	sxth	r4, r3
 800a8c2:	4294      	cmp	r4, r2
 800a8c4:	bfb8      	it	lt
 800a8c6:	4614      	movlt	r4, r2
 800a8c8:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 800a8ca:	2240      	movs	r2, #64	; 0x40
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f7fe f8ec 	bl	8008aac <_lv_obj_get_style_int>
    if(outline_width) {
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	b180      	cbz	r0, 800a8fa <lv_obj_get_draw_rect_ext_pad_size+0x156>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 800a8d8:	224c      	movs	r2, #76	; 0x4c
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7fe fb87 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
 800a8e2:	2802      	cmp	r0, #2
 800a8e4:	d909      	bls.n	800a8fa <lv_obj_get_draw_rect_ext_pad_size+0x156>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 800a8e6:	2241      	movs	r2, #65	; 0x41
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f7fe f8de 	bl	8008aac <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 800a8f0:	4438      	add	r0, r7
 800a8f2:	4284      	cmp	r4, r0
 800a8f4:	bfb8      	it	lt
 800a8f6:	4604      	movlt	r4, r0
 800a8f8:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	2204      	movs	r2, #4
 800a8fe:	4628      	mov	r0, r5
 800a900:	f7fe f8d4 	bl	8008aac <_lv_obj_get_style_int>
 800a904:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 800a906:	2205      	movs	r2, #5
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	f7fe f8ce 	bl	8008aac <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
 800a910:	42b8      	cmp	r0, r7
 800a912:	bfb8      	it	lt
 800a914:	4638      	movlt	r0, r7
 800a916:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
 800a918:	2800      	cmp	r0, #0
 800a91a:	bfc4      	itt	gt
 800a91c:	1824      	addgt	r4, r4, r0
 800a91e:	b224      	sxthgt	r4, r4
}
 800a920:	4620      	mov	r0, r4
 800a922:	b008      	add	sp, #32
 800a924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa)
 800a928:	225c      	movs	r2, #92	; 0x5c
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7fe fb5f 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
 800a932:	2802      	cmp	r0, #2
 800a934:	f67f af42 	bls.w	800a7bc <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int)
 800a938:	2253      	movs	r2, #83	; 0x53
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7fe f8b5 	bl	8008aac <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 800a942:	2302      	movs	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int)
 800a944:	2251      	movs	r2, #81	; 0x51
 800a946:	4631      	mov	r1, r6
 800a948:	fb94 f4f3 	sdiv	r4, r4, r3
            sh_width++;
 800a94c:	3401      	adds	r4, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800a94e:	4404      	add	r4, r0
 800a950:	4628      	mov	r0, r5
 800a952:	f7fe f8ab 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int)
 800a956:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int)
 800a958:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int)
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	b2a4      	uxth	r4, r4
 800a960:	f7fe f8a4 	bl	8008aac <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 800a964:	2800      	cmp	r0, #0
 800a966:	bfb8      	it	lt
 800a968:	4240      	neglt	r0, r0
 800a96a:	2f00      	cmp	r7, #0
 800a96c:	bfb8      	it	lt
 800a96e:	427f      	neglt	r7, r7
 800a970:	42b8      	cmp	r0, r7
 800a972:	bfac      	ite	ge
 800a974:	1824      	addge	r4, r4, r0
 800a976:	19e4      	addlt	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
 800a978:	b224      	sxth	r4, r4
 800a97a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a97e:	e71e      	b.n	800a7be <lv_obj_get_draw_rect_ext_pad_size+0x1a>

0800a980 <lv_obj_get_focused_obj>:
{
 800a980:	b508      	push	{r3, lr}
    if(obj == NULL) return NULL;
 800a982:	b910      	cbnz	r0, 800a98a <lv_obj_get_focused_obj+0xa>
}
 800a984:	bd08      	pop	{r3, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
 800a986:	f7fd f901 	bl	8007b8c <lv_obj_get_parent>
    return obj->focus_parent == 0 ? false : true;
 800a98a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800a98e:	079b      	lsls	r3, r3, #30
 800a990:	d4f9      	bmi.n	800a986 <lv_obj_get_focused_obj+0x6>
 800a992:	e7f7      	b.n	800a984 <lv_obj_get_focused_obj+0x4>

0800a994 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 800a994:	2908      	cmp	r1, #8
{
 800a996:	b510      	push	{r4, lr}
 800a998:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
 800a99a:	d108      	bne.n	800a9ae <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 800a99c:	7813      	ldrb	r3, [r2, #0]
 800a99e:	b91b      	cbnz	r3, 800a9a8 <lv_obj_signal+0x14>
 800a9a0:	3428      	adds	r4, #40	; 0x28
 800a9a2:	6054      	str	r4, [r2, #4]
    else if(sign == LV_SIGNAL_CLEANUP) {
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	e011      	b.n	800a9cc <lv_obj_signal+0x38>
        else info->result = NULL;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6053      	str	r3, [r2, #4]
 800a9ac:	e7fa      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800a9ae:	2907      	cmp	r1, #7
 800a9b0:	d105      	bne.n	800a9be <lv_obj_signal+0x2a>
 800a9b2:	492b      	ldr	r1, [pc, #172]	; (800aa60 <lv_obj_signal+0xcc>)
 800a9b4:	4610      	mov	r0, r2
}
 800a9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800a9ba:	f7fe bf29 	b.w	8009810 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 800a9be:	2901      	cmp	r1, #1
 800a9c0:	d105      	bne.n	800a9ce <lv_obj_signal+0x3a>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800a9c2:	f7fe f80b 	bl	80089dc <lv_obj_is_protected>
 800a9c6:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
 800a9ca:	b2c0      	uxtb	r0, r0
}
 800a9cc:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800a9ce:	2906      	cmp	r1, #6
 800a9d0:	d109      	bne.n	800a9e6 <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	f7ff fee6 	bl	800a7a4 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 800a9d8:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 800a9dc:	4298      	cmp	r0, r3
 800a9de:	bfb8      	it	lt
 800a9e0:	4618      	movlt	r0, r3
 800a9e2:	8660      	strh	r0, [r4, #50]	; 0x32
 800a9e4:	e7de      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 800a9e6:	2903      	cmp	r1, #3
 800a9e8:	d106      	bne.n	800a9f8 <lv_obj_signal+0x64>
        if(obj->realign.auto_realign) {
 800a9ea:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d5d8      	bpl.n	800a9a4 <lv_obj_signal+0x10>
            lv_obj_realign(obj);
 800a9f2:	f7fd fd09 	bl	8008408 <lv_obj_realign>
 800a9f6:	e7d5      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 800a9f8:	2904      	cmp	r1, #4
 800a9fa:	d102      	bne.n	800aa02 <lv_obj_signal+0x6e>
        lv_obj_refresh_ext_draw_pad(obj);
 800a9fc:	f7fd f8b6 	bl	8007b6c <lv_obj_refresh_ext_draw_pad>
 800aa00:	e7d0      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
 800aa02:	290b      	cmp	r1, #11
 800aa04:	d103      	bne.n	800aa0e <lv_obj_signal+0x7a>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 800aa06:	2110      	movs	r1, #16
            lv_obj_add_state(obj, state);
 800aa08:	f7ff fea2 	bl	800a750 <lv_obj_add_state>
 800aa0c:	e7ca      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800aa0e:	f1a1 020d 	sub.w	r2, r1, #13
 800aa12:	2a01      	cmp	r2, #1
 800aa14:	d803      	bhi.n	800aa1e <lv_obj_signal+0x8a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800aa16:	2110      	movs	r1, #16
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800aa18:	f7ff feaf 	bl	800a77a <lv_obj_clear_state>
 800aa1c:	e7c2      	b.n	800a9a4 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
 800aa1e:	2916      	cmp	r1, #22
 800aa20:	d113      	bne.n	800aa4a <lv_obj_signal+0xb6>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 800aa22:	f7fe fdfb 	bl	800961c <lv_obj_get_group>
 800aa26:	f7fb fcfd 	bl	8006424 <lv_group_get_editing>
        if(editing) {
 800aa2a:	b120      	cbz	r0, 800aa36 <lv_obj_signal+0xa2>
            obj = lv_obj_get_focused_obj(obj);
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff ffa7 	bl	800a980 <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, state);
 800aa32:	2106      	movs	r1, #6
 800aa34:	e7e8      	b.n	800aa08 <lv_obj_signal+0x74>
            obj = lv_obj_get_focused_obj(obj);
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff ffa2 	bl	800a980 <lv_obj_get_focused_obj>
 800aa3c:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 800aa3e:	2102      	movs	r1, #2
 800aa40:	f7ff fe86 	bl	800a750 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800aa44:	2104      	movs	r1, #4
 800aa46:	4620      	mov	r0, r4
 800aa48:	e7e6      	b.n	800aa18 <lv_obj_signal+0x84>
    else if(sign == LV_SIGNAL_DEFOCUS) {
 800aa4a:	2917      	cmp	r1, #23
 800aa4c:	d103      	bne.n	800aa56 <lv_obj_signal+0xc2>
        obj = lv_obj_get_focused_obj(obj);
 800aa4e:	f7ff ff97 	bl	800a980 <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 800aa52:	2106      	movs	r1, #6
 800aa54:	e7e0      	b.n	800aa18 <lv_obj_signal+0x84>
    else if(sign == LV_SIGNAL_CLEANUP) {
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d1a4      	bne.n	800a9a4 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 800aa5a:	f7fd f9b3 	bl	8007dc4 <lv_obj_clean_style_list>
 800aa5e:	e7a1      	b.n	800a9a4 <lv_obj_signal+0x10>
 800aa60:	0802c361 	.word	0x0802c361

0800aa64 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800aa64:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800aa66:	4d19      	ldr	r5, [pc, #100]	; (800aacc <lv_refr_vdb_flush+0x68>)
 800aa68:	6828      	ldr	r0, [r5, #0]
 800aa6a:	f008 f837 	bl	8012adc <lv_disp_get_buf>
 800aa6e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800aa70:	6828      	ldr	r0, [r5, #0]
 800aa72:	f008 f848 	bl	8012b06 <lv_disp_is_double_buf>
 800aa76:	b958      	cbnz	r0, 800aa90 <lv_refr_vdb_flush+0x2c>
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800aa78:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
 800aa7a:	2301      	movs	r3, #1
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800aa7c:	686a      	ldr	r2, [r5, #4]
    vdb->flushing = 1;
 800aa7e:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800aa80:	6a11      	ldr	r1, [r2, #32]
 800aa82:	07c9      	lsls	r1, r1, #31
 800aa84:	d409      	bmi.n	800aa9a <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e00a      	b.n	800aaa0 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800aa8a:	69c3      	ldr	r3, [r0, #28]
 800aa8c:	b10b      	cbz	r3, 800aa92 <lv_refr_vdb_flush+0x2e>
 800aa8e:	4798      	blx	r3
 800aa90:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
 800aa92:	69a3      	ldr	r3, [r4, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f8      	bne.n	800aa8a <lv_refr_vdb_flush+0x26>
 800aa98:	e7ee      	b.n	800aa78 <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800aa9a:	6a12      	ldr	r2, [r2, #32]
 800aa9c:	0792      	lsls	r2, r2, #30
 800aa9e:	d5f2      	bpl.n	800aa86 <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
 800aaa0:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800aaa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aaa4:	b10b      	cbz	r3, 800aaaa <lv_refr_vdb_flush+0x46>
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800aaaa:	68eb      	ldr	r3, [r5, #12]
 800aaac:	b123      	cbz	r3, 800aab8 <lv_refr_vdb_flush+0x54>
 800aaae:	68a2      	ldr	r2, [r4, #8]
 800aab0:	f104 0110 	add.w	r1, r4, #16
 800aab4:	4628      	mov	r0, r5
 800aab6:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	b133      	cbz	r3, 800aaca <lv_refr_vdb_flush+0x66>
 800aabc:	6862      	ldr	r2, [r4, #4]
 800aabe:	b122      	cbz	r2, 800aaca <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
 800aac0:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 800aac2:	428b      	cmp	r3, r1
 800aac4:	bf08      	it	eq
 800aac6:	4613      	moveq	r3, r2
 800aac8:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	200206f0 	.word	0x200206f0

0800aad0 <lv_refr_obj>:
{
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 800aad2:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
{
 800aad6:	b08b      	sub	sp, #44	; 0x2c
 800aad8:	4604      	mov	r4, r0
 800aada:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 800aadc:	f016 0610 	ands.w	r6, r6, #16
 800aae0:	d13b      	bne.n	800ab5a <lv_refr_obj+0x8a>
    lv_coord_t ext_size = obj->ext_draw_pad;
 800aae2:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800aae6:	a904      	add	r1, sp, #16
 800aae8:	f7fd f8aa 	bl	8007c40 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800aaec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800aaf0:	b2ab      	uxth	r3, r5
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	a802      	add	r0, sp, #8
    obj_area.x1 -= ext_size;
 800aaf6:	1ad2      	subs	r2, r2, r3
 800aaf8:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 800aafc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ab00:	1ad2      	subs	r2, r2, r3
 800ab02:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 800ab06:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ab0a:	441a      	add	r2, r3
 800ab0c:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 800ab10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ab14:	4413      	add	r3, r2
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800ab16:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 800ab18:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800ab1c:	f008 fae9 	bl	80130f2 <_lv_area_intersect>
    if(union_ok != false) {
 800ab20:	b1d8      	cbz	r0, 800ab5a <lv_refr_obj+0x8a>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800ab22:	6a23      	ldr	r3, [r4, #32]
 800ab24:	b11b      	cbz	r3, 800ab2e <lv_refr_obj+0x5e>
 800ab26:	4632      	mov	r2, r6
 800ab28:	a902      	add	r1, sp, #8
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7fd f885 	bl	8007c40 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800ab36:	aa04      	add	r2, sp, #16
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4668      	mov	r0, sp
 800ab3c:	f008 fad9 	bl	80130f2 <_lv_area_intersect>
        if(union_ok != false) {
 800ab40:	b128      	cbz	r0, 800ab4e <lv_refr_obj+0x7e>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800ab42:	1d26      	adds	r6, r4, #4
 800ab44:	4630      	mov	r0, r6
 800ab46:	f008 fe88 	bl	801385a <_lv_ll_get_tail>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	b938      	cbnz	r0, 800ab5e <lv_refr_obj+0x8e>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800ab4e:	6a23      	ldr	r3, [r4, #32]
 800ab50:	b11b      	cbz	r3, 800ab5a <lv_refr_obj+0x8a>
 800ab52:	2201      	movs	r2, #1
 800ab54:	a902      	add	r1, sp, #8
 800ab56:	4620      	mov	r0, r4
 800ab58:	4798      	blx	r3
}
 800ab5a:	b00b      	add	sp, #44	; 0x2c
 800ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800ab5e:	a908      	add	r1, sp, #32
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7fd f86d 	bl	8007c40 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 800ab66:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800ab68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800ab6c:	4669      	mov	r1, sp
 800ab6e:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 800ab70:	1ad2      	subs	r2, r2, r3
 800ab72:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 800ab76:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 800ab80:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ab84:	441a      	add	r2, r3
 800ab86:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 800ab8a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800ab8e:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800ab90:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800ab92:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800ab96:	f008 faac 	bl	80130f2 <_lv_area_intersect>
                if(union_ok) {
 800ab9a:	b118      	cbz	r0, 800aba4 <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
 800ab9c:	a906      	add	r1, sp, #24
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f7ff ff96 	bl	800aad0 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800aba4:	4629      	mov	r1, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	f008 fe5f 	bl	801386a <_lv_ll_get_prev>
 800abac:	e7cd      	b.n	800ab4a <lv_refr_obj+0x7a>
	...

0800abb0 <lv_refr_obj_and_children>:
{
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800abb4:	4605      	mov	r5, r0
 800abb6:	b928      	cbnz	r0, 800abc4 <lv_refr_obj_and_children+0x14>
 800abb8:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <lv_refr_obj_and_children+0x58>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	f7fb fa5c 	bl	8006078 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800abc0:	4605      	mov	r5, r0
 800abc2:	b140      	cbz	r0, 800abd6 <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
 800abc4:	4628      	mov	r0, r5
 800abc6:	4631      	mov	r1, r6
 800abc8:	f7ff ff82 	bl	800aad0 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 800abcc:	4628      	mov	r0, r5
 800abce:	f7fc ffdd 	bl	8007b8c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 800abd2:	4604      	mov	r4, r0
    while(par != NULL) {
 800abd4:	b900      	cbnz	r0, 800abd8 <lv_refr_obj_and_children+0x28>
}
 800abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 800abd8:	1d27      	adds	r7, r4, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
 800abda:	4629      	mov	r1, r5
 800abdc:	4638      	mov	r0, r7
 800abde:	f008 fe44 	bl	801386a <_lv_ll_get_prev>
 800abe2:	4605      	mov	r5, r0
        while(i != NULL) {
 800abe4:	b950      	cbnz	r0, 800abfc <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800abe6:	6a23      	ldr	r3, [r4, #32]
 800abe8:	b11b      	cbz	r3, 800abf2 <lv_refr_obj_and_children+0x42>
 800abea:	2201      	movs	r2, #1
 800abec:	4631      	mov	r1, r6
 800abee:	4620      	mov	r0, r4
 800abf0:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 800abf2:	4620      	mov	r0, r4
 800abf4:	4625      	mov	r5, r4
 800abf6:	f7fc ffc9 	bl	8007b8c <lv_obj_get_parent>
 800abfa:	e7ea      	b.n	800abd2 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	f7ff ff66 	bl	800aad0 <lv_refr_obj>
 800ac04:	e7e9      	b.n	800abda <lv_refr_obj_and_children+0x2a>
 800ac06:	bf00      	nop
 800ac08:	200206f0 	.word	0x200206f0

0800ac0c <lv_refr_get_top_obj>:
{
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac10:	2200      	movs	r2, #0
{
 800ac12:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac14:	3110      	adds	r1, #16
{
 800ac16:	4680      	mov	r8, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac18:	f008 fb67 	bl	80132ea <_lv_area_is_in>
 800ac1c:	b910      	cbnz	r0, 800ac24 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
 800ac1e:	2000      	movs	r0, #0
}
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac24:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800ac28:	f011 0610 	ands.w	r6, r1, #16
 800ac2c:	d1f7      	bne.n	800ac1e <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800ac2e:	6a23      	ldr	r3, [r4, #32]
 800ac30:	2202      	movs	r2, #2
 800ac32:	4641      	mov	r1, r8
 800ac34:	4620      	mov	r0, r4
 800ac36:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800ac38:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800ac3a:	4605      	mov	r5, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800ac3c:	d0ef      	beq.n	800ac1e <lv_refr_get_top_obj+0x12>
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 800ac3e:	2801      	cmp	r0, #1
 800ac40:	d108      	bne.n	800ac54 <lv_refr_get_top_obj+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
 800ac42:	f248 020c 	movw	r2, #32780	; 0x800c
 800ac46:	4631      	mov	r1, r6
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7fe f9d1 	bl	8008ff0 <_lv_obj_get_style_opa>
            design_res = LV_DESIGN_RES_NOT_COVER;
 800ac4e:	28ff      	cmp	r0, #255	; 0xff
 800ac50:	bf18      	it	ne
 800ac52:	2502      	movne	r5, #2
        _LV_LL_READ(obj->child_ll, i) {
 800ac54:	1d27      	adds	r7, r4, #4
 800ac56:	4638      	mov	r0, r7
 800ac58:	f008 fdfc 	bl	8013854 <_lv_ll_get_head>
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	b918      	cbnz	r0, 800ac68 <lv_refr_get_top_obj+0x5c>
            if(design_res == LV_DESIGN_RES_COVER) {
 800ac60:	2d01      	cmp	r5, #1
 800ac62:	d1dc      	bne.n	800ac1e <lv_refr_get_top_obj+0x12>
 800ac64:	4620      	mov	r0, r4
 800ac66:	e7db      	b.n	800ac20 <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
 800ac68:	4631      	mov	r1, r6
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	f7ff ffce 	bl	800ac0c <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d1d5      	bne.n	800ac20 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
 800ac74:	4631      	mov	r1, r6
 800ac76:	4638      	mov	r0, r7
 800ac78:	f008 fdf2 	bl	8013860 <_lv_ll_get_next>
 800ac7c:	e7ee      	b.n	800ac5c <lv_refr_get_top_obj+0x50>
	...

0800ac80 <lv_refr_area_part>:
{
 800ac80:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800ac82:	4c45      	ldr	r4, [pc, #276]	; (800ad98 <lv_refr_area_part+0x118>)
{
 800ac84:	b09c      	sub	sp, #112	; 0x70
 800ac86:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	f007 ff27 	bl	8012adc <lv_disp_get_buf>
 800ac8e:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800ac90:	6820      	ldr	r0, [r4, #0]
 800ac92:	f007 ff38 	bl	8012b06 <lv_disp_is_double_buf>
 800ac96:	b1b0      	cbz	r0, 800acc6 <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 800ac98:	4631      	mov	r1, r6
 800ac9a:	f105 0210 	add.w	r2, r5, #16
 800ac9e:	a803      	add	r0, sp, #12
 800aca0:	f008 fa27 	bl	80130f2 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	f7fb f9e7 	bl	8006078 <lv_disp_get_scr_act>
 800acaa:	4601      	mov	r1, r0
 800acac:	a803      	add	r0, sp, #12
 800acae:	f7ff ffad 	bl	800ac0c <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 800acb2:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800acb4:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 800acb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800acb8:	b951      	cbnz	r1, 800acd0 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800acba:	2800      	cmp	r0, #0
 800acbc:	d135      	bne.n	800ad2a <lv_refr_area_part+0xaa>
 800acbe:	e00c      	b.n	800acda <lv_refr_area_part+0x5a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800acc0:	69c3      	ldr	r3, [r0, #28]
 800acc2:	b10b      	cbz	r3, 800acc8 <lv_refr_area_part+0x48>
 800acc4:	4798      	blx	r3
 800acc6:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
 800acc8:	69ab      	ldr	r3, [r5, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f8      	bne.n	800acc0 <lv_refr_area_part+0x40>
 800acce:	e7e3      	b.n	800ac98 <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 800acd0:	a803      	add	r0, sp, #12
 800acd2:	f7ff ff9b 	bl	800ac0c <lv_refr_get_top_obj>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800acd6:	bb4e      	cbnz	r6, 800ad2c <lv_refr_area_part+0xac>
 800acd8:	bb40      	cbnz	r0, 800ad2c <lv_refr_area_part+0xac>
        if(disp_refr->bg_img) {
 800acda:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
 800acdc:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
 800acde:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	d047      	beq.n	800ad74 <lv_refr_area_part+0xf4>
            lv_draw_img_dsc_init(&dsc);
 800ace4:	f002 f9a6 	bl	800d034 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 800ace8:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800acea:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 800acec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800acf0:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800acf4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800acf6:	f007 fa6d 	bl	80121d4 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800acfa:	2801      	cmp	r0, #1
 800acfc:	d115      	bne.n	800ad2a <lv_refr_area_part+0xaa>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 800acfe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800ad02:	a805      	add	r0, sp, #20
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800ad0a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ad0e:	3a01      	subs	r2, #1
 800ad10:	3b01      	subs	r3, #1
 800ad12:	9200      	str	r2, [sp, #0]
 800ad14:	2200      	movs	r2, #0
 800ad16:	4611      	mov	r1, r2
 800ad18:	f008 f9d1 	bl	80130be <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 800ad1c:	6822      	ldr	r2, [r4, #0]
 800ad1e:	ab07      	add	r3, sp, #28
 800ad20:	a903      	add	r1, sp, #12
 800ad22:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ad24:	a805      	add	r0, sp, #20
 800ad26:	f002 f9bf 	bl	800d0a8 <lv_draw_img>
 800ad2a:	2000      	movs	r0, #0
    if(disp_refr->prev_scr) {
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	b12b      	cbz	r3, 800ad3e <lv_refr_area_part+0xbe>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800ad32:	a903      	add	r1, sp, #12
 800ad34:	2800      	cmp	r0, #0
 800ad36:	bf08      	it	eq
 800ad38:	4618      	moveq	r0, r3
 800ad3a:	f7ff ff39 	bl	800abb0 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 800ad3e:	b90e      	cbnz	r6, 800ad44 <lv_refr_area_part+0xc4>
        top_act_scr = disp_refr->act_scr;
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 800ad44:	a903      	add	r1, sp, #12
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7ff ff32 	bl	800abb0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	f7fb f9a1 	bl	8006094 <lv_disp_get_layer_top>
 800ad52:	a903      	add	r1, sp, #12
 800ad54:	f7ff ff2c 	bl	800abb0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	f7fb f9a2 	bl	80060a2 <lv_disp_get_layer_sys>
 800ad5e:	a903      	add	r1, sp, #12
 800ad60:	f7ff ff26 	bl	800abb0 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800ad64:	6820      	ldr	r0, [r4, #0]
 800ad66:	f007 fed6 	bl	8012b16 <lv_disp_is_true_double_buf>
 800ad6a:	b908      	cbnz	r0, 800ad70 <lv_refr_area_part+0xf0>
        lv_refr_vdb_flush();
 800ad6c:	f7ff fe7a 	bl	800aa64 <lv_refr_vdb_flush>
}
 800ad70:	b01c      	add	sp, #112	; 0x70
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
            lv_draw_rect_dsc_init(&dsc);
 800ad74:	f004 fd98 	bl	800f8a8 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ad78:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ad7a:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 800ad7c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ad80:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 800ad82:	f8ad 201e 	strh.w	r2, [sp, #30]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ad86:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
 800ad88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ad8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ad90:	f004 fdae 	bl	800f8f0 <lv_draw_rect>
 800ad94:	4628      	mov	r0, r5
 800ad96:	e7c9      	b.n	800ad2c <lv_refr_area_part+0xac>
 800ad98:	200206f0 	.word	0x200206f0

0800ad9c <lv_area_copy>:
{
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 800ada2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ada6:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800adaa:	4298      	cmp	r0, r3
 800adac:	d1f9      	bne.n	800ada2 <lv_area_copy+0x6>
}
 800adae:	4770      	bx	lr

0800adb0 <_lv_refr_init>:
}
 800adb0:	4770      	bx	lr

0800adb2 <_lv_inv_area>:
{
 800adb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb4:	460d      	mov	r5, r1
 800adb6:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 800adb8:	4604      	mov	r4, r0
 800adba:	b918      	cbnz	r0, 800adc4 <_lv_inv_area+0x12>
 800adbc:	f007 fe24 	bl	8012a08 <lv_disp_get_default>
    if(!disp) return;
 800adc0:	4604      	mov	r4, r0
 800adc2:	b130      	cbz	r0, 800add2 <_lv_inv_area+0x20>
    if(area_p == NULL) {
 800adc4:	b93d      	cbnz	r5, 800add6 <_lv_inv_area+0x24>
        disp->inv_p = 0;
 800adc6:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
 800adca:	f365 0309 	bfi	r3, r5, #0, #10
 800adce:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
}
 800add2:	b005      	add	sp, #20
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
 800add6:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800add8:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 800adda:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800addc:	f007 fe1a 	bl	8012a14 <lv_disp_get_hor_res>
 800ade0:	3801      	subs	r0, #1
 800ade2:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800ade6:	4620      	mov	r0, r4
 800ade8:	f007 fe26 	bl	8012a38 <lv_disp_get_ver_res>
 800adec:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800adee:	466a      	mov	r2, sp
 800adf0:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800adf2:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800adf6:	a802      	add	r0, sp, #8
 800adf8:	f008 f97b 	bl	80130f2 <_lv_area_intersect>
    if(suc != false) {
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d0e8      	beq.n	800add2 <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	b113      	cbz	r3, 800ae0a <_lv_inv_area+0x58>
 800ae04:	a902      	add	r1, sp, #8
 800ae06:	4620      	mov	r0, r4
 800ae08:	4798      	blx	r3
 800ae0a:	f104 055a 	add.w	r5, r4, #90	; 0x5a
{
 800ae0e:	2600      	movs	r6, #0
 800ae10:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
 800ae12:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
 800ae16:	b2b2      	uxth	r2, r6
 800ae18:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800ae1c:	4290      	cmp	r0, r2
 800ae1e:	d81a      	bhi.n	800ae56 <_lv_inv_area+0xa4>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800ae20:	281f      	cmp	r0, #31
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800ae22:	bf95      	itete	ls
 800ae24:	eb04 00c0 	addls.w	r0, r4, r0, lsl #3
            disp->inv_p = 0;
 800ae28:	f36f 0309 	bfchi	r3, #0, #10
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800ae2c:	a902      	addls	r1, sp, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800ae2e:	4669      	movhi	r1, sp
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800ae30:	bf92      	itee	ls
 800ae32:	305a      	addls	r0, #90	; 0x5a
            disp->inv_p = 0;
 800ae34:	f8a4 317a 	strhhi.w	r3, [r4, #378]	; 0x17a
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800ae38:	4638      	movhi	r0, r7
 800ae3a:	f7ff ffaf 	bl	800ad9c <lv_area_copy>
        disp->inv_p++;
 800ae3e:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 800ae42:	2103      	movs	r1, #3
 800ae44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        disp->inv_p++;
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	f362 0309 	bfi	r3, r2, #0, #10
 800ae4c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 800ae50:	f009 fe10 	bl	8014a74 <lv_task_set_prio>
 800ae54:	e7bd      	b.n	800add2 <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800ae56:	4629      	mov	r1, r5
 800ae58:	2200      	movs	r2, #0
 800ae5a:	a802      	add	r0, sp, #8
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	f008 fa44 	bl	80132ea <_lv_area_is_in>
 800ae62:	3508      	adds	r5, #8
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d0d4      	beq.n	800ae12 <_lv_inv_area+0x60>
 800ae68:	e7b3      	b.n	800add2 <_lv_inv_area+0x20>
	...

0800ae6c <_lv_refr_get_disp_refreshing>:
}
 800ae6c:	4b01      	ldr	r3, [pc, #4]	; (800ae74 <_lv_refr_get_disp_refreshing+0x8>)
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	200206f0 	.word	0x200206f0

0800ae78 <_lv_disp_refr_task>:
{
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	b08b      	sub	sp, #44	; 0x2c
    uint32_t start = lv_tick_get();
 800ae80:	f007 ff5c 	bl	8012d3c <lv_tick_get>
    disp_refr = task->user_data;
 800ae84:	4c96      	ldr	r4, [pc, #600]	; (800b0e0 <_lv_disp_refr_task+0x268>)
 800ae86:	68eb      	ldr	r3, [r5, #12]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800ae88:	2100      	movs	r1, #0
    uint32_t start = lv_tick_get();
 800ae8a:	9004      	str	r0, [sp, #16]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800ae8c:	4628      	mov	r0, r5
    disp_refr = task->user_data;
 800ae8e:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800ae90:	f009 fdf0 	bl	8014a74 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	f040 80b6 	bne.w	800b00a <_lv_disp_refr_task+0x192>
        disp_refr->inv_p = 0;
 800ae9e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
 800aea2:	f361 0209 	bfi	r2, r1, #0, #10
 800aea6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
}
 800aeaa:	b00b      	add	sp, #44	; 0x2c
 800aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800aeb0:	4433      	add	r3, r6
 800aeb2:	f893 515a 	ldrb.w	r5, [r3, #346]	; 0x15a
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	d06b      	beq.n	800af92 <_lv_disp_refr_task+0x11a>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800aeba:	3601      	adds	r6, #1
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
 800aec2:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800aec6:	428e      	cmp	r6, r1
 800aec8:	d3f2      	bcc.n	800aeb0 <_lv_disp_refr_task+0x38>
    px_num = 0;
 800aeca:	2000      	movs	r0, #0
 800aecc:	6060      	str	r0, [r4, #4]
    if(disp_refr->inv_p == 0) return;
 800aece:	2900      	cmp	r1, #0
 800aed0:	f040 809f 	bne.w	800b012 <_lv_disp_refr_task+0x19a>
    if(disp_refr->inv_p != 0) {
 800aed4:	4e82      	ldr	r6, [pc, #520]	; (800b0e0 <_lv_disp_refr_task+0x268>)
 800aed6:	6830      	ldr	r0, [r6, #0]
 800aed8:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
 800aedc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d051      	beq.n	800af88 <_lv_disp_refr_task+0x110>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800aee4:	f007 fe17 	bl	8012b16 <lv_disp_is_true_double_buf>
 800aee8:	b390      	cbz	r0, 800af50 <_lv_disp_refr_task+0xd8>
            if(disp_refr->driver.set_px_cb) {
 800aeea:	6830      	ldr	r0, [r6, #0]
 800aeec:	6943      	ldr	r3, [r0, #20]
 800aeee:	bb7b      	cbnz	r3, 800af50 <_lv_disp_refr_task+0xd8>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800aef0:	f007 fdf4 	bl	8012adc <lv_disp_get_buf>
 800aef4:	4605      	mov	r5, r0
                lv_refr_vdb_flush();
 800aef6:	f7ff fdb5 	bl	800aa64 <lv_refr_vdb_flush>
                while(vdb->flushing);
 800aefa:	69ab      	ldr	r3, [r5, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1fc      	bne.n	800aefa <_lv_disp_refr_task+0x82>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800af00:	6823      	ldr	r3, [r4, #0]
                for(a = 0; a < disp_refr->inv_p; a++) {
 800af02:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800b0e0 <_lv_disp_refr_task+0x268>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800af06:	f9b3 0000 	ldrsh.w	r0, [r3]
 800af0a:	0040      	lsls	r0, r0, #1
 800af0c:	f009 f812 	bl	8013f34 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800af10:	68ab      	ldr	r3, [r5, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800af12:	f8d5 9000 	ldr.w	r9, [r5]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800af16:	4680      	mov	r8, r0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800af18:	6830      	ldr	r0, [r6, #0]
                for(a = 0; a < disp_refr->inv_p; a++) {
 800af1a:	2600      	movs	r6, #0
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800af1c:	4599      	cmp	r9, r3
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800af1e:	9302      	str	r3, [sp, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800af20:	bf08      	it	eq
 800af22:	f8d5 9004 	ldreq.w	r9, [r5, #4]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800af26:	f007 fd75 	bl	8012a14 <lv_disp_get_hor_res>
                            start_offs += hres * sizeof(lv_color_t);
 800af2a:	0042      	lsls	r2, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800af2c:	4603      	mov	r3, r0
                            start_offs += hres * sizeof(lv_color_t);
 800af2e:	9201      	str	r2, [sp, #4]
                for(a = 0; a < disp_refr->inv_p; a++) {
 800af30:	f8db 2000 	ldr.w	r2, [fp]
 800af34:	b2b0      	uxth	r0, r6
 800af36:	f8b2 117a 	ldrh.w	r1, [r2, #378]	; 0x17a
 800af3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800af3e:	4281      	cmp	r1, r0
 800af40:	f200 817e 	bhi.w	800b240 <_lv_disp_refr_task+0x3c8>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
 800af44:	f1b8 0f00 	cmp.w	r8, #0
 800af48:	d002      	beq.n	800af50 <_lv_disp_refr_task+0xd8>
 800af4a:	4640      	mov	r0, r8
 800af4c:	f008 fe88 	bl	8013c60 <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af56:	305a      	adds	r0, #90	; 0x5a
 800af58:	f009 f88a 	bl	8014070 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	2120      	movs	r1, #32
 800af60:	f500 70ad 	add.w	r0, r0, #346	; 0x15a
 800af64:	f009 f884 	bl	8014070 <_lv_memset_00>
        disp_refr->inv_p = 0;
 800af68:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 800af6a:	9804      	ldr	r0, [sp, #16]
        disp_refr->inv_p = 0;
 800af6c:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
 800af70:	f36f 0209 	bfc	r2, #0, #10
 800af74:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
 800af78:	f007 feea 	bl	8012d50 <lv_tick_elaps>
 800af7c:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
 800af7e:	6820      	ldr	r0, [r4, #0]
 800af80:	6983      	ldr	r3, [r0, #24]
 800af82:	b10b      	cbz	r3, 800af88 <_lv_disp_refr_task+0x110>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800af84:	6862      	ldr	r2, [r4, #4]
 800af86:	4798      	blx	r3
    _lv_mem_buf_free_all();
 800af88:	f008 fe92 	bl	8013cb0 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800af8c:	f007 fd00 	bl	8012990 <_lv_font_clean_up_fmt_txt>
 800af90:	e78b      	b.n	800aeaa <_lv_disp_refr_task+0x32>
 800af92:	00f7      	lsls	r7, r6, #3
 800af94:	375a      	adds	r7, #90	; 0x5a
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
 800af9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afa0:	429d      	cmp	r5, r3
 800afa2:	d28a      	bcs.n	800aeba <_lv_disp_refr_task+0x42>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800afa4:	1943      	adds	r3, r0, r5
 800afa6:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800afaa:	bb63      	cbnz	r3, 800b006 <_lv_disp_refr_task+0x18e>
 800afac:	42ae      	cmp	r6, r5
 800afae:	d02a      	beq.n	800b006 <_lv_disp_refr_task+0x18e>
 800afb0:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 800afb4:	f109 095a 	add.w	r9, r9, #90	; 0x5a
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800afb8:	eb00 0109 	add.w	r1, r0, r9
 800afbc:	4438      	add	r0, r7
 800afbe:	f008 f977 	bl	80132b0 <_lv_area_is_on>
 800afc2:	b300      	cbz	r0, 800b006 <_lv_disp_refr_task+0x18e>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800afc4:	6821      	ldr	r1, [r4, #0]
 800afc6:	a808      	add	r0, sp, #32
 800afc8:	eb01 0209 	add.w	r2, r1, r9
 800afcc:	4439      	add	r1, r7
 800afce:	f008 f8ba 	bl	8013146 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800afd2:	a808      	add	r0, sp, #32
 800afd4:	f008 f87f 	bl	80130d6 <lv_area_get_size>
 800afd8:	4683      	mov	fp, r0
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	4438      	add	r0, r7
 800afde:	f008 f87a 	bl	80130d6 <lv_area_get_size>
 800afe2:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	4448      	add	r0, r9
 800afe8:	f008 f875 	bl	80130d6 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800afec:	4450      	add	r0, sl
 800afee:	4583      	cmp	fp, r0
 800aff0:	d209      	bcs.n	800b006 <_lv_disp_refr_task+0x18e>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800aff2:	f8d4 9000 	ldr.w	r9, [r4]
 800aff6:	a908      	add	r1, sp, #32
 800aff8:	eb09 0007 	add.w	r0, r9, r7
                disp_refr->inv_area_joined[join_from] = 1;
 800affc:	44a9      	add	r9, r5
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800affe:	f7ff fecd 	bl	800ad9c <lv_area_copy>
                disp_refr->inv_area_joined[join_from] = 1;
 800b002:	f889 815a 	strb.w	r8, [r9, #346]	; 0x15a
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800b006:	3501      	adds	r5, #1
 800b008:	e7c5      	b.n	800af96 <_lv_disp_refr_task+0x11e>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800b00a:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 800b00c:	f04f 0801 	mov.w	r8, #1
 800b010:	e754      	b.n	800aebc <_lv_disp_refr_task+0x44>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800b012:	1e4a      	subs	r2, r1, #1
 800b014:	9201      	str	r2, [sp, #4]
 800b016:	9a01      	ldr	r2, [sp, #4]
 800b018:	3201      	adds	r2, #1
 800b01a:	d158      	bne.n	800b0ce <_lv_disp_refr_task+0x256>
    int32_t last_i = 0;
 800b01c:	2200      	movs	r2, #0
 800b01e:	9201      	str	r2, [sp, #4]
    disp_refr->driver.buffer->last_area = 0;
 800b020:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800b022:	2600      	movs	r6, #0
 800b024:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800b0e0 <_lv_disp_refr_task+0x268>
    disp_refr->driver.buffer->last_area = 0;
 800b028:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b02c:	f36f 0200 	bfc	r2, #0, #1
 800b030:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
 800b034:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b038:	f36f 0241 	bfc	r2, #1, #1
 800b03c:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800b040:	f8d8 7000 	ldr.w	r7, [r8]
 800b044:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 800b048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b04c:	429e      	cmp	r6, r3
 800b04e:	f6bf af41 	bge.w	800aed4 <_lv_disp_refr_task+0x5c>
        if(disp_refr->inv_area_joined[i] == 0) {
 800b052:	19bb      	adds	r3, r7, r6
 800b054:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 809e 	bne.w	800b19a <_lv_disp_refr_task+0x322>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 800b05e:	9a01      	ldr	r2, [sp, #4]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4296      	cmp	r6, r2
 800b064:	d105      	bne.n	800b072 <_lv_disp_refr_task+0x1fa>
 800b066:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b06a:	f042 0201 	orr.w	r2, r2, #1
 800b06e:	f883 2020 	strb.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
 800b072:	f893 2020 	ldrb.w	r2, [r3, #32]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800b076:	4638      	mov	r0, r7
            disp_refr->driver.buffer->last_part = 0;
 800b078:	f36f 0241 	bfc	r2, #1, #1
 800b07c:	f883 2020 	strb.w	r2, [r3, #32]
 800b080:	00f3      	lsls	r3, r6, #3
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	335a      	adds	r3, #90	; 0x5a
 800b086:	9303      	str	r3, [sp, #12]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800b088:	eb07 0a03 	add.w	sl, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800b08c:	f007 fd43 	bl	8012b16 <lv_disp_is_true_double_buf>
 800b090:	b340      	cbz	r0, 800b0e4 <_lv_disp_refr_task+0x26c>
        vdb->area.x1        = 0;
 800b092:	f04f 0700 	mov.w	r7, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	f007 fd20 	bl	8012adc <lv_disp_get_buf>
 800b09c:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 800b09e:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	f007 fcb7 	bl	8012a14 <lv_disp_get_hor_res>
 800b0a6:	3801      	subs	r0, #1
        vdb->area.y1        = 0;
 800b0a8:	826f      	strh	r7, [r5, #18]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800b0aa:	82a8      	strh	r0, [r5, #20]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800b0ac:	6820      	ldr	r0, [r4, #0]
 800b0ae:	f007 fcc3 	bl	8012a38 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
 800b0b2:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800b0b4:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
 800b0b6:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800b0b8:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
 800b0ba:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800b0be:	4650      	mov	r0, sl
            disp_refr->driver.buffer->last_part = 1;
 800b0c0:	f043 0302 	orr.w	r3, r3, #2
 800b0c4:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800b0c8:	f7ff fdda 	bl	800ac80 <lv_refr_area_part>
 800b0cc:	e05a      	b.n	800b184 <_lv_disp_refr_task+0x30c>
        if(disp_refr->inv_area_joined[i] == 0) {
 800b0ce:	9a01      	ldr	r2, [sp, #4]
 800b0d0:	189a      	adds	r2, r3, r2
 800b0d2:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
 800b0d6:	2a00      	cmp	r2, #0
 800b0d8:	d0a2      	beq.n	800b020 <_lv_disp_refr_task+0x1a8>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800b0da:	9a01      	ldr	r2, [sp, #4]
 800b0dc:	3a01      	subs	r2, #1
 800b0de:	e799      	b.n	800b014 <_lv_disp_refr_task+0x19c>
 800b0e0:	200206f0 	.word	0x200206f0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800b0e4:	6820      	ldr	r0, [r4, #0]
 800b0e6:	f007 fcf9 	bl	8012adc <lv_disp_get_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b0ea:	f8ba 9004 	ldrh.w	r9, [sl, #4]
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	f109 0901 	add.w	r9, r9, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b0f6:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b0fa:	5afb      	ldrh	r3, [r7, r3]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800b0fc:	6820      	ldr	r0, [r4, #0]
 800b0fe:	eba9 0903 	sub.w	r9, r9, r3
        lv_coord_t h = lv_area_get_height(area_p);
 800b102:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b106:	f103 0b01 	add.w	fp, r3, #1
 800b10a:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b10c:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b110:	ebab 0b02 	sub.w	fp, fp, r2
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800b114:	f007 fc90 	bl	8012a38 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	fa0f fb8b 	sxth.w	fp, fp
 800b11e:	4283      	cmp	r3, r0
 800b120:	db3d      	blt.n	800b19e <_lv_disp_refr_task+0x326>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800b122:	6820      	ldr	r0, [r4, #0]
 800b124:	f007 fc88 	bl	8012a38 <lv_disp_get_ver_res>
 800b128:	3801      	subs	r0, #1
        lv_coord_t y2 =
 800b12a:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 800b12c:	68ea      	ldr	r2, [r5, #12]
 800b12e:	fbb2 f9f9 	udiv	r9, r2, r9
 800b132:	45cb      	cmp	fp, r9
 800b134:	465a      	mov	r2, fp
 800b136:	bfa8      	it	ge
 800b138:	464a      	movge	r2, r9
 800b13a:	9202      	str	r2, [sp, #8]
        if(disp_refr->driver.rounder_cb) {
 800b13c:	f8d8 2000 	ldr.w	r2, [r8]
 800b140:	6912      	ldr	r2, [r2, #16]
 800b142:	b3aa      	cbz	r2, 800b1b0 <_lv_disp_refr_task+0x338>
            tmp.x1 = 0;
 800b144:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
 800b146:	f9bd b008 	ldrsh.w	fp, [sp, #8]
            tmp.x1 = 0;
 800b14a:	9208      	str	r2, [sp, #32]
            tmp.y1 = 0;
 800b14c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800b150:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800b154:	f8d8 0000 	ldr.w	r0, [r8]
 800b158:	a908      	add	r1, sp, #32
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	fa0f f989 	sxth.w	r9, r9
 800b160:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
 800b162:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800b166:	4790      	blx	r2
                if(lv_area_get_height(&tmp) <= max_row) break;
 800b168:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 800b16c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800b170:	3101      	adds	r1, #1
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	1a8a      	subs	r2, r1, r2
 800b176:	b212      	sxth	r2, r2
 800b178:	4293      	cmp	r3, r2
 800b17a:	9b06      	ldr	r3, [sp, #24]
 800b17c:	da14      	bge.n	800b1a8 <_lv_disp_refr_task+0x330>
            } while(h_tmp > 0);
 800b17e:	f1b9 0b00 	subs.w	fp, r9, #0
 800b182:	dce5      	bgt.n	800b150 <_lv_disp_refr_task+0x2d8>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	f8d8 0000 	ldr.w	r0, [r8]
 800b18a:	4418      	add	r0, r3
 800b18c:	f007 ffa3 	bl	80130d6 <lv_area_get_size>
 800b190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b194:	4418      	add	r0, r3
 800b196:	f8c8 0004 	str.w	r0, [r8, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800b19a:	3601      	adds	r6, #1
 800b19c:	e750      	b.n	800b040 <_lv_disp_refr_task+0x1c8>
        lv_coord_t y2 =
 800b19e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800b1a2:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800b1a6:	e7c1      	b.n	800b12c <_lv_disp_refr_task+0x2b4>
            if(h_tmp <= 0) {
 800b1a8:	f1bb 0f00 	cmp.w	fp, #0
 800b1ac:	ddea      	ble.n	800b184 <_lv_disp_refr_task+0x30c>
                max_row = tmp.y2 + 1;
 800b1ae:	9102      	str	r1, [sp, #8]
 800b1b0:	9a05      	ldr	r2, [sp, #20]
        lv_coord_t row_last = 0;
 800b1b2:	f04f 0b00 	mov.w	fp, #0
 800b1b6:	4417      	add	r7, r2
            vdb->area.y2 = row + max_row - 1;
 800b1b8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800b1bc:	f9b7 905c 	ldrsh.w	r9, [r7, #92]	; 0x5c
 800b1c0:	1e51      	subs	r1, r2, #1
 800b1c2:	9105      	str	r1, [sp, #20]
 800b1c4:	9902      	ldr	r1, [sp, #8]
 800b1c6:	eb09 0001 	add.w	r0, r9, r1
 800b1ca:	3801      	subs	r0, #1
 800b1cc:	4298      	cmp	r0, r3
 800b1ce:	dd0d      	ble.n	800b1ec <_lv_disp_refr_task+0x374>
        if(y2 != row_last) {
 800b1d0:	455b      	cmp	r3, fp
 800b1d2:	d0d7      	beq.n	800b184 <_lv_disp_refr_task+0x30c>
            vdb->area.x1 = area_p->x1;
 800b1d4:	f9b7 105a 	ldrsh.w	r1, [r7, #90]	; 0x5a
 800b1d8:	6822      	ldr	r2, [r4, #0]
 800b1da:	8229      	strh	r1, [r5, #16]
            vdb->area.x2 = area_p->x2;
 800b1dc:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
            disp_refr->driver.buffer->last_part = 1;
 800b1e0:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
 800b1e2:	82a9      	strh	r1, [r5, #20]
            vdb->area.y1 = row;
 800b1e4:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = y2;
 800b1e8:	82eb      	strh	r3, [r5, #22]
 800b1ea:	e766      	b.n	800b0ba <_lv_disp_refr_task+0x242>
            vdb->area.x1 = area_p->x1;
 800b1ec:	f9b7 005a 	ldrsh.w	r0, [r7, #90]	; 0x5a
 800b1f0:	9905      	ldr	r1, [sp, #20]
 800b1f2:	8228      	strh	r0, [r5, #16]
            vdb->area.x2 = area_p->x2;
 800b1f4:	f9b7 005e 	ldrsh.w	r0, [r7, #94]	; 0x5e
            vdb->area.y1 = row;
 800b1f8:	f8a5 9012 	strh.w	r9, [r5, #18]
 800b1fc:	fa1f f989 	uxth.w	r9, r9
            vdb->area.x2 = area_p->x2;
 800b200:	82a8      	strh	r0, [r5, #20]
 800b202:	eb09 0b01 	add.w	fp, r9, r1
 800b206:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 800b20a:	459b      	cmp	fp, r3
 800b20c:	bfa8      	it	ge
 800b20e:	469b      	movge	fp, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800b210:	455b      	cmp	r3, fp
            vdb->area.y2 = row + max_row - 1;
 800b212:	f8a5 b016 	strh.w	fp, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800b216:	d108      	bne.n	800b22a <_lv_disp_refr_task+0x3b2>
 800b218:	f8d8 0000 	ldr.w	r0, [r8]
 800b21c:	6841      	ldr	r1, [r0, #4]
 800b21e:	f891 0020 	ldrb.w	r0, [r1, #32]
 800b222:	f040 0002 	orr.w	r0, r0, #2
 800b226:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
 800b22a:	4650      	mov	r0, sl
 800b22c:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800b230:	f7ff fd26 	bl	800ac80 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800b234:	9a07      	ldr	r2, [sp, #28]
 800b236:	9b06      	ldr	r3, [sp, #24]
 800b238:	4491      	add	r9, r2
 800b23a:	fa0f f989 	sxth.w	r9, r9
 800b23e:	e7c1      	b.n	800b1c4 <_lv_disp_refr_task+0x34c>
                    if(disp_refr->inv_area_joined[a] == 0) {
 800b240:	1991      	adds	r1, r2, r6
 800b242:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
 800b246:	b109      	cbz	r1, 800b24c <_lv_disp_refr_task+0x3d4>
 800b248:	3601      	adds	r6, #1
 800b24a:	e671      	b.n	800af30 <_lv_disp_refr_task+0xb8>
 800b24c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800b250:	f9b1 205a 	ldrsh.w	r2, [r1, #90]	; 0x5a
 800b254:	f9b1 705c 	ldrsh.w	r7, [r1, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b258:	f8b1 105e 	ldrh.w	r1, [r1, #94]	; 0x5e
 800b25c:	fb03 2507 	mla	r5, r3, r7, r2
 800b260:	f1c2 0201 	rsb	r2, r2, #1
 800b264:	440a      	add	r2, r1
                        uint32_t start_offs =
 800b266:	006d      	lsls	r5, r5, #1
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800b268:	b212      	sxth	r2, r2
 800b26a:	eb09 0a05 	add.w	sl, r9, r5
 800b26e:	0052      	lsls	r2, r2, #1
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	9a02      	ldr	r2, [sp, #8]
 800b274:	4415      	add	r5, r2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800b276:	f106 020b 	add.w	r2, r6, #11
 800b27a:	00d2      	lsls	r2, r2, #3
 800b27c:	9205      	str	r2, [sp, #20]
 800b27e:	f8db 2000 	ldr.w	r2, [fp]
 800b282:	9905      	ldr	r1, [sp, #20]
 800b284:	440a      	add	r2, r1
 800b286:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800b28a:	42ba      	cmp	r2, r7
 800b28c:	dbdc      	blt.n	800b248 <_lv_disp_refr_task+0x3d0>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800b28e:	4651      	mov	r1, sl
 800b290:	9a03      	ldr	r2, [sp, #12]
 800b292:	4640      	mov	r0, r8
 800b294:	9306      	str	r3, [sp, #24]
 800b296:	f008 fd2f 	bl	8013cf8 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 800b29a:	4628      	mov	r0, r5
 800b29c:	9a03      	ldr	r2, [sp, #12]
 800b29e:	4641      	mov	r1, r8
 800b2a0:	f008 fd2a 	bl	8013cf8 <_lv_memcpy>
 800b2a4:	3701      	adds	r7, #1
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	b23f      	sxth	r7, r7
 800b2aa:	449a      	add	sl, r3
 800b2ac:	441d      	add	r5, r3
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	e7e5      	b.n	800b27e <_lv_disp_refr_task+0x406>
 800b2b2:	bf00      	nop

0800b2b4 <_lv_memcpy_small>:
{
 800b2b4:	3901      	subs	r1, #1
 800b2b6:	4402      	add	r2, r0
    uint8_t * d8 = (uint8_t *)dst;
 800b2b8:	4603      	mov	r3, r0
{
 800b2ba:	b510      	push	{r4, lr}
        *d8 = *s8;
 800b2bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b2c0:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d1f9      	bne.n	800b2bc <_lv_memcpy_small+0x8>
        s8++;
        len--;
    }

    return dst;
}
 800b2c8:	bd10      	pop	{r4, pc}

0800b2ca <lv_style_list_get_style>:
    if(list->has_trans && list->skip_trans) id++;
 800b2ca:	8883      	ldrh	r3, [r0, #4]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800b2cc:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
 800b2ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800b2d2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b2d6:	bf04      	itt	eq
 800b2d8:	3101      	addeq	r1, #1
 800b2da:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800b2dc:	f012 033f 	ands.w	r3, r2, #63	; 0x3f
 800b2e0:	d005      	beq.n	800b2ee <lv_style_list_get_style+0x24>
 800b2e2:	428b      	cmp	r3, r1
 800b2e4:	d903      	bls.n	800b2ee <lv_style_list_get_style+0x24>
    return list->style_list[id];
 800b2e6:	6803      	ldr	r3, [r0, #0]
 800b2e8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800b2ec:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800b2ee:	2000      	movs	r0, #0
}
 800b2f0:	4770      	bx	lr

0800b2f2 <get_style_prop>:
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
    prop_p[0] = style->map[idx];
 800b2f2:	6803      	ldr	r3, [r0, #0]
{
 800b2f4:	b082      	sub	sp, #8
    prop_p[0] = style->map[idx];
 800b2f6:	5c5a      	ldrb	r2, [r3, r1]
    prop_p[1] = style->map[idx + 1];
 800b2f8:	440b      	add	r3, r1
 800b2fa:	785b      	ldrb	r3, [r3, #1]
    prop_p[0] = style->map[idx];
 800b2fc:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
 800b300:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
}
 800b304:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800b308:	b002      	add	sp, #8
 800b30a:	4770      	bx	lr

0800b30c <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 800b30c:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800b30e:	f7ff fff0 	bl	800b2f2 <get_style_prop>
}
 800b312:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b316:	bd08      	pop	{r3, pc}

0800b318 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
 800b318:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800b31c:	280b      	cmp	r0, #11
 800b31e:	d904      	bls.n	800b32a <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
 800b320:	280e      	cmp	r0, #14
 800b322:	bf34      	ite	cc
 800b324:	2003      	movcc	r0, #3
 800b326:	2006      	movcs	r0, #6
 800b328:	4770      	bx	lr
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800b32a:	2004      	movs	r0, #4
    return size;
}
 800b32c:	4770      	bx	lr

0800b32e <get_property_index>:
{
 800b32e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(style->map == NULL) return -1;
 800b332:	6803      	ldr	r3, [r0, #0]
{
 800b334:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
 800b336:	b38b      	cbz	r3, 800b39c <get_property_index+0x6e>
    attr = (prop >> 8) & 0xFF;
 800b338:	0a0e      	lsrs	r6, r1, #8
    int16_t id_guess = -1;
 800b33a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    uint8_t id_to_find = prop & 0xFF;
 800b33e:	fa5f fa81 	uxtb.w	sl, r1
    size_t i = 0;
 800b342:	2500      	movs	r5, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800b344:	f006 087f 	and.w	r8, r6, #127	; 0x7f
    int16_t weight = -1;
 800b348:	46a1      	mov	r9, r4
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800b34a:	ea6f 0808 	mvn.w	r8, r8
    return get_style_prop(style, idx) & 0xFF;
 800b34e:	4629      	mov	r1, r5
 800b350:	4638      	mov	r0, r7
 800b352:	f7ff ffce 	bl	800b2f2 <get_style_prop>
 800b356:	fa5f fb80 	uxtb.w	fp, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b35a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800b35e:	d101      	bne.n	800b364 <get_property_index+0x36>
    return id_guess;
 800b360:	4620      	mov	r0, r4
 800b362:	e00a      	b.n	800b37a <get_property_index+0x4c>
        if(prop_id == id_to_find) {
 800b364:	45da      	cmp	sl, fp
 800b366:	d114      	bne.n	800b392 <get_property_index+0x64>
            attr_i = get_style_prop_attr(style, i);
 800b368:	4629      	mov	r1, r5
 800b36a:	4638      	mov	r0, r7
 800b36c:	f7ff ffce 	bl	800b30c <get_style_prop_attr>
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800b370:	ea86 0300 	eor.w	r3, r6, r0
 800b374:	065b      	lsls	r3, r3, #25
 800b376:	d102      	bne.n	800b37e <get_property_index+0x50>
                return i;
 800b378:	4628      	mov	r0, r5
}
 800b37a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800b382:	ea18 0f00 	tst.w	r8, r0
 800b386:	d104      	bne.n	800b392 <get_property_index+0x64>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800b388:	4548      	cmp	r0, r9
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800b38a:	bfc4      	itt	gt
 800b38c:	fa0f f980 	sxthgt.w	r9, r0
                    id_guess = i;
 800b390:	b22c      	sxthgt	r4, r5
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
 800b392:	4658      	mov	r0, fp
 800b394:	f7ff ffc0 	bl	800b318 <get_prop_size>
 800b398:	4405      	add	r5, r0
 800b39a:	e7d8      	b.n	800b34e <get_property_index+0x20>
    if(style->map == NULL) return -1;
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3a0:	e7eb      	b.n	800b37a <get_property_index+0x4c>

0800b3a2 <style_resize>:
{
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
 800b3a6:	6800      	ldr	r0, [r0, #0]
 800b3a8:	f008 fd96 	bl	8013ed8 <lv_mem_realloc>
 800b3ac:	6020      	str	r0, [r4, #0]
}
 800b3ae:	bd10      	pop	{r4, pc}

0800b3b0 <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
 800b3b0:	2104      	movs	r1, #4
 800b3b2:	f008 be5d 	b.w	8014070 <_lv_memset_00>

0800b3b6 <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
 800b3b6:	2108      	movs	r1, #8
 800b3b8:	f008 be5a 	b.w	8014070 <_lv_memset_00>

0800b3bc <_lv_style_list_remove_style>:
{
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	4604      	mov	r4, r0
    if(list->style_cnt == 0) return;
 800b3c0:	7900      	ldrb	r0, [r0, #4]
 800b3c2:	f010 053f 	ands.w	r5, r0, #63	; 0x3f
 800b3c6:	d004      	beq.n	800b3d2 <_lv_style_list_remove_style+0x16>
    for(i = 0; i < list->style_cnt; i++) {
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	b2d0      	uxtb	r0, r2
 800b3ce:	4283      	cmp	r3, r0
 800b3d0:	d800      	bhi.n	800b3d4 <_lv_style_list_remove_style+0x18>
}
 800b3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 800b3da:	3201      	adds	r2, #1
 800b3dc:	428e      	cmp	r6, r1
 800b3de:	d1f5      	bne.n	800b3cc <_lv_style_list_remove_style+0x10>
    if(list->style_cnt == 1) {
 800b3e0:	2d01      	cmp	r5, #1
 800b3e2:	d10a      	bne.n	800b3fa <_lv_style_list_remove_style+0x3e>
        lv_mem_free(list->style_list);
 800b3e4:	f008 fbfe 	bl	8013be4 <lv_mem_free>
        list->style_cnt = 0;
 800b3e8:	7923      	ldrb	r3, [r4, #4]
        list->style_list = NULL;
 800b3ea:	2200      	movs	r2, #0
        list->has_local = 0;
 800b3ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        list->style_list = NULL;
 800b3f0:	6022      	str	r2, [r4, #0]
        list->has_local = 0;
 800b3f2:	f362 1386 	bfi	r3, r2, #6, #1
 800b3f6:	7123      	strb	r3, [r4, #4]
        return;
 800b3f8:	e7eb      	b.n	800b3d2 <_lv_style_list_remove_style+0x16>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 800b3fa:	1e58      	subs	r0, r3, #1
 800b3fc:	0080      	lsls	r0, r0, #2
 800b3fe:	f008 fba3 	bl	8013b48 <lv_mem_alloc>
 800b402:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
 800b404:	f008 f8f8 	bl	80135f8 <lv_debug_check_null>
 800b408:	4603      	mov	r3, r0
 800b40a:	b920      	cbnz	r0, 800b416 <_lv_style_list_remove_style+0x5a>
 800b40c:	462a      	mov	r2, r5
 800b40e:	4811      	ldr	r0, [pc, #68]	; (800b454 <_lv_style_list_remove_style+0x98>)
 800b410:	f008 f8f6 	bl	8013600 <lv_debug_log_error>
 800b414:	e7fe      	b.n	800b414 <_lv_style_list_remove_style+0x58>
    if(new_classes == NULL) {
 800b416:	2d00      	cmp	r5, #0
 800b418:	d0db      	beq.n	800b3d2 <_lv_style_list_remove_style+0x16>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b41a:	7922      	ldrb	r2, [r4, #4]
 800b41c:	2300      	movs	r3, #0
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b424:	4619      	mov	r1, r3
 800b426:	b2df      	uxtb	r7, r3
 800b428:	42ba      	cmp	r2, r7
 800b42a:	d809      	bhi.n	800b440 <_lv_style_list_remove_style+0x84>
    lv_mem_free(list->style_list);
 800b42c:	f008 fbda 	bl	8013be4 <lv_mem_free>
    list->style_cnt--;
 800b430:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
 800b432:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
 800b434:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 800b438:	f362 0305 	bfi	r3, r2, #0, #6
 800b43c:	7123      	strb	r3, [r4, #4]
 800b43e:	e7c8      	b.n	800b3d2 <_lv_style_list_remove_style+0x16>
        if(list->style_list[i] == style) continue;
 800b440:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800b444:	3301      	adds	r3, #1
 800b446:	42be      	cmp	r6, r7
        new_classes[j] = list->style_list[i];
 800b448:	bf1e      	ittt	ne
 800b44a:	f845 7021 	strne.w	r7, [r5, r1, lsl #2]
        j++;
 800b44e:	3101      	addne	r1, #1
 800b450:	b2c9      	uxtbne	r1, r1
 800b452:	e7e8      	b.n	800b426 <_lv_style_list_remove_style+0x6a>
 800b454:	0802c346 	.word	0x0802c346

0800b458 <_lv_style_list_add_style>:
{
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	460e      	mov	r6, r1
    if(list == NULL) return;
 800b45c:	4605      	mov	r5, r0
 800b45e:	b378      	cbz	r0, 800b4c0 <_lv_style_list_add_style+0x68>
    _lv_style_list_remove_style(list, style);
 800b460:	f7ff ffac 	bl	800b3bc <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 800b464:	7929      	ldrb	r1, [r5, #4]
 800b466:	0688      	lsls	r0, r1, #26
 800b468:	d10c      	bne.n	800b484 <_lv_style_list_add_style+0x2c>
 800b46a:	2004      	movs	r0, #4
 800b46c:	f008 fb6c 	bl	8013b48 <lv_mem_alloc>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800b470:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_classes);
 800b472:	f008 f8c1 	bl	80135f8 <lv_debug_check_null>
 800b476:	4603      	mov	r3, r0
 800b478:	b960      	cbnz	r0, 800b494 <_lv_style_list_add_style+0x3c>
 800b47a:	4622      	mov	r2, r4
 800b47c:	4814      	ldr	r0, [pc, #80]	; (800b4d0 <_lv_style_list_add_style+0x78>)
 800b47e:	f008 f8bf 	bl	8013600 <lv_debug_log_error>
 800b482:	e7fe      	b.n	800b482 <_lv_style_list_add_style+0x2a>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800b484:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b488:	6828      	ldr	r0, [r5, #0]
 800b48a:	3101      	adds	r1, #1
 800b48c:	0089      	lsls	r1, r1, #2
 800b48e:	f008 fd23 	bl	8013ed8 <lv_mem_realloc>
 800b492:	e7ed      	b.n	800b470 <_lv_style_list_add_style+0x18>
    if(new_classes == NULL) {
 800b494:	b1a4      	cbz	r4, 800b4c0 <_lv_style_list_add_style+0x68>
    if(list->has_trans) first_style++;
 800b496:	792b      	ldrb	r3, [r5, #4]
    if(list->has_local) first_style++;
 800b498:	065a      	lsls	r2, r3, #25
    uint8_t first_style = 0;
 800b49a:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
 800b49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if(list->has_local) first_style++;
 800b4a2:	bf48      	it	mi
 800b4a4:	3101      	addmi	r1, #1
    for(i = list->style_cnt; i > first_style; i--) {
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	d808      	bhi.n	800b4c2 <_lv_style_list_add_style+0x6a>
    list->style_cnt++;
 800b4b0:	792a      	ldrb	r2, [r5, #4]
 800b4b2:	3301      	adds	r3, #1
    new_classes[first_style] = style;
 800b4b4:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
    list->style_cnt++;
 800b4b8:	f363 0205 	bfi	r2, r3, #0, #6
    list->style_list = new_classes;
 800b4bc:	602c      	str	r4, [r5, #0]
    list->style_cnt++;
 800b4be:	712a      	strb	r2, [r5, #4]
}
 800b4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_classes[i] = new_classes[i - 1];
 800b4c2:	f850 7c04 	ldr.w	r7, [r0, #-4]
    for(i = list->style_cnt; i > first_style; i--) {
 800b4c6:	3a01      	subs	r2, #1
        new_classes[i] = new_classes[i - 1];
 800b4c8:	f840 7904 	str.w	r7, [r0], #-4
    for(i = list->style_cnt; i > first_style; i--) {
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	e7ed      	b.n	800b4ac <_lv_style_list_add_style+0x54>
 800b4d0:	0802c346 	.word	0x0802c346

0800b4d4 <get_alloc_local_style>:
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800b4d4:	7901      	ldrb	r1, [r0, #4]
{
 800b4d6:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800b4d8:	064b      	lsls	r3, r1, #25
{
 800b4da:	4605      	mov	r5, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800b4dc:	d504      	bpl.n	800b4e8 <get_alloc_local_style+0x14>
 800b4de:	09c9      	lsrs	r1, r1, #7
}
 800b4e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800b4e4:	f7ff bef1 	b.w	800b2ca <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 800b4e8:	2004      	movs	r0, #4
 800b4ea:	f008 fb2d 	bl	8013b48 <lv_mem_alloc>
 800b4ee:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
 800b4f0:	f008 f882 	bl	80135f8 <lv_debug_check_null>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	b920      	cbnz	r0, 800b502 <get_alloc_local_style+0x2e>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4809      	ldr	r0, [pc, #36]	; (800b520 <get_alloc_local_style+0x4c>)
 800b4fc:	f008 f880 	bl	8013600 <lv_debug_log_error>
 800b500:	e7fe      	b.n	800b500 <get_alloc_local_style+0x2c>
    if(local_style == NULL) {
 800b502:	b154      	cbz	r4, 800b51a <get_alloc_local_style+0x46>
    lv_style_init(local_style);
 800b504:	4620      	mov	r0, r4
 800b506:	f7ff ff53 	bl	800b3b0 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
 800b50a:	4621      	mov	r1, r4
 800b50c:	4628      	mov	r0, r5
 800b50e:	f7ff ffa3 	bl	800b458 <_lv_style_list_add_style>
    list->has_local = 1;
 800b512:	792b      	ldrb	r3, [r5, #4]
 800b514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b518:	712b      	strb	r3, [r5, #4]
}
 800b51a:	4620      	mov	r0, r4
 800b51c:	bd38      	pop	{r3, r4, r5, pc}
 800b51e:	bf00      	nop
 800b520:	0802c346 	.word	0x0802c346

0800b524 <lv_style_reset>:
{
 800b524:	b510      	push	{r4, lr}
 800b526:	4604      	mov	r4, r0
    lv_mem_free(style->map);
 800b528:	6800      	ldr	r0, [r0, #0]
 800b52a:	f008 fb5b 	bl	8013be4 <lv_mem_free>
    lv_style_init(style);
 800b52e:	4620      	mov	r0, r4
}
 800b530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_style_init(style);
 800b534:	f7ff bf3c 	b.w	800b3b0 <lv_style_init>

0800b538 <_lv_style_get_mem_size>:
{
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4605      	mov	r5, r0
    if(style->map == NULL) return 0;
 800b53c:	6800      	ldr	r0, [r0, #0]
 800b53e:	b148      	cbz	r0, 800b554 <_lv_style_get_mem_size+0x1c>
    size_t i = 0;
 800b540:	2400      	movs	r4, #0
    return get_style_prop(style, idx) & 0xFF;
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff fed4 	bl	800b2f2 <get_style_prop>
 800b54a:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b54c:	28ff      	cmp	r0, #255	; 0xff
 800b54e:	d102      	bne.n	800b556 <_lv_style_get_mem_size+0x1e>
    return i + sizeof(lv_style_property_t);
 800b550:	1ca0      	adds	r0, r4, #2
 800b552:	b280      	uxth	r0, r0
}
 800b554:	bd38      	pop	{r3, r4, r5, pc}
    return idx + get_prop_size(prop_id);
 800b556:	f7ff fedf 	bl	800b318 <get_prop_size>
 800b55a:	4404      	add	r4, r0
 800b55c:	e7f1      	b.n	800b542 <_lv_style_get_mem_size+0xa>

0800b55e <lv_style_copy>:
{
 800b55e:	b570      	push	{r4, r5, r6, lr}
 800b560:	4606      	mov	r6, r0
    if(style_src == NULL) return;
 800b562:	460c      	mov	r4, r1
 800b564:	b171      	cbz	r1, 800b584 <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
 800b566:	680b      	ldr	r3, [r1, #0]
 800b568:	b163      	cbz	r3, 800b584 <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
 800b56a:	4608      	mov	r0, r1
 800b56c:	f7ff ffe4 	bl	800b538 <_lv_style_get_mem_size>
 800b570:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
 800b572:	f008 fae9 	bl	8013b48 <lv_mem_alloc>
 800b576:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 800b578:	462a      	mov	r2, r5
 800b57a:	6821      	ldr	r1, [r4, #0]
}
 800b57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
 800b580:	f008 bbba 	b.w	8013cf8 <_lv_memcpy>
}
 800b584:	bd70      	pop	{r4, r5, r6, pc}

0800b586 <lv_style_remove_prop>:
{
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	460e      	mov	r6, r1
    if(style == NULL) return false;
 800b58a:	4605      	mov	r5, r0
 800b58c:	b908      	cbnz	r0, 800b592 <lv_style_remove_prop+0xc>
 800b58e:	2000      	movs	r0, #0
}
 800b590:	bd70      	pop	{r4, r5, r6, pc}
    int32_t id = get_property_index(style, prop);
 800b592:	f7ff fecc 	bl	800b32e <get_property_index>
    if(id >= 0) {
 800b596:	1e04      	subs	r4, r0, #0
 800b598:	dbf9      	blt.n	800b58e <lv_style_remove_prop+0x8>
        attr_found = get_style_prop_attr(style, id);
 800b59a:	4621      	mov	r1, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	f7ff feb5 	bl	800b30c <get_style_prop_attr>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b5a2:	ea80 2016 	eor.w	r0, r0, r6, lsr #8
 800b5a6:	0643      	lsls	r3, r0, #25
 800b5a8:	d1f1      	bne.n	800b58e <lv_style_remove_prop+0x8>
            uint32_t map_size = _lv_style_get_mem_size(style);
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff ffc4 	bl	800b538 <_lv_style_get_mem_size>
 800b5b0:	4601      	mov	r1, r0
            uint8_t prop_size = get_prop_size(prop);
 800b5b2:	b2f0      	uxtb	r0, r6
 800b5b4:	f7ff feb0 	bl	800b318 <get_prop_size>
            for(i = id; i < map_size - prop_size; i++) {
 800b5b8:	b2c0      	uxtb	r0, r0
 800b5ba:	1a09      	subs	r1, r1, r0
 800b5bc:	42a1      	cmp	r1, r4
 800b5be:	d804      	bhi.n	800b5ca <lv_style_remove_prop+0x44>
            style_resize(style, map_size - prop_size);
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f7ff feee 	bl	800b3a2 <style_resize>
            return true;
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	e7e2      	b.n	800b590 <lv_style_remove_prop+0xa>
                style->map[i] = style->map[i + prop_size];
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	191a      	adds	r2, r3, r4
 800b5ce:	5c12      	ldrb	r2, [r2, r0]
 800b5d0:	551a      	strb	r2, [r3, r4]
            for(i = id; i < map_size - prop_size; i++) {
 800b5d2:	3401      	adds	r4, #1
 800b5d4:	e7f2      	b.n	800b5bc <lv_style_remove_prop+0x36>
	...

0800b5d8 <_lv_style_set_int>:
{
 800b5d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b5da:	4605      	mov	r5, r0
 800b5dc:	f8ad 1006 	strh.w	r1, [sp, #6]
 800b5e0:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
 800b5e4:	f7ff fea3 	bl	800b32e <get_property_index>
    if(id >= 0) {
 800b5e8:	1e04      	subs	r4, r0, #0
 800b5ea:	db12      	blt.n	800b612 <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7ff fe8c 	bl	800b30c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800b5f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b5f8:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800b5fc:	0643      	lsls	r3, r0, #25
 800b5fe:	d108      	bne.n	800b612 <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 800b600:	3402      	adds	r4, #2
 800b602:	6828      	ldr	r0, [r5, #0]
 800b604:	2202      	movs	r2, #2
 800b606:	a901      	add	r1, sp, #4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b608:	4420      	add	r0, r4
 800b60a:	f7ff fe53 	bl	800b2b4 <_lv_memcpy_small>
}
 800b60e:	b004      	add	sp, #16
 800b610:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b612:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 800b614:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b616:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800b61a:	f7ff ff8d 	bl	800b538 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800b61e:	2800      	cmp	r0, #0
 800b620:	bf08      	it	eq
 800b622:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
 800b624:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
 800b626:	4628      	mov	r0, r5
 800b628:	b2a4      	uxth	r4, r4
 800b62a:	4621      	mov	r1, r4
 800b62c:	f7ff feb9 	bl	800b3a2 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b630:	6828      	ldr	r0, [r5, #0]
 800b632:	f007 ffe1 	bl	80135f8 <lv_debug_check_null>
 800b636:	682e      	ldr	r6, [r5, #0]
 800b638:	4603      	mov	r3, r0
 800b63a:	b920      	cbnz	r0, 800b646 <_lv_style_set_int+0x6e>
 800b63c:	4632      	mov	r2, r6
 800b63e:	480c      	ldr	r0, [pc, #48]	; (800b670 <_lv_style_set_int+0x98>)
 800b640:	f007 ffde 	bl	8013600 <lv_debug_log_error>
 800b644:	e7fe      	b.n	800b644 <_lv_style_set_int+0x6c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b646:	1fa0      	subs	r0, r4, #6
 800b648:	2202      	movs	r2, #2
 800b64a:	f10d 0106 	add.w	r1, sp, #6
 800b64e:	4430      	add	r0, r6
 800b650:	f7ff fe30 	bl	800b2b4 <_lv_memcpy_small>
 800b654:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800b656:	6828      	ldr	r0, [r5, #0]
 800b658:	2202      	movs	r2, #2
 800b65a:	a901      	add	r1, sp, #4
 800b65c:	3c02      	subs	r4, #2
 800b65e:	4418      	add	r0, r3
 800b660:	f7ff fe28 	bl	800b2b4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b664:	6828      	ldr	r0, [r5, #0]
 800b666:	2202      	movs	r2, #2
 800b668:	f10d 010e 	add.w	r1, sp, #14
 800b66c:	e7cc      	b.n	800b608 <_lv_style_set_int+0x30>
 800b66e:	bf00      	nop
 800b670:	0802c346 	.word	0x0802c346

0800b674 <_lv_style_set_color>:
{
 800b674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b676:	4605      	mov	r5, r0
 800b678:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b67c:	f8ad 1006 	strh.w	r1, [sp, #6]
    int32_t id = get_property_index(style, prop);
 800b680:	f7ff fe55 	bl	800b32e <get_property_index>
    if(id >= 0) {
 800b684:	1e04      	subs	r4, r0, #0
 800b686:	db12      	blt.n	800b6ae <_lv_style_set_color+0x3a>
        attr_found = get_style_prop_attr(style, id);
 800b688:	4621      	mov	r1, r4
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7ff fe3e 	bl	800b30c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800b690:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b694:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800b698:	0643      	lsls	r3, r0, #25
 800b69a:	d108      	bne.n	800b6ae <_lv_style_set_color+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 800b69c:	3402      	adds	r4, #2
 800b69e:	6828      	ldr	r0, [r5, #0]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	a901      	add	r1, sp, #4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b6a4:	4420      	add	r0, r4
 800b6a6:	f7ff fe05 	bl	800b2b4 <_lv_memcpy_small>
}
 800b6aa:	b004      	add	sp, #16
 800b6ac:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b6ae:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 800b6b0:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b6b2:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800b6b6:	f7ff ff3f 	bl	800b538 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	bf08      	it	eq
 800b6be:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
 800b6c0:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	b2a4      	uxth	r4, r4
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f7ff fe6b 	bl	800b3a2 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b6cc:	6828      	ldr	r0, [r5, #0]
 800b6ce:	f007 ff93 	bl	80135f8 <lv_debug_check_null>
 800b6d2:	682e      	ldr	r6, [r5, #0]
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	b920      	cbnz	r0, 800b6e2 <_lv_style_set_color+0x6e>
 800b6d8:	4632      	mov	r2, r6
 800b6da:	480c      	ldr	r0, [pc, #48]	; (800b70c <_lv_style_set_color+0x98>)
 800b6dc:	f007 ff90 	bl	8013600 <lv_debug_log_error>
 800b6e0:	e7fe      	b.n	800b6e0 <_lv_style_set_color+0x6c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b6e2:	1fa0      	subs	r0, r4, #6
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	f10d 0106 	add.w	r1, sp, #6
 800b6ea:	4430      	add	r0, r6
 800b6ec:	f7ff fde2 	bl	800b2b4 <_lv_memcpy_small>
 800b6f0:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 800b6f2:	6828      	ldr	r0, [r5, #0]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	a901      	add	r1, sp, #4
 800b6f8:	3c02      	subs	r4, #2
 800b6fa:	4418      	add	r0, r3
 800b6fc:	f7ff fdda 	bl	800b2b4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b700:	6828      	ldr	r0, [r5, #0]
 800b702:	2202      	movs	r2, #2
 800b704:	f10d 010e 	add.w	r1, sp, #14
 800b708:	e7cc      	b.n	800b6a4 <_lv_style_set_color+0x30>
 800b70a:	bf00      	nop
 800b70c:	0802c346 	.word	0x0802c346

0800b710 <_lv_style_set_opa>:
{
 800b710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b712:	4605      	mov	r5, r0
 800b714:	f8ad 1006 	strh.w	r1, [sp, #6]
 800b718:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
 800b71c:	f7ff fe07 	bl	800b32e <get_property_index>
    if(id >= 0) {
 800b720:	1e04      	subs	r4, r0, #0
 800b722:	db13      	blt.n	800b74c <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
 800b724:	4621      	mov	r1, r4
 800b726:	4628      	mov	r0, r5
 800b728:	f7ff fdf0 	bl	800b30c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800b72c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b730:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800b734:	0643      	lsls	r3, r0, #25
 800b736:	d109      	bne.n	800b74c <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800b738:	3402      	adds	r4, #2
 800b73a:	6828      	ldr	r0, [r5, #0]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f10d 0105 	add.w	r1, sp, #5
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b742:	4420      	add	r0, r4
 800b744:	f7ff fdb6 	bl	800b2b4 <_lv_memcpy_small>
}
 800b748:	b004      	add	sp, #16
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b74c:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 800b74e:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b750:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800b754:	f7ff fef0 	bl	800b538 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800b758:	2800      	cmp	r0, #0
 800b75a:	bf08      	it	eq
 800b75c:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
 800b75e:	1cc4      	adds	r4, r0, #3
    style_resize(style, size);
 800b760:	4628      	mov	r0, r5
 800b762:	b2a4      	uxth	r4, r4
 800b764:	4621      	mov	r1, r4
 800b766:	f7ff fe1c 	bl	800b3a2 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b76a:	6828      	ldr	r0, [r5, #0]
 800b76c:	f007 ff44 	bl	80135f8 <lv_debug_check_null>
 800b770:	682e      	ldr	r6, [r5, #0]
 800b772:	4603      	mov	r3, r0
 800b774:	b920      	cbnz	r0, 800b780 <_lv_style_set_opa+0x70>
 800b776:	4632      	mov	r2, r6
 800b778:	480c      	ldr	r0, [pc, #48]	; (800b7ac <_lv_style_set_opa+0x9c>)
 800b77a:	f007 ff41 	bl	8013600 <lv_debug_log_error>
 800b77e:	e7fe      	b.n	800b77e <_lv_style_set_opa+0x6e>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b780:	1f60      	subs	r0, r4, #5
 800b782:	2202      	movs	r2, #2
 800b784:	f10d 0106 	add.w	r1, sp, #6
 800b788:	4430      	add	r0, r6
 800b78a:	f7ff fd93 	bl	800b2b4 <_lv_memcpy_small>
 800b78e:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 800b790:	6828      	ldr	r0, [r5, #0]
 800b792:	2201      	movs	r2, #1
 800b794:	f10d 0105 	add.w	r1, sp, #5
 800b798:	3c02      	subs	r4, #2
 800b79a:	4418      	add	r0, r3
 800b79c:	f7ff fd8a 	bl	800b2b4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b7a0:	6828      	ldr	r0, [r5, #0]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f10d 010e 	add.w	r1, sp, #14
 800b7a8:	e7cb      	b.n	800b742 <_lv_style_set_opa+0x32>
 800b7aa:	bf00      	nop
 800b7ac:	0802c346 	.word	0x0802c346

0800b7b0 <_lv_style_set_ptr>:
{
 800b7b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	9200      	str	r2, [sp, #0]
 800b7b6:	f8ad 1006 	strh.w	r1, [sp, #6]
    int32_t id = get_property_index(style, prop);
 800b7ba:	f7ff fdb8 	bl	800b32e <get_property_index>
    if(id >= 0) {
 800b7be:	1e04      	subs	r4, r0, #0
 800b7c0:	db12      	blt.n	800b7e8 <_lv_style_set_ptr+0x38>
        attr_found = get_style_prop_attr(style, id);
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f7ff fda1 	bl	800b30c <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 800b7ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b7ce:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800b7d2:	0643      	lsls	r3, r0, #25
 800b7d4:	d108      	bne.n	800b7e8 <_lv_style_set_ptr+0x38>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 800b7d6:	3402      	adds	r4, #2
 800b7d8:	6828      	ldr	r0, [r5, #0]
 800b7da:	2204      	movs	r2, #4
 800b7dc:	4669      	mov	r1, sp
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b7de:	4420      	add	r0, r4
 800b7e0:	f7ff fd68 	bl	800b2b4 <_lv_memcpy_small>
}
 800b7e4:	b004      	add	sp, #16
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b7e8:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 800b7ea:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b7ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800b7f0:	f7ff fea2 	bl	800b538 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	bf08      	it	eq
 800b7f8:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
 800b7fa:	1d84      	adds	r4, r0, #6
    style_resize(style, size);
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	b2a4      	uxth	r4, r4
 800b800:	4621      	mov	r1, r4
 800b802:	f7ff fdce 	bl	800b3a2 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b806:	6828      	ldr	r0, [r5, #0]
 800b808:	f007 fef6 	bl	80135f8 <lv_debug_check_null>
 800b80c:	682e      	ldr	r6, [r5, #0]
 800b80e:	4603      	mov	r3, r0
 800b810:	b920      	cbnz	r0, 800b81c <_lv_style_set_ptr+0x6c>
 800b812:	4632      	mov	r2, r6
 800b814:	480c      	ldr	r0, [pc, #48]	; (800b848 <_lv_style_set_ptr+0x98>)
 800b816:	f007 fef3 	bl	8013600 <lv_debug_log_error>
 800b81a:	e7fe      	b.n	800b81a <_lv_style_set_ptr+0x6a>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b81c:	f1a4 0008 	sub.w	r0, r4, #8
 800b820:	2202      	movs	r2, #2
 800b822:	f10d 0106 	add.w	r1, sp, #6
 800b826:	4430      	add	r0, r6
 800b828:	f7ff fd44 	bl	800b2b4 <_lv_memcpy_small>
 800b82c:	1fa3      	subs	r3, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 800b82e:	6828      	ldr	r0, [r5, #0]
 800b830:	2204      	movs	r2, #4
 800b832:	4669      	mov	r1, sp
 800b834:	3c02      	subs	r4, #2
 800b836:	4418      	add	r0, r3
 800b838:	f7ff fd3c 	bl	800b2b4 <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b83c:	6828      	ldr	r0, [r5, #0]
 800b83e:	2202      	movs	r2, #2
 800b840:	f10d 010e 	add.w	r1, sp, #14
 800b844:	e7cb      	b.n	800b7de <_lv_style_set_ptr+0x2e>
 800b846:	bf00      	nop
 800b848:	0802c346 	.word	0x0802c346

0800b84c <_lv_style_get_int>:
{
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	460e      	mov	r6, r1
 800b850:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 800b852:	4604      	mov	r4, r0
 800b854:	b910      	cbnz	r0, 800b85c <_lv_style_get_int+0x10>
 800b856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 800b85c:	6803      	ldr	r3, [r0, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0f9      	beq.n	800b856 <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
 800b862:	f7ff fd64 	bl	800b32e <get_property_index>
    if(id < 0) {
 800b866:	1e05      	subs	r5, r0, #0
 800b868:	dbf5      	blt.n	800b856 <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800b86a:	1cab      	adds	r3, r5, #2
 800b86c:	6821      	ldr	r1, [r4, #0]
 800b86e:	2202      	movs	r2, #2
 800b870:	4638      	mov	r0, r7
 800b872:	4419      	add	r1, r3
 800b874:	f7ff fd1e 	bl	800b2b4 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 800b878:	4629      	mov	r1, r5
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff fd46 	bl	800b30c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b880:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b884:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 800b888:	e7e7      	b.n	800b85a <_lv_style_get_int+0xe>

0800b88a <_lv_style_get_opa>:
{
 800b88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88c:	460e      	mov	r6, r1
 800b88e:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 800b890:	4604      	mov	r4, r0
 800b892:	b910      	cbnz	r0, 800b89a <_lv_style_get_opa+0x10>
 800b894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 800b89a:	6803      	ldr	r3, [r0, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0f9      	beq.n	800b894 <_lv_style_get_opa+0xa>
    int32_t id = get_property_index(style, prop);
 800b8a0:	f7ff fd45 	bl	800b32e <get_property_index>
    if(id < 0) {
 800b8a4:	1e05      	subs	r5, r0, #0
 800b8a6:	dbf5      	blt.n	800b894 <_lv_style_get_opa+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 800b8a8:	1cab      	adds	r3, r5, #2
 800b8aa:	6821      	ldr	r1, [r4, #0]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	4419      	add	r1, r3
 800b8b2:	f7ff fcff 	bl	800b2b4 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f7ff fd27 	bl	800b30c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b8be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b8c2:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 800b8c6:	e7e7      	b.n	800b898 <_lv_style_get_opa+0xe>

0800b8c8 <_lv_style_get_ptr>:
{
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	460e      	mov	r6, r1
 800b8cc:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	b910      	cbnz	r0, 800b8d8 <_lv_style_get_ptr+0x10>
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 800b8d8:	6803      	ldr	r3, [r0, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0f9      	beq.n	800b8d2 <_lv_style_get_ptr+0xa>
    int32_t id = get_property_index(style, prop);
 800b8de:	f7ff fd26 	bl	800b32e <get_property_index>
    if(id < 0) {
 800b8e2:	1e05      	subs	r5, r0, #0
 800b8e4:	dbf5      	blt.n	800b8d2 <_lv_style_get_ptr+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 800b8e6:	1cab      	adds	r3, r5, #2
 800b8e8:	6821      	ldr	r1, [r4, #0]
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	4419      	add	r1, r3
 800b8f0:	f7ff fce0 	bl	800b2b4 <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7ff fd08 	bl	800b30c <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800b8fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b900:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 800b904:	e7e7      	b.n	800b8d6 <_lv_style_get_ptr+0xe>

0800b906 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
 800b906:	7902      	ldrb	r2, [r0, #4]
 800b908:	f012 0340 	ands.w	r3, r2, #64	; 0x40
 800b90c:	d005      	beq.n	800b91a <lv_style_list_get_local_style+0x14>
 800b90e:	6803      	ldr	r3, [r0, #0]
    if(list->has_trans) return list->style_list[1];
 800b910:	0612      	lsls	r2, r2, #24
 800b912:	bf4c      	ite	mi
 800b914:	6858      	ldrmi	r0, [r3, #4]
    else return list->style_list[0];
 800b916:	6818      	ldrpl	r0, [r3, #0]
 800b918:	4770      	bx	lr
    if(!list->has_local) return NULL;
 800b91a:	4618      	mov	r0, r3
}
 800b91c:	4770      	bx	lr

0800b91e <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
 800b91e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b922:	2b00      	cmp	r3, #0
    return list->style_list[0];
 800b924:	bfba      	itte	lt
 800b926:	6803      	ldrlt	r3, [r0, #0]
 800b928:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
 800b92a:	2000      	movge	r0, #0
}
 800b92c:	4770      	bx	lr

0800b92e <_lv_style_list_reset>:
{
 800b92e:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
 800b930:	4604      	mov	r4, r0
 800b932:	b358      	cbz	r0, 800b98c <_lv_style_list_reset+0x5e>
    if(list->has_local) {
 800b934:	7903      	ldrb	r3, [r0, #4]
 800b936:	065a      	lsls	r2, r3, #25
 800b938:	d508      	bpl.n	800b94c <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
 800b93a:	f7ff ffe4 	bl	800b906 <lv_style_list_get_local_style>
        if(local) {
 800b93e:	4605      	mov	r5, r0
 800b940:	b120      	cbz	r0, 800b94c <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
 800b942:	f7ff fdef 	bl	800b524 <lv_style_reset>
            lv_mem_free(local);
 800b946:	4628      	mov	r0, r5
 800b948:	f008 f94c 	bl	8013be4 <lv_mem_free>
    if(list->has_trans) {
 800b94c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	da09      	bge.n	800b968 <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 800b954:	4620      	mov	r0, r4
 800b956:	f7ff ffe2 	bl	800b91e <_lv_style_list_get_transition_style>
        if(trans) {
 800b95a:	4605      	mov	r5, r0
 800b95c:	b120      	cbz	r0, 800b968 <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
 800b95e:	f7ff fde1 	bl	800b524 <lv_style_reset>
            lv_mem_free(trans);
 800b962:	4628      	mov	r0, r5
 800b964:	f008 f93e 	bl	8013be4 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800b968:	7923      	ldrb	r3, [r4, #4]
 800b96a:	069b      	lsls	r3, r3, #26
 800b96c:	d002      	beq.n	800b974 <_lv_style_list_reset+0x46>
 800b96e:	6820      	ldr	r0, [r4, #0]
 800b970:	f008 f938 	bl	8013be4 <lv_mem_free>
    list->style_cnt = 0;
 800b974:	7923      	ldrb	r3, [r4, #4]
    list->style_list = NULL;
 800b976:	2200      	movs	r2, #0
    list->has_trans = 0;
 800b978:	f003 0380 	and.w	r3, r3, #128	; 0x80
    list->style_list = NULL;
 800b97c:	6022      	str	r2, [r4, #0]
    list->has_trans = 0;
 800b97e:	f362 13c7 	bfi	r3, r2, #7, #1
 800b982:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
 800b984:	7963      	ldrb	r3, [r4, #5]
 800b986:	f362 0300 	bfi	r3, r2, #0, #1
 800b98a:	7163      	strb	r3, [r4, #5]
}
 800b98c:	bd38      	pop	{r3, r4, r5, pc}

0800b98e <lv_style_list_copy>:
{
 800b98e:	b538      	push	{r3, r4, r5, lr}
 800b990:	460c      	mov	r4, r1
 800b992:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
 800b994:	f7ff ffcb 	bl	800b92e <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	b1eb      	cbz	r3, 800b9d8 <lv_style_list_copy+0x4a>
    if(list_src->has_local == 0) {
 800b99c:	7923      	ldrb	r3, [r4, #4]
 800b99e:	b25a      	sxtb	r2, r3
 800b9a0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 800b9a4:	065b      	lsls	r3, r3, #25
 800b9a6:	d429      	bmi.n	800b9fc <lv_style_list_copy+0x6e>
        if(list_src->has_trans) {
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	da16      	bge.n	800b9da <lv_style_list_copy+0x4c>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b9ac:	3801      	subs	r0, #1
 800b9ae:	0080      	lsls	r0, r0, #2
 800b9b0:	f008 f8ca 	bl	8013b48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b9b4:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b9b6:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b9b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b9bc:	6821      	ldr	r1, [r4, #0]
 800b9be:	3a01      	subs	r2, #1
 800b9c0:	3104      	adds	r1, #4
 800b9c2:	0092      	lsls	r2, r2, #2
 800b9c4:	f008 f998 	bl	8013cf8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b9c8:	7923      	ldrb	r3, [r4, #4]
 800b9ca:	792a      	ldrb	r2, [r5, #4]
 800b9cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	f363 0205 	bfi	r2, r3, #0, #6
 800b9d6:	712a      	strb	r2, [r5, #4]
}
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800b9da:	0080      	lsls	r0, r0, #2
 800b9dc:	f008 f8b4 	bl	8013b48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800b9e0:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800b9e2:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800b9e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b9e8:	6821      	ldr	r1, [r4, #0]
 800b9ea:	0092      	lsls	r2, r2, #2
 800b9ec:	f008 f984 	bl	8013cf8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 800b9f0:	7922      	ldrb	r2, [r4, #4]
 800b9f2:	792b      	ldrb	r3, [r5, #4]
 800b9f4:	f362 0305 	bfi	r3, r2, #0, #6
 800b9f8:	712b      	strb	r3, [r5, #4]
 800b9fa:	e7ed      	b.n	800b9d8 <lv_style_list_copy+0x4a>
        if(list_src->has_trans) {
 800b9fc:	2a00      	cmp	r2, #0
 800b9fe:	da22      	bge.n	800ba46 <lv_style_list_copy+0xb8>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800ba00:	3802      	subs	r0, #2
 800ba02:	0080      	lsls	r0, r0, #2
 800ba04:	f008 f8a0 	bl	8013b48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800ba08:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800ba0a:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800ba0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ba10:	6821      	ldr	r1, [r4, #0]
 800ba12:	3a02      	subs	r2, #2
 800ba14:	3108      	adds	r1, #8
 800ba16:	0092      	lsls	r2, r2, #2
 800ba18:	f008 f96e 	bl	8013cf8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 800ba1c:	7923      	ldrb	r3, [r4, #4]
 800ba1e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ba22:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
 800ba24:	792a      	ldrb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800ba26:	4628      	mov	r0, r5
            list_dest->style_cnt = list_src->style_cnt - 1;
 800ba28:	f363 0205 	bfi	r2, r3, #0, #6
 800ba2c:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800ba2e:	f7ff fd51 	bl	800b4d4 <get_alloc_local_style>
 800ba32:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 800ba34:	4620      	mov	r0, r4
 800ba36:	f7ff fd4d 	bl	800b4d4 <get_alloc_local_style>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	4628      	mov	r0, r5
}
 800ba3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 800ba42:	f7ff bd8c 	b.w	800b55e <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800ba46:	3801      	subs	r0, #1
 800ba48:	0080      	lsls	r0, r0, #2
 800ba4a:	f008 f87d 	bl	8013b48 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800ba4e:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800ba50:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800ba52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ba56:	6821      	ldr	r1, [r4, #0]
 800ba58:	3a01      	subs	r2, #1
 800ba5a:	3104      	adds	r1, #4
 800ba5c:	0092      	lsls	r2, r2, #2
 800ba5e:	f008 f94b 	bl	8013cf8 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800ba62:	7923      	ldrb	r3, [r4, #4]
 800ba64:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	e7db      	b.n	800ba24 <lv_style_list_copy+0x96>

0800ba6c <_lv_style_list_add_trans_style>:
{
 800ba6c:	b538      	push	{r3, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800ba6e:	f990 3004 	ldrsb.w	r3, [r0, #4]
{
 800ba72:	4605      	mov	r5, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da03      	bge.n	800ba80 <_lv_style_list_add_trans_style+0x14>
}
 800ba78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800ba7c:	f7ff bf4f 	b.w	800b91e <_lv_style_list_get_transition_style>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 800ba80:	2004      	movs	r0, #4
 800ba82:	f008 f861 	bl	8013b48 <lv_mem_alloc>
 800ba86:	4604      	mov	r4, r0
    LV_ASSERT_MEM(trans_style);
 800ba88:	f007 fdb6 	bl	80135f8 <lv_debug_check_null>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	b920      	cbnz	r0, 800ba9a <_lv_style_list_add_trans_style+0x2e>
 800ba90:	4622      	mov	r2, r4
 800ba92:	480c      	ldr	r0, [pc, #48]	; (800bac4 <_lv_style_list_add_trans_style+0x58>)
 800ba94:	f007 fdb4 	bl	8013600 <lv_debug_log_error>
 800ba98:	e7fe      	b.n	800ba98 <_lv_style_list_add_trans_style+0x2c>
    if(trans_style == NULL) {
 800ba9a:	b18c      	cbz	r4, 800bac0 <_lv_style_list_add_trans_style+0x54>
    lv_style_init(trans_style);
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f7ff fc87 	bl	800b3b0 <lv_style_init>
    _lv_style_list_add_style(list, trans_style);
 800baa2:	4621      	mov	r1, r4
 800baa4:	4628      	mov	r0, r5
 800baa6:	f7ff fcd7 	bl	800b458 <_lv_style_list_add_style>
    list->has_trans = 1;
 800baaa:	792b      	ldrb	r3, [r5, #4]
 800baac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab0:	712b      	strb	r3, [r5, #4]
    if(list->has_local) {
 800bab2:	065b      	lsls	r3, r3, #25
        lv_style_t * tmp = list->style_list[0];
 800bab4:	bf42      	ittt	mi
 800bab6:	682b      	ldrmi	r3, [r5, #0]
        list->style_list[0] = list->style_list[1];
 800bab8:	e9d3 2100 	ldrdmi	r2, r1, [r3]
        list->style_list[1] = tmp;
 800babc:	e9c3 1200 	strdmi	r1, r2, [r3]
}
 800bac0:	4620      	mov	r0, r4
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	0802c346 	.word	0x0802c346

0800bac8 <_lv_style_list_get_int>:
{
 800bac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	4689      	mov	r9, r1
 800bace:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 800bad0:	4605      	mov	r5, r0
 800bad2:	b318      	cbz	r0, 800bb1c <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 800bad4:	6800      	ldr	r0, [r0, #0]
 800bad6:	b308      	cbz	r0, 800bb1c <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
 800bad8:	2600      	movs	r6, #0
 800bada:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 800badc:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    int16_t weight = -1;
 800bae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    lv_style_int_t value_act = 0;
 800bae4:	f827 6d02 	strh.w	r6, [r7, #-2]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bae8:	792b      	ldrb	r3, [r5, #4]
 800baea:	fa0f f886 	sxth.w	r8, r6
 800baee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baf2:	4598      	cmp	r8, r3
 800baf4:	db03      	blt.n	800bafe <_lv_style_list_get_int+0x36>
    if(weight >= 0) return LV_RES_OK;
 800baf6:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 800baf8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800bafc:	e00e      	b.n	800bb1c <_lv_style_list_get_int+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bafe:	b2f1      	uxtb	r1, r6
 800bb00:	4628      	mov	r0, r5
 800bb02:	f7ff fbe2 	bl	800b2ca <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
 800bb06:	463a      	mov	r2, r7
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7ff fe9f 	bl	800b84c <_lv_style_get_int>
        if(weight_act == weight_goal) {
 800bb0e:	4583      	cmp	fp, r0
 800bb10:	d107      	bne.n	800bb22 <_lv_style_list_get_int+0x5a>
            *res = value_act;
 800bb12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            return LV_RES_OK;
 800bb16:	2001      	movs	r0, #1
            *res = value_act;
 800bb18:	f8aa 3000 	strh.w	r3, [sl]
}
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bb22:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	da07      	bge.n	800bb3a <_lv_style_list_get_int+0x72>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	db05      	blt.n	800bb3a <_lv_style_list_get_int+0x72>
 800bb2e:	f1b8 0f00 	cmp.w	r8, #0
 800bb32:	d102      	bne.n	800bb3a <_lv_style_list_get_int+0x72>
 800bb34:	796b      	ldrb	r3, [r5, #5]
 800bb36:	07db      	lsls	r3, r3, #31
 800bb38:	d5eb      	bpl.n	800bb12 <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
 800bb3a:	4284      	cmp	r4, r0
 800bb3c:	f106 0601 	add.w	r6, r6, #1
            *res = value_act;
 800bb40:	bfbe      	ittt	lt
 800bb42:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
 800bb46:	4604      	movlt	r4, r0
 800bb48:	f8aa 3000 	strhlt.w	r3, [sl]
 800bb4c:	e7cc      	b.n	800bae8 <_lv_style_list_get_int+0x20>

0800bb4e <_lv_style_list_get_color>:
{
 800bb4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb52:	4689      	mov	r9, r1
 800bb54:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 800bb56:	4605      	mov	r5, r0
 800bb58:	b318      	cbz	r0, 800bba2 <_lv_style_list_get_color+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	b308      	cbz	r0, 800bba2 <_lv_style_list_get_color+0x54>
    value_act.full = 0;
 800bb5e:	2600      	movs	r6, #0
 800bb60:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 800bb62:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    int16_t weight = -1;
 800bb66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    value_act.full = 0;
 800bb6a:	f827 6d04 	strh.w	r6, [r7, #-4]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bb6e:	792b      	ldrb	r3, [r5, #4]
 800bb70:	fa0f f886 	sxth.w	r8, r6
 800bb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb78:	4598      	cmp	r8, r3
 800bb7a:	db03      	blt.n	800bb84 <_lv_style_list_get_color+0x36>
    if(weight >= 0)  return LV_RES_OK;
 800bb7c:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 800bb7e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800bb82:	e00e      	b.n	800bba2 <_lv_style_list_get_color+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bb84:	b2f1      	uxtb	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	f7ff fb9f 	bl	800b2ca <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
 800bb8c:	463a      	mov	r2, r7
 800bb8e:	4649      	mov	r1, r9
 800bb90:	f7ff fe5c 	bl	800b84c <_lv_style_get_int>
        if(weight_act == weight_goal) {
 800bb94:	4583      	cmp	fp, r0
 800bb96:	d107      	bne.n	800bba8 <_lv_style_list_get_color+0x5a>
            *res = value_act;
 800bb98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            return LV_RES_OK;
 800bb9c:	2001      	movs	r0, #1
            *res = value_act;
 800bb9e:	f8aa 3000 	strh.w	r3, [sl]
}
 800bba2:	b003      	add	sp, #12
 800bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bba8:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	da07      	bge.n	800bbc0 <_lv_style_list_get_color+0x72>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	db05      	blt.n	800bbc0 <_lv_style_list_get_color+0x72>
 800bbb4:	f1b8 0f00 	cmp.w	r8, #0
 800bbb8:	d102      	bne.n	800bbc0 <_lv_style_list_get_color+0x72>
 800bbba:	796b      	ldrb	r3, [r5, #5]
 800bbbc:	07db      	lsls	r3, r3, #31
 800bbbe:	d5eb      	bpl.n	800bb98 <_lv_style_list_get_color+0x4a>
        else if(weight_act > weight) {
 800bbc0:	4284      	cmp	r4, r0
 800bbc2:	f106 0601 	add.w	r6, r6, #1
            *res = value_act;
 800bbc6:	bfbe      	ittt	lt
 800bbc8:	f8bd 3004 	ldrhlt.w	r3, [sp, #4]
 800bbcc:	4604      	movlt	r4, r0
 800bbce:	f8aa 3000 	strhlt.w	r3, [sl]
 800bbd2:	e7cc      	b.n	800bb6e <_lv_style_list_get_color+0x20>

0800bbd4 <_lv_style_list_get_opa>:
{
 800bbd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd8:	4689      	mov	r9, r1
 800bbda:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b318      	cbz	r0, 800bc28 <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	b308      	cbz	r0, 800bc28 <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
 800bbe4:	2600      	movs	r6, #0
 800bbe6:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 800bbe8:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    int16_t weight = -1;
 800bbec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    lv_opa_t value_act = LV_OPA_TRANSP;
 800bbf0:	f807 6d01 	strb.w	r6, [r7, #-1]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bbf4:	792b      	ldrb	r3, [r5, #4]
 800bbf6:	fa0f f886 	sxth.w	r8, r6
 800bbfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbfe:	4598      	cmp	r8, r3
 800bc00:	db03      	blt.n	800bc0a <_lv_style_list_get_opa+0x36>
    if(weight >= 0)  return LV_RES_OK;
 800bc02:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 800bc04:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800bc08:	e00e      	b.n	800bc28 <_lv_style_list_get_opa+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bc0a:	b2f1      	uxtb	r1, r6
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f7ff fb5c 	bl	800b2ca <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
 800bc12:	463a      	mov	r2, r7
 800bc14:	4649      	mov	r1, r9
 800bc16:	f7ff fe38 	bl	800b88a <_lv_style_get_opa>
        if(weight_act == weight_goal) {
 800bc1a:	4583      	cmp	fp, r0
 800bc1c:	d107      	bne.n	800bc2e <_lv_style_list_get_opa+0x5a>
            *res = value_act;
 800bc1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
            return LV_RES_OK;
 800bc22:	2001      	movs	r0, #1
            *res = value_act;
 800bc24:	f88a 3000 	strb.w	r3, [sl]
}
 800bc28:	b003      	add	sp, #12
 800bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bc2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	da07      	bge.n	800bc46 <_lv_style_list_get_opa+0x72>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	db05      	blt.n	800bc46 <_lv_style_list_get_opa+0x72>
 800bc3a:	f1b8 0f00 	cmp.w	r8, #0
 800bc3e:	d102      	bne.n	800bc46 <_lv_style_list_get_opa+0x72>
 800bc40:	796b      	ldrb	r3, [r5, #5]
 800bc42:	07db      	lsls	r3, r3, #31
 800bc44:	d5eb      	bpl.n	800bc1e <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
 800bc46:	4284      	cmp	r4, r0
 800bc48:	f106 0601 	add.w	r6, r6, #1
            *res = value_act;
 800bc4c:	bfbe      	ittt	lt
 800bc4e:	f89d 3007 	ldrblt.w	r3, [sp, #7]
 800bc52:	4604      	movlt	r4, r0
 800bc54:	f88a 3000 	strblt.w	r3, [sl]
 800bc58:	e7cc      	b.n	800bbf4 <_lv_style_list_get_opa+0x20>

0800bc5a <_lv_style_list_get_ptr>:
{
 800bc5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc5e:	4688      	mov	r8, r1
 800bc60:	4691      	mov	r9, r2
    if(list == NULL) return LV_RES_INV;
 800bc62:	4605      	mov	r5, r0
 800bc64:	b1f0      	cbz	r0, 800bca4 <_lv_style_list_get_ptr+0x4a>
    if(list->style_list == NULL) return LV_RES_INV;
 800bc66:	6800      	ldr	r0, [r0, #0]
 800bc68:	b1e0      	cbz	r0, 800bca4 <_lv_style_list_get_ptr+0x4a>
    int16_t weight_goal = attr;
 800bc6a:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bc6e:	2600      	movs	r6, #0
    int16_t weight = -1;
 800bc70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bc74:	792b      	ldrb	r3, [r5, #4]
 800bc76:	b237      	sxth	r7, r6
 800bc78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc7c:	429f      	cmp	r7, r3
 800bc7e:	db03      	blt.n	800bc88 <_lv_style_list_get_ptr+0x2e>
    if(weight >= 0)  return LV_RES_OK;
 800bc80:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 800bc82:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800bc86:	e00d      	b.n	800bca4 <_lv_style_list_get_ptr+0x4a>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bc88:	b2f1      	uxtb	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f7ff fb1d 	bl	800b2ca <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
 800bc90:	aa01      	add	r2, sp, #4
 800bc92:	4641      	mov	r1, r8
 800bc94:	f7ff fe18 	bl	800b8c8 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
 800bc98:	4582      	cmp	sl, r0
 800bc9a:	d106      	bne.n	800bcaa <_lv_style_list_get_ptr+0x50>
            *res = value_act;
 800bc9c:	9b01      	ldr	r3, [sp, #4]
            return LV_RES_OK;
 800bc9e:	2001      	movs	r0, #1
            *res = value_act;
 800bca0:	f8c9 3000 	str.w	r3, [r9]
}
 800bca4:	b002      	add	sp, #8
 800bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bcaa:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	da05      	bge.n	800bcbe <_lv_style_list_get_ptr+0x64>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	db03      	blt.n	800bcbe <_lv_style_list_get_ptr+0x64>
 800bcb6:	b917      	cbnz	r7, 800bcbe <_lv_style_list_get_ptr+0x64>
 800bcb8:	796b      	ldrb	r3, [r5, #5]
 800bcba:	07db      	lsls	r3, r3, #31
 800bcbc:	d5ee      	bpl.n	800bc9c <_lv_style_list_get_ptr+0x42>
        else if(weight_act > weight) {
 800bcbe:	4284      	cmp	r4, r0
 800bcc0:	f106 0601 	add.w	r6, r6, #1
            *res = value_act;
 800bcc4:	bfbe      	ittt	lt
 800bcc6:	9b01      	ldrlt	r3, [sp, #4]
 800bcc8:	4604      	movlt	r4, r0
 800bcca:	f8c9 3000 	strlt.w	r3, [r9]
 800bcce:	e7d1      	b.n	800bc74 <_lv_style_list_get_ptr+0x1a>

0800bcd0 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bcd2:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 800bcd6:	f3c1 24c4 	ubfx	r4, r1, #11, #5
 800bcda:	f3c0 23c4 	ubfx	r3, r0, #11, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bcde:	f3c1 1745 	ubfx	r7, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bce2:	4374      	muls	r4, r6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bce4:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bce8:	4377      	muls	r7, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bcea:	f248 0581 	movw	r5, #32897	; 0x8081
 800bcee:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bcf2:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bcf6:	434e      	muls	r6, r1
 800bcf8:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bcfc:	fb04 7402 	mla	r4, r4, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd00:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd02:	fb00 6202 	mla	r2, r0, r2, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800bd06:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd0a:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd0c:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd0e:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd10:	436c      	muls	r4, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd12:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd16:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd18:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd1c:	0dd2      	lsrs	r2, r2, #23
    return ret;
 800bd1e:	f362 0004 	bfi	r0, r2, #0, #5
 800bd22:	f364 104a 	bfi	r0, r4, #5, #6
 800bd26:	f363 20cf 	bfi	r0, r3, #11, #5
}
 800bd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd2c <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800bd2c:	b4f0      	push	{r4, r5, r6, r7}

    if(opa <= LV_OPA_MIN) return bg;
 800bd2e:	2a02      	cmp	r2, #2
{
 800bd30:	460d      	mov	r5, r1
 800bd32:	f005 071f 	and.w	r7, r5, #31
 800bd36:	f3c5 1c45 	ubfx	ip, r5, #5, #6
 800bd3a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 800bd3e:	d809      	bhi.n	800bd54 <color_blend_true_color_additive+0x28>
 800bd40:	f04f 0000 	mov.w	r0, #0
 800bd44:	f367 0004 	bfi	r0, r7, #0, #5
 800bd48:	f36c 104a 	bfi	r0, ip, #5, #6
 800bd4c:	f365 20cf 	bfi	r0, r5, #11, #5
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 800bd50:	bcf0      	pop	{r4, r5, r6, r7}
 800bd52:	4770      	bx	lr
    tmp = bg.ch.red + fg.ch.red;
 800bd54:	f3c0 23c4 	ubfx	r3, r0, #11, #5
    tmp = bg.ch.green + fg.ch.green;
 800bd58:	f3c0 1445 	ubfx	r4, r0, #5, #6
    tmp = bg.ch.red + fg.ch.red;
 800bd5c:	442b      	add	r3, r5
    tmp = bg.ch.green + fg.ch.green;
 800bd5e:	4464      	add	r4, ip
    tmp = bg.ch.blue + fg.ch.blue;
 800bd60:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 800bd64:	2b1f      	cmp	r3, #31
    tmp = bg.ch.blue + fg.ch.blue;
 800bd66:	443d      	add	r5, r7
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 800bd68:	bf28      	it	cs
 800bd6a:	231f      	movcs	r3, #31
    fg.ch.green = LV_MATH_MIN(tmp, 63);
 800bd6c:	2c3f      	cmp	r4, #63	; 0x3f
 800bd6e:	bf28      	it	cs
 800bd70:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
 800bd72:	2d1f      	cmp	r5, #31
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 800bd74:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
 800bd78:	bf28      	it	cs
 800bd7a:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 800bd7c:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green = LV_MATH_MIN(tmp, 63);
 800bd7e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
 800bd82:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 800bd86:	d108      	bne.n	800bd9a <color_blend_true_color_additive+0x6e>
 800bd88:	f04f 0000 	mov.w	r0, #0
 800bd8c:	f365 0004 	bfi	r0, r5, #0, #5
 800bd90:	f364 104a 	bfi	r0, r4, #5, #6
 800bd94:	f363 20cf 	bfi	r0, r3, #11, #5
 800bd98:	e7da      	b.n	800bd50 <color_blend_true_color_additive+0x24>
    return lv_color_mix(fg, bg, opa);
 800bd9a:	f365 0004 	bfi	r0, r5, #0, #5
 800bd9e:	f364 104a 	bfi	r0, r4, #5, #6
}
 800bda2:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 800bda4:	f363 20cf 	bfi	r0, r3, #11, #5
 800bda8:	f7ff bf92 	b.w	800bcd0 <lv_color_mix>

0800bdac <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800bdac:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 800bdae:	2a02      	cmp	r2, #2
{
 800bdb0:	b4f0      	push	{r4, r5, r6, r7}
 800bdb2:	f003 051f 	and.w	r5, r3, #31
 800bdb6:	f3c3 1445 	ubfx	r4, r3, #5, #6
 800bdba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 800bdbe:	d809      	bhi.n	800bdd4 <color_blend_true_color_subtractive+0x28>
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    fg.ch.blue = LV_MATH_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;
 800bdc0:	f04f 0000 	mov.w	r0, #0
 800bdc4:	f365 0004 	bfi	r0, r5, #0, #5
 800bdc8:	f364 104a 	bfi	r0, r4, #5, #6

    return lv_color_mix(fg, bg, opa);
}
 800bdcc:	bcf0      	pop	{r4, r5, r6, r7}
    if(opa == LV_OPA_COVER) return fg;
 800bdce:	f363 20cf 	bfi	r0, r3, #11, #5
}
 800bdd2:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 800bdd4:	f3c0 27c4 	ubfx	r7, r0, #11, #5
    if(opa == LV_OPA_COVER) return fg;
 800bdd8:	2aff      	cmp	r2, #255	; 0xff
    tmp = bg.ch.red - fg.ch.red;
 800bdda:	eba3 0307 	sub.w	r3, r3, r7
    tmp = bg.ch.green - fg.ch.green;
 800bdde:	f3c0 1745 	ubfx	r7, r0, #5, #6
 800bde2:	eba4 0407 	sub.w	r4, r4, r7
    tmp = bg.ch.blue - fg.ch.blue;
 800bde6:	f000 071f 	and.w	r7, r0, #31
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800bdea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    tmp = bg.ch.blue - fg.ch.blue;
 800bdee:	eba5 0507 	sub.w	r5, r5, r7
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 800bdf2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800bdf6:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800bdfa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 800bdfe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800be02:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 800be06:	d0db      	beq.n	800bdc0 <color_blend_true_color_subtractive+0x14>
    return lv_color_mix(fg, bg, opa);
 800be08:	f365 0004 	bfi	r0, r5, #0, #5
 800be0c:	f364 104a 	bfi	r0, r4, #5, #6
}
 800be10:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 800be12:	f363 20cf 	bfi	r0, r3, #11, #5
 800be16:	f7ff bf5b 	b.w	800bcd0 <lv_color_mix>
	...

0800be1c <_lv_blend_fill>:
{
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	b08d      	sub	sp, #52	; 0x34
 800be22:	461f      	mov	r7, r3
 800be24:	4604      	mov	r4, r0
 800be26:	460d      	mov	r5, r1
 800be28:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800be2c:	4693      	mov	fp, r2
 800be2e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800be32:	9307      	str	r3, [sp, #28]
 800be34:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if(opa < LV_OPA_MIN) return;
 800be38:	2b01      	cmp	r3, #1
{
 800be3a:	9304      	str	r3, [sp, #16]
    if(opa < LV_OPA_MIN) return;
 800be3c:	f240 80b8 	bls.w	800bfb0 <_lv_blend_fill+0x194>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800be40:	9b07      	ldr	r3, [sp, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 80b4 	beq.w	800bfb0 <_lv_blend_fill+0x194>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800be48:	f7ff f810 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800be4c:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800be4e:	f006 fe45 	bl	8012adc <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 800be52:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800be54:	4680      	mov	r8, r0
    lv_color_t * disp_buf = vdb->buf_act;
 800be56:	9305      	str	r3, [sp, #20]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800be58:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800be5c:	b10b      	cbz	r3, 800be62 <_lv_blend_fill+0x46>
 800be5e:	4648      	mov	r0, r9
 800be60:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 800be62:	462a      	mov	r2, r5
 800be64:	4621      	mov	r1, r4
 800be66:	a80a      	add	r0, sp, #40	; 0x28
 800be68:	f007 f943 	bl	80130f2 <_lv_area_intersect>
    if(!is_common) return;
 800be6c:	2800      	cmp	r0, #0
 800be6e:	f000 809f 	beq.w	800bfb0 <_lv_blend_fill+0x194>
    draw_area.x1 -= disp_area->x1;
 800be72:	f8b8 5010 	ldrh.w	r5, [r8, #16]
 800be76:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
 800be7a:	f8b8 1012 	ldrh.w	r1, [r8, #18]
 800be7e:	f8bd e02a 	ldrh.w	lr, [sp, #42]	; 0x2a
    draw_area.x1 -= disp_area->x1;
 800be82:	1b52      	subs	r2, r2, r5
    draw_area.x2 -= disp_area->x1;
 800be84:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 800be88:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
    draw_area.y1 -= disp_area->y1;
 800be8c:	ebae 0e01 	sub.w	lr, lr, r1
    draw_area.x1 -= disp_area->x1;
 800be90:	b292      	uxth	r2, r2
    draw_area.x2 -= disp_area->x1;
 800be92:	1b5b      	subs	r3, r3, r5
    draw_area.y1 -= disp_area->y1;
 800be94:	fa1f fe8e 	uxth.w	lr, lr
    draw_area.y2 -= disp_area->y1;
 800be98:	ebac 0c01 	sub.w	ip, ip, r1
    draw_area.x1 -= disp_area->x1;
 800be9c:	b210      	sxth	r0, r2
    draw_area.y1 -= disp_area->y1;
 800be9e:	fa0f fa8e 	sxth.w	sl, lr
    draw_area.x2 -= disp_area->x1;
 800bea2:	b29b      	uxth	r3, r3
    draw_area.x1 -= disp_area->x1;
 800bea4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    draw_area.y2 -= disp_area->y1;
 800bea8:	fa1f fc8c 	uxth.w	ip, ip
    draw_area.y1 -= disp_area->y1;
 800beac:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
 800beb0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 800beb4:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
    if(mask && disp->driver.antialiasing == 0)
 800beb8:	2f00      	cmp	r7, #0
 800beba:	d151      	bne.n	800bf60 <_lv_blend_fill+0x144>
    if(disp->driver.set_px_cb) {
 800bebc:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d161      	bne.n	800bf88 <_lv_blend_fill+0x16c>
 800bec4:	f8b8 5014 	ldrh.w	r5, [r8, #20]
 800bec8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800becc:	46d0      	mov	r8, sl
 800bece:	3501      	adds	r5, #1
 800bed0:	1a6d      	subs	r5, r5, r1
 800bed2:	b22d      	sxth	r5, r5
 800bed4:	fb05 f10a 	mul.w	r1, r5, sl
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800bed8:	2e00      	cmp	r6, #0
 800beda:	f040 81be 	bne.w	800c25a <_lv_blend_fill+0x43e>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bede:	f10c 0c01 	add.w	ip, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bee2:	3301      	adds	r3, #1
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800bee4:	fb05 0a0a 	mla	sl, r5, sl, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bee8:	ebac 0e0e 	sub.w	lr, ip, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800beec:	1a9a      	subs	r2, r3, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800beee:	fa0f f38e 	sxth.w	r3, lr
 800bef2:	fa0f f982 	sxth.w	r9, r2
 800bef6:	9308      	str	r3, [sp, #32]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800bef8:	9b05      	ldr	r3, [sp, #20]
 800befa:	eb03 044a 	add.w	r4, r3, sl, lsl #1
 800befe:	006b      	lsls	r3, r5, #1
 800bf00:	9306      	str	r3, [sp, #24]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800bf02:	9b07      	ldr	r3, [sp, #28]
 800bf04:	2b01      	cmp	r3, #1
        if(opa > LV_OPA_MAX) {
 800bf06:	9b04      	ldr	r3, [sp, #16]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800bf08:	f040 80e8 	bne.w	800c0dc <_lv_blend_fill+0x2c0>
        if(opa > LV_OPA_MAX) {
 800bf0c:	2bfd      	cmp	r3, #253	; 0xfd
 800bf0e:	f200 809f 	bhi.w	800c050 <_lv_blend_fill+0x234>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800bf12:	9a04      	ldr	r2, [sp, #16]
 800bf14:	4631      	mov	r1, r6
 800bf16:	4658      	mov	r0, fp
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 800bf18:	f8ad 6014 	strh.w	r6, [sp, #20]
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800bf1c:	f7ff fed8 	bl	800bcd0 <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800bf20:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800bf24:	f3cb 21c4 	ubfx	r1, fp, #11, #5
 800bf28:	f000 031f 	and.w	r3, r0, #31
 800bf2c:	f3c0 1e45 	ubfx	lr, r0, #5, #6
 800bf30:	f3c0 2ac4 	ubfx	sl, r0, #11, #5
 800bf34:	4351      	muls	r1, r2
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800bf36:	f248 0881 	movw	r8, #32897	; 0x8081
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800bf3a:	9107      	str	r1, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800bf3c:	f3cb 1145 	ubfx	r1, fp, #5, #6
 800bf40:	4351      	muls	r1, r2
 800bf42:	9109      	str	r1, [sp, #36]	; 0x24
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800bf44:	f00b 011f 	and.w	r1, fp, #31
 800bf48:	fb01 fb02 	mul.w	fp, r1, r2
            lv_opa_t opa_inv = 255 - opa;
 800bf4c:	9a04      	ldr	r2, [sp, #16]
 800bf4e:	43d5      	mvns	r5, r2
 800bf50:	b2ed      	uxtb	r5, r5
            for(y = 0; y < draw_area_h; y++) {
 800bf52:	9a08      	ldr	r2, [sp, #32]
 800bf54:	42b2      	cmp	r2, r6
 800bf56:	dd2b      	ble.n	800bfb0 <_lv_blend_fill+0x194>
 800bf58:	4627      	mov	r7, r4
                for(x = 0; x < draw_area_w; x++) {
 800bf5a:	f04f 0c00 	mov.w	ip, #0
 800bf5e:	e0b7      	b.n	800c0d0 <_lv_blend_fill+0x2b4>
    if(mask && disp->driver.antialiasing == 0)
 800bf60:	f899 1008 	ldrb.w	r1, [r9, #8]
 800bf64:	07c9      	lsls	r1, r1, #31
 800bf66:	d4a9      	bmi.n	800bebc <_lv_blend_fill+0xa0>
 800bf68:	1c5d      	adds	r5, r3, #1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	1aad      	subs	r5, r5, r2
        int32_t mask_w = lv_area_get_width(&draw_area);
 800bf6e:	b22d      	sxth	r5, r5
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800bf70:	1bcc      	subs	r4, r1, r7
 800bf72:	42a5      	cmp	r5, r4
 800bf74:	dda2      	ble.n	800bebc <_lv_blend_fill+0xa0>
 800bf76:	780c      	ldrb	r4, [r1, #0]
 800bf78:	2c80      	cmp	r4, #128	; 0x80
 800bf7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf7e:	bf98      	it	ls
 800bf80:	2400      	movls	r4, #0
 800bf82:	f801 4b01 	strb.w	r4, [r1], #1
 800bf86:	e7f3      	b.n	800bf70 <_lv_blend_fill+0x154>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800bf88:	f7fe ff70 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800bf8c:	f8b8 5014 	ldrh.w	r5, [r8, #20]
 800bf90:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800bf94:	4681      	mov	r9, r0
 800bf96:	3501      	adds	r5, #1
 800bf98:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 800bf9c:	1aed      	subs	r5, r5, r3
 800bf9e:	b22b      	sxth	r3, r5
 800bfa0:	9306      	str	r3, [sp, #24]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800bfa2:	9b07      	ldr	r3, [sp, #28]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d11d      	bne.n	800bfe4 <_lv_blend_fill+0x1c8>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800bfa8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800bfac:	429c      	cmp	r4, r3
 800bfae:	dd02      	ble.n	800bfb6 <_lv_blend_fill+0x19a>
}
 800bfb0:	b00d      	add	sp, #52	; 0x34
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800bfb6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800bfba:	b226      	sxth	r6, r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800bfbc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800bfc0:	429f      	cmp	r7, r3
 800bfc2:	dd01      	ble.n	800bfc8 <_lv_blend_fill+0x1ac>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800bfc4:	3401      	adds	r4, #1
 800bfc6:	e7ef      	b.n	800bfa8 <_lv_blend_fill+0x18c>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f8ad b004 	strh.w	fp, [sp, #4]
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	b23b      	sxth	r3, r7
 800bfd4:	9600      	str	r6, [sp, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800bfd6:	3701      	adds	r7, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800bfd8:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800bfdc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800bfe0:	47a8      	blx	r5
 800bfe2:	e7eb      	b.n	800bfbc <_lv_blend_fill+0x1a0>
 800bfe4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800bfe8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800bfec:	3601      	adds	r6, #1
 800bfee:	1aff      	subs	r7, r7, r3
 800bff0:	1af6      	subs	r6, r6, r3
 800bff2:	b236      	sxth	r6, r6
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800bff4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800bff8:	429c      	cmp	r4, r3
 800bffa:	dcd9      	bgt.n	800bfb0 <_lv_blend_fill+0x194>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800bffc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800c000:	fa0f fa84 	sxth.w	sl, r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c004:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800c008:	4598      	cmp	r8, r3
 800c00a:	dd02      	ble.n	800c012 <_lv_blend_fill+0x1f6>
            mask_tmp += draw_area_w;
 800c00c:	4437      	add	r7, r6
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c00e:	3401      	adds	r4, #1
 800c010:	e7f0      	b.n	800bff4 <_lv_blend_fill+0x1d8>
                if(mask_tmp[x]) {
 800c012:	f817 3008 	ldrb.w	r3, [r7, r8]
 800c016:	b183      	cbz	r3, 800c03a <_lv_blend_fill+0x21e>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800c018:	9a04      	ldr	r2, [sp, #16]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800c01a:	4648      	mov	r0, r9
 800c01c:	f8ad b004 	strh.w	fp, [sp, #4]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800c020:	fb12 f303 	smulbb	r3, r2, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800c024:	f8cd a000 	str.w	sl, [sp]
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800c02e:	9302      	str	r3, [sp, #8]
 800c030:	fa0f f388 	sxth.w	r3, r8
 800c034:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800c038:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c03a:	f108 0801 	add.w	r8, r8, #1
 800c03e:	e7e1      	b.n	800c004 <_lv_blend_fill+0x1e8>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800c040:	4620      	mov	r0, r4
 800c042:	464a      	mov	r2, r9
 800c044:	4659      	mov	r1, fp
            for(y = 0; y < draw_area_h; y++) {
 800c046:	3601      	adds	r6, #1
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800c048:	f007 faa7 	bl	801359a <lv_color_fill>
                disp_buf_first += disp_w;
 800c04c:	9b06      	ldr	r3, [sp, #24]
 800c04e:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
 800c050:	9b08      	ldr	r3, [sp, #32]
 800c052:	42b3      	cmp	r3, r6
 800c054:	dcf4      	bgt.n	800c040 <_lv_blend_fill+0x224>
 800c056:	e7ab      	b.n	800bfb0 <_lv_blend_fill+0x194>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 800c058:	4639      	mov	r1, r7
 800c05a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800c05e:	3702      	adds	r7, #2
 800c060:	880a      	ldrh	r2, [r1, #0]
 800c062:	4290      	cmp	r0, r2
 800c064:	d025      	beq.n	800c0b2 <_lv_blend_fill+0x296>
                        last_dest_color = disp_buf_first[x];
 800c066:	f837 3c02 	ldrh.w	r3, [r7, #-2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c06a:	f3c2 1e45 	ubfx	lr, r2, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c06e:	f891 a001 	ldrb.w	sl, [r1, #1]
 800c072:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c076:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 800c07a:	9b07      	ldr	r3, [sp, #28]
 800c07c:	fb0a 3a05 	mla	sl, sl, r5, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c082:	fb0e 3e05 	mla	lr, lr, r5, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c086:	780b      	ldrb	r3, [r1, #0]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c088:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c08c:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c090:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c094:	fb08 fa0a 	mul.w	sl, r8, sl
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c098:	fb03 b305 	mla	r3, r3, r5, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c09c:	fb08 fe0e 	mul.w	lr, r8, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c0a0:	f3ca 5ac4 	ubfx	sl, sl, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c0a4:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c0a6:	f3ce 5ec5 	ubfx	lr, lr, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c0aa:	fb08 f303 	mul.w	r3, r8, r3
 800c0ae:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    disp_buf_first[x] = last_res_color;
 800c0b2:	780a      	ldrb	r2, [r1, #0]
                for(x = 0; x < draw_area_w; x++) {
 800c0b4:	f10c 0c01 	add.w	ip, ip, #1
                    disp_buf_first[x] = last_res_color;
 800c0b8:	f363 0204 	bfi	r2, r3, #0, #5
 800c0bc:	700a      	strb	r2, [r1, #0]
 800c0be:	880a      	ldrh	r2, [r1, #0]
 800c0c0:	f36e 124a 	bfi	r2, lr, #5, #6
 800c0c4:	800a      	strh	r2, [r1, #0]
 800c0c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c0ca:	f36a 02c7 	bfi	r2, sl, #3, #5
 800c0ce:	704a      	strb	r2, [r1, #1]
                for(x = 0; x < draw_area_w; x++) {
 800c0d0:	45e1      	cmp	r9, ip
 800c0d2:	dcc1      	bgt.n	800c058 <_lv_blend_fill+0x23c>
                disp_buf_first += disp_w;
 800c0d4:	9a06      	ldr	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800c0d6:	3601      	adds	r6, #1
                disp_buf_first += disp_w;
 800c0d8:	4414      	add	r4, r2
 800c0da:	e73a      	b.n	800bf52 <_lv_blend_fill+0x136>
        if(opa > LV_OPA_MAX) {
 800c0dc:	2bfd      	cmp	r3, #253	; 0xfd
 800c0de:	f200 8096 	bhi.w	800c20e <_lv_blend_fill+0x3f2>
        last_dest_color.full = disp_buf_first[0].full;
 800c0e2:	9b05      	ldr	r3, [sp, #20]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800c0e4:	4631      	mov	r1, r6
        last_dest_color.full = disp_buf_first[0].full;
 800c0e6:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
        last_res_color.full = disp_buf_first[0].full;
 800c0ea:	4610      	mov	r0, r2
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c0ec:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800c0f0:	4598      	cmp	r8, r3
 800c0f2:	f73f af5d 	bgt.w	800bfb0 <_lv_blend_fill+0x194>
 800c0f6:	4625      	mov	r5, r4
 800c0f8:	46ba      	mov	sl, r7
 800c0fa:	e0a4      	b.n	800c246 <_lv_blend_fill+0x42a>
                    FILL_NORMAL_MASK_PX(x, color)
 800c0fc:	f834 1015 	ldrh.w	r1, [r4, r5, lsl #1]
 800c100:	4658      	mov	r0, fp
 800c102:	f7ff fde5 	bl	800bcd0 <lv_color_mix>
 800c106:	f824 0015 	strh.w	r0, [r4, r5, lsl #1]
 800c10a:	e009      	b.n	800c120 <_lv_blend_fill+0x304>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c10c:	f018 0f03 	tst.w	r8, #3
 800c110:	d00a      	beq.n	800c128 <_lv_blend_fill+0x30c>
                    FILL_NORMAL_MASK_PX(x, color)
 800c112:	f818 2b01 	ldrb.w	r2, [r8], #1
 800c116:	b11a      	cbz	r2, 800c120 <_lv_blend_fill+0x304>
 800c118:	2aff      	cmp	r2, #255	; 0xff
 800c11a:	d1ef      	bne.n	800c0fc <_lv_blend_fill+0x2e0>
 800c11c:	f824 b015 	strh.w	fp, [r4, r5, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c120:	3501      	adds	r5, #1
 800c122:	45a9      	cmp	r9, r5
 800c124:	46c2      	mov	sl, r8
 800c126:	dcf1      	bgt.n	800c10c <_lv_blend_fill+0x2f0>
 800c128:	eb04 0845 	add.w	r8, r4, r5, lsl #1
                for(; x <= x_end4; x += 4) {
 800c12c:	9b04      	ldr	r3, [sp, #16]
 800c12e:	42ab      	cmp	r3, r5
 800c130:	da0e      	bge.n	800c150 <_lv_blend_fill+0x334>
                    FILL_NORMAL_MASK_PX(x, color)
 800c132:	ebaa 0805 	sub.w	r8, sl, r5
                for(; x < draw_area_w ; x++) {
 800c136:	45a9      	cmp	r9, r5
 800c138:	dc58      	bgt.n	800c1ec <_lv_blend_fill+0x3d0>
                disp_buf_first += disp_w;
 800c13a:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
 800c13c:	444f      	add	r7, r9
            for(y = 0; y < draw_area_h; y++) {
 800c13e:	3601      	adds	r6, #1
                disp_buf_first += disp_w;
 800c140:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
 800c142:	9b08      	ldr	r3, [sp, #32]
 800c144:	42b3      	cmp	r3, r6
 800c146:	f77f af33 	ble.w	800bfb0 <_lv_blend_fill+0x194>
 800c14a:	46b8      	mov	r8, r7
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c14c:	2500      	movs	r5, #0
 800c14e:	e7e8      	b.n	800c122 <_lv_blend_fill+0x306>
                    if(*mask32) {
 800c150:	f8da 3000 	ldr.w	r3, [sl]
 800c154:	b14b      	cbz	r3, 800c16a <_lv_blend_fill+0x34e>
                        if((*mask32) == 0xFFFFFFFF) {
 800c156:	3301      	adds	r3, #1
 800c158:	d10d      	bne.n	800c176 <_lv_blend_fill+0x35a>
                            disp_buf_first[x] = color;
 800c15a:	f8a8 b000 	strh.w	fp, [r8]
                            disp_buf_first[x + 1] = color;
 800c15e:	f8a8 b002 	strh.w	fp, [r8, #2]
                            disp_buf_first[x + 2] = color;
 800c162:	f8a8 b004 	strh.w	fp, [r8, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800c166:	f8a8 b006 	strh.w	fp, [r8, #6]
                    mask32++;
 800c16a:	f10a 0a04 	add.w	sl, sl, #4
                for(; x <= x_end4; x += 4) {
 800c16e:	3504      	adds	r5, #4
 800c170:	f108 0808 	add.w	r8, r8, #8
 800c174:	e7da      	b.n	800c12c <_lv_blend_fill+0x310>
                            FILL_NORMAL_MASK_PX(x, color)
 800c176:	f89a 2000 	ldrb.w	r2, [sl]
 800c17a:	b11a      	cbz	r2, 800c184 <_lv_blend_fill+0x368>
 800c17c:	2aff      	cmp	r2, #255	; 0xff
 800c17e:	d11d      	bne.n	800c1bc <_lv_blend_fill+0x3a0>
 800c180:	f8a8 b000 	strh.w	fp, [r8]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800c184:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c188:	b11a      	cbz	r2, 800c192 <_lv_blend_fill+0x376>
 800c18a:	2aff      	cmp	r2, #255	; 0xff
 800c18c:	d11e      	bne.n	800c1cc <_lv_blend_fill+0x3b0>
 800c18e:	f8a8 b002 	strh.w	fp, [r8, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800c192:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c196:	b11a      	cbz	r2, 800c1a0 <_lv_blend_fill+0x384>
 800c198:	2aff      	cmp	r2, #255	; 0xff
 800c19a:	d11f      	bne.n	800c1dc <_lv_blend_fill+0x3c0>
 800c19c:	f8a8 b004 	strh.w	fp, [r8, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800c1a0:	f89a 2003 	ldrb.w	r2, [sl, #3]
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	d0e0      	beq.n	800c16a <_lv_blend_fill+0x34e>
 800c1a8:	2aff      	cmp	r2, #255	; 0xff
 800c1aa:	d0dc      	beq.n	800c166 <_lv_blend_fill+0x34a>
 800c1ac:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800c1b0:	4658      	mov	r0, fp
 800c1b2:	f7ff fd8d 	bl	800bcd0 <lv_color_mix>
 800c1b6:	f8a8 0006 	strh.w	r0, [r8, #6]
 800c1ba:	e7d6      	b.n	800c16a <_lv_blend_fill+0x34e>
                            FILL_NORMAL_MASK_PX(x, color)
 800c1bc:	f8b8 1000 	ldrh.w	r1, [r8]
 800c1c0:	4658      	mov	r0, fp
 800c1c2:	f7ff fd85 	bl	800bcd0 <lv_color_mix>
 800c1c6:	f8a8 0000 	strh.w	r0, [r8]
 800c1ca:	e7db      	b.n	800c184 <_lv_blend_fill+0x368>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800c1cc:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f7ff fd7d 	bl	800bcd0 <lv_color_mix>
 800c1d6:	f8a8 0002 	strh.w	r0, [r8, #2]
 800c1da:	e7da      	b.n	800c192 <_lv_blend_fill+0x376>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800c1dc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c1e0:	4658      	mov	r0, fp
 800c1e2:	f7ff fd75 	bl	800bcd0 <lv_color_mix>
 800c1e6:	f8a8 0004 	strh.w	r0, [r8, #4]
 800c1ea:	e7d9      	b.n	800c1a0 <_lv_blend_fill+0x384>
                    FILL_NORMAL_MASK_PX(x, color)
 800c1ec:	f818 2005 	ldrb.w	r2, [r8, r5]
 800c1f0:	b11a      	cbz	r2, 800c1fa <_lv_blend_fill+0x3de>
 800c1f2:	2aff      	cmp	r2, #255	; 0xff
 800c1f4:	d103      	bne.n	800c1fe <_lv_blend_fill+0x3e2>
 800c1f6:	f824 b015 	strh.w	fp, [r4, r5, lsl #1]
                for(; x < draw_area_w ; x++) {
 800c1fa:	3501      	adds	r5, #1
 800c1fc:	e79b      	b.n	800c136 <_lv_blend_fill+0x31a>
                    FILL_NORMAL_MASK_PX(x, color)
 800c1fe:	f834 1015 	ldrh.w	r1, [r4, r5, lsl #1]
 800c202:	4658      	mov	r0, fp
 800c204:	f7ff fd64 	bl	800bcd0 <lv_color_mix>
 800c208:	f824 0015 	strh.w	r0, [r4, r5, lsl #1]
 800c20c:	e7f5      	b.n	800c1fa <_lv_blend_fill+0x3de>
        int32_t x_end4 = draw_area_w - 4;
 800c20e:	f1a9 0304 	sub.w	r3, r9, #4
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	e795      	b.n	800c142 <_lv_blend_fill+0x326>
                    if(*mask_tmp_x) {
 800c216:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800c21a:	b19b      	cbz	r3, 800c244 <_lv_blend_fill+0x428>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800c21c:	428b      	cmp	r3, r1
 800c21e:	f000 808d 	beq.w	800c33c <_lv_blend_fill+0x520>
 800c222:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800c224:	bf17      	itett	ne
 800c226:	9a04      	ldrne	r2, [sp, #16]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800c228:	9e04      	ldreq	r6, [sp, #16]
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800c22a:	fb13 f602 	smulbbne	r6, r3, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800c22e:	0a36      	lsrne	r6, r6, #8
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 800c230:	4632      	mov	r2, r6
 800c232:	8829      	ldrh	r1, [r5, #0]
 800c234:	4658      	mov	r0, fp
 800c236:	f7ff fd4b 	bl	800bcd0 <lv_color_mix>
                            last_mask = *mask_tmp_x;
 800c23a:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 800c23e:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
 800c240:	882a      	ldrh	r2, [r5, #0]
                        disp_buf_first[x] = last_res_color;
 800c242:	8028      	strh	r0, [r5, #0]
 800c244:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
 800c246:	ebaa 0307 	sub.w	r3, sl, r7
 800c24a:	4599      	cmp	r9, r3
 800c24c:	dce3      	bgt.n	800c216 <_lv_blend_fill+0x3fa>
                disp_buf_first += disp_w;
 800c24e:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
 800c250:	444f      	add	r7, r9
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c252:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 800c256:	441c      	add	r4, r3
 800c258:	e748      	b.n	800c0ec <_lv_blend_fill+0x2d0>
    switch(mode) {
 800c25a:	2e01      	cmp	r6, #1
 800c25c:	d005      	beq.n	800c26a <_lv_blend_fill+0x44e>
 800c25e:	2e02      	cmp	r6, #2
 800c260:	f47f aea6 	bne.w	800bfb0 <_lv_blend_fill+0x194>
            blend_fp = color_blend_true_color_subtractive;
 800c264:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c348 <_lv_blend_fill+0x52c>
 800c268:	e001      	b.n	800c26e <_lv_blend_fill+0x452>
            blend_fp = color_blend_true_color_additive;
 800c26a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c34c <_lv_blend_fill+0x530>
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800c26e:	9c05      	ldr	r4, [sp, #20]
 800c270:	006d      	lsls	r5, r5, #1
 800c272:	eb04 0641 	add.w	r6, r4, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c276:	9c07      	ldr	r4, [sp, #28]
 800c278:	2c01      	cmp	r4, #1
 800c27a:	d126      	bne.n	800c2ca <_lv_blend_fill+0x4ae>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 800c27c:	f04f 0800 	mov.w	r8, #0
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800c280:	9a04      	ldr	r2, [sp, #16]
 800c282:	4658      	mov	r0, fp
 800c284:	4641      	mov	r1, r8
 800c286:	f7ff fd23 	bl	800bcd0 <lv_color_mix>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c28a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800c28e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800c292:	429f      	cmp	r7, r3
 800c294:	f73f ae8c 	bgt.w	800bfb0 <_lv_blend_fill+0x194>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c298:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800c29c:	eb06 0a44 	add.w	sl, r6, r4, lsl #1
 800c2a0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	dd02      	ble.n	800c2ae <_lv_blend_fill+0x492>
            disp_buf_tmp += disp_w;
 800c2a8:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c2aa:	3701      	adds	r7, #1
 800c2ac:	e7ef      	b.n	800c28e <_lv_blend_fill+0x472>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800c2ae:	fa1f f388 	uxth.w	r3, r8
 800c2b2:	f8ba 1000 	ldrh.w	r1, [sl]
 800c2b6:	428b      	cmp	r3, r1
 800c2b8:	d003      	beq.n	800c2c2 <_lv_blend_fill+0x4a6>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800c2ba:	9a04      	ldr	r2, [sp, #16]
 800c2bc:	4658      	mov	r0, fp
                    last_dest_color = disp_buf_tmp[x];
 800c2be:	4688      	mov	r8, r1
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800c2c0:	47c8      	blx	r9
                disp_buf_tmp[x] = last_res_color;
 800c2c2:	f82a 0b02 	strh.w	r0, [sl], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c2c6:	3401      	adds	r4, #1
 800c2c8:	e7ea      	b.n	800c2a0 <_lv_blend_fill+0x484>
 800c2ca:	1c5c      	adds	r4, r3, #1
        last_dest_color.full = disp_buf_tmp[0].full;
 800c2cc:	9b05      	ldr	r3, [sp, #20]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800c2ce:	eba7 0a00 	sub.w	sl, r7, r0
        last_dest_color.full = disp_buf_tmp[0].full;
 800c2d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c2d6:	1aa4      	subs	r4, r4, r2
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800c2d8:	2100      	movs	r1, #0
 800c2da:	b224      	sxth	r4, r4
        last_res_color.full = disp_buf_tmp[0].full;
 800c2dc:	4618      	mov	r0, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c2de:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800c2e2:	4590      	cmp	r8, r2
 800c2e4:	f73f ae64 	bgt.w	800bfb0 <_lv_blend_fill+0x194>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c2e8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800c2ec:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800c2f0:	4297      	cmp	r7, r2
 800c2f2:	dd04      	ble.n	800c2fe <_lv_blend_fill+0x4e2>
            disp_buf_tmp += disp_w;
 800c2f4:	442e      	add	r6, r5
            mask_tmp += draw_area_w;
 800c2f6:	44a2      	add	sl, r4
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c2f8:	f108 0801 	add.w	r8, r8, #1
 800c2fc:	e7ef      	b.n	800c2de <_lv_blend_fill+0x4c2>
                if(mask_tmp[x] == 0) continue;
 800c2fe:	f81a 2007 	ldrb.w	r2, [sl, r7]
 800c302:	b1ca      	cbz	r2, 800c338 <_lv_blend_fill+0x51c>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800c304:	428a      	cmp	r2, r1
 800c306:	eb06 0c47 	add.w	ip, r6, r7, lsl #1
 800c30a:	d103      	bne.n	800c314 <_lv_blend_fill+0x4f8>
 800c30c:	f836 e017 	ldrh.w	lr, [r6, r7, lsl #1]
 800c310:	459e      	cmp	lr, r3
 800c312:	d00f      	beq.n	800c334 <_lv_blend_fill+0x518>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800c314:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800c316:	f8bc 1000 	ldrh.w	r1, [ip]
 800c31a:	4658      	mov	r0, fp
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800c31c:	bf97      	itett	ls
 800c31e:	9b04      	ldrls	r3, [sp, #16]
 800c320:	9a04      	ldrhi	r2, [sp, #16]
 800c322:	fb12 f203 	smulbbls	r2, r2, r3
 800c326:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800c328:	47c8      	blx	r9
                    last_mask = mask_tmp[x];
 800c32a:	f81a 1007 	ldrb.w	r1, [sl, r7]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800c32e:	b280      	uxth	r0, r0
                    last_dest_color.full = disp_buf_tmp[x].full;
 800c330:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
                disp_buf_tmp[x] = last_res_color;
 800c334:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c338:	3701      	adds	r7, #1
 800c33a:	e7d7      	b.n	800c2ec <_lv_blend_fill+0x4d0>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800c33c:	882b      	ldrh	r3, [r5, #0]
 800c33e:	4293      	cmp	r3, r2
 800c340:	f47f af76 	bne.w	800c230 <_lv_blend_fill+0x414>
 800c344:	e77d      	b.n	800c242 <_lv_blend_fill+0x426>
 800c346:	bf00      	nop
 800c348:	0800bdad 	.word	0x0800bdad
 800c34c:	0800bd2d 	.word	0x0800bd2d

0800c350 <_lv_blend_map>:
{
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	b08f      	sub	sp, #60	; 0x3c
 800c356:	4689      	mov	r9, r1
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800c35e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c360:	9309      	str	r3, [sp, #36]	; 0x24
 800c362:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c366:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
    if(opa < LV_OPA_MIN) return;
 800c36a:	2b01      	cmp	r3, #1
{
 800c36c:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 800c36e:	f240 80d6 	bls.w	800c51e <_lv_blend_map+0x1ce>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 80d2 	beq.w	800c51e <_lv_blend_map+0x1ce>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 800c37a:	460a      	mov	r2, r1
 800c37c:	4601      	mov	r1, r0
 800c37e:	a80c      	add	r0, sp, #48	; 0x30
 800c380:	f006 feb7 	bl	80130f2 <_lv_area_intersect>
    if(!is_common) return;
 800c384:	2800      	cmp	r0, #0
 800c386:	f000 80ca 	beq.w	800c51e <_lv_blend_map+0x1ce>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c38a:	f7fe fd6f 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800c38e:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c390:	f006 fba4 	bl	8012adc <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 800c394:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c396:	4605      	mov	r5, r0
    lv_color_t * disp_buf = vdb->buf_act;
 800c398:	9308      	str	r3, [sp, #32]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c39c:	b10b      	cbz	r3, 800c3a2 <_lv_blend_map+0x52>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
 800c3a2:	8a2e      	ldrh	r6, [r5, #16]
 800c3a4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800c3a8:	8a6f      	ldrh	r7, [r5, #18]
 800c3aa:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
    draw_area.x1 -= disp_area->x1;
 800c3ae:	1b80      	subs	r0, r0, r6
    draw_area.x2 -= disp_area->x1;
 800c3b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    draw_area.y1 -= disp_area->y1;
 800c3b4:	ebaa 0a07 	sub.w	sl, sl, r7
    draw_area.x1 -= disp_area->x1;
 800c3b8:	b280      	uxth	r0, r0
    draw_area.x2 -= disp_area->x1;
 800c3ba:	1b92      	subs	r2, r2, r6
    draw_area.y2 -= disp_area->y1;
 800c3bc:	f8bd 6036 	ldrh.w	r6, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
 800c3c0:	fa1f fa8a 	uxth.w	sl, sl
    draw_area.y2 -= disp_area->y1;
 800c3c4:	1bf6      	subs	r6, r6, r7
    draw_area.x1 -= disp_area->x1;
 800c3c6:	b201      	sxth	r1, r0
    draw_area.y1 -= disp_area->y1;
 800c3c8:	fa0f f38a 	sxth.w	r3, sl
    draw_area.y2 -= disp_area->y1;
 800c3cc:	fa1f fe86 	uxth.w	lr, r6
    if(mask && disp->driver.antialiasing == 0)
 800c3d0:	9e04      	ldr	r6, [sp, #16]
    draw_area.x2 -= disp_area->x1;
 800c3d2:	b292      	uxth	r2, r2
    draw_area.x1 -= disp_area->x1;
 800c3d4:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800c3d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 800c3dc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 800c3e0:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
    if(mask && disp->driver.antialiasing == 0)
 800c3e4:	2e00      	cmp	r6, #0
 800c3e6:	d14f      	bne.n	800c488 <_lv_blend_map+0x138>
    if(disp->driver.set_px_cb) {
 800c3e8:	6964      	ldr	r4, [r4, #20]
 800c3ea:	2c00      	cmp	r4, #0
 800c3ec:	d165      	bne.n	800c4ba <_lv_blend_map+0x16a>
 800c3ee:	3201      	adds	r2, #1
 800c3f0:	8aac      	ldrh	r4, [r5, #20]
 800c3f2:	f8b9 6004 	ldrh.w	r6, [r9, #4]
 800c3f6:	1a10      	subs	r0, r2, r0
 800c3f8:	3401      	adds	r4, #1
 800c3fa:	f9b9 b000 	ldrsh.w	fp, [r9]
 800c3fe:	3601      	adds	r6, #1
 800c400:	b202      	sxth	r2, r0
 800c402:	f9b9 0002 	ldrsh.w	r0, [r9, #2]
 800c406:	eba6 060b 	sub.w	r6, r6, fp
 800c40a:	9307      	str	r3, [sp, #28]
 800c40c:	9206      	str	r2, [sp, #24]
 800c40e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 800c412:	b236      	sxth	r6, r6
 800c414:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
 800c418:	1aa4      	subs	r4, r4, r2
 800c41a:	1b45      	subs	r5, r0, r5
 800c41c:	b224      	sxth	r4, r4
 800c41e:	1b5d      	subs	r5, r3, r5
 800c420:	fb04 f703 	mul.w	r7, r4, r3
 800c424:	4375      	muls	r5, r6
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c426:	f1b8 0f00 	cmp.w	r8, #0
 800c42a:	f040 81cc 	bne.w	800c7c6 <_lv_blend_map+0x476>
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c42e:	ebab 0b02 	sub.w	fp, fp, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800c432:	fb04 1703 	mla	r7, r4, r3, r1
 800c436:	9b08      	ldr	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c438:	f10e 0001 	add.w	r0, lr, #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c43c:	eba1 0b0b 	sub.w	fp, r1, fp
 800c440:	0064      	lsls	r4, r4, #1
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800c442:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c448:	445d      	add	r5, fp
 800c44a:	eba0 000a 	sub.w	r0, r0, sl
 800c44e:	0076      	lsls	r6, r6, #1
 800c450:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c454:	9b09      	ldr	r3, [sp, #36]	; 0x24
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800c456:	b200      	sxth	r0, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c458:	2b01      	cmp	r3, #1
        if(opa > LV_OPA_MAX) {
 800c45a:	9b05      	ldr	r3, [sp, #20]
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800c45c:	9007      	str	r0, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c45e:	f040 80c8 	bne.w	800c5f2 <_lv_blend_map+0x2a2>
        if(opa > LV_OPA_MAX) {
 800c462:	2bfd      	cmp	r3, #253	; 0xfd
 800c464:	f240 80bf 	bls.w	800c5e6 <_lv_blend_map+0x296>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800c468:	9b06      	ldr	r3, [sp, #24]
 800c46a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	4543      	cmp	r3, r8
 800c472:	dd54      	ble.n	800c51e <_lv_blend_map+0x1ce>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800c474:	4629      	mov	r1, r5
 800c476:	4638      	mov	r0, r7
 800c478:	4652      	mov	r2, sl
                disp_buf_first += disp_w;
 800c47a:	4427      	add	r7, r4
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800c47c:	f007 fc3c 	bl	8013cf8 <_lv_memcpy>
                map_buf_first += map_w;
 800c480:	4435      	add	r5, r6
            for(y = 0; y < draw_area_h; y++) {
 800c482:	f108 0801 	add.w	r8, r8, #1
 800c486:	e7f2      	b.n	800c46e <_lv_blend_map+0x11e>
    if(mask && disp->driver.antialiasing == 0)
 800c488:	7a26      	ldrb	r6, [r4, #8]
 800c48a:	07f6      	lsls	r6, r6, #31
 800c48c:	d4ac      	bmi.n	800c3e8 <_lv_blend_map+0x98>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c48e:	1c56      	adds	r6, r2, #1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c490:	9f04      	ldr	r7, [sp, #16]
 800c492:	1a36      	subs	r6, r6, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c494:	fa0f fb86 	sxth.w	fp, r6
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c498:	9e04      	ldr	r6, [sp, #16]
 800c49a:	eba7 0c06 	sub.w	ip, r7, r6
 800c49e:	45e3      	cmp	fp, ip
 800c4a0:	dda2      	ble.n	800c3e8 <_lv_blend_map+0x98>
 800c4a2:	f897 c000 	ldrb.w	ip, [r7]
 800c4a6:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800c4aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c4ae:	bf98      	it	ls
 800c4b0:	f04f 0c00 	movls.w	ip, #0
 800c4b4:	f807 cb01 	strb.w	ip, [r7], #1
 800c4b8:	e7ee      	b.n	800c498 <_lv_blend_map+0x148>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c4ba:	f7fe fcd7 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800c4be:	f8b9 4004 	ldrh.w	r4, [r9, #4]
    int32_t disp_w = lv_area_get_width(disp_area);
 800c4c2:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c4c6:	4682      	mov	sl, r0
 800c4c8:	f8b5 8014 	ldrh.w	r8, [r5, #20]
 800c4cc:	3401      	adds	r4, #1
    int32_t map_w = lv_area_get_width(map_area);
 800c4ce:	f9b9 3000 	ldrsh.w	r3, [r9]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800c4d2:	f9b9 0002 	ldrsh.w	r0, [r9, #2]
 800c4d6:	f108 0801 	add.w	r8, r8, #1
 800c4da:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
 800c4de:	1ae4      	subs	r4, r4, r3
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800c4e0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c4e4:	1a5b      	subs	r3, r3, r1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800c4e6:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 800c4ea:	1b45      	subs	r5, r0, r5
 800c4ec:	b224      	sxth	r4, r4
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c4ee:	1ad3      	subs	r3, r2, r3
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800c4f0:	1b75      	subs	r5, r6, r5
 800c4f2:	eba8 0801 	sub.w	r8, r8, r1
    map_buf_tmp -= draw_area->x1;
 800c4f6:	fb04 3305 	mla	r3, r4, r5, r3
 800c4fa:	0055      	lsls	r5, r2, #1
 800c4fc:	fa0f f888 	sxth.w	r8, r8
 800c500:	ebc5 0543 	rsb	r5, r5, r3, lsl #1
 800c504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c506:	442b      	add	r3, r5
 800c508:	461d      	mov	r5, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800c512:	9306      	str	r3, [sp, #24]
 800c514:	d123      	bne.n	800c55e <_lv_blend_map+0x20e>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c516:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800c51a:	429e      	cmp	r6, r3
 800c51c:	dd02      	ble.n	800c524 <_lv_blend_map+0x1d4>
}
 800c51e:	b00f      	add	sp, #60	; 0x3c
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c524:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800c528:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c52a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800c52e:	4599      	cmp	r9, r3
 800c530:	dd03      	ble.n	800c53a <_lv_blend_map+0x1ea>
            map_buf_tmp += map_w;
 800c532:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c534:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
 800c536:	441d      	add	r5, r3
 800c538:	e7ed      	b.n	800c516 <_lv_blend_map+0x1c6>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	4642      	mov	r2, r8
 800c53e:	9908      	ldr	r1, [sp, #32]
 800c540:	4650      	mov	r0, sl
 800c542:	9302      	str	r3, [sp, #8]
 800c544:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
 800c548:	9700      	str	r7, [sp, #0]
 800c54a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c54e:	fa0f f389 	sxth.w	r3, r9
 800c552:	f8da 4014 	ldr.w	r4, [sl, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c556:	f109 0901 	add.w	r9, r9, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800c55a:	47a0      	blx	r4
 800c55c:	e7e5      	b.n	800c52a <_lv_blend_map+0x1da>
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800c55e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800c562:	9904      	ldr	r1, [sp, #16]
 800c564:	3301      	adds	r3, #1
 800c566:	eba1 0b02 	sub.w	fp, r1, r2
 800c56a:	1a9a      	subs	r2, r3, r2
            mask_tmp += draw_area_w;
 800c56c:	b217      	sxth	r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c56e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800c572:	429e      	cmp	r6, r3
 800c574:	dcd3      	bgt.n	800c51e <_lv_blend_map+0x1ce>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800c576:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c578:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800c57c:	9304      	str	r3, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c57e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800c582:	4599      	cmp	r9, r3
 800c584:	dd04      	ble.n	800c590 <_lv_blend_map+0x240>
            map_buf_tmp += map_w;
 800c586:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
 800c588:	44bb      	add	fp, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c58a:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
 800c58c:	441d      	add	r5, r3
 800c58e:	e7ee      	b.n	800c56e <_lv_blend_map+0x21e>
                if(mask_tmp[x]) {
 800c590:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800c594:	b193      	cbz	r3, 800c5bc <_lv_blend_map+0x26c>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800c596:	9a05      	ldr	r2, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800c598:	4650      	mov	r0, sl
 800c59a:	9908      	ldr	r1, [sp, #32]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800c59c:	fb12 f303 	smulbb	r3, r2, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	0a1b      	lsrs	r3, r3, #8
 800c5a4:	9302      	str	r3, [sp, #8]
 800c5a6:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
 800c5aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	fa0f f389 	sxth.w	r3, r9
 800c5b6:	f8da 4014 	ldr.w	r4, [sl, #20]
 800c5ba:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c5bc:	f109 0901 	add.w	r9, r9, #1
 800c5c0:	e7dd      	b.n	800c57e <_lv_blend_map+0x22e>
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800c5c2:	f837 101a 	ldrh.w	r1, [r7, sl, lsl #1]
 800c5c6:	f835 001a 	ldrh.w	r0, [r5, sl, lsl #1]
 800c5ca:	9a05      	ldr	r2, [sp, #20]
 800c5cc:	f7ff fb80 	bl	800bcd0 <lv_color_mix>
 800c5d0:	f827 001a 	strh.w	r0, [r7, sl, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 800c5d4:	f10a 0a01 	add.w	sl, sl, #1
 800c5d8:	9b06      	ldr	r3, [sp, #24]
 800c5da:	4553      	cmp	r3, sl
 800c5dc:	dcf1      	bgt.n	800c5c2 <_lv_blend_map+0x272>
                disp_buf_first += disp_w;
 800c5de:	4427      	add	r7, r4
                map_buf_first += map_w;
 800c5e0:	4435      	add	r5, r6
            for(y = 0; y < draw_area_h; y++) {
 800c5e2:	f108 0801 	add.w	r8, r8, #1
 800c5e6:	9b07      	ldr	r3, [sp, #28]
 800c5e8:	4543      	cmp	r3, r8
 800c5ea:	dd98      	ble.n	800c51e <_lv_blend_map+0x1ce>
                for(x = 0; x < draw_area_w; x++) {
 800c5ec:	f04f 0a00 	mov.w	sl, #0
 800c5f0:	e7f2      	b.n	800c5d8 <_lv_blend_map+0x288>
        if(opa > LV_OPA_MAX) {
 800c5f2:	2bfd      	cmp	r3, #253	; 0xfd
 800c5f4:	f240 80e5 	bls.w	800c7c2 <_lv_blend_map+0x472>
            int32_t x_end4 = draw_area_w - 4;
 800c5f8:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800c5fa:	f8cd 8014 	str.w	r8, [sp, #20]
            int32_t x_end4 = draw_area_w - 4;
 800c5fe:	3b04      	subs	r3, #4
 800c600:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
 800c602:	9b07      	ldr	r3, [sp, #28]
 800c604:	9a05      	ldr	r2, [sp, #20]
 800c606:	4293      	cmp	r3, r2
 800c608:	dd89      	ble.n	800c51e <_lv_blend_map+0x1ce>
 800c60a:	9b04      	ldr	r3, [sp, #16]
 800c60c:	46ba      	mov	sl, r7
 800c60e:	46ab      	mov	fp, r5
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c610:	f04f 0800 	mov.w	r8, #0
 800c614:	e01b      	b.n	800c64e <_lv_blend_map+0x2fe>
                    MAP_NORMAL_MASK_PX(x)
 800c616:	f8ba 1000 	ldrh.w	r1, [sl]
 800c61a:	f8bb 0000 	ldrh.w	r0, [fp]
 800c61e:	9309      	str	r3, [sp, #36]	; 0x24
 800c620:	f7ff fb56 	bl	800bcd0 <lv_color_mix>
 800c624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c626:	f8aa 0000 	strh.w	r0, [sl]
 800c62a:	e00a      	b.n	800c642 <_lv_blend_map+0x2f2>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c62c:	079a      	lsls	r2, r3, #30
 800c62e:	d012      	beq.n	800c656 <_lv_blend_map+0x306>
                    MAP_NORMAL_MASK_PX(x)
 800c630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c634:	b12a      	cbz	r2, 800c642 <_lv_blend_map+0x2f2>
 800c636:	2aff      	cmp	r2, #255	; 0xff
 800c638:	d1ed      	bne.n	800c616 <_lv_blend_map+0x2c6>
 800c63a:	f8bb 2000 	ldrh.w	r2, [fp]
 800c63e:	f8aa 2000 	strh.w	r2, [sl]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800c642:	f108 0801 	add.w	r8, r8, #1
 800c646:	f10b 0b02 	add.w	fp, fp, #2
 800c64a:	f10a 0a02 	add.w	sl, sl, #2
 800c64e:	9a06      	ldr	r2, [sp, #24]
 800c650:	4699      	mov	r9, r3
 800c652:	4542      	cmp	r2, r8
 800c654:	dcea      	bgt.n	800c62c <_lv_blend_map+0x2dc>
 800c656:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800c65a:	eb05 0b0a 	add.w	fp, r5, sl
 800c65e:	44ba      	add	sl, r7
                for(; x < x_end4; x += 4) {
 800c660:	9b08      	ldr	r3, [sp, #32]
 800c662:	4543      	cmp	r3, r8
 800c664:	dc0e      	bgt.n	800c684 <_lv_blend_map+0x334>
                    MAP_NORMAL_MASK_PX(x)
 800c666:	eba9 0908 	sub.w	r9, r9, r8
                for(; x < draw_area_w ; x++) {
 800c66a:	9b06      	ldr	r3, [sp, #24]
 800c66c:	4543      	cmp	r3, r8
 800c66e:	dc6c      	bgt.n	800c74a <_lv_blend_map+0x3fa>
                mask += draw_area_w;
 800c670:	9b04      	ldr	r3, [sp, #16]
                disp_buf_first += disp_w;
 800c672:	4427      	add	r7, r4
                mask += draw_area_w;
 800c674:	9a06      	ldr	r2, [sp, #24]
                map_buf_first += map_w;
 800c676:	4435      	add	r5, r6
                mask += draw_area_w;
 800c678:	4413      	add	r3, r2
 800c67a:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800c67c:	9b05      	ldr	r3, [sp, #20]
 800c67e:	3301      	adds	r3, #1
 800c680:	9305      	str	r3, [sp, #20]
 800c682:	e7be      	b.n	800c602 <_lv_blend_map+0x2b2>
                    if(*mask32) {
 800c684:	f8d9 3000 	ldr.w	r3, [r9]
 800c688:	b18b      	cbz	r3, 800c6ae <_lv_blend_map+0x35e>
                        if((*mask32) == 0xFFFFFFFF) {
 800c68a:	3301      	adds	r3, #1
 800c68c:	d118      	bne.n	800c6c0 <_lv_blend_map+0x370>
                            disp_buf_first[x] = map_buf_first[x];
 800c68e:	f8bb 3000 	ldrh.w	r3, [fp]
 800c692:	f8aa 3000 	strh.w	r3, [sl]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800c696:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800c69a:	f8aa 3002 	strh.w	r3, [sl, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 800c69e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800c6a2:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800c6a6:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800c6aa:	f8aa 3006 	strh.w	r3, [sl, #6]
                    mask32++;
 800c6ae:	f109 0904 	add.w	r9, r9, #4
                for(; x < x_end4; x += 4) {
 800c6b2:	f108 0804 	add.w	r8, r8, #4
 800c6b6:	f10b 0b08 	add.w	fp, fp, #8
 800c6ba:	f10a 0a08 	add.w	sl, sl, #8
 800c6be:	e7cf      	b.n	800c660 <_lv_blend_map+0x310>
                            MAP_NORMAL_MASK_PX(x)
 800c6c0:	f899 2000 	ldrb.w	r2, [r9]
 800c6c4:	b12a      	cbz	r2, 800c6d2 <_lv_blend_map+0x382>
 800c6c6:	2aff      	cmp	r2, #255	; 0xff
 800c6c8:	d124      	bne.n	800c714 <_lv_blend_map+0x3c4>
 800c6ca:	f8bb 3000 	ldrh.w	r3, [fp]
 800c6ce:	f8aa 3000 	strh.w	r3, [sl]
                            MAP_NORMAL_MASK_PX(x + 1)
 800c6d2:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c6d6:	b12a      	cbz	r2, 800c6e4 <_lv_blend_map+0x394>
 800c6d8:	2aff      	cmp	r2, #255	; 0xff
 800c6da:	d124      	bne.n	800c726 <_lv_blend_map+0x3d6>
 800c6dc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800c6e0:	f8aa 3002 	strh.w	r3, [sl, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 800c6e4:	f899 2002 	ldrb.w	r2, [r9, #2]
 800c6e8:	b12a      	cbz	r2, 800c6f6 <_lv_blend_map+0x3a6>
 800c6ea:	2aff      	cmp	r2, #255	; 0xff
 800c6ec:	d124      	bne.n	800c738 <_lv_blend_map+0x3e8>
 800c6ee:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800c6f2:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800c6f6:	f899 2003 	ldrb.w	r2, [r9, #3]
 800c6fa:	2a00      	cmp	r2, #0
 800c6fc:	d0d7      	beq.n	800c6ae <_lv_blend_map+0x35e>
 800c6fe:	2aff      	cmp	r2, #255	; 0xff
 800c700:	d0d1      	beq.n	800c6a6 <_lv_blend_map+0x356>
 800c702:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 800c706:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c70a:	f7ff fae1 	bl	800bcd0 <lv_color_mix>
 800c70e:	f8aa 0006 	strh.w	r0, [sl, #6]
 800c712:	e7cc      	b.n	800c6ae <_lv_blend_map+0x35e>
                            MAP_NORMAL_MASK_PX(x)
 800c714:	f8ba 1000 	ldrh.w	r1, [sl]
 800c718:	f8bb 0000 	ldrh.w	r0, [fp]
 800c71c:	f7ff fad8 	bl	800bcd0 <lv_color_mix>
 800c720:	f8aa 0000 	strh.w	r0, [sl]
 800c724:	e7d5      	b.n	800c6d2 <_lv_blend_map+0x382>
                            MAP_NORMAL_MASK_PX(x + 1)
 800c726:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 800c72a:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800c72e:	f7ff facf 	bl	800bcd0 <lv_color_mix>
 800c732:	f8aa 0002 	strh.w	r0, [sl, #2]
 800c736:	e7d5      	b.n	800c6e4 <_lv_blend_map+0x394>
                            MAP_NORMAL_MASK_PX(x + 2)
 800c738:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800c73c:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 800c740:	f7ff fac6 	bl	800bcd0 <lv_color_mix>
 800c744:	f8aa 0004 	strh.w	r0, [sl, #4]
 800c748:	e7d5      	b.n	800c6f6 <_lv_blend_map+0x3a6>
                    MAP_NORMAL_MASK_PX(x)
 800c74a:	f819 2008 	ldrb.w	r2, [r9, r8]
 800c74e:	b12a      	cbz	r2, 800c75c <_lv_blend_map+0x40c>
 800c750:	2aff      	cmp	r2, #255	; 0xff
 800c752:	d106      	bne.n	800c762 <_lv_blend_map+0x412>
 800c754:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 800c758:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
 800c75c:	f108 0801 	add.w	r8, r8, #1
 800c760:	e783      	b.n	800c66a <_lv_blend_map+0x31a>
                    MAP_NORMAL_MASK_PX(x)
 800c762:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
 800c766:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 800c76a:	f7ff fab1 	bl	800bcd0 <lv_color_mix>
 800c76e:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
 800c772:	e7f3      	b.n	800c75c <_lv_blend_map+0x40c>
                    if(mask[x]) {
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	f813 2008 	ldrb.w	r2, [r3, r8]
 800c77a:	b172      	cbz	r2, 800c79a <_lv_blend_map+0x44a>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800c77c:	2afc      	cmp	r2, #252	; 0xfc
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800c77e:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
 800c782:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800c786:	bf97      	itett	ls
 800c788:	9b05      	ldrls	r3, [sp, #20]
 800c78a:	9a05      	ldrhi	r2, [sp, #20]
 800c78c:	fb13 f202 	smulbbls	r2, r3, r2
 800c790:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800c792:	f7ff fa9d 	bl	800bcd0 <lv_color_mix>
 800c796:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 800c79a:	f108 0801 	add.w	r8, r8, #1
 800c79e:	9b06      	ldr	r3, [sp, #24]
 800c7a0:	4543      	cmp	r3, r8
 800c7a2:	dce7      	bgt.n	800c774 <_lv_blend_map+0x424>
                mask += draw_area_w;
 800c7a4:	9b04      	ldr	r3, [sp, #16]
                disp_buf_first += disp_w;
 800c7a6:	4427      	add	r7, r4
                mask += draw_area_w;
 800c7a8:	9a06      	ldr	r2, [sp, #24]
                map_buf_first += map_w;
 800c7aa:	4435      	add	r5, r6
            for(y = 0; y < draw_area_h; y++) {
 800c7ac:	f109 0901 	add.w	r9, r9, #1
                mask += draw_area_w;
 800c7b0:	4413      	add	r3, r2
 800c7b2:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800c7b4:	9b07      	ldr	r3, [sp, #28]
 800c7b6:	454b      	cmp	r3, r9
 800c7b8:	f77f aeb1 	ble.w	800c51e <_lv_blend_map+0x1ce>
                for(x = 0; x < draw_area_w; x++) {
 800c7bc:	f04f 0800 	mov.w	r8, #0
 800c7c0:	e7ed      	b.n	800c79e <_lv_blend_map+0x44e>
            for(y = 0; y < draw_area_h; y++) {
 800c7c2:	46c1      	mov	r9, r8
 800c7c4:	e7f6      	b.n	800c7b4 <_lv_blend_map+0x464>
    switch(mode) {
 800c7c6:	f1b8 0f01 	cmp.w	r8, #1
 800c7ca:	d005      	beq.n	800c7d8 <_lv_blend_map+0x488>
 800c7cc:	f1b8 0f02 	cmp.w	r8, #2
 800c7d0:	f47f aea5 	bne.w	800c51e <_lv_blend_map+0x1ce>
            blend_fp = color_blend_true_color_subtractive;
 800c7d4:	4b38      	ldr	r3, [pc, #224]	; (800c8b8 <_lv_blend_map+0x568>)
 800c7d6:	e000      	b.n	800c7da <_lv_blend_map+0x48a>
            blend_fp = color_blend_true_color_additive;
 800c7d8:	4b38      	ldr	r3, [pc, #224]	; (800c8bc <_lv_blend_map+0x56c>)
            blend_fp = color_blend_true_color_subtractive;
 800c7da:	930a      	str	r3, [sp, #40]	; 0x28
 800c7dc:	0064      	lsls	r4, r4, #1
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800c7de:	9b08      	ldr	r3, [sp, #32]
 800c7e0:	0076      	lsls	r6, r6, #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c7e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800c7e4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800c7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c7ea:	2801      	cmp	r0, #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800c7ec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800c7f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800c7f4:	d128      	bne.n	800c848 <_lv_blend_map+0x4f8>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800c7f6:	ebab 0b02 	sub.w	fp, fp, r2
 800c7fa:	eba1 0b0b 	sub.w	fp, r1, fp
        map_buf_tmp -= draw_area->x1;
 800c7fe:	ebc3 034b 	rsb	r3, r3, fp, lsl #1
 800c802:	441d      	add	r5, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c804:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800c808:	9a07      	ldr	r2, [sp, #28]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f73f ae87 	bgt.w	800c51e <_lv_blend_map+0x1ce>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c810:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 800c814:	f04f 0900 	mov.w	r9, #0
 800c818:	eb0a 0809 	add.w	r8, sl, r9
 800c81c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800c820:	4598      	cmp	r8, r3
 800c822:	dd05      	ble.n	800c830 <_lv_blend_map+0x4e0>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c824:	9b07      	ldr	r3, [sp, #28]
            disp_buf_tmp += disp_w;
 800c826:	4427      	add	r7, r4
            map_buf_tmp += map_w;
 800c828:	4435      	add	r5, r6
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c82a:	3301      	adds	r3, #1
 800c82c:	9307      	str	r3, [sp, #28]
 800c82e:	e7e9      	b.n	800c804 <_lv_blend_map+0x4b4>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800c830:	9a05      	ldr	r2, [sp, #20]
 800c832:	f109 0901 	add.w	r9, r9, #1
 800c836:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
 800c83a:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 800c83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c840:	4798      	blx	r3
 800c842:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
 800c846:	e7e7      	b.n	800c818 <_lv_blend_map+0x4c8>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800c848:	9a04      	ldr	r2, [sp, #16]
        map_buf_tmp -= draw_area->x1;
 800c84a:	1aed      	subs	r5, r5, r3
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800c84c:	eba2 0b01 	sub.w	fp, r2, r1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c850:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800c854:	9a07      	ldr	r2, [sp, #28]
 800c856:	429a      	cmp	r2, r3
 800c858:	f73f ae61 	bgt.w	800c51e <_lv_blend_map+0x1ce>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c85c:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 800c860:	f04f 0900 	mov.w	r9, #0
                if(mask_tmp[x] == 0) continue;
 800c864:	eb0b 030a 	add.w	r3, fp, sl
 800c868:	eb09 080a 	add.w	r8, r9, sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800c86c:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 800c870:	4590      	cmp	r8, r2
 800c872:	dd07      	ble.n	800c884 <_lv_blend_map+0x534>
            mask_tmp += draw_area_w;
 800c874:	9b06      	ldr	r3, [sp, #24]
            disp_buf_tmp += disp_w;
 800c876:	4427      	add	r7, r4
            map_buf_tmp += map_w;
 800c878:	4435      	add	r5, r6
            mask_tmp += draw_area_w;
 800c87a:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	3301      	adds	r3, #1
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	e7e5      	b.n	800c850 <_lv_blend_map+0x500>
                if(mask_tmp[x] == 0) continue;
 800c884:	f813 2009 	ldrb.w	r2, [r3, r9]
 800c888:	b192      	cbz	r2, 800c8b0 <_lv_blend_map+0x560>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800c88a:	2afc      	cmp	r2, #252	; 0xfc
 800c88c:	9304      	str	r3, [sp, #16]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800c88e:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800c892:	bf98      	it	ls
 800c894:	9905      	ldrls	r1, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800c896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800c898:	bf94      	ite	ls
 800c89a:	fb11 f202 	smulbbls	r2, r1, r2
 800c89e:	9a05      	ldrhi	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800c8a0:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800c8a4:	bf98      	it	ls
 800c8a6:	0a12      	lsrls	r2, r2, #8
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800c8a8:	4798      	blx	r3
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	f827 0018 	strh.w	r0, [r7, r8, lsl #1]
 800c8b0:	f109 0901 	add.w	r9, r9, #1
 800c8b4:	e7d8      	b.n	800c868 <_lv_blend_map+0x518>
 800c8b6:	bf00      	nop
 800c8b8:	0800bdad 	.word	0x0800bdad
 800c8bc:	0800bd2d 	.word	0x0800bd2d

0800c8c0 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	b0a0      	sub	sp, #128	; 0x80
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800c8ca:	a80b      	add	r0, sp, #44	; 0x2c
 800c8cc:	f002 ffec 	bl	800f8a8 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800c8d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8d4:	4629      	mov	r1, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800c8d6:	881b      	ldrh	r3, [r3, #0]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800c8d8:	4620      	mov	r0, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800c8da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800c8de:	f003 f807 	bl	800f8f0 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800c8e2:	a802      	add	r0, sp, #8
 800c8e4:	f000 fcd8 	bl	800d298 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	aa02      	add	r2, sp, #8
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4633      	mov	r3, r6
 800c8f4:	f000 fce6 	bl	800d2c4 <lv_draw_label>
}
 800c8f8:	b020      	add	sp, #128	; 0x80
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	0801f3a4 	.word	0x0801f3a4

0800c900 <lv_area_copy>:
{
 800c900:	3901      	subs	r1, #1
 800c902:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800c906:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c90a:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800c90e:	4298      	cmp	r0, r3
 800c910:	d1f9      	bne.n	800c906 <lv_area_copy+0x6>
}
 800c912:	4770      	bx	lr

0800c914 <lv_draw_map>:
{
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	b0bd      	sub	sp, #244	; 0xf4
 800c91a:	461c      	mov	r4, r3
 800c91c:	4616      	mov	r6, r2
 800c91e:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
 800c922:	9007      	str	r0, [sp, #28]
    lv_area_copy(&draw_area, clip_area);
 800c924:	a825      	add	r0, sp, #148	; 0x94
{
 800c926:	930e      	str	r3, [sp, #56]	; 0x38
 800c928:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 800c92c:	9110      	str	r1, [sp, #64]	; 0x40
 800c92e:	930a      	str	r3, [sp, #40]	; 0x28
    lv_area_copy(&draw_area, clip_area);
 800c930:	f7ff ffe6 	bl	800c900 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800c934:	f7fe fa9a 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800c938:	4607      	mov	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c93a:	f006 f8cf 	bl	8012adc <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
 800c93e:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800c942:	8a03      	ldrh	r3, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 800c944:	f8bd 1096 	ldrh.w	r1, [sp, #150]	; 0x96
    draw_area.x1 -= disp_area->x1;
 800c948:	1ad2      	subs	r2, r2, r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c94a:	9006      	str	r0, [sp, #24]
    draw_area.y1 -= disp_area->y1;
 800c94c:	8a40      	ldrh	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
 800c94e:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    draw_area.x2 -= disp_area->x1;
 800c952:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
    draw_area.y1 -= disp_area->y1;
 800c956:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 800c958:	1ad2      	subs	r2, r2, r3
    draw_area.y2 -= disp_area->y1;
 800c95a:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
    draw_area.y1 -= disp_area->y1;
 800c95e:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
    draw_area.y2 -= disp_area->y1;
 800c962:	1a1b      	subs	r3, r3, r0
    draw_area.x2 -= disp_area->x1;
 800c964:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    draw_area.y2 -= disp_area->y1;
 800c968:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c96c:	f002 fb82 	bl	800f074 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800c970:	900d      	str	r0, [sp, #52]	; 0x34
 800c972:	b9e8      	cbnz	r0, 800c9b0 <lv_draw_map+0x9c>
 800c974:	8863      	ldrh	r3, [r4, #2]
 800c976:	b9db      	cbnz	r3, 800c9b0 <lv_draw_map+0x9c>
 800c978:	8923      	ldrh	r3, [r4, #8]
 800c97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97e:	d117      	bne.n	800c9b0 <lv_draw_map+0x9c>
 800c980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c982:	b9ab      	cbnz	r3, 800c9b0 <lv_draw_map+0x9c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c986:	2b00      	cmp	r3, #0
 800c988:	f040 80a7 	bne.w	800cada <lv_draw_map+0x1c6>
 800c98c:	7aa3      	ldrb	r3, [r4, #10]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f040 80a5 	bne.w	800cade <lv_draw_map+0x1ca>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800c994:	7ba2      	ldrb	r2, [r4, #14]
 800c996:	9907      	ldr	r1, [sp, #28]
 800c998:	9202      	str	r2, [sp, #8]
 800c99a:	7822      	ldrb	r2, [r4, #0]
 800c99c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	9200      	str	r2, [sp, #0]
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	f7ff fcd3 	bl	800c350 <_lv_blend_map>
}
 800c9aa:	b03d      	add	sp, #244	; 0xf4
 800c9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bf14      	ite	ne
 800c9b6:	2303      	movne	r3, #3
 800c9b8:	2302      	moveq	r3, #2
 800c9ba:	9308      	str	r3, [sp, #32]
        int32_t map_w = lv_area_get_width(map_area);
 800c9bc:	9b07      	ldr	r3, [sp, #28]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800c9be:	9907      	ldr	r1, [sp, #28]
        int32_t map_w = lv_area_get_width(map_area);
 800c9c0:	f9b3 0000 	ldrsh.w	r0, [r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c9c4:	889d      	ldrh	r5, [r3, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c9ce:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800c9d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c9d6:	1a2d      	subs	r5, r5, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800c9d8:	f9bd c096 	ldrsh.w	ip, [sp, #150]	; 0x96
 800c9dc:	1a89      	subs	r1, r1, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800c9de:	f9bd e094 	ldrsh.w	lr, [sp, #148]	; 0x94
 800c9e2:	1ac0      	subs	r0, r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800c9e4:	ebac 0101 	sub.w	r1, ip, r1
 800c9e8:	b22d      	sxth	r5, r5
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800c9ea:	ebae 0000 	sub.w	r0, lr, r0
 800c9ee:	fb05 0001 	mla	r0, r5, r1, r0
 800c9f2:	9908      	ldr	r1, [sp, #32]
 800c9f4:	fb00 6101 	mla	r1, r0, r1, r6
 800c9f8:	910b      	str	r1, [sp, #44]	; 0x2c
        lv_color_t chroma_keyed_color = LV_COLOR_TRANSP;
 800c9fa:	4966      	ldr	r1, [pc, #408]	; (800cb94 <lv_draw_map+0x280>)
 800c9fc:	8849      	ldrh	r1, [r1, #2]
 800c9fe:	911c      	str	r1, [sp, #112]	; 0x70
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800ca00:	fa1f f18e 	uxth.w	r1, lr
 800ca04:	f8bd e098 	ldrh.w	lr, [sp, #152]	; 0x98
 800ca08:	440b      	add	r3, r1
 800ca0a:	f10e 0e01 	add.w	lr, lr, #1
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	ebae 0e01 	sub.w	lr, lr, r1
 800ca14:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 800ca18:	fa1f fe8e 	uxth.w	lr, lr
 800ca1c:	fa0f f18e 	sxth.w	r1, lr
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800ca20:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800ca24:	449e      	add	lr, r3
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800ca26:	fa1f f38c 	uxth.w	r3, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ca2a:	f8bd c09a 	ldrh.w	ip, [sp, #154]	; 0x9a
 800ca2e:	441a      	add	r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ca30:	9113      	str	r1, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ca32:	f10c 0c01 	add.w	ip, ip, #1
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800ca36:	f8ad e0a0 	strh.w	lr, [sp, #160]	; 0xa0
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800ca3a:	b212      	sxth	r2, r2
 800ca3c:	ebac 0c03 	sub.w	ip, ip, r3
 800ca40:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
 800ca44:	fa0f f38c 	sxth.w	r3, ip
        blend_area.y2 = blend_area.y1;
 800ca48:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
 800ca4c:	9318      	str	r3, [sp, #96]	; 0x60
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800ca4e:	8863      	ldrh	r3, [r4, #2]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f040 80a1 	bne.w	800cb98 <lv_draw_map+0x284>
 800ca56:	8923      	ldrh	r3, [r4, #8]
 800ca58:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
 800ca5c:	bf18      	it	ne
 800ca5e:	2201      	movne	r2, #1
 800ca60:	9217      	str	r2, [sp, #92]	; 0x5c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800ca62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	f040 8099 	bne.w	800cb9c <lv_draw_map+0x288>
 800ca6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca6e:	f040 8095 	bne.w	800cb9c <lv_draw_map+0x288>
 800ca72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f040 8091 	bne.w	800cb9c <lv_draw_map+0x288>
 800ca7a:	7aa3      	ldrb	r3, [r4, #10]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 808d 	bne.w	800cb9c <lv_draw_map+0x288>
 800ca82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 8089 	beq.w	800cb9c <lv_draw_map+0x288>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	f005 ffc2 	bl	8012a14 <lv_disp_get_hor_res>
 800ca90:	4606      	mov	r6, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800ca92:	a825      	add	r0, sp, #148	; 0x94
 800ca94:	f006 fb1f 	bl	80130d6 <lv_area_get_size>
 800ca98:	42b0      	cmp	r0, r6
 800ca9a:	d803      	bhi.n	800caa4 <lv_draw_map+0x190>
 800ca9c:	a825      	add	r0, sp, #148	; 0x94
 800ca9e:	f006 fb1a 	bl	80130d6 <lv_area_get_size>
 800caa2:	4606      	mov	r6, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800caa4:	0070      	lsls	r0, r6, #1
            for(y = 0; y < draw_area_h; y++) {
 800caa6:	f04f 0900 	mov.w	r9, #0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800caaa:	f007 fa43 	bl	8013f34 <_lv_mem_buf_get>
 800caae:	4607      	mov	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cab0:	4630      	mov	r0, r6
 800cab2:	f007 fa3f 	bl	8013f34 <_lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 800cab6:	9b08      	ldr	r3, [sp, #32]
 800cab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800caba:	4680      	mov	r8, r0
                map_buf_tmp += map_w * px_size_byte;
 800cabc:	fb13 f505 	smulbb	r5, r3, r5
        uint32_t px_i = 0;
 800cac0:	464b      	mov	r3, r9
 800cac2:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
            for(y = 0; y < draw_area_h; y++) {
 800cac6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cac8:	454a      	cmp	r2, r9
 800caca:	dd47      	ble.n	800cb5c <lv_draw_map+0x248>
 800cacc:	eb07 0e43 	add.w	lr, r7, r3, lsl #1
                map_px = map_buf_tmp;
 800cad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800cad2:	2200      	movs	r2, #0
                    mask_buf[px_i] = px_opa;
 800cad4:	eb08 0c03 	add.w	ip, r8, r3
 800cad8:	e011      	b.n	800cafe <lv_draw_map+0x1ea>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800cada:	2303      	movs	r3, #3
 800cadc:	e76d      	b.n	800c9ba <lv_draw_map+0xa6>
 800cade:	2302      	movs	r3, #2
 800cae0:	e76b      	b.n	800c9ba <lv_draw_map+0xa6>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800cae2:	7888      	ldrb	r0, [r1, #2]
                    mask_buf[px_i] = px_opa;
 800cae4:	f80c 0002 	strb.w	r0, [ip, r2]
                    if(px_opa) {
 800cae8:	b130      	cbz	r0, 800caf8 <lv_draw_map+0x1e4>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 800caea:	f891 b001 	ldrb.w	fp, [r1, #1]
 800caee:	7808      	ldrb	r0, [r1, #0]
 800caf0:	eb00 200b 	add.w	r0, r0, fp, lsl #8
 800caf4:	f82e 0012 	strh.w	r0, [lr, r2, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800caf8:	9808      	ldr	r0, [sp, #32]
 800cafa:	3201      	adds	r2, #1
 800cafc:	4401      	add	r1, r0
 800cafe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cb00:	4290      	cmp	r0, r2
 800cb02:	dcee      	bgt.n	800cae2 <lv_draw_map+0x1ce>
                map_buf_tmp += map_w * px_size_byte;
 800cb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb06:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cb08:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800cb0c:	442a      	add	r2, r5
 800cb0e:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb10:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800cb14:	3201      	adds	r2, #1
 800cb16:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800cb18:	fa03 f282 	sxtah	r2, r3, r2
 800cb1c:	42b2      	cmp	r2, r6
 800cb1e:	d207      	bcs.n	800cb30 <lv_draw_map+0x21c>
                    blend_area.y2 ++;
 800cb20:	f8bd 20a2 	ldrh.w	r2, [sp, #162]	; 0xa2
 800cb24:	3201      	adds	r2, #1
 800cb26:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
            for(y = 0; y < draw_area_h; y++) {
 800cb2a:	f109 0901 	add.w	r9, r9, #1
 800cb2e:	e7ca      	b.n	800cac6 <lv_draw_map+0x1b2>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800cb30:	7ba3      	ldrb	r3, [r4, #14]
 800cb32:	463a      	mov	r2, r7
 800cb34:	a927      	add	r1, sp, #156	; 0x9c
 800cb36:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb38:	9302      	str	r3, [sp, #8]
 800cb3a:	7823      	ldrb	r3, [r4, #0]
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	2302      	movs	r3, #2
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	4643      	mov	r3, r8
 800cb44:	f7ff fc04 	bl	800c350 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800cb48:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b21b      	sxth	r3, r3
 800cb50:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    blend_area.y2 = blend_area.y1;
 800cb54:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                    px_i = 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e7e6      	b.n	800cb2a <lv_draw_map+0x216>
            if(blend_area.y1 != blend_area.y2) {
 800cb5c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800cb60:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d00e      	beq.n	800cb86 <lv_draw_map+0x272>
                blend_area.y2--;
 800cb68:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	a927      	add	r1, sp, #156	; 0x9c
 800cb6e:	9810      	ldr	r0, [sp, #64]	; 0x40
                blend_area.y2--;
 800cb70:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800cb74:	7ba3      	ldrb	r3, [r4, #14]
 800cb76:	9302      	str	r3, [sp, #8]
 800cb78:	7823      	ldrb	r3, [r4, #0]
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	4643      	mov	r3, r8
 800cb82:	f7ff fbe5 	bl	800c350 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 800cb86:	4640      	mov	r0, r8
 800cb88:	f007 f86a 	bl	8013c60 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800cb8c:	4638      	mov	r0, r7
            _lv_mem_buf_release(map2);
 800cb8e:	f007 f867 	bl	8013c60 <_lv_mem_buf_release>
}
 800cb92:	e70a      	b.n	800c9aa <lv_draw_map+0x96>
 800cb94:	0801f3a4 	.word	0x0801f3a4
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	9317      	str	r3, [sp, #92]	; 0x5c
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800cb9c:	4638      	mov	r0, r7
 800cb9e:	f005 ff39 	bl	8012a14 <lv_disp_get_hor_res>
 800cba2:	9009      	str	r0, [sp, #36]	; 0x24
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800cba4:	a825      	add	r0, sp, #148	; 0x94
 800cba6:	f006 fa96 	bl	80130d6 <lv_area_get_size>
 800cbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbac:	4298      	cmp	r0, r3
 800cbae:	d803      	bhi.n	800cbb8 <lv_draw_map+0x2a4>
 800cbb0:	a825      	add	r0, sp, #148	; 0x94
 800cbb2:	f006 fa90 	bl	80130d6 <lv_area_get_size>
 800cbb6:	9009      	str	r0, [sp, #36]	; 0x24
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800cbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbba:	0058      	lsls	r0, r3, #1
 800cbbc:	f007 f9ba 	bl	8013f34 <_lv_mem_buf_get>
 800cbc0:	9011      	str	r0, [sp, #68]	; 0x44
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cbc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbc4:	f007 f9b6 	bl	8013f34 <_lv_mem_buf_get>
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800cbc8:	214c      	movs	r1, #76	; 0x4c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cbca:	4682      	mov	sl, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800cbcc:	a829      	add	r0, sp, #164	; 0xa4
 800cbce:	f007 fa4f 	bl	8014070 <_lv_memset_00>
            if(transform) {
 800cbd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbd4:	b363      	cbz	r3, 800cc30 <lv_draw_map+0x31c>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800cbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f040 8088 	bne.w	800ccee <lv_draw_map+0x3da>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 800cbde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	bf14      	ite	ne
 800cbe4:	2206      	movne	r2, #6
 800cbe6:	2204      	moveq	r2, #4
                trans_dsc.cfg.angle = draw_dsc->angle;
 800cbe8:	8863      	ldrh	r3, [r4, #2]
                _lv_img_buf_transform_init(&trans_dsc);
 800cbea:	a829      	add	r0, sp, #164	; 0xa4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cbec:	9907      	ldr	r1, [sp, #28]
                trans_dsc.cfg.angle = draw_dsc->angle;
 800cbee:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800cbf2:	8923      	ldrh	r3, [r4, #8]
 800cbf4:	8849      	ldrh	r1, [r1, #2]
 800cbf6:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
 800cbfa:	9b07      	ldr	r3, [sp, #28]
                trans_dsc.cfg.src = map_p;
 800cbfc:	9629      	str	r6, [sp, #164]	; 0xa4
 800cbfe:	88db      	ldrh	r3, [r3, #6]
                trans_dsc.cfg.src_w = map_w;
 800cc00:	f8ad 50a8 	strh.w	r5, [sp, #168]	; 0xa8
 800cc04:	3301      	adds	r3, #1
                trans_dsc.cfg.cf = cf;
 800cc06:	f88d 20b6 	strb.w	r2, [sp, #182]	; 0xb6
 800cc0a:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800cc0c:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800cc10:	88a3      	ldrh	r3, [r4, #4]
 800cc12:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 800cc16:	88e3      	ldrh	r3, [r4, #6]
 800cc18:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.color = draw_dsc->recolor;
 800cc1c:	89a3      	ldrh	r3, [r4, #12]
 800cc1e:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800cc22:	7be3      	ldrb	r3, [r4, #15]
 800cc24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cc28:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
                _lv_img_buf_transform_init(&trans_dsc);
 800cc2c:	f004 fc02 	bl	8011434 <_lv_img_buf_transform_init>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800cc30:	7aa3      	ldrb	r3, [r4, #10]
 800cc32:	43da      	mvns	r2, r3
 800cc34:	b2d2      	uxtb	r2, r2
 800cc36:	9216      	str	r2, [sp, #88]	; 0x58
            if(draw_dsc->recolor_opa != 0) {
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d05a      	beq.n	800ccf2 <lv_draw_map+0x3de>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800cc3c:	7b62      	ldrb	r2, [r4, #13]
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	08d2      	lsrs	r2, r2, #3
 800cc42:	435a      	muls	r2, r3
 800cc44:	921b      	str	r2, [sp, #108]	; 0x6c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800cc46:	89a2      	ldrh	r2, [r4, #12]
 800cc48:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800cc4c:	435a      	muls	r2, r3
 800cc4e:	921a      	str	r2, [sp, #104]	; 0x68
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800cc50:	7b22      	ldrb	r2, [r4, #12]
 800cc52:	f002 021f 	and.w	r2, r2, #31
 800cc56:	4353      	muls	r3, r2
 800cc58:	9312      	str	r3, [sp, #72]	; 0x48
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d14c      	bne.n	800ccfa <lv_draw_map+0x3e6>
 800cc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d149      	bne.n	800ccfa <lv_draw_map+0x3e6>
 800cc66:	8863      	ldrh	r3, [r4, #2]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d146      	bne.n	800ccfa <lv_draw_map+0x3e6>
 800cc6c:	8923      	ldrh	r3, [r4, #8]
 800cc6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc72:	bf0c      	ite	eq
 800cc74:	f04f 0b01 	moveq.w	fp, #1
 800cc78:	f04f 0b02 	movne.w	fp, #2
            if(other_mask_cnt) {
 800cc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc7e:	b11b      	cbz	r3, 800cc88 <lv_draw_map+0x374>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800cc80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc82:	4650      	mov	r0, sl
 800cc84:	f007 fa23 	bl	80140ce <_lv_memset_ff>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800cc88:	9b06      	ldr	r3, [sp, #24]
 800cc8a:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
 800cc8e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cc92:	4413      	add	r3, r2
 800cc94:	9a07      	ldr	r2, [sp, #28]
 800cc96:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	931d      	str	r3, [sp, #116]	; 0x74
                map_buf_tmp += map_w * px_size_byte;
 800cc9e:	9b08      	ldr	r3, [sp, #32]
 800cca0:	fb13 f305 	smulbb	r3, r3, r5
 800cca4:	931f      	str	r3, [sp, #124]	; 0x7c
            for(y = 0; y < draw_area_h; y++) {
 800cca6:	2300      	movs	r3, #0
 800cca8:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccb2:	9323      	str	r3, [sp, #140]	; 0x8c
            for(y = 0; y < draw_area_h; y++) {
 800ccb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ccb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	dc21      	bgt.n	800cd00 <lv_draw_map+0x3ec>
            if(blend_area.y1 != blend_area.y2) {
 800ccbc:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800ccc0:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d00d      	beq.n	800cce4 <lv_draw_map+0x3d0>
                blend_area.y2--;
 800ccc8:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800ccca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cccc:	a927      	add	r1, sp, #156	; 0x9c
 800ccce:	9810      	ldr	r0, [sp, #64]	; 0x40
                blend_area.y2--;
 800ccd0:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800ccd4:	7ba3      	ldrb	r3, [r4, #14]
 800ccd6:	9302      	str	r3, [sp, #8]
 800ccd8:	7823      	ldrb	r3, [r4, #0]
 800ccda:	e9cd b300 	strd	fp, r3, [sp]
 800ccde:	4653      	mov	r3, sl
 800cce0:	f7ff fb36 	bl	800c350 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 800cce4:	4650      	mov	r0, sl
 800cce6:	f006 ffbb 	bl	8013c60 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800ccea:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ccec:	e74f      	b.n	800cb8e <lv_draw_map+0x27a>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800ccee:	2205      	movs	r2, #5
 800ccf0:	e77a      	b.n	800cbe8 <lv_draw_map+0x2d4>
            uint16_t recolor_premult[3] = {0};
 800ccf2:	9312      	str	r3, [sp, #72]	; 0x48
 800ccf4:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800ccf8:	e7af      	b.n	800cc5a <lv_draw_map+0x346>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ccfa:	f04f 0b02 	mov.w	fp, #2
 800ccfe:	e7bd      	b.n	800cc7c <lv_draw_map+0x368>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800cd00:	9b06      	ldr	r3, [sp, #24]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800cd02:	f04f 0900 	mov.w	r9, #0
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800cd06:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
 800cd0a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cd0e:	4413      	add	r3, r2
 800cd10:	9a07      	ldr	r2, [sp, #28]
 800cd12:	f9b2 2000 	ldrsh.w	r2, [r2]
 800cd16:	1a9b      	subs	r3, r3, r2
 800cd18:	9a05      	ldr	r2, [sp, #20]
 800cd1a:	931e      	str	r3, [sp, #120]	; 0x78
 800cd1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
    int32_t yt = y - dsc->cfg.pivot_y;
 800cd22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd24:	9320      	str	r3, [sp, #128]	; 0x80
                map_px = map_buf_tmp;
 800cd26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd28:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd2c:	4413      	add	r3, r2
 800cd2e:	b21b      	sxth	r3, r3
 800cd30:	9322      	str	r3, [sp, #136]	; 0x88
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800cd32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd34:	454b      	cmp	r3, r9
 800cd36:	dc46      	bgt.n	800cdc6 <lv_draw_map+0x4b2>
 800cd38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd3a:	9a05      	ldr	r2, [sp, #20]
 800cd3c:	189d      	adds	r5, r3, r2
                if(other_mask_cnt) {
 800cd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd40:	b33b      	cbz	r3, 800cd92 <lv_draw_map+0x47e>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 800cd42:	9806      	ldr	r0, [sp, #24]
 800cd44:	4613      	mov	r3, r2
 800cd46:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 800cd4a:	8a40      	ldrh	r0, [r0, #18]
 800cd4c:	4453      	add	r3, sl
 800cd4e:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800cd52:	4402      	add	r2, r0
 800cd54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cd56:	4699      	mov	r9, r3
 800cd58:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800cd5c:	4402      	add	r2, r0
 800cd5e:	9806      	ldr	r0, [sp, #24]
 800cd60:	3301      	adds	r3, #1
 800cd62:	8a00      	ldrh	r0, [r0, #16]
 800cd64:	b212      	sxth	r2, r2
 800cd66:	1a5b      	subs	r3, r3, r1
 800cd68:	4401      	add	r1, r0
 800cd6a:	4648      	mov	r0, r9
 800cd6c:	b21b      	sxth	r3, r3
 800cd6e:	b209      	sxth	r1, r1
 800cd70:	f002 f930 	bl	800efd4 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f040 8127 	bne.w	800cfc8 <lv_draw_map+0x6b4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cd7a:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cd7e:	f04f 0b02 	mov.w	fp, #2
 800cd82:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800cd86:	4648      	mov	r0, r9
 800cd88:	3101      	adds	r1, #1
 800cd8a:	1ac9      	subs	r1, r1, r3
 800cd8c:	b209      	sxth	r1, r1
 800cd8e:	f007 f96f 	bl	8014070 <_lv_memset_00>
                map_buf_tmp += map_w * px_size_byte;
 800cd92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cd96:	4413      	add	r3, r2
 800cd98:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800cd9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd9e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800cda2:	3301      	adds	r3, #1
 800cda4:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800cda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda8:	fa05 f383 	sxtah	r3, r5, r3
 800cdac:	4293      	cmp	r3, r2
 800cdae:	f080 8110 	bcs.w	800cfd2 <lv_draw_map+0x6be>
                    blend_area.y2 ++;
 800cdb2:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            for(y = 0; y < draw_area_h; y++) {
 800cdbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdbe:	9505      	str	r5, [sp, #20]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	930c      	str	r3, [sp, #48]	; 0x30
 800cdc4:	e776      	b.n	800ccb4 <lv_draw_map+0x3a0>
                    if(transform) {
 800cdc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 80dd 	beq.w	800cf88 <lv_draw_map+0x674>
 800cdce:	9a22      	ldr	r2, [sp, #136]	; 0x88
    int32_t xt = x - dsc->cfg.pivot_x;
 800cdd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    int32_t yt = y - dsc->cfg.pivot_y;
 800cdd2:	f9bd 10ae 	ldrsh.w	r1, [sp, #174]	; 0xae
    int32_t xt = x - dsc->cfg.pivot_x;
 800cdd6:	444b      	add	r3, r9
 800cdd8:	f9bd 60ac 	ldrsh.w	r6, [sp, #172]	; 0xac
    int32_t yt = y - dsc->cfg.pivot_y;
 800cddc:	1a51      	subs	r1, r2, r1

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800cdde:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
    int32_t xt = x - dsc->cfg.pivot_x;
 800cde2:	b21b      	sxth	r3, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800cde4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    int32_t xt = x - dsc->cfg.pivot_x;
 800cde8:	eba3 0306 	sub.w	r3, r3, r6
 800cdec:	e9dd 7032 	ldrd	r7, r0, [sp, #200]	; 0xc8
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800cdf0:	d11a      	bne.n	800ce28 <lv_draw_map+0x514>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800cdf2:	e9dd 6234 	ldrd	r6, r2, [sp, #208]	; 0xd0
 800cdf6:	fb02 f503 	mul.w	r5, r2, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800cdfa:	434a      	muls	r2, r1
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800cdfc:	fb06 5511 	mls	r5, r6, r1, r5
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800ce00:	fb06 2603 	mla	r6, r6, r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ce04:	eb07 05a5 	add.w	r5, r7, r5, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800ce08:	eb00 03a6 	add.w	r3, r0, r6, asr #2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ce0c:	9514      	str	r5, [sp, #80]	; 0x50
    }
    else {
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ce0e:	9315      	str	r3, [sp, #84]	; 0x54
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 800ce10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce12:	121f      	asrs	r7, r3, #8
    int32_t ys_int = ys >> 8;

    if(xs_int >= dsc->cfg.src_w) return false;
 800ce14:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 800ce18:	429f      	cmp	r7, r3
 800ce1a:	db20      	blt.n	800ce5e <lv_draw_map+0x54a>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800ce1c:	9b05      	ldr	r3, [sp, #20]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4453      	add	r3, sl
 800ce22:	f803 2009 	strb.w	r2, [r3, r9]
                                continue;
 800ce26:	e0b8      	b.n	800cf9a <lv_draw_map+0x686>
 800ce28:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800ce2a:	4353      	muls	r3, r2
 800ce2c:	434a      	muls	r2, r1
    else if(dsc->cfg.angle == 0) {
 800ce2e:	f9bd 10b0 	ldrsh.w	r1, [sp, #176]	; 0xb0
 800ce32:	115b      	asrs	r3, r3, #5
 800ce34:	1152      	asrs	r2, r2, #5
 800ce36:	b919      	cbnz	r1, 800ce40 <lv_draw_map+0x52c>
        xs = xt + dsc->tmp.pivot_x_256;
 800ce38:	18fb      	adds	r3, r7, r3
 800ce3a:	9314      	str	r3, [sp, #80]	; 0x50
        ys = yt + dsc->tmp.pivot_y_256;
 800ce3c:	1883      	adds	r3, r0, r2
 800ce3e:	e7e6      	b.n	800ce0e <lv_draw_map+0x4fa>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ce40:	e9dd 1634 	ldrd	r1, r6, [sp, #208]	; 0xd0
 800ce44:	fb03 f506 	mul.w	r5, r3, r6
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ce48:	4356      	muls	r6, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ce4a:	fb02 5511 	mls	r5, r2, r1, r5
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ce4e:	fb03 6601 	mla	r6, r3, r1, r6
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ce52:	eb07 25a5 	add.w	r5, r7, r5, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ce56:	eb00 23a6 	add.w	r3, r0, r6, asr #10
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ce5a:	9514      	str	r5, [sp, #80]	; 0x50
 800ce5c:	e7d7      	b.n	800ce0e <lv_draw_map+0x4fa>
    else if(xs_int < 0) return false;
 800ce5e:	2f00      	cmp	r7, #0
 800ce60:	dbdc      	blt.n	800ce1c <lv_draw_map+0x508>
    int32_t ys_int = ys >> 8;
 800ce62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce64:	1216      	asrs	r6, r2, #8

    if(ys_int >= dsc->cfg.src_h) return false;
 800ce66:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800ce6a:	4296      	cmp	r6, r2
 800ce6c:	dad6      	bge.n	800ce1c <lv_draw_map+0x508>
    else if(ys_int < 0) return false;
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	dbd4      	blt.n	800ce1c <lv_draw_map+0x508>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 800ce72:	f89d 10d8 	ldrb.w	r1, [sp, #216]	; 0xd8
 800ce76:	f011 0204 	ands.w	r2, r1, #4
 800ce7a:	9221      	str	r2, [sp, #132]	; 0x84
 800ce7c:	d06f      	beq.n	800cf5e <lv_draw_map+0x64a>
 800ce7e:	fb03 7306 	mla	r3, r3, r6, r7
        if(dsc->tmp.has_alpha == 0) {
 800ce82:	f011 0f02 	tst.w	r1, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800ce86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ce88:	ea4f 0543 	mov.w	r5, r3, lsl #1
        if(dsc->tmp.has_alpha == 0) {
 800ce8c:	d15a      	bne.n	800cf44 <lv_draw_map+0x630>
        *d8 = *s8;
 800ce8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800ce92:	1951      	adds	r1, r2, r5
 800ce94:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
 800ce98:	784b      	ldrb	r3, [r1, #1]
 800ce9a:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
            px_size = LV_COLOR_SIZE >> 3;
 800ce9e:	2302      	movs	r3, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
 800cea0:	f89d 20d8 	ldrb.w	r2, [sp, #216]	; 0xd8
 800cea4:	07d2      	lsls	r2, r2, #31
 800cea6:	d505      	bpl.n	800ceb4 <lv_draw_map+0x5a0>
        lv_color_t ct = LV_COLOR_TRANSP;
        if(dsc->res.color.full == ct.full) return false;
 800cea8:	4a61      	ldr	r2, [pc, #388]	; (800d030 <lv_draw_map+0x71c>)
 800ceaa:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
 800ceae:	8852      	ldrh	r2, [r2, #2]
 800ceb0:	428a      	cmp	r2, r1
 800ceb2:	d0b3      	beq.n	800ce1c <lv_draw_map+0x508>
    }

    if(dsc->cfg.antialias == false) return true;
 800ceb4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800ceb8:	b18a      	cbz	r2, 800cede <lv_draw_map+0x5ca>

    dsc->tmp.xs = xs;
 800ceba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    dsc->tmp.ys_int = ys_int;
    dsc->tmp.pxi = pxi;
    dsc->tmp.px_size = px_size;

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800cebc:	a829      	add	r0, sp, #164	; 0xa4
    dsc->tmp.xs_int = xs_int;
 800cebe:	f8ad 70e4 	strh.w	r7, [sp, #228]	; 0xe4
    dsc->tmp.xs = xs;
 800cec2:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    dsc->tmp.ys = ys;
 800cec6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    dsc->tmp.ys_int = ys_int;
 800cec8:	f8ad 60e6 	strh.w	r6, [sp, #230]	; 0xe6
    dsc->tmp.ys = ys;
 800cecc:	f8ad 20e2 	strh.w	r2, [sp, #226]	; 0xe2
    dsc->tmp.pxi = pxi;
 800ced0:	953a      	str	r5, [sp, #232]	; 0xe8
    dsc->tmp.px_size = px_size;
 800ced2:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800ced6:	f004 fc02 	bl	80116de <_lv_img_buf_transform_anti_alias>
                        if(ret == false) {
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d09e      	beq.n	800ce1c <lv_draw_map+0x508>
                            mask_buf[px_i] = trans_dsc.res.opa;
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	f89d 20ba 	ldrb.w	r2, [sp, #186]	; 0xba
 800cee4:	4453      	add	r3, sl
 800cee6:	f803 2009 	strb.w	r2, [r3, r9]
                            c.full = trans_dsc.res.color.full;
 800ceea:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
                    if(draw_dsc->recolor_opa != 0) {
 800ceee:	7aa2      	ldrb	r2, [r4, #10]
 800cef0:	b322      	cbz	r2, 800cf3c <lv_draw_map+0x628>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cef2:	0ada      	lsrs	r2, r3, #11
 800cef4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cef6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cef8:	9d16      	ldr	r5, [sp, #88]	; 0x58
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cefa:	fb02 0201 	mla	r2, r2, r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cefe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cf00:	f3c3 1145 	ubfx	r1, r3, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf04:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf08:	f248 0081 	movw	r0, #32897	; 0x8081
 800cf0c:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf0e:	fb01 6105 	mla	r1, r1, r5, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf12:	9e12      	ldr	r6, [sp, #72]	; 0x48
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf14:	4342      	muls	r2, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf16:	fb03 6305 	mla	r3, r3, r5, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf1a:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf1c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf20:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf22:	4341      	muls	r1, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf24:	4343      	muls	r3, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf26:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800cf2a:	0ddb      	lsrs	r3, r3, #23
 800cf2c:	f363 0804 	bfi	r8, r3, #0, #5
 800cf30:	f361 184a 	bfi	r8, r1, #5, #6
 800cf34:	f362 28cf 	bfi	r8, r2, #11, #5
 800cf38:	fa1f f388 	uxth.w	r3, r8
                    map2[px_i].full = c.full;
 800cf3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf3e:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 800cf42:	e02a      	b.n	800cf9a <lv_draw_map+0x686>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800cf44:	441d      	add	r5, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800cf46:	1953      	adds	r3, r2, r5
 800cf48:	5d52      	ldrb	r2, [r2, r5]
 800cf4a:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 800cf4e:	785a      	ldrb	r2, [r3, #1]
 800cf50:	f88d 20b9 	strb.w	r2, [sp, #185]	; 0xb9
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800cf54:	789b      	ldrb	r3, [r3, #2]
 800cf56:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e7a0      	b.n	800cea0 <lv_draw_map+0x58c>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800cf5e:	b239      	sxth	r1, r7
 800cf60:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 800cf64:	b232      	sxth	r2, r6
 800cf66:	a82f      	add	r0, sp, #188	; 0xbc
 800cf68:	460d      	mov	r5, r1
 800cf6a:	9219      	str	r2, [sp, #100]	; 0x64
 800cf6c:	f004 f976 	bl	801125c <lv_img_buf_get_px_color>
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800cf70:	4629      	mov	r1, r5
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800cf72:	f8ad 00b8 	strh.w	r0, [sp, #184]	; 0xb8
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800cf76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf78:	a82f      	add	r0, sp, #188	; 0xbc
 800cf7a:	f004 f9e5 	bl	8011348 <lv_img_buf_get_px_alpha>
        pxi = 0; /*unused*/
 800cf7e:	9d21      	ldr	r5, [sp, #132]	; 0x84
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800cf80:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
        px_size = 0;    /*unused*/
 800cf84:	462b      	mov	r3, r5
 800cf86:	e78b      	b.n	800cea0 <lv_draw_map+0x58c>
 800cf88:	9b05      	ldr	r3, [sp, #20]
                        if(alpha_byte) {
 800cf8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf8c:	4453      	add	r3, sl
 800cf8e:	b15a      	cbz	r2, 800cfa8 <lv_draw_map+0x694>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800cf90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf92:	7892      	ldrb	r2, [r2, #2]
                            mask_buf[px_i] = px_opa;
 800cf94:	f803 2009 	strb.w	r2, [r3, r9]
                            if(px_opa == 0) {
 800cf98:	b94a      	cbnz	r2, 800cfae <lv_draw_map+0x69a>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800cf9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf9c:	f109 0901 	add.w	r9, r9, #1
 800cfa0:	9a08      	ldr	r2, [sp, #32]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfa6:	e6c4      	b.n	800cd32 <lv_draw_map+0x41e>
                            mask_buf[px_i] = 0xFF;
 800cfa8:	22ff      	movs	r2, #255	; 0xff
 800cfaa:	f803 2009 	strb.w	r2, [r3, r9]
                        c.full =  map_px[0] + (map_px[1] << 8);
 800cfae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfb0:	785a      	ldrb	r2, [r3, #1]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if(chroma_key) {
 800cfb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                        c.full =  map_px[0] + (map_px[1] << 8);
 800cfba:	b29b      	uxth	r3, r3
                        if(chroma_key) {
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	d096      	beq.n	800ceee <lv_draw_map+0x5da>
                            if(c.full == chroma_keyed_color.full) {
 800cfc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d193      	bne.n	800ceee <lv_draw_map+0x5da>
 800cfc6:	e729      	b.n	800ce1c <lv_draw_map+0x508>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cfc8:	2802      	cmp	r0, #2
 800cfca:	bf08      	it	eq
 800cfcc:	f04f 0b02 	moveq.w	fp, #2
 800cfd0:	e6df      	b.n	800cd92 <lv_draw_map+0x47e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800cfd2:	7ba3      	ldrb	r3, [r4, #14]
 800cfd4:	a927      	add	r1, sp, #156	; 0x9c
 800cfd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	7823      	ldrb	r3, [r4, #0]
 800cfdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cfde:	e9cd b300 	strd	fp, r3, [sp]
 800cfe2:	4653      	mov	r3, sl
 800cfe4:	f7ff f9b4 	bl	800c350 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800cfe8:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	; 0xa2
 800cfec:	3301      	adds	r3, #1
 800cfee:	b21b      	sxth	r3, r3
 800cff0:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    blend_area.y2 = blend_area.y1;
 800cff4:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800cff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cffa:	b99b      	cbnz	r3, 800d024 <lv_draw_map+0x710>
 800cffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cffe:	b98b      	cbnz	r3, 800d024 <lv_draw_map+0x710>
 800d000:	8863      	ldrh	r3, [r4, #2]
 800d002:	b97b      	cbnz	r3, 800d024 <lv_draw_map+0x710>
 800d004:	8923      	ldrh	r3, [r4, #8]
 800d006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d00a:	bf0c      	ite	eq
 800d00c:	f04f 0b01 	moveq.w	fp, #1
 800d010:	f04f 0b02 	movne.w	fp, #2
                    if(other_mask_cnt) {
 800d014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d016:	b143      	cbz	r3, 800d02a <lv_draw_map+0x716>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 800d018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d01a:	4650      	mov	r0, sl
 800d01c:	f007 f857 	bl	80140ce <_lv_memset_ff>
                    px_i = 0;
 800d020:	2500      	movs	r5, #0
 800d022:	e6cb      	b.n	800cdbc <lv_draw_map+0x4a8>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800d024:	f04f 0b02 	mov.w	fp, #2
 800d028:	e7f4      	b.n	800d014 <lv_draw_map+0x700>
                    px_i = 0;
 800d02a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d02c:	e6c6      	b.n	800cdbc <lv_draw_map+0x4a8>
 800d02e:	bf00      	nop
 800d030:	0801f3a4 	.word	0x0801f3a4

0800d034 <lv_draw_img_dsc_init>:
{
 800d034:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800d036:	2110      	movs	r1, #16
{
 800d038:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800d03a:	f007 f819 	bl	8014070 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 800d03e:	2300      	movs	r3, #0
 800d040:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
 800d042:	23ff      	movs	r3, #255	; 0xff
 800d044:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800d046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d04a:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
 800d04c:	7be3      	ldrb	r3, [r4, #15]
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	73e3      	strb	r3, [r4, #15]
}
 800d054:	bd10      	pop	{r4, pc}
	...

0800d058 <lv_img_cf_get_px_size>:
{
 800d058:	3804      	subs	r0, #4
 800d05a:	b2c0      	uxtb	r0, r0
 800d05c:	280a      	cmp	r0, #10
 800d05e:	bf9d      	ittte	ls
 800d060:	4b02      	ldrls	r3, [pc, #8]	; (800d06c <lv_img_cf_get_px_size+0x14>)
 800d062:	18c0      	addls	r0, r0, r3
 800d064:	7900      	ldrbls	r0, [r0, #4]
 800d066:	2000      	movhi	r0, #0
}
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	0801f3a4 	.word	0x0801f3a4

0800d070 <lv_img_cf_is_chroma_keyed>:
{
 800d070:	280a      	cmp	r0, #10
 800d072:	d808      	bhi.n	800d086 <lv_img_cf_is_chroma_keyed+0x16>
 800d074:	2301      	movs	r3, #1
 800d076:	fa03 f000 	lsl.w	r0, r3, r0
 800d07a:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 800d07e:	bf14      	ite	ne
 800d080:	4618      	movne	r0, r3
 800d082:	2000      	moveq	r0, #0
 800d084:	4770      	bx	lr
            is_chroma_keyed = false;
 800d086:	2000      	movs	r0, #0
}
 800d088:	4770      	bx	lr

0800d08a <lv_img_cf_has_alpha>:
{
 800d08a:	280e      	cmp	r0, #14
 800d08c:	d809      	bhi.n	800d0a2 <lv_img_cf_has_alpha+0x18>
 800d08e:	2301      	movs	r3, #1
 800d090:	fa03 f000 	lsl.w	r0, r3, r0
 800d094:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800d098:	4218      	tst	r0, r3
 800d09a:	bf14      	ite	ne
 800d09c:	2001      	movne	r0, #1
 800d09e:	2000      	moveq	r0, #0
 800d0a0:	4770      	bx	lr
            has_alpha = false;
 800d0a2:	2000      	movs	r0, #0
}
 800d0a4:	4770      	bx	lr
	...

0800d0a8 <lv_draw_img>:
{
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	b08d      	sub	sp, #52	; 0x34
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	461f      	mov	r7, r3
    if(src == NULL) {
 800d0b4:	b93a      	cbnz	r2, 800d0c6 <lv_draw_img+0x1e>
        show_error(coords, mask, "No\ndata");
 800d0b6:	4a65      	ldr	r2, [pc, #404]	; (800d24c <lv_draw_img+0x1a4>)
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff fc00 	bl	800c8c0 <show_error>
}
 800d0c0:	b00d      	add	sp, #52	; 0x34
 800d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d9f9      	bls.n	800d0c0 <lv_draw_img+0x18>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 800d0cc:	89b9      	ldrh	r1, [r7, #12]
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	f004 fc60 	bl	8011994 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0ed      	beq.n	800d0b6 <lv_draw_img+0xe>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800d0da:	7b02      	ldrb	r2, [r0, #12]
 800d0dc:	f002 021f 	and.w	r2, r2, #31
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	f7ff ffc5 	bl	800d070 <lv_img_cf_is_chroma_keyed>
 800d0e6:	9002      	str	r0, [sp, #8]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f7ff ffce 	bl	800d08a <lv_img_cf_has_alpha>
    if(cdsc->dec_dsc.error_msg != NULL) {
 800d0ee:	69b2      	ldr	r2, [r6, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800d0f0:	9003      	str	r0, [sp, #12]
    if(cdsc->dec_dsc.error_msg != NULL) {
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d1e0      	bne.n	800d0b8 <lv_draw_img+0x10>
    else if(cdsc->dec_dsc.img_data) {
 800d0f6:	6933      	ldr	r3, [r6, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d042      	beq.n	800d182 <lv_draw_img+0xda>
        lv_area_copy(&map_area_rot, coords);
 800d0fc:	a808      	add	r0, sp, #32
 800d0fe:	4621      	mov	r1, r4
 800d100:	f7ff fbfe 	bl	800c900 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800d104:	887b      	ldrh	r3, [r7, #2]
 800d106:	8938      	ldrh	r0, [r7, #8]
 800d108:	b913      	cbnz	r3, 800d110 <lv_draw_img+0x68>
 800d10a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d10e:	d026      	beq.n	800d15e <lv_draw_img+0xb6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d110:	88e2      	ldrh	r2, [r4, #6]
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800d112:	b21b      	sxth	r3, r3
 800d114:	8861      	ldrh	r1, [r4, #2]
 800d116:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d118:	8825      	ldrh	r5, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d11a:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d11c:	88a1      	ldrh	r1, [r4, #4]
 800d11e:	3101      	adds	r1, #1
 800d120:	b212      	sxth	r2, r2
 800d122:	1b49      	subs	r1, r1, r5
 800d124:	1d3d      	adds	r5, r7, #4
 800d126:	b209      	sxth	r1, r1
 800d128:	e9cd 0500 	strd	r0, r5, [sp]
 800d12c:	a808      	add	r0, sp, #32
 800d12e:	f004 f9fc 	bl	801152a <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800d132:	8822      	ldrh	r2, [r4, #0]
 800d134:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800d138:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 800d13c:	4413      	add	r3, r2
 800d13e:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800d142:	8863      	ldrh	r3, [r4, #2]
 800d144:	4419      	add	r1, r3
 800d146:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 800d14a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800d14e:	440a      	add	r2, r1
 800d150:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800d154:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800d158:	4413      	add	r3, r2
 800d15a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800d15e:	aa08      	add	r2, sp, #32
 800d160:	4649      	mov	r1, r9
 800d162:	a80a      	add	r0, sp, #40	; 0x28
 800d164:	f005 ffc5 	bl	80130f2 <_lv_area_intersect>
        if(union_ok == false) {
 800d168:	2800      	cmp	r0, #0
 800d16a:	d0a9      	beq.n	800d0c0 <lv_draw_img+0x18>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	a90a      	add	r1, sp, #40	; 0x28
 800d170:	4620      	mov	r0, r4
 800d172:	9301      	str	r3, [sp, #4]
 800d174:	9b02      	ldr	r3, [sp, #8]
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	463b      	mov	r3, r7
 800d17a:	6932      	ldr	r2, [r6, #16]
 800d17c:	f7ff fbca 	bl	800c914 <lv_draw_map>
 800d180:	e79e      	b.n	800d0c0 <lv_draw_img+0x18>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800d182:	4622      	mov	r2, r4
 800d184:	4649      	mov	r1, r9
 800d186:	a806      	add	r0, sp, #24
 800d188:	f005 ffb3 	bl	80130f2 <_lv_area_intersect>
        if(union_ok == false) {
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d097      	beq.n	800d0c0 <lv_draw_img+0x18>
 800d190:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 800d194:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800d198:	3501      	adds	r5, #1
 800d19a:	1aed      	subs	r5, r5, r3
 800d19c:	b22d      	sxth	r5, r5
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800d19e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d1a2:	f006 fec7 	bl	8013f34 <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
 800d1a6:	aa08      	add	r2, sp, #32
 800d1a8:	a906      	add	r1, sp, #24
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800d1aa:	4682      	mov	sl, r0
        lv_area_copy(&line, &mask_com);
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	9204      	str	r2, [sp, #16]
 800d1b0:	f7ff fba6 	bl	800c900 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800d1b4:	9a04      	ldr	r2, [sp, #16]
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	f005 ff87 	bl	80130cc <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800d1be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800d1c2:	f9b4 1000 	ldrsh.w	r1, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 800d1c6:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 800d1ca:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d1ce:	1a5b      	subs	r3, r3, r1
        int32_t y = mask_com.y1 - coords->y1;
 800d1d0:	ebab 0808 	sub.w	r8, fp, r8
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d1d4:	b21b      	sxth	r3, r3
 800d1d6:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d1d8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d1dc:	459b      	cmp	fp, r3
 800d1de:	dd03      	ble.n	800d1e8 <lv_draw_img+0x140>
        _lv_mem_buf_release(buf);
 800d1e0:	4650      	mov	r0, sl
 800d1e2:	f006 fd3d 	bl	8013c60 <_lv_mem_buf_release>
 800d1e6:	e76b      	b.n	800d0c0 <lv_draw_img+0x18>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800d1e8:	9a04      	ldr	r2, [sp, #16]
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	a80a      	add	r0, sp, #40	; 0x28
 800d1ee:	f005 ff80 	bl	80130f2 <_lv_area_intersect>
            if(union_ok == false) continue;
 800d1f2:	b338      	cbz	r0, 800d244 <lv_draw_img+0x19c>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d1f4:	f8cd a000 	str.w	sl, [sp]
 800d1f8:	462b      	mov	r3, r5
 800d1fa:	fa0f f288 	sxth.w	r2, r8
 800d1fe:	9905      	ldr	r1, [sp, #20]
 800d200:	4630      	mov	r0, r6
 800d202:	f005 f857 	bl	80122b4 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800d206:	2801      	cmp	r0, #1
 800d208:	d006      	beq.n	800d218 <lv_draw_img+0x170>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800d20a:	4630      	mov	r0, r6
 800d20c:	f005 f862 	bl	80122d4 <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
 800d210:	4650      	mov	r0, sl
 800d212:	f006 fd25 	bl	8013c60 <_lv_mem_buf_release>
 800d216:	e74e      	b.n	800d0b6 <lv_draw_img+0xe>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	4652      	mov	r2, sl
 800d21c:	a90a      	add	r1, sp, #40	; 0x28
 800d21e:	9804      	ldr	r0, [sp, #16]
 800d220:	9301      	str	r3, [sp, #4]
            y++;
 800d222:	f108 0801 	add.w	r8, r8, #1
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800d226:	9b02      	ldr	r3, [sp, #8]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	463b      	mov	r3, r7
 800d22c:	f7ff fb72 	bl	800c914 <lv_draw_map>
            line.y1++;
 800d230:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800d234:	3301      	adds	r3, #1
 800d236:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800d23a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d23e:	3301      	adds	r3, #1
 800d240:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d244:	f10b 0b01 	add.w	fp, fp, #1
 800d248:	e7c6      	b.n	800d1d8 <lv_draw_img+0x130>
 800d24a:	bf00      	nop
 800d24c:	0802c368 	.word	0x0802c368

0800d250 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800d250:	b150      	cbz	r0, 800d268 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d252:	7803      	ldrb	r3, [r0, #0]
 800d254:	f1a3 0220 	sub.w	r2, r3, #32
 800d258:	2a5f      	cmp	r2, #95	; 0x5f
 800d25a:	d907      	bls.n	800d26c <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 800d25c:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800d260:	bf14      	ite	ne
 800d262:	2002      	movne	r0, #2
 800d264:	2000      	moveq	r0, #0
 800d266:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800d268:	2003      	movs	r0, #3
 800d26a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800d26c:	2001      	movs	r0, #1
}
 800d26e:	4770      	bx	lr

0800d270 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800d270:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800d272:	3830      	subs	r0, #48	; 0x30
 800d274:	b2c0      	uxtb	r0, r0
 800d276:	2809      	cmp	r0, #9
 800d278:	d90b      	bls.n	800d292 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d27a:	2b60      	cmp	r3, #96	; 0x60
 800d27c:	bf84      	itt	hi
 800d27e:	3b20      	subhi	r3, #32
 800d280:	b2db      	uxtbhi	r3, r3
 800d282:	3b41      	subs	r3, #65	; 0x41
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b05      	cmp	r3, #5
 800d288:	d802      	bhi.n	800d290 <hex_char_to_num+0x20>
 800d28a:	4a02      	ldr	r2, [pc, #8]	; (800d294 <hex_char_to_num+0x24>)
 800d28c:	5cd0      	ldrb	r0, [r2, r3]
 800d28e:	4770      	bx	lr
{
 800d290:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 800d292:	4770      	bx	lr
 800d294:	0801f3b3 	.word	0x0801f3b3

0800d298 <lv_draw_label_dsc_init>:
{
 800d298:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800d29a:	2124      	movs	r1, #36	; 0x24
{
 800d29c:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800d29e:	f006 fee7 	bl	8014070 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800d2a2:	23ff      	movs	r3, #255	; 0xff
    dsc->sel_color = LV_COLOR_BLACK;
 800d2a4:	221f      	movs	r2, #31
    dsc->opa = LV_OPA_COVER;
 800d2a6:	7323      	strb	r3, [r4, #12]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800d2a8:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <lv_draw_label_dsc_init+0x28>)
    dsc->sel_color = LV_COLOR_BLACK;
 800d2aa:	80a2      	strh	r2, [r4, #4]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800d2ac:	60a3      	str	r3, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800d2ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800d2b2:	e9c4 3305 	strd	r3, r3, [r4, #20]
    dsc->color = LV_COLOR_BLACK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	6023      	str	r3, [r4, #0]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800d2ba:	f884 3020 	strb.w	r3, [r4, #32]
}
 800d2be:	bd10      	pop	{r4, pc}
 800d2c0:	20000064 	.word	0x20000064

0800d2c4 <lv_draw_label>:
{
 800d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	b0d5      	sub	sp, #340	; 0x154
 800d2ca:	4690      	mov	r8, r2
 800d2cc:	930d      	str	r3, [sp, #52]	; 0x34
    if(dsc->opa <= LV_OPA_MIN) return;
 800d2ce:	7b13      	ldrb	r3, [r2, #12]
{
 800d2d0:	9008      	str	r0, [sp, #32]
    if(dsc->opa <= LV_OPA_MIN) return;
 800d2d2:	2b02      	cmp	r3, #2
{
 800d2d4:	9105      	str	r1, [sp, #20]
 800d2d6:	9c5e      	ldr	r4, [sp, #376]	; 0x178
    if(dsc->opa <= LV_OPA_MIN) return;
 800d2d8:	f240 80d6 	bls.w	800d488 <lv_draw_label+0x1c4>
    if(txt[0] == '\0')  return;
 800d2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 80d1 	beq.w	800d488 <lv_draw_label+0x1c4>
    const lv_font_t * font = dsc->font;
 800d2e6:	6893      	ldr	r3, [r2, #8]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800d2e8:	460a      	mov	r2, r1
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	a835      	add	r0, sp, #212	; 0xd4
    const lv_font_t * font = dsc->font;
 800d2ee:	9306      	str	r3, [sp, #24]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800d2f0:	f005 feff 	bl	80130f2 <_lv_area_intersect>
    if(!clip_ok) return;
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f000 80c7 	beq.w	800d488 <lv_draw_label+0x1c4>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 800d2fa:	f898 2021 	ldrb.w	r2, [r8, #33]	; 0x21
 800d2fe:	0797      	lsls	r7, r2, #30
 800d300:	f100 80c5 	bmi.w	800d48e <lv_draw_label+0x1ca>
 800d304:	9b08      	ldr	r3, [sp, #32]
 800d306:	9a08      	ldr	r2, [sp, #32]
 800d308:	889b      	ldrh	r3, [r3, #4]
 800d30a:	8812      	ldrh	r2, [r2, #0]
 800d30c:	3301      	adds	r3, #1
 800d30e:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800d310:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800d312:	9a06      	ldr	r2, [sp, #24]
    y_ofs = dsc->ofs_y;
 800d314:	f9b8 001e 	ldrsh.w	r0, [r8, #30]
    int32_t line_height_font = lv_font_get_line_height(font);
 800d318:	f9b2 6008 	ldrsh.w	r6, [r2, #8]
    pos.x = coords->x1;
 800d31c:	9a08      	ldr	r2, [sp, #32]
    int32_t line_height = line_height_font + dsc->line_space;
 800d31e:	f9b8 500e 	ldrsh.w	r5, [r8, #14]
    pos.x = coords->x1;
 800d322:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t line_height = line_height_font + dsc->line_space;
 800d326:	4435      	add	r5, r6
    pos.x = coords->x1;
 800d328:	920f      	str	r2, [sp, #60]	; 0x3c
    pos.y = coords->y1;
 800d32a:	9a08      	ldr	r2, [sp, #32]
 800d32c:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
    x_ofs = dsc->ofs_x;
 800d330:	f9b8 201c 	ldrsh.w	r2, [r8, #28]
 800d334:	9229      	str	r2, [sp, #164]	; 0xa4
    pos.y += y_ofs;
 800d336:	183a      	adds	r2, r7, r0
 800d338:	b292      	uxth	r2, r2
 800d33a:	b211      	sxth	r1, r2
 800d33c:	9109      	str	r1, [sp, #36]	; 0x24
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800d33e:	2c00      	cmp	r4, #0
 800d340:	f000 80b7 	beq.w	800d4b2 <lv_draw_label+0x1ee>
 800d344:	2800      	cmp	r0, #0
 800d346:	f040 80b8 	bne.w	800d4ba <lv_draw_label+0x1f6>
 800d34a:	2f00      	cmp	r7, #0
 800d34c:	f280 80b3 	bge.w	800d4b6 <lv_draw_label+0x1f2>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800d350:	68a1      	ldr	r1, [r4, #8]
 800d352:	f5c5 7000 	rsb	r0, r5, #512	; 0x200
 800d356:	1bc9      	subs	r1, r1, r7
 800d358:	2900      	cmp	r1, #0
 800d35a:	bfb8      	it	lt
 800d35c:	4249      	neglt	r1, r1
 800d35e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 800d362:	bfc4      	itt	gt
 800d364:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 800d368:	6021      	strgt	r1, [r4, #0]
        last_line_start = hint->line_start;
 800d36a:	6821      	ldr	r1, [r4, #0]
    if(hint && last_line_start >= 0) {
 800d36c:	2900      	cmp	r1, #0
 800d36e:	f2c0 80a4 	blt.w	800d4ba <lv_draw_label+0x1f6>
        line_start = last_line_start;
 800d372:	9107      	str	r1, [sp, #28]
        pos.y += hint->y;
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	440a      	add	r2, r1
 800d378:	b212      	sxth	r2, r2
 800d37a:	9209      	str	r2, [sp, #36]	; 0x24
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d37c:	b21b      	sxth	r3, r3
 800d37e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d380:	9f07      	ldr	r7, [sp, #28]
 800d382:	9320      	str	r3, [sp, #128]	; 0x80
 800d384:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
 800d388:	4438      	add	r0, r7
 800d38a:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	9906      	ldr	r1, [sp, #24]
 800d392:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d394:	f007 fd60 	bl	8014e58 <_lv_txt_get_next_line>
 800d398:	9b07      	ldr	r3, [sp, #28]
 800d39a:	18c3      	adds	r3, r0, r3
 800d39c:	930a      	str	r3, [sp, #40]	; 0x28
    while(pos.y + line_height_font < mask->y1) {
 800d39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a0:	9a05      	ldr	r2, [sp, #20]
 800d3a2:	4433      	add	r3, r6
 800d3a4:	f898 1021 	ldrb.w	r1, [r8, #33]	; 0x21
 800d3a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d3ac:	4293      	cmp	r3, r2
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d3ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    while(pos.y + line_height_font < mask->y1) {
 800d3b0:	f2c0 8086 	blt.w	800d4c0 <lv_draw_label+0x1fc>
 800d3b4:	9a07      	ldr	r2, [sp, #28]
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800d3b6:	074e      	lsls	r6, r1, #29
 800d3b8:	eb03 0002 	add.w	r0, r3, r2
 800d3bc:	f140 80a7 	bpl.w	800d50e <lv_draw_label+0x24a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800d3c0:	9100      	str	r1, [sp, #0]
 800d3c2:	9c07      	ldr	r4, [sp, #28]
 800d3c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d3c6:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800d3ca:	9a06      	ldr	r2, [sp, #24]
 800d3cc:	1b09      	subs	r1, r1, r4
 800d3ce:	f007 fcf1 	bl	8014db4 <_lv_txt_get_width>
 800d3d2:	9b08      	ldr	r3, [sp, #32]
 800d3d4:	9a08      	ldr	r2, [sp, #32]
 800d3d6:	889b      	ldrh	r3, [r3, #4]
 800d3d8:	8812      	ldrh	r2, [r2, #0]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800d3de:	b21b      	sxth	r3, r3
 800d3e0:	1a18      	subs	r0, r3, r0
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 800d3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ea:	4418      	add	r0, r3
 800d3ec:	b203      	sxth	r3, r0
 800d3ee:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_opa_t opa = dsc->opa;
 800d3f0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d3f4:	9324      	str	r3, [sp, #144]	; 0x90
    uint32_t sel_start = dsc->sel_start;
 800d3f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d3fa:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t sel_end = dsc->sel_end;
 800d3fc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d400:	9312      	str	r3, [sp, #72]	; 0x48
    if(sel_start > sel_end) {
 800d402:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d406:	4293      	cmp	r3, r2
 800d408:	bf9e      	ittt	ls
 800d40a:	4613      	movls	r3, r2
 800d40c:	9a13      	ldrls	r2, [sp, #76]	; 0x4c
 800d40e:	e9cd 2312 	strdls	r2, r3, [sp, #72]	; 0x48
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800d412:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 800d416:	0798      	lsls	r0, r3, #30
 800d418:	d01a      	beq.n	800d450 <lv_draw_label+0x18c>
        lv_draw_line_dsc_init(&line_dsc);
 800d41a:	a839      	add	r0, sp, #228	; 0xe4
 800d41c:	f000 fd98 	bl	800df50 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800d420:	f8b8 3000 	ldrh.w	r3, [r8]
        line_dsc.blend_mode = dsc->blend_mode;
 800d424:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
        line_dsc.color = dsc->color;
 800d428:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800d42c:	9b06      	ldr	r3, [sp, #24]
 800d42e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800d432:	2b00      	cmp	r3, #0
 800d434:	bf08      	it	eq
 800d436:	2301      	moveq	r3, #1
 800d438:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        line_dsc.opa = dsc->opa;
 800d43c:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d440:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
        line_dsc.blend_mode = dsc->blend_mode;
 800d444:	f89d 30ed 	ldrb.w	r3, [sp, #237]	; 0xed
 800d448:	f362 0301 	bfi	r3, r2, #0, #2
 800d44c:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800d450:	a83f      	add	r0, sp, #252	; 0xfc
 800d452:	f002 fa29 	bl	800f8a8 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800d456:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    while(txt[line_start] != '\0') {
 800d45a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800d45c:	f8ad 30fe 	strh.w	r3, [sp, #254]	; 0xfe
 800d460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d462:	2bfd      	cmp	r3, #253	; 0xfd
 800d464:	bf88      	it	hi
 800d466:	23ff      	movhi	r3, #255	; 0xff
 800d468:	930c      	str	r3, [sp, #48]	; 0x30
 800d46a:	b2ab      	uxth	r3, r5
 800d46c:	9325      	str	r3, [sp, #148]	; 0x94
 800d46e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800d472:	931f      	str	r3, [sp, #124]	; 0x7c
    uint32_t par_start = 0;
 800d474:	2300      	movs	r3, #0
 800d476:	9323      	str	r3, [sp, #140]	; 0x8c
    while(txt[line_start] != '\0') {
 800d478:	9a07      	ldr	r2, [sp, #28]
 800d47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d47c:	4413      	add	r3, r2
 800d47e:	9322      	str	r3, [sp, #136]	; 0x88
 800d480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d482:	5c9b      	ldrb	r3, [r3, r2]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d157      	bne.n	800d538 <lv_draw_label+0x274>
}
 800d488:	b055      	add	sp, #340	; 0x154
 800d48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800d48e:	9202      	str	r2, [sp, #8]
 800d490:	f647 4218 	movw	r2, #31768	; 0x7c18
 800d494:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800d498:	a83f      	add	r0, sp, #252	; 0xfc
 800d49a:	9201      	str	r2, [sp, #4]
 800d49c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800d4a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d4a2:	9200      	str	r2, [sp, #0]
 800d4a4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d4a8:	f007 fdbe 	bl	8015028 <_lv_txt_get_size>
        w = p.x;
 800d4ac:	f9bd 30fc 	ldrsh.w	r3, [sp, #252]	; 0xfc
 800d4b0:	e72f      	b.n	800d312 <lv_draw_label+0x4e>
    uint32_t line_start     = 0;
 800d4b2:	9407      	str	r4, [sp, #28]
 800d4b4:	e762      	b.n	800d37c <lv_draw_label+0xb8>
 800d4b6:	9007      	str	r0, [sp, #28]
 800d4b8:	e760      	b.n	800d37c <lv_draw_label+0xb8>
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	9207      	str	r2, [sp, #28]
 800d4be:	e75d      	b.n	800d37c <lv_draw_label+0xb8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c2:	9100      	str	r1, [sp, #0]
 800d4c4:	189f      	adds	r7, r3, r2
 800d4c6:	9906      	ldr	r1, [sp, #24]
 800d4c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d4ca:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	f007 fcc2 	bl	8014e58 <_lv_txt_get_next_line>
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d6:	4418      	add	r0, r3
 800d4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4da:	442b      	add	r3, r5
 800d4dc:	b21b      	sxth	r3, r3
 800d4de:	9309      	str	r3, [sp, #36]	; 0x24
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800d4e0:	b174      	cbz	r4, 800d500 <lv_draw_label+0x23c>
 800d4e2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800d4e6:	db0b      	blt.n	800d500 <lv_draw_label+0x23c>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da08      	bge.n	800d500 <lv_draw_label+0x23c>
            hint->line_start = line_start;
 800d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            hint->y          = pos.y - coords->y1;
 800d4f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
            hint->line_start = line_start;
 800d4f2:	6023      	str	r3, [r4, #0]
            hint->y          = pos.y - coords->y1;
 800d4f4:	9b08      	ldr	r3, [sp, #32]
 800d4f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4fa:	1ad2      	subs	r2, r2, r3
            hint->coord_y    = coords->y1;
 800d4fc:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800d500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d502:	9307      	str	r3, [sp, #28]
        if(txt[line_start] == '\0') return;
 800d504:	783b      	ldrb	r3, [r7, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0be      	beq.n	800d488 <lv_draw_label+0x1c4>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d50a:	900a      	str	r0, [sp, #40]	; 0x28
 800d50c:	e747      	b.n	800d39e <lv_draw_label+0xda>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800d50e:	070c      	lsls	r4, r1, #28
 800d510:	f57f af6e 	bpl.w	800d3f0 <lv_draw_label+0x12c>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800d514:	9100      	str	r1, [sp, #0]
 800d516:	9c07      	ldr	r4, [sp, #28]
 800d518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d51a:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800d51e:	9a06      	ldr	r2, [sp, #24]
 800d520:	1b09      	subs	r1, r1, r4
 800d522:	f007 fc47 	bl	8014db4 <_lv_txt_get_width>
 800d526:	9b08      	ldr	r3, [sp, #32]
 800d528:	9a08      	ldr	r2, [sp, #32]
 800d52a:	889b      	ldrh	r3, [r3, #4]
 800d52c:	8812      	ldrh	r2, [r2, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800d532:	b21b      	sxth	r3, r3
 800d534:	1a18      	subs	r0, r3, r0
 800d536:	e757      	b.n	800d3e8 <lv_draw_label+0x124>
        pos.x += x_ofs;
 800d538:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d53a:	441c      	add	r4, r3
 800d53c:	b223      	sxth	r3, r4
 800d53e:	9310      	str	r3, [sp, #64]	; 0x40
        i         = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	9334      	str	r3, [sp, #208]	; 0xd0
                        cmd_state = CMD_STATE_WAIT;
 800d544:	930b      	str	r3, [sp, #44]	; 0x2c
 800d546:	e0c0      	b.n	800d6ca <lv_draw_label+0x406>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800d548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d54e:	429a      	cmp	r2, r3
 800d550:	d023      	beq.n	800d59a <lv_draw_label+0x2d6>
 800d552:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d554:	429a      	cmp	r2, r3
 800d556:	d020      	beq.n	800d59a <lv_draw_label+0x2d6>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800d558:	9a07      	ldr	r2, [sp, #28]
 800d55a:	4ba5      	ldr	r3, [pc, #660]	; (800d7f0 <lv_draw_label+0x52c>)
 800d55c:	4411      	add	r1, r2
 800d55e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4798      	blx	r3
 800d564:	4606      	mov	r6, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800d566:	4ca3      	ldr	r4, [pc, #652]	; (800d7f4 <lv_draw_label+0x530>)
 800d568:	a934      	add	r1, sp, #208	; 0xd0
 800d56a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800d570:	9a22      	ldr	r2, [sp, #136]	; 0x88
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800d572:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800d574:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	2100      	movs	r1, #0
 800d57a:	4410      	add	r0, r2
 800d57c:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d57e:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800d582:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d584:	07d9      	lsls	r1, r3, #31
 800d586:	f140 812a 	bpl.w	800d7de <lv_draw_label+0x51a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d58a:	2d23      	cmp	r5, #35	; 0x23
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800d58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d58e:	d10e      	bne.n	800d5ae <lv_draw_label+0x2ea>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800d590:	b92b      	cbnz	r3, 800d59e <lv_draw_label+0x2da>
                        par_start = i;
 800d592:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800d594:	9323      	str	r3, [sp, #140]	; 0x8c
                        cmd_state = CMD_STATE_PAR;
 800d596:	2301      	movs	r3, #1
 800d598:	e7d4      	b.n	800d544 <lv_draw_label+0x280>
            uint32_t logical_char_pos = 0;
 800d59a:	2600      	movs	r6, #0
 800d59c:	e7e3      	b.n	800d566 <lv_draw_label+0x2a2>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800d59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d052      	beq.n	800d64a <lv_draw_label+0x386>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	f040 811a 	bne.w	800d7de <lv_draw_label+0x51a>
                        cmd_state = CMD_STATE_WAIT;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e7ca      	b.n	800d544 <lv_draw_label+0x280>
                if(cmd_state == CMD_STATE_PAR) {
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	f040 8115 	bne.w	800d7de <lv_draw_label+0x51a>
                    if(letter == ' ') {
 800d5b4:	2d20      	cmp	r5, #32
 800d5b6:	f040 8088 	bne.w	800d6ca <lv_draw_label+0x406>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800d5ba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800d5bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d5be:	1a9b      	subs	r3, r3, r2
 800d5c0:	2b07      	cmp	r3, #7
 800d5c2:	d13f      	bne.n	800d644 <lv_draw_label+0x380>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800d5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5c6:	1898      	adds	r0, r3, r2
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	aa3c      	add	r2, sp, #240	; 0xf0
 800d5cc:	5cc1      	ldrb	r1, [r0, r3]
 800d5ce:	5499      	strb	r1, [r3, r2]
 800d5d0:	3301      	adds	r3, #1
    while(len) {
 800d5d2:	2b06      	cmp	r3, #6
 800d5d4:	d1fa      	bne.n	800d5cc <lv_draw_label+0x308>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800d5d6:	f89d 00f0 	ldrb.w	r0, [sp, #240]	; 0xf0
 800d5da:	f7ff fe49 	bl	800d270 <hex_char_to_num>
 800d5de:	4601      	mov	r1, r0
 800d5e0:	f89d 00f1 	ldrb.w	r0, [sp, #241]	; 0xf1
 800d5e4:	f7ff fe44 	bl	800d270 <hex_char_to_num>
 800d5e8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800d5ec:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
 800d5f0:	f7ff fe3e 	bl	800d270 <hex_char_to_num>
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	f89d 00f3 	ldrb.w	r0, [sp, #243]	; 0xf3
 800d5fa:	f7ff fe39 	bl	800d270 <hex_char_to_num>
 800d5fe:	eb00 1404 	add.w	r4, r0, r4, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800d602:	f89d 00f4 	ldrb.w	r0, [sp, #244]	; 0xf4
 800d606:	f7ff fe33 	bl	800d270 <hex_char_to_num>
 800d60a:	4605      	mov	r5, r0
 800d60c:	f89d 00f5 	ldrb.w	r0, [sp, #245]	; 0xf5
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 800d610:	f3c4 0485 	ubfx	r4, r4, #2, #6
 800d614:	f7ff fe2c 	bl	800d270 <hex_char_to_num>
 800d618:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800d61c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d620:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800d624:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800d628:	f360 0304 	bfi	r3, r0, #0, #5
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f364 134a 	bfi	r3, r4, #5, #6
 800d632:	b29b      	uxth	r3, r3
 800d634:	f361 23cf 	bfi	r3, r1, #11, #5
 800d638:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800d63c:	b29b      	uxth	r3, r3
                            recolor.full = dsc->color.full;
 800d63e:	9326      	str	r3, [sp, #152]	; 0x98
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d640:	2302      	movs	r3, #2
 800d642:	e77f      	b.n	800d544 <lv_draw_label+0x280>
                            recolor.full = dsc->color.full;
 800d644:	f8b8 3000 	ldrh.w	r3, [r8]
 800d648:	e7f9      	b.n	800d63e <lv_draw_label+0x37a>
                        cmd_state = CMD_STATE_WAIT;
 800d64a:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
 800d64c:	f8b8 4000 	ldrh.w	r4, [r8]
                        cmd_state = CMD_STATE_WAIT;
 800d650:	930b      	str	r3, [sp, #44]	; 0x2c
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d652:	4629      	mov	r1, r5
 800d654:	9806      	ldr	r0, [sp, #24]
 800d656:	f004 fe97 	bl	8012388 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800d65a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d65e:	9a12      	ldr	r2, [sp, #72]	; 0x48
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d660:	9021      	str	r0, [sp, #132]	; 0x84
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800d662:	429a      	cmp	r2, r3
 800d664:	d022      	beq.n	800d6ac <lv_draw_label+0x3e8>
 800d666:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d668:	429a      	cmp	r2, r3
 800d66a:	d01f      	beq.n	800d6ac <lv_draw_label+0x3e8>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800d66c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d66e:	42b3      	cmp	r3, r6
 800d670:	d81c      	bhi.n	800d6ac <lv_draw_label+0x3e8>
 800d672:	42b2      	cmp	r2, r6
 800d674:	d91a      	bls.n	800d6ac <lv_draw_label+0x3e8>
                    sel_coords.x1 = pos.x;
 800d676:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800d678:	9a10      	ldr	r2, [sp, #64]	; 0x40
                    sel_coords.x1 = pos.x;
 800d67a:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
                    sel_coords.y1 = pos.y;
 800d67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800d680:	9905      	ldr	r1, [sp, #20]
                    sel_coords.y1 = pos.y;
 800d682:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800d686:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	4413      	add	r3, r2
                    sel_coords.y2 = pos.y + line_height - 1;
 800d68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800d690:	4403      	add	r3, r0
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800d692:	a83c      	add	r0, sp, #240	; 0xf0
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800d694:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
                    sel_coords.y2 = pos.y + line_height - 1;
 800d698:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d69a:	3b01      	subs	r3, #1
 800d69c:	4413      	add	r3, r2
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800d69e:	aa3f      	add	r2, sp, #252	; 0xfc
                    sel_coords.y2 = pos.y + line_height - 1;
 800d6a0:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800d6a4:	f002 f924 	bl	800f8f0 <lv_draw_rect>
                    color = dsc->sel_color;
 800d6a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
    if(opa < LV_OPA_MIN) return;
 800d6ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	f200 83d4 	bhi.w	800de5c <lv_draw_label+0xb98>
            if(letter_w > 0) {
 800d6b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6b6:	b143      	cbz	r3, 800d6ca <lv_draw_label+0x406>
                pos.x += letter_w + dsc->letter_space;
 800d6b8:	f8b8 4010 	ldrh.w	r4, [r8, #16]
 800d6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6be:	4423      	add	r3, r4
 800d6c0:	461c      	mov	r4, r3
 800d6c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6c4:	4423      	add	r3, r4
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	9310      	str	r3, [sp, #64]	; 0x40
        while(i < line_end - line_start) {
 800d6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6cc:	9a07      	ldr	r2, [sp, #28]
 800d6ce:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	428b      	cmp	r3, r1
 800d6d4:	f63f af38 	bhi.w	800d548 <lv_draw_label+0x284>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800d6d8:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 800d6dc:	079d      	lsls	r5, r3, #30
 800d6de:	d51e      	bpl.n	800d71e <lv_draw_label+0x45a>
            p1.x = pos_x_start;
 800d6e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800d6e2:	2102      	movs	r1, #2
 800d6e4:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d6e8:	a837      	add	r0, sp, #220	; 0xdc
            p1.x = pos_x_start;
 800d6ea:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800d6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d6f6:	fb92 f2f1 	sdiv	r2, r2, r1
 800d6fa:	fb93 f3f1 	sdiv	r3, r3, r1
 800d6fe:	4413      	add	r3, r2
 800d700:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d702:	a93c      	add	r1, sp, #240	; 0xf0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800d704:	4413      	add	r3, r2
            p2.x = pos.x;
 800d706:	9a10      	ldr	r2, [sp, #64]	; 0x40
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800d708:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800d70a:	f8ad 20f0 	strh.w	r2, [sp, #240]	; 0xf0
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d70e:	9a05      	ldr	r2, [sp, #20]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800d710:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            p2.y = p1.y;
 800d714:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d718:	ab39      	add	r3, sp, #228	; 0xe4
 800d71a:	f000 fc25 	bl	800df68 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800d71e:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 800d722:	07dc      	lsls	r4, r3, #31
 800d724:	d51b      	bpl.n	800d75e <lv_draw_label+0x49a>
            p1.x = pos_x_start;
 800d726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d728:	a837      	add	r0, sp, #220	; 0xdc
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800d72a:	f8d8 1008 	ldr.w	r1, [r8, #8]
            p1.x = pos_x_start;
 800d72e:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800d732:	9b06      	ldr	r3, [sp, #24]
 800d734:	894a      	ldrh	r2, [r1, #10]
 800d736:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800d73a:	441a      	add	r2, r3
 800d73c:	890b      	ldrh	r3, [r1, #8]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d73e:	a93c      	add	r1, sp, #240	; 0xf0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800d740:	1a9b      	subs	r3, r3, r2
 800d742:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d744:	4413      	add	r3, r2
            p2.x = pos.x;
 800d746:	9a10      	ldr	r2, [sp, #64]	; 0x40
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800d748:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800d74a:	f8ad 20f0 	strh.w	r2, [sp, #240]	; 0xf0
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d74e:	9a05      	ldr	r2, [sp, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800d750:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            p2.y = p1.y;
 800d754:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800d758:	ab39      	add	r3, sp, #228	; 0xe4
 800d75a:	f000 fc05 	bl	800df68 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d762:	9906      	ldr	r1, [sp, #24]
 800d764:	189e      	adds	r6, r3, r2
 800d766:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
 800d76a:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	4630      	mov	r0, r6
 800d772:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d774:	f007 fb70 	bl	8014e58 <_lv_txt_get_next_line>
 800d778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800d77a:	f898 2021 	ldrb.w	r2, [r8, #33]	; 0x21
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d77e:	4601      	mov	r1, r0
 800d780:	181d      	adds	r5, r3, r0
        pos.x = coords->x1;
 800d782:	9b08      	ldr	r3, [sp, #32]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800d784:	0750      	lsls	r0, r2, #29
        pos.x = coords->x1;
 800d786:	f9b3 4000 	ldrsh.w	r4, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800d78a:	f140 8349 	bpl.w	800de20 <lv_draw_label+0xb5c>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800d78e:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800d792:	4630      	mov	r0, r6
 800d794:	9200      	str	r2, [sp, #0]
 800d796:	9a06      	ldr	r2, [sp, #24]
 800d798:	f007 fb0c 	bl	8014db4 <_lv_txt_get_width>
 800d79c:	9b08      	ldr	r3, [sp, #32]
 800d79e:	9a08      	ldr	r2, [sp, #32]
 800d7a0:	889b      	ldrh	r3, [r3, #4]
 800d7a2:	8812      	ldrh	r2, [r2, #0]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	1a18      	subs	r0, r3, r0
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 800d7b2:	4404      	add	r4, r0
 800d7b4:	b224      	sxth	r4, r4
 800d7b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ba:	4413      	add	r3, r2
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7c2:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800d7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	931f      	str	r3, [sp, #124]	; 0x7c
        line_start = line_end;
 800d7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7cc:	9307      	str	r3, [sp, #28]
        if(pos.y > mask->y2) return;
 800d7ce:	9b05      	ldr	r3, [sp, #20]
 800d7d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	f6ff ae57 	blt.w	800d488 <lv_draw_label+0x1c4>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800d7da:	950a      	str	r5, [sp, #40]	; 0x28
 800d7dc:	e64c      	b.n	800d478 <lv_draw_label+0x1b4>
            lv_color_t color = dsc->color;
 800d7de:	f8b8 4000 	ldrh.w	r4, [r8]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800d7e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d7e6:	2902      	cmp	r1, #2
 800d7e8:	bf08      	it	eq
 800d7ea:	461c      	moveq	r4, r3
 800d7ec:	e731      	b.n	800d652 <lv_draw_label+0x38e>
 800d7ee:	bf00      	nop
 800d7f0:	200000b4 	.word	0x200000b4
 800d7f4:	200000a8 	.word	0x200000a8
            bitmask_init  = 0xC0;
 800d7f8:	23c0      	movs	r3, #192	; 0xc0
    switch(bpp) {
 800d7fa:	2502      	movs	r5, #2
            bitmask_init  = 0xC0;
 800d7fc:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table = _lv_bpp2_opa_table;
 800d7fe:	4b89      	ldr	r3, [pc, #548]	; (800da24 <lv_draw_label+0x760>)
            bpp_opa_table = _lv_bpp1_opa_table;
 800d800:	9316      	str	r3, [sp, #88]	; 0x58
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800d802:	2103      	movs	r1, #3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800d804:	9b05      	ldr	r3, [sp, #20]
    int32_t box_w = g->box_w;
 800d806:	f8bd b0f2 	ldrh.w	fp, [sp, #242]	; 0xf2
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800d80a:	f9b3 3000 	ldrsh.w	r3, [r3]
    int32_t box_h = g->box_h;
 800d80e:	f8bd 20f4 	ldrh.w	r2, [sp, #244]	; 0xf4
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800d812:	fb05 f40b 	mul.w	r4, r5, fp
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800d816:	42b3      	cmp	r3, r6
 800d818:	bfca      	itet	gt
 800d81a:	1b9b      	subgt	r3, r3, r6
 800d81c:	2300      	movle	r3, #0
 800d81e:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800d822:	fb9b f1f1 	sdiv	r1, fp, r1
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800d826:	9314      	str	r3, [sp, #80]	; 0x50
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800d828:	4431      	add	r1, r6
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d830:	4299      	cmp	r1, r3
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800d832:	eb02 010a 	add.w	r1, r2, sl
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800d836:	bfc9      	itett	gt
 800d838:	1b9b      	subgt	r3, r3, r6
 800d83a:	f8cd b06c 	strle.w	fp, [sp, #108]	; 0x6c
 800d83e:	3301      	addgt	r3, #1
 800d840:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
 800d844:	bfc8      	it	gt
 800d846:	931b      	strgt	r3, [sp, #108]	; 0x6c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800d848:	9b05      	ldr	r3, [sp, #20]
 800d84a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d84e:	4553      	cmp	r3, sl
 800d850:	bfcc      	ite	gt
 800d852:	eba3 030a 	subgt.w	r3, r3, sl
 800d856:	2300      	movle	r3, #0
 800d858:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800d85a:	9b05      	ldr	r3, [sp, #20]
 800d85c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d860:	4299      	cmp	r1, r3
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800d862:	9911      	ldr	r1, [sp, #68]	; 0x44
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800d864:	bfc9      	itett	gt
 800d866:	eba3 030a 	subgt.w	r3, r3, sl
 800d86a:	9227      	strle	r2, [sp, #156]	; 0x9c
 800d86c:	3301      	addgt	r3, #1
 800d86e:	9327      	strgt	r3, [sp, #156]	; 0x9c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800d870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d872:	436b      	muls	r3, r5
 800d874:	fb01 3404 	mla	r4, r1, r4, r3
    map_p += bit_ofs >> 3;
 800d878:	eb00 03e4 	add.w	r3, r0, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800d87c:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800d880:	931c      	str	r3, [sp, #112]	; 0x70
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 800d882:	fb02 f30b 	mul.w	r3, r2, fp
 800d886:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d88a:	bfa8      	it	ge
 800d88c:	f44f 73f0 	movge.w	r3, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800d890:	4618      	mov	r0, r3
 800d892:	931d      	str	r3, [sp, #116]	; 0x74
 800d894:	f006 fb4e 	bl	8013f34 <_lv_mem_buf_get>
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800d898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800d89a:	901a      	str	r0, [sp, #104]	; 0x68
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800d89c:	0058      	lsls	r0, r3, #1
 800d89e:	f006 fb49 	bl	8013f34 <_lv_mem_buf_get>
 800d8a2:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800d8a4:	f7fd fae2 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d8a8:	f005 f918 	bl	8012adc <lv_disp_get_buf>
 800d8ac:	f8b0 9014 	ldrh.w	r9, [r0, #20]
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 800d8b0:	f9b0 c010 	ldrsh.w	ip, [r0, #16]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8b4:	2203      	movs	r2, #3
 800d8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8b8:	f109 0901 	add.w	r9, r9, #1
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800d8bc:	6887      	ldr	r7, [r0, #8]
 800d8be:	eba9 090c 	sub.w	r9, r9, ip
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8c2:	fb93 f1f2 	sdiv	r1, r3, r2
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800d8c6:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800d8ca:	fa0f f989 	sxth.w	r9, r9
 800d8ce:	ebaa 0a03 	sub.w	sl, sl, r3
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800d8d4:	fb09 6a0a 	mla	sl, r9, sl, r6
 800d8d8:	ebaa 0c0c 	sub.w	ip, sl, ip
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8dc:	fb09 1a03 	mla	sl, r9, r3, r1
    map_area.x1 = col_start / 3 + pos_x;
 800d8e0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8e4:	44d4      	add	ip, sl
    map_area.x1 = col_start / 3 + pos_x;
 800d8e6:	4419      	add	r1, r3
    map_area.x2 = col_end / 3  + pos_x - 1;
 800d8e8:	3b01      	subs	r3, #1
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800d8ea:	eb07 074c 	add.w	r7, r7, ip, lsl #1
    map_area.x1 = col_start / 3 + pos_x;
 800d8ee:	f8ad 10dc 	strh.w	r1, [sp, #220]	; 0xdc
    map_area.x2 = col_end / 3  + pos_x - 1;
 800d8f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d8f4:	fb91 f2f2 	sdiv	r2, r1, r2
 800d8f8:	441a      	add	r2, r3
    map_area.y1 = row_start + pos_y;
 800d8fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    map_area.x2 = col_end / 3  + pos_x - 1;
 800d8fc:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.y1 = row_start + pos_y;
 800d900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d902:	4413      	add	r3, r2
 800d904:	b21b      	sxth	r3, r3
 800d906:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    map_area.y2 = map_area.y1;
 800d90a:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800d90e:	f001 fbb1 	bl	800f074 <lv_draw_mask_get_cnt>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800d912:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800d916:	4493      	add	fp, r2
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800d918:	902a      	str	r0, [sp, #168]	; 0xa8
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800d91a:	1a9b      	subs	r3, r3, r2
 800d91c:	9319      	str	r3, [sp, #100]	; 0x64
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800d91e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800d920:	9a19      	ldr	r2, [sp, #100]	; 0x64
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800d922:	ebab 0b03 	sub.w	fp, fp, r3
 800d926:	fb05 f30b 	mul.w	r3, r5, fp
    int32_t mask_p = 0;
 800d92a:	f04f 0b00 	mov.w	fp, #0
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800d92e:	932c      	str	r3, [sp, #176]	; 0xb0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800d930:	f06f 0302 	mvn.w	r3, #2
 800d934:	fb92 f3f3 	sdiv	r3, r2, r3
 800d938:	4499      	add	r9, r3
 800d93a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800d93e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d940:	f1c5 0308 	rsb	r3, r5, #8
 800d944:	9328      	str	r3, [sp, #160]	; 0xa0
    for(row = row_start ; row < row_end; row++) {
 800d946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d948:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d94a:	4293      	cmp	r3, r2
 800d94c:	db2a      	blt.n	800d9a4 <lv_draw_label+0x6e0>
    if(map_area.y1 != map_area.y2) {
 800d94e:	f9bd 30e2 	ldrsh.w	r3, [sp, #226]	; 0xe2
 800d952:	f9bd 20de 	ldrsh.w	r2, [sp, #222]	; 0xde
 800d956:	429a      	cmp	r2, r3
 800d958:	d00e      	beq.n	800d978 <lv_draw_label+0x6b4>
        map_area.y2--;
 800d95a:	3b01      	subs	r3, #1
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800d95c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d95e:	a937      	add	r1, sp, #220	; 0xdc
 800d960:	9805      	ldr	r0, [sp, #20]
        map_area.y2--;
 800d962:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800d966:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d968:	9302      	str	r3, [sp, #8]
 800d96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	2302      	movs	r3, #2
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d974:	f7fe fcec 	bl	800c350 <_lv_blend_map>
    _lv_mem_buf_release(mask_buf);
 800d978:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d97a:	f006 f971 	bl	8013c60 <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 800d97e:	980e      	ldr	r0, [sp, #56]	; 0x38
    _lv_mem_buf_release(mask_buf);
 800d980:	f006 f96e 	bl	8013c60 <_lv_mem_buf_release>
 800d984:	e696      	b.n	800d6b4 <lv_draw_label+0x3f0>
            bitmask_init  = 0xFF;
 800d986:	23ff      	movs	r3, #255	; 0xff
        case 8:
 800d988:	2508      	movs	r5, #8
            bitmask_init  = 0xFF;
 800d98a:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table = _lv_bpp8_opa_table;
 800d98c:	4b26      	ldr	r3, [pc, #152]	; (800da28 <lv_draw_label+0x764>)
 800d98e:	e737      	b.n	800d800 <lv_draw_label+0x53c>
            bitmask_init  = 0xF0;
 800d990:	23f0      	movs	r3, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800d992:	2504      	movs	r5, #4
            bitmask_init  = 0xF0;
 800d994:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table = _lv_bpp4_opa_table;
 800d996:	4b25      	ldr	r3, [pc, #148]	; (800da2c <lv_draw_label+0x768>)
 800d998:	e732      	b.n	800d800 <lv_draw_label+0x53c>
            bitmask_init  = 0x80;
 800d99a:	2380      	movs	r3, #128	; 0x80
    switch(bpp) {
 800d99c:	2501      	movs	r5, #1
            bitmask_init  = 0x80;
 800d99e:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table = _lv_bpp1_opa_table;
 800d9a0:	4b23      	ldr	r3, [pc, #140]	; (800da30 <lv_draw_label+0x76c>)
 800d9a2:	e72d      	b.n	800d800 <lv_draw_label+0x53c>
        bitmask = bitmask_init >> col_bit;
 800d9a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9a6:	465e      	mov	r6, fp
        for(col = col_start; col < col_end; col++) {
 800d9a8:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
        uint32_t subpx_cnt = 0;
 800d9ac:	2200      	movs	r2, #0
        bitmask = bitmask_init >> col_bit;
 800d9ae:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
 800d9b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9b4:	454b      	cmp	r3, r9
 800d9b6:	dc3d      	bgt.n	800da34 <lv_draw_label+0x770>
        if(other_mask_cnt) {
 800d9b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d9ba:	b1c3      	cbz	r3, 800d9ee <lv_draw_label+0x72a>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 800d9bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d9be:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 800d9c2:	449b      	add	fp, r3
 800d9c4:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 800d9c8:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	4658      	mov	r0, fp
 800d9d0:	1a5b      	subs	r3, r3, r1
 800d9d2:	b21b      	sxth	r3, r3
 800d9d4:	f001 fafe 	bl	800efd4 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800d9d8:	b948      	cbnz	r0, 800d9ee <lv_draw_label+0x72a>
 800d9da:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 800d9e4:	3101      	adds	r1, #1
 800d9e6:	1ac9      	subs	r1, r1, r3
 800d9e8:	b209      	sxth	r1, r1
 800d9ea:	f006 fb41 	bl	8014070 <_lv_memset_00>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800d9ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d9f2:	18f3      	adds	r3, r6, r3
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	f280 80ab 	bge.w	800db50 <lv_draw_label+0x88c>
            map_area.y2 ++;
 800d9fa:	f8bd 30e2 	ldrh.w	r3, [sp, #226]	; 0xe2
 800d9fe:	3301      	adds	r3, #1
 800da00:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800da04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    for(row = row_start ; row < row_end; row++) {
 800da06:	46b3      	mov	fp, r6
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800da08:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800da0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800da0c:	eb03 03e4 	add.w	r3, r3, r4, asr #3
        col_bit = col_bit & 0x7;
 800da10:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800da14:	931c      	str	r3, [sp, #112]	; 0x70
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800da16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da18:	441f      	add	r7, r3
    for(row = row_start ; row < row_end; row++) {
 800da1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da1c:	3301      	adds	r3, #1
 800da1e:	9311      	str	r3, [sp, #68]	; 0x44
 800da20:	e791      	b.n	800d946 <lv_draw_label+0x682>
 800da22:	bf00      	nop
 800da24:	0801f3cb 	.word	0x0801f3cb
 800da28:	0801f3cf 	.word	0x0801f3cf
 800da2c:	0801f3b9 	.word	0x0801f3b9
 800da30:	0801f3c9 	.word	0x0801f3c9
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 800da34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800da36:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	1b09      	subs	r1, r1, r4
 800da3c:	4003      	ands	r3, r0
 800da3e:	40cb      	lsrs	r3, r1
            if(letter_px != 0) {
 800da40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800da44:	d006      	beq.n	800da54 <lv_draw_label+0x790>
                if(opa == LV_OPA_COVER) {
 800da46:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da48:	29ff      	cmp	r1, #255	; 0xff
 800da4a:	d16e      	bne.n	800db2a <lv_draw_label+0x866>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800da4c:	2d08      	cmp	r5, #8
 800da4e:	d001      	beq.n	800da54 <lv_draw_label+0x790>
 800da50:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da52:	5ccb      	ldrb	r3, [r1, r3]
            font_rgb[subpx_cnt] = px_opa;
 800da54:	a954      	add	r1, sp, #336	; 0x150
 800da56:	4411      	add	r1, r2
            subpx_cnt ++;
 800da58:	3201      	adds	r2, #1
            if(subpx_cnt == 3) {
 800da5a:	2a03      	cmp	r2, #3
            font_rgb[subpx_cnt] = px_opa;
 800da5c:	f801 3c84 	strb.w	r3, [r1, #-132]
            if(subpx_cnt == 3) {
 800da60:	d155      	bne.n	800db0e <lv_draw_label+0x84a>
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800da62:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800da66:	9318      	str	r3, [sp, #96]	; 0x60
 800da68:	9a18      	ldr	r2, [sp, #96]	; 0x60
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800da6a:	787b      	ldrb	r3, [r7, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800da6c:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 800da70:	4694      	mov	ip, r2
 800da72:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da74:	08db      	lsrs	r3, r3, #3
 800da76:	fb1c f202 	smulbb	r2, ip, r2
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800da7a:	f89d c0ce 	ldrb.w	ip, [sp, #206]	; 0xce
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800da7e:	fb01 2303 	mla	r3, r1, r3, r2
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800da82:	7839      	ldrb	r1, [r7, #0]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800da84:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800da86:	f1cc 0eff 	rsb	lr, ip, #255	; 0xff
 800da8a:	f001 011f 	and.w	r1, r1, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800da8e:	f3c3 2304 	ubfx	r3, r3, #8, #5
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800da92:	fb1c f202 	smulbb	r2, ip, r2
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800da96:	932b      	str	r3, [sp, #172]	; 0xac
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800da98:	fb0e 2101 	mla	r1, lr, r1, r2
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800da9c:	f89d e0cd 	ldrb.w	lr, [sp, #205]	; 0xcd
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 800daa0:	883a      	ldrh	r2, [r7, #0]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800daa2:	f1ce 03ff 	rsb	r3, lr, #255	; 0xff
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800daa6:	f3c1 2104 	ubfx	r1, r1, #8, #5
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800daaa:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800daae:	9331      	str	r3, [sp, #196]	; 0xc4
 800dab0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800dab2:	fb1e fa03 	smulbb	sl, lr, r3
 800dab6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800dab8:	fb03 a202 	mla	r2, r3, r2, sl
 800dabc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dabe:	eb03 0a06 	add.w	sl, r3, r6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800dac2:	9b18      	ldr	r3, [sp, #96]	; 0x60
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800dac4:	f3c2 2205 	ubfx	r2, r2, #8, #6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d13c      	bne.n	800db46 <lv_draw_label+0x882>
 800dacc:	f1be 0f00 	cmp.w	lr, #0
 800dad0:	d139      	bne.n	800db46 <lv_draw_label+0x882>
 800dad2:	f1bc 0f00 	cmp.w	ip, #0
 800dad6:	d136      	bne.n	800db46 <lv_draw_label+0x882>
 800dad8:	f88a c000 	strb.w	ip, [sl]
                color_buf[mask_p] = res_color;
 800dadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                vdb_buf_tmp++;
 800dade:	3702      	adds	r7, #2
                color_buf[mask_p] = res_color;
 800dae0:	f813 c016 	ldrb.w	ip, [r3, r6, lsl #1]
 800dae4:	eb03 0e46 	add.w	lr, r3, r6, lsl #1
 800dae8:	f361 0c04 	bfi	ip, r1, #0, #5
 800daec:	f803 c016 	strb.w	ip, [r3, r6, lsl #1]
 800daf0:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
 800daf4:	f362 114a 	bfi	r1, r2, #5, #6
                subpx_cnt = 0;
 800daf8:	2200      	movs	r2, #0
                color_buf[mask_p] = res_color;
 800dafa:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
 800dafe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800db02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
                mask_p++;
 800db04:	3601      	adds	r6, #1
                color_buf[mask_p] = res_color;
 800db06:	f363 01c7 	bfi	r1, r3, #3, #5
 800db0a:	f88e 1001 	strb.w	r1, [lr, #1]
            if(col_bit < (int32_t)(8 - bpp)) {
 800db0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        for(col = col_start; col < col_end; col++) {
 800db10:	f109 0901 	add.w	r9, r9, #1
            if(col_bit < (int32_t)(8 - bpp)) {
 800db14:	429c      	cmp	r4, r3
                map_p++;
 800db16:	bfad      	iteet	ge
 800db18:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
                col_bit += bpp;
 800db1a:	1964      	addlt	r4, r4, r5
                bitmask = bitmask >> bpp;
 800db1c:	40e8      	lsrlt	r0, r5
                bitmask = bitmask_init;
 800db1e:	9815      	ldrge	r0, [sp, #84]	; 0x54
                map_p++;
 800db20:	bfa2      	ittt	ge
 800db22:	3301      	addge	r3, #1
                col_bit = 0;
 800db24:	2400      	movge	r4, #0
                map_p++;
 800db26:	931c      	strge	r3, [sp, #112]	; 0x70
 800db28:	e743      	b.n	800d9b2 <lv_draw_label+0x6ee>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800db2a:	2d08      	cmp	r5, #8
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 800db2c:	bf17      	itett	ne
 800db2e:	9916      	ldrne	r1, [sp, #88]	; 0x58
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800db30:	990c      	ldreq	r1, [sp, #48]	; 0x30
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 800db32:	5ccb      	ldrbne	r3, [r1, r3]
 800db34:	990c      	ldrne	r1, [sp, #48]	; 0x30
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800db36:	bf0b      	itete	eq
 800db38:	434b      	muleq	r3, r1
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 800db3a:	fb13 f301 	smulbbne	r3, r3, r1
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800db3e:	f3c3 2307 	ubfxeq	r3, r3, #8, #8
 800db42:	0a1b      	lsrne	r3, r3, #8
 800db44:	e786      	b.n	800da54 <lv_draw_label+0x790>
                else mask_buf[mask_p] = LV_OPA_COVER;
 800db46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db4a:	f88a 3000 	strb.w	r3, [sl]
 800db4e:	e7c5      	b.n	800dadc <lv_draw_label+0x818>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800db50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db52:	a937      	add	r1, sp, #220	; 0xdc
 800db54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            mask_p = 0;
 800db56:	2600      	movs	r6, #0
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db5c:	9805      	ldr	r0, [sp, #20]
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	2302      	movs	r3, #2
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db66:	f7fe fbf3 	bl	800c350 <_lv_blend_map>
            map_area.y1 = map_area.y2 + 1;
 800db6a:	f8bd 30e2 	ldrh.w	r3, [sp, #226]	; 0xe2
 800db6e:	3301      	adds	r3, #1
 800db70:	b21b      	sxth	r3, r3
 800db72:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            map_area.y2 = map_area.y1;
 800db76:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
 800db7a:	e743      	b.n	800da04 <lv_draw_label+0x740>
    if(bpp == 3) bpp = 4;
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
 800db82:	f000 80c2 	beq.w	800dd0a <lv_draw_label+0xa46>
    switch(bpp) {
 800db86:	3b01      	subs	r3, #1
 800db88:	2b07      	cmp	r3, #7
 800db8a:	f63f ad93 	bhi.w	800d6b4 <lv_draw_label+0x3f0>
 800db8e:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <lv_draw_label+0x8d0>)
 800db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db94:	0800dd17 	.word	0x0800dd17
 800db98:	0800dbb5 	.word	0x0800dbb5
 800db9c:	0800d6b5 	.word	0x0800d6b5
 800dba0:	0800dd0b 	.word	0x0800dd0b
 800dba4:	0800d6b5 	.word	0x0800d6b5
 800dba8:	0800d6b5 	.word	0x0800d6b5
 800dbac:	0800d6b5 	.word	0x0800d6b5
 800dbb0:	0800dcfd 	.word	0x0800dcfd
            bitmask_init  = 0xC0;
 800dbb4:	23c0      	movs	r3, #192	; 0xc0
    switch(bpp) {
 800dbb6:	2502      	movs	r5, #2
            shades = 4;
 800dbb8:	2204      	movs	r2, #4
            bitmask_init  = 0xC0;
 800dbba:	9311      	str	r3, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800dbbc:	4ba2      	ldr	r3, [pc, #648]	; (800de48 <lv_draw_label+0xb84>)
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800dbbe:	930e      	str	r3, [sp, #56]	; 0x38
    if(opa < LV_OPA_MAX) {
 800dbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc2:	2bfc      	cmp	r3, #252	; 0xfc
 800dbc4:	d813      	bhi.n	800dbee <lv_draw_label+0x92a>
        if(prev_opa != opa || prev_bpp != bpp) {
 800dbc6:	4ba1      	ldr	r3, [pc, #644]	; (800de4c <lv_draw_label+0xb88>)
 800dbc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dbca:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800dbce:	428b      	cmp	r3, r1
 800dbd0:	f040 80a7 	bne.w	800dd22 <lv_draw_label+0xa5e>
 800dbd4:	4b9d      	ldr	r3, [pc, #628]	; (800de4c <lv_draw_label+0xb88>)
 800dbd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800dbda:	42ab      	cmp	r3, r5
 800dbdc:	f040 80a1 	bne.w	800dd22 <lv_draw_label+0xa5e>
        prev_opa = opa;
 800dbe0:	4b9a      	ldr	r3, [pc, #616]	; (800de4c <lv_draw_label+0xb88>)
 800dbe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        prev_bpp = bpp;
 800dbe4:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
        prev_opa = opa;
 800dbe8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        bpp_opa_table_p = opa_table;
 800dbec:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800dbee:	9b05      	ldr	r3, [sp, #20]
    int32_t box_w = g->box_w;
 800dbf0:	f8bd 90f2 	ldrh.w	r9, [sp, #242]	; 0xf2
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800dbf4:	f9b3 7000 	ldrsh.w	r7, [r3]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800dbf8:	9b05      	ldr	r3, [sp, #20]
 800dbfa:	eb09 0206 	add.w	r2, r9, r6
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800dbfe:	42b7      	cmp	r7, r6
    int32_t box_h = g->box_h;
 800dc00:	f8bd b0f4 	ldrh.w	fp, [sp, #244]	; 0xf4
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800dc04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800dc08:	fb05 f409 	mul.w	r4, r5, r9
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800dc0c:	bfcc      	ite	gt
 800dc0e:	1bbf      	subgt	r7, r7, r6
 800dc10:	2700      	movle	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800dc12:	429a      	cmp	r2, r3
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc14:	eb0b 020a 	add.w	r2, fp, sl
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800dc18:	bfc9      	itett	gt
 800dc1a:	1b9e      	subgt	r6, r3, r6
 800dc1c:	f8cd 9050 	strle.w	r9, [sp, #80]	; 0x50
 800dc20:	1c73      	addgt	r3, r6, #1
 800dc22:	9314      	strgt	r3, [sp, #80]	; 0x50
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800dc24:	9b05      	ldr	r3, [sp, #20]
 800dc26:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc2a:	9b05      	ldr	r3, [sp, #20]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800dc2c:	4556      	cmp	r6, sl
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800dc32:	bfcc      	ite	gt
 800dc34:	eba6 060a 	subgt.w	r6, r6, sl
 800dc38:	2600      	movle	r6, #0
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	bfcc      	ite	gt
 800dc3e:	eba3 0a0a 	subgt.w	sl, r3, sl
 800dc42:	f8cd b068 	strle.w	fp, [sp, #104]	; 0x68
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800dc46:	fb0b fb09 	mul.w	fp, fp, r9
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800dc4a:	44b9      	add	r9, r7
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc4c:	bfc8      	it	gt
 800dc4e:	f10a 0301 	addgt.w	r3, sl, #1
    int32_t mask_p = 0;
 800dc52:	f04f 0a00 	mov.w	sl, #0
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800dc56:	bfc8      	it	gt
 800dc58:	931a      	strgt	r3, [sp, #104]	; 0x68
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800dc5a:	fb07 f305 	mul.w	r3, r7, r5
 800dc5e:	fb06 3404 	mla	r4, r6, r4, r3
    map_p += bit_ofs >> 3;
 800dc62:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800dc66:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800dc6a:	9315      	str	r3, [sp, #84]	; 0x54
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800dc6c:	f7fd f8fe 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800dc70:	f004 fed0 	bl	8012a14 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800dc74:	4583      	cmp	fp, r0
 800dc76:	465b      	mov	r3, fp
 800dc78:	bfa8      	it	ge
 800dc7a:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800dc7c:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800dc7e:	9316      	str	r3, [sp, #88]	; 0x58
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800dc80:	f006 f958 	bl	8013f34 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
 800dc84:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800dc88:	4683      	mov	fp, r0
    fill_area.x1 = col_start + pos_x;
 800dc8a:	19da      	adds	r2, r3, r7
    fill_area.x2 = col_end  + pos_x - 1;
 800dc8c:	3b01      	subs	r3, #1
    fill_area.x1 = col_start + pos_x;
 800dc8e:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
    fill_area.x2 = col_end  + pos_x - 1;
 800dc92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc94:	4413      	add	r3, r2
 800dc96:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.y1 = row_start + pos_y;
 800dc9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc9c:	4433      	add	r3, r6
 800dc9e:	b21b      	sxth	r3, r3
 800dca0:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    fill_area.y2 = fill_area.y1;
 800dca4:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800dca8:	f001 f9e4 	bl	800f074 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 800dcac:	f1c5 0308 	rsb	r3, r5, #8
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800dcb0:	9019      	str	r0, [sp, #100]	; 0x64
    uint32_t col_bit_max = 8 - bpp;
 800dcb2:	9318      	str	r3, [sp, #96]	; 0x60
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800dcb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcb6:	eba9 0903 	sub.w	r9, r9, r3
 800dcba:	fb05 f309 	mul.w	r3, r5, r9
 800dcbe:	931c      	str	r3, [sp, #112]	; 0x70
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800dcc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcc2:	1bdb      	subs	r3, r3, r7
 800dcc4:	931d      	str	r3, [sp, #116]	; 0x74
    for(row = row_start ; row < row_end; row++) {
 800dcc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcc8:	429e      	cmp	r6, r3
 800dcca:	db3b      	blt.n	800dd44 <lv_draw_label+0xa80>
    if(fill_area.y1 != fill_area.y2) {
 800dccc:	f9bd 30e2 	ldrsh.w	r3, [sp, #226]	; 0xe2
 800dcd0:	f9bd 20de 	ldrsh.w	r2, [sp, #222]	; 0xde
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d00f      	beq.n	800dcf8 <lv_draw_label+0xa34>
        fill_area.y2--;
 800dcd8:	3b01      	subs	r3, #1
        _lv_blend_fill(clip_area, &fill_area,
 800dcda:	26ff      	movs	r6, #255	; 0xff
 800dcdc:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800dce0:	a937      	add	r1, sp, #220	; 0xdc
        fill_area.y2--;
 800dce2:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
        _lv_blend_fill(clip_area, &fill_area,
 800dce6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dce8:	9805      	ldr	r0, [sp, #20]
 800dcea:	9302      	str	r3, [sp, #8]
 800dcec:	2302      	movs	r3, #2
 800dcee:	e9cd 3600 	strd	r3, r6, [sp]
 800dcf2:	465b      	mov	r3, fp
 800dcf4:	f7fe f892 	bl	800be1c <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
 800dcf8:	4658      	mov	r0, fp
 800dcfa:	e641      	b.n	800d980 <lv_draw_label+0x6bc>
            bitmask_init  = 0xFF;
 800dcfc:	23ff      	movs	r3, #255	; 0xff
        case 8:
 800dcfe:	2508      	movs	r5, #8
            shades = 256;
 800dd00:	f44f 7280 	mov.w	r2, #256	; 0x100
            bitmask_init  = 0xFF;
 800dd04:	9311      	str	r3, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800dd06:	4b52      	ldr	r3, [pc, #328]	; (800de50 <lv_draw_label+0xb8c>)
 800dd08:	e759      	b.n	800dbbe <lv_draw_label+0x8fa>
            bitmask_init  = 0xF0;
 800dd0a:	23f0      	movs	r3, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800dd0c:	2504      	movs	r5, #4
            shades = 16;
 800dd0e:	2210      	movs	r2, #16
            bitmask_init  = 0xF0;
 800dd10:	9311      	str	r3, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800dd12:	4b50      	ldr	r3, [pc, #320]	; (800de54 <lv_draw_label+0xb90>)
 800dd14:	e753      	b.n	800dbbe <lv_draw_label+0x8fa>
            bitmask_init  = 0x80;
 800dd16:	2380      	movs	r3, #128	; 0x80
    switch(bpp) {
 800dd18:	2501      	movs	r5, #1
            shades = 2;
 800dd1a:	2202      	movs	r2, #2
            bitmask_init  = 0x80;
 800dd1c:	9311      	str	r3, [sp, #68]	; 0x44
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800dd1e:	4b4e      	ldr	r3, [pc, #312]	; (800de58 <lv_draw_label+0xb94>)
 800dd20:	e74d      	b.n	800dbbe <lv_draw_label+0x8fa>
        if(prev_opa != opa || prev_bpp != bpp) {
 800dd22:	2100      	movs	r1, #0
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800dd24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd26:	5c5b      	ldrb	r3, [r3, r1]
 800dd28:	2bff      	cmp	r3, #255	; 0xff
 800dd2a:	bf16      	itet	ne
 800dd2c:	9c0c      	ldrne	r4, [sp, #48]	; 0x30
 800dd2e:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800dd30:	fb13 f304 	smulbbne	r3, r3, r4
 800dd34:	4c45      	ldr	r4, [pc, #276]	; (800de4c <lv_draw_label+0xb88>)
 800dd36:	bf18      	it	ne
 800dd38:	0a1b      	lsrne	r3, r3, #8
 800dd3a:	550b      	strb	r3, [r1, r4]
            for(i = 0; i < shades; i++) {
 800dd3c:	3101      	adds	r1, #1
 800dd3e:	4291      	cmp	r1, r2
 800dd40:	d1f0      	bne.n	800dd24 <lv_draw_label+0xa60>
 800dd42:	e74d      	b.n	800dbe0 <lv_draw_label+0x91c>
        bitmask = bitmask_init >> col_bit;
 800dd44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd46:	46d1      	mov	r9, sl
        for(col = col_start; col < col_end; col++) {
 800dd48:	eba7 010a 	sub.w	r1, r7, sl
        bitmask = bitmask_init >> col_bit;
 800dd4c:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800dd50:	eb01 0309 	add.w	r3, r1, r9
 800dd54:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dd56:	4283      	cmp	r3, r0
 800dd58:	db2e      	blt.n	800ddb8 <lv_draw_label+0xaf4>
        if(other_mask_cnt) {
 800dd5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd5c:	b1bb      	cbz	r3, 800dd8e <lv_draw_label+0xaca>
 800dd5e:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800dd62:	44da      	add	sl, fp
 800dd64:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 800dd68:	3301      	adds	r3, #1
 800dd6a:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
 800dd6e:	4650      	mov	r0, sl
 800dd70:	1a5b      	subs	r3, r3, r1
 800dd72:	b21b      	sxth	r3, r3
 800dd74:	f001 f92e 	bl	800efd4 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800dd78:	b948      	cbnz	r0, 800dd8e <lv_draw_label+0xaca>
 800dd7a:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800dd7e:	4650      	mov	r0, sl
 800dd80:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 800dd84:	3101      	adds	r1, #1
 800dd86:	1ac9      	subs	r1, r1, r3
 800dd88:	b209      	sxth	r1, r1
 800dd8a:	f006 f971 	bl	8014070 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800dd8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd92:	444b      	add	r3, r9
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d92a      	bls.n	800ddee <lv_draw_label+0xb2a>
            fill_area.y2 ++;
 800dd98:	f8bd 30e2 	ldrh.w	r3, [sp, #226]	; 0xe2
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
        col_bit += col_bit_row_ofs;
 800dda2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 800dda4:	3601      	adds	r6, #1
 800dda6:	46ca      	mov	sl, r9
        col_bit += col_bit_row_ofs;
 800dda8:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800ddaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddac:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800ddb0:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800ddb4:	9315      	str	r3, [sp, #84]	; 0x54
 800ddb6:	e786      	b.n	800dcc6 <lv_draw_label+0xa02>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800ddb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddba:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	1b00      	subs	r0, r0, r4
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	40c3      	lsrs	r3, r0
            if(letter_px) {
 800ddc4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800ddc8:	bf1c      	itt	ne
 800ddca:	980e      	ldrne	r0, [sp, #56]	; 0x38
 800ddcc:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
 800ddce:	f80b 3009 	strb.w	r3, [fp, r9]
            mask_p++;
 800ddd2:	f109 0901 	add.w	r9, r9, #1
            if(col_bit < col_bit_max) {
 800ddd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ddd8:	42a3      	cmp	r3, r4
                map_p++;
 800ddda:	bf93      	iteet	ls
 800dddc:	9b15      	ldrls	r3, [sp, #84]	; 0x54
                col_bit += bpp;
 800ddde:	1964      	addhi	r4, r4, r5
                bitmask = bitmask >> bpp;
 800dde0:	40ea      	lsrhi	r2, r5
                bitmask = bitmask_init;
 800dde2:	9a11      	ldrls	r2, [sp, #68]	; 0x44
                map_p++;
 800dde4:	bf9e      	ittt	ls
 800dde6:	3301      	addls	r3, #1
                col_bit = 0;
 800dde8:	2400      	movls	r4, #0
                map_p++;
 800ddea:	9315      	strls	r3, [sp, #84]	; 0x54
 800ddec:	e7b0      	b.n	800dd50 <lv_draw_label+0xa8c>
            _lv_blend_fill(clip_area, &fill_area,
 800ddee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ddf4:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800ddf8:	a937      	add	r1, sp, #220	; 0xdc
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	9805      	ldr	r0, [sp, #20]
            mask_p = 0;
 800de00:	f04f 0900 	mov.w	r9, #0
            _lv_blend_fill(clip_area, &fill_area,
 800de04:	e9cd 3c00 	strd	r3, ip, [sp]
 800de08:	465b      	mov	r3, fp
 800de0a:	f7fe f807 	bl	800be1c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800de0e:	f8bd 30e2 	ldrh.w	r3, [sp, #226]	; 0xe2
 800de12:	3301      	adds	r3, #1
 800de14:	b21b      	sxth	r3, r3
 800de16:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
            fill_area.y2 = fill_area.y1;
 800de1a:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
 800de1e:	e7c0      	b.n	800dda2 <lv_draw_label+0xade>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800de20:	0713      	lsls	r3, r2, #28
 800de22:	f57f acc8 	bpl.w	800d7b6 <lv_draw_label+0x4f2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800de26:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800de2a:	4630      	mov	r0, r6
 800de2c:	9200      	str	r2, [sp, #0]
 800de2e:	9a06      	ldr	r2, [sp, #24]
 800de30:	f006 ffc0 	bl	8014db4 <_lv_txt_get_width>
 800de34:	9b08      	ldr	r3, [sp, #32]
 800de36:	9a08      	ldr	r2, [sp, #32]
 800de38:	889b      	ldrh	r3, [r3, #4]
 800de3a:	8812      	ldrh	r2, [r2, #0]
 800de3c:	3301      	adds	r3, #1
 800de3e:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800de40:	b21b      	sxth	r3, r3
 800de42:	1a18      	subs	r0, r3, r0
 800de44:	e4b5      	b.n	800d7b2 <lv_draw_label+0x4ee>
 800de46:	bf00      	nop
 800de48:	0801f3cb 	.word	0x0801f3cb
 800de4c:	200206f8 	.word	0x200206f8
 800de50:	0801f3cf 	.word	0x0801f3cf
 800de54:	0801f3b9 	.word	0x0801f3b9
 800de58:	0801f3c9 	.word	0x0801f3c9
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800de5c:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800de60:	462a      	mov	r2, r5
 800de62:	a93c      	add	r1, sp, #240	; 0xf0
 800de64:	9806      	ldr	r0, [sp, #24]
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800de66:	931e      	str	r3, [sp, #120]	; 0x78
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800de68:	2300      	movs	r3, #0
 800de6a:	f004 fa87 	bl	801237c <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800de6e:	2800      	cmp	r0, #0
 800de70:	f43f ac20 	beq.w	800d6b4 <lv_draw_label+0x3f0>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800de74:	f8bd 20f4 	ldrh.w	r2, [sp, #244]	; 0xf4
 800de78:	2a00      	cmp	r2, #0
 800de7a:	f43f ac1b 	beq.w	800d6b4 <lv_draw_label+0x3f0>
 800de7e:	f8bd 30f2 	ldrh.w	r3, [sp, #242]	; 0xf2
 800de82:	2b00      	cmp	r3, #0
 800de84:	f43f ac16 	beq.w	800d6b4 <lv_draw_label+0x3f0>
    int32_t pos_x = pos_p->x + g.ofs_x;
 800de88:	f9bd 10f6 	ldrsh.w	r1, [sp, #246]	; 0xf6
 800de8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800de8e:	4401      	add	r1, r0
    if(pos_x + g.box_w < clip_area->x1 ||
 800de90:	440b      	add	r3, r1
    int32_t pos_x = pos_p->x + g.ofs_x;
 800de92:	9118      	str	r1, [sp, #96]	; 0x60
    if(pos_x + g.box_w < clip_area->x1 ||
 800de94:	9905      	ldr	r1, [sp, #20]
 800de96:	f9b1 1000 	ldrsh.w	r1, [r1]
 800de9a:	428b      	cmp	r3, r1
 800de9c:	f6ff ac0a 	blt.w	800d6b4 <lv_draw_label+0x3f0>
       pos_x > clip_area->x2 ||
 800dea0:	9b05      	ldr	r3, [sp, #20]
    if(pos_x + g.box_w < clip_area->x1 ||
 800dea2:	9918      	ldr	r1, [sp, #96]	; 0x60
       pos_x > clip_area->x2 ||
 800dea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800dea8:	4299      	cmp	r1, r3
 800deaa:	f73f ac03 	bgt.w	800d6b4 <lv_draw_label+0x3f0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800deae:	9b06      	ldr	r3, [sp, #24]
 800deb0:	9906      	ldr	r1, [sp, #24]
 800deb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800deb6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800deba:	1a5b      	subs	r3, r3, r1
 800debc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800debe:	440b      	add	r3, r1
 800dec0:	f9bd 10f8 	ldrsh.w	r1, [sp, #248]	; 0xf8
 800dec4:	1a9b      	subs	r3, r3, r2
 800dec6:	1a5b      	subs	r3, r3, r1
       pos_y + g.box_h < clip_area->y1 ||
 800dec8:	441a      	add	r2, r3
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800deca:	9319      	str	r3, [sp, #100]	; 0x64
       pos_y + g.box_h < clip_area->y1 ||
 800decc:	9b05      	ldr	r3, [sp, #20]
 800dece:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
       pos_x > clip_area->x2 ||
 800ded2:	429a      	cmp	r2, r3
 800ded4:	f6ff abee 	blt.w	800d6b4 <lv_draw_label+0x3f0>
       pos_y > clip_area->y2)  {
 800ded8:	9b05      	ldr	r3, [sp, #20]
       pos_y + g.box_h < clip_area->y1 ||
 800deda:	9a19      	ldr	r2, [sp, #100]	; 0x64
       pos_y > clip_area->y2)  {
 800dedc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800dee0:	429a      	cmp	r2, r3
 800dee2:	f73f abe7 	bgt.w	800d6b4 <lv_draw_label+0x3f0>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800dee6:	4629      	mov	r1, r5
 800dee8:	9806      	ldr	r0, [sp, #24]
 800deea:	f004 fa45 	bl	8012378 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800deee:	2800      	cmp	r0, #0
 800def0:	f43f abe0 	beq.w	800d6b4 <lv_draw_label+0x3f0>
    if(font_p->subpx) {
 800def4:	9a06      	ldr	r2, [sp, #24]
 800def6:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 800defa:	7b12      	ldrb	r2, [r2, #12]
 800defc:	f9bd a064 	ldrsh.w	sl, [sp, #100]	; 0x64
 800df00:	0792      	lsls	r2, r2, #30
 800df02:	f89d 30fa 	ldrb.w	r3, [sp, #250]	; 0xfa
 800df06:	f43f ae39 	beq.w	800db7c <lv_draw_label+0x8b8>
 800df0a:	f004 021f 	and.w	r2, r4, #31
    if(bpp == 3) bpp = 4;
 800df0e:	2b03      	cmp	r3, #3
 800df10:	922f      	str	r2, [sp, #188]	; 0xbc
 800df12:	f3c4 1245 	ubfx	r2, r4, #5, #6
 800df16:	9230      	str	r2, [sp, #192]	; 0xc0
 800df18:	f3c4 22c4 	ubfx	r2, r4, #11, #5
 800df1c:	922e      	str	r2, [sp, #184]	; 0xb8
 800df1e:	f43f ad37 	beq.w	800d990 <lv_draw_label+0x6cc>
    switch(bpp) {
 800df22:	3b01      	subs	r3, #1
 800df24:	2b07      	cmp	r3, #7
 800df26:	f63f abc5 	bhi.w	800d6b4 <lv_draw_label+0x3f0>
 800df2a:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <lv_draw_label+0xc6c>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800d99b 	.word	0x0800d99b
 800df34:	0800d7f9 	.word	0x0800d7f9
 800df38:	0800d6b5 	.word	0x0800d6b5
 800df3c:	0800d991 	.word	0x0800d991
 800df40:	0800d6b5 	.word	0x0800d6b5
 800df44:	0800d6b5 	.word	0x0800d6b5
 800df48:	0800d6b5 	.word	0x0800d6b5
 800df4c:	0800d987 	.word	0x0800d987

0800df50 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800df50:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800df52:	210a      	movs	r1, #10
{
 800df54:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800df56:	f006 f88b 	bl	8014070 <_lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800df5a:	23ff      	movs	r3, #255	; 0xff
 800df5c:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
 800df5e:	2300      	movs	r3, #0
 800df60:	8023      	strh	r3, [r4, #0]
 800df62:	2301      	movs	r3, #1
 800df64:	8063      	strh	r3, [r4, #2]
}
 800df66:	bd10      	pop	{r4, pc}

0800df68 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	461c      	mov	r4, r3
 800df6e:	b0c9      	sub	sp, #292	; 0x124
    if(dsc->width == 0) return;
 800df70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
 800df74:	9206      	str	r2, [sp, #24]
 800df76:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if(dsc->width == 0) return;
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 80d5 	beq.w	800e12a <lv_draw_line+0x1c2>
    if(dsc->opa <= LV_OPA_MIN) return;
 800df80:	7a22      	ldrb	r2, [r4, #8]
 800df82:	2a02      	cmp	r2, #2
 800df84:	f240 80d1 	bls.w	800e12a <lv_draw_line+0x1c2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800df88:	f9b0 2000 	ldrsh.w	r2, [r0]
 800df8c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800df90:	9905      	ldr	r1, [sp, #20]
 800df92:	42aa      	cmp	r2, r5
 800df94:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800df98:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800df9c:	d102      	bne.n	800dfa4 <lv_draw_line+0x3c>
 800df9e:	4288      	cmp	r0, r1
 800dfa0:	f000 80c3 	beq.w	800e12a <lv_draw_line+0x1c2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800dfa4:	2602      	movs	r6, #2
 800dfa6:	fb93 f3f6 	sdiv	r3, r3, r6
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	42aa      	cmp	r2, r5
 800dfae:	bfd4      	ite	le
 800dfb0:	ebc3 0602 	rsble	r6, r3, r2
 800dfb4:	ebc3 0605 	rsbgt	r6, r3, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 800dfb8:	42aa      	cmp	r2, r5
 800dfba:	bfac      	ite	ge
 800dfbc:	189a      	addge	r2, r3, r2
 800dfbe:	195a      	addlt	r2, r3, r5
 800dfc0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800dfc4:	4288      	cmp	r0, r1
 800dfc6:	bfd4      	ite	le
 800dfc8:	ebc3 0200 	rsble	r2, r3, r0
 800dfcc:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800dfd0:	4288      	cmp	r0, r1
 800dfd2:	bfac      	ite	ge
 800dfd4:	181b      	addge	r3, r3, r0
 800dfd6:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800dfd8:	a90c      	add	r1, sp, #48	; 0x30
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800dfda:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800dfde:	4608      	mov	r0, r1
 800dfe0:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800dfe2:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800dfe6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800dfea:	f005 f882 	bl	80130f2 <_lv_area_intersect>
    if(!is_common) return;
 800dfee:	2800      	cmp	r0, #0
 800dff0:	f000 809b 	beq.w	800e12a <lv_draw_line+0x1c2>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800dff4:	9b04      	ldr	r3, [sp, #16]
 800dff6:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 800dffa:	9b05      	ldr	r3, [sp, #20]
 800dffc:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800e000:	4547      	cmp	r7, r8
 800e002:	f040 8132 	bne.w	800e26a <lv_draw_line+0x302>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
 800e006:	7a27      	ldrb	r7, [r4, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e008:	f7fc ff30 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e00c:	f004 fd66 	bl	8012adc <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
 800e010:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800e014:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e018:	4682      	mov	sl, r0
    int32_t w = dsc->width - 1;
 800e01a:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
 800e01c:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e020:	f005 0501 	and.w	r5, r5, #1
 800e024:	4445      	add	r5, r8
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800e026:	b126      	cbz	r6, 800e032 <lv_draw_line+0xca>
 800e028:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800e02c:	3600      	adds	r6, #0
 800e02e:	bf18      	it	ne
 800e030:	2601      	movne	r6, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800e032:	f001 f81f 	bl	800f074 <lv_draw_mask_get_cnt>
 800e036:	2800      	cmp	r0, #0
 800e038:	d17a      	bne.n	800e130 <lv_draw_line+0x1c8>
    else if(dashed) simple_mode = false;
 800e03a:	f086 0201 	eor.w	r2, r6, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800e03e:	9b05      	ldr	r3, [sp, #20]
 800e040:	9904      	ldr	r1, [sp, #16]
 800e042:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e046:	f9b1 1000 	ldrsh.w	r1, [r1]
 800e04a:	4618      	mov	r0, r3
 800e04c:	428b      	cmp	r3, r1
 800e04e:	bfa8      	it	ge
 800e050:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800e052:	428b      	cmp	r3, r1
 800e054:	bfb8      	it	lt
 800e056:	460b      	movlt	r3, r1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800e058:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800e05c:	3b01      	subs	r3, #1
 800e05e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
 800e062:	9b04      	ldr	r3, [sp, #16]
 800e064:	885b      	ldrh	r3, [r3, #2]
 800e066:	1b5d      	subs	r5, r3, r5
    draw_area.y2 = point1->y + w_half0;
 800e068:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
 800e06a:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
 800e06e:	f8ad 80a6 	strh.w	r8, [sp, #166]	; 0xa6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800e072:	2a00      	cmp	r2, #0
 800e074:	d05e      	beq.n	800e134 <lv_draw_line+0x1cc>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 800e076:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
 800e078:	f003 0303 	and.w	r3, r3, #3
 800e07c:	e9cd 7301 	strd	r7, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
 800e080:	2301      	movs	r3, #1
 800e082:	8822      	ldrh	r2, [r4, #0]
 800e084:	a928      	add	r1, sp, #160	; 0xa0
 800e086:	a80c      	add	r0, sp, #48	; 0x30
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	f7fd fec6 	bl	800be1c <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 800e090:	7a63      	ldrb	r3, [r4, #9]
 800e092:	f013 0f0c 	tst.w	r3, #12
 800e096:	d048      	beq.n	800e12a <lv_draw_line+0x1c2>
        lv_draw_rect_dsc_init(&cir_dsc);
 800e098:	a833      	add	r0, sp, #204	; 0xcc
 800e09a:	f001 fc05 	bl	800f8a8 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800e09e:	8823      	ldrh	r3, [r4, #0]
 800e0a0:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800e0a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e0a8:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
 800e0ac:	7a23      	ldrb	r3, [r4, #8]
 800e0ae:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
 800e0b2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e0b6:	105d      	asrs	r5, r3, #1
 800e0b8:	43db      	mvns	r3, r3
 800e0ba:	f003 0601 	and.w	r6, r3, #1
        if(dsc->round_start) {
 800e0be:	7a63      	ldrb	r3, [r4, #9]
 800e0c0:	075a      	lsls	r2, r3, #29
 800e0c2:	d517      	bpl.n	800e0f4 <lv_draw_line+0x18c>
            cir_area.x1 = point1->x - r;
 800e0c4:	9b04      	ldr	r3, [sp, #16]
 800e0c6:	881a      	ldrh	r2, [r3, #0]
 800e0c8:	b2ab      	uxth	r3, r5
 800e0ca:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800e0cc:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800e0ce:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.x2 = point1->x + r - r_corr;
 800e0d2:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
 800e0d4:	9904      	ldr	r1, [sp, #16]
            cir_area.x2 = point1->x + r - r_corr;
 800e0d6:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e0da:	aa33      	add	r2, sp, #204	; 0xcc
            cir_area.y1 = point1->y - r;
 800e0dc:	8849      	ldrh	r1, [r1, #2]
 800e0de:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800e0e0:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e0e2:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point1->y + r - r_corr ;
 800e0e4:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point1->y - r;
 800e0e6:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e0ea:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point1->y + r - r_corr ;
 800e0ec:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e0f0:	f001 fbfe 	bl	800f8f0 <lv_draw_rect>
        if(dsc->round_end) {
 800e0f4:	7a63      	ldrb	r3, [r4, #9]
 800e0f6:	071b      	lsls	r3, r3, #28
 800e0f8:	d517      	bpl.n	800e12a <lv_draw_line+0x1c2>
            cir_area.x1 = point2->x - r;
 800e0fa:	9b05      	ldr	r3, [sp, #20]
 800e0fc:	881a      	ldrh	r2, [r3, #0]
 800e0fe:	b2ab      	uxth	r3, r5
 800e100:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800e102:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800e104:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.x2 = point2->x + r - r_corr;
 800e108:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
 800e10a:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point2->x + r - r_corr;
 800e10c:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e110:	aa33      	add	r2, sp, #204	; 0xcc
            cir_area.y1 = point2->y - r;
 800e112:	8849      	ldrh	r1, [r1, #2]
 800e114:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800e116:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e118:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point2->y + r - r_corr ;
 800e11a:	1b9b      	subs	r3, r3, r6
            cir_area.y1 = point2->y - r;
 800e11c:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e120:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point2->y + r - r_corr ;
 800e122:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800e126:	f001 fbe3 	bl	800f8f0 <lv_draw_rect>
}
 800e12a:	b049      	add	sp, #292	; 0x124
 800e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800e130:	2200      	movs	r2, #0
 800e132:	e784      	b.n	800e03e <lv_draw_line+0xd6>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800e134:	aa28      	add	r2, sp, #160	; 0xa0
 800e136:	a90c      	add	r1, sp, #48	; 0x30
 800e138:	4610      	mov	r0, r2
 800e13a:	f004 ffda 	bl	80130f2 <_lv_area_intersect>
        if(!is_common) return;
 800e13e:	2800      	cmp	r0, #0
 800e140:	d0a6      	beq.n	800e090 <lv_draw_line+0x128>
        draw_area.x1 -= disp_area->x1;
 800e142:	f9ba 7010 	ldrsh.w	r7, [sl, #16]
 800e146:	f9bd 80a0 	ldrsh.w	r8, [sp, #160]	; 0xa0
        draw_area.x2 -= disp_area->x1;
 800e14a:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	; 0xa4
        draw_area.x1 -= disp_area->x1;
 800e14e:	b2bb      	uxth	r3, r7
        draw_area.y1 -= disp_area->y1;
 800e150:	f8ba 9012 	ldrh.w	r9, [sl, #18]
 800e154:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
 800e158:	eba8 0203 	sub.w	r2, r8, r3
        draw_area.x2 -= disp_area->x1;
 800e15c:	ebae 0303 	sub.w	r3, lr, r3
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800e160:	f8ad 80cc 	strh.w	r8, [sp, #204]	; 0xcc
        draw_area.y1 -= disp_area->y1;
 800e164:	eba1 0009 	sub.w	r0, r1, r9
        draw_area.x1 -= disp_area->x1;
 800e168:	b292      	uxth	r2, r2
        draw_area.x2 -= disp_area->x1;
 800e16a:	b29b      	uxth	r3, r3
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800e16c:	f8ad e0d0 	strh.w	lr, [sp, #208]	; 0xd0
        draw_area.y1 -= disp_area->y1;
 800e170:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
 800e174:	fa0f fc82 	sxth.w	ip, r2
        draw_area.y2 -= disp_area->y1;
 800e178:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 800e17c:	1c5d      	adds	r5, r3, #1
        draw_area.x1 -= disp_area->x1;
 800e17e:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.y2 -= disp_area->y1;
 800e182:	eba0 0009 	sub.w	r0, r0, r9
 800e186:	1aad      	subs	r5, r5, r2
        draw_area.x2 -= disp_area->x1;
 800e188:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
 800e18c:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 800e190:	b22d      	sxth	r5, r5
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800e192:	f8ad 10ce 	strh.w	r1, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
 800e196:	f8ad 10d2 	strh.w	r1, [sp, #210]	; 0xd2
        if(dashed) {
 800e19a:	b1d6      	cbz	r6, 800e1d2 <lv_draw_line+0x26a>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800e19c:	4467      	add	r7, ip
 800e19e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e1a2:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 800e1a6:	4463      	add	r3, ip
 800e1a8:	fb97 fcf3 	sdiv	ip, r7, r3
 800e1ac:	fb03 771c 	mls	r7, r3, ip, r7
 800e1b0:	b23f      	sxth	r7, r7
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800e1b2:	4628      	mov	r0, r5
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800e1b4:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800e1b8:	f005 febc 	bl	8013f34 <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e1bc:	f9bd 90a2 	ldrsh.w	r9, [sp, #162]	; 0xa2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800e1c0:	4680      	mov	r8, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e1c2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 800e1c6:	4599      	cmp	r9, r3
 800e1c8:	dd05      	ble.n	800e1d6 <lv_draw_line+0x26e>
        _lv_mem_buf_release(mask_buf);
 800e1ca:	4640      	mov	r0, r8
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
 800e1cc:	f005 fd48 	bl	8013c60 <_lv_mem_buf_release>
 800e1d0:	e75e      	b.n	800e090 <lv_draw_line+0x128>
        lv_style_int_t dash_start = 0;
 800e1d2:	4637      	mov	r7, r6
 800e1d4:	e7ed      	b.n	800e1b2 <lv_draw_line+0x24a>
            _lv_memset_ff(mask_buf, draw_area_w);
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4640      	mov	r0, r8
 800e1da:	f005 ff78 	bl	80140ce <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800e1de:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800e1e2:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800e1ec:	444a      	add	r2, r9
 800e1ee:	4419      	add	r1, r3
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	b212      	sxth	r2, r2
 800e1f4:	b209      	sxth	r1, r1
 800e1f6:	f000 feed 	bl	800efd4 <lv_draw_mask_apply>
 800e1fa:	4602      	mov	r2, r0
            if(dashed) {
 800e1fc:	b18e      	cbz	r6, 800e222 <lv_draw_line+0x2ba>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800e1fe:	b180      	cbz	r0, 800e222 <lv_draw_line+0x2ba>
                    lv_style_int_t dash_cnt = dash_start;
 800e200:	4639      	mov	r1, r7
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800e202:	2300      	movs	r3, #0
 800e204:	e00a      	b.n	800e21c <lv_draw_line+0x2b4>
                        if(dash_cnt <= dsc->dash_width) {
 800e206:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e20a:	428a      	cmp	r2, r1
 800e20c:	db23      	blt.n	800e256 <lv_draw_line+0x2ee>
                            i += diff;
 800e20e:	4413      	add	r3, r2
 800e210:	1a5b      	subs	r3, r3, r1
 800e212:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800e214:	3301      	adds	r3, #1
 800e216:	3201      	adds	r2, #1
 800e218:	b21b      	sxth	r3, r3
 800e21a:	b211      	sxth	r1, r2
 800e21c:	429d      	cmp	r5, r3
 800e21e:	dcf2      	bgt.n	800e206 <lv_draw_line+0x29e>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e220:	2202      	movs	r2, #2
                           dsc->blend_mode);
 800e222:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
 800e224:	a933      	add	r1, sp, #204	; 0xcc
 800e226:	a80c      	add	r0, sp, #48	; 0x30
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e228:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fill_area,
 800e22c:	f003 0303 	and.w	r3, r3, #3
 800e230:	9302      	str	r3, [sp, #8]
 800e232:	7a23      	ldrb	r3, [r4, #8]
 800e234:	e9cd 2300 	strd	r2, r3, [sp]
 800e238:	4643      	mov	r3, r8
 800e23a:	8822      	ldrh	r2, [r4, #0]
 800e23c:	f7fd fdee 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 800e240:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
 800e244:	3301      	adds	r3, #1
 800e246:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
 800e24a:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
 800e24e:	3301      	adds	r3, #1
 800e250:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
 800e254:	e7b5      	b.n	800e1c2 <lv_draw_line+0x25a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800e256:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800e25a:	4402      	add	r2, r0
 800e25c:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800e25e:	bfba      	itte	lt
 800e260:	f808 b003 	strblt.w	fp, [r8, r3]
 800e264:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800e266:	2200      	movge	r2, #0
 800e268:	e7d4      	b.n	800e214 <lv_draw_line+0x2ac>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800e26a:	9b04      	ldr	r3, [sp, #16]
 800e26c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e270:	9b05      	ldr	r3, [sp, #20]
 800e272:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e276:	42b5      	cmp	r5, r6
 800e278:	f040 80c4 	bne.w	800e404 <lv_draw_line+0x49c>
    lv_opa_t opa = dsc->opa;
 800e27c:	7a25      	ldrb	r5, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e27e:	f7fc fdf5 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e282:	f004 fc2b 	bl	8012adc <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
 800e286:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800e28a:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e28e:	4681      	mov	r9, r0
    int32_t w = dsc->width - 1;
 800e290:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
 800e292:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	eb03 0608 	add.w	r6, r3, r8
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800e29e:	b127      	cbz	r7, 800e2aa <lv_draw_line+0x342>
 800e2a0:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
 800e2a4:	3700      	adds	r7, #0
 800e2a6:	bf18      	it	ne
 800e2a8:	2701      	movne	r7, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800e2aa:	f000 fee3 	bl	800f074 <lv_draw_mask_get_cnt>
 800e2ae:	bb10      	cbnz	r0, 800e2f6 <lv_draw_line+0x38e>
    else if(dashed) simple_mode = false;
 800e2b0:	f087 0101 	eor.w	r1, r7, #1
    draw_area.x1 = point1->x - w_half1;
 800e2b4:	9b04      	ldr	r3, [sp, #16]
 800e2b6:	881a      	ldrh	r2, [r3, #0]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800e2b8:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
 800e2ba:	1b96      	subs	r6, r2, r6
    draw_area.x2 = point1->x + w_half0;
 800e2bc:	4490      	add	r8, r2
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800e2be:	9a04      	ldr	r2, [sp, #16]
 800e2c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2c4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e2c8:	4618      	mov	r0, r3
    draw_area.x1 = point1->x - w_half1;
 800e2ca:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800e2ce:	4293      	cmp	r3, r2
    draw_area.x2 = point1->x + w_half0;
 800e2d0:	f8ad 80a4 	strh.w	r8, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800e2d4:	bfa8      	it	ge
 800e2d6:	4610      	movge	r0, r2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	bfb8      	it	lt
 800e2dc:	4613      	movlt	r3, r2
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800e2de:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
 800e2e8:	b139      	cbz	r1, 800e2fa <lv_draw_line+0x392>
                       dsc->blend_mode);
 800e2ea:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
 800e2ec:	f003 0303 	and.w	r3, r3, #3
 800e2f0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800e2f4:	e6c4      	b.n	800e080 <lv_draw_line+0x118>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	e7dc      	b.n	800e2b4 <lv_draw_line+0x34c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800e2fa:	aa28      	add	r2, sp, #160	; 0xa0
 800e2fc:	a90c      	add	r1, sp, #48	; 0x30
 800e2fe:	4610      	mov	r0, r2
 800e300:	f004 fef7 	bl	80130f2 <_lv_area_intersect>
        if(!is_common) return;
 800e304:	2800      	cmp	r0, #0
 800e306:	f43f aec3 	beq.w	800e090 <lv_draw_line+0x128>
        draw_area.x1 -= vdb->area.x1;
 800e30a:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800e30e:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
 800e312:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        draw_area.x1 -= vdb->area.x1;
 800e316:	1ac5      	subs	r5, r0, r3
        draw_area.y2 -= vdb->area.y1;
 800e318:	f8bd c0a6 	ldrh.w	ip, [sp, #166]	; 0xa6
        draw_area.x1 -= vdb->area.x1;
 800e31c:	b2ae      	uxth	r6, r5
        draw_area.y1 -= vdb->area.y1;
 800e31e:	f8b9 5012 	ldrh.w	r5, [r9, #18]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800e322:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.y1 -= vdb->area.y1;
 800e326:	1b51      	subs	r1, r2, r5
        draw_area.y2 -= vdb->area.y1;
 800e328:	ebac 0505 	sub.w	r5, ip, r5
        draw_area.x1 -= vdb->area.x1;
 800e32c:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
 800e330:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
 800e334:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
 800e338:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
        draw_area.x2 -= vdb->area.x1;
 800e33c:	1acb      	subs	r3, r1, r3
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800e33e:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800e342:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.x2 -= vdb->area.x1;
 800e346:	b29b      	uxth	r3, r3
        fill_area.y2 = fill_area.y1;
 800e348:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
 800e34c:	1c5d      	adds	r5, r3, #1
        draw_area.x2 -= vdb->area.x1;
 800e34e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 800e352:	1bad      	subs	r5, r5, r6
 800e354:	b22d      	sxth	r5, r5
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800e356:	4628      	mov	r0, r5
 800e358:	f005 fdec 	bl	8013f34 <_lv_mem_buf_get>
 800e35c:	f9bd 80a2 	ldrsh.w	r8, [sp, #162]	; 0xa2
 800e360:	4682      	mov	sl, r0
        if(dashed) {
 800e362:	b1a7      	cbz	r7, 800e38e <lv_draw_line+0x426>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800e364:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800e368:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
 800e36c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e370:	4442      	add	r2, r8
 800e372:	4433      	add	r3, r6
 800e374:	fb92 f6f3 	sdiv	r6, r2, r3
 800e378:	fb03 2616 	mls	r6, r3, r6, r2
 800e37c:	b236      	sxth	r6, r6
            _lv_blend_fill(clip, &fill_area,
 800e37e:	f04f 0b00 	mov.w	fp, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e382:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 800e386:	4598      	cmp	r8, r3
 800e388:	dd03      	ble.n	800e392 <lv_draw_line+0x42a>
        _lv_mem_buf_release(mask_buf);
 800e38a:	4650      	mov	r0, sl
 800e38c:	e71e      	b.n	800e1cc <lv_draw_line+0x264>
        lv_style_int_t dash_start = 0;
 800e38e:	463e      	mov	r6, r7
 800e390:	e7f5      	b.n	800e37e <lv_draw_line+0x416>
            _lv_memset_ff(mask_buf, draw_area_w);
 800e392:	4629      	mov	r1, r5
 800e394:	4650      	mov	r0, sl
 800e396:	f005 fe9a 	bl	80140ce <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800e39a:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800e39e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800e3a8:	4442      	add	r2, r8
 800e3aa:	4419      	add	r1, r3
 800e3ac:	462b      	mov	r3, r5
 800e3ae:	b212      	sxth	r2, r2
 800e3b0:	b209      	sxth	r1, r1
 800e3b2:	f000 fe0f 	bl	800efd4 <lv_draw_mask_apply>
            if(dashed) {
 800e3b6:	b16f      	cbz	r7, 800e3d4 <lv_draw_line+0x46c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800e3b8:	b150      	cbz	r0, 800e3d0 <lv_draw_line+0x468>
                    if(dash_cnt > dsc->dash_width) {
 800e3ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800e3be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800e3c2:	42b2      	cmp	r2, r6
 800e3c4:	bfb8      	it	lt
 800e3c6:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800e3c8:	4413      	add	r3, r2
                        dash_cnt = 0;
 800e3ca:	429e      	cmp	r6, r3
 800e3cc:	bfa8      	it	ge
 800e3ce:	2600      	movge	r6, #0
                dash_cnt ++;
 800e3d0:	3601      	adds	r6, #1
 800e3d2:	b236      	sxth	r6, r6
            _lv_blend_fill(clip, &fill_area,
 800e3d4:	7a23      	ldrb	r3, [r4, #8]
 800e3d6:	a933      	add	r1, sp, #204	; 0xcc
 800e3d8:	f8cd b008 	str.w	fp, [sp, #8]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e3dc:	f108 0801 	add.w	r8, r8, #1
            _lv_blend_fill(clip, &fill_area,
 800e3e0:	8822      	ldrh	r2, [r4, #0]
 800e3e2:	e9cd 0300 	strd	r0, r3, [sp]
 800e3e6:	4653      	mov	r3, sl
 800e3e8:	a80c      	add	r0, sp, #48	; 0x30
 800e3ea:	f7fd fd17 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 800e3ee:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
 800e3f8:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
 800e402:	e7be      	b.n	800e382 <lv_draw_line+0x41a>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800e404:	4547      	cmp	r7, r8
 800e406:	da05      	bge.n	800e414 <lv_draw_line+0x4ac>
 800e408:	4643      	mov	r3, r8
 800e40a:	46b8      	mov	r8, r7
 800e40c:	461f      	mov	r7, r3
 800e40e:	4633      	mov	r3, r6
 800e410:	462e      	mov	r6, r5
 800e412:	461d      	mov	r5, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800e414:	1bab      	subs	r3, r5, r6
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e416:	49c2      	ldr	r1, [pc, #776]	; (800e720 <lv_draw_line+0x7b8>)
    int32_t w = dsc->width;
 800e418:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t xdiff = p2.x - p1.x;
 800e41c:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800e41e:	eba7 0308 	sub.w	r3, r7, r8
 800e422:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800e424:	1bab      	subs	r3, r5, r6
 800e426:	9a07      	ldr	r2, [sp, #28]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bfb8      	it	lt
 800e42c:	425b      	neglt	r3, r3
 800e42e:	2a00      	cmp	r2, #0
 800e430:	bfb8      	it	lt
 800e432:	4252      	neglt	r2, r2
 800e434:	9308      	str	r3, [sp, #32]
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800e436:	4293      	cmp	r3, r2
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800e438:	4693      	mov	fp, r2
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800e43a:	bfcb      	itete	gt
 800e43c:	0152      	lslgt	r2, r2, #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800e43e:	015a      	lslle	r2, r3, #5
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800e440:	fb92 f2f3 	sdivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800e444:	fb92 f2fb 	sdivle	r2, r2, fp
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e448:	5c89      	ldrb	r1, [r1, r2]
 800e44a:	223f      	movs	r2, #63	; 0x3f
 800e44c:	fb19 2901 	smlabb	r9, r9, r1, r2
 800e450:	ea4f 1ae9 	mov.w	sl, r9, asr #7
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800e454:	fa1f f28a 	uxth.w	r2, sl
 800e458:	42b5      	cmp	r5, r6
 800e45a:	bfd4      	ite	le
 800e45c:	ebc2 0105 	rsble	r1, r2, r5
 800e460:	ebc2 0106 	rsbgt	r1, r2, r6
 800e464:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 800e468:	42b5      	cmp	r5, r6
 800e46a:	bfac      	ite	ge
 800e46c:	1951      	addge	r1, r2, r5
 800e46e:	1991      	addlt	r1, r2, r6
 800e470:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800e474:	4547      	cmp	r7, r8
 800e476:	bfd4      	ite	le
 800e478:	ebc2 0107 	rsble	r1, r2, r7
 800e47c:	ebc2 0108 	rsbgt	r1, r2, r8
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800e480:	4547      	cmp	r7, r8
 800e482:	bfac      	ite	ge
 800e484:	19d2      	addge	r2, r2, r7
 800e486:	4442      	addlt	r2, r8
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800e488:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800e48c:	a90e      	add	r1, sp, #56	; 0x38
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800e48e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800e492:	aa0c      	add	r2, sp, #48	; 0x30
 800e494:	4608      	mov	r0, r1
 800e496:	f004 fe2c 	bl	80130f2 <_lv_area_intersect>
    if(is_common == false) return;
 800e49a:	2800      	cmp	r0, #0
 800e49c:	f43f adf8 	beq.w	800e090 <lv_draw_line+0x128>
    int32_t w_half0 = w >> 1;
 800e4a0:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e4a4:	f00a 0201 	and.w	r2, sl, #1
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800e4a8:	9b08      	ldr	r3, [sp, #32]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e4aa:	444a      	add	r2, r9
 800e4ac:	fa1f f989 	uxth.w	r9, r9
    if(flat) {
 800e4b0:	455b      	cmp	r3, fp
 800e4b2:	b292      	uxth	r2, r2
 800e4b4:	f340 80f8 	ble.w	800e6a8 <lv_draw_line+0x740>
 800e4b8:	b2bb      	uxth	r3, r7
 800e4ba:	fa1f fa88 	uxth.w	sl, r8
 800e4be:	eb02 0b0a 	add.w	fp, r2, sl
 800e4c2:	441a      	add	r2, r3
 800e4c4:	ebaa 0a09 	sub.w	sl, sl, r9
 800e4c8:	eba3 0909 	sub.w	r9, r3, r9
        if(xdiff > 0) {
 800e4cc:	1bab      	subs	r3, r5, r6
 800e4ce:	b212      	sxth	r2, r2
 800e4d0:	fa0f fb8b 	sxth.w	fp, fp
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	9208      	str	r2, [sp, #32]
 800e4dc:	fa0f fa8a 	sxth.w	sl, sl
 800e4e0:	fa0f f989 	sxth.w	r9, r9
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e4e4:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800e4e6:	f340 80d1 	ble.w	800e68c <lv_draw_line+0x724>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e4ea:	462b      	mov	r3, r5
 800e4ec:	4652      	mov	r2, sl
 800e4ee:	f8cd 9000 	str.w	r9, [sp]
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	a812      	add	r0, sp, #72	; 0x48
 800e4f6:	f000 fdcb 	bl	800f090 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	465a      	mov	r2, fp
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	9b08      	ldr	r3, [sp, #32]
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	462b      	mov	r3, r5
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e506:	4631      	mov	r1, r6
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800e508:	a81d      	add	r0, sp, #116	; 0x74
 800e50a:	f000 fdc1 	bl	800f090 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800e50e:	2100      	movs	r1, #0
 800e510:	a812      	add	r0, sp, #72	; 0x48
 800e512:	f000 fd49 	bl	800efa8 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e516:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800e518:	900a      	str	r0, [sp, #40]	; 0x28
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e51a:	a81d      	add	r0, sp, #116	; 0x74
 800e51c:	f000 fd44 	bl	800efa8 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800e520:	f894 9009 	ldrb.w	r9, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e524:	900b      	str	r0, [sp, #44]	; 0x2c
    if(!dsc->raw_end) {
 800e526:	f019 0910 	ands.w	r9, r9, #16
 800e52a:	f040 80d9 	bne.w	800e6e0 <lv_draw_line+0x778>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800e52e:	f8bd b024 	ldrh.w	fp, [sp, #36]	; 0x24
 800e532:	2203      	movs	r2, #3
 800e534:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 800e538:	4631      	mov	r1, r6
 800e53a:	9201      	str	r2, [sp, #4]
 800e53c:	eb0b 0208 	add.w	r2, fp, r8
 800e540:	eba6 030a 	sub.w	r3, r6, sl
 800e544:	a828      	add	r0, sp, #160	; 0xa0
 800e546:	b212      	sxth	r2, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800e548:	44bb      	add	fp, r7
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800e54a:	b21b      	sxth	r3, r3
 800e54c:	9200      	str	r2, [sp, #0]
 800e54e:	4642      	mov	r2, r8
 800e550:	f000 fd9e 	bl	800f090 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800e554:	2202      	movs	r2, #2
 800e556:	eba5 030a 	sub.w	r3, r5, sl
 800e55a:	4629      	mov	r1, r5
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	fa0f f28b 	sxth.w	r2, fp
 800e562:	b21b      	sxth	r3, r3
 800e564:	a833      	add	r0, sp, #204	; 0xcc
 800e566:	9200      	str	r2, [sp, #0]
 800e568:	463a      	mov	r2, r7
 800e56a:	f000 fd91 	bl	800f090 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800e56e:	4649      	mov	r1, r9
 800e570:	a828      	add	r0, sp, #160	; 0xa0
 800e572:	f000 fd19 	bl	800efa8 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800e576:	4649      	mov	r1, r9
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800e578:	9009      	str	r0, [sp, #36]	; 0x24
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800e57a:	a833      	add	r0, sp, #204	; 0xcc
 800e57c:	f000 fd14 	bl	800efa8 <lv_draw_mask_add>
 800e580:	4682      	mov	sl, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e582:	f7fc fc73 	bl	800ae6c <_lv_refr_get_disp_refreshing>
 800e586:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e588:	f004 faa8 	bl	8012adc <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
 800e58c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    draw_area.x1 -= disp_area->x1;
 800e590:	8a07      	ldrh	r7, [r0, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e592:	4606      	mov	r6, r0
    draw_area.y1 -= disp_area->y1;
 800e594:	8a41      	ldrh	r1, [r0, #18]
 800e596:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800e59a:	1bdb      	subs	r3, r3, r7
    draw_area.x1 -= disp_area->x1;
 800e59c:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800e5a0:	1a40      	subs	r0, r0, r1
    draw_area.x2 -= disp_area->x1;
 800e5a2:	b29b      	uxth	r3, r3
    draw_area.x1 -= disp_area->x1;
 800e5a4:	ebab 0b07 	sub.w	fp, fp, r7
    draw_area.y1 -= disp_area->y1;
 800e5a8:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    draw_area.y2 -= disp_area->y1;
 800e5ac:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    draw_area.x1 -= disp_area->x1;
 800e5b0:	fa1f f28b 	uxth.w	r2, fp
 800e5b4:	f103 0b01 	add.w	fp, r3, #1
    draw_area.x2 -= disp_area->x1;
 800e5b8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
 800e5bc:	1a41      	subs	r1, r0, r1
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800e5be:	4628      	mov	r0, r5
 800e5c0:	ebab 0b02 	sub.w	fp, fp, r2
    draw_area.x1 -= disp_area->x1;
 800e5c4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y2 -= disp_area->y1;
 800e5c8:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800e5cc:	f004 fa22 	bl	8012a14 <lv_disp_get_hor_res>
 800e5d0:	4607      	mov	r7, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 800e5d2:	a80e      	add	r0, sp, #56	; 0x38
 800e5d4:	f004 fd7f 	bl	80130d6 <lv_area_get_size>
 800e5d8:	4287      	cmp	r7, r0
 800e5da:	fa0f fb8b 	sxth.w	fp, fp
 800e5de:	d903      	bls.n	800e5e8 <lv_draw_line+0x680>
 800e5e0:	a80e      	add	r0, sp, #56	; 0x38
 800e5e2:	f004 fd78 	bl	80130d6 <lv_area_get_size>
 800e5e6:	4607      	mov	r7, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e5e8:	4638      	mov	r0, r7
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
 800e5ea:	f04f 0900 	mov.w	r9, #0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e5ee:	f005 fca1 	bl	8013f34 <_lv_mem_buf_get>
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800e5f2:	8a33      	ldrh	r3, [r6, #16]
 800e5f4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38

    _lv_memset_ff(mask_buf, mask_buf_size);
 800e5f8:	4639      	mov	r1, r7
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e5fa:	4680      	mov	r8, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800e5fc:	441a      	add	r2, r3
 800e5fe:	b212      	sxth	r2, r2
 800e600:	9207      	str	r2, [sp, #28]
 800e602:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800e606:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800e60a:	4413      	add	r3, r2
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800e60c:	8a72      	ldrh	r2, [r6, #18]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800e60e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800e612:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800e616:	4413      	add	r3, r2
 800e618:	b21b      	sxth	r3, r3
 800e61a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
 800e61e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    _lv_memset_ff(mask_buf, mask_buf_size);
 800e622:	f005 fd54 	bl	80140ce <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800e626:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
 800e62a:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 800e62e:	441d      	add	r5, r3
 800e630:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800e634:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800e638:	4413      	add	r3, r2
 800e63a:	429d      	cmp	r5, r3
 800e63c:	dd55      	ble.n	800e6ea <lv_draw_line+0x782>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800e63e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800e642:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800e646:	429a      	cmp	r2, r3
 800e648:	d010      	beq.n	800e66c <lv_draw_line+0x704>
        fill_area.y2--;
 800e64a:	3b01      	subs	r3, #1
        _lv_blend_fill(&fill_area, clip,
 800e64c:	8822      	ldrh	r2, [r4, #0]
 800e64e:	a90c      	add	r1, sp, #48	; 0x30
 800e650:	a810      	add	r0, sp, #64	; 0x40
        fill_area.y2--;
 800e652:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800e656:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
 800e658:	f003 0303 	and.w	r3, r3, #3
 800e65c:	9302      	str	r3, [sp, #8]
 800e65e:	7a23      	ldrb	r3, [r4, #8]
 800e660:	9301      	str	r3, [sp, #4]
 800e662:	2302      	movs	r3, #2
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	4643      	mov	r3, r8
 800e668:	f7fd fbd8 	bl	800be1c <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 800e66c:	4640      	mov	r0, r8
 800e66e:	f005 faf7 	bl	8013c60 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800e672:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e674:	f000 fcd4 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800e678:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e67a:	f000 fcd1 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800e67e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e680:	f000 fcce 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800e684:	4650      	mov	r0, sl
 800e686:	f000 fccb 	bl	800f020 <lv_draw_mask_remove_id>
 800e68a:	e501      	b.n	800e090 <lv_draw_line+0x128>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e68c:	9b08      	ldr	r3, [sp, #32]
 800e68e:	465a      	mov	r2, fp
 800e690:	4631      	mov	r1, r6
 800e692:	a812      	add	r0, sp, #72	; 0x48
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	462b      	mov	r3, r5
 800e698:	f000 fcfa 	bl	800f090 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e69c:	2301      	movs	r3, #1
 800e69e:	4652      	mov	r2, sl
 800e6a0:	e9cd 9300 	strd	r9, r3, [sp]
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	e72e      	b.n	800e506 <lv_draw_line+0x59e>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800e6a8:	fa1f fb86 	uxth.w	fp, r6
 800e6ac:	a812      	add	r0, sp, #72	; 0x48
 800e6ae:	fa1f fa85 	uxth.w	sl, r5
 800e6b2:	eb0b 0102 	add.w	r1, fp, r2
 800e6b6:	eb0a 0302 	add.w	r3, sl, r2
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	b209      	sxth	r1, r1
 800e6be:	b21b      	sxth	r3, r3
 800e6c0:	e9cd 7200 	strd	r7, r2, [sp]
 800e6c4:	4642      	mov	r2, r8
 800e6c6:	f000 fce3 	bl	800f090 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	ebaa 0309 	sub.w	r3, sl, r9
 800e6d0:	ebab 0109 	sub.w	r1, fp, r9
 800e6d4:	e9cd 7200 	strd	r7, r2, [sp]
 800e6d8:	b21b      	sxth	r3, r3
 800e6da:	4642      	mov	r2, r8
 800e6dc:	b209      	sxth	r1, r1
 800e6de:	e713      	b.n	800e508 <lv_draw_line+0x5a0>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800e6e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
 800e6e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e6e8:	e74b      	b.n	800e582 <lv_draw_line+0x61a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800e6ea:	eb08 0309 	add.w	r3, r8, r9
 800e6ee:	b22a      	sxth	r2, r5
 800e6f0:	9308      	str	r3, [sp, #32]
 800e6f2:	465b      	mov	r3, fp
 800e6f4:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800e6f8:	f000 fc6c 	bl	800efd4 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800e6fc:	b918      	cbnz	r0, 800e706 <lv_draw_line+0x79e>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800e6fe:	4659      	mov	r1, fp
 800e700:	9808      	ldr	r0, [sp, #32]
 800e702:	f005 fcb5 	bl	8014070 <_lv_memset_00>
        mask_p += draw_area_w;
 800e706:	44d9      	add	r9, fp
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800e708:	eb09 030b 	add.w	r3, r9, fp
 800e70c:	429f      	cmp	r7, r3
 800e70e:	d909      	bls.n	800e724 <lv_draw_line+0x7bc>
            fill_area.y2 ++;
 800e710:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800e714:	3301      	adds	r3, #1
 800e716:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800e71a:	3501      	adds	r5, #1
 800e71c:	e788      	b.n	800e630 <lv_draw_line+0x6c8>
 800e71e:	bf00      	nop
 800e720:	0801f4d7 	.word	0x0801f4d7
                           dsc->blend_mode);
 800e724:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(&fill_area, clip,
 800e726:	a90c      	add	r1, sp, #48	; 0x30
 800e728:	8822      	ldrh	r2, [r4, #0]
 800e72a:	a810      	add	r0, sp, #64	; 0x40
 800e72c:	f003 0303 	and.w	r3, r3, #3
            mask_p = 0;
 800e730:	f04f 0900 	mov.w	r9, #0
            _lv_blend_fill(&fill_area, clip,
 800e734:	9302      	str	r3, [sp, #8]
 800e736:	7a23      	ldrb	r3, [r4, #8]
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	2302      	movs	r3, #2
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	4643      	mov	r3, r8
 800e740:	f7fd fb6c 	bl	800be1c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800e744:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            _lv_memset_ff(mask_buf, mask_buf_size);
 800e748:	4639      	mov	r1, r7
 800e74a:	4640      	mov	r0, r8
            fill_area.y1 = fill_area.y2 + 1;
 800e74c:	3301      	adds	r3, #1
 800e74e:	b21b      	sxth	r3, r3
 800e750:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
 800e754:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_memset_ff(mask_buf, mask_buf_size);
 800e758:	f005 fcb9 	bl	80140ce <_lv_memset_ff>
 800e75c:	e7dd      	b.n	800e71a <lv_draw_line+0x7b2>
 800e75e:	bf00      	nop

0800e760 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e760:	29fc      	cmp	r1, #252	; 0xfc
 800e762:	d80a      	bhi.n	800e77a <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e764:	2902      	cmp	r1, #2
 800e766:	d907      	bls.n	800e778 <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e768:	fb10 f001 	smulbb	r0, r0, r1
 800e76c:	f248 0181 	movw	r1, #32897	; 0x8081
 800e770:	4348      	muls	r0, r1
 800e772:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800e776:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800e778:	2000      	movs	r0, #0
}
 800e77a:	4770      	bx	lr

0800e77c <lv_draw_mask_line>:
{
 800e77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e780:	9f08      	ldr	r7, [sp, #32]
 800e782:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800e784:	8abc      	ldrh	r4, [r7, #20]
    abs_x -= p->origo.x;
 800e786:	8a7e      	ldrh	r6, [r7, #18]
    abs_y -= p->origo.y;
 800e788:	1b14      	subs	r4, r2, r4
 800e78a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    abs_x -= p->origo.x;
 800e78e:	1b8e      	subs	r6, r1, r6
    if(p->steep == 0) {
 800e790:	6a39      	ldr	r1, [r7, #32]
    abs_y -= p->origo.y;
 800e792:	b224      	sxth	r4, r4
 800e794:	f002 0c01 	and.w	ip, r2, #1
    abs_x -= p->origo.x;
 800e798:	b236      	sxth	r6, r6
    if(p->steep == 0) {
 800e79a:	bb99      	cbnz	r1, 800e804 <lv_draw_mask_line+0x88>
 800e79c:	7c3a      	ldrb	r2, [r7, #16]
 800e79e:	f002 0203 	and.w	r2, r2, #3
        if(p->flat) {
 800e7a2:	f1bc 0f00 	cmp.w	ip, #0
 800e7a6:	d00f      	beq.n	800e7c8 <lv_draw_mask_line+0x4c>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800e7a8:	2a01      	cmp	r2, #1
 800e7aa:	f240 8187 	bls.w	800eabc <lv_draw_mask_line+0x340>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7ae:	2a02      	cmp	r2, #2
 800e7b0:	d105      	bne.n	800e7be <lv_draw_mask_line+0x42>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7b2:	3401      	adds	r4, #1
 800e7b4:	bfac      	ite	ge
 800e7b6:	2000      	movge	r0, #0
 800e7b8:	2001      	movlt	r0, #1
}
 800e7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7be:	2c00      	cmp	r4, #0
 800e7c0:	bfd4      	ite	le
 800e7c2:	2000      	movle	r0, #0
 800e7c4:	2001      	movgt	r0, #1
 800e7c6:	e7f8      	b.n	800e7ba <lv_draw_mask_line+0x3e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800e7c8:	1e91      	subs	r1, r2, #2
 800e7ca:	2901      	cmp	r1, #1
 800e7cc:	f240 8176 	bls.w	800eabc <lv_draw_mask_line+0x340>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7d0:	2a01      	cmp	r2, #1
 800e7d2:	d10a      	bne.n	800e7ea <lv_draw_mask_line+0x6e>
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	f300 8171 	bgt.w	800eabc <lv_draw_mask_line+0x340>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7da:	42de      	cmn	r6, r3
 800e7dc:	d40a      	bmi.n	800e7f4 <lv_draw_mask_line+0x78>
                    int32_t k = - abs_x;
 800e7de:	4271      	negs	r1, r6
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800e7e0:	428b      	cmp	r3, r1
 800e7e2:	dd07      	ble.n	800e7f4 <lv_draw_mask_line+0x78>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800e7e4:	f005 fc44 	bl	8014070 <_lv_memset_00>
 800e7e8:	e00a      	b.n	800e800 <lv_draw_mask_line+0x84>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7ea:	1999      	adds	r1, r3, r6
 800e7ec:	f100 8166 	bmi.w	800eabc <lv_draw_mask_line+0x340>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7f0:	2e00      	cmp	r6, #0
 800e7f2:	dd01      	ble.n	800e7f8 <lv_draw_mask_line+0x7c>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e7e0      	b.n	800e7ba <lv_draw_mask_line+0x3e>
                    int32_t k = - abs_x;
 800e7f8:	4270      	negs	r0, r6
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 800e7fa:	4298      	cmp	r0, r3
 800e7fc:	f2c0 8098 	blt.w	800e930 <lv_draw_mask_line+0x1b4>
    return LV_DRAW_MASK_RES_CHANGED;
 800e800:	2002      	movs	r0, #2
 800e802:	e7da      	b.n	800e7ba <lv_draw_mask_line+0x3e>
 800e804:	f002 0002 	and.w	r0, r2, #2
    if(p->flat) {
 800e808:	f1bc 0f00 	cmp.w	ip, #0
 800e80c:	f000 8092 	beq.w	800e934 <lv_draw_mask_line+0x1b8>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800e810:	69f9      	ldr	r1, [r7, #28]
 800e812:	fb06 f201 	mul.w	r2, r6, r1
    if(p->yx_steep > 0) {
 800e816:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800e818:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 800e81c:	dd05      	ble.n	800e82a <lv_draw_mask_line+0xae>
        if(y_at_x > abs_y) {
 800e81e:	42a2      	cmp	r2, r4
 800e820:	dd05      	ble.n	800e82e <lv_draw_mask_line+0xb2>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e822:	3000      	adds	r0, #0
 800e824:	bf18      	it	ne
 800e826:	2001      	movne	r0, #1
 800e828:	e7c7      	b.n	800e7ba <lv_draw_mask_line+0x3e>
        if(y_at_x < abs_y) {
 800e82a:	42a2      	cmp	r2, r4
 800e82c:	dbf9      	blt.n	800e822 <lv_draw_mask_line+0xa6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e82e:	199a      	adds	r2, r3, r6
    if(p->yx_steep > 0) {
 800e830:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e832:	fb01 f202 	mul.w	r2, r1, r2
 800e836:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 800e83a:	dd05      	ble.n	800e848 <lv_draw_mask_line+0xcc>
        if(y_at_x < abs_y) {
 800e83c:	42a2      	cmp	r2, r4
 800e83e:	da06      	bge.n	800e84e <lv_draw_mask_line+0xd2>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e840:	fab0 f080 	clz	r0, r0
 800e844:	0940      	lsrs	r0, r0, #5
 800e846:	e7b8      	b.n	800e7ba <lv_draw_mask_line+0x3e>
        if(y_at_x > abs_y) {
 800e848:	42a2      	cmp	r2, r4
 800e84a:	dcf9      	bgt.n	800e840 <lv_draw_mask_line+0xc4>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800e84c:	3401      	adds	r4, #1
 800e84e:	69b9      	ldr	r1, [r7, #24]
 800e850:	0224      	lsls	r4, r4, #8
 800e852:	434c      	muls	r4, r1
 800e854:	12a4      	asrs	r4, r4, #10
    int32_t xei = xe >> 8;
 800e856:	ea4f 2c24 	mov.w	ip, r4, asr #8
    if(xef == 0) px_h = 255;
 800e85a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800e85e:	bf1a      	itte	ne
 800e860:	f1c4 02ff 	rsbne	r2, r4, #255	; 0xff
 800e864:	6a79      	ldrne	r1, [r7, #36]	; 0x24
    if(xef == 0) px_h = 255;
 800e866:	22ff      	moveq	r2, #255	; 0xff
    int32_t k = xei - abs_x;
 800e868:	ebac 0606 	sub.w	r6, ip, r6
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800e86c:	bf1e      	ittt	ne
 800e86e:	434a      	mulne	r2, r1
 800e870:	1212      	asrne	r2, r2, #8
 800e872:	f1c2 02ff 	rsbne	r2, r2, #255	; 0xff
    if(xef) {
 800e876:	2c00      	cmp	r4, #0
 800e878:	d051      	beq.n	800e91e <lv_draw_mask_line+0x1a2>
        if(k >= 0 && k < len) {
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	db0f      	blt.n	800e89e <lv_draw_mask_line+0x122>
 800e87e:	42b3      	cmp	r3, r6
 800e880:	dd0d      	ble.n	800e89e <lv_draw_mask_line+0x122>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e882:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 800e886:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800e88a:	434c      	muls	r4, r1
 800e88c:	f3c4 2147 	ubfx	r1, r4, #9, #8
            if(p->inv) m = 255 - m;
 800e890:	b908      	cbnz	r0, 800e896 <lv_draw_mask_line+0x11a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e892:	43c9      	mvns	r1, r1
 800e894:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e896:	5da8      	ldrb	r0, [r5, r6]
 800e898:	f7ff ff62 	bl	800e760 <mask_mix>
 800e89c:	55a8      	strb	r0, [r5, r6]
        k++;
 800e89e:	1c74      	adds	r4, r6, #1
    while(px_h > p->spx) {
 800e8a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8a2:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800e8a6:	428a      	cmp	r2, r1
 800e8a8:	f000 0002 	and.w	r0, r0, #2
 800e8ac:	dc16      	bgt.n	800e8dc <lv_draw_mask_line+0x160>
    if(k < len && k >= 0) {
 800e8ae:	42a3      	cmp	r3, r4
 800e8b0:	dd28      	ble.n	800e904 <lv_draw_mask_line+0x188>
 800e8b2:	2c00      	cmp	r4, #0
 800e8b4:	db26      	blt.n	800e904 <lv_draw_mask_line+0x188>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800e8b6:	69b9      	ldr	r1, [r7, #24]
 800e8b8:	4351      	muls	r1, r2
 800e8ba:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800e8bc:	4351      	muls	r1, r2
        if(p->yx_steep < 0) m = 255 - m;
 800e8be:	69fa      	ldr	r2, [r7, #28]
        m = (x_inters * px_h) >> 9;
 800e8c0:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800e8c4:	2a00      	cmp	r2, #0
 800e8c6:	bfbc      	itt	lt
 800e8c8:	43c9      	mvnlt	r1, r1
 800e8ca:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800e8cc:	b108      	cbz	r0, 800e8d2 <lv_draw_mask_line+0x156>
 800e8ce:	43c9      	mvns	r1, r1
 800e8d0:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800e8d2:	5d28      	ldrb	r0, [r5, r4]
 800e8d4:	f7ff ff44 	bl	800e760 <mask_mix>
 800e8d8:	5528      	strb	r0, [r5, r4]
 800e8da:	e013      	b.n	800e904 <lv_draw_mask_line+0x188>
        if(k >= 0 && k < len) {
 800e8dc:	2c00      	cmp	r4, #0
 800e8de:	db0b      	blt.n	800e8f8 <lv_draw_mask_line+0x17c>
 800e8e0:	42a3      	cmp	r3, r4
 800e8e2:	dd09      	ble.n	800e8f8 <lv_draw_mask_line+0x17c>
            m = px_h - (p->spx >> 1);
 800e8e4:	eba2 0161 	sub.w	r1, r2, r1, asr #1
 800e8e8:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800e8ea:	b108      	cbz	r0, 800e8f0 <lv_draw_mask_line+0x174>
 800e8ec:	43c9      	mvns	r1, r1
 800e8ee:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e8f0:	5d28      	ldrb	r0, [r5, r4]
 800e8f2:	f7ff ff35 	bl	800e760 <mask_mix>
 800e8f6:	5528      	strb	r0, [r5, r4]
        k++;
 800e8f8:	3401      	adds	r4, #1
        px_h -= p->spx;
 800e8fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
        if(k >= len) break;
 800e8fc:	42a3      	cmp	r3, r4
        px_h -= p->spx;
 800e8fe:	eba2 0201 	sub.w	r2, r2, r1
        if(k >= len) break;
 800e902:	dccd      	bgt.n	800e8a0 <lv_draw_mask_line+0x124>
    if(p->inv) {
 800e904:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e908:	0792      	lsls	r2, r2, #30
 800e90a:	d50a      	bpl.n	800e922 <lv_draw_mask_line+0x1a6>
        if(k > len) {
 800e90c:	42b3      	cmp	r3, r6
 800e90e:	f6ff af71 	blt.w	800e7f4 <lv_draw_mask_line+0x78>
        if(k >= 0) {
 800e912:	2e00      	cmp	r6, #0
 800e914:	f6ff af74 	blt.w	800e800 <lv_draw_mask_line+0x84>
            _lv_memset_00(&mask_buf[0], k);
 800e918:	4631      	mov	r1, r6
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800e91a:	4628      	mov	r0, r5
 800e91c:	e762      	b.n	800e7e4 <lv_draw_mask_line+0x68>
    int32_t k = xei - abs_x;
 800e91e:	4634      	mov	r4, r6
 800e920:	e7be      	b.n	800e8a0 <lv_draw_mask_line+0x124>
        if(k < 0) {
 800e922:	1c60      	adds	r0, r4, #1
 800e924:	f53f af66 	bmi.w	800e7f4 <lv_draw_mask_line+0x78>
        if(k <= len) {
 800e928:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 800e92a:	f6ff af69 	blt.w	800e800 <lv_draw_mask_line+0x84>
 800e92e:	1a19      	subs	r1, r3, r0
 800e930:	4428      	add	r0, r5
 800e932:	e757      	b.n	800e7e4 <lv_draw_mask_line+0x68>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800e934:	69ba      	ldr	r2, [r7, #24]
 800e936:	fb04 f102 	mul.w	r1, r4, r2
    if(p->xy_steep > 0) x_at_y++;
 800e93a:	2a00      	cmp	r2, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800e93c:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800e940:	bfcc      	ite	gt
 800e942:	f101 0c01 	addgt.w	ip, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800e946:	468c      	movle	ip, r1
    if(x_at_y < abs_x) {
 800e948:	45b4      	cmp	ip, r6
 800e94a:	f6ff af6a 	blt.w	800e822 <lv_draw_mask_line+0xa6>
    if(x_at_y > abs_x + len) {
 800e94e:	eb03 0c06 	add.w	ip, r3, r6
 800e952:	4561      	cmp	r1, ip
 800e954:	f73f af74 	bgt.w	800e840 <lv_draw_mask_line+0xc4>
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800e958:	0221      	lsls	r1, r4, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800e95a:	3401      	adds	r4, #1
 800e95c:	0224      	lsls	r4, r4, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800e95e:	4351      	muls	r1, r2
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800e960:	4354      	muls	r4, r2
    int32_t xsi = xs >> 8;
 800e962:	ea4f 4ea1 	mov.w	lr, r1, asr #18
    int32_t xsf = xs & 0xFF;
 800e966:	f3c1 2c87 	ubfx	ip, r1, #10, #8
    int32_t xei = xe >> 8;
 800e96a:	ea4f 48a4 	mov.w	r8, r4, asr #18
    k = xsi - abs_x;
 800e96e:	ebae 0906 	sub.w	r9, lr, r6
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800e972:	45c6      	cmp	lr, r8
 800e974:	f000 80a4 	beq.w	800eac0 <lv_draw_mask_line+0x344>
 800e978:	2a00      	cmp	r2, #0
 800e97a:	da53      	bge.n	800ea24 <lv_draw_mask_line+0x2a8>
 800e97c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e980:	f1bc 0f00 	cmp.w	ip, #0
 800e984:	f000 80ba 	beq.w	800eafc <lv_draw_mask_line+0x380>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800e988:	69fe      	ldr	r6, [r7, #28]
            if(k >= 0 && k < len) {
 800e98a:	f1b9 0f00 	cmp.w	r9, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800e98e:	f1c6 0600 	rsb	r6, r6, #0
 800e992:	fb0c f606 	mul.w	r6, ip, r6
 800e996:	ea4f 26a6 	mov.w	r6, r6, asr #10
            if(k >= 0 && k < len) {
 800e99a:	db0e      	blt.n	800e9ba <lv_draw_mask_line+0x23e>
 800e99c:	454b      	cmp	r3, r9
 800e99e:	dd0c      	ble.n	800e9ba <lv_draw_mask_line+0x23e>
                m = (y_inters * xsf) >> 9;
 800e9a0:	fb06 f10c 	mul.w	r1, r6, ip
 800e9a4:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800e9a8:	b108      	cbz	r0, 800e9ae <lv_draw_mask_line+0x232>
 800e9aa:	43c9      	mvns	r1, r1
 800e9ac:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e9ae:	f815 0009 	ldrb.w	r0, [r5, r9]
 800e9b2:	f7ff fed5 	bl	800e760 <mask_mix>
 800e9b6:	f805 0009 	strb.w	r0, [r5, r9]
            if(k >= 0 && k < len) {
 800e9ba:	2a00      	cmp	r2, #0
 800e9bc:	db14      	blt.n	800e9e8 <lv_draw_mask_line+0x26c>
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	dd12      	ble.n	800e9e8 <lv_draw_mask_line+0x26c>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800e9c2:	69b9      	ldr	r1, [r7, #24]
 800e9c4:	f1c6 06ff 	rsb	r6, r6, #255	; 0xff
                if(p->inv) m = 255 - m;
 800e9c8:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800e9cc:	4249      	negs	r1, r1
 800e9ce:	4371      	muls	r1, r6
 800e9d0:	1289      	asrs	r1, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e9d2:	434e      	muls	r6, r1
 800e9d4:	f3c6 2147 	ubfx	r1, r6, #9, #8
                if(p->inv) m = 255 - m;
 800e9d8:	0786      	lsls	r6, r0, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e9da:	5ca8      	ldrb	r0, [r5, r2]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e9dc:	bf5c      	itt	pl
 800e9de:	43c9      	mvnpl	r1, r1
 800e9e0:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e9e2:	f7ff febd 	bl	800e760 <mask_mix>
 800e9e6:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
 800e9e8:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800e9ec:	078c      	lsls	r4, r1, #30
 800e9ee:	d513      	bpl.n	800ea18 <lv_draw_mask_line+0x29c>
                if(k > len) k = len;
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	f6ff af05 	blt.w	800e800 <lv_draw_mask_line+0x84>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	f77f af02 	ble.w	800e800 <lv_draw_mask_line+0x84>
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	e78c      	b.n	800e91a <lv_draw_mask_line+0x19e>
        k++;
 800ea00:	3201      	adds	r2, #1
 800ea02:	429a      	cmp	r2, r3
 800ea04:	bfa8      	it	ge
 800ea06:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800ea08:	2a00      	cmp	r2, #0
 800ea0a:	f43f aef3 	beq.w	800e7f4 <lv_draw_mask_line+0x78>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800ea0e:	f77f aef7 	ble.w	800e800 <lv_draw_mask_line+0x84>
 800ea12:	1a99      	subs	r1, r3, r2
 800ea14:	18a8      	adds	r0, r5, r2
 800ea16:	e6e5      	b.n	800e7e4 <lv_draw_mask_line+0x68>
            k += 2;
 800ea18:	f109 0001 	add.w	r0, r9, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ea1c:	4283      	cmp	r3, r0
 800ea1e:	db4d      	blt.n	800eabc <lv_draw_mask_line+0x340>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 800ea20:	2800      	cmp	r0, #0
 800ea22:	e782      	b.n	800e92a <lv_draw_mask_line+0x1ae>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800ea24:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
 800ea28:	69fa      	ldr	r2, [r7, #28]
            if(k >= 0 && k < len) {
 800ea2a:	f1b9 0f00 	cmp.w	r9, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800ea2e:	fb02 f201 	mul.w	r2, r2, r1
 800ea32:	ea4f 22a2 	mov.w	r2, r2, asr #10
            if(k >= 0 && k < len) {
 800ea36:	db0d      	blt.n	800ea54 <lv_draw_mask_line+0x2d8>
 800ea38:	454b      	cmp	r3, r9
 800ea3a:	dd0b      	ble.n	800ea54 <lv_draw_mask_line+0x2d8>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800ea3c:	4351      	muls	r1, r2
 800ea3e:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800ea42:	b908      	cbnz	r0, 800ea48 <lv_draw_mask_line+0x2cc>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800ea44:	43c9      	mvns	r1, r1
 800ea46:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ea48:	f815 0009 	ldrb.w	r0, [r5, r9]
 800ea4c:	f7ff fe88 	bl	800e760 <mask_mix>
 800ea50:	f805 0009 	strb.w	r0, [r5, r9]
            if(k >= 0 && k < len) {
 800ea54:	f119 0401 	adds.w	r4, r9, #1
 800ea58:	d413      	bmi.n	800ea82 <lv_draw_mask_line+0x306>
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	dd11      	ble.n	800ea82 <lv_draw_mask_line+0x306>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800ea5e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ea62:	69b9      	ldr	r1, [r7, #24]
 800ea64:	4351      	muls	r1, r2
 800ea66:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800ea68:	434a      	muls	r2, r1
 800ea6a:	f3c2 2147 	ubfx	r1, r2, #9, #8
                if(p->inv) m = 255 - m;
 800ea6e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ea72:	0790      	lsls	r0, r2, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ea74:	5d28      	ldrb	r0, [r5, r4]
                if(p->inv) m = 255 - m;
 800ea76:	bf44      	itt	mi
 800ea78:	43c9      	mvnmi	r1, r1
 800ea7a:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ea7c:	f7ff fe70 	bl	800e760 <mask_mix>
 800ea80:	5528      	strb	r0, [r5, r4]
            if(p->inv) {
 800ea82:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ea86:	0792      	lsls	r2, r2, #30
 800ea88:	d508      	bpl.n	800ea9c <lv_draw_mask_line+0x320>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800ea8a:	454b      	cmp	r3, r9
 800ea8c:	f6ff aeb2 	blt.w	800e7f4 <lv_draw_mask_line+0x78>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800ea90:	f1b9 0f00 	cmp.w	r9, #0
 800ea94:	f6ff aeb4 	blt.w	800e800 <lv_draw_mask_line+0x84>
 800ea98:	4649      	mov	r1, r9
 800ea9a:	e73e      	b.n	800e91a <lv_draw_mask_line+0x19e>
            k++;
 800ea9c:	f109 0902 	add.w	r9, r9, #2
 800eaa0:	4599      	cmp	r9, r3
 800eaa2:	bfa8      	it	ge
 800eaa4:	4699      	movge	r9, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800eaa6:	f1b9 0f00 	cmp.w	r9, #0
 800eaaa:	f43f aea3 	beq.w	800e7f4 <lv_draw_mask_line+0x78>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800eaae:	f77f aea7 	ble.w	800e800 <lv_draw_mask_line+0x84>
 800eab2:	eba3 0109 	sub.w	r1, r3, r9
 800eab6:	eb05 0009 	add.w	r0, r5, r9
 800eaba:	e693      	b.n	800e7e4 <lv_draw_mask_line+0x68>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800eabc:	2001      	movs	r0, #1
 800eabe:	e67c      	b.n	800e7ba <lv_draw_mask_line+0x3e>
    k = xsi - abs_x;
 800eac0:	464a      	mov	r2, r9
        if(k >= 0 && k < len) {
 800eac2:	2a00      	cmp	r2, #0
 800eac4:	db0d      	blt.n	800eae2 <lv_draw_mask_line+0x366>
 800eac6:	4293      	cmp	r3, r2
 800eac8:	dd0b      	ble.n	800eae2 <lv_draw_mask_line+0x366>
    int32_t xef = xe & 0xFF;
 800eaca:	f3c4 2187 	ubfx	r1, r4, #10, #8
            m = (xsf + xef) >> 1;
 800eace:	4461      	add	r1, ip
 800ead0:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800ead4:	b108      	cbz	r0, 800eada <lv_draw_mask_line+0x35e>
 800ead6:	43c9      	mvns	r1, r1
 800ead8:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800eada:	5ca8      	ldrb	r0, [r5, r2]
 800eadc:	f7ff fe40 	bl	800e760 <mask_mix>
 800eae0:	54a8      	strb	r0, [r5, r2]
        if(p->inv) {
 800eae2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800eae6:	078f      	lsls	r7, r1, #30
 800eae8:	d58a      	bpl.n	800ea00 <lv_draw_mask_line+0x284>
            k = xsi - abs_x;
 800eaea:	eba8 0106 	sub.w	r1, r8, r6
            if(k >= len) {
 800eaee:	428b      	cmp	r3, r1
 800eaf0:	f77f ae80 	ble.w	800e7f4 <lv_draw_mask_line+0x78>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 800eaf4:	2900      	cmp	r1, #0
 800eaf6:	f6ff ae83 	blt.w	800e800 <lv_draw_mask_line+0x84>
 800eafa:	e70e      	b.n	800e91a <lv_draw_mask_line+0x19e>
        xsf = 0xFF;
 800eafc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800eb00:	e7df      	b.n	800eac2 <lv_draw_mask_line+0x346>

0800eb02 <_lv_memcpy_small.constprop.4>:
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 800eb02:	3901      	subs	r1, #1
 800eb04:	f100 0208 	add.w	r2, r0, #8
    uint8_t * d8 = (uint8_t *)dst;
 800eb08:	4603      	mov	r3, r0
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 800eb0a:	b510      	push	{r4, lr}
        *d8 = *s8;
 800eb0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb10:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d1f9      	bne.n	800eb0c <_lv_memcpy_small.constprop.4+0xa>
        s8++;
        len--;
    }

    return dst;
}
 800eb18:	bd10      	pop	{r4, pc}

0800eb1a <lv_draw_mask_radius>:
{
 800eb1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1e:	b08b      	sub	sp, #44	; 0x2c
 800eb20:	4605      	mov	r5, r0
 800eb22:	468b      	mov	fp, r1
 800eb24:	4616      	mov	r6, r2
 800eb26:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800eb2a:	a808      	add	r0, sp, #32
 800eb2c:	461c      	mov	r4, r3
    bool outer = p->cfg.outer;
 800eb2e:	f898 a012 	ldrb.w	sl, [r8, #18]
 800eb32:	f108 0108 	add.w	r1, r8, #8
    int32_t radius = p->cfg.radius;
 800eb36:	f9b8 9010 	ldrsh.w	r9, [r8, #16]
 800eb3a:	f7ff ffe2 	bl	800eb02 <_lv_memcpy_small.constprop.4>
    bool outer = p->cfg.outer;
 800eb3e:	f00a 0a01 	and.w	sl, sl, #1
 800eb42:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
    if(outer == false) {
 800eb46:	f1ba 0f00 	cmp.w	sl, #0
 800eb4a:	d13a      	bne.n	800ebc2 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800eb4c:	42b2      	cmp	r2, r6
 800eb4e:	dd01      	ble.n	800eb54 <lv_draw_mask_radius+0x3a>
                    return LV_DRAW_MASK_RES_TRANSP;
 800eb50:	2000      	movs	r0, #0
 800eb52:	e039      	b.n	800ebc8 <lv_draw_mask_radius+0xae>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800eb54:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800eb58:	42b3      	cmp	r3, r6
 800eb5a:	dbf9      	blt.n	800eb50 <lv_draw_mask_radius+0x36>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800eb5c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800eb60:	eb01 0309 	add.w	r3, r1, r9
 800eb64:	eba1 070b 	sub.w	r7, r1, fp
 800eb68:	459b      	cmp	fp, r3
 800eb6a:	db07      	blt.n	800eb7c <lv_draw_mask_radius+0x62>
 800eb6c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800eb70:	eb04 000b 	add.w	r0, r4, fp
 800eb74:	eba3 0309 	sub.w	r3, r3, r9
 800eb78:	4298      	cmp	r0, r3
 800eb7a:	dd09      	ble.n	800eb90 <lv_draw_mask_radius+0x76>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800eb7c:	eb02 0309 	add.w	r3, r2, r9
 800eb80:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800eb84:	429e      	cmp	r6, r3
 800eb86:	db3d      	blt.n	800ec04 <lv_draw_mask_radius+0xea>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800eb88:	eba0 0309 	sub.w	r3, r0, r9
 800eb8c:	429e      	cmp	r6, r3
 800eb8e:	dc39      	bgt.n	800ec04 <lv_draw_mask_radius+0xea>
        if(outer == false) {
 800eb90:	f1ba 0f00 	cmp.w	sl, #0
 800eb94:	d125      	bne.n	800ebe2 <lv_draw_mask_radius+0xc8>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800eb96:	42bc      	cmp	r4, r7
 800eb98:	dbda      	blt.n	800eb50 <lv_draw_mask_radius+0x36>
            if(last >= 0) {
 800eb9a:	2f00      	cmp	r7, #0
 800eb9c:	db03      	blt.n	800eba6 <lv_draw_mask_radius+0x8c>
                _lv_memset_00(&mask_buf[0], last);
 800eb9e:	4639      	mov	r1, r7
 800eba0:	4628      	mov	r0, r5
 800eba2:	f005 fa65 	bl	8014070 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800eba6:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800ebaa:	eba1 010b 	sub.w	r1, r1, fp
 800ebae:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	ddcd      	ble.n	800eb50 <lv_draw_mask_radius+0x36>
            else if(first < len) {
 800ebb4:	42a0      	cmp	r0, r4
 800ebb6:	da0f      	bge.n	800ebd8 <lv_draw_mask_radius+0xbe>
                _lv_memset_00(&mask_buf[first], len - first);
 800ebb8:	1a21      	subs	r1, r4, r0
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800ebba:	4428      	add	r0, r5
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800ebbc:	f005 fa58 	bl	8014070 <_lv_memset_00>
 800ebc0:	e00d      	b.n	800ebde <lv_draw_mask_radius+0xc4>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800ebc2:	42b2      	cmp	r2, r6
 800ebc4:	dd03      	ble.n	800ebce <lv_draw_mask_radius+0xb4>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ebc6:	2001      	movs	r0, #1
}
 800ebc8:	b00b      	add	sp, #44	; 0x2c
 800ebca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800ebce:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800ebd2:	42b3      	cmp	r3, r6
 800ebd4:	dac2      	bge.n	800eb5c <lv_draw_mask_radius+0x42>
 800ebd6:	e7f6      	b.n	800ebc6 <lv_draw_mask_radius+0xac>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ebd8:	b90f      	cbnz	r7, 800ebde <lv_draw_mask_radius+0xc4>
 800ebda:	42a0      	cmp	r0, r4
 800ebdc:	d0f3      	beq.n	800ebc6 <lv_draw_mask_radius+0xac>
    return LV_DRAW_MASK_RES_CHANGED;
 800ebde:	2002      	movs	r0, #2
 800ebe0:	e7f2      	b.n	800ebc8 <lv_draw_mask_radius+0xae>
 800ebe2:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
            if(first <= len) {
 800ebe6:	42a0      	cmp	r0, r4
 800ebe8:	dcf9      	bgt.n	800ebde <lv_draw_mask_radius+0xc4>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800ebea:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800ebee:	eba1 010b 	sub.w	r1, r1, fp
 800ebf2:	1a09      	subs	r1, r1, r0
 800ebf4:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800ebf6:	180b      	adds	r3, r1, r0
 800ebf8:	42a3      	cmp	r3, r4
 800ebfa:	dd00      	ble.n	800ebfe <lv_draw_mask_radius+0xe4>
 800ebfc:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800ebfe:	2900      	cmp	r1, #0
 800ec00:	dbed      	blt.n	800ebde <lv_draw_mask_radius+0xc4>
 800ec02:	e7da      	b.n	800ebba <lv_draw_mask_radius+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ec04:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ec08:	b292      	uxth	r2, r2
 800ec0a:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ec0c:	3301      	adds	r3, #1
    abs_y -= rect.y1;
 800ec0e:	1ab6      	subs	r6, r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ec10:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ec12:	1a5b      	subs	r3, r3, r1
 800ec14:	b236      	sxth	r6, r6
    int32_t h = lv_area_get_height(&rect);
 800ec16:	b200      	sxth	r0, r0
    int32_t w = lv_area_get_width(&rect);
 800ec18:	b21b      	sxth	r3, r3
    if(abs_y < radius || abs_y > h - radius - 1) {
 800ec1a:	45b1      	cmp	r9, r6
    int32_t w = lv_area_get_width(&rect);
 800ec1c:	9302      	str	r3, [sp, #8]
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800ec1e:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
 800ec22:	fb03 f303 	mul.w	r3, r3, r3
 800ec26:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
 800ec28:	f300 81a8 	bgt.w	800ef7c <lv_draw_mask_radius+0x462>
 800ec2c:	eba0 0309 	sub.w	r3, r0, r9
 800ec30:	429e      	cmp	r6, r3
 800ec32:	dbd4      	blt.n	800ebde <lv_draw_mask_radius+0xc4>
            y = radius - (h - abs_y) + 1;
 800ec34:	1b86      	subs	r6, r0, r6
        else sqrt_mask = 0x8000;
 800ec36:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            if((y - 1) == p->y_prev) {
 800ec3a:	f8d8 3014 	ldr.w	r3, [r8, #20]
            y = radius - (h - abs_y) + 1;
 800ec3e:	eba9 0006 	sub.w	r0, r9, r6
        else sqrt_mask = 0x8000;
 800ec42:	bfd4      	ite	le
 800ec44:	f44f 6b00 	movle.w	fp, #2048	; 0x800
 800ec48:	f44f 4b00 	movgt.w	fp, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800ec4c:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
 800ec4e:	f100 0601 	add.w	r6, r0, #1
            if((y - 1) == p->y_prev) {
 800ec52:	d073      	beq.n	800ed3c <lv_draw_mask_radius+0x222>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800ec54:	9b01      	ldr	r3, [sp, #4]
 800ec56:	465a      	mov	r2, fp
 800ec58:	a905      	add	r1, sp, #20
 800ec5a:	fb00 3010 	mls	r0, r0, r0, r3
 800ec5e:	f004 ff27 	bl	8013ab0 <_lv_sqrt>
 800ec62:	e073      	b.n	800ed4c <lv_draw_mask_radius+0x232>
                x0.f = p->y_prev_x.f;
 800ec64:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ec68:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
 800ec6c:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800ec70:	f8ad 3010 	strh.w	r3, [sp, #16]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800ec74:	1e73      	subs	r3, r6, #1
 800ec76:	9801      	ldr	r0, [sp, #4]
 800ec78:	465a      	mov	r2, fp
 800ec7a:	a905      	add	r1, sp, #20
 800ec7c:	fb03 0013 	mls	r0, r3, r3, r0
 800ec80:	9303      	str	r3, [sp, #12]
 800ec82:	f004 ff15 	bl	8013ab0 <_lv_sqrt>
            p->y_prev = y - 1;
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	f8c8 3014 	str.w	r3, [r8, #20]
            p->y_prev_x.f = x1.f;
 800ec8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ec90:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev_x.i = x1.i;
 800ec94:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800ec98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            p->y_prev_x.i = x0.i;
 800ec9c:	f8a8 3018 	strh.w	r3, [r8, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800eca0:	3a01      	subs	r2, #1
 800eca2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d107      	bne.n	800ecba <lv_draw_mask_radius+0x1a0>
 800ecaa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ecae:	b922      	cbnz	r2, 800ecba <lv_draw_mask_radius+0x1a0>
            x1.f = 0xFF;
 800ecb0:	22ff      	movs	r2, #255	; 0xff
            x1.i--;
 800ecb2:	f8ad 3014 	strh.w	r3, [sp, #20]
            x1.f = 0xFF;
 800ecb6:	f8ad 2016 	strh.w	r2, [sp, #22]
        if(x0.i == x1.i) {
 800ecba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d15f      	bne.n	800ed82 <lv_draw_mask_radius+0x268>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800ecc2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ecc6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ecca:	440a      	add	r2, r1
 800eccc:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800ecd0:	f1ba 0f00 	cmp.w	sl, #0
 800ecd4:	d001      	beq.n	800ecda <lv_draw_mask_radius+0x1c0>
 800ecd6:	43d2      	mvns	r2, r2
 800ecd8:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800ecda:	eba9 0903 	sub.w	r9, r9, r3
 800ecde:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
            if(kl >= 0 && kl < len) {
 800ece2:	eb17 0609 	adds.w	r6, r7, r9
 800ece6:	d406      	bmi.n	800ecf6 <lv_draw_mask_radius+0x1dc>
 800ece8:	42a6      	cmp	r6, r4
 800ecea:	da04      	bge.n	800ecf6 <lv_draw_mask_radius+0x1dc>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800ecec:	5da8      	ldrb	r0, [r5, r6]
 800ecee:	4611      	mov	r1, r2
 800ecf0:	f7ff fd36 	bl	800e760 <mask_mix>
 800ecf4:	55a8      	strb	r0, [r5, r6]
            int32_t kr = k + (w - ofs - 1);
 800ecf6:	9b02      	ldr	r3, [sp, #8]
 800ecf8:	eba3 0909 	sub.w	r9, r3, r9
 800ecfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
            if(kr >= 0 && kr < len) {
 800ed00:	19c7      	adds	r7, r0, r7
 800ed02:	d406      	bmi.n	800ed12 <lv_draw_mask_radius+0x1f8>
 800ed04:	42a7      	cmp	r7, r4
 800ed06:	da04      	bge.n	800ed12 <lv_draw_mask_radius+0x1f8>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800ed08:	5de8      	ldrb	r0, [r5, r7]
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	f7ff fd28 	bl	800e760 <mask_mix>
 800ed10:	55e8      	strb	r0, [r5, r7]
            if(outer == false) {
 800ed12:	f1ba 0f00 	cmp.w	sl, #0
 800ed16:	d129      	bne.n	800ed6c <lv_draw_mask_radius+0x252>
                if(kl > len)  {
 800ed18:	42a6      	cmp	r6, r4
 800ed1a:	f73f af19 	bgt.w	800eb50 <lv_draw_mask_radius+0x36>
                if(kl >= 0) {
 800ed1e:	2e00      	cmp	r6, #0
 800ed20:	db03      	blt.n	800ed2a <lv_draw_mask_radius+0x210>
                    _lv_memset_00(&mask_buf[0], kl);
 800ed22:	4631      	mov	r1, r6
 800ed24:	4628      	mov	r0, r5
 800ed26:	f005 f9a3 	bl	8014070 <_lv_memset_00>
                if(kr < 0) {
 800ed2a:	3701      	adds	r7, #1
 800ed2c:	f53f af10 	bmi.w	800eb50 <lv_draw_mask_radius+0x36>
                if(kr <= len) {
 800ed30:	42a7      	cmp	r7, r4
 800ed32:	f73f af54 	bgt.w	800ebde <lv_draw_mask_radius+0xc4>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800ed36:	1be1      	subs	r1, r4, r7
 800ed38:	19e8      	adds	r0, r5, r7
 800ed3a:	e73f      	b.n	800ebbc <lv_draw_mask_radius+0xa2>
                x1.f = p->y_prev_x.f;
 800ed3c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ed40:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
 800ed44:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800ed48:	f8ad 3014 	strh.w	r3, [sp, #20]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800ed4c:	9b01      	ldr	r3, [sp, #4]
 800ed4e:	465a      	mov	r2, fp
 800ed50:	a904      	add	r1, sp, #16
 800ed52:	fb06 3016 	mls	r0, r6, r6, r3
 800ed56:	f004 feab 	bl	8013ab0 <_lv_sqrt>
            p->y_prev_x.f = x0.f;
 800ed5a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
            p->y_prev = y;
 800ed5e:	f8c8 6014 	str.w	r6, [r8, #20]
            p->y_prev_x.f = x0.f;
 800ed62:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev_x.i = x0.i;
 800ed66:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800ed6a:	e795      	b.n	800ec98 <lv_draw_mask_radius+0x17e>
                kl++;
 800ed6c:	1c70      	adds	r0, r6, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800ed6e:	42a7      	cmp	r7, r4
 800ed70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800ed74:	bfd4      	ite	le
 800ed76:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800ed78:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800ed7a:	42a0      	cmp	r0, r4
 800ed7c:	f6ff af3f 	blt.w	800ebfe <lv_draw_mask_radius+0xe4>
 800ed80:	e72d      	b.n	800ebde <lv_draw_mask_radius+0xc4>
            int32_t ofs = radius - (x0.i + 1);
 800ed82:	3301      	adds	r3, #1
 800ed84:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kr = k + (w - ofs - 1);
 800ed88:	9b02      	ldr	r3, [sp, #8]
            int32_t kl = k + ofs;
 800ed8a:	eb07 0809 	add.w	r8, r7, r9
            int32_t kr = k + (w - ofs - 1);
 800ed8e:	eba3 0909 	sub.w	r9, r3, r9
 800ed92:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ed96:	444f      	add	r7, r9
            if(outer) {
 800ed98:	f1ba 0f00 	cmp.w	sl, #0
 800ed9c:	d00e      	beq.n	800edbc <lv_draw_mask_radius+0x2a2>
                int32_t first = kl + 1;
 800ed9e:	f108 0001 	add.w	r0, r8, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800eda2:	42bc      	cmp	r4, r7
 800eda4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800eda8:	bfac      	ite	ge
 800edaa:	1a39      	subge	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800edac:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800edae:	4284      	cmp	r4, r0
 800edb0:	dd04      	ble.n	800edbc <lv_draw_mask_radius+0x2a2>
 800edb2:	2900      	cmp	r1, #0
 800edb4:	db02      	blt.n	800edbc <lv_draw_mask_radius+0x2a2>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800edb6:	4428      	add	r0, r5
 800edb8:	f005 f95a 	bl	8014070 <_lv_memset_00>
            uint32_t i = x0.i + 1;
 800edbc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800edc0:	465a      	mov	r2, fp
 800edc2:	9b01      	ldr	r3, [sp, #4]
 800edc4:	a906      	add	r1, sp, #24
            uint32_t i = x0.i + 1;
 800edc6:	f100 0901 	add.w	r9, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800edca:	fb00 3010 	mls	r0, r0, r0, r3
 800edce:	f004 fe6f 	bl	8013ab0 <_lv_sqrt>
            if(y_prev.f == 0) {
 800edd2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800edd6:	b93b      	cbnz	r3, 800ede8 <lv_draw_mask_radius+0x2ce>
                y_prev.i--;
 800edd8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800eddc:	3b01      	subs	r3, #1
 800edde:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
 800ede2:	23ff      	movs	r3, #255	; 0xff
 800ede4:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
 800ede8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800edec:	42b3      	cmp	r3, r6
 800edee:	db32      	blt.n	800ee56 <lv_draw_mask_radius+0x33c>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800edf0:	9b01      	ldr	r3, [sp, #4]
 800edf2:	465a      	mov	r2, fp
 800edf4:	a907      	add	r1, sp, #28
 800edf6:	fb09 3019 	mls	r0, r9, r9, r3
 800edfa:	f004 fe59 	bl	8013ab0 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800edfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ee02:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ee06:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 800ee0a:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800ee0e:	434b      	muls	r3, r1
 800ee10:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800ee14:	f1ba 0f00 	cmp.w	sl, #0
 800ee18:	d101      	bne.n	800ee1e <lv_draw_mask_radius+0x304>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800ee1a:	43db      	mvns	r3, r3
 800ee1c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800ee1e:	f1b8 0f00 	cmp.w	r8, #0
 800ee22:	db08      	blt.n	800ee36 <lv_draw_mask_radius+0x31c>
 800ee24:	4544      	cmp	r4, r8
 800ee26:	dd06      	ble.n	800ee36 <lv_draw_mask_radius+0x31c>
 800ee28:	f815 0008 	ldrb.w	r0, [r5, r8]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	f7ff fc97 	bl	800e760 <mask_mix>
 800ee32:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800ee36:	2f00      	cmp	r7, #0
 800ee38:	db06      	blt.n	800ee48 <lv_draw_mask_radius+0x32e>
 800ee3a:	42bc      	cmp	r4, r7
 800ee3c:	dd04      	ble.n	800ee48 <lv_draw_mask_radius+0x32e>
 800ee3e:	5de8      	ldrb	r0, [r5, r7]
 800ee40:	4619      	mov	r1, r3
 800ee42:	f7ff fc8d 	bl	800e760 <mask_mix>
 800ee46:	55e8      	strb	r0, [r5, r7]
                kl--;
 800ee48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                kr++;
 800ee4c:	3701      	adds	r7, #1
                i++;
 800ee4e:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
 800ee52:	f8ad 201a 	strh.w	r2, [sp, #26]
            for(; i <= x1.i; i++) {
 800ee56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800ee5a:	f04f 0c00 	mov.w	ip, #0
 800ee5e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800ee62:	eba9 0b07 	sub.w	fp, r9, r7
            for(; i <= x1.i; i++) {
 800ee66:	9302      	str	r3, [sp, #8]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800ee68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ee6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ee70:	011b      	lsls	r3, r3, #4
 800ee72:	f8bd 601e 	ldrh.w	r6, [sp, #30]
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	e038      	b.n	800eeec <lv_draw_mask_radius+0x3d2>
 800ee7a:	9b03      	ldr	r3, [sp, #12]
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800ee7c:	9e01      	ldr	r6, [sp, #4]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800ee7e:	eb03 1211 	add.w	r2, r3, r1, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800ee82:	fb00 6010 	mls	r0, r0, r0, r6
    uint32_t raw2 = raw * raw;
 800ee86:	fb02 f602 	mul.w	r6, r2, r2

    int32_t d = x - raw2;
 800ee8a:	ebc6 2600 	rsb	r6, r6, r0, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800ee8e:	0050      	lsls	r0, r2, #1
 800ee90:	fb96 f6f0 	sdiv	r6, r6, r0
 800ee94:	4416      	add	r6, r2

    q->i = d >> 4;
 800ee96:	f3c6 120f 	ubfx	r2, r6, #4, #16
    q->f = (d & 0xF) << 4;
 800ee9a:	0136      	lsls	r6, r6, #4
 800ee9c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800eea0:	eb01 0906 	add.w	r9, r1, r6
 800eea4:	f3c9 0947 	ubfx	r9, r9, #1, #8
                if(outer) m = 255 - m;
 800eea8:	f1ba 0f00 	cmp.w	sl, #0
 800eeac:	d003      	beq.n	800eeb6 <lv_draw_mask_radius+0x39c>
 800eeae:	ea6f 0909 	mvn.w	r9, r9
 800eeb2:	fa5f f989 	uxtb.w	r9, r9
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800eeb6:	f1b8 0f00 	cmp.w	r8, #0
 800eeba:	db08      	blt.n	800eece <lv_draw_mask_radius+0x3b4>
 800eebc:	4544      	cmp	r4, r8
 800eebe:	dd06      	ble.n	800eece <lv_draw_mask_radius+0x3b4>
 800eec0:	f815 0008 	ldrb.w	r0, [r5, r8]
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7ff fc4b 	bl	800e760 <mask_mix>
 800eeca:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800eece:	2f00      	cmp	r7, #0
 800eed0:	db06      	blt.n	800eee0 <lv_draw_mask_radius+0x3c6>
 800eed2:	42bc      	cmp	r4, r7
 800eed4:	dd04      	ble.n	800eee0 <lv_draw_mask_radius+0x3c6>
 800eed6:	5de8      	ldrb	r0, [r5, r7]
 800eed8:	4649      	mov	r1, r9
 800eeda:	f7ff fc41 	bl	800e760 <mask_mix>
 800eede:	55e8      	strb	r0, [r5, r7]
                kl--;
 800eee0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                kr++;
 800eee4:	3701      	adds	r7, #1
 800eee6:	f04f 0c01 	mov.w	ip, #1
                y_prev.f = y_next.f;
 800eeea:	4631      	mov	r1, r6
 800eeec:	eb0b 0007 	add.w	r0, fp, r7
            for(; i <= x1.i; i++) {
 800eef0:	9b02      	ldr	r3, [sp, #8]
 800eef2:	4283      	cmp	r3, r0
 800eef4:	d2c1      	bcs.n	800ee7a <lv_draw_mask_radius+0x360>
 800eef6:	f1bc 0f00 	cmp.w	ip, #0
 800eefa:	d005      	beq.n	800ef08 <lv_draw_mask_radius+0x3ee>
 800eefc:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ef00:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ef04:	f8ad 601e 	strh.w	r6, [sp, #30]
            if(y_prev.f) {
 800ef08:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800ef0c:	b30b      	cbz	r3, 800ef52 <lv_draw_mask_radius+0x438>
                m = (y_prev.f * x1.f) >> 9;
 800ef0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ef12:	4353      	muls	r3, r2
 800ef14:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800ef18:	f1ba 0f00 	cmp.w	sl, #0
 800ef1c:	d001      	beq.n	800ef22 <lv_draw_mask_radius+0x408>
 800ef1e:	43db      	mvns	r3, r3
 800ef20:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800ef22:	f1b8 0f00 	cmp.w	r8, #0
 800ef26:	db08      	blt.n	800ef3a <lv_draw_mask_radius+0x420>
 800ef28:	4544      	cmp	r4, r8
 800ef2a:	dd06      	ble.n	800ef3a <lv_draw_mask_radius+0x420>
 800ef2c:	f815 0008 	ldrb.w	r0, [r5, r8]
 800ef30:	4619      	mov	r1, r3
 800ef32:	f7ff fc15 	bl	800e760 <mask_mix>
 800ef36:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	db06      	blt.n	800ef4c <lv_draw_mask_radius+0x432>
 800ef3e:	42bc      	cmp	r4, r7
 800ef40:	dd04      	ble.n	800ef4c <lv_draw_mask_radius+0x432>
 800ef42:	5de8      	ldrb	r0, [r5, r7]
 800ef44:	4619      	mov	r1, r3
 800ef46:	f7ff fc0b 	bl	800e760 <mask_mix>
 800ef4a:	55e8      	strb	r0, [r5, r7]
                kl--;
 800ef4c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                kr++;
 800ef50:	3701      	adds	r7, #1
            if(outer == 0) {
 800ef52:	f1ba 0f00 	cmp.w	sl, #0
 800ef56:	f47f ae42 	bne.w	800ebde <lv_draw_mask_radius+0xc4>
                kl++;
 800ef5a:	f108 0101 	add.w	r1, r8, #1
                if(kl > len) {
 800ef5e:	428c      	cmp	r4, r1
 800ef60:	f6ff adf6 	blt.w	800eb50 <lv_draw_mask_radius+0x36>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 800ef64:	2900      	cmp	r1, #0
 800ef66:	db02      	blt.n	800ef6e <lv_draw_mask_radius+0x454>
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f005 f881 	bl	8014070 <_lv_memset_00>
                if(kr < 0) {
 800ef6e:	2f00      	cmp	r7, #0
 800ef70:	f6ff adee 	blt.w	800eb50 <lv_draw_mask_radius+0x36>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800ef74:	42bc      	cmp	r4, r7
 800ef76:	f77f ae32 	ble.w	800ebde <lv_draw_mask_radius+0xc4>
 800ef7a:	e6dc      	b.n	800ed36 <lv_draw_mask_radius+0x21c>
        if(radius <= 256) sqrt_mask = 0x800;
 800ef7c:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800ef80:	eba9 0606 	sub.w	r6, r9, r6
            if(y == p->y_prev) {
 800ef84:	f8d8 3014 	ldr.w	r3, [r8, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800ef88:	bfcc      	ite	gt
 800ef8a:	f44f 4b00 	movgt.w	fp, #32768	; 0x8000
 800ef8e:	f44f 6b00 	movle.w	fp, #2048	; 0x800
            if(y == p->y_prev) {
 800ef92:	42b3      	cmp	r3, r6
 800ef94:	f43f ae66 	beq.w	800ec64 <lv_draw_mask_radius+0x14a>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800ef98:	9b01      	ldr	r3, [sp, #4]
 800ef9a:	465a      	mov	r2, fp
 800ef9c:	a904      	add	r1, sp, #16
 800ef9e:	fb06 3016 	mls	r0, r6, r6, r3
 800efa2:	f004 fd85 	bl	8013ab0 <_lv_sqrt>
 800efa6:	e665      	b.n	800ec74 <lv_draw_mask_radius+0x15a>

0800efa8 <lv_draw_mask_add>:
{
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800efac:	4c08      	ldr	r4, [pc, #32]	; (800efd0 <lv_draw_mask_add+0x28>)
 800efae:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800efb8:	b12e      	cbz	r6, 800efc6 <lv_draw_mask_add+0x1e>
 800efba:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800efbc:	2b10      	cmp	r3, #16
 800efbe:	d1f6      	bne.n	800efae <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800efc6:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    return i;
 800efca:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800efcc:	6069      	str	r1, [r5, #4]
    return i;
 800efce:	e7f9      	b.n	800efc4 <lv_draw_mask_add+0x1c>
 800efd0:	20028cd0 	.word	0x20028cd0

0800efd4 <lv_draw_mask_apply>:
{
 800efd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(m->param) {
 800efd8:	2400      	movs	r4, #0
{
 800efda:	4607      	mov	r7, r0
 800efdc:	4688      	mov	r8, r1
 800efde:	4691      	mov	r9, r2
 800efe0:	469a      	mov	sl, r3
    bool changed = false;
 800efe2:	4625      	mov	r5, r4
    while(m->param) {
 800efe4:	4e0d      	ldr	r6, [pc, #52]	; (800f01c <lv_draw_mask_apply+0x48>)
 800efe6:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800efea:	b933      	cbnz	r3, 800effa <lv_draw_mask_apply+0x26>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800efec:	2d00      	cmp	r5, #0
 800efee:	bf14      	ite	ne
 800eff0:	2002      	movne	r0, #2
 800eff2:	2001      	moveq	r0, #1
}
 800eff4:	b003      	add	sp, #12
 800eff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800effa:	9300      	str	r3, [sp, #0]
 800effc:	464a      	mov	r2, r9
 800effe:	f8d3 b000 	ldr.w	fp, [r3]
 800f002:	4641      	mov	r1, r8
 800f004:	4653      	mov	r3, sl
 800f006:	4638      	mov	r0, r7
 800f008:	47d8      	blx	fp
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d0f2      	beq.n	800eff4 <lv_draw_mask_apply+0x20>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800f00e:	2802      	cmp	r0, #2
 800f010:	f104 0401 	add.w	r4, r4, #1
 800f014:	bf08      	it	eq
 800f016:	2501      	moveq	r5, #1
 800f018:	e7e5      	b.n	800efe6 <lv_draw_mask_apply+0x12>
 800f01a:	bf00      	nop
 800f01c:	20028cd0 	.word	0x20028cd0

0800f020 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800f020:	1c43      	adds	r3, r0, #1
 800f022:	f04f 0200 	mov.w	r2, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800f026:	bf17      	itett	ne
 800f028:	4b06      	ldrne	r3, [pc, #24]	; (800f044 <lv_draw_mask_remove_id+0x24>)
    void * p = NULL;
 800f02a:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800f02c:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800f030:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800f034:	bf18      	it	ne
 800f036:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
}
 800f03a:	4608      	mov	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800f03c:	bf18      	it	ne
 800f03e:	605a      	strne	r2, [r3, #4]
}
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	20028cd0 	.word	0x20028cd0

0800f048 <lv_draw_mask_remove_custom>:
{
 800f048:	2300      	movs	r3, #0
 800f04a:	4a09      	ldr	r2, [pc, #36]	; (800f070 <lv_draw_mask_remove_custom+0x28>)
 800f04c:	b570      	push	{r4, r5, r6, lr}
    void * p = NULL;
 800f04e:	4619      	mov	r1, r3
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800f050:	461c      	mov	r4, r3
 800f052:	189d      	adds	r5, r3, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800f054:	686e      	ldr	r6, [r5, #4]
 800f056:	4286      	cmp	r6, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800f058:	bf04      	itt	eq
 800f05a:	5899      	ldreq	r1, [r3, r2]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800f05c:	509c      	streq	r4, [r3, r2]
 800f05e:	f103 0308 	add.w	r3, r3, #8
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 800f062:	bf08      	it	eq
 800f064:	606c      	streq	r4, [r5, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800f066:	2b80      	cmp	r3, #128	; 0x80
 800f068:	d1f3      	bne.n	800f052 <lv_draw_mask_remove_custom+0xa>
}
 800f06a:	4608      	mov	r0, r1
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	bf00      	nop
 800f070:	20028cd0 	.word	0x20028cd0

0800f074 <lv_draw_mask_get_cnt>:
{
 800f074:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800f076:	4a05      	ldr	r2, [pc, #20]	; (800f08c <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
 800f078:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800f07a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f07e:	b109      	cbz	r1, 800f084 <lv_draw_mask_get_cnt+0x10>
 800f080:	3001      	adds	r0, #1
 800f082:	b2c0      	uxtb	r0, r0
 800f084:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800f086:	2b10      	cmp	r3, #16
 800f088:	d1f7      	bne.n	800f07a <lv_draw_mask_get_cnt+0x6>
}
 800f08a:	4770      	bx	lr
 800f08c:	20028cd0 	.word	0x20028cd0

0800f090 <lv_draw_mask_line_points_init>:
{
 800f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f094:	4616      	mov	r6, r2
 800f096:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800f09a:	4688      	mov	r8, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800f09c:	212c      	movs	r1, #44	; 0x2c
{
 800f09e:	4604      	mov	r4, r0
 800f0a0:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800f0a2:	f004 ffe5 	bl	8014070 <_lv_memset_00>
    if(p1y > p2y) {
 800f0a6:	42ae      	cmp	r6, r5
 800f0a8:	dc05      	bgt.n	800f0b6 <lv_draw_mask_line_points_init+0x26>
 800f0aa:	462b      	mov	r3, r5
 800f0ac:	4635      	mov	r5, r6
 800f0ae:	461e      	mov	r6, r3
 800f0b0:	463b      	mov	r3, r7
 800f0b2:	4647      	mov	r7, r8
 800f0b4:	4698      	mov	r8, r3
    param->cfg.side = side;
 800f0b6:	7c23      	ldrb	r3, [r4, #16]
 800f0b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
 800f0bc:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800f0be:	f362 0301 	bfi	r3, r2, #0, #2
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0c2:	1b72      	subs	r2, r6, r5
    param->origo.y = p1y;
 800f0c4:	82a5      	strh	r5, [r4, #20]
    param->cfg.side = side;
 800f0c6:	7423      	strb	r3, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0c8:	eba8 0307 	sub.w	r3, r8, r7
 800f0cc:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800f0d0:	4d30      	ldr	r5, [pc, #192]	; (800f194 <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0d2:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
    param->cfg.p1.x = p1x;
 800f0d6:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0d8:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
    param->cfg.p2.x = p2x;
 800f0dc:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0e0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    param->cfg.p2.y = p2y;
 800f0e4:	81e6      	strh	r6, [r4, #14]
    param->origo.x = p1x;
 800f0e6:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0e8:	4288      	cmp	r0, r1
 800f0ea:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800f0ee:	6025      	str	r5, [r4, #0]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0f0:	bfd4      	ite	le
 800f0f2:	2000      	movle	r0, #0
 800f0f4:	2001      	movgt	r0, #1
 800f0f6:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
 800f0fa:	2000      	movs	r0, #0
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800f0fc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if(param->flat) {
 800f100:	07c9      	lsls	r1, r1, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800f102:	7120      	strb	r0, [r4, #4]
    param->xy_steep = 0;
 800f104:	e9c4 0006 	strd	r0, r0, [r4, #24]
    if(param->flat) {
 800f108:	d524      	bpl.n	800f154 <lv_draw_mask_line_points_init+0xc4>
        if(dx) {
 800f10a:	b133      	cbz	r3, 800f11a <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800f10c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800f110:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800f114:	4351      	muls	r1, r2
 800f116:	1289      	asrs	r1, r1, #10
 800f118:	61e1      	str	r1, [r4, #28]
        if(dy) {
 800f11a:	b132      	cbz	r2, 800f12a <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f11c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800f120:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
 800f124:	4353      	muls	r3, r2
 800f126:	129b      	asrs	r3, r3, #10
 800f128:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800f12a:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800f12c:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800f12e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800f130:	f012 0203 	ands.w	r2, r2, #3
 800f134:	6a21      	ldr	r1, [r4, #32]
 800f136:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f13a:	d11d      	bne.n	800f178 <lv_draw_mask_line_points_init+0xe8>
 800f13c:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800f140:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 800f144:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
 800f146:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800f14a:	bfb8      	it	lt
 800f14c:	425b      	neglt	r3, r3
 800f14e:	6263      	str	r3, [r4, #36]	; 0x24
}
 800f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
 800f154:	b132      	cbz	r2, 800f164 <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f156:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800f15a:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
 800f15e:	4359      	muls	r1, r3
 800f160:	1289      	asrs	r1, r1, #10
 800f162:	61a1      	str	r1, [r4, #24]
        if(dx) {
 800f164:	b133      	cbz	r3, 800f174 <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f166:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800f16a:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800f16e:	435a      	muls	r2, r3
 800f170:	1292      	asrs	r2, r2, #10
 800f172:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
 800f174:	69a3      	ldr	r3, [r4, #24]
 800f176:	e7d9      	b.n	800f12c <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800f178:	2a01      	cmp	r2, #1
 800f17a:	d102      	bne.n	800f182 <lv_draw_mask_line_points_init+0xf2>
 800f17c:	f043 0302 	orr.w	r3, r3, #2
 800f180:	e7de      	b.n	800f140 <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800f182:	2a02      	cmp	r2, #2
 800f184:	d102      	bne.n	800f18c <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
 800f186:	2900      	cmp	r1, #0
 800f188:	dcf8      	bgt.n	800f17c <lv_draw_mask_line_points_init+0xec>
 800f18a:	e7d7      	b.n	800f13c <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
 800f18c:	2900      	cmp	r1, #0
 800f18e:	dcd5      	bgt.n	800f13c <lv_draw_mask_line_points_init+0xac>
 800f190:	e7f4      	b.n	800f17c <lv_draw_mask_line_points_init+0xec>
 800f192:	bf00      	nop
 800f194:	0800e77d 	.word	0x0800e77d

0800f198 <lv_draw_mask_radius_init>:
{
 800f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19a:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f19c:	88c8      	ldrh	r0, [r1, #6]
 800f19e:	461f      	mov	r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f1a0:	888d      	ldrh	r5, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f1a2:	884b      	ldrh	r3, [r1, #2]
 800f1a4:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f1a6:	3501      	adds	r5, #1
 800f1a8:	4616      	mov	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f1aa:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f1ac:	880b      	ldrh	r3, [r1, #0]
 800f1ae:	1aed      	subs	r5, r5, r3
    int32_t short_side = LV_MATH_MIN(w, h);
 800f1b0:	b200      	sxth	r0, r0
 800f1b2:	b22d      	sxth	r5, r5
 800f1b4:	42a8      	cmp	r0, r5
 800f1b6:	bfa8      	it	ge
 800f1b8:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
 800f1ba:	1040      	asrs	r0, r0, #1
 800f1bc:	4282      	cmp	r2, r0
 800f1be:	bfc8      	it	gt
 800f1c0:	b206      	sxthgt	r6, r0
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800f1c2:	f104 0008 	add.w	r0, r4, #8
 800f1c6:	f7ff fc9c 	bl	800eb02 <_lv_memcpy_small.constprop.4>
    param->cfg.outer = inv ? 1 : 0;
 800f1ca:	7ca3      	ldrb	r3, [r4, #18]
    param->y_prev = INT32_MIN;
 800f1cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->cfg.radius = radius;
 800f1d0:	8226      	strh	r6, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
 800f1d2:	f367 0300 	bfi	r3, r7, #0, #1
 800f1d6:	74a3      	strb	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800f1d8:	4b03      	ldr	r3, [pc, #12]	; (800f1e8 <lv_draw_mask_radius_init+0x50>)
 800f1da:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800f1dc:	2302      	movs	r3, #2
 800f1de:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
 800f1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e8:	0800eb1b 	.word	0x0800eb1b

0800f1ec <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800f1ec:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800f1ee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 800f1f2:	fb05 f401 	mul.w	r4, r5, r1
 800f1f6:	1224      	asrs	r4, r4, #8
    if(i <= min) return dsc->bg_color;
 800f1f8:	42a2      	cmp	r2, r4
 800f1fa:	dc01      	bgt.n	800f200 <grad_get+0x14>
 800f1fc:	8840      	ldrh	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800f200:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f204:	fb01 f603 	mul.w	r6, r1, r3
    if(i >= max) return dsc->bg_grad_color;
 800f208:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800f20c:	db01      	blt.n	800f212 <grad_get+0x26>
 800f20e:	8880      	ldrh	r0, [r0, #4]
 800f210:	e7f5      	b.n	800f1fe <grad_get+0x12>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800f212:	1b5b      	subs	r3, r3, r5
    i -= min;
 800f214:	1b12      	subs	r2, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f216:	8846      	ldrh	r6, [r0, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f218:	f248 0581 	movw	r5, #32897	; 0x8081
    d = (s * d) >> 8;
 800f21c:	434b      	muls	r3, r1
    lv_opa_t mix = (i * 255) / d;
 800f21e:	b212      	sxth	r2, r2
 800f220:	78c1      	ldrb	r1, [r0, #3]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f222:	f3c6 1645 	ubfx	r6, r6, #5, #6
 800f226:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800f22a:	121b      	asrs	r3, r3, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f22c:	08c9      	lsrs	r1, r1, #3
    lv_opa_t mix = (i * 255) / d;
 800f22e:	fb92 f3f3 	sdiv	r3, r2, r3
 800f232:	b2db      	uxtb	r3, r3
 800f234:	7942      	ldrb	r2, [r0, #5]
 800f236:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
 800f23a:	08d2      	lsrs	r2, r2, #3
 800f23c:	4361      	muls	r1, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f23e:	4366      	muls	r6, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f240:	fb03 1202 	mla	r2, r3, r2, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f244:	8881      	ldrh	r1, [r0, #4]
 800f246:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f24a:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f24c:	fb03 6101 	mla	r1, r3, r1, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800f250:	7906      	ldrb	r6, [r0, #4]
 800f252:	7880      	ldrb	r0, [r0, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f254:	436a      	muls	r2, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800f256:	f006 061f 	and.w	r6, r6, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f25a:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800f25c:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800f260:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f264:	4369      	muls	r1, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800f266:	4344      	muls	r4, r0
 800f268:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800f26c:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800f270:	fb03 4306 	mla	r3, r3, r6, r4
 800f274:	3380      	adds	r3, #128	; 0x80
 800f276:	435d      	muls	r5, r3
 800f278:	0ded      	lsrs	r5, r5, #23
 800f27a:	f365 0004 	bfi	r0, r5, #0, #5
 800f27e:	f361 104a 	bfi	r0, r1, #5, #6
 800f282:	f362 20cf 	bfi	r0, r2, #11, #5
 800f286:	e7ba      	b.n	800f1fe <grad_get+0x12>

0800f288 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800f28c:	0045      	lsls	r5, r0, #1
    if((sw & 1) == 0) s_left--;
 800f28e:	f011 0f01 	tst.w	r1, #1
    int32_t s_left = sw >> 1;
 800f292:	ea4f 0861 	mov.w	r8, r1, asr #1
{
 800f296:	b087      	sub	sp, #28
 800f298:	4604      	mov	r4, r0
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800f29a:	4628      	mov	r0, r5
    int32_t s_left = sw >> 1;
 800f29c:	4646      	mov	r6, r8
{
 800f29e:	4692      	mov	sl, r2
    if((sw & 1) == 0) s_left--;
 800f2a0:	bf08      	it	eq
 800f2a2:	f108 36ff 	addeq.w	r6, r8, #4294967295	; 0xffffffff
{
 800f2a6:	4689      	mov	r9, r1
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800f2a8:	f004 fe44 	bl	8013f34 <_lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800f2ac:	1eab      	subs	r3, r5, #2
 800f2ae:	f06f 0701 	mvn.w	r7, #1
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800f2b2:	4683      	mov	fp, r0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	0073      	lsls	r3, r6, #1
 800f2b8:	fb07 a706 	mla	r7, r7, r6, sl
 800f2bc:	9302      	str	r3, [sp, #8]
 800f2be:	eb08 0306 	add.w	r3, r8, r6
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	9304      	str	r3, [sp, #16]
    for(y = 0; y < size; y++) {
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9a02      	ldr	r2, [sp, #8]
 800f2ca:	429c      	cmp	r4, r3
 800f2cc:	443a      	add	r2, r7
 800f2ce:	9203      	str	r2, [sp, #12]
 800f2d0:	dc24      	bgt.n	800f31c <shadow_blur_corner+0x94>
        sh_ups_tmp_buf += size;
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800f2d2:	f8ba 3000 	ldrh.w	r3, [sl]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800f2d6:	fb04 f004 	mul.w	r0, r4, r4
 800f2da:	2101      	movs	r1, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800f2dc:	fb93 f3f9 	sdiv	r3, r3, r9
 800f2e0:	f8aa 3000 	strh.w	r3, [sl]
 800f2e4:	4653      	mov	r3, sl
    for(i = 1; i < (uint32_t)size * size; i++) {
 800f2e6:	4288      	cmp	r0, r1
 800f2e8:	d845      	bhi.n	800f376 <shadow_blur_corner+0xee>
 800f2ea:	1c73      	adds	r3, r6, #1
 800f2ec:	f1aa 0202 	sub.w	r2, sl, #2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
    }

    for(x = 0; x < size; x++) {
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	436b      	muls	r3, r5
 800f2f6:	9303      	str	r3, [sp, #12]
 800f2f8:	ea6f 0308 	mvn.w	r3, r8
 800f2fc:	1b9e      	subs	r6, r3, r6
 800f2fe:	fb04 f306 	mul.w	r3, r4, r6
 800f302:	9302      	str	r3, [sp, #8]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800f304:	1e63      	subs	r3, r4, #1
 800f306:	fb05 a303 	mla	r3, r5, r3, sl
 800f30a:	9304      	str	r3, [sp, #16]
    for(x = 0; x < size; x++) {
 800f30c:	4284      	cmp	r4, r0
 800f30e:	dc3d      	bgt.n	800f38c <shadow_blur_corner+0x104>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
 800f310:	4658      	mov	r0, fp
}
 800f312:	b007      	add	sp, #28
 800f314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_mem_buf_release(sh_ups_blur_buf);
 800f318:	f004 bca2 	b.w	8013c60 <_lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800f31c:	9a01      	ldr	r2, [sp, #4]
 800f31e:	9804      	ldr	r0, [sp, #16]
 800f320:	443a      	add	r2, r7
 800f322:	eb07 0c00 	add.w	ip, r7, r0
 800f326:	f832 1016 	ldrh.w	r1, [r2, r6, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800f32a:	1e62      	subs	r2, r4, #1
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800f32c:	fb09 f101 	mul.w	r1, r9, r1
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800f330:	eb02 0e08 	add.w	lr, r2, r8
            sh_ups_blur_buf[x] = v;
 800f334:	f82b 1012 	strh.w	r1, [fp, r2, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800f338:	4574      	cmp	r4, lr
 800f33a:	bfcc      	ite	gt
 800f33c:	f83c e012 	ldrhgt.w	lr, [ip, r2, lsl #1]
            uint32_t right_val = 0;
 800f340:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 800f344:	eba1 0e0e 	sub.w	lr, r1, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800f348:	1b91      	subs	r1, r2, r6
 800f34a:	2900      	cmp	r1, #0
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800f34c:	bfca      	itet	gt
 800f34e:	eb07 0142 	addgt.w	r1, r7, r2, lsl #1
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800f352:	f837 1016 	ldrhle.w	r1, [r7, r6, lsl #1]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800f356:	f831 1c02 	ldrhgt.w	r1, [r1, #-2]
        for(x = size - 1; x >= 0; x--) {
 800f35a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
            v += left_val;
 800f35e:	4471      	add	r1, lr
        for(x = size - 1; x >= 0; x--) {
 800f360:	d2e6      	bcs.n	800f330 <shadow_blur_corner+0xa8>
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800f362:	462a      	mov	r2, r5
 800f364:	4659      	mov	r1, fp
 800f366:	9803      	ldr	r0, [sp, #12]
 800f368:	442f      	add	r7, r5
 800f36a:	9305      	str	r3, [sp, #20]
 800f36c:	f004 fcc4 	bl	8013cf8 <_lv_memcpy>
    for(y = 0; y < size; y++) {
 800f370:	9b05      	ldr	r3, [sp, #20]
 800f372:	3301      	adds	r3, #1
 800f374:	e7a8      	b.n	800f2c8 <shadow_blur_corner+0x40>
 800f376:	461f      	mov	r7, r3
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800f378:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    for(i = 1; i < (uint32_t)size * size; i++) {
 800f37c:	3101      	adds	r1, #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800f37e:	883f      	ldrh	r7, [r7, #0]
 800f380:	4297      	cmp	r7, r2
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800f382:	bf1c      	itt	ne
 800f384:	fb92 f2f9 	sdivne	r2, r2, r9
 800f388:	801a      	strhne	r2, [r3, #0]
 800f38a:	e7ac      	b.n	800f2e6 <shadow_blur_corner+0x5e>
 800f38c:	3202      	adds	r2, #2
 800f38e:	9903      	ldr	r1, [sp, #12]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800f390:	8813      	ldrh	r3, [r2, #0]
 800f392:	1856      	adds	r6, r2, r1
 800f394:	4694      	mov	ip, r2
 800f396:	fb09 f303 	mul.w	r3, r9, r3
 800f39a:	4696      	mov	lr, r2
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800f39c:	2100      	movs	r1, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bfac      	ite	ge
 800f3a2:	f3c3 1a8f 	ubfxge	sl, r3, #6, #16
 800f3a6:	f04f 0a00 	movlt.w	sl, #0
 800f3aa:	f82b a011 	strh.w	sl, [fp, r1, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800f3ae:	eba1 0a08 	sub.w	sl, r1, r8
 800f3b2:	f1ba 0f00 	cmp.w	sl, #0
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800f3b6:	bfcc      	ite	gt
 800f3b8:	9f02      	ldrgt	r7, [sp, #8]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800f3ba:	f8be a000 	ldrhle.w	sl, [lr]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800f3be:	44ae      	add	lr, r5
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800f3c0:	bfc8      	it	gt
 800f3c2:	f836 a017 	ldrhgt.w	sl, [r6, r7, lsl #1]
            v -= top_val;
 800f3c6:	eba3 0a0a 	sub.w	sl, r3, sl
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800f3ca:	9b01      	ldr	r3, [sp, #4]
 800f3cc:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800f3ce:	3101      	adds	r1, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800f3d0:	429c      	cmp	r4, r3
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800f3d2:	bfd4      	ite	le
 800f3d4:	9b04      	ldrle	r3, [sp, #16]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800f3d6:	8833      	ldrhgt	r3, [r6, #0]
 800f3d8:	442e      	add	r6, r5
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800f3da:	bfd8      	it	le
 800f3dc:	f833 3010 	ldrhle.w	r3, [r3, r0, lsl #1]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800f3e0:	428c      	cmp	r4, r1
            v += bottom_val;
 800f3e2:	4453      	add	r3, sl
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800f3e4:	dcdb      	bgt.n	800f39e <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800f3e6:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800f3e8:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	429c      	cmp	r4, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800f3f0:	f8ac 1000 	strh.w	r1, [ip]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800f3f4:	44ac      	add	ip, r5
 800f3f6:	dcf7      	bgt.n	800f3e8 <shadow_blur_corner+0x160>
    for(x = 0; x < size; x++) {
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	e787      	b.n	800f30c <shadow_blur_corner+0x84>

0800f3fc <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f400:	b0a3      	sub	sp, #140	; 0x8c
 800f402:	469a      	mov	sl, r3
 800f404:	460c      	mov	r4, r1
 800f406:	4606      	mov	r6, r0
 800f408:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 800f40c:	4690      	mov	r8, r2
 800f40e:	f89d 50b0 	ldrb.w	r5, [sp, #176]	; 0xb0
 800f412:	9305      	str	r3, [sp, #20]
 800f414:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 800f418:	9306      	str	r3, [sp, #24]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800f41a:	f7ff fe2b 	bl	800f074 <lv_draw_mask_get_cnt>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f41e:	88b1      	ldrh	r1, [r6, #4]
 800f420:	4681      	mov	r9, r0
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800f422:	88a0      	ldrh	r0, [r4, #4]
    int32_t inner_w = lv_area_get_width(area_inner);
 800f424:	f9b6 b000 	ldrsh.w	fp, [r6]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800f428:	1a43      	subs	r3, r0, r1
    int32_t inner_h = lv_area_get_height(area_inner);
 800f42a:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 800f42e:	f9b6 c006 	ldrsh.w	ip, [r6, #6]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800f432:	b29b      	uxth	r3, r3

    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800f434:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f438:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800f43c:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800f43e:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f442:	9308      	str	r3, [sp, #32]
 800f444:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800f448:	9307      	str	r3, [sp, #28]

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800f44a:	2d00      	cmp	r5, #0
 800f44c:	f000 80e5 	beq.w	800f61a <draw_full_border+0x21e>
 800f450:	3101      	adds	r1, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f452:	f10c 0c01 	add.w	ip, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f456:	eba1 0b0b 	sub.w	fp, r1, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f45a:	ebac 0e0e 	sub.w	lr, ip, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800f45e:	fa0f fb8b 	sxth.w	fp, fp
    int32_t inner_h = lv_area_get_height(area_inner);
 800f462:	fa0f fe8e 	sxth.w	lr, lr
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 800f466:	45f3      	cmp	fp, lr
 800f468:	bfa8      	it	ge
 800f46a:	46f3      	movge	fp, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800f46c:	ea4f 056b 	mov.w	r5, fp, asr #1
 800f470:	45aa      	cmp	sl, r5
 800f472:	bfa8      	it	ge
 800f474:	46aa      	movge	sl, r5

        /*Get the outer area*/
        rout = rin + border_width;
 800f476:	eb0a 0503 	add.w	r5, sl, r3
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800f47a:	f7fb fcf7 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f47e:	f003 fb2d 	bl	8012adc <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800f482:	4642      	mov	r2, r8
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f484:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800f486:	4621      	mov	r1, r4
 800f488:	a80e      	add	r0, sp, #56	; 0x38
 800f48a:	f003 fe32 	bl	80130f2 <_lv_area_intersect>
    if(is_common == false) return;
 800f48e:	2800      	cmp	r0, #0
 800f490:	f000 80c0 	beq.w	800f614 <draw_full_border+0x218>

    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800f494:	f8b7 c010 	ldrh.w	ip, [r7, #16]
 800f498:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800f49c:	8a78      	ldrh	r0, [r7, #18]
    draw_area.x1 -= disp_area->x1;
 800f49e:	eba3 030c 	sub.w	r3, r3, ip
    draw_area.y1 -= disp_area->y1;
 800f4a2:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    draw_area.x1 -= disp_area->x1;
 800f4a6:	b29a      	uxth	r2, r3
    draw_area.x2 -= disp_area->x1;
 800f4a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    draw_area.y1 -= disp_area->y1;
 800f4ac:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 800f4ae:	eba3 030c 	sub.w	r3, r3, ip
    draw_area.x1 -= disp_area->x1;
 800f4b2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800f4b6:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800f4ba:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 800f4bc:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    draw_area.x2 -= disp_area->x1;
 800f4c0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f4c4:	3301      	adds	r3, #1
    draw_area.y2 -= disp_area->y1;
 800f4c6:	1a09      	subs	r1, r1, r0

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800f4c8:	a814      	add	r0, sp, #80	; 0x50
 800f4ca:	1a9b      	subs	r3, r3, r2
 800f4cc:	fa0f f28a 	sxth.w	r2, sl
    draw_area.y2 -= disp_area->y1;
 800f4d0:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	fa0f fb83 	sxth.w	fp, r3
 800f4da:	2301      	movs	r3, #1
 800f4dc:	f7ff fe5c 	bl	800f198 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	a814      	add	r0, sp, #80	; 0x50
 800f4e4:	f7ff fd60 	bl	800efa8 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	b22a      	sxth	r2, r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800f4ec:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	a81b      	add	r0, sp, #108	; 0x6c
 800f4f2:	f7ff fe51 	bl	800f198 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	a81b      	add	r0, sp, #108	; 0x6c
 800f4fa:	f7ff fd55 	bl	800efa8 <lv_draw_mask_add>
 800f4fe:	900d      	str	r0, [sp, #52]	; 0x34

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800f500:	4658      	mov	r0, fp
 800f502:	f004 fd17 	bl	8013f34 <_lv_mem_buf_get>

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800f506:	9b07      	ldr	r3, [sp, #28]
 800f508:	f9b7 c012 	ldrsh.w	ip, [r7, #18]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800f50c:	4606      	mov	r6, r0
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800f50e:	429d      	cmp	r5, r3
 800f510:	f9bd a03a 	ldrsh.w	sl, [sp, #58]	; 0x3a
 800f514:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f518:	bfb4      	ite	lt
 800f51a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800f51e:	9508      	strge	r5, [sp, #32]
 800f520:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800f524:	bfb8      	it	lt
 800f526:	9308      	strlt	r3, [sp, #32]
 800f528:	eb0c 030a 	add.w	r3, ip, sl
 800f52c:	b21b      	sxth	r3, r3
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800f52e:	f1b9 0f00 	cmp.w	r9, #0
 800f532:	f040 8178 	bne.w	800f826 <draw_full_border+0x42a>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800f536:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f53a:	fa1f f985 	uxth.w	r9, r5
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800f53e:	9908      	ldr	r1, [sp, #32]
 800f540:	eba2 020c 	sub.w	r2, r2, ip
        fill_area.x1 = area_outer->x1;
 800f544:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800f548:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800f54c:	440a      	add	r2, r1
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f54e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800f552:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800f556:	920a      	str	r2, [sp, #40]	; 0x28
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800f558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f55a:	459a      	cmp	sl, r3
 800f55c:	dd71      	ble.n	800f642 <draw_full_border+0x246>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800f55e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
            _lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f562:	fa1f fa85 	uxth.w	sl, r5
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800f566:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 800f56a:	9a08      	ldr	r2, [sp, #32]
 800f56c:	eba9 0903 	sub.w	r9, r9, r3
 800f570:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800f574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f576:	454a      	cmp	r2, r9
 800f578:	bfa8      	it	ge
 800f57a:	f102 0901 	addge.w	r9, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800f57e:	444b      	add	r3, r9
 800f580:	b21b      	sxth	r3, r3
 800f582:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800f586:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f58a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800f58e:	454b      	cmp	r3, r9
 800f590:	f280 80d0 	bge.w	800f734 <draw_full_border+0x338>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f594:	8862      	ldrh	r2, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f596:	2501      	movs	r5, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f598:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f59c:	a910      	add	r1, sp, #64	; 0x40
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f59e:	3201      	adds	r2, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5a0:	4640      	mov	r0, r8
 800f5a2:	9500      	str	r5, [sp, #0]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f5a4:	441a      	add	r2, r3
 800f5a6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800f5aa:	88e2      	ldrh	r2, [r4, #6]
 800f5ac:	3a01      	subs	r2, #1
 800f5ae:	1ad3      	subs	r3, r2, r3
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f5b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800f5b2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        fill_area.x1 = area_outer->x1;
 800f5b6:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f5ba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	4413      	add	r3, r2
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5c2:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f5c6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5ca:	9b06      	ldr	r3, [sp, #24]
 800f5cc:	9302      	str	r3, [sp, #8]
 800f5ce:	9b05      	ldr	r3, [sp, #20]
 800f5d0:	9301      	str	r3, [sp, #4]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f7fc fc22 	bl	800be1c <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f5d8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5de:	4640      	mov	r0, r8
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f5e0:	1953      	adds	r3, r2, r5
        fill_area.x2 = area_outer->x2;
 800f5e2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5e6:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f5ea:	1a5b      	subs	r3, r3, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5ec:	a910      	add	r1, sp, #64	; 0x40
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f5ee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f5f2:	9b06      	ldr	r3, [sp, #24]
 800f5f4:	9302      	str	r3, [sp, #8]
 800f5f6:	9b05      	ldr	r3, [sp, #20]
 800f5f8:	e9cd 5300 	strd	r5, r3, [sp]
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f7fc fc0d 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800f602:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f604:	f7ff fd0c 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800f608:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f60a:	f7ff fd09 	bl	800f020 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800f60e:	4630      	mov	r0, r6
 800f610:	f004 fb26 	bl	8013c60 <_lv_mem_buf_release>
}
 800f614:	b023      	add	sp, #140	; 0x8c
 800f616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61a:	3001      	adds	r0, #1
 800f61c:	9b08      	ldr	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f61e:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f620:	1ac3      	subs	r3, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f622:	1aba      	subs	r2, r7, r2
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800f624:	b21d      	sxth	r5, r3
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800f626:	b213      	sxth	r3, r2
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 800f628:	429d      	cmp	r5, r3
 800f62a:	bfa8      	it	ge
 800f62c:	461d      	movge	r5, r3
        rin = rout - border_width;
 800f62e:	9b07      	ldr	r3, [sp, #28]
        if(rout > short_side >> 1) rout = short_side >> 1;
 800f630:	106d      	asrs	r5, r5, #1
 800f632:	4555      	cmp	r5, sl
 800f634:	bfa8      	it	ge
 800f636:	4655      	movge	r5, sl
        rin = rout - border_width;
 800f638:	eba5 0a03 	sub.w	sl, r5, r3
 800f63c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f640:	e71b      	b.n	800f47a <draw_full_border+0x7e>
            _lv_memset_ff(mask_buf, draw_area_w);
 800f642:	4659      	mov	r1, fp
 800f644:	4630      	mov	r0, r6
 800f646:	f004 fd42 	bl	80140ce <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f64a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f64e:	8a7a      	ldrh	r2, [r7, #18]
 800f650:	4630      	mov	r0, r6
 800f652:	8a39      	ldrh	r1, [r7, #16]
 800f654:	4452      	add	r2, sl
 800f656:	4419      	add	r1, r3
 800f658:	465b      	mov	r3, fp
 800f65a:	b212      	sxth	r2, r2
 800f65c:	b209      	sxth	r1, r1
 800f65e:	f7ff fcb9 	bl	800efd4 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800f662:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f666:	900b      	str	r0, [sp, #44]	; 0x2c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f668:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.y1 = fill_area.y1;
 800f66a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800f66e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f672:	9000      	str	r0, [sp, #0]
 800f674:	4640      	mov	r0, r8
            fill_area2.y2 = fill_area.y2;
 800f676:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area2.x1 = area_outer->x1;
 800f67a:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f67e:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
            fill_area2.x1 = area_outer->x1;
 800f682:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f686:	3b01      	subs	r3, #1
 800f688:	444b      	add	r3, r9
 800f68a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f68e:	9b06      	ldr	r3, [sp, #24]
 800f690:	9302      	str	r3, [sp, #8]
 800f692:	9b05      	ldr	r3, [sp, #20]
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	4633      	mov	r3, r6
 800f698:	f7fc fbc0 	bl	800be1c <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800f69c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f6a0:	9907      	ldr	r1, [sp, #28]
 800f6a2:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800f6a6:	440b      	add	r3, r1
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	da15      	bge.n	800f6d8 <draw_full_border+0x2dc>
                fill_area2.x1 = area_outer->x1 + rout;
 800f6ac:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f6ae:	a912      	add	r1, sp, #72	; 0x48
 800f6b0:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800f6b4:	4640      	mov	r0, r8
                fill_area2.x1 = area_outer->x1 + rout;
 800f6b6:	444b      	add	r3, r9
 800f6b8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800f6bc:	88a3      	ldrh	r3, [r4, #4]
 800f6be:	eba3 0309 	sub.w	r3, r3, r9
 800f6c2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f6c6:	9b06      	ldr	r3, [sp, #24]
 800f6c8:	9302      	str	r3, [sp, #8]
 800f6ca:	9b05      	ldr	r3, [sp, #20]
 800f6cc:	9301      	str	r3, [sp, #4]
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	f7fc fba2 	bl	800be1c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f6d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f6dc:	4640      	mov	r0, r8
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f6de:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800f6e2:	f10a 0a01 	add.w	sl, sl, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f6e6:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800f6e8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f6ec:	1b5b      	subs	r3, r3, r5
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f6ee:	eba2 0209 	sub.w	r2, r2, r9
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f6f2:	3301      	adds	r3, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f6f4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f6f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800f6fc:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f6fe:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f700:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f702:	9a06      	ldr	r2, [sp, #24]
 800f704:	9202      	str	r2, [sp, #8]
 800f706:	2b00      	cmp	r3, #0
 800f708:	bfac      	ite	ge
 800f70a:	18f3      	addge	r3, r6, r3
 800f70c:	1c33      	addlt	r3, r6, #0
 800f70e:	9a05      	ldr	r2, [sp, #20]
 800f710:	9201      	str	r2, [sp, #4]
 800f712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f714:	9200      	str	r2, [sp, #0]
 800f716:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800f71a:	f7fc fb7f 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 800f71e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f722:	3301      	adds	r3, #1
 800f724:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800f728:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f72c:	3301      	adds	r3, #1
 800f72e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800f732:	e711      	b.n	800f558 <draw_full_border+0x15c>
            _lv_memset_ff(mask_buf, draw_area_w);
 800f734:	4659      	mov	r1, fp
 800f736:	4630      	mov	r0, r6
 800f738:	f004 fcc9 	bl	80140ce <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f73c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f740:	8a7a      	ldrh	r2, [r7, #18]
 800f742:	4630      	mov	r0, r6
 800f744:	8a39      	ldrh	r1, [r7, #16]
 800f746:	444a      	add	r2, r9
 800f748:	4419      	add	r1, r3
 800f74a:	465b      	mov	r3, fp
 800f74c:	b212      	sxth	r2, r2
 800f74e:	b209      	sxth	r1, r1
 800f750:	f7ff fc40 	bl	800efd4 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800f754:	f9b4 3000 	ldrsh.w	r3, [r4]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f758:	900a      	str	r0, [sp, #40]	; 0x28
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f75a:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.x1 = area_outer->x1;
 800f75c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f760:	3b01      	subs	r3, #1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f762:	9000      	str	r0, [sp, #0]
 800f764:	4640      	mov	r0, r8
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f766:	4453      	add	r3, sl
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f768:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f76c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.y1 = fill_area.y1;
 800f770:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f774:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800f778:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f77c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f780:	9b06      	ldr	r3, [sp, #24]
 800f782:	9302      	str	r3, [sp, #8]
 800f784:	9b05      	ldr	r3, [sp, #20]
 800f786:	9301      	str	r3, [sp, #4]
 800f788:	4633      	mov	r3, r6
 800f78a:	f7fc fb47 	bl	800be1c <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800f78e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f792:	9907      	ldr	r1, [sp, #28]
 800f794:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800f798:	1a5b      	subs	r3, r3, r1
 800f79a:	429a      	cmp	r2, r3
 800f79c:	dd15      	ble.n	800f7ca <draw_full_border+0x3ce>
                fill_area2.x1 = area_outer->x1 + rout;
 800f79e:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f7a0:	a912      	add	r1, sp, #72	; 0x48
 800f7a2:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800f7a6:	4640      	mov	r0, r8
                fill_area2.x1 = area_outer->x1 + rout;
 800f7a8:	4453      	add	r3, sl
 800f7aa:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800f7ae:	88a3      	ldrh	r3, [r4, #4]
 800f7b0:	eba3 030a 	sub.w	r3, r3, sl
 800f7b4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f7b8:	9b06      	ldr	r3, [sp, #24]
 800f7ba:	9302      	str	r3, [sp, #8]
 800f7bc:	9b05      	ldr	r3, [sp, #20]
 800f7be:	9301      	str	r3, [sp, #4]
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	f7fc fb29 	bl	800be1c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f7ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f7ce:	4640      	mov	r0, r8
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f7d0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f7d4:	f109 0901 	add.w	r9, r9, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f7d8:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800f7da:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f7de:	1b5b      	subs	r3, r3, r5
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f7e0:	eba2 020a 	sub.w	r2, r2, sl
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f7e4:	3301      	adds	r3, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f7e6:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f7ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800f7ee:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f7f0:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f7f2:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f7f4:	9a06      	ldr	r2, [sp, #24]
 800f7f6:	9202      	str	r2, [sp, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	bfac      	ite	ge
 800f7fc:	18f3      	addge	r3, r6, r3
 800f7fe:	1c33      	addlt	r3, r6, #0
 800f800:	9a05      	ldr	r2, [sp, #20]
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f806:	9200      	str	r2, [sp, #0]
 800f808:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800f80c:	f7fc fb06 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 800f810:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f814:	3301      	adds	r3, #1
 800f816:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800f81a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f81e:	3301      	adds	r3, #1
 800f820:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800f824:	e6b1      	b.n	800f58a <draw_full_border+0x18e>
        fill_area.x1 = area_outer->x1;
 800f826:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800f82a:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f82e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800f832:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f836:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800f83a:	4553      	cmp	r3, sl
 800f83c:	f6ff aee1 	blt.w	800f602 <draw_full_border+0x206>
            _lv_memset_ff(mask_buf, draw_area_w);
 800f840:	4659      	mov	r1, fp
 800f842:	4630      	mov	r0, r6
 800f844:	f004 fc43 	bl	80140ce <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f848:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f84c:	8a7a      	ldrh	r2, [r7, #18]
 800f84e:	4630      	mov	r0, r6
 800f850:	8a39      	ldrh	r1, [r7, #16]
 800f852:	4452      	add	r2, sl
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f854:	f10a 0a01 	add.w	sl, sl, #1
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f858:	4419      	add	r1, r3
 800f85a:	465b      	mov	r3, fp
 800f85c:	b212      	sxth	r2, r2
 800f85e:	b209      	sxth	r1, r1
 800f860:	f7ff fbb8 	bl	800efd4 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800f864:	9b06      	ldr	r3, [sp, #24]
 800f866:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800f86a:	a910      	add	r1, sp, #64	; 0x40
 800f86c:	9302      	str	r3, [sp, #8]
 800f86e:	9b05      	ldr	r3, [sp, #20]
 800f870:	e9cd 0300 	strd	r0, r3, [sp]
 800f874:	4633      	mov	r3, r6
 800f876:	4640      	mov	r0, r8
 800f878:	f7fc fad0 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 800f87c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f880:	3301      	adds	r3, #1
 800f882:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800f886:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f88a:	3301      	adds	r3, #1
 800f88c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800f890:	e7d1      	b.n	800f836 <draw_full_border+0x43a>

0800f892 <lv_area_copy>:
{
 800f892:	3901      	subs	r1, #1
 800f894:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800f898:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f89c:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800f8a0:	4298      	cmp	r0, r3
 800f8a2:	d1f9      	bne.n	800f898 <lv_area_copy+0x6>
}
 800f8a4:	4770      	bx	lr
	...

0800f8a8 <lv_draw_rect_dsc_init>:
{
 800f8a8:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f8aa:	2154      	movs	r1, #84	; 0x54
{
 800f8ac:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f8ae:	f004 fbdf 	bl	8014070 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 800f8b2:	4b0d      	ldr	r3, [pc, #52]	; (800f8e8 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_grad_color = LV_COLOR_BLACK;
 800f8b4:	2200      	movs	r2, #0
    dsc->bg_color = LV_COLOR_WHITE;
 800f8b6:	881b      	ldrh	r3, [r3, #0]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 800f8b8:	80a2      	strh	r2, [r4, #4]
    dsc->bg_color = LV_COLOR_WHITE;
 800f8ba:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color_stop = 0xFF;
 800f8bc:	23ff      	movs	r3, #255	; 0xff
    dsc->border_color = LV_COLOR_BLACK;
 800f8be:	81e2      	strh	r2, [r4, #14]
    dsc->value_color = LV_COLOR_BLACK;
 800f8c0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
 800f8c4:	8422      	strh	r2, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
 800f8c6:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
 800f8c8:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
 800f8ca:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
 800f8cc:	7523      	strb	r3, [r4, #20]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800f8ce:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f8d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f8d4:	4a05      	ldr	r2, [pc, #20]	; (800f8ec <lv_draw_rect_dsc_init+0x44>)
    dsc->value_opa = LV_OPA_COVER;
 800f8d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->shadow_opa = LV_OPA_COVER;
 800f8da:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f8de:	230f      	movs	r3, #15
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f8e0:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f8e2:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f8e4:	8263      	strh	r3, [r4, #18]
}
 800f8e6:	bd10      	pop	{r4, pc}
 800f8e8:	0801f4f8 	.word	0x0801f4f8
 800f8ec:	20000064 	.word	0x20000064

0800f8f0 <lv_draw_rect>:
{
 800f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f4:	b0b1      	sub	sp, #196	; 0xc4
 800f8f6:	4614      	mov	r4, r2
 800f8f8:	e9cd 1005 	strd	r1, r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f8fc:	88c1      	ldrh	r1, [r0, #6]
 800f8fe:	8840      	ldrh	r0, [r0, #2]
 800f900:	1c4b      	adds	r3, r1, #1
 800f902:	1a1b      	subs	r3, r3, r0
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f904:	b21b      	sxth	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	f341 82d7 	ble.w	8010eba <lv_draw_rect+0x15ca>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f90c:	9b06      	ldr	r3, [sp, #24]
 800f90e:	889e      	ldrh	r6, [r3, #4]
 800f910:	881f      	ldrh	r7, [r3, #0]
 800f912:	1c73      	adds	r3, r6, #1
 800f914:	1bdb      	subs	r3, r3, r7
 800f916:	b21b      	sxth	r3, r3
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f341 82ce 	ble.w	8010eba <lv_draw_rect+0x15ca>
    if(dsc->shadow_width == 0) return;
 800f91e:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800f922:	2d00      	cmp	r5, #0
 800f924:	f000 85a3 	beq.w	801046e <lv_draw_rect+0xb7e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800f928:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	930a      	str	r3, [sp, #40]	; 0x28
 800f930:	f240 859d 	bls.w	801046e <lv_draw_rect+0xb7e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800f934:	2d01      	cmp	r5, #1
 800f936:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 800f93a:	d104      	bne.n	800f946 <lv_draw_rect+0x56>
 800f93c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f93e:	b913      	cbnz	r3, 800f946 <lv_draw_rect+0x56>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800f940:	2a00      	cmp	r2, #0
 800f942:	f340 8594 	ble.w	801046e <lv_draw_rect+0xb7e>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f946:	b292      	uxth	r2, r2
 800f948:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f94a:	eba3 0c02 	sub.w	ip, r3, r2
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f94e:	4413      	add	r3, r2
 800f950:	441e      	add	r6, r3
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f952:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f954:	4467      	add	r7, ip
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f956:	eba3 0c02 	sub.w	ip, r3, r2
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f95a:	441a      	add	r2, r3
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f95c:	b2b6      	uxth	r6, r6
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f95e:	440a      	add	r2, r1
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f960:	4460      	add	r0, ip
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f962:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f966:	b2bf      	uxth	r7, r7
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f968:	b291      	uxth	r1, r2
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f96a:	2202      	movs	r2, #2
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f96c:	b280      	uxth	r0, r0
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f96e:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f972:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f976:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f97a:	fb95 f3f2 	sdiv	r3, r5, r2
 800f97e:	3301      	adds	r3, #1
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f980:	fb95 fcf2 	sdiv	ip, r5, r2
 800f984:	b29b      	uxth	r3, r3
 800f986:	ea6f 0c0c 	mvn.w	ip, ip
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f98a:	441e      	add	r6, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800f98c:	440b      	add	r3, r1
 800f98e:	fa1f fc8c 	uxth.w	ip, ip
 800f992:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f998:	4467      	add	r7, ip
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800f99a:	4460      	add	r0, ip
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f99c:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f9a0:	2bfe      	cmp	r3, #254	; 0xfe
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f9a2:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800f9a6:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f9aa:	bf28      	it	cs
 800f9ac:	23ff      	movcs	r3, #255	; 0xff
 800f9ae:	930a      	str	r3, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800f9b0:	f7fb fa5c 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f9b4:	f003 f892 	bl	8012adc <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800f9b8:	9a05      	ldr	r2, [sp, #20]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f9ba:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800f9bc:	a914      	add	r1, sp, #80	; 0x50
 800f9be:	a816      	add	r0, sp, #88	; 0x58
 800f9c0:	f003 fb97 	bl	80130f2 <_lv_area_intersect>
    if(is_common == false) return;
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f000 8552 	beq.w	801046e <lv_draw_rect+0xb7e>
    draw_area.x1 -= disp_area->x1;
 800f9ca:	8a3e      	ldrh	r6, [r7, #16]
 800f9cc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
 800f9d0:	8a78      	ldrh	r0, [r7, #18]
    draw_area.x1 -= disp_area->x1;
 800f9d2:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 800f9d4:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
 800f9d8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    draw_area.x1 -= disp_area->x1;
 800f9dc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
 800f9e0:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 800f9e2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    draw_area.x2 -= disp_area->x1;
 800f9e6:	1b92      	subs	r2, r2, r6
    draw_area.y1 -= disp_area->y1;
 800f9e8:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
    draw_area.y2 -= disp_area->y1;
 800f9ec:	1a1b      	subs	r3, r3, r0
    lv_area_copy(&bg_coords, coords);
 800f9ee:	9906      	ldr	r1, [sp, #24]
 800f9f0:	a818      	add	r0, sp, #96	; 0x60
    draw_area.x2 -= disp_area->x1;
 800f9f2:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
 800f9f6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    lv_area_copy(&bg_coords, coords);
 800f9fa:	f7ff ff4a 	bl	800f892 <lv_area_copy>
    bg_coords.x1 += 1;
 800f9fe:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    bg_coords.y1 += 1;
 800fa02:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    bg_coords.x1 += 1;
 800fa06:	3301      	adds	r3, #1
    bg_coords.y1 += 1;
 800fa08:	3101      	adds	r1, #1
    bg_coords.x1 += 1;
 800fa0a:	b29e      	uxth	r6, r3
    bg_coords.x2 -= 1;
 800fa0c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    bg_coords.y1 += 1;
 800fa10:	b288      	uxth	r0, r1
    bg_coords.y2 -= 1;
 800fa12:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    bg_coords.x2 -= 1;
 800fa16:	1e5a      	subs	r2, r3, #1
 800fa18:	1b9b      	subs	r3, r3, r6
    bg_coords.y1 += 1;
 800fa1a:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
    bg_coords.x2 -= 1;
 800fa1e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    bg_coords.y2 -= 1;
 800fa22:	1e4a      	subs	r2, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fa24:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fa26:	b21b      	sxth	r3, r3
 800fa28:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fa2c:	b209      	sxth	r1, r1
    int32_t r_bg = dsc->radius;
 800fa2e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800fa32:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800fa36:	428b      	cmp	r3, r1
    bg_coords.x1 += 1;
 800fa38:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800fa3c:	bfa8      	it	ge
 800fa3e:	460b      	movge	r3, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fa40:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800fa44:	105b      	asrs	r3, r3, #1
 800fa46:	4293      	cmp	r3, r2
 800fa48:	bfa8      	it	ge
 800fa4a:	4613      	movge	r3, r2
 800fa4c:	9311      	str	r3, [sp, #68]	; 0x44
 800fa4e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fa52:	3301      	adds	r3, #1
 800fa54:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fa56:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800fa5a:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fa5c:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fa5e:	1a09      	subs	r1, r1, r0
 800fa60:	b209      	sxth	r1, r1
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 800fa62:	428b      	cmp	r3, r1
 800fa64:	bfa8      	it	ge
 800fa66:	460b      	movge	r3, r1
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800fa68:	105b      	asrs	r3, r3, #1
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	bfa8      	it	ge
 800fa6e:	4613      	movge	r3, r2
 800fa70:	469b      	mov	fp, r3
    int32_t corner_size = sw  + r_sh;
 800fa72:	18eb      	adds	r3, r5, r3
 800fa74:	9307      	str	r3, [sp, #28]
 800fa76:	fb03 f903 	mul.w	r9, r3, r3
    if(sh_cache_size == corner_size && sh_cache_r == r_sh) {
 800fa7a:	4bbc      	ldr	r3, [pc, #752]	; (800fd6c <lv_draw_rect+0x47c>)
 800fa7c:	9907      	ldr	r1, [sp, #28]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	4291      	cmp	r1, r2
 800fa82:	f040 8177 	bne.w	800fd74 <lv_draw_rect+0x484>
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	455b      	cmp	r3, fp
 800fa8a:	f040 8173 	bne.w	800fd74 <lv_draw_rect+0x484>
        sh_buf = _lv_mem_buf_get(corner_size * corner_size);
 800fa8e:	4648      	mov	r0, r9
 800fa90:	f004 fa50 	bl	8013f34 <_lv_mem_buf_get>
        _lv_memcpy(sh_buf, sh_cache, corner_size * corner_size);
 800fa94:	464a      	mov	r2, r9
 800fa96:	49b6      	ldr	r1, [pc, #728]	; (800fd70 <lv_draw_rect+0x480>)
        sh_buf = _lv_mem_buf_get(corner_size * corner_size);
 800fa98:	9009      	str	r0, [sp, #36]	; 0x24
        _lv_memcpy(sh_buf, sh_cache, corner_size * corner_size);
 800fa9a:	f004 f92d 	bl	8013cf8 <_lv_memcpy>
 800fa9e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800faa2:	2102      	movs	r1, #2
 800faa4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 800faa8:	3301      	adds	r3, #1
 800faaa:	1a9b      	subs	r3, r3, r2
 800faac:	b21b      	sxth	r3, r3
 800faae:	fb93 f3f1 	sdiv	r3, r3, r1
 800fab2:	4413      	add	r3, r2
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800fab4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800fab8:	b29b      	uxth	r3, r3
 800faba:	930f      	str	r3, [sp, #60]	; 0x3c
 800fabc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800fac0:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fac2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800fac6:	3301      	adds	r3, #1
 800fac8:	1a9b      	subs	r3, r3, r2
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800faca:	b21b      	sxth	r3, r3
 800facc:	fb93 f3f1 	sdiv	r3, r3, r1
 800fad0:	4413      	add	r3, r2
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	9310      	str	r3, [sp, #64]	; 0x40
 800fad6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800fada:	930e      	str	r3, [sp, #56]	; 0x38
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800fadc:	f7ff faca 	bl	800f074 <lv_draw_mask_get_cnt>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	f040 8215 	bne.w	800ff10 <lv_draw_rect+0x620>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 800fae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f040 8213 	bne.w	800ff14 <lv_draw_rect+0x624>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 800faee:	f9b4 6028 	ldrsh.w	r6, [r4, #40]	; 0x28
 800faf2:	fab6 f386 	clz	r3, r6
 800faf6:	095b      	lsrs	r3, r3, #5
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800faf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fafa:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800fafe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800fb02:	3001      	adds	r0, #1
 800fb04:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 800fb06:	b200      	sxth	r0, r0
 800fb08:	f004 fa14 	bl	8013f34 <_lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fb0c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800fb10:	a918      	add	r1, sp, #96	; 0x60
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 800fb12:	4605      	mov	r5, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fb14:	930c      	str	r3, [sp, #48]	; 0x30
 800fb16:	a827      	add	r0, sp, #156	; 0x9c
 800fb18:	2301      	movs	r3, #1
 800fb1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb1c:	f7ff fb3c 	bl	800f198 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800fb20:	2100      	movs	r1, #0
 800fb22:	a827      	add	r0, sp, #156	; 0x9c
 800fb24:	f7ff fa40 	bl	800efa8 <lv_draw_mask_add>
    a.x2 = sh_area.x2;
 800fb28:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    a.x1 = a.x2 - corner_size + 1;
 800fb2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fb30:	a91a      	add	r1, sp, #104	; 0x68
    a.x2 = sh_area.x2;
 800fb32:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800fb36:	3301      	adds	r3, #1
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800fb38:	9011      	str	r0, [sp, #68]	; 0x44
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fb3a:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = a.x2 - corner_size + 1;
 800fb3c:	1a9b      	subs	r3, r3, r2
 800fb3e:	9208      	str	r2, [sp, #32]
 800fb40:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800fb44:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 800fb48:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = a.y1 + corner_size - 1;
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	4413      	add	r3, r2
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fb50:	9a05      	ldr	r2, [sp, #20]
    a.y2 = a.y1 + corner_size - 1;
 800fb52:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fb56:	f003 facc 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d047      	beq.n	800fbee <lv_draw_rect+0x2fe>
 800fb5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb60:	a918      	add	r1, sp, #96	; 0x60
 800fb62:	a81a      	add	r0, sp, #104	; 0x68
 800fb64:	f003 fbc1 	bl	80132ea <_lv_area_is_in>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d140      	bne.n	800fbee <lv_draw_rect+0x2fe>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800fb6c:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 800fb70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb72:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 800fb76:	4293      	cmp	r3, r2
 800fb78:	f106 0601 	add.w	r6, r6, #1
 800fb7c:	bfc8      	it	gt
 800fb7e:	4613      	movgt	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800fb80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if(ca.y2 > h_half) ca.y2 = h_half;
 800fb82:	bfc8      	it	gt
 800fb84:	f8ad 3076 	strhgt.w	r3, [sp, #118]	; 0x76
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800fb88:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	bfde      	ittt	le
 800fb90:	9b10      	ldrle	r3, [sp, #64]	; 0x40
 800fb92:	3301      	addle	r3, #1
 800fb94:	f8ad 3070 	strhle.w	r3, [sp, #112]	; 0x70
        lv_coord_t w = lv_area_get_width(&ca);
 800fb98:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800fb9c:	1af6      	subs	r6, r6, r3
 800fb9e:	b236      	sxth	r6, r6
        if(w > 0) {
 800fba0:	2e00      	cmp	r6, #0
 800fba2:	dd24      	ble.n	800fbee <lv_draw_rect+0x2fe>
        lv_coord_t h = lv_area_get_height(&ca);
 800fba4:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800fba8:	f10d 0980 	add.w	r9, sp, #128	; 0x80
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800fbac:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
 800fbb0:	a91c      	add	r1, sp, #112	; 0x70
        lv_coord_t h = lv_area_get_height(&ca);
 800fbb2:	f9bd b076 	ldrsh.w	fp, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 800fbb6:	4648      	mov	r0, r9
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800fbb8:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800fbbc:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fbbe:	f10b 0b01 	add.w	fp, fp, #1
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800fbc2:	9a07      	ldr	r2, [sp, #28]
 800fbc4:	eba8 0707 	sub.w	r7, r8, r7
            for(y = 0; y < h; y++) {
 800fbc8:	f04f 0a00 	mov.w	sl, #0
 800fbcc:	ebab 0808 	sub.w	r8, fp, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800fbd0:	fb02 3707 	mla	r7, r2, r7, r3
 800fbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800fbd6:	fa0f f888 	sxth.w	r8, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800fbda:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800fbdc:	f7ff fe59 	bl	800f892 <lv_area_copy>
            fa.y2 = fa.y1;
 800fbe0:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800fbe4:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 800fbe8:	45c2      	cmp	sl, r8
 800fbea:	f2c0 8195 	blt.w	800ff18 <lv_draw_rect+0x628>
    a.x2 = sh_area.x2;
 800fbee:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fbf2:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = a.x2 - corner_size + 1;
 800fbf4:	9a08      	ldr	r2, [sp, #32]
    a.x2 = sh_area.x2;
 800fbf6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800fbfa:	3301      	adds	r3, #1
    a.y1 = sh_area.y2 - corner_size + 1;
 800fbfc:	9908      	ldr	r1, [sp, #32]
    a.x1 = a.x2 - corner_size + 1;
 800fbfe:	1a9b      	subs	r3, r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
 800fc00:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    a.x1 = a.x2 - corner_size + 1;
 800fc04:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800fc08:	1c53      	adds	r3, r2, #1
    a.y2 = sh_area.y2;
 800fc0a:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    a.y1 = sh_area.y2 - corner_size + 1;
 800fc0e:	1a5b      	subs	r3, r3, r1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fc10:	9a05      	ldr	r2, [sp, #20]
 800fc12:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800fc14:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fc18:	f003 fa6b 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d047      	beq.n	800fcb0 <lv_draw_rect+0x3c0>
 800fc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc22:	a918      	add	r1, sp, #96	; 0x60
 800fc24:	a81a      	add	r0, sp, #104	; 0x68
 800fc26:	f003 fb60 	bl	80132ea <_lv_area_is_in>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d140      	bne.n	800fcb0 <lv_draw_rect+0x3c0>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800fc2e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800fc32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc34:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 800fc38:	4293      	cmp	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800fc3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc3c:	f106 0601 	add.w	r6, r6, #1
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800fc40:	bfde      	ittt	le
 800fc42:	9b0f      	ldrle	r3, [sp, #60]	; 0x3c
 800fc44:	3301      	addle	r3, #1
 800fc46:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800fc4a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	bfde      	ittt	le
 800fc52:	9b10      	ldrle	r3, [sp, #64]	; 0x40
 800fc54:	3301      	addle	r3, #1
 800fc56:	f8ad 3070 	strhle.w	r3, [sp, #112]	; 0x70
        lv_coord_t w = lv_area_get_width(&ca);
 800fc5a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800fc5e:	1af6      	subs	r6, r6, r3
 800fc60:	b236      	sxth	r6, r6
        if(w > 0) {
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	dd24      	ble.n	800fcb0 <lv_draw_rect+0x3c0>
        lv_coord_t h = lv_area_get_height(&ca);
 800fc66:	f9bd b076 	ldrsh.w	fp, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 800fc6a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800fc6e:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
 800fc72:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800fc74:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
            lv_area_copy(&fa, &ca);
 800fc78:	4648      	mov	r0, r9
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800fc7a:	1a9b      	subs	r3, r3, r2
        lv_coord_t h = lv_area_get_height(&ca);
 800fc7c:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800fc80:	eba7 070b 	sub.w	r7, r7, fp
 800fc84:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc86:	f10b 0b01 	add.w	fp, fp, #1
            for(y = 0; y < h; y++) {
 800fc8a:	f04f 0a00 	mov.w	sl, #0
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800fc8e:	fb02 3707 	mla	r7, r2, r7, r3
 800fc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc94:	ebab 0808 	sub.w	r8, fp, r8
 800fc98:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800fc9a:	f7ff fdfa 	bl	800f892 <lv_area_copy>
            for(y = 0; y < h; y++) {
 800fc9e:	fa0f f888 	sxth.w	r8, r8
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800fca2:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 800fca6:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            for(y = 0; y < h; y++) {
 800fcaa:	45c2      	cmp	sl, r8
 800fcac:	f2c0 815f 	blt.w	800ff6e <lv_draw_rect+0x67e>
    a.x2 = sh_area.x2;
 800fcb0:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fcb4:	a91a      	add	r1, sp, #104	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800fcb6:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fcb8:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = sh_area.x2;
 800fcba:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800fcc6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800fcca:	4413      	add	r3, r2
 800fccc:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
 800fcd0:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800fcd4:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fcd6:	9a05      	ldr	r2, [sp, #20]
    a.y2 = sh_area.y2 - corner_size;
 800fcd8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fcdc:	f003 fa09 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d03d      	beq.n	800fd60 <lv_draw_rect+0x470>
 800fce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fce6:	a918      	add	r1, sp, #96	; 0x60
 800fce8:	a81a      	add	r0, sp, #104	; 0x68
 800fcea:	f003 fafe 	bl	80132ea <_lv_area_is_in>
 800fcee:	bbb8      	cbnz	r0, 800fd60 <lv_draw_rect+0x470>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 800fcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcf2:	b14b      	cbz	r3, 800fd08 <lv_draw_rect+0x418>
 800fcf4:	9b06      	ldr	r3, [sp, #24]
 800fcf6:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 800fcfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	bfb8      	it	lt
 800fd02:	4613      	movlt	r3, r2
 800fd04:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fd08:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
        lv_coord_t w = lv_area_get_width(&ca);
 800fd0c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800fd10:	3601      	adds	r6, #1
 800fd12:	1af6      	subs	r6, r6, r3
 800fd14:	b236      	sxth	r6, r6
        if(w > 0) {
 800fd16:	2e00      	cmp	r6, #0
 800fd18:	dd22      	ble.n	800fd60 <lv_draw_rect+0x470>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fd1a:	f8bd a076 	ldrh.w	sl, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 800fd1e:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 800fd22:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
 800fd26:	a91c      	add	r1, sp, #112	; 0x70
 800fd28:	f10a 0a01 	add.w	sl, sl, #1
 800fd2c:	4640      	mov	r0, r8
            for(y = 0; y < h; y++) {
 800fd2e:	f04f 0900 	mov.w	r9, #0
 800fd32:	ebaa 0a02 	sub.w	sl, sl, r2
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800fd36:	9a07      	ldr	r2, [sp, #28]
 800fd38:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800fd3a:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 800fd3e:	fa0f fa8a 	sxth.w	sl, sl
 800fd42:	1a9b      	subs	r3, r3, r2
 800fd44:	9a07      	ldr	r2, [sp, #28]
 800fd46:	fb02 3707 	mla	r7, r2, r7, r3
 800fd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd4c:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800fd4e:	f7ff fda0 	bl	800f892 <lv_area_copy>
            fa.y2 = fa.y1;
 800fd52:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800fd56:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 800fd5a:	45d1      	cmp	r9, sl
 800fd5c:	f2c0 8132 	blt.w	800ffc4 <lv_draw_rect+0x6d4>
        for(x = 0; x < corner_size / 2; x++) {
 800fd60:	9b07      	ldr	r3, [sp, #28]
 800fd62:	2000      	movs	r0, #0
 800fd64:	105e      	asrs	r6, r3, #1
 800fd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd68:	e165      	b.n	8010036 <lv_draw_rect+0x746>
 800fd6a:	bf00      	nop
 800fd6c:	2000005c 	.word	0x2000005c
 800fd70:	20020800 	.word	0x20020800
        sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800fd74:	ea4f 0049 	mov.w	r0, r9, lsl #1
 800fd78:	f004 f8dc 	bl	8013f34 <_lv_mem_buf_get>
    lv_area_copy(&sh_area, coords);
 800fd7c:	a912      	add	r1, sp, #72	; 0x48
        sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800fd7e:	9009      	str	r0, [sp, #36]	; 0x24
    lv_area_copy(&sh_area, coords);
 800fd80:	a820      	add	r0, sp, #128	; 0x80
        shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800fd82:	f9b4 5022 	ldrsh.w	r5, [r4, #34]	; 0x22
    lv_area_copy(&sh_area, coords);
 800fd86:	f7ff fd84 	bl	800f892 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fd8a:	2302      	movs	r3, #2
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800fd8c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fd90:	b2aa      	uxth	r2, r5
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800fd92:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800fd96:	43c9      	mvns	r1, r1
        shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800fd98:	fa0f f78b 	sxth.w	r7, fp
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fd9c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd9e:	f062 0201 	orn	r2, r2, #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800fda2:	4401      	add	r1, r0
    int32_t size = sw_ori  + r;
 800fda4:	197e      	adds	r6, r7, r5
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800fda6:	a827      	add	r0, sp, #156	; 0x9c
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fda8:	fb95 f3f3 	sdiv	r3, r5, r3
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 800fdb0:	3301      	adds	r3, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fdb2:	445a      	add	r2, fp
    sh_area.y1 = sw / 2 + 1;
 800fdb4:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fdb6:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 800fdb8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800fdbc:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800fdc0:	440a      	add	r2, r1
 800fdc2:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800fdc6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
 800fdca:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800fdce:	3201      	adds	r2, #1
 800fdd0:	1a52      	subs	r2, r2, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800fdd2:	a920      	add	r1, sp, #128	; 0x80
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800fdd4:	4413      	add	r3, r2
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800fdd6:	463a      	mov	r2, r7
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800fdd8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800fddc:	2300      	movs	r3, #0
 800fdde:	f7ff f9db 	bl	800f198 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800fde2:	2d01      	cmp	r5, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800fde4:	4630      	mov	r0, r6
    else sw = sw_ori >> 1;
 800fde6:	bf18      	it	ne
 800fde8:	106d      	asrne	r5, r5, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800fdea:	f004 f8a3 	bl	8013f34 <_lv_mem_buf_get>
        sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800fdee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800fdf2:	0073      	lsls	r3, r6, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800fdf4:	4682      	mov	sl, r0
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800fdf6:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	9308      	str	r3, [sp, #32]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800fdfc:	b233      	sxth	r3, r6
 800fdfe:	930d      	str	r3, [sp, #52]	; 0x34
    for(y = 0; y < size; y++) {
 800fe00:	9b08      	ldr	r3, [sp, #32]
 800fe02:	429e      	cmp	r6, r3
 800fe04:	dc22      	bgt.n	800fe4c <lv_draw_rect+0x55c>
    _lv_mem_buf_release(mask_line);
 800fe06:	4650      	mov	r0, sl
 800fe08:	fb06 f706 	mul.w	r7, r6, r6
 800fe0c:	f003 ff28 	bl	8013c60 <_lv_mem_buf_release>
    if(sw == 1) {
 800fe10:	2d01      	cmp	r5, #1
 800fe12:	d066      	beq.n	800fee2 <lv_draw_rect+0x5f2>
    shadow_blur_corner(size, sw, sh_buf);
 800fe14:	b236      	sxth	r6, r6
 800fe16:	4629      	mov	r1, r5
 800fe18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f7ff fa34 	bl	800f288 <shadow_blur_corner>
    sw += sw_ori & 1;
 800fe20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe22:	f003 0101 	and.w	r1, r3, #1
 800fe26:	4429      	add	r1, r5
    if(sw > 1) {
 800fe28:	2901      	cmp	r1, #1
 800fe2a:	dd0d      	ble.n	800fe48 <lv_draw_rect+0x558>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(i = 1; i < (uint32_t) size * size; i++) {
 800fe2e:	2001      	movs	r0, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe32:	881b      	ldrh	r3, [r3, #0]
 800fe34:	019b      	lsls	r3, r3, #6
 800fe36:	fb93 f3f1 	sdiv	r3, r3, r1
 800fe3a:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800fe3c:	42b8      	cmp	r0, r7
 800fe3e:	d352      	bcc.n	800fee6 <lv_draw_rect+0x5f6>
        shadow_blur_corner(size, sw, sh_buf);
 800fe40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe42:	4630      	mov	r0, r6
 800fe44:	f7ff fa20 	bl	800f288 <shadow_blur_corner>
        for(i = 1; i < (uint32_t) size * size; i++) {
 800fe48:	2300      	movs	r3, #0
 800fe4a:	e05e      	b.n	800ff0a <lv_draw_rect+0x61a>
        _lv_memset_ff(mask_line, size);
 800fe4c:	4631      	mov	r1, r6
 800fe4e:	4650      	mov	r0, sl
 800fe50:	f004 f93d 	bl	80140ce <_lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800fe54:	ab27      	add	r3, sp, #156	; 0x9c
 800fe56:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	4650      	mov	r0, sl
 800fe60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe62:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800fe64:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800fe66:	b948      	cbnz	r0, 800fe7c <lv_draw_rect+0x58c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800fe68:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe6a:	4640      	mov	r0, r8
 800fe6c:	f004 f900 	bl	8014070 <_lv_memset_00>
        sh_ups_tmp_buf += size;
 800fe70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe72:	4498      	add	r8, r3
    for(y = 0; y < size; y++) {
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	3301      	adds	r3, #1
 800fe78:	9308      	str	r3, [sp, #32]
 800fe7a:	e7c1      	b.n	800fe00 <lv_draw_rect+0x510>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe7c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe80:	4651      	mov	r1, sl
 800fe82:	019b      	lsls	r3, r3, #6
 800fe84:	fb93 f3f5 	sdiv	r3, r3, r5
 800fe88:	f8a8 3000 	strh.w	r3, [r8]
            for(i = 1; i < size; i++) {
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	429e      	cmp	r6, r3
 800fe90:	d0ee      	beq.n	800fe70 <lv_draw_rect+0x580>
 800fe92:	4608      	mov	r0, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800fe94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fe98:	7800      	ldrb	r0, [r0, #0]
 800fe9a:	4290      	cmp	r0, r2
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe9c:	bf15      	itete	ne
 800fe9e:	0192      	lslne	r2, r2, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800fea0:	eb08 0243 	addeq.w	r2, r8, r3, lsl #1
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800fea4:	fb92 f2f5 	sdivne	r2, r2, r5
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800fea8:	f832 2c02 	ldrheq.w	r2, [r2, #-2]
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800feac:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
            for(i = 1; i < size; i++) {
 800feb0:	3301      	adds	r3, #1
 800feb2:	e7ec      	b.n	800fe8e <lv_draw_rect+0x59e>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800feb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800feb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800febc:	0992      	lsrs	r2, r2, #6
 800febe:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800fec0:	3301      	adds	r3, #1
 800fec2:	42bb      	cmp	r3, r7
 800fec4:	d1f6      	bne.n	800feb4 <lv_draw_rect+0x5c4>
        if(corner_size * corner_size < sizeof(sh_cache)) {
 800fec6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 800feca:	f73f ade8 	bgt.w	800fa9e <lv_draw_rect+0x1ae>
            _lv_memcpy(sh_cache, sh_buf, corner_size * corner_size);
 800fece:	464a      	mov	r2, r9
 800fed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fed2:	485c      	ldr	r0, [pc, #368]	; (8010044 <lv_draw_rect+0x754>)
 800fed4:	f003 ff10 	bl	8013cf8 <_lv_memcpy>
            sh_cache_size = corner_size;
 800fed8:	4b5b      	ldr	r3, [pc, #364]	; (8010048 <lv_draw_rect+0x758>)
 800feda:	9a07      	ldr	r2, [sp, #28]
            sh_cache_r = r_sh;
 800fedc:	e9c3 2b00 	strd	r2, fp, [r3]
 800fee0:	e5dd      	b.n	800fa9e <lv_draw_rect+0x1ae>
        for(i = 0; i < size * size; i++) {
 800fee2:	2300      	movs	r3, #0
 800fee4:	e7ed      	b.n	800fec2 <lv_draw_rect+0x5d2>
 800fee6:	4615      	mov	r5, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800fee8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
        for(i = 1; i < (uint32_t) size * size; i++) {
 800feec:	3001      	adds	r0, #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800feee:	882d      	ldrh	r5, [r5, #0]
 800fef0:	429d      	cmp	r5, r3
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800fef2:	bf1e      	ittt	ne
 800fef4:	019b      	lslne	r3, r3, #6
 800fef6:	fb93 f3f1 	sdivne	r3, r3, r1
 800fefa:	8013      	strhne	r3, [r2, #0]
 800fefc:	e79e      	b.n	800fe3c <lv_draw_rect+0x54c>
        res_buf[x] = sh_buf[x];
 800fefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ff06:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800ff08:	3301      	adds	r3, #1
 800ff0a:	42bb      	cmp	r3, r7
 800ff0c:	d1f7      	bne.n	800fefe <lv_draw_rect+0x60e>
 800ff0e:	e7da      	b.n	800fec6 <lv_draw_rect+0x5d6>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e5f1      	b.n	800faf8 <lv_draw_rect+0x208>
 800ff14:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff16:	e5f0      	b.n	800fafa <lv_draw_rect+0x20a>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ff18:	4639      	mov	r1, r7
 800ff1a:	4632      	mov	r2, r6
 800ff1c:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 800ff1e:	f10a 0a01 	add.w	sl, sl, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ff22:	f003 fee9 	bl	8013cf8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800ff26:	4633      	mov	r3, r6
 800ff28:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 800ff32:	f7ff f84f 	bl	800efd4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff36:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff3a:	2801      	cmp	r0, #1
 800ff3c:	bf08      	it	eq
 800ff3e:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff40:	8c22      	ldrh	r2, [r4, #32]
 800ff42:	9302      	str	r3, [sp, #8]
 800ff44:	4649      	mov	r1, r9
 800ff46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff48:	e9cd 0300 	strd	r0, r3, [sp]
 800ff4c:	462b      	mov	r3, r5
 800ff4e:	9805      	ldr	r0, [sp, #20]
 800ff50:	f7fb ff64 	bl	800be1c <_lv_blend_fill>
                fa.y1++;
 800ff54:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800ff58:	3301      	adds	r3, #1
 800ff5a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2++;
 800ff5e:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 800ff62:	3301      	adds	r3, #1
 800ff64:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                sh_buf_tmp += corner_size;
 800ff68:	9b07      	ldr	r3, [sp, #28]
 800ff6a:	441f      	add	r7, r3
 800ff6c:	e63c      	b.n	800fbe8 <lv_draw_rect+0x2f8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ff6e:	4639      	mov	r1, r7
 800ff70:	4632      	mov	r2, r6
 800ff72:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 800ff74:	f10a 0a01 	add.w	sl, sl, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ff78:	f003 febe 	bl	8013cf8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800ff7c:	4633      	mov	r3, r6
 800ff7e:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 800ff82:	4628      	mov	r0, r5
 800ff84:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 800ff88:	f7ff f824 	bl	800efd4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff8c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff90:	2801      	cmp	r0, #1
 800ff92:	bf08      	it	eq
 800ff94:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff96:	8c22      	ldrh	r2, [r4, #32]
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff9e:	e9cd 0300 	strd	r0, r3, [sp]
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	9805      	ldr	r0, [sp, #20]
 800ffa6:	f7fb ff39 	bl	800be1c <_lv_blend_fill>
                fa.y1--;
 800ffaa:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2--;
 800ffb4:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                sh_buf_tmp += corner_size;
 800ffbe:	9b07      	ldr	r3, [sp, #28]
 800ffc0:	441f      	add	r7, r3
 800ffc2:	e672      	b.n	800fcaa <lv_draw_rect+0x3ba>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ffc4:	4632      	mov	r2, r6
 800ffc6:	4639      	mov	r1, r7
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f003 fe95 	bl	8013cf8 <_lv_memcpy>
                if(simple_mode) {
 800ffce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffd0:	b1d3      	cbz	r3, 8010008 <lv_draw_rect+0x718>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ffd2:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800ffd4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800ffd8:	4641      	mov	r1, r8
 800ffda:	8c22      	ldrh	r2, [r4, #32]
            for(y = 0; y < h; y++) {
 800ffdc:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800ffe0:	9302      	str	r3, [sp, #8]
 800ffe2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800ffe6:	e9cd 0300 	strd	r0, r3, [sp]
 800ffea:	462b      	mov	r3, r5
 800ffec:	9805      	ldr	r0, [sp, #20]
 800ffee:	f7fb ff15 	bl	800be1c <_lv_blend_fill>
                fa.y1++;
 800fff2:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 800fff6:	3301      	adds	r3, #1
 800fff8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2++;
 800fffc:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010000:	3301      	adds	r3, #1
 8010002:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 8010006:	e6a8      	b.n	800fd5a <lv_draw_rect+0x46a>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010008:	4633      	mov	r3, r6
 801000a:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 801000e:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 8010012:	4628      	mov	r0, r5
 8010014:	f7fe ffde 	bl	800efd4 <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010018:	2801      	cmp	r0, #1
 801001a:	d1db      	bne.n	800ffd4 <lv_draw_rect+0x6e4>
 801001c:	e7d9      	b.n	800ffd2 <lv_draw_rect+0x6e2>
            lv_opa_t tmp = sh_buf_tmp[x];
 801001e:	7817      	ldrb	r7, [r2, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 8010020:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8010024:	f802 cb01 	strb.w	ip, [r2], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
 8010028:	700f      	strb	r7, [r1, #0]
        for(x = 0; x < corner_size / 2; x++) {
 801002a:	1ad7      	subs	r7, r2, r3
 801002c:	42be      	cmp	r6, r7
 801002e:	dcf6      	bgt.n	801001e <lv_draw_rect+0x72e>
        sh_buf_tmp += corner_size;
 8010030:	9a07      	ldr	r2, [sp, #28]
    for(y = 0; y < corner_size; y++) {
 8010032:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
 8010034:	4413      	add	r3, r2
    for(y = 0; y < corner_size; y++) {
 8010036:	9a07      	ldr	r2, [sp, #28]
 8010038:	4282      	cmp	r2, r0
 801003a:	dd07      	ble.n	801004c <lv_draw_rect+0x75c>
 801003c:	18d1      	adds	r1, r2, r3
 801003e:	461a      	mov	r2, r3
 8010040:	e7f3      	b.n	801002a <lv_draw_rect+0x73a>
 8010042:	bf00      	nop
 8010044:	20020800 	.word	0x20020800
 8010048:	2000005c 	.word	0x2000005c
    a.x1 = sh_area.x1;
 801004c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010050:	a91a      	add	r1, sp, #104	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 8010052:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010054:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1;
 8010056:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 801005a:	3b01      	subs	r3, #1
 801005c:	4413      	add	r3, r2
 801005e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1;
 8010062:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8010066:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = a.y1 + corner_size - 1;
 801006a:	3b01      	subs	r3, #1
 801006c:	4413      	add	r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
 801006e:	9a05      	ldr	r2, [sp, #20]
    a.y2 = a.y1 + corner_size - 1;
 8010070:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010074:	f003 f83d 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010078:	2800      	cmp	r0, #0
 801007a:	d045      	beq.n	8010108 <lv_draw_rect+0x818>
 801007c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801007e:	a918      	add	r1, sp, #96	; 0x60
 8010080:	a81a      	add	r0, sp, #104	; 0x68
 8010082:	f003 f932 	bl	80132ea <_lv_area_is_in>
 8010086:	2800      	cmp	r0, #0
 8010088:	d13e      	bne.n	8010108 <lv_draw_rect+0x818>
        if(ca.y2 > h_half) ca.y2 = h_half;
 801008a:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 801008e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010090:	4293      	cmp	r3, r2
 8010092:	bfc8      	it	gt
 8010094:	4613      	movgt	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 8010096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if(ca.y2 > h_half) ca.y2 = h_half;
 8010098:	bfc8      	it	gt
 801009a:	f8ad 3076 	strhgt.w	r3, [sp, #118]	; 0x76
        if(ca.x2 > w_half) ca.x2 = w_half;
 801009e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 80100a2:	4293      	cmp	r3, r2
 80100a4:	bfc4      	itt	gt
 80100a6:	4613      	movgt	r3, r2
 80100a8:	f8ad 3074 	strhgt.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100ac:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
        lv_coord_t w = lv_area_get_width(&ca);
 80100b0:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 80100b4:	3601      	adds	r6, #1
 80100b6:	1af6      	subs	r6, r6, r3
 80100b8:	b236      	sxth	r6, r6
        if(w > 0) {
 80100ba:	2e00      	cmp	r6, #0
 80100bc:	dd24      	ble.n	8010108 <lv_draw_rect+0x818>
        lv_coord_t h = lv_area_get_height(&ca);
 80100be:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 80100c2:	f10d 0980 	add.w	r9, sp, #128	; 0x80
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 80100c6:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
 80100ca:	a91c      	add	r1, sp, #112	; 0x70
        lv_coord_t h = lv_area_get_height(&ca);
 80100cc:	f9bd b076 	ldrsh.w	fp, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 80100d0:	4648      	mov	r0, r9
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80100d2:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 80100d6:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80100d8:	f10b 0b01 	add.w	fp, fp, #1
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80100dc:	9a07      	ldr	r2, [sp, #28]
 80100de:	eba8 0707 	sub.w	r7, r8, r7
            for(y = 0; y < h; y++) {
 80100e2:	f04f 0a00 	mov.w	sl, #0
 80100e6:	ebab 0808 	sub.w	r8, fp, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80100ea:	fb02 3707 	mla	r7, r2, r7, r3
 80100ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 80100f0:	fa0f f888 	sxth.w	r8, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80100f4:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 80100f6:	f7ff fbcc 	bl	800f892 <lv_area_copy>
            fa.y2 = fa.y1;
 80100fa:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80100fe:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 8010102:	45c2      	cmp	sl, r8
 8010104:	f2c0 82d4 	blt.w	80106b0 <lv_draw_rect+0xdc0>
    a.x1 = sh_area.x1;
 8010108:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 801010c:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = a.x1 + corner_size - 1;
 801010e:	9a08      	ldr	r2, [sp, #32]
    a.x1 = sh_area.x1;
 8010110:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 8010114:	3b01      	subs	r3, #1
    a.y1 = sh_area.y2 - corner_size + 1;
 8010116:	9908      	ldr	r1, [sp, #32]
    a.x2 = a.x1 + corner_size - 1;
 8010118:	4413      	add	r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
 801011a:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    a.x2 = a.x1 + corner_size - 1;
 801011e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
 8010122:	1c53      	adds	r3, r2, #1
    a.y2 = sh_area.y2;
 8010124:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    a.y1 = sh_area.y2 - corner_size + 1;
 8010128:	1a5b      	subs	r3, r3, r1
    has_com = _lv_area_intersect(&ca, &a, clip);
 801012a:	9a05      	ldr	r2, [sp, #20]
 801012c:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 801012e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010132:	f002 ffde 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010136:	2800      	cmp	r0, #0
 8010138:	d045      	beq.n	80101c6 <lv_draw_rect+0x8d6>
 801013a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801013c:	a918      	add	r1, sp, #96	; 0x60
 801013e:	a81a      	add	r0, sp, #104	; 0x68
 8010140:	f003 f8d3 	bl	80132ea <_lv_area_is_in>
 8010144:	2800      	cmp	r0, #0
 8010146:	d13e      	bne.n	80101c6 <lv_draw_rect+0x8d6>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8010148:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 801014c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801014e:	4293      	cmp	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 8010150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8010152:	bfde      	ittt	le
 8010154:	9b0f      	ldrle	r3, [sp, #60]	; 0x3c
 8010156:	3301      	addle	r3, #1
 8010158:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
        if(ca.x2 > w_half) ca.x2 = w_half;
 801015c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8010160:	4293      	cmp	r3, r2
 8010162:	bfc4      	itt	gt
 8010164:	4613      	movgt	r3, r2
 8010166:	f8ad 3074 	strhgt.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801016a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
        lv_coord_t w = lv_area_get_width(&ca);
 801016e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8010172:	3601      	adds	r6, #1
 8010174:	1af6      	subs	r6, r6, r3
 8010176:	b236      	sxth	r6, r6
        if(w > 0) {
 8010178:	2e00      	cmp	r6, #0
 801017a:	dd24      	ble.n	80101c6 <lv_draw_rect+0x8d6>
        lv_coord_t h = lv_area_get_height(&ca);
 801017c:	f9bd b076 	ldrsh.w	fp, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 8010180:	f10d 0980 	add.w	r9, sp, #128	; 0x80
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010184:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            lv_area_copy(&fa, &ca);
 8010188:	a91c      	add	r1, sp, #112	; 0x70
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801018a:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
            lv_area_copy(&fa, &ca);
 801018e:	4648      	mov	r0, r9
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010190:	1a9b      	subs	r3, r3, r2
        lv_coord_t h = lv_area_get_height(&ca);
 8010192:	f9bd 8072 	ldrsh.w	r8, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010196:	eba7 070b 	sub.w	r7, r7, fp
 801019a:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801019c:	f10b 0b01 	add.w	fp, fp, #1
            for(y = 0; y < h; y++) {
 80101a0:	f04f 0a00 	mov.w	sl, #0
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 80101a4:	fb02 3707 	mla	r7, r2, r7, r3
 80101a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101aa:	ebab 0808 	sub.w	r8, fp, r8
 80101ae:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 80101b0:	f7ff fb6f 	bl	800f892 <lv_area_copy>
            for(y = 0; y < h; y++) {
 80101b4:	fa0f f888 	sxth.w	r8, r8
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 80101b8:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 80101bc:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            for(y = 0; y < h; y++) {
 80101c0:	45c2      	cmp	sl, r8
 80101c2:	f2c0 82a0 	blt.w	8010706 <lv_draw_rect+0xe16>
    a.x1 = sh_area.x1;
 80101c6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 80101ca:	a91a      	add	r1, sp, #104	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 80101cc:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 80101ce:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1;
 80101d0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 80101d4:	3b01      	subs	r3, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1 + corner_size;
 80101dc:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80101e0:	4413      	add	r3, r2
 80101e2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
 80101e6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80101ea:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
 80101ec:	9a05      	ldr	r2, [sp, #20]
    a.y2 = sh_area.y2 - corner_size;
 80101ee:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 80101f2:	f002 ff7e 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d03d      	beq.n	8010276 <lv_draw_rect+0x986>
 80101fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101fc:	a918      	add	r1, sp, #96	; 0x60
 80101fe:	a81a      	add	r0, sp, #104	; 0x68
 8010200:	f003 f873 	bl	80132ea <_lv_area_is_in>
 8010204:	bbb8      	cbnz	r0, 8010276 <lv_draw_rect+0x986>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 8010206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010208:	b14b      	cbz	r3, 801021e <lv_draw_rect+0x92e>
 801020a:	9b06      	ldr	r3, [sp, #24]
 801020c:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 8010210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010214:	4293      	cmp	r3, r2
 8010216:	bfa8      	it	ge
 8010218:	4613      	movge	r3, r2
 801021a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801021e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
        lv_coord_t w = lv_area_get_width(&ca);
 8010222:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8010226:	3601      	adds	r6, #1
 8010228:	1af6      	subs	r6, r6, r3
 801022a:	b236      	sxth	r6, r6
        if(w > 0) {
 801022c:	2e00      	cmp	r6, #0
 801022e:	dd22      	ble.n	8010276 <lv_draw_rect+0x986>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010230:	f8bd a076 	ldrh.w	sl, [sp, #118]	; 0x76
            lv_area_copy(&fa, &ca);
 8010234:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 8010238:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
 801023c:	a91c      	add	r1, sp, #112	; 0x70
 801023e:	f10a 0a01 	add.w	sl, sl, #1
 8010242:	4640      	mov	r0, r8
            for(y = 0; y < h; y++) {
 8010244:	f04f 0900 	mov.w	r9, #0
 8010248:	ebaa 0a02 	sub.w	sl, sl, r2
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 801024c:	9a07      	ldr	r2, [sp, #28]
 801024e:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 8010250:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8010254:	fa0f fa8a 	sxth.w	sl, sl
 8010258:	1a9b      	subs	r3, r3, r2
 801025a:	9a07      	ldr	r2, [sp, #28]
 801025c:	fb02 3707 	mla	r7, r2, r7, r3
 8010260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010262:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 8010264:	f7ff fb15 	bl	800f892 <lv_area_copy>
            fa.y2 = fa.y1;
 8010268:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 801026c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 8010270:	45d1      	cmp	r9, sl
 8010272:	f2c0 8273 	blt.w	801075c <lv_draw_rect+0xe6c>
    a.x1 = sh_area.x1 + corner_size;
 8010276:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010278:	a91a      	add	r1, sp, #104	; 0x68
    a.x1 = sh_area.x1 + corner_size;
 801027a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 801027e:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1 + corner_size;
 8010280:	4413      	add	r3, r2
 8010282:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
 8010286:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801028a:	1a9b      	subs	r3, r3, r2
 801028c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1;
 8010290:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8010294:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y1 + corner_size - 1;
 8010298:	3b01      	subs	r3, #1
 801029a:	4413      	add	r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
 801029c:	9a05      	ldr	r2, [sp, #20]
    a.y2 = sh_area.y1 + corner_size - 1;
 801029e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 80102a2:	f002 ff26 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d03d      	beq.n	8010326 <lv_draw_rect+0xa36>
 80102aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102ac:	a918      	add	r1, sp, #96	; 0x60
 80102ae:	a81a      	add	r0, sp, #104	; 0x68
 80102b0:	f003 f81b 	bl	80132ea <_lv_area_is_in>
 80102b4:	bbb8      	cbnz	r0, 8010326 <lv_draw_rect+0xa36>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80102b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102b8:	b14b      	cbz	r3, 80102ce <lv_draw_rect+0x9de>
 80102ba:	9b06      	ldr	r3, [sp, #24]
 80102bc:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 80102c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102c4:	4293      	cmp	r3, r2
 80102c6:	bfa8      	it	ge
 80102c8:	4613      	movge	r3, r2
 80102ca:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80102ce:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
        lv_area_copy(&fa, &ca);
 80102d2:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 80102d6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80102da:	a91c      	add	r1, sp, #112	; 0x70
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80102dc:	f8bd b076 	ldrh.w	fp, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80102e0:	3701      	adds	r7, #1
        lv_coord_t h = lv_area_get_height(&ca);
 80102e2:	f9bd 6072 	ldrsh.w	r6, [sp, #114]	; 0x72
        lv_area_copy(&fa, &ca);
 80102e6:	4648      	mov	r0, r9
 80102e8:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80102ea:	f10b 0b01 	add.w	fp, fp, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80102ee:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
        for(y = 0; y < h; y++) {
 80102f2:	f04f 0800 	mov.w	r8, #0
 80102f6:	ebab 0b06 	sub.w	fp, fp, r6
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 80102fa:	9a07      	ldr	r2, [sp, #28]
 80102fc:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
 80102fe:	9b07      	ldr	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010300:	b23f      	sxth	r7, r7
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8010302:	f04f 0aff 	mov.w	sl, #255	; 0xff
        sh_buf_tmp = sh_buf + corner_size - 1;
 8010306:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010308:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 801030c:	fb02 3606 	mla	r6, r2, r6, r3
 8010310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010312:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 8010314:	f7ff fabd 	bl	800f892 <lv_area_copy>
        fa.y2 = fa.y1;
 8010318:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 801031c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(y = 0; y < h; y++) {
 8010320:	45d8      	cmp	r8, fp
 8010322:	f2c0 8248 	blt.w	80107b6 <lv_draw_rect+0xec6>
    a.x1 = sh_area.x1 + corner_size;
 8010326:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010328:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1 + corner_size;
 801032a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    a.y1 = sh_area.y2 - corner_size + 1;
 801032e:	9908      	ldr	r1, [sp, #32]
    a.x1 = sh_area.x1 + corner_size;
 8010330:	4413      	add	r3, r2
 8010332:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
 8010336:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801033a:	1a9b      	subs	r3, r3, r2
    a.y1 = sh_area.y2 - corner_size + 1;
 801033c:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    a.x2 = sh_area.x2 - corner_size;
 8010340:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
 8010344:	1c53      	adds	r3, r2, #1
    a.y2 = sh_area.y2;
 8010346:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    a.y1 = sh_area.y2 - corner_size + 1;
 801034a:	1a5b      	subs	r3, r3, r1
    has_com = _lv_area_intersect(&ca, &a, clip);
 801034c:	9a05      	ldr	r2, [sp, #20]
 801034e:	a91a      	add	r1, sp, #104	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 8010350:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010354:	f002 fecd 	bl	80130f2 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010358:	2800      	cmp	r0, #0
 801035a:	d03d      	beq.n	80103d8 <lv_draw_rect+0xae8>
 801035c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801035e:	a918      	add	r1, sp, #96	; 0x60
 8010360:	a81a      	add	r0, sp, #104	; 0x68
 8010362:	f002 ffc2 	bl	80132ea <_lv_area_is_in>
 8010366:	bbb8      	cbnz	r0, 80103d8 <lv_draw_rect+0xae8>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 8010368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801036a:	b14b      	cbz	r3, 8010380 <lv_draw_rect+0xa90>
 801036c:	9b06      	ldr	r3, [sp, #24]
 801036e:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8010372:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010376:	4293      	cmp	r3, r2
 8010378:	bfb8      	it	lt
 801037a:	4613      	movlt	r3, r2
 801037c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010380:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
        lv_area_copy(&fa, &ca);
 8010384:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 8010388:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801038c:	a91c      	add	r1, sp, #112	; 0x70
 801038e:	3701      	adds	r7, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010390:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010394:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
        lv_area_copy(&fa, &ca);
 8010398:	4648      	mov	r0, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801039a:	1aff      	subs	r7, r7, r3
        lv_coord_t h = lv_area_get_height(&ca);
 801039c:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
        for(y = 0; y < h; y++) {
 80103a0:	f04f 0800 	mov.w	r8, #0
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 80103a4:	f04f 0aff 	mov.w	sl, #255	; 0xff
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80103a8:	f103 0b01 	add.w	fp, r3, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 80103ac:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
 80103ae:	9b07      	ldr	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80103b0:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80103b2:	ebab 0b02 	sub.w	fp, fp, r2
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 80103b6:	9a07      	ldr	r2, [sp, #28]
        sh_buf_tmp = sh_buf + corner_size - 1;
 80103b8:	3b01      	subs	r3, #1
 80103ba:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 80103be:	fb02 3606 	mla	r6, r2, r6, r3
 80103c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103c4:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 80103c6:	f7ff fa64 	bl	800f892 <lv_area_copy>
        fa.y1 = fa.y2;
 80103ca:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 80103ce:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        for(y = 0; y < h; y++) {
 80103d2:	45d8      	cmp	r8, fp
 80103d4:	f2c0 8228 	blt.w	8010828 <lv_draw_rect+0xf38>
    a.x1 = sh_area.x1 + corner_size;
 80103d8:	9a08      	ldr	r2, [sp, #32]
    has_com = _lv_area_intersect(&ca, &a, clip);
 80103da:	a91a      	add	r1, sp, #104	; 0x68
    a.x1 = sh_area.x1 + corner_size;
 80103dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 80103e0:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1 + corner_size;
 80103e2:	4413      	add	r3, r2
 80103e4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x2 = sh_area.x2 - corner_size;
 80103e8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80103ec:	1a9b      	subs	r3, r3, r2
 80103ee:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a.y1 = sh_area.y1 + corner_size;
 80103f2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80103f6:	4413      	add	r3, r2
 80103f8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.y2 = sh_area.y2 - corner_size;
 80103fc:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8010400:	1a9b      	subs	r3, r3, r2
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010402:	9a05      	ldr	r2, [sp, #20]
    a.y2 = sh_area.y2 - corner_size;
 8010404:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 8010408:	f002 fe73 	bl	80130f2 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 801040c:	b330      	cbz	r0, 801045c <lv_draw_rect+0xb6c>
 801040e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010410:	bb23      	cbnz	r3, 801045c <lv_draw_rect+0xb6c>
 8010412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010414:	a918      	add	r1, sp, #96	; 0x60
 8010416:	a81a      	add	r0, sp, #104	; 0x68
 8010418:	f002 ff67 	bl	80132ea <_lv_area_is_in>
 801041c:	b9f0      	cbnz	r0, 801045c <lv_draw_rect+0xb6c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801041e:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
        lv_area_copy(&fa, &ca);
 8010422:	a91c      	add	r1, sp, #112	; 0x70
 8010424:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8010428:	a820      	add	r0, sp, #128	; 0x80
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801042a:	f8bd 8076 	ldrh.w	r8, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801042e:	3701      	adds	r7, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010430:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010434:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010436:	f108 0801 	add.w	r8, r8, #1
 801043a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801043e:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010440:	eba8 0803 	sub.w	r8, r8, r3
        lv_area_copy(&fa, &ca);
 8010444:	f7ff fa25 	bl	800f892 <lv_area_copy>
        fa.y2 = fa.y1;
 8010448:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 801044c:	fa0f f888 	sxth.w	r8, r8
        for(y = 0; y < h; y++) {
 8010450:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        fa.y2 = fa.y1;
 8010452:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(y = 0; y < h; y++) {
 8010456:	4546      	cmp	r6, r8
 8010458:	f2c0 821f 	blt.w	801089a <lv_draw_rect+0xfaa>
    lv_draw_mask_remove_id(mask_rout_id);
 801045c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801045e:	f7fe fddf 	bl	800f020 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8010462:	4628      	mov	r0, r5
 8010464:	f003 fbfc 	bl	8013c60 <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
 8010468:	9809      	ldr	r0, [sp, #36]	; 0x24
 801046a:	f003 fbf9 	bl	8013c60 <_lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801046e:	7b23      	ldrb	r3, [r4, #12]
 8010470:	2b02      	cmp	r3, #2
 8010472:	f240 80a6 	bls.w	80105c2 <lv_draw_rect+0xcd2>
    lv_area_copy(&coords_bg, coords);
 8010476:	9906      	ldr	r1, [sp, #24]
 8010478:	a818      	add	r0, sp, #96	; 0x60
 801047a:	f7ff fa0a 	bl	800f892 <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801047e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8010482:	2b01      	cmp	r3, #1
 8010484:	dd22      	ble.n	80104cc <lv_draw_rect+0xbdc>
 8010486:	7d23      	ldrb	r3, [r4, #20]
 8010488:	2bfc      	cmp	r3, #252	; 0xfc
 801048a:	d91f      	bls.n	80104cc <lv_draw_rect+0xbdc>
 801048c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8010490:	b1e3      	cbz	r3, 80104cc <lv_draw_rect+0xbdc>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8010492:	8a63      	ldrh	r3, [r4, #18]
 8010494:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8010498:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801049c:	440a      	add	r2, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801049e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 80104a2:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 80104a6:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80104aa:	440a      	add	r2, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 80104ac:	f3c3 01c0 	ubfx	r1, r3, #3, #1
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 80104b0:	f003 0301 	and.w	r3, r3, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 80104b4:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 80104b8:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 80104bc:	1a52      	subs	r2, r2, r1
 80104be:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 80104c2:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    lv_opa_t opa = dsc->bg_opa;
 80104cc:	7b27      	ldrb	r7, [r4, #12]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80104ce:	2ffe      	cmp	r7, #254	; 0xfe
 80104d0:	bf28      	it	cs
 80104d2:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80104d4:	f7fa fcca 	bl	800ae6c <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80104d8:	f002 fb00 	bl	8012adc <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 80104dc:	9a05      	ldr	r2, [sp, #20]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80104de:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 80104e0:	a918      	add	r1, sp, #96	; 0x60
 80104e2:	a81a      	add	r0, sp, #104	; 0x68
 80104e4:	f002 fe05 	bl	80130f2 <_lv_area_intersect>
    if(is_common == false) return;
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d06a      	beq.n	80105c2 <lv_draw_rect+0xcd2>
    draw_area.x1 -= disp_area->x1;
 80104ec:	f8bb 1010 	ldrh.w	r1, [fp, #16]
    draw_area.x2 -= disp_area->x1;
 80104f0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    draw_area.x1 -= disp_area->x1;
 80104f4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    draw_area.x2 -= disp_area->x1;
 80104f8:	1a5b      	subs	r3, r3, r1
    draw_area.y1 -= disp_area->y1;
 80104fa:	f8bb 5012 	ldrh.w	r5, [fp, #18]
    draw_area.x1 -= disp_area->x1;
 80104fe:	1a52      	subs	r2, r2, r1
    draw_area.y1 -= disp_area->y1;
 8010500:	f8bd 006a 	ldrh.w	r0, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
 8010504:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 8010506:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    draw_area.x1 -= disp_area->x1;
 801050a:	b292      	uxth	r2, r2
    draw_area.y1 -= disp_area->y1;
 801050c:	1b40      	subs	r0, r0, r5
    draw_area.x2 -= disp_area->x1;
 801050e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010512:	3301      	adds	r3, #1
    draw_area.y2 -= disp_area->y1;
 8010514:	1b49      	subs	r1, r1, r5
    draw_area.y1 -= disp_area->y1;
 8010516:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 801051a:	1a9b      	subs	r3, r3, r2
    draw_area.x1 -= disp_area->x1;
 801051c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    draw_area.y2 -= disp_area->y1;
 8010520:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
 8010524:	b21b      	sxth	r3, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010526:	4618      	mov	r0, r3
 8010528:	9309      	str	r3, [sp, #36]	; 0x24
 801052a:	f003 fd03 	bl	8013f34 <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 801052e:	88a3      	ldrh	r3, [r4, #4]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 8010530:	79a6      	ldrb	r6, [r4, #6]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010532:	4680      	mov	r8, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8010534:	8862      	ldrh	r2, [r4, #2]
 8010536:	429a      	cmp	r2, r3
 8010538:	bf08      	it	eq
 801053a:	2600      	moveq	r6, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 801053c:	f7fe fd9a 	bl	800f074 <lv_draw_mask_get_cnt>
 8010540:	b283      	uxth	r3, r0
 8010542:	930d      	str	r3, [sp, #52]	; 0x34
    if(other_mask_cnt) simple_mode = false;
 8010544:	2b00      	cmp	r3, #0
 8010546:	f040 81d0 	bne.w	80108ea <lv_draw_rect+0xffa>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 801054a:	1eb3      	subs	r3, r6, #2
 801054c:	bf18      	it	ne
 801054e:	2301      	movne	r3, #1
 8010550:	f8bd 9064 	ldrh.w	r9, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010554:	f8bd 5066 	ldrh.w	r5, [sp, #102]	; 0x66
    if(other_mask_cnt) simple_mode = false;
 8010558:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801055a:	f109 0901 	add.w	r9, r9, #1
 801055e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010562:	3501      	adds	r5, #1
 8010564:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010568:	eba9 0903 	sub.w	r9, r9, r3
    int32_t rout = dsc->radius;
 801056c:	f9b4 3000 	ldrsh.w	r3, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010570:	1aad      	subs	r5, r5, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010572:	fa0f f989 	sxth.w	r9, r9
    int32_t coords_h = lv_area_get_height(&coords_bg);
 8010576:	b22d      	sxth	r5, r5
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8010578:	454d      	cmp	r5, r9
 801057a:	bfa8      	it	ge
 801057c:	464d      	movge	r5, r9
    if(rout > short_side >> 1) rout = short_side >> 1;
 801057e:	106d      	asrs	r5, r5, #1
 8010580:	429d      	cmp	r5, r3
 8010582:	bfa8      	it	ge
 8010584:	461d      	movge	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8010586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 81b0 	beq.w	80108ee <lv_draw_rect+0xffe>
 801058e:	2d00      	cmp	r5, #0
 8010590:	f040 81ad 	bne.w	80108ee <lv_draw_rect+0xffe>
 8010594:	2e00      	cmp	r6, #0
 8010596:	f040 824d 	bne.w	8010a34 <lv_draw_rect+0x1144>
        _lv_blend_fill(clip, &coords_bg,
 801059a:	7b63      	ldrb	r3, [r4, #13]
 801059c:	a918      	add	r1, sp, #96	; 0x60
 801059e:	8862      	ldrh	r2, [r4, #2]
 80105a0:	9805      	ldr	r0, [sp, #20]
 80105a2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80105a6:	2301      	movs	r3, #1
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	4633      	mov	r3, r6
 80105ac:	f7fb fc36 	bl	800be1c <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80105b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105b4:	930e      	str	r3, [sp, #56]	; 0x38
    lv_draw_mask_remove_id(mask_rout_id);
 80105b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80105b8:	f7fe fd32 	bl	800f020 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 80105bc:	4640      	mov	r0, r8
 80105be:	f003 fb4f 	bl	8013c60 <_lv_mem_buf_release>
    if(dsc->pattern_image == NULL) return;
 80105c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f000 834d 	beq.w	8010c64 <lv_draw_rect+0x1374>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 80105ca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80105ce:	2b02      	cmp	r3, #2
 80105d0:	f240 8348 	bls.w	8010c64 <lv_draw_rect+0x1374>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 80105d4:	f7fc fe3c 	bl	800d250 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 80105d8:	2801      	cmp	r0, #1
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 80105da:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 80105dc:	f200 831b 	bhi.w	8010c16 <lv_draw_rect+0x1326>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 80105e0:	a927      	add	r1, sp, #156	; 0x9c
 80105e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80105e4:	f001 fdf6 	bl	80121d4 <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 80105e8:	2801      	cmp	r0, #1
 80105ea:	f040 833b 	bne.w	8010c64 <lv_draw_rect+0x1374>
        lv_draw_img_dsc_init(&img_dsc);
 80105ee:	a81c      	add	r0, sp, #112	; 0x70
        img_w = header.w;
 80105f0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
        img_h = header.h;
 80105f2:	f8bd 709e 	ldrh.w	r7, [sp, #158]	; 0x9e
        lv_draw_img_dsc_init(&img_dsc);
 80105f6:	f7fc fd1d 	bl	800d034 <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 80105fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        img_w = header.w;
 80105fe:	f3c5 258a 	ubfx	r5, r5, #10, #11
        img_h = header.h;
 8010602:	097f      	lsrs	r7, r7, #5
        img_dsc.opa = dsc->pattern_opa;
 8010604:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 8010608:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801060c:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
        img_dsc.recolor = dsc->pattern_recolor;
 8010610:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010612:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(img_w == 0 || img_h == 0) return;
 8010616:	2d00      	cmp	r5, #0
 8010618:	f000 8324 	beq.w	8010c64 <lv_draw_rect+0x1374>
 801061c:	2f00      	cmp	r7, #0
 801061e:	f000 8321 	beq.w	8010c64 <lv_draw_rect+0x1374>
 8010622:	fa1f fa87 	uxth.w	sl, r7
    if(dsc->pattern_repeat) {
 8010626:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801062a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801062e:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 8010632:	07d8      	lsls	r0, r3, #31
 8010634:	b2b6      	uxth	r6, r6
 8010636:	f140 847b 	bpl.w	8010f30 <lv_draw_rect+0x1640>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 801063a:	2300      	movs	r3, #0
 801063c:	9906      	ldr	r1, [sp, #24]
 801063e:	a820      	add	r0, sp, #128	; 0x80
 8010640:	f7fe fdaa 	bl	800f198 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8010644:	2100      	movs	r1, #0
 8010646:	a820      	add	r0, sp, #128	; 0x80
 8010648:	f7fe fcae 	bl	800efa8 <lv_draw_mask_add>
 801064c:	9b06      	ldr	r3, [sp, #24]
 801064e:	9a06      	ldr	r2, [sp, #24]
 8010650:	4683      	mov	fp, r0
 8010652:	889b      	ldrh	r3, [r3, #4]
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8010654:	2102      	movs	r1, #2
 8010656:	f8b2 9000 	ldrh.w	r9, [r2]
 801065a:	3301      	adds	r3, #1
 801065c:	eba3 0309 	sub.w	r3, r3, r9
 8010660:	b21b      	sxth	r3, r3
 8010662:	fb93 f9f5 	sdiv	r9, r3, r5
 8010666:	fb05 3919 	mls	r9, r5, r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801066a:	4613      	mov	r3, r2
 801066c:	8852      	ldrh	r2, [r2, #2]
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 801066e:	b2ad      	uxth	r5, r5
 8010670:	88db      	ldrh	r3, [r3, #6]
 8010672:	3301      	adds	r3, #1
 8010674:	1a9b      	subs	r3, r3, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 8010676:	b21b      	sxth	r3, r3
 8010678:	fb93 f0f7 	sdiv	r0, r3, r7
 801067c:	fb07 3710 	mls	r7, r7, r0, r3
 8010680:	fb97 f7f1 	sdiv	r7, r7, r1
        coords_tmp.y1 = coords->y1 - ofs_y;
 8010684:	1bd7      	subs	r7, r2, r7
 8010686:	b2bf      	uxth	r7, r7
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8010688:	fb99 f9f1 	sdiv	r9, r9, r1
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 801068c:	443e      	add	r6, r7
        coords_tmp.y1 = coords->y1 - ofs_y;
 801068e:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8010692:	f8ad 606e 	strh.w	r6, [sp, #110]	; 0x6e
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010696:	1e6e      	subs	r6, r5, #1
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8010698:	9b06      	ldr	r3, [sp, #24]
 801069a:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801069e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	f340 840c 	ble.w	8010ec0 <lv_draw_rect+0x15d0>
        lv_draw_mask_remove_id(radius_mask_id);
 80106a8:	4658      	mov	r0, fp
        lv_draw_mask_remove_id(radius_mask_id);
 80106aa:	f7fe fcb9 	bl	800f020 <lv_draw_mask_remove_id>
 80106ae:	e2d9      	b.n	8010c64 <lv_draw_rect+0x1374>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 80106b0:	4639      	mov	r1, r7
 80106b2:	4632      	mov	r2, r6
 80106b4:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 80106b6:	f10a 0a01 	add.w	sl, sl, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 80106ba:	f003 fb1d 	bl	8013cf8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80106be:	4633      	mov	r3, r6
 80106c0:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 80106c4:	4628      	mov	r0, r5
 80106c6:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 80106ca:	f7fe fc83 	bl	800efd4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80106ce:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80106d2:	2801      	cmp	r0, #1
 80106d4:	bf08      	it	eq
 80106d6:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80106d8:	8c22      	ldrh	r2, [r4, #32]
 80106da:	9302      	str	r3, [sp, #8]
 80106dc:	4649      	mov	r1, r9
 80106de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106e0:	e9cd 0300 	strd	r0, r3, [sp]
 80106e4:	462b      	mov	r3, r5
 80106e6:	9805      	ldr	r0, [sp, #20]
 80106e8:	f7fb fb98 	bl	800be1c <_lv_blend_fill>
                fa.y1++;
 80106ec:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80106f0:	3301      	adds	r3, #1
 80106f2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2++;
 80106f6:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 80106fa:	3301      	adds	r3, #1
 80106fc:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                sh_buf_tmp += corner_size;
 8010700:	9b07      	ldr	r3, [sp, #28]
 8010702:	441f      	add	r7, r3
 8010704:	e4fd      	b.n	8010102 <lv_draw_rect+0x812>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010706:	4639      	mov	r1, r7
 8010708:	4632      	mov	r2, r6
 801070a:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 801070c:	f10a 0a01 	add.w	sl, sl, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010710:	f003 faf2 	bl	8013cf8 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010714:	4633      	mov	r3, r6
 8010716:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 801071a:	4628      	mov	r0, r5
 801071c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 8010720:	f7fe fc58 	bl	800efd4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010724:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010728:	2801      	cmp	r0, #1
 801072a:	bf08      	it	eq
 801072c:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801072e:	8c22      	ldrh	r2, [r4, #32]
 8010730:	9302      	str	r3, [sp, #8]
 8010732:	4649      	mov	r1, r9
 8010734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010736:	e9cd 0300 	strd	r0, r3, [sp]
 801073a:	462b      	mov	r3, r5
 801073c:	9805      	ldr	r0, [sp, #20]
 801073e:	f7fb fb6d 	bl	800be1c <_lv_blend_fill>
                fa.y1--;
 8010742:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 8010746:	3b01      	subs	r3, #1
 8010748:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2--;
 801074c:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010750:	3b01      	subs	r3, #1
 8010752:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                sh_buf_tmp += corner_size;
 8010756:	9b07      	ldr	r3, [sp, #28]
 8010758:	441f      	add	r7, r3
 801075a:	e531      	b.n	80101c0 <lv_draw_rect+0x8d0>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 801075c:	4632      	mov	r2, r6
 801075e:	4639      	mov	r1, r7
 8010760:	4628      	mov	r0, r5
 8010762:	f003 fac9 	bl	8013cf8 <_lv_memcpy>
                if(simple_mode) {
 8010766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010768:	b1d3      	cbz	r3, 80107a0 <lv_draw_rect+0xeb0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 801076a:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 801076c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8010770:	4641      	mov	r1, r8
 8010772:	8c22      	ldrh	r2, [r4, #32]
            for(y = 0; y < h; y++) {
 8010774:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 8010778:	9302      	str	r3, [sp, #8]
 801077a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801077e:	e9cd 0300 	strd	r0, r3, [sp]
 8010782:	462b      	mov	r3, r5
 8010784:	9805      	ldr	r0, [sp, #20]
 8010786:	f7fb fb49 	bl	800be1c <_lv_blend_fill>
                fa.y1++;
 801078a:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 801078e:	3301      	adds	r3, #1
 8010790:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fa.y2++;
 8010794:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010798:	3301      	adds	r3, #1
 801079a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 801079e:	e567      	b.n	8010270 <lv_draw_rect+0x980>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80107a0:	4633      	mov	r3, r6
 80107a2:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 80107a6:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 80107aa:	4628      	mov	r0, r5
 80107ac:	f7fe fc12 	bl	800efd4 <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80107b0:	2801      	cmp	r0, #1
 80107b2:	d1db      	bne.n	801076c <lv_draw_rect+0xe7c>
 80107b4:	e7d9      	b.n	801076a <lv_draw_rect+0xe7a>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 80107b6:	7831      	ldrb	r1, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 80107b8:	29ff      	cmp	r1, #255	; 0xff
 80107ba:	d102      	bne.n	80107c2 <lv_draw_rect+0xed2>
 80107bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107be:	2bff      	cmp	r3, #255	; 0xff
 80107c0:	d025      	beq.n	801080e <lv_draw_rect+0xf1e>
 80107c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c4:	fb13 f101 	smulbb	r1, r3, r1
 80107c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
 80107cc:	463a      	mov	r2, r7
 80107ce:	4628      	mov	r0, r5
 80107d0:	f003 fc1e 	bl	8014010 <_lv_memset>
            if(simple_mode) {
 80107d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107d6:	b1e3      	cbz	r3, 8010812 <lv_draw_rect+0xf22>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 80107d8:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80107da:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80107de:	4649      	mov	r1, r9
 80107e0:	9000      	str	r0, [sp, #0]
        for(y = 0; y < h; y++) {
 80107e2:	f108 0801 	add.w	r8, r8, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80107e6:	8c22      	ldrh	r2, [r4, #32]
 80107e8:	9805      	ldr	r0, [sp, #20]
 80107ea:	e9cd a301 	strd	sl, r3, [sp, #4]
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7fb fb14 	bl	800be1c <_lv_blend_fill>
            fa.y1++;
 80107f4:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80107f8:	3301      	adds	r3, #1
 80107fa:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fa.y2++;
 80107fe:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010802:	3301      	adds	r3, #1
 8010804:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            sh_buf_tmp += corner_size;
 8010808:	9b07      	ldr	r3, [sp, #28]
 801080a:	441e      	add	r6, r3
 801080c:	e588      	b.n	8010320 <lv_draw_rect+0xa30>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 801080e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010810:	e7dc      	b.n	80107cc <lv_draw_rect+0xedc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010812:	463b      	mov	r3, r7
 8010814:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 8010818:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 801081c:	4628      	mov	r0, r5
 801081e:	f7fe fbd9 	bl	800efd4 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010822:	2801      	cmp	r0, #1
 8010824:	d1d9      	bne.n	80107da <lv_draw_rect+0xeea>
 8010826:	e7d7      	b.n	80107d8 <lv_draw_rect+0xee8>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8010828:	7831      	ldrb	r1, [r6, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 801082a:	29ff      	cmp	r1, #255	; 0xff
 801082c:	d102      	bne.n	8010834 <lv_draw_rect+0xf44>
 801082e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010830:	2bff      	cmp	r3, #255	; 0xff
 8010832:	d025      	beq.n	8010880 <lv_draw_rect+0xf90>
 8010834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010836:	fb13 f101 	smulbb	r1, r3, r1
 801083a:	f3c1 2107 	ubfx	r1, r1, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
 801083e:	463a      	mov	r2, r7
 8010840:	4628      	mov	r0, r5
 8010842:	f003 fbe5 	bl	8014010 <_lv_memset>
            if(simple_mode) {
 8010846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010848:	b1e3      	cbz	r3, 8010884 <lv_draw_rect+0xf94>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 801084a:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801084c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8010850:	4649      	mov	r1, r9
 8010852:	9000      	str	r0, [sp, #0]
        for(y = 0; y < h; y++) {
 8010854:	f108 0801 	add.w	r8, r8, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010858:	8c22      	ldrh	r2, [r4, #32]
 801085a:	9805      	ldr	r0, [sp, #20]
 801085c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010860:	462b      	mov	r3, r5
 8010862:	f7fb fadb 	bl	800be1c <_lv_blend_fill>
            fa.y1--;
 8010866:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 801086a:	3b01      	subs	r3, #1
 801086c:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fa.y2--;
 8010870:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010874:	3b01      	subs	r3, #1
 8010876:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            sh_buf_tmp += corner_size;
 801087a:	9b07      	ldr	r3, [sp, #28]
 801087c:	441e      	add	r6, r3
 801087e:	e5a8      	b.n	80103d2 <lv_draw_rect+0xae2>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8010880:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010882:	e7dc      	b.n	801083e <lv_draw_rect+0xf4e>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010884:	463b      	mov	r3, r7
 8010886:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 801088a:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 801088e:	4628      	mov	r0, r5
 8010890:	f7fe fba0 	bl	800efd4 <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010894:	2801      	cmp	r0, #1
 8010896:	d1d9      	bne.n	801084c <lv_draw_rect+0xf5c>
 8010898:	e7d7      	b.n	801084a <lv_draw_rect+0xf5a>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 801089a:	463a      	mov	r2, r7
 801089c:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80108a0:	4628      	mov	r0, r5
        for(y = 0; y < h; y++) {
 80108a2:	3601      	adds	r6, #1
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 80108a4:	f003 fbb4 	bl	8014010 <_lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80108a8:	463b      	mov	r3, r7
 80108aa:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
 80108ae:	4628      	mov	r0, r5
 80108b0:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
 80108b4:	f7fe fb8e 	bl	800efd4 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80108b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80108bc:	2801      	cmp	r0, #1
 80108be:	bf08      	it	eq
 80108c0:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80108c2:	8c22      	ldrh	r2, [r4, #32]
 80108c4:	a920      	add	r1, sp, #128	; 0x80
 80108c6:	9000      	str	r0, [sp, #0]
 80108c8:	9805      	ldr	r0, [sp, #20]
 80108ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80108ce:	462b      	mov	r3, r5
 80108d0:	f7fb faa4 	bl	800be1c <_lv_blend_fill>
            fa.y1++;
 80108d4:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80108d8:	3301      	adds	r3, #1
 80108da:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            fa.y2++;
 80108de:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 80108e2:	3301      	adds	r3, #1
 80108e4:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
 80108e8:	e5b5      	b.n	8010456 <lv_draw_rect+0xb66>
    if(other_mask_cnt) simple_mode = false;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e630      	b.n	8010550 <lv_draw_rect+0xc60>
        if(rout > 0) {
 80108ee:	2d00      	cmp	r5, #0
 80108f0:	f340 80a0 	ble.w	8010a34 <lv_draw_rect+0x1144>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 80108f4:	2300      	movs	r3, #0
 80108f6:	462a      	mov	r2, r5
 80108f8:	a918      	add	r1, sp, #96	; 0x60
 80108fa:	a827      	add	r0, sp, #156	; 0x9c
 80108fc:	f7fe fc4c 	bl	800f198 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8010900:	2100      	movs	r1, #0
 8010902:	a827      	add	r0, sp, #156	; 0x9c
 8010904:	f7fe fb50 	bl	800efa8 <lv_draw_mask_add>
 8010908:	900e      	str	r0, [sp, #56]	; 0x38
        lv_color_t grad_color = dsc->bg_color;
 801090a:	8863      	ldrh	r3, [r4, #2]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 801090c:	2e02      	cmp	r6, #2
        lv_color_t grad_color = dsc->bg_color;
 801090e:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 8010912:	f040 809f 	bne.w	8010a54 <lv_draw_rect+0x1164>
            for(i = 0; i < coords_w; i++) {
 8010916:	f04f 0a00 	mov.w	sl, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 801091a:	ea4f 0049 	mov.w	r0, r9, lsl #1
 801091e:	f003 fb09 	bl	8013f34 <_lv_mem_buf_get>
 8010922:	900b      	str	r0, [sp, #44]	; 0x2c
            for(i = 0; i < coords_w; i++) {
 8010924:	45d1      	cmp	r9, sl
 8010926:	f300 8089 	bgt.w	8010a3c <lv_draw_rect+0x114c>
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 801092a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801092e:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010932:	1c53      	adds	r3, r2, #1
        fill_area.x2 = coords_bg.x2;
 8010934:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8010938:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801093c:	1a5b      	subs	r3, r3, r1
        fill_area.x1 = coords_bg.x1;
 801093e:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010942:	9207      	str	r2, [sp, #28]
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 8010944:	b21b      	sxth	r3, r3
 8010946:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 801094a:	9310      	str	r3, [sp, #64]	; 0x40
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 801094c:	f8bb 3012 	ldrh.w	r3, [fp, #18]
 8010950:	4413      	add	r3, r2
 8010952:	b21b      	sxth	r3, r3
 8010954:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
 8010958:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 801095c:	b2ab      	uxth	r3, r5
 801095e:	930f      	str	r3, [sp, #60]	; 0x3c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010960:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8010964:	9a07      	ldr	r2, [sp, #28]
 8010966:	429a      	cmp	r2, r3
 8010968:	dd77      	ble.n	8010a5a <lv_draw_rect+0x116a>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 801096a:	2e00      	cmp	r6, #0
 801096c:	d15a      	bne.n	8010a24 <lv_draw_rect+0x1134>
 801096e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010970:	2b00      	cmp	r3, #0
 8010972:	d157      	bne.n	8010a24 <lv_draw_rect+0x1134>
 8010974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010976:	2b32      	cmp	r3, #50	; 0x32
 8010978:	dd54      	ble.n	8010a24 <lv_draw_rect+0x1134>
            fill_area.x1 = coords_bg.x1 + rout;
 801097a:	b2ad      	uxth	r5, r5
 801097c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 8010980:	8862      	ldrh	r2, [r4, #2]
 8010982:	a91c      	add	r1, sp, #112	; 0x70
            fill_area.x1 = coords_bg.x1 + rout;
 8010984:	442b      	add	r3, r5
            _lv_blend_fill(clip, &fill_area,
 8010986:	9805      	ldr	r0, [sp, #20]
            _lv_blend_fill(clip, &fill_area,
 8010988:	2601      	movs	r6, #1
            fill_area.x1 = coords_bg.x1 + rout;
 801098a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.x2 = coords_bg.x2 - rout;
 801098e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010992:	1b5b      	subs	r3, r3, r5
 8010994:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            fill_area.y1 = coords_bg.y1;
 8010998:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801099c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2 = coords_bg.y1 + rout;
 80109a0:	442b      	add	r3, r5
 80109a2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
 80109a6:	7b63      	ldrb	r3, [r4, #13]
 80109a8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80109ac:	2301      	movs	r3, #1
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109b2:	f7fb fa33 	bl	800be1c <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 80109b6:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 80109ba:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
            fill_area.y1 = coords_bg.y2 - rout;
 80109be:	1b4a      	subs	r2, r1, r5
            fill_area.y2 = coords_bg.y2;
 80109c0:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
 80109c4:	9805      	ldr	r0, [sp, #20]
 80109c6:	a91c      	add	r1, sp, #112	; 0x70
            fill_area.y1 = coords_bg.y2 - rout;
 80109c8:	b212      	sxth	r2, r2
            _lv_blend_fill(clip, &fill_area,
 80109ca:	9600      	str	r6, [sp, #0]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 80109cc:	429a      	cmp	r2, r3
            fill_area.y1 = coords_bg.y2 - rout;
 80109ce:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 80109d2:	8862      	ldrh	r2, [r4, #2]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 80109d4:	bfdc      	itt	le
 80109d6:	3301      	addle	r3, #1
 80109d8:	f8ad 3072 	strhle.w	r3, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 80109dc:	7b63      	ldrb	r3, [r4, #13]
 80109de:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80109e2:	2300      	movs	r3, #0
 80109e4:	f7fb fa1a 	bl	800be1c <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 80109e8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 80109ec:	9600      	str	r6, [sp, #0]
 80109ee:	a91c      	add	r1, sp, #112	; 0x70
            fill_area.x1 = coords_bg.x1;
 80109f0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.x2 = coords_bg.x2;
 80109f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            _lv_blend_fill(clip, &fill_area,
 80109f8:	8862      	ldrh	r2, [r4, #2]
            fill_area.x2 = coords_bg.x2;
 80109fa:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            fill_area.y1 = coords_bg.y1 + rout + 1;
 80109fe:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
            _lv_blend_fill(clip, &fill_area,
 8010a02:	9805      	ldr	r0, [sp, #20]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8010a04:	4433      	add	r3, r6
 8010a06:	442b      	add	r3, r5
 8010a08:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8010a0c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8010a10:	3b01      	subs	r3, #1
 8010a12:	1b5d      	subs	r5, r3, r5
            _lv_blend_fill(clip, &fill_area,
 8010a14:	7b63      	ldrb	r3, [r4, #13]
 8010a16:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010a1a:	2300      	movs	r3, #0
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8010a1c:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fill_area,
 8010a20:	f7fb f9fc 	bl	800be1c <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
 8010a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f43f adc5 	beq.w	80105b6 <lv_draw_rect+0xcc6>
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f003 f917 	bl	8013c60 <_lv_mem_buf_release>
 8010a32:	e5c0      	b.n	80105b6 <lv_draw_rect+0xcc6>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8010a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a38:	930e      	str	r3, [sp, #56]	; 0x38
 8010a3a:	e766      	b.n	801090a <lv_draw_rect+0x101a>
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010a3c:	fa0f f28a 	sxth.w	r2, sl
 8010a40:	4649      	mov	r1, r9
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7fe fbd2 	bl	800f1ec <grad_get>
 8010a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a4a:	f823 001a 	strh.w	r0, [r3, sl, lsl #1]
            for(i = 0; i < coords_w; i++) {
 8010a4e:	f10a 0a01 	add.w	sl, sl, #1
 8010a52:	e767      	b.n	8010924 <lv_draw_rect+0x1034>
        lv_color_t * grad_map = NULL;
 8010a54:	2300      	movs	r3, #0
 8010a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a58:	e767      	b.n	801092a <lv_draw_rect+0x103a>
            int32_t y = h + vdb->area.y1;
 8010a5a:	9a07      	ldr	r2, [sp, #28]
 8010a5c:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 8010a60:	4413      	add	r3, r2
 8010a62:	930c      	str	r3, [sp, #48]	; 0x30
            if(y > coords_bg.y1 + rout + 1 &&
 8010a64:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8010a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a6a:	442b      	add	r3, r5
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	dd09      	ble.n	8010a86 <lv_draw_rect+0x1196>
               y < coords_bg.y2 - rout - 1) {
 8010a72:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8010a76:	1b5b      	subs	r3, r3, r5
 8010a78:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	da03      	bge.n	8010a86 <lv_draw_rect+0x1196>
                if(simple_mode == false) {
 8010a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f040 83aa 	bne.w	80111da <lv_draw_rect+0x18ea>
                _lv_memset(mask_buf, opa, draw_area_w);
 8010a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a88:	4639      	mov	r1, r7
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	f003 fac0 	bl	8014010 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010a90:	9b07      	ldr	r3, [sp, #28]
 8010a92:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 8010a96:	4640      	mov	r0, r8
 8010a98:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 8010a9c:	441a      	add	r2, r3
 8010a9e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8010aa2:	4419      	add	r1, r3
 8010aa4:	b212      	sxth	r2, r2
 8010aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aa8:	b209      	sxth	r1, r1
 8010aaa:	f7fe fa93 	bl	800efd4 <lv_draw_mask_apply>
            opa2 = opa;
 8010aae:	2802      	cmp	r0, #2
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010ab0:	4681      	mov	r9, r0
            opa2 = opa;
 8010ab2:	bf14      	ite	ne
 8010ab4:	46ba      	movne	sl, r7
 8010ab6:	f04f 0aff 	moveq.w	sl, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
 8010aba:	2e01      	cmp	r6, #1
 8010abc:	d179      	bne.n	8010bb2 <lv_draw_rect+0x12c2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010abe:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8010ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010aca:	3101      	adds	r1, #1
 8010acc:	1ad2      	subs	r2, r2, r3
 8010ace:	1ac9      	subs	r1, r1, r3
 8010ad0:	b212      	sxth	r2, r2
 8010ad2:	b209      	sxth	r1, r1
 8010ad4:	f7fe fb8a 	bl	800f1ec <grad_get>
            if(simple_mode && split &&
 8010ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 8010ada:	f8ad 0020 	strh.w	r0, [sp, #32]
            if(simple_mode && split &&
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f000 808f 	beq.w	8010c02 <lv_draw_rect+0x1312>
 8010ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ae6:	2b32      	cmp	r3, #50	; 0x32
 8010ae8:	dd6e      	ble.n	8010bc8 <lv_draw_rect+0x12d8>
               (y < coords_bg.y1 + rout + 1 ||
 8010aea:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
            if(simple_mode && split &&
 8010aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
               (y < coords_bg.y1 + rout + 1 ||
 8010af0:	442b      	add	r3, r5
            if(simple_mode && split &&
 8010af2:	429a      	cmp	r2, r3
 8010af4:	dd04      	ble.n	8010b00 <lv_draw_rect+0x1210>
                y > coords_bg.y2 - rout - 1)) {
 8010af6:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8010afa:	1b5b      	subs	r3, r3, r5
               (y < coords_bg.y1 + rout + 1 ||
 8010afc:	429a      	cmp	r2, r3
 8010afe:	db63      	blt.n	8010bc8 <lv_draw_rect+0x12d8>
                fill_area2.x1 = coords_bg.x1;
 8010b00:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
                _lv_blend_fill(clip, &fill_area2,
 8010b04:	a920      	add	r1, sp, #128	; 0x80
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8010b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                fill_area2.x1 = coords_bg.x1;
 8010b08:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8010b0c:	3b01      	subs	r3, #1
                _lv_blend_fill(clip, &fill_area2,
 8010b0e:	f8cd 9000 	str.w	r9, [sp]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8010b12:	4413      	add	r3, r2
                _lv_blend_fill(clip, &fill_area2,
 8010b14:	9805      	ldr	r0, [sp, #20]
 8010b16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8010b1a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
                fill_area2.y1 = fill_area.y1;
 8010b1e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8010b22:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                fill_area2.y2 = fill_area.y2;
 8010b26:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 8010b2a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
                _lv_blend_fill(clip, &fill_area2,
 8010b2e:	7b63      	ldrb	r3, [r4, #13]
 8010b30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b34:	4643      	mov	r3, r8
 8010b36:	f7fb f971 	bl	800be1c <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 8010b3a:	2e01      	cmp	r6, #1
 8010b3c:	d115      	bne.n	8010b6a <lv_draw_rect+0x127a>
                    fill_area2.x1 = coords_bg.x1 + rout;
 8010b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                    _lv_blend_fill(clip, &fill_area2,
 8010b40:	a920      	add	r1, sp, #128	; 0x80
                    fill_area2.x1 = coords_bg.x1 + rout;
 8010b42:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
 8010b46:	9600      	str	r6, [sp, #0]
                    fill_area2.x1 = coords_bg.x1 + rout;
 8010b48:	4413      	add	r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 8010b4a:	9805      	ldr	r0, [sp, #20]
                    fill_area2.x1 = coords_bg.x1 + rout;
 8010b4c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                    fill_area2.x2 = coords_bg.x2 - rout;
 8010b50:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010b54:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 8010b56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                    fill_area2.x2 = coords_bg.x2 - rout;
 8010b5a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
                    _lv_blend_fill(clip, &fill_area2,
 8010b5e:	7b63      	ldrb	r3, [r4, #13]
 8010b60:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010b64:	2300      	movs	r3, #0
 8010b66:	f7fb f959 	bl	800be1c <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010b6a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8010b6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010b70:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
 8010b72:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010b76:	1b5b      	subs	r3, r3, r5
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010b78:	1a52      	subs	r2, r2, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010b7a:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8010b7e:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010b80:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010b84:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
                _lv_blend_fill(clip, &fill_area2,
 8010b88:	f8cd 9000 	str.w	r9, [sp]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010b8c:	440a      	add	r2, r1
                _lv_blend_fill(clip, &fill_area2,
 8010b8e:	a920      	add	r1, sp, #128	; 0x80
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010b90:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
 8010b92:	7b62      	ldrb	r2, [r4, #13]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bfac      	ite	ge
 8010b98:	4443      	addge	r3, r8
 8010b9a:	f108 0300 	addlt.w	r3, r8, #0
 8010b9e:	e9cd a201 	strd	sl, r2, [sp, #4]
 8010ba2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                    _lv_blend_fill(clip, &fill_area,
 8010ba6:	9805      	ldr	r0, [sp, #20]
 8010ba8:	f7fb f938 	bl	800be1c <_lv_blend_fill>
 8010bac:	e019      	b.n	8010be2 <lv_draw_rect+0x12f2>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8010bae:	46b1      	mov	r9, r6
 8010bb0:	e785      	b.n	8010abe <lv_draw_rect+0x11ce>
            if(simple_mode && split &&
 8010bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d195      	bne.n	8010ae4 <lv_draw_rect+0x11f4>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8010bb8:	2e02      	cmp	r6, #2
 8010bba:	d007      	beq.n	8010bcc <lv_draw_rect+0x12dc>
                else if(other_mask_cnt != 0 || !split) {
 8010bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bbe:	bb03      	cbnz	r3, 8010c02 <lv_draw_rect+0x1312>
 8010bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bc2:	2b32      	cmp	r3, #50	; 0x32
 8010bc4:	dc0d      	bgt.n	8010be2 <lv_draw_rect+0x12f2>
 8010bc6:	e01c      	b.n	8010c02 <lv_draw_rect+0x1312>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8010bc8:	2e02      	cmp	r6, #2
 8010bca:	d118      	bne.n	8010bfe <lv_draw_rect+0x130e>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 8010bcc:	7b63      	ldrb	r3, [r4, #13]
 8010bce:	a91c      	add	r1, sp, #112	; 0x70
 8010bd0:	f8cd 9000 	str.w	r9, [sp]
 8010bd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bd6:	9805      	ldr	r0, [sp, #20]
 8010bd8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010bdc:	4643      	mov	r3, r8
 8010bde:	f7fb fbb7 	bl	800c350 <_lv_blend_map>
            fill_area.y1++;
 8010be2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8010be6:	3301      	adds	r3, #1
 8010be8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
 8010bec:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010bf6:	9b07      	ldr	r3, [sp, #28]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	9307      	str	r3, [sp, #28]
 8010bfc:	e6b0      	b.n	8010960 <lv_draw_rect+0x1070>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 8010bfe:	2e01      	cmp	r6, #1
 8010c00:	d1dc      	bne.n	8010bbc <lv_draw_rect+0x12cc>
                    _lv_blend_fill(clip, &fill_area,
 8010c02:	7b63      	ldrb	r3, [r4, #13]
 8010c04:	a91c      	add	r1, sp, #112	; 0x70
 8010c06:	f8cd 9000 	str.w	r9, [sp]
 8010c0a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010c0e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010c12:	4643      	mov	r3, r8
 8010c14:	e7c7      	b.n	8010ba6 <lv_draw_rect+0x12b6>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8010c16:	2802      	cmp	r0, #2
 8010c18:	d11e      	bne.n	8010c58 <lv_draw_rect+0x1368>
        lv_draw_label_dsc_init(&label_dsc);
 8010c1a:	a827      	add	r0, sp, #156	; 0x9c
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8010c1c:	2500      	movs	r5, #0
        lv_draw_label_dsc_init(&label_dsc);
 8010c1e:	f7fc fb3b 	bl	800d298 <lv_draw_label_dsc_init>
        label_dsc.color = dsc->pattern_recolor;
 8010c22:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8010c24:	f647 4118 	movw	r1, #31768	; 0x7c18
        label_dsc.font = dsc->pattern_font;
 8010c28:	6b22      	ldr	r2, [r4, #48]	; 0x30
        label_dsc.color = dsc->pattern_recolor;
 8010c2a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8010c2e:	a820      	add	r0, sp, #128	; 0x80
        label_dsc.opa = dsc->pattern_opa;
 8010c30:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        label_dsc.font = dsc->pattern_font;
 8010c34:	9229      	str	r2, [sp, #164]	; 0xa4
        label_dsc.opa = dsc->pattern_opa;
 8010c36:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8010c3a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8010c3e:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8010c42:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	; 0xaa
 8010c46:	9100      	str	r1, [sp, #0]
 8010c48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010c4a:	f004 f9ed 	bl	8015028 <_lv_txt_get_size>
        img_w = s.x;
 8010c4e:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
        img_h = s.y;
 8010c52:	f9bd 7082 	ldrsh.w	r7, [sp, #130]	; 0x82
 8010c56:	e4de      	b.n	8010616 <lv_draw_rect+0xd26>
        lv_draw_img(coords, clip, NULL, NULL);
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	f7fc fa22 	bl	800d0a8 <lv_draw_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8010c64:	7d23      	ldrb	r3, [r4, #20]
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d96c      	bls.n	8010d44 <lv_draw_rect+0x1454>
    if(dsc->border_width == 0) return;
 8010c6a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d068      	beq.n	8010d44 <lv_draw_rect+0x1454>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8010c72:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d064      	beq.n	8010d44 <lv_draw_rect+0x1454>
    if(dsc->border_post) return;
 8010c7a:	7da3      	ldrb	r3, [r4, #22]
 8010c7c:	07d9      	lsls	r1, r3, #31
 8010c7e:	d461      	bmi.n	8010d44 <lv_draw_rect+0x1454>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c80:	9b06      	ldr	r3, [sp, #24]
    lv_area_copy(&area_inner, coords);
 8010c82:	a818      	add	r0, sp, #96	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010c84:	9906      	ldr	r1, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c86:	889d      	ldrh	r5, [r3, #4]
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010c8c:	8849      	ldrh	r1, [r1, #2]
    int32_t rout = dsc->radius;
 8010c8e:	f9b4 2000 	ldrsh.w	r2, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c92:	1aed      	subs	r5, r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010c94:	9b06      	ldr	r3, [sp, #24]
 8010c96:	88db      	ldrh	r3, [r3, #6]
    int32_t coords_w = lv_area_get_width(coords);
 8010c98:	b22d      	sxth	r5, r5
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	1a5b      	subs	r3, r3, r1
    lv_area_copy(&area_inner, coords);
 8010c9e:	9906      	ldr	r1, [sp, #24]
    int32_t coords_h = lv_area_get_height(coords);
 8010ca0:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8010ca2:	429d      	cmp	r5, r3
 8010ca4:	bfa8      	it	ge
 8010ca6:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 8010ca8:	106d      	asrs	r5, r5, #1
 8010caa:	4295      	cmp	r5, r2
 8010cac:	bfa8      	it	ge
 8010cae:	4615      	movge	r5, r2
    lv_area_copy(&area_inner, coords);
 8010cb0:	f7fe fdef 	bl	800f892 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8010cb4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8010cb8:	8a23      	ldrh	r3, [r4, #16]
 8010cba:	b288      	uxth	r0, r1
 8010cbc:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8010cc0:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8010cc4:	f010 0f04 	tst.w	r0, #4
 8010cc8:	f894 a014 	ldrb.w	sl, [r4, #20]
 8010ccc:	bf09      	itett	eq
 8010cce:	18ea      	addeq	r2, r5, r3
 8010cd0:	461a      	movne	r2, r3
 8010cd2:	4252      	negeq	r2, r2
 8010cd4:	b292      	uxtheq	r2, r2
 8010cd6:	4432      	add	r2, r6
 8010cd8:	461e      	mov	r6, r3
 8010cda:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8010cde:	0702      	lsls	r2, r0, #28
 8010ce0:	bf57      	itett	pl
 8010ce2:	195a      	addpl	r2, r3, r5
 8010ce4:	461a      	movmi	r2, r3
 8010ce6:	4252      	negpl	r2, r2
 8010ce8:	b292      	uxthpl	r2, r2
 8010cea:	1aba      	subs	r2, r7, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8010cec:	f8bd 7062 	ldrh.w	r7, [sp, #98]	; 0x62
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8010cf0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8010cf4:	0782      	lsls	r2, r0, #30
 8010cf6:	bf57      	itett	pl
 8010cf8:	195a      	addpl	r2, r3, r5
 8010cfa:	461a      	movmi	r2, r3
 8010cfc:	4252      	negpl	r2, r2
 8010cfe:	b292      	uxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8010d00:	07c0      	lsls	r0, r0, #31
 8010d02:	bf58      	it	pl
 8010d04:	195b      	addpl	r3, r3, r5
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8010d06:	443a      	add	r2, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8010d08:	bf58      	it	pl
 8010d0a:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8010d0c:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8010d10:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 8010d14:	bf58      	it	pl
 8010d16:	b29e      	uxthpl	r6, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8010d18:	290f      	cmp	r1, #15
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8010d1a:	eba2 0306 	sub.w	r3, r2, r6
 8010d1e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8010d22:	f040 8166 	bne.w	8010ff2 <lv_draw_rect+0x1702>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 8010d26:	7d62      	ldrb	r2, [r4, #21]
 8010d28:	a818      	add	r0, sp, #96	; 0x60
 8010d2a:	f9b4 3000 	ldrsh.w	r3, [r4]
 8010d2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010d32:	89e2      	ldrh	r2, [r4, #14]
 8010d34:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	9200      	str	r2, [sp, #0]
 8010d3c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8010d40:	f7fe fb5c 	bl	800f3fc <draw_full_border>
    if(dsc->value_str == NULL) return;
 8010d44:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	d060      	beq.n	8010e0c <lv_draw_rect+0x151c>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 8010d4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d95c      	bls.n	8010e0c <lv_draw_rect+0x151c>
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 8010d52:	2600      	movs	r6, #0
 8010d54:	f647 4218 	movw	r2, #31768	; 0x7c18
 8010d58:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	a81a      	add	r0, sp, #104	; 0x68
 8010d60:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8010d64:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
 8010d68:	9200      	str	r2, [sp, #0]
 8010d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010d6c:	f004 f95c 	bl	8015028 <_lv_txt_get_size>
    value_area.x2 = s.x - 1;
 8010d70:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 8010d74:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8010d78:	a920      	add	r1, sp, #128	; 0x80
    value_area.x2 = s.x - 1;
 8010d7a:	3b01      	subs	r3, #1
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 8010d7c:	9806      	ldr	r0, [sp, #24]
    value_area.x1 = 0;
 8010d7e:	9620      	str	r6, [sp, #128]	; 0x80
    value_area.x2 = s.x - 1;
 8010d80:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    value_area.y2 = s.y - 1;
 8010d84:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 8010d8e:	ab1c      	add	r3, sp, #112	; 0x70
 8010d90:	f002 faf4 	bl	801337c <_lv_area_align>
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 8010d94:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010d98:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    lv_draw_label_dsc_init(&label_dsc);
 8010d9c:	a827      	add	r0, sp, #156	; 0x9c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 8010d9e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 8010da2:	441a      	add	r2, r3
 8010da4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8010da8:	b292      	uxth	r2, r2
 8010daa:	4413      	add	r3, r2
 8010dac:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 8010db0:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8010db4:	440b      	add	r3, r1
 8010db6:	f8bd 1082 	ldrh.w	r1, [sp, #130]	; 0x82
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	4419      	add	r1, r3
 8010dbe:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 8010dc2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8010dc6:	440a      	add	r2, r1
 8010dc8:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 8010dcc:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
 8010dd0:	4413      	add	r3, r2
 8010dd2:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    lv_draw_label_dsc_init(&label_dsc);
 8010dd6:	f7fc fa5f 	bl	800d298 <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 8010dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 8010ddc:	aa27      	add	r2, sp, #156	; 0x9c
 8010dde:	9600      	str	r6, [sp, #0]
 8010de0:	a820      	add	r0, sp, #128	; 0x80
    label_dsc.font = dsc->value_font;
 8010de2:	9329      	str	r3, [sp, #164]	; 0xa4
    label_dsc.letter_space = dsc->value_letter_space;
 8010de4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 8010de8:	9905      	ldr	r1, [sp, #20]
    label_dsc.letter_space = dsc->value_letter_space;
 8010dea:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
    label_dsc.line_space = dsc->value_line_space;
 8010dee:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8010df2:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
    label_dsc.color = dsc->value_color;
 8010df6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8010dfa:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    label_dsc.opa = dsc->value_opa;
 8010dfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e02:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 8010e06:	462b      	mov	r3, r5
 8010e08:	f7fc fa5c 	bl	800d2c4 <lv_draw_label>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8010e0c:	7fa3      	ldrb	r3, [r4, #30]
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d953      	bls.n	8010eba <lv_draw_rect+0x15ca>
    if(dsc->outline_width == 0) return;
 8010e12:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d04f      	beq.n	8010eba <lv_draw_rect+0x15ca>
    lv_area_copy(&area_inner, coords);
 8010e1a:	9906      	ldr	r1, [sp, #24]
 8010e1c:	a820      	add	r0, sp, #128	; 0x80
 8010e1e:	f7fe fd38 	bl	800f892 <lv_area_copy>
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 8010e22:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
    area_inner.x1 -= pad;
 8010e26:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
    lv_area_copy(&area_outer, &area_inner);
 8010e2a:	a920      	add	r1, sp, #128	; 0x80
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 8010e2c:	2b00      	cmp	r3, #0
    lv_area_copy(&area_outer, &area_inner);
 8010e2e:	a827      	add	r0, sp, #156	; 0x9c
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 8010e30:	bf08      	it	eq
 8010e32:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    area_inner.x1 -= pad;
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	1ad2      	subs	r2, r2, r3
 8010e3a:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    area_inner.y1 -= pad;
 8010e3e:	f8bd 2082 	ldrh.w	r2, [sp, #130]	; 0x82
 8010e42:	1ad2      	subs	r2, r2, r3
 8010e44:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
    area_inner.x2 += pad;
 8010e48:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8010e4c:	441a      	add	r2, r3
 8010e4e:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    area_inner.y2 += pad;
 8010e52:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
 8010e56:	4413      	add	r3, r2
 8010e58:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    lv_area_copy(&area_outer, &area_inner);
 8010e5c:	f7fe fd19 	bl	800f892 <lv_area_copy>
    lv_coord_t width = (dsc->outline_pad == 0 ? (dsc->outline_width + 1) : dsc->outline_width);
 8010e60:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f040 81b5 	bne.w	80111d4 <lv_draw_rect+0x18e4>
 8010e6a:	8b63      	ldrh	r3, [r4, #26]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	b21b      	sxth	r3, r3
    area_outer.x1 -= width;
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 8010e76:	a927      	add	r1, sp, #156	; 0x9c
 8010e78:	a820      	add	r0, sp, #128	; 0x80
    area_outer.x1 -= width;
 8010e7a:	1ad2      	subs	r2, r2, r3
 8010e7c:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
    area_outer.x2 += width;
 8010e80:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 8010e84:	441a      	add	r2, r3
 8010e86:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    area_outer.y1 -= width;
 8010e8a:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
 8010e8e:	1ad2      	subs	r2, r2, r3
 8010e90:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
    area_outer.y2 += width;
 8010e94:	f8bd 20a2 	ldrh.w	r2, [sp, #162]	; 0xa2
 8010e98:	4413      	add	r3, r2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 8010e9a:	7fe2      	ldrb	r2, [r4, #31]
 8010e9c:	9203      	str	r2, [sp, #12]
 8010e9e:	7fa2      	ldrb	r2, [r4, #30]
    area_outer.y2 += width;
 8010ea0:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 8010ea4:	9202      	str	r2, [sp, #8]
 8010ea6:	8b22      	ldrh	r2, [r4, #24]
 8010ea8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8010eac:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	9200      	str	r2, [sp, #0]
 8010eb4:	9a05      	ldr	r2, [sp, #20]
 8010eb6:	f7fe faa1 	bl	800f3fc <draw_full_border>
}
 8010eba:	b031      	add	sp, #196	; 0xc4
 8010ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            coords_tmp.x1 = coords->x1 - ofs_x;
 8010ec0:	9b06      	ldr	r3, [sp, #24]
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	eba3 0309 	sub.w	r3, r3, r9
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010ece:	4433      	add	r3, r6
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8010ed0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8010ed4:	9b06      	ldr	r3, [sp, #24]
 8010ed6:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8010eda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	dd0b      	ble.n	8010efa <lv_draw_rect+0x160a>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8010ee2:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8010ee6:	4453      	add	r3, sl
 8010ee8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8010eec:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8010ef0:	4453      	add	r3, sl
 8010ef2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8010ef6:	f7ff bbcf 	b.w	8010698 <lv_draw_rect+0xda8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8010efa:	f1b8 0f02 	cmp.w	r8, #2
 8010efe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f00:	d110      	bne.n	8010f24 <lv_draw_rect+0x1634>
 8010f02:	2300      	movs	r3, #0
 8010f04:	9905      	ldr	r1, [sp, #20]
 8010f06:	a81a      	add	r0, sp, #104	; 0x68
 8010f08:	9300      	str	r3, [sp, #0]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	aa27      	add	r2, sp, #156	; 0x9c
 8010f0e:	f7fc f9d9 	bl	800d2c4 <lv_draw_label>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8010f12:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8010f16:	442b      	add	r3, r5
 8010f18:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8010f1c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8010f20:	442b      	add	r3, r5
 8010f22:	e7d5      	b.n	8010ed0 <lv_draw_rect+0x15e0>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8010f24:	ab1c      	add	r3, sp, #112	; 0x70
 8010f26:	9905      	ldr	r1, [sp, #20]
 8010f28:	a81a      	add	r0, sp, #104	; 0x68
 8010f2a:	f7fc f8bd 	bl	800d0a8 <lv_draw_img>
 8010f2e:	e7f0      	b.n	8010f12 <lv_draw_rect+0x1622>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f30:	9b06      	ldr	r3, [sp, #24]
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f32:	f04f 0e02 	mov.w	lr, #2
 8010f36:	9906      	ldr	r1, [sp, #24]
        if(src_type == LV_IMG_SRC_SYMBOL) {
 8010f38:	f1b8 0f02 	cmp.w	r8, #2
 8010f3c:	f8b3 c000 	ldrh.w	ip, [r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f40:	8858      	ldrh	r0, [r3, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f42:	8889      	ldrh	r1, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f44:	88db      	ldrh	r3, [r3, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f46:	f101 0101 	add.w	r1, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f4a:	f103 0301 	add.w	r3, r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010f4e:	eba1 010c 	sub.w	r1, r1, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010f52:	eba3 0300 	sub.w	r3, r3, r0
        int32_t obj_w = lv_area_get_width(coords);
 8010f56:	b209      	sxth	r1, r1
        int32_t obj_h = lv_area_get_height(coords);
 8010f58:	b21b      	sxth	r3, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f5a:	eba1 0105 	sub.w	r1, r1, r5
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010f5e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8010f62:	eba3 0707 	sub.w	r7, r3, r7
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f66:	fb91 f1fe 	sdiv	r1, r1, lr
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8010f6a:	fb97 fefe 	sdiv	lr, r7, lr
 8010f6e:	4470      	add	r0, lr
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f70:	4461      	add	r1, ip
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8010f72:	b280      	uxth	r0, r0
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f74:	b289      	uxth	r1, r1
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8010f76:	4406      	add	r6, r0
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 8010f78:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010f7c:	440d      	add	r5, r1
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8010f7e:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8010f82:	b2b6      	uxth	r6, r6
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010f84:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8010f88:	f8ad 606e 	strh.w	r6, [sp, #110]	; 0x6e
        if(src_type == LV_IMG_SRC_SYMBOL) {
 8010f8c:	d107      	bne.n	8010f9e <lv_draw_rect+0x16ae>
            coords_tmp.y1 += y_corr;
 8010f8e:	f007 0701 	and.w	r7, r7, #1
 8010f92:	4438      	add	r0, r7
            coords_tmp.y2 += y_corr;
 8010f94:	443e      	add	r6, r7
            coords_tmp.y1 += y_corr;
 8010f96:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
            coords_tmp.y2 += y_corr;
 8010f9a:	f8ad 606e 	strh.w	r6, [sp, #110]	; 0x6e
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 8010f9e:	9906      	ldr	r1, [sp, #24]
 8010fa0:	a81a      	add	r0, sp, #104	; 0x68
 8010fa2:	f002 f9a2 	bl	80132ea <_lv_area_is_in>
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	b9d0      	cbnz	r0, 8010fe0 <lv_draw_rect+0x16f0>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8010faa:	4603      	mov	r3, r0
 8010fac:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010fb0:	9906      	ldr	r1, [sp, #24]
 8010fb2:	a820      	add	r0, sp, #128	; 0x80
 8010fb4:	f7fe f8f0 	bl	800f198 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8010fb8:	4629      	mov	r1, r5
 8010fba:	a820      	add	r0, sp, #128	; 0x80
 8010fbc:	f7fd fff4 	bl	800efa8 <lv_draw_mask_add>
 8010fc0:	4605      	mov	r5, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8010fc2:	f1b8 0f02 	cmp.w	r8, #2
 8010fc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010fc8:	d10d      	bne.n	8010fe6 <lv_draw_rect+0x16f6>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	9905      	ldr	r1, [sp, #20]
 8010fce:	a81a      	add	r0, sp, #104	; 0x68
 8010fd0:	9300      	str	r3, [sp, #0]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	aa27      	add	r2, sp, #156	; 0x9c
 8010fd6:	f7fc f975 	bl	800d2c4 <lv_draw_label>
        lv_draw_mask_remove_id(radius_mask_id);
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f7ff bb65 	b.w	80106aa <lv_draw_rect+0xdba>
        int16_t radius_mask_id = LV_MASK_ID_INV;
 8010fe0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010fe4:	e7ed      	b.n	8010fc2 <lv_draw_rect+0x16d2>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8010fe6:	ab1c      	add	r3, sp, #112	; 0x70
 8010fe8:	9905      	ldr	r1, [sp, #20]
 8010fea:	a81a      	add	r0, sp, #104	; 0x68
 8010fec:	f7fc f85c 	bl	800d0a8 <lv_draw_img>
 8010ff0:	e7f3      	b.n	8010fda <lv_draw_rect+0x16ea>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8010ff2:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
 8010ff6:	bf28      	it	cs
 8010ff8:	f04f 0aff 	movcs.w	sl, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010ffc:	f7f9 ff36 	bl	800ae6c <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011000:	f001 fd6c 	bl	8012adc <lv_disp_get_buf>
 8011004:	4681      	mov	r9, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 8011006:	a81a      	add	r0, sp, #104	; 0x68
 8011008:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 801100c:	f002 f871 	bl	80130f2 <_lv_area_intersect>
        if(is_common == false) return;
 8011010:	2800      	cmp	r0, #0
 8011012:	f43f ae97 	beq.w	8010d44 <lv_draw_rect+0x1454>
        draw_area.x1 -= disp_area->x1;
 8011016:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 801101a:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
        draw_area.x2 -= disp_area->x1;
 801101e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
        draw_area.x1 -= disp_area->x1;
 8011022:	1a76      	subs	r6, r6, r1
        draw_area.y1 -= disp_area->y1;
 8011024:	f8bd 006a 	ldrh.w	r0, [sp, #106]	; 0x6a
        draw_area.x2 -= disp_area->x1;
 8011028:	1a5b      	subs	r3, r3, r1
        draw_area.y2 -= disp_area->y1;
 801102a:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
        draw_area.x1 -= disp_area->x1;
 801102e:	b2b2      	uxth	r2, r6
        draw_area.y1 -= disp_area->y1;
 8011030:	f8b9 6012 	ldrh.w	r6, [r9, #18]
        draw_area.x2 -= disp_area->x1;
 8011034:	b29b      	uxth	r3, r3
        draw_area.y1 -= disp_area->y1;
 8011036:	1b80      	subs	r0, r0, r6
        draw_area.y2 -= disp_area->y1;
 8011038:	1b89      	subs	r1, r1, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801103a:	1c5e      	adds	r6, r3, #1
        draw_area.x1 -= disp_area->x1;
 801103c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        draw_area.y1 -= disp_area->y1;
 8011040:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 8011044:	1ab6      	subs	r6, r6, r2
        draw_area.x2 -= disp_area->x1;
 8011046:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        draw_area.y2 -= disp_area->y1;
 801104a:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
 801104e:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8011050:	4630      	mov	r0, r6
 8011052:	f002 ff6f 	bl	8013f34 <_lv_mem_buf_get>
        if(rout > 0) {
 8011056:	2d00      	cmp	r5, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8011058:	4683      	mov	fp, r0
        if(rout > 0) {
 801105a:	dd3e      	ble.n	80110da <lv_draw_rect+0x17ea>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 801105c:	2300      	movs	r3, #0
 801105e:	b22a      	sxth	r2, r5
 8011060:	9906      	ldr	r1, [sp, #24]
 8011062:	a820      	add	r0, sp, #128	; 0x80
 8011064:	f7fe f898 	bl	800f198 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8011068:	2100      	movs	r1, #0
 801106a:	a820      	add	r0, sp, #128	; 0x80
 801106c:	f7fd ff9c 	bl	800efa8 <lv_draw_mask_add>
 8011070:	9007      	str	r0, [sp, #28]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 8011072:	8a22      	ldrh	r2, [r4, #16]
 8011074:	2301      	movs	r3, #1
 8011076:	a918      	add	r1, sp, #96	; 0x60
 8011078:	a827      	add	r0, sp, #156	; 0x9c
 801107a:	1aaa      	subs	r2, r5, r2
 801107c:	b212      	sxth	r2, r2
 801107e:	f7fe f88b 	bl	800f198 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8011082:	2100      	movs	r1, #0
 8011084:	a827      	add	r0, sp, #156	; 0x9c
 8011086:	f7fd ff8f 	bl	800efa8 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 801108a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 801108e:	f9bd 806a 	ldrsh.w	r8, [sp, #106]	; 0x6a
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 8011092:	42ab      	cmp	r3, r5
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8011094:	9008      	str	r0, [sp, #32]
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 8011096:	bfc8      	it	gt
 8011098:	f103 35ff 	addgt.w	r5, r3, #4294967295	; 0xffffffff
        lv_color_t color = dsc->border_color;
 801109c:	89e3      	ldrh	r3, [r4, #14]
 801109e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 80110a2:	7d63      	ldrb	r3, [r4, #21]
 80110a4:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = coords->x1;
 80110a6:	9b06      	ldr	r3, [sp, #24]
 80110a8:	f9b3 2000 	ldrsh.w	r2, [r3]
        fill_area.x2 = coords->x2;
 80110ac:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80110b0:	f8b9 3012 	ldrh.w	r3, [r9, #18]
        fill_area.x1 = coords->x1;
 80110b4:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80110b8:	4443      	add	r3, r8
        fill_area.x2 = coords->x2;
 80110ba:	f8ad 7074 	strh.w	r7, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80110be:	b21b      	sxth	r3, r3
 80110c0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
 80110c4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 80110c8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80110cc:	2b04      	cmp	r3, #4
 80110ce:	d108      	bne.n	80110e2 <lv_draw_rect+0x17f2>
 80110d0:	1957      	adds	r7, r2, r5
 80110d2:	f8ad 7074 	strh.w	r7, [sp, #116]	; 0x74
        uint32_t buf_ofs = 0;
 80110d6:	2700      	movs	r7, #0
 80110d8:	e00a      	b.n	80110f0 <lv_draw_rect+0x1800>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 80110da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110de:	9307      	str	r3, [sp, #28]
 80110e0:	e7c7      	b.n	8011072 <lv_draw_rect+0x1782>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 80110e2:	2b08      	cmp	r3, #8
 80110e4:	d1f7      	bne.n	80110d6 <lv_draw_rect+0x17e6>
            fill_area.x1 = coords->x2 - corner_size;
 80110e6:	1b7f      	subs	r7, r7, r5
 80110e8:	b23f      	sxth	r7, r7
 80110ea:	f8ad 7070 	strh.w	r7, [sp, #112]	; 0x70
            buf_ofs = fill_area.x1 - coords->x1;
 80110ee:	1abf      	subs	r7, r7, r2
        volatile bool top_only = false;
 80110f0:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 80110f2:	2b02      	cmp	r3, #2
        volatile bool top_only = false;
 80110f4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        volatile bool bottom_only = false;
 80110f8:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 80110fc:	d11c      	bne.n	8011138 <lv_draw_rect+0x1848>
 80110fe:	2301      	movs	r3, #1
 8011100:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        volatile bool normal = !top_only && !bottom_only ? true : false;
 8011104:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8011108:	bb0b      	cbnz	r3, 801114e <lv_draw_rect+0x185e>
 801110a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801110e:	f083 0301 	eor.w	r3, r3, #1
 8011112:	f003 0301 	and.w	r3, r3, #1
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 8011116:	445f      	add	r7, fp
        volatile bool normal = !top_only && !bottom_only ? true : false;
 8011118:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801111c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8011120:	4598      	cmp	r8, r3
 8011122:	dd16      	ble.n	8011152 <lv_draw_rect+0x1862>
        lv_draw_mask_remove_id(mask_rin_id);
 8011124:	9808      	ldr	r0, [sp, #32]
 8011126:	f7fd ff7b 	bl	800f020 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 801112a:	9807      	ldr	r0, [sp, #28]
 801112c:	f7fd ff78 	bl	800f020 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 8011130:	4658      	mov	r0, fp
 8011132:	f002 fd95 	bl	8013c60 <_lv_mem_buf_release>
 8011136:	e605      	b.n	8010d44 <lv_draw_rect+0x1454>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 8011138:	2b01      	cmp	r3, #1
 801113a:	d102      	bne.n	8011142 <lv_draw_rect+0x1852>
            bottom_only = true;
 801113c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8011140:	e7e0      	b.n	8011104 <lv_draw_rect+0x1814>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 8011142:	2b03      	cmp	r3, #3
 8011144:	d1de      	bne.n	8011104 <lv_draw_rect+0x1814>
            top_only = true;
 8011146:	2301      	movs	r3, #1
 8011148:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 801114c:	e7f6      	b.n	801113c <lv_draw_rect+0x184c>
        volatile bool normal = !top_only && !bottom_only ? true : false;
 801114e:	2300      	movs	r3, #0
 8011150:	e7df      	b.n	8011112 <lv_draw_rect+0x1822>
            if(normal ||
 8011152:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011156:	b99b      	cbnz	r3, 8011180 <lv_draw_rect+0x1890>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8011158:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801115c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            if(normal ||
 8011160:	b12b      	cbz	r3, 801116e <lv_draw_rect+0x187e>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8011162:	9b06      	ldr	r3, [sp, #24]
 8011164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011168:	442b      	add	r3, r5
 801116a:	429a      	cmp	r2, r3
 801116c:	dd08      	ble.n	8011180 <lv_draw_rect+0x1890>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 801116e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 8011172:	b313      	cbz	r3, 80111ba <lv_draw_rect+0x18ca>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8011174:	9b06      	ldr	r3, [sp, #24]
 8011176:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801117a:	1b5b      	subs	r3, r3, r5
 801117c:	429a      	cmp	r2, r3
 801117e:	db1c      	blt.n	80111ba <lv_draw_rect+0x18ca>
                _lv_memset_ff(mask_buf, draw_area_w);
 8011180:	4631      	mov	r1, r6
 8011182:	4658      	mov	r0, fp
 8011184:	f002 ffa3 	bl	80140ce <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8011188:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801118c:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 8011190:	4658      	mov	r0, fp
 8011192:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 8011196:	4442      	add	r2, r8
 8011198:	4419      	add	r1, r3
 801119a:	4633      	mov	r3, r6
 801119c:	b212      	sxth	r2, r2
 801119e:	b209      	sxth	r1, r1
 80111a0:	f7fd ff18 	bl	800efd4 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 80111a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a6:	9000      	str	r0, [sp, #0]
 80111a8:	a91c      	add	r1, sp, #112	; 0x70
 80111aa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80111ae:	9805      	ldr	r0, [sp, #20]
 80111b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80111b4:	463b      	mov	r3, r7
 80111b6:	f7fa fe31 	bl	800be1c <_lv_blend_fill>
            fill_area.y1++;
 80111ba:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80111be:	f108 0801 	add.w	r8, r8, #1
            fill_area.y1++;
 80111c2:	3301      	adds	r3, #1
 80111c4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
 80111c8:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 80111cc:	3301      	adds	r3, #1
 80111ce:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 80111d2:	e7a3      	b.n	801111c <lv_draw_rect+0x182c>
    lv_coord_t width = (dsc->outline_pad == 0 ? (dsc->outline_width + 1) : dsc->outline_width);
 80111d4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80111d8:	e64a      	b.n	8010e70 <lv_draw_rect+0x1580>
            if(grad_dir == LV_GRAD_DIR_VER) {
 80111da:	2e01      	cmp	r6, #1
            opa2 = opa;
 80111dc:	46ba      	mov	sl, r7
            if(grad_dir == LV_GRAD_DIR_VER) {
 80111de:	f43f ace6 	beq.w	8010bae <lv_draw_rect+0x12be>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80111e2:	f04f 0901 	mov.w	r9, #1
 80111e6:	e47d      	b.n	8010ae4 <lv_draw_rect+0x11f4>

080111e8 <lv_color_mix>:
{
 80111e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80111ea:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 80111ee:	f3c1 24c4 	ubfx	r4, r1, #11, #5
 80111f2:	f3c0 23c4 	ubfx	r3, r0, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80111f6:	f3c1 1745 	ubfx	r7, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80111fa:	4374      	muls	r4, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80111fc:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011200:	4377      	muls	r7, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011202:	f248 0581 	movw	r5, #32897	; 0x8081
 8011206:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801120a:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801120e:	434e      	muls	r6, r1
 8011210:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011214:	fb04 7402 	mla	r4, r4, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011218:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801121a:	fb00 6202 	mla	r2, r0, r2, r6
    return ret;
 801121e:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011222:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011224:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011226:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011228:	436c      	muls	r4, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801122a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801122e:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011230:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011234:	0dd2      	lsrs	r2, r2, #23
    return ret;
 8011236:	f362 0004 	bfi	r0, r2, #0, #5
 801123a:	f364 104a 	bfi	r0, r4, #5, #6
 801123e:	f363 20cf 	bfi	r0, r3, #11, #5
}
 8011242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011244 <_lv_memcpy_small>:
{
 8011244:	3901      	subs	r1, #1
 8011246:	4402      	add	r2, r0
    uint8_t * d8 = (uint8_t *)dst;
 8011248:	4603      	mov	r3, r0
{
 801124a:	b510      	push	{r4, lr}
    while(len) {
 801124c:	4293      	cmp	r3, r2
 801124e:	d100      	bne.n	8011252 <_lv_memcpy_small+0xe>
}
 8011250:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 8011252:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011256:	f803 4b01 	strb.w	r4, [r3], #1
 801125a:	e7f7      	b.n	801124c <_lv_memcpy_small+0x8>

0801125c <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 801125c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801125e:	4607      	mov	r7, r0
 8011260:	4616      	mov	r6, r2
    lv_color_t p_color = LV_COLOR_BLACK;
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8011262:	6885      	ldr	r5, [r0, #8]
    lv_color_t p_color = LV_COLOR_BLACK;
 8011264:	2200      	movs	r2, #0

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8011266:	7800      	ldrb	r0, [r0, #0]
{
 8011268:	460c      	mov	r4, r1
    lv_color_t p_color = LV_COLOR_BLACK;
 801126a:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 801126e:	f000 021f 	and.w	r2, r0, #31
 8011272:	1f11      	subs	r1, r2, #4
 8011274:	2902      	cmp	r1, #2
 8011276:	d813      	bhi.n	80112a0 <lv_img_buf_get_px_color+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8011278:	4610      	mov	r0, r2
 801127a:	f7fb feed 	bl	800d058 <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 8011284:	2202      	movs	r2, #2
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 8011286:	f3c1 218a 	ubfx	r1, r1, #10, #11
 801128a:	fb16 4101 	smlabb	r1, r6, r1, r4
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 801128e:	fb00 5101 	mla	r1, r0, r1, r5
 8011292:	a801      	add	r0, sp, #4
 8011294:	f7ff ffd6 	bl	8011244 <_lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 8011298:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801129c:	b003      	add	sp, #12
 801129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 80112a0:	2a07      	cmp	r2, #7
 80112a2:	d114      	bne.n	80112ce <lv_img_buf_get_px_color+0x72>
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 80112a4:	683a      	ldr	r2, [r7, #0]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80112a6:	f004 0307 	and.w	r3, r4, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 80112aa:	f3c2 228a 	ubfx	r2, r2, #10, #11
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80112ae:	f1c3 0007 	rsb	r0, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 80112b2:	3207      	adds	r2, #7
 80112b4:	10d2      	asrs	r2, r2, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80112b6:	fb06 5202 	mla	r2, r6, r2, r5
 80112ba:	eb02 01e4 	add.w	r1, r2, r4, asr #3
 80112be:	2201      	movs	r2, #1
 80112c0:	7a0b      	ldrb	r3, [r1, #8]
 80112c2:	4082      	lsls	r2, r0
 80112c4:	4013      	ands	r3, r2
 80112c6:	4103      	asrs	r3, r0
        p_color = color;
 80112c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80112cc:	e7e4      	b.n	8011298 <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 80112ce:	2a08      	cmp	r2, #8
 80112d0:	d116      	bne.n	8011300 <lv_img_buf_get_px_color+0xa4>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80112d2:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 80112d4:	f004 0003 	and.w	r0, r4, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80112d8:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80112dc:	0040      	lsls	r0, r0, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80112de:	3303      	adds	r3, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80112e0:	f1c0 0006 	rsb	r0, r0, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80112e4:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80112e6:	fb06 5203 	mla	r2, r6, r3, r5
 80112ea:	eb02 01a4 	add.w	r1, r2, r4, asr #2
 80112ee:	2203      	movs	r2, #3
 80112f0:	7c0b      	ldrb	r3, [r1, #16]
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80112f2:	4082      	lsls	r2, r0
 80112f4:	4013      	ands	r3, r2
 80112f6:	fa43 f000 	asr.w	r0, r3, r0
 80112fa:	f8ad 0004 	strh.w	r0, [sp, #4]
 80112fe:	e7cb      	b.n	8011298 <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 8011300:	2a09      	cmp	r2, #9
 8011302:	d111      	bne.n	8011328 <lv_img_buf_get_px_color+0xcc>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011304:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 8011306:	f004 0001 	and.w	r0, r4, #1
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 801130a:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801130e:	0080      	lsls	r0, r0, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011310:	3301      	adds	r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011312:	f1c0 0004 	rsb	r0, r0, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011316:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011318:	fb06 5203 	mla	r2, r6, r3, r5
 801131c:	eb02 0164 	add.w	r1, r2, r4, asr #1
 8011320:	220f      	movs	r2, #15
 8011322:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8011326:	e7e4      	b.n	80112f2 <lv_img_buf_get_px_color+0x96>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8011328:	2a0a      	cmp	r2, #10
 801132a:	d108      	bne.n	801133e <lv_img_buf_get_px_color+0xe2>
        uint32_t px  = dsc->header.w * y + x;
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8011332:	fb16 4101 	smlabb	r1, r6, r1, r4
        p_color.full = buf_u8[px];
 8011336:	186a      	adds	r2, r5, r1
 8011338:	f892 3400 	ldrb.w	r3, [r2, #1024]	; 0x400
 801133c:	e7c4      	b.n	80112c8 <lv_img_buf_get_px_color+0x6c>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801133e:	3a0b      	subs	r2, #11
 8011340:	2a03      	cmp	r2, #3
 8011342:	d9c1      	bls.n	80112c8 <lv_img_buf_get_px_color+0x6c>
 8011344:	e7a8      	b.n	8011298 <lv_img_buf_get_px_color+0x3c>
	...

08011348 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 8011348:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801134a:	7801      	ldrb	r1, [r0, #0]
 801134c:	f001 011f 	and.w	r1, r1, #31
 8011350:	2905      	cmp	r1, #5
{
 8011352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011354:	4605      	mov	r5, r0
 8011356:	b085      	sub	sp, #20
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8011358:	6884      	ldr	r4, [r0, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801135a:	d10a      	bne.n	8011372 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801135c:	6801      	ldr	r1, [r0, #0]
 801135e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8011362:	fb12 3301 	smlabb	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8011366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801136a:	4423      	add	r3, r4
 801136c:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 801136e:	b005      	add	sp, #20
 8011370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 8011372:	290b      	cmp	r1, #11
 8011374:	d114      	bne.n	80113a0 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8011376:	6829      	ldr	r1, [r5, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011378:	f003 0007 	and.w	r0, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 801137c:	10db      	asrs	r3, r3, #3
 801137e:	f3c1 218a 	ubfx	r1, r1, #10, #11
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011382:	f1c0 0007 	rsb	r0, r0, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8011386:	3107      	adds	r1, #7
 8011388:	10c9      	asrs	r1, r1, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 801138a:	fb02 4201 	mla	r2, r2, r1, r4
 801138e:	5cd3      	ldrb	r3, [r2, r3]
 8011390:	2201      	movs	r2, #1
 8011392:	4082      	lsls	r2, r0
 8011394:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 8011396:	4103      	asrs	r3, r0
 8011398:	bf0c      	ite	eq
 801139a:	20ff      	moveq	r0, #255	; 0xff
 801139c:	2000      	movne	r0, #0
 801139e:	e7e6      	b.n	801136e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 80113a0:	290c      	cmp	r1, #12
 80113a2:	d118      	bne.n	80113d6 <lv_img_buf_get_px_alpha+0x8e>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80113a4:	4921      	ldr	r1, [pc, #132]	; (801142c <lv_img_buf_get_px_alpha+0xe4>)
        uint8_t bit = (x & 0x3) * 2;
 80113a6:	f003 0003 	and.w	r0, r3, #3
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80113aa:	109b      	asrs	r3, r3, #2
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80113ac:	9100      	str	r1, [sp, #0]
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113ae:	0040      	lsls	r0, r0, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80113b0:	6829      	ldr	r1, [r5, #0]
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113b2:	f1c0 0006 	rsb	r0, r0, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80113b6:	f3c1 218a 	ubfx	r1, r1, #10, #11
 80113ba:	3103      	adds	r1, #3
 80113bc:	1089      	asrs	r1, r1, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113be:	fb02 4201 	mla	r2, r2, r1, r4
 80113c2:	5cd3      	ldrb	r3, [r2, r3]
 80113c4:	2203      	movs	r2, #3
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80113c6:	4082      	lsls	r2, r0
 80113c8:	4013      	ands	r3, r2
        return opa_table[px_opa];
 80113ca:	aa04      	add	r2, sp, #16
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80113cc:	4103      	asrs	r3, r0
        return opa_table[px_opa];
 80113ce:	4413      	add	r3, r2
 80113d0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 80113d4:	e7cb      	b.n	801136e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 80113d6:	290d      	cmp	r1, #13
 80113d8:	d11c      	bne.n	8011414 <lv_img_buf_get_px_alpha+0xcc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 80113da:	4e15      	ldr	r6, [pc, #84]	; (8011430 <lv_img_buf_get_px_alpha+0xe8>)
 80113dc:	46ec      	mov	ip, sp
 80113de:	f106 0e10 	add.w	lr, r6, #16
 80113e2:	6830      	ldr	r0, [r6, #0]
 80113e4:	3608      	adds	r6, #8
 80113e6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80113ea:	4667      	mov	r7, ip
 80113ec:	4576      	cmp	r6, lr
 80113ee:	c703      	stmia	r7!, {r0, r1}
 80113f0:	46bc      	mov	ip, r7
 80113f2:	d1f6      	bne.n	80113e2 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80113f4:	6829      	ldr	r1, [r5, #0]
        uint8_t bit = (x & 0x1) * 4;
 80113f6:	f003 0001 	and.w	r0, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80113fa:	105b      	asrs	r3, r3, #1
 80113fc:	f3c1 218a 	ubfx	r1, r1, #10, #11
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011400:	0080      	lsls	r0, r0, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011402:	3101      	adds	r1, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011404:	f1c0 0004 	rsb	r0, r0, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011408:	1049      	asrs	r1, r1, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801140a:	fb02 4201 	mla	r2, r2, r1, r4
 801140e:	5cd3      	ldrb	r3, [r2, r3]
 8011410:	220f      	movs	r2, #15
 8011412:	e7d8      	b.n	80113c6 <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8011414:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 8011416:	bf09      	itett	eq
 8011418:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 801141a:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 801141c:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
 8011420:	fb12 3201 	smlabbeq	r2, r2, r1, r3
        return buf_u8[px];
 8011424:	bf08      	it	eq
 8011426:	5ca0      	ldrbeq	r0, [r4, r2]
 8011428:	e7a1      	b.n	801136e <lv_img_buf_get_px_alpha+0x26>
 801142a:	bf00      	nop
 801142c:	ffaa5500 	.word	0xffaa5500
 8011430:	0801f4fa 	.word	0x0801f4fa

08011434 <_lv_img_buf_transform_init>:
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8011434:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011438:	021b      	lsls	r3, r3, #8
{
 801143a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 801143e:	6243      	str	r3, [r0, #36]	; 0x24
{
 8011440:	4604      	mov	r4, r0
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8011442:	f9b0 300a 	ldrsh.w	r3, [r0, #10]

    int32_t angle_low = dsc->cfg.angle / 10;
 8011446:	f04f 090a 	mov.w	r9, #10
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 801144a:	f64f 77f6 	movw	r7, #65526	; 0xfff6
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 801144e:	021b      	lsls	r3, r3, #8
 8011450:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 8011452:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8011456:	fb90 f5f9 	sdiv	r5, r0, r9
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 801145a:	fb15 0707 	smlabb	r7, r5, r7, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
 801145e:	b2ae      	uxth	r6, r5
    int32_t angle_high = angle_low + 1;
 8011460:	3501      	adds	r5, #1
    int32_t s1 = _lv_trigo_sin(-angle_low);
 8011462:	4270      	negs	r0, r6
    int32_t s2 = _lv_trigo_sin(-angle_high);
 8011464:	b2ad      	uxth	r5, r5
    int32_t s1 = _lv_trigo_sin(-angle_low);
 8011466:	b200      	sxth	r0, r0
 8011468:	f002 faf6 	bl	8013a58 <_lv_trigo_sin>
 801146c:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
 801146e:	4268      	negs	r0, r5

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 8011470:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t s2 = _lv_trigo_sin(-angle_high);
 8011474:	b200      	sxth	r0, r0
 8011476:	f002 faef 	bl	8013a58 <_lv_trigo_sin>
 801147a:	4682      	mov	sl, r0
    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 801147c:	f1c6 005a 	rsb	r0, r6, #90	; 0x5a
 8011480:	b200      	sxth	r0, r0
 8011482:	f002 fae9 	bl	8013a58 <_lv_trigo_sin>
 8011486:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 8011488:	b228      	sxth	r0, r5
 801148a:	f002 fae5 	bl	8013a58 <_lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801148e:	eba9 0207 	sub.w	r2, r9, r7
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011492:	4378      	muls	r0, r7
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8011494:	fb07 f30a 	mul.w	r3, r7, sl
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011498:	fb02 0606 	mla	r6, r2, r6, r0

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 801149c:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801149e:	fb02 3308 	mla	r3, r2, r8, r3
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80114a2:	fb96 f6f9 	sdiv	r6, r6, r9
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80114a6:	fb93 f3f9 	sdiv	r3, r3, r9
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80114aa:	1176      	asrs	r6, r6, #5
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80114ac:	115b      	asrs	r3, r3, #5
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80114ae:	6326      	str	r6, [r4, #48]	; 0x30
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80114b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 80114b2:	f7fb fddd 	bl	800d070 <lv_img_cf_is_chroma_keyed>
 80114b6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80114ba:	f360 0300 	bfi	r3, r0, #0, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 80114be:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 80114c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 80114c4:	f7fb fde1 	bl	800d08a <lv_img_cf_has_alpha>
 80114c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80114cc:	7ca2      	ldrb	r2, [r4, #18]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 80114ce:	f360 0341 	bfi	r3, r0, #1, #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80114d2:	1f11      	subs	r1, r2, #4
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 80114d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80114d8:	b2db      	uxtb	r3, r3
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80114da:	2902      	cmp	r1, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
 80114dc:	bf94      	ite	ls
 80114de:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
 80114e2:	f36f 0382 	bfchi	r3, #2, #1
 80114e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
 80114ee:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80114f0:	f003 031f 	and.w	r3, r3, #31
 80114f4:	f362 0304 	bfi	r3, r2, #0, #5
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 80114f8:	88a2      	ldrh	r2, [r4, #4]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80114fa:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 80114fc:	69a3      	ldr	r3, [r4, #24]
 80114fe:	f362 2394 	bfi	r3, r2, #10, #11
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8011502:	88e2      	ldrh	r2, [r4, #6]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 8011504:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8011506:	f3c3 430f 	ubfx	r3, r3, #16, #16
 801150a:	f362 134f 	bfi	r3, r2, #5, #11

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 801150e:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8011510:	8363      	strh	r3, [r4, #26]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 8011512:	0853      	lsrs	r3, r2, #1
 8011514:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011518:	fb93 f3f2 	sdiv	r3, r3, r2
 801151c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 801151e:	23ff      	movs	r3, #255	; 0xff
 8011520:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 8011522:	8a23      	ldrh	r3, [r4, #16]
 8011524:	82a3      	strh	r3, [r4, #20]
}
 8011526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801152a <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 801152a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011530:	4604      	mov	r4, r0
 8011532:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8011536:	b953      	cbnz	r3, 801154e <_lv_img_buf_get_transformed_area+0x24>
 8011538:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 801153c:	d107      	bne.n	801154e <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 801153e:	3901      	subs	r1, #1
        res->y2 = h - 1;
 8011540:	3a01      	subs	r2, #1
        res->x1 = 0;
 8011542:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 8011544:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 8011546:	8081      	strh	r1, [r0, #4]

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 8011548:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 801154a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 801154e:	f9b6 c000 	ldrsh.w	ip, [r6]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 8011552:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 8011556:	f1cc 0700 	rsb	r7, ip, #0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 801155a:	eba1 010c 	sub.w	r1, r1, ip
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 801155e:	4245      	negs	r5, r0
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8011560:	1a12      	subs	r2, r2, r0
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 8011562:	fb0e f707 	mul.w	r7, lr, r7
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 8011566:	fb0e f505 	mul.w	r5, lr, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 801156a:	fb0e f101 	mul.w	r1, lr, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 801156e:	123f      	asrs	r7, r7, #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8011570:	fb0e f202 	mul.w	r2, lr, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 8011574:	122d      	asrs	r5, r5, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 8011576:	1209      	asrs	r1, r1, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 8011578:	3f01      	subs	r7, #1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 801157a:	1212      	asrs	r2, r2, #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 801157c:	3d01      	subs	r5, #1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 801157e:	3102      	adds	r1, #2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 8011580:	b2bf      	uxth	r7, r7
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8011582:	3202      	adds	r2, #2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 8011584:	b2ad      	uxth	r5, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 8011586:	b289      	uxth	r1, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 8011588:	8027      	strh	r7, [r4, #0]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 801158a:	b292      	uxth	r2, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 801158c:	8065      	strh	r5, [r4, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 801158e:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 8011590:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 8011592:	b95b      	cbnz	r3, 80115ac <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 8011594:	fa1f fc8c 	uxth.w	ip, ip
        res->y1 += pivot->y;
 8011598:	b280      	uxth	r0, r0
        res->x1 += pivot->x;
 801159a:	4467      	add	r7, ip
        res->x2 += pivot->x;
 801159c:	448c      	add	ip, r1
        res->y1 += pivot->y;
 801159e:	4405      	add	r5, r0
        res->y2 += pivot->y;
 80115a0:	4402      	add	r2, r0
        res->x1 += pivot->x;
 80115a2:	8027      	strh	r7, [r4, #0]
        res->y1 += pivot->y;
 80115a4:	8065      	strh	r5, [r4, #2]
        res->x2 += pivot->x;
 80115a6:	f8a4 c004 	strh.w	ip, [r4, #4]
 80115aa:	e7cd      	b.n	8011548 <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 80115ac:	f04f 0a0a 	mov.w	sl, #10
    int32_t angle_rem = angle  - (angle_low * 10);
 80115b0:	f64f 75f6 	movw	r5, #65526	; 0xfff6
    int32_t angle_low = angle / 10;
 80115b4:	fb93 f8fa 	sdiv	r8, r3, sl
    int32_t angle_high = angle_low + 1;
 80115b8:	f108 0b01 	add.w	fp, r8, #1
    int32_t s1 = _lv_trigo_sin(angle_low);
 80115bc:	4640      	mov	r0, r8
    int32_t angle_rem = angle  - (angle_low * 10);
 80115be:	fb18 3505 	smlabb	r5, r8, r5, r3
    int32_t s1 = _lv_trigo_sin(angle_low);
 80115c2:	f002 fa49 	bl	8013a58 <_lv_trigo_sin>
 80115c6:	4681      	mov	r9, r0
    int32_t s2 = _lv_trigo_sin(angle_high);
 80115c8:	fa0f f08b 	sxth.w	r0, fp
 80115cc:	f002 fa44 	bl	8013a58 <_lv_trigo_sin>
 80115d0:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 80115d2:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 80115d6:	b200      	sxth	r0, r0
 80115d8:	f002 fa3e 	bl	8013a58 <_lv_trigo_sin>
 80115dc:	4607      	mov	r7, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 80115de:	f108 005b 	add.w	r0, r8, #91	; 0x5b
 80115e2:	b200      	sxth	r0, r0
 80115e4:	f002 fa38 	bl	8013a58 <_lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80115e8:	ebaa 0105 	sub.w	r1, sl, r5
 80115ec:	fb05 f20b 	mul.w	r2, r5, fp
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80115f0:	f8b6 c000 	ldrh.w	ip, [r6]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80115f4:	4368      	muls	r0, r5
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80115f6:	8876      	ldrh	r6, [r6, #2]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80115f8:	fb01 2209 	mla	r2, r1, r9, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80115fc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011600:	fb01 0707 	mla	r7, r1, r7, r0
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011604:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011608:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801160c:	fb92 f2fa 	sdiv	r2, r2, sl
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011610:	fb97 f7fa 	sdiv	r7, r7, sl
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8011614:	1152      	asrs	r2, r2, #5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011616:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801161a:	117f      	asrs	r7, r7, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801161c:	fb02 f800 	mul.w	r8, r2, r0
 8011620:	fb07 fe01 	mul.w	lr, r7, r1
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011624:	fb07 fb09 	mul.w	fp, r7, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011628:	ebae 0508 	sub.w	r5, lr, r8
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801162c:	4351      	muls	r1, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801162e:	ebab 0808 	sub.w	r8, fp, r8
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011632:	fb02 f909 	mul.w	r9, r2, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011636:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801163a:	fb02 f20a 	mul.w	r2, r2, sl
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801163e:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011642:	4378      	muls	r0, r7
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011644:	b22d      	sxth	r5, r5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011646:	ebae 0e02 	sub.w	lr, lr, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801164a:	fa0f f888 	sxth.w	r8, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801164e:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011652:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011656:	180b      	adds	r3, r1, r0
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011658:	4545      	cmp	r5, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801165a:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801165e:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011662:	462a      	mov	r2, r5
 8011664:	bfa8      	it	ge
 8011666:	4642      	movge	r2, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011668:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801166c:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801166e:	eb06 23a3 	add.w	r3, r6, r3, asr #10
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011672:	4572      	cmp	r2, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011674:	fb07 f70a 	mul.w	r7, r7, sl
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011678:	eb06 20a0 	add.w	r0, r6, r0, asr #10
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 801167c:	bfa8      	it	ge
 801167e:	4672      	movge	r2, lr
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011680:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011682:	b200      	sxth	r0, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011684:	4439      	add	r1, r7
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011686:	4562      	cmp	r2, ip
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011688:	444f      	add	r7, r9
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801168a:	eb06 21a1 	add.w	r1, r6, r1, asr #10
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 801168e:	bfa8      	it	ge
 8011690:	4662      	movge	r2, ip
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8011692:	4545      	cmp	r5, r8
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011694:	b209      	sxth	r1, r1
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8011696:	bfb8      	it	lt
 8011698:	4645      	movlt	r5, r8
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 801169a:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 801169c:	461a      	mov	r2, r3
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801169e:	eb06 26a7 	add.w	r6, r6, r7, asr #10
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 80116a2:	45ae      	cmp	lr, r5
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80116a4:	b236      	sxth	r6, r6
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 80116a6:	bfb8      	it	lt
 80116a8:	46ae      	movlt	lr, r5
 80116aa:	45f4      	cmp	ip, lr
 80116ac:	bfb8      	it	lt
 80116ae:	46f4      	movlt	ip, lr
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 80116b0:	4283      	cmp	r3, r0
 80116b2:	bfa8      	it	ge
 80116b4:	4602      	movge	r2, r0
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 80116b6:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 80116ba:	428a      	cmp	r2, r1
 80116bc:	bfa8      	it	ge
 80116be:	460a      	movge	r2, r1
 80116c0:	42b2      	cmp	r2, r6
 80116c2:	bfa8      	it	ge
 80116c4:	4632      	movge	r2, r6
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 80116c6:	4283      	cmp	r3, r0
 80116c8:	bfb8      	it	lt
 80116ca:	4603      	movlt	r3, r0
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 80116cc:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 80116ce:	4299      	cmp	r1, r3
 80116d0:	bfb8      	it	lt
 80116d2:	4619      	movlt	r1, r3
 80116d4:	428e      	cmp	r6, r1
 80116d6:	bfb8      	it	lt
 80116d8:	460e      	movlt	r6, r1
 80116da:	80e6      	strh	r6, [r4, #6]
 80116dc:	e735      	b.n	801154a <_lv_img_buf_get_transformed_area+0x20>

080116de <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 80116de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 80116e2:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
{
 80116e6:	b087      	sub	sp, #28
    int ys_fract = dsc->tmp.ys & 0xff;
 80116e8:	f9b0 803e 	ldrsh.w	r8, [r0, #62]	; 0x3e
{
 80116ec:	4604      	mov	r4, r0
 80116ee:	b2f2      	uxtb	r2, r6
    const uint8_t * src_u8 = dsc->cfg.src;
 80116f0:	6805      	ldr	r5, [r0, #0]
 80116f2:	fa5f f388 	uxtb.w	r3, r8
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 80116f6:	2a6f      	cmp	r2, #111	; 0x6f
 80116f8:	f200 80a6 	bhi.w	8011848 <_lv_img_buf_transform_anti_alias+0x16a>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80116fc:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 8011700:	3e80      	subs	r6, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 8011702:	f1bb 0f00 	cmp.w	fp, #0
 8011706:	bfd4      	ite	le
 8011708:	f04f 0b00 	movle.w	fp, #0
 801170c:	f04f 0b01 	movgt.w	fp, #1
 8011710:	f1cb 0b00 	rsb	fp, fp, #0
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 8011714:	b2f6      	uxtb	r6, r6
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 8011716:	2b6f      	cmp	r3, #111	; 0x6f
 8011718:	f200 80ab 	bhi.w	8011872 <_lv_img_buf_transform_anti_alias+0x194>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 801171c:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 8011720:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 8011724:	2f00      	cmp	r7, #0
 8011726:	bfd4      	ite	le
 8011728:	2700      	movle	r7, #0
 801172a:	2701      	movgt	r7, #1
 801172c:	427f      	negs	r7, r7
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 801172e:	fa5f f888 	uxtb.w	r8, r8
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 8011732:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 8011734:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 8011738:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 801173a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801173e:	075b      	lsls	r3, r3, #29
 8011740:	f140 80a9 	bpl.w	8011896 <_lv_img_buf_transform_anti_alias+0x1b8>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 8011744:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011746:	2202      	movs	r2, #2
 8011748:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801174c:	a803      	add	r0, sp, #12
 801174e:	fb0b 3101 	mla	r1, fp, r1, r3
 8011752:	4429      	add	r1, r5
 8011754:	f7ff fd76 	bl	8011244 <_lv_memcpy_small>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 8011758:	88a3      	ldrh	r3, [r4, #4]
 801175a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801175e:	2202      	movs	r2, #2
 8011760:	a804      	add	r0, sp, #16
 8011762:	fb11 f103 	smulbb	r1, r1, r3
 8011766:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011768:	fb07 3101 	mla	r1, r7, r1, r3
 801176c:	4429      	add	r1, r5
 801176e:	f7ff fd69 	bl	8011244 <_lv_memcpy_small>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 8011772:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011776:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011778:	a805      	add	r0, sp, #20
 801177a:	88a1      	ldrh	r1, [r4, #4]
 801177c:	fb11 f103 	smulbb	r1, r1, r3
 8011780:	fb0b 2303 	mla	r3, fp, r3, r2
 8011784:	2202      	movs	r2, #2
 8011786:	fb07 3101 	mla	r1, r7, r1, r3
 801178a:	4429      	add	r1, r5
 801178c:	f7ff fd5a 	bl	8011244 <_lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 8011790:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011794:	0798      	lsls	r0, r3, #30
 8011796:	f140 80d3 	bpl.w	8011940 <_lv_img_buf_transform_anti_alias+0x262>
 801179a:	6c63      	ldr	r3, [r4, #68]	; 0x44
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 801179c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80117a0:	3b01      	subs	r3, #1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 80117a2:	88a2      	ldrh	r2, [r4, #4]
 80117a4:	fb12 f200 	smulbb	r2, r2, r0
 80117a8:	4403      	add	r3, r0
 80117aa:	4357      	muls	r7, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 80117ac:	fb0b 3100 	mla	r1, fp, r0, r3
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 80117b0:	19ea      	adds	r2, r5, r7
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 80117b2:	f815 b001 	ldrb.w	fp, [r5, r1]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 80117b6:	440d      	add	r5, r1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 80117b8:	5cd3      	ldrb	r3, [r2, r3]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 80117ba:	5de8      	ldrb	r0, [r5, r7]
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 80117bc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80117c0:	0792      	lsls	r2, r2, #30
 80117c2:	f140 80bd 	bpl.w	8011940 <_lv_img_buf_transform_anti_alias+0x262>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 80117c6:	9900      	ldr	r1, [sp, #0]
 80117c8:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 80117cc:	fb11 f506 	smulbb	r5, r1, r6
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 80117d0:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 80117d4:	fb02 550b 	mla	r5, r2, fp, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 80117d8:	4342      	muls	r2, r0
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 80117da:	f3c5 2507 	ubfx	r5, r5, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 80117de:	fb16 2203 	smlabb	r2, r6, r3, r2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 80117e2:	fb08 f705 	mul.w	r7, r8, r5

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 80117e6:	2d02      	cmp	r5, #2
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 80117e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 80117ec:	fb02 7101 	mla	r1, r2, r1, r7
 80117f0:	ea4f 2121 	mov.w	r1, r1, asr #8
 80117f4:	75a1      	strb	r1, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 80117f6:	f200 809e 	bhi.w	8011936 <_lv_img_buf_transform_anti_alias+0x258>
 80117fa:	2a02      	cmp	r2, #2
 80117fc:	f240 80c8 	bls.w	8011990 <_lv_img_buf_transform_anti_alias+0x2b2>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8011800:	f04f 0800 	mov.w	r8, #0
    lv_opa_t xr0 = xr;
 8011804:	9a00      	ldr	r2, [sp, #0]
 8011806:	2a03      	cmp	r2, #3
 8011808:	bf2c      	ite	cs
 801180a:	4632      	movcs	r2, r6
 801180c:	2200      	movcc	r2, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 801180e:	f1bb 0f02 	cmp.w	fp, #2
 8011812:	bf98      	it	ls
 8011814:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8011816:	2b02      	cmp	r3, #2
 8011818:	bf98      	it	ls
 801181a:	2600      	movls	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 801181c:	2802      	cmp	r0, #2
 801181e:	bf98      	it	ls
 8011820:	26ff      	movls	r6, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8011822:	2a00      	cmp	r2, #0
 8011824:	f040 8090 	bne.w	8011948 <_lv_img_buf_transform_anti_alias+0x26a>
 8011828:	f8bd 900c 	ldrh.w	r9, [sp, #12]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 801182c:	2e00      	cmp	r6, #0
 801182e:	f040 8095 	bne.w	801195c <_lv_img_buf_transform_anti_alias+0x27e>
 8011832:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8011836:	f1b8 0f00 	cmp.w	r8, #0
 801183a:	f040 809d 	bne.w	8011978 <_lv_img_buf_transform_anti_alias+0x29a>
 801183e:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 8011840:	2001      	movs	r0, #1
}
 8011842:	b007      	add	sp, #28
 8011844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 8011848:	2a90      	cmp	r2, #144	; 0x90
 801184a:	d90e      	bls.n	801186a <_lv_img_buf_transform_anti_alias+0x18c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 801184c:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
        xr = (0xFF - xs_fract) + 0x80;
 8011850:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8011854:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011858:	f10b 0b01 	add.w	fp, fp, #1
 801185c:	458b      	cmp	fp, r1
 801185e:	bfac      	ite	ge
 8011860:	f04f 0b00 	movge.w	fp, #0
 8011864:	f04f 0b01 	movlt.w	fp, #1
 8011868:	e754      	b.n	8011714 <_lv_img_buf_transform_anti_alias+0x36>
        xr = 0xFF;
 801186a:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
 801186c:	f04f 0b00 	mov.w	fp, #0
 8011870:	e751      	b.n	8011716 <_lv_img_buf_transform_anti_alias+0x38>
    else if(ys_fract > 0x90) {
 8011872:	2b90      	cmp	r3, #144	; 0x90
 8011874:	d90b      	bls.n	801188e <_lv_img_buf_transform_anti_alias+0x1b0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8011876:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
        yr = (0xFF - ys_fract) + 0x80;
 801187a:	f1c8 087f 	rsb	r8, r8, #127	; 0x7f
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 801187e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011882:	3701      	adds	r7, #1
 8011884:	4297      	cmp	r7, r2
 8011886:	bfac      	ite	ge
 8011888:	2700      	movge	r7, #0
 801188a:	2701      	movlt	r7, #1
 801188c:	e74f      	b.n	801172e <_lv_img_buf_transform_anti_alias+0x50>
        yr = 0xFF;
 801188e:	f04f 08ff 	mov.w	r8, #255	; 0xff
        yn = 0;
 8011892:	2700      	movs	r7, #0
 8011894:	e74d      	b.n	8011732 <_lv_img_buf_transform_anti_alias+0x54>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8011896:	fa1f f58b 	uxth.w	r5, fp
 801189a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801189e:	f104 0a18 	add.w	sl, r4, #24
 80118a2:	8a23      	ldrh	r3, [r4, #16]
 80118a4:	4429      	add	r1, r5
 80118a6:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80118aa:	4650      	mov	r0, sl
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118ac:	b2bf      	uxth	r7, r7
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 80118ae:	b209      	sxth	r1, r1
 80118b0:	f7ff fcd4 	bl	801125c <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118b4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 80118b8:	f8ad 000c 	strh.w	r0, [sp, #12]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118bc:	4650      	mov	r0, sl
 80118be:	443a      	add	r2, r7
 80118c0:	8a23      	ldrh	r3, [r4, #16]
 80118c2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80118c6:	b212      	sxth	r2, r2
 80118c8:	f7ff fcc8 	bl	801125c <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118cc:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80118d0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80118d4:	443a      	add	r2, r7
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118d6:	f8ad 0010 	strh.w	r0, [sp, #16]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118da:	4429      	add	r1, r5
 80118dc:	8a23      	ldrh	r3, [r4, #16]
 80118de:	b212      	sxth	r2, r2
 80118e0:	4650      	mov	r0, sl
 80118e2:	b209      	sxth	r1, r1
 80118e4:	f7ff fcba 	bl	801125c <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 80118e8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80118ec:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
 80118f0:	0799      	lsls	r1, r3, #30
 80118f2:	d525      	bpl.n	8011940 <_lv_img_buf_transform_anti_alias+0x262>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 80118f4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80118f8:	4650      	mov	r0, sl
 80118fa:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80118fe:	4429      	add	r1, r5
 8011900:	b209      	sxth	r1, r1
 8011902:	f7ff fd21 	bl	8011348 <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011906:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 801190a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 801190e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011910:	443a      	add	r2, r7
 8011912:	4650      	mov	r0, sl
 8011914:	b212      	sxth	r2, r2
 8011916:	f7ff fd17 	bl	8011348 <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 801191a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 801191e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8011922:	443a      	add	r2, r7
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011924:	9001      	str	r0, [sp, #4]
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8011926:	4429      	add	r1, r5
 8011928:	4650      	mov	r0, sl
 801192a:	b212      	sxth	r2, r2
 801192c:	b209      	sxth	r1, r1
 801192e:	f7ff fd0b 	bl	8011348 <lv_img_buf_get_px_alpha>
 8011932:	9b01      	ldr	r3, [sp, #4]
 8011934:	e742      	b.n	80117bc <_lv_img_buf_transform_anti_alias+0xde>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8011936:	2a02      	cmp	r2, #2
 8011938:	bf98      	it	ls
 801193a:	f04f 08ff 	movls.w	r8, #255	; 0xff
 801193e:	e761      	b.n	8011804 <_lv_img_buf_transform_anti_alias+0x126>
        dsc->res.opa = LV_OPA_COVER;
 8011940:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 8011942:	4632      	mov	r2, r6
        dsc->res.opa = LV_OPA_COVER;
 8011944:	75a3      	strb	r3, [r4, #22]
 8011946:	e76c      	b.n	8011822 <_lv_img_buf_transform_anti_alias+0x144>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8011948:	2aff      	cmp	r2, #255	; 0xff
 801194a:	f43f af6f 	beq.w	801182c <_lv_img_buf_transform_anti_alias+0x14e>
    else c0 = lv_color_mix(c00, c01, xr0);
 801194e:	4648      	mov	r0, r9
 8011950:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011954:	f7ff fc48 	bl	80111e8 <lv_color_mix>
 8011958:	4681      	mov	r9, r0
 801195a:	e767      	b.n	801182c <_lv_img_buf_transform_anti_alias+0x14e>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 801195c:	2eff      	cmp	r6, #255	; 0xff
 801195e:	d102      	bne.n	8011966 <_lv_img_buf_transform_anti_alias+0x288>
 8011960:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011964:	e767      	b.n	8011836 <_lv_img_buf_transform_anti_alias+0x158>
    else c1 = lv_color_mix(c10, c11, xr1);
 8011966:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801196a:	4632      	mov	r2, r6
 801196c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8011970:	f7ff fc3a 	bl	80111e8 <lv_color_mix>
 8011974:	4601      	mov	r1, r0
 8011976:	e75e      	b.n	8011836 <_lv_img_buf_transform_anti_alias+0x158>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8011978:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801197c:	d102      	bne.n	8011984 <_lv_img_buf_transform_anti_alias+0x2a6>
 801197e:	f8a4 9014 	strh.w	r9, [r4, #20]
 8011982:	e75d      	b.n	8011840 <_lv_img_buf_transform_anti_alias+0x162>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8011984:	4642      	mov	r2, r8
 8011986:	4648      	mov	r0, r9
 8011988:	f7ff fc2e 	bl	80111e8 <lv_color_mix>
 801198c:	82a0      	strh	r0, [r4, #20]
 801198e:	e757      	b.n	8011840 <_lv_img_buf_transform_anti_alias+0x162>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8011990:	2000      	movs	r0, #0
 8011992:	e756      	b.n	8011842 <_lv_img_buf_transform_anti_alias+0x164>

08011994 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 8011994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
 8011998:	4b43      	ldr	r3, [pc, #268]	; (8011aa8 <_lv_img_cache_open+0x114>)
{
 801199a:	4606      	mov	r6, r0
 801199c:	460f      	mov	r7, r1
    if(entry_cnt == 0) {
 801199e:	881c      	ldrh	r4, [r3, #0]
 80119a0:	4698      	mov	r8, r3
 80119a2:	2c00      	cmp	r4, #0
 80119a4:	d05c      	beq.n	8011a60 <_lv_img_cache_open+0xcc>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80119a6:	4b41      	ldr	r3, [pc, #260]	; (8011aac <_lv_img_cache_open+0x118>)
 80119a8:	2224      	movs	r2, #36	; 0x24

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 80119aa:	4941      	ldr	r1, [pc, #260]	; (8011ab0 <_lv_img_cache_open+0x11c>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80119ac:	681d      	ldr	r5, [r3, #0]
 80119ae:	462b      	mov	r3, r5
 80119b0:	fb02 5404 	mla	r4, r2, r4, r5
    for(i = 0; i < entry_cnt; i++) {
 80119b4:	429c      	cmp	r4, r3
 80119b6:	d133      	bne.n	8011a20 <_lv_img_cache_open+0x8c>
 80119b8:	f04f 0900 	mov.w	r9, #0
        }
    }

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 80119bc:	f04f 0a24 	mov.w	sl, #36	; 0x24
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 80119c0:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < entry_cnt; i++) {
 80119c4:	f8b8 0000 	ldrh.w	r0, [r8]
 80119c8:	fa1f f389 	uxth.w	r3, r9
 80119cc:	4298      	cmp	r0, r3
 80119ce:	d830      	bhi.n	8011a32 <_lv_img_cache_open+0x9e>
 80119d0:	f105 0224 	add.w	r2, r5, #36	; 0x24

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;

    /*Find an entry to reuse. Select the entry with the least life*/
    cached_src = &cache[0];
 80119d4:	462c      	mov	r4, r5
    for(i = 1; i < entry_cnt; i++) {
 80119d6:	2301      	movs	r3, #1
 80119d8:	4298      	cmp	r0, r3
 80119da:	d84f      	bhi.n	8011a7c <_lv_img_cache_open+0xe8>
            cached_src = &cache[i];
        }
    }

    /*Close the decoder to reuse if it was opened (has a valid source)*/
    if(cached_src->dec_dsc.src) {
 80119dc:	6863      	ldr	r3, [r4, #4]
 80119de:	b113      	cbz	r3, 80119e6 <_lv_img_cache_open+0x52>
        lv_img_decoder_close(&cached_src->dec_dsc);
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 fc77 	bl	80122d4 <lv_img_decoder_close>
    cached_src = &cache_temp;
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start;
    t_start                          = lv_tick_get();
    cached_src->dec_dsc.time_to_open = 0;
 80119e6:	2500      	movs	r5, #0
    t_start                          = lv_tick_get();
 80119e8:	f001 f9a8 	bl	8012d3c <lv_tick_get>
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 80119ec:	4631      	mov	r1, r6
    t_start                          = lv_tick_get();
 80119ee:	4680      	mov	r8, r0
    cached_src->dec_dsc.time_to_open = 0;
 80119f0:	6165      	str	r5, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 80119f2:	463a      	mov	r2, r7
 80119f4:	4620      	mov	r0, r4
 80119f6:	f000 fc17 	bl	8012228 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 80119fa:	4606      	mov	r6, r0
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d146      	bne.n	8011a8e <_lv_img_cache_open+0xfa>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_img_decoder_close(&cached_src->dec_dsc);
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 fc67 	bl	80122d4 <lv_img_decoder_close>
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011a06:	4620      	mov	r0, r4
 8011a08:	2120      	movs	r1, #32
 8011a0a:	f002 fb31 	bl	8014070 <_lv_memset_00>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 8011a0e:	4620      	mov	r0, r4
 8011a10:	2124      	movs	r1, #36	; 0x24
 8011a12:	f002 fb2d 	bl	8014070 <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8011a16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a1a:	6223      	str	r3, [r4, #32]
        return NULL;
 8011a1c:	4634      	mov	r4, r6
 8011a1e:	e01f      	b.n	8011a60 <_lv_img_cache_open+0xcc>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8011a20:	6a1a      	ldr	r2, [r3, #32]
 8011a22:	3324      	adds	r3, #36	; 0x24
 8011a24:	428a      	cmp	r2, r1
            cache[i].life -= LV_IMG_CACHE_AGING;
 8011a26:	bfa4      	itt	ge
 8011a28:	f102 32ff 	addge.w	r2, r2, #4294967295	; 0xffffffff
 8011a2c:	f843 2c04 	strge.w	r2, [r3, #-4]
 8011a30:	e7c0      	b.n	80119b4 <_lv_img_cache_open+0x20>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 8011a32:	fa1f f489 	uxth.w	r4, r9
 8011a36:	fb0a 5404 	mla	r4, sl, r4, r5
 8011a3a:	6860      	ldr	r0, [r4, #4]
 8011a3c:	f7fb fc08 	bl	800d250 <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
 8011a40:	b988      	cbnz	r0, 8011a66 <_lv_img_cache_open+0xd2>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8011a42:	6863      	ldr	r3, [r4, #4]
 8011a44:	42b3      	cmp	r3, r6
 8011a46:	d116      	bne.n	8011a76 <_lv_img_cache_open+0xe2>
 8011a48:	8923      	ldrh	r3, [r4, #8]
 8011a4a:	455b      	cmp	r3, fp
 8011a4c:	d113      	bne.n	8011a76 <_lv_img_cache_open+0xe2>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8011a4e:	6a23      	ldr	r3, [r4, #32]
 8011a50:	6962      	ldr	r2, [r4, #20]
 8011a52:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8011a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a58:	bfc8      	it	gt
 8011a5a:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 8011a5e:	6223      	str	r3, [r4, #32]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 8011a60:	4620      	mov	r0, r4
 8011a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(src_type == LV_IMG_SRC_FILE) {
 8011a66:	2801      	cmp	r0, #1
 8011a68:	d105      	bne.n	8011a76 <_lv_img_cache_open+0xe2>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	6860      	ldr	r0, [r4, #4]
 8011a6e:	f7ee fbcf 	bl	8000210 <strcmp>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d0eb      	beq.n	8011a4e <_lv_img_cache_open+0xba>
 8011a76:	f109 0901 	add.w	r9, r9, #1
 8011a7a:	e7a3      	b.n	80119c4 <_lv_img_cache_open+0x30>
        if(cache[i].life < cached_src->life) {
 8011a7c:	6a11      	ldr	r1, [r2, #32]
    for(i = 1; i < entry_cnt; i++) {
 8011a7e:	3301      	adds	r3, #1
        if(cache[i].life < cached_src->life) {
 8011a80:	6a25      	ldr	r5, [r4, #32]
    for(i = 1; i < entry_cnt; i++) {
 8011a82:	b29b      	uxth	r3, r3
        if(cache[i].life < cached_src->life) {
 8011a84:	42a9      	cmp	r1, r5
 8011a86:	bfb8      	it	lt
 8011a88:	4614      	movlt	r4, r2
 8011a8a:	3224      	adds	r2, #36	; 0x24
 8011a8c:	e7a4      	b.n	80119d8 <_lv_img_cache_open+0x44>
    if(cached_src->dec_dsc.time_to_open == 0) {
 8011a8e:	6963      	ldr	r3, [r4, #20]
    cached_src->life = 0;
 8011a90:	6225      	str	r5, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
 8011a92:	b91b      	cbnz	r3, 8011a9c <_lv_img_cache_open+0x108>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8011a94:	4640      	mov	r0, r8
 8011a96:	f001 f95b 	bl	8012d50 <lv_tick_elaps>
 8011a9a:	6160      	str	r0, [r4, #20]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8011a9c:	6963      	ldr	r3, [r4, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1de      	bne.n	8011a60 <_lv_img_cache_open+0xcc>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	6163      	str	r3, [r4, #20]
 8011aa6:	e7db      	b.n	8011a60 <_lv_img_cache_open+0xcc>
 8011aa8:	20020864 	.word	0x20020864
 8011aac:	20028cbc 	.word	0x20028cbc
 8011ab0:	80000002 	.word	0x80000002

08011ab4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8011ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8011ab8:	4b11      	ldr	r3, [pc, #68]	; (8011b00 <lv_img_cache_invalidate_src+0x4c>)
{
 8011aba:	4606      	mov	r6, r0

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8011abc:	2500      	movs	r5, #0
 8011abe:	4f11      	ldr	r7, [pc, #68]	; (8011b04 <lv_img_cache_invalidate_src+0x50>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8011ac0:	f8d3 8000 	ldr.w	r8, [r3]
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8011ac4:	f04f 0924 	mov.w	r9, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8011ac8:	883a      	ldrh	r2, [r7, #0]
 8011aca:	b2ab      	uxth	r3, r5
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d801      	bhi.n	8011ad4 <lv_img_cache_invalidate_src+0x20>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
#endif
}
 8011ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8011ad4:	b2ac      	uxth	r4, r5
 8011ad6:	fb09 8404 	mla	r4, r9, r4, r8
 8011ada:	6863      	ldr	r3, [r4, #4]
 8011adc:	42b3      	cmp	r3, r6
 8011ade:	d000      	beq.n	8011ae2 <lv_img_cache_invalidate_src+0x2e>
 8011ae0:	b95e      	cbnz	r6, 8011afa <lv_img_cache_invalidate_src+0x46>
            if(cache[i].dec_dsc.src != NULL) {
 8011ae2:	b113      	cbz	r3, 8011aea <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f000 fbf5 	bl	80122d4 <lv_img_decoder_close>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011aea:	2120      	movs	r1, #32
 8011aec:	4620      	mov	r0, r4
 8011aee:	f002 fabf 	bl	8014070 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 8011af2:	2124      	movs	r1, #36	; 0x24
 8011af4:	4620      	mov	r0, r4
 8011af6:	f002 fabb 	bl	8014070 <_lv_memset_00>
 8011afa:	3501      	adds	r5, #1
 8011afc:	e7e4      	b.n	8011ac8 <lv_img_cache_invalidate_src+0x14>
 8011afe:	bf00      	nop
 8011b00:	20028cbc 	.word	0x20028cbc
 8011b04:	20020864 	.word	0x20020864

08011b08 <lv_img_cache_set_size>:
{
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8011b0c:	4c1b      	ldr	r4, [pc, #108]	; (8011b7c <lv_img_cache_set_size+0x74>)
{
 8011b0e:	4606      	mov	r6, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8011b10:	6823      	ldr	r3, [r4, #0]
 8011b12:	b12b      	cbz	r3, 8011b20 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 8011b14:	2000      	movs	r0, #0
 8011b16:	f7ff ffcd 	bl	8011ab4 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	f002 f862 	bl	8013be4 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8011b20:	2524      	movs	r5, #36	; 0x24
 8011b22:	fb05 f006 	mul.w	r0, r5, r6
 8011b26:	f002 f80f 	bl	8013b48 <lv_mem_alloc>
 8011b2a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8011b2c:	f001 fd64 	bl	80135f8 <lv_debug_check_null>
 8011b30:	4603      	mov	r3, r0
 8011b32:	b920      	cbnz	r0, 8011b3e <lv_img_cache_set_size+0x36>
 8011b34:	6822      	ldr	r2, [r4, #0]
 8011b36:	4812      	ldr	r0, [pc, #72]	; (8011b80 <lv_img_cache_set_size+0x78>)
 8011b38:	f001 fd62 	bl	8013600 <lv_debug_log_error>
 8011b3c:	e7fe      	b.n	8011b3c <lv_img_cache_set_size+0x34>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	4f10      	ldr	r7, [pc, #64]	; (8011b84 <lv_img_cache_set_size+0x7c>)
 8011b42:	b913      	cbnz	r3, 8011b4a <lv_img_cache_set_size+0x42>
        entry_cnt = 0;
 8011b44:	803b      	strh	r3, [r7, #0]
}
 8011b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
 8011b4a:	803e      	strh	r6, [r7, #0]
    for(i = 0; i < entry_cnt; i++) {
 8011b4c:	2300      	movs	r3, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011b4e:	462e      	mov	r6, r5
    for(i = 0; i < entry_cnt; i++) {
 8011b50:	8839      	ldrh	r1, [r7, #0]
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	f103 0801 	add.w	r8, r3, #1
 8011b58:	4291      	cmp	r1, r2
 8011b5a:	d9f4      	bls.n	8011b46 <lv_img_cache_set_size+0x3e>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	6820      	ldr	r0, [r4, #0]
 8011b60:	2120      	movs	r1, #32
 8011b62:	fb06 f503 	mul.w	r5, r6, r3
 8011b66:	4428      	add	r0, r5
 8011b68:	f002 fa82 	bl	8014070 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 8011b6c:	6820      	ldr	r0, [r4, #0]
 8011b6e:	2124      	movs	r1, #36	; 0x24
 8011b70:	4428      	add	r0, r5
 8011b72:	f002 fa7d 	bl	8014070 <_lv_memset_00>
 8011b76:	4643      	mov	r3, r8
 8011b78:	e7ea      	b.n	8011b50 <lv_img_cache_set_size+0x48>
 8011b7a:	bf00      	nop
 8011b7c:	20028cbc 	.word	0x20028cbc
 8011b80:	0802c346 	.word	0x0802c346
 8011b84:	20020864 	.word	0x20020864

08011b88 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8011b88:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011b8a:	69cc      	ldr	r4, [r1, #28]
{
 8011b8c:	460d      	mov	r5, r1
    if(user_data) {
 8011b8e:	b19c      	cbz	r4, 8011bb8 <lv_img_decoder_built_in_close+0x30>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8011b90:	6820      	ldr	r0, [r4, #0]
 8011b92:	b120      	cbz	r0, 8011b9e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 8011b94:	f001 fd54 	bl	8013640 <lv_fs_close>
            lv_mem_free(user_data->f);
 8011b98:	6820      	ldr	r0, [r4, #0]
 8011b9a:	f002 f823 	bl	8013be4 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8011b9e:	6860      	ldr	r0, [r4, #4]
 8011ba0:	b108      	cbz	r0, 8011ba6 <lv_img_decoder_built_in_close+0x1e>
 8011ba2:	f002 f81f 	bl	8013be4 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8011ba6:	68a0      	ldr	r0, [r4, #8]
 8011ba8:	b108      	cbz	r0, 8011bae <lv_img_decoder_built_in_close+0x26>
 8011baa:	f002 f81b 	bl	8013be4 <lv_mem_free>

        lv_mem_free(user_data);
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f002 f818 	bl	8013be4 <lv_mem_free>

        dsc->user_data = NULL;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	61eb      	str	r3, [r5, #28]
    }
}
 8011bb8:	bd38      	pop	{r3, r4, r5, pc}

08011bba <lv_img_decoder_built_in_info>:
{
 8011bba:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011bbc:	4608      	mov	r0, r1
{
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011bc4:	f7fb fb44 	bl	800d250 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8011bc8:	b9c8      	cbnz	r0, 8011bfe <lv_img_decoder_built_in_info+0x44>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8011bca:	782b      	ldrb	r3, [r5, #0]
 8011bcc:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011bd0:	1f1a      	subs	r2, r3, #4
 8011bd2:	2a0a      	cmp	r2, #10
 8011bd4:	d811      	bhi.n	8011bfa <lv_img_decoder_built_in_info+0x40>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8011bd6:	682a      	ldr	r2, [r5, #0]
 8011bd8:	6821      	ldr	r1, [r4, #0]
 8011bda:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8011bde:	f362 2194 	bfi	r1, r2, #10, #11
 8011be2:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011be4:	886a      	ldrh	r2, [r5, #2]
 8011be6:	8861      	ldrh	r1, [r4, #2]
 8011be8:	0952      	lsrs	r2, r2, #5
 8011bea:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8011bee:	7822      	ldrb	r2, [r4, #0]
 8011bf0:	f363 0204 	bfi	r2, r3, #0, #5
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011bf4:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8011bf6:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 8011bf8:	2001      	movs	r0, #1
}
 8011bfa:	b005      	add	sp, #20
 8011bfc:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8011bfe:	2801      	cmp	r0, #1
 8011c00:	d11d      	bne.n	8011c3e <lv_img_decoder_built_in_info+0x84>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8011c02:	2202      	movs	r2, #2
 8011c04:	4629      	mov	r1, r5
 8011c06:	a802      	add	r0, sp, #8
 8011c08:	f001 fd70 	bl	80136ec <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8011c0c:	b138      	cbz	r0, 8011c1e <lv_img_decoder_built_in_info+0x64>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011c0e:	7823      	ldrb	r3, [r4, #0]
 8011c10:	331c      	adds	r3, #28
 8011c12:	f003 031f 	and.w	r3, r3, #31
 8011c16:	2b0a      	cmp	r3, #10
 8011c18:	d9ee      	bls.n	8011bf8 <lv_img_decoder_built_in_info+0x3e>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	e7ed      	b.n	8011bfa <lv_img_decoder_built_in_info+0x40>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8011c1e:	ab01      	add	r3, sp, #4
 8011c20:	2204      	movs	r2, #4
 8011c22:	4621      	mov	r1, r4
 8011c24:	a802      	add	r0, sp, #8
 8011c26:	f001 fd20 	bl	801366a <lv_fs_read>
 8011c2a:	4605      	mov	r5, r0
            lv_fs_close(&file);
 8011c2c:	a802      	add	r0, sp, #8
 8011c2e:	f001 fd07 	bl	8013640 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8011c32:	2d00      	cmp	r5, #0
 8011c34:	d1f1      	bne.n	8011c1a <lv_img_decoder_built_in_info+0x60>
 8011c36:	9b01      	ldr	r3, [sp, #4]
 8011c38:	2b04      	cmp	r3, #4
 8011c3a:	d1ee      	bne.n	8011c1a <lv_img_decoder_built_in_info+0x60>
 8011c3c:	e7e7      	b.n	8011c0e <lv_img_decoder_built_in_info+0x54>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8011c3e:	2802      	cmp	r0, #2
 8011c40:	d1eb      	bne.n	8011c1a <lv_img_decoder_built_in_info+0x60>
        header->w = 1;
 8011c42:	6823      	ldr	r3, [r4, #0]
 8011c44:	2001      	movs	r0, #1
 8011c46:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 8011c4a:	f3c3 420f 	ubfx	r2, r3, #16, #16
        header->w = 1;
 8011c4e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8011c50:	f360 124f 	bfi	r2, r0, #5, #11
 8011c54:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8011c56:	220b      	movs	r2, #11
 8011c58:	f362 0304 	bfi	r3, r2, #0, #5
 8011c5c:	7023      	strb	r3, [r4, #0]
 8011c5e:	e7cc      	b.n	8011bfa <lv_img_decoder_built_in_info+0x40>

08011c60 <lv_img_decoder_built_in_read_line>:
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011c60:	7b08      	ldrb	r0, [r1, #12]
{
 8011c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c66:	4699      	mov	r9, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011c68:	f000 031f 	and.w	r3, r0, #31
{
 8011c6c:	4614      	mov	r4, r2
 8011c6e:	b08b      	sub	sp, #44	; 0x2c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011c70:	1f1a      	subs	r2, r3, #4
{
 8011c72:	460d      	mov	r5, r1
 8011c74:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011c78:	2a02      	cmp	r2, #2
{
 8011c7a:	9e15      	ldr	r6, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011c7c:	d82c      	bhi.n	8011cd8 <lv_img_decoder_built_in_read_line+0x78>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011c7e:	7a8b      	ldrb	r3, [r1, #10]
 8011c80:	2b01      	cmp	r3, #1
 8011c82:	d111      	bne.n	8011ca8 <lv_img_decoder_built_in_read_line+0x48>
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011c84:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011c88:	69cf      	ldr	r7, [r1, #28]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011c8a:	f7fb f9e5 	bl	800d058 <lv_img_cf_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011c8e:	68e9      	ldr	r1, [r5, #12]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011c90:	4682      	mov	sl, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011c92:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8011c96:	fb19 4101 	smlabb	r1, r9, r1, r4
 8011c9a:	4341      	muls	r1, r0
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 8011c9c:	6838      	ldr	r0, [r7, #0]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011c9e:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(user_data->f, pos);
 8011ca0:	3104      	adds	r1, #4
 8011ca2:	f001 fcff 	bl	80136a4 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8011ca6:	b108      	cbz	r0, 8011cac <lv_img_decoder_built_in_read_line+0x4c>
    lv_res_t res = LV_RES_INV;
 8011ca8:	2000      	movs	r0, #0
 8011caa:	e012      	b.n	8011cd2 <lv_img_decoder_built_in_read_line+0x72>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 8011cac:	f3ca 0ac7 	ubfx	sl, sl, #3, #8
    uint32_t br  = 0;
 8011cb0:	ab0a      	add	r3, sp, #40	; 0x28
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8011cb2:	4631      	mov	r1, r6
    uint32_t btr = len * (px_size >> 3);
 8011cb4:	fb1a f808 	smulbb	r8, sl, r8
    uint32_t br  = 0;
 8011cb8:	f843 0d10 	str.w	r0, [r3, #-16]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8011cbc:	6838      	ldr	r0, [r7, #0]
 8011cbe:	4642      	mov	r2, r8
 8011cc0:	f001 fcd3 	bl	801366a <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d1ef      	bne.n	8011ca8 <lv_img_decoder_built_in_read_line+0x48>
        return LV_RES_INV;
 8011cc8:	9806      	ldr	r0, [sp, #24]
 8011cca:	eba0 0208 	sub.w	r2, r0, r8
 8011cce:	4250      	negs	r0, r2
 8011cd0:	4150      	adcs	r0, r2
}
 8011cd2:	b00b      	add	sp, #44	; 0x2c
 8011cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8011cd8:	f1a3 020b 	sub.w	r2, r3, #11
 8011cdc:	2a03      	cmp	r2, #3
 8011cde:	f200 80cc 	bhi.w	8011e7a <lv_img_decoder_built_in_read_line+0x21a>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011ce2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8011ce6:	aa06      	add	r2, sp, #24
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011ce8:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8011cec:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8011cf0:	4617      	mov	r7, r2
 8011cf2:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8011cf6:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8011cf8:	4bb1      	ldr	r3, [pc, #708]	; (8011fc0 <lv_img_decoder_built_in_read_line+0x360>)
 8011cfa:	f103 0e10 	add.w	lr, r3, #16
 8011cfe:	6818      	ldr	r0, [r3, #0]
 8011d00:	3308      	adds	r3, #8
 8011d02:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011d06:	4694      	mov	ip, r2
 8011d08:	4573      	cmp	r3, lr
 8011d0a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011d0e:	4662      	mov	r2, ip
 8011d10:	d1f5      	bne.n	8011cfe <lv_img_decoder_built_in_read_line+0x9e>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8011d12:	8929      	ldrh	r1, [r5, #8]
 8011d14:	4633      	mov	r3, r6
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8011d16:	2200      	movs	r2, #0
 8011d18:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    for(i = 0; i < len; i++) {
 8011d1c:	b210      	sxth	r0, r2
 8011d1e:	3303      	adds	r3, #3
 8011d20:	4580      	cmp	r8, r0
 8011d22:	dc14      	bgt.n	8011d4e <lv_img_decoder_built_in_read_line+0xee>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8011d24:	7b28      	ldrb	r0, [r5, #12]
 8011d26:	f000 001f 	and.w	r0, r0, #31
 8011d2a:	f7fb f995 	bl	800d058 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011d2e:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8011d30:	4682      	mov	sl, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011d32:	4083      	lsls	r3, r0
 8011d34:	3b01      	subs	r3, #1
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8011d3a:	7b2b      	ldrb	r3, [r5, #12]
 8011d3c:	f003 031f 	and.w	r3, r3, #31
 8011d40:	3b0b      	subs	r3, #11
 8011d42:	2b03      	cmp	r3, #3
 8011d44:	d860      	bhi.n	8011e08 <lv_img_decoder_built_in_read_line+0x1a8>
 8011d46:	e8df f003 	tbb	[pc, r3]
 8011d4a:	2c08      	.short	0x2c08
 8011d4c:	5541      	.short	0x5541
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8011d4e:	f803 1c03 	strb.w	r1, [r3, #-3]
 8011d52:	3201      	adds	r2, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8011d54:	f803 cc02 	strb.w	ip, [r3, #-2]
 8011d58:	e7e0      	b.n	8011d1c <lv_img_decoder_built_in_read_line+0xbc>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011d5a:	68eb      	ldr	r3, [r5, #12]
            if(dsc->header.w & 0x7) w++;
            ofs += w * y + (x >> 3); /*First pixel*/
 8011d5c:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 8011d5e:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 8011d60:	af04      	add	r7, sp, #16
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011d62:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos       = 7 - (x & 0x7);
 8011d66:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011d6a:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 8011d6c:	075b      	lsls	r3, r3, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011d6e:	bf0c      	ite	eq
 8011d70:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
 8011d74:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 8011d78:	fb0b 1109 	mla	r1, fp, r9, r1
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011d7c:	69eb      	ldr	r3, [r5, #28]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011d7e:	4658      	mov	r0, fp
 8011d80:	9103      	str	r1, [sp, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011d82:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011d84:	f002 f8d6 	bl	8013f34 <_lv_mem_buf_get>
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011d88:	7aab      	ldrb	r3, [r5, #10]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011d8a:	4681      	mov	r9, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011d8c:	9903      	ldr	r1, [sp, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d13e      	bne.n	8011e10 <lv_img_decoder_built_in_read_line+0x1b0>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 8011d92:	686b      	ldr	r3, [r5, #4]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8011d98:	f1ca 0008 	rsb	r0, sl, #8
        data_tmp = fs_buf;
 8011d9c:	2300      	movs	r3, #0
            pos = 8 - px_size;
 8011d9e:	b240      	sxtb	r0, r0
 8011da0:	e063      	b.n	8011e6a <lv_img_decoder_built_in_read_line+0x20a>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011da2:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 2); /*First pixel*/
 8011da4:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 8011da6:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011da8:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos       = 6 - ((x & 0x3) * 2);
 8011dac:	f004 0403 	and.w	r4, r4, #3
            if(dsc->header.w & 0x3) w++;
 8011db0:	079f      	lsls	r7, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011db2:	ea4f 02a3 	mov.w	r2, r3, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 8011db6:	ea4f 0444 	mov.w	r4, r4, lsl #1
            opa_table = alpha2_opa_table;
 8011dba:	af05      	add	r7, sp, #20
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011dbc:	bf0c      	ite	eq
 8011dbe:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
 8011dc2:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 8011dc6:	fb0b 1109 	mla	r1, fp, r9, r1
 8011dca:	e7d7      	b.n	8011d7c <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011dcc:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 1); /*First pixel*/
 8011dce:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011dd0:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x1) w++;
 8011dd4:	07d8      	lsls	r0, r3, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011dd6:	ea4f 0263 	mov.w	r2, r3, asr #1
 8011dda:	bf54      	ite	pl
 8011ddc:	fa0f fb82 	sxthpl.w	fp, r2
            if(dsc->header.w & 0x1) w++;
 8011de0:	f102 0b01 	addmi.w	fp, r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 8011de4:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8011de8:	fb0b 1109 	mla	r1, fp, r9, r1
            pos       = 4 - ((x & 0x1) * 4);
 8011dec:	bf0c      	ite	eq
 8011dee:	2404      	moveq	r4, #4
 8011df0:	2400      	movne	r4, #0
 8011df2:	e7c3      	b.n	8011d7c <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8011df4:	68e9      	ldr	r1, [r5, #12]
 8011df6:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8011dfa:	fa0f fb81 	sxth.w	fp, r1
            ofs += w * y + x;  /*First pixel*/
 8011dfe:	fb19 4101 	smlabb	r1, r9, r1, r4
            pos = 0;
 8011e02:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8011e04:	4627      	mov	r7, r4
 8011e06:	e7b9      	b.n	8011d7c <lv_img_decoder_built_in_read_line+0x11c>
    int8_t pos   = 0;
 8011e08:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 8011e0a:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 8011e0c:	46a3      	mov	fp, r4
 8011e0e:	e7f9      	b.n	8011e04 <lv_img_decoder_built_in_read_line+0x1a4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011e10:	9b01      	ldr	r3, [sp, #4]
 8011e12:	3104      	adds	r1, #4
 8011e14:	6818      	ldr	r0, [r3, #0]
 8011e16:	f001 fc45 	bl	80136a4 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8011e1a:	9801      	ldr	r0, [sp, #4]
 8011e1c:	4649      	mov	r1, r9
 8011e1e:	2300      	movs	r3, #0
 8011e20:	465a      	mov	r2, fp
 8011e22:	6800      	ldr	r0, [r0, #0]
 8011e24:	f001 fc21 	bl	801366a <lv_fs_read>
        data_tmp = fs_buf;
 8011e28:	4649      	mov	r1, r9
 8011e2a:	e7b5      	b.n	8011d98 <lv_img_decoder_built_in_read_line+0x138>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8011e2c:	9a02      	ldr	r2, [sp, #8]
 8011e2e:	f891 e000 	ldrb.w	lr, [r1]
 8011e32:	fa02 fc04 	lsl.w	ip, r2, r4
 8011e36:	ea0e 020c 	and.w	r2, lr, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8011e3a:	f895 c00c 	ldrb.w	ip, [r5, #12]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8011e3e:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8011e40:	f00c 0c1f 	and.w	ip, ip, #31
        pos -= px_size;
 8011e44:	eba4 040a 	sub.w	r4, r4, sl
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8011e48:	f1bc 0f0e 	cmp.w	ip, #14
 8011e4c:	b2d2      	uxtb	r2, r2
        pos -= px_size;
 8011e4e:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8011e50:	bf18      	it	ne
 8011e52:	5cba      	ldrbne	r2, [r7, r2]
 8011e54:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
        if(pos < 0) {
 8011e58:	2c00      	cmp	r4, #0
 8011e5a:	f103 0301 	add.w	r3, r3, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8011e5e:	44b4      	add	ip, r6
            pos = 8 - px_size;
 8011e60:	bfbc      	itt	lt
 8011e62:	4604      	movlt	r4, r0
            data_tmp++;
 8011e64:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8011e66:	f88c 2002 	strb.w	r2, [ip, #2]
    for(i = 0; i < len; i++) {
 8011e6a:	b21a      	sxth	r2, r3
 8011e6c:	4590      	cmp	r8, r2
 8011e6e:	dcdd      	bgt.n	8011e2c <lv_img_decoder_built_in_read_line+0x1cc>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 8011e70:	4648      	mov	r0, r9
            pos = 8 - px_size;
            data_tmp++;
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 8011e72:	f001 fef5 	bl	8013c60 <_lv_mem_buf_release>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8011e76:	2001      	movs	r0, #1
 8011e78:	e72b      	b.n	8011cd2 <lv_img_decoder_built_in_read_line+0x72>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8011e7a:	3b07      	subs	r3, #7
 8011e7c:	2b03      	cmp	r3, #3
 8011e7e:	f63f af13 	bhi.w	8011ca8 <lv_img_decoder_built_in_read_line+0x48>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011e82:	f000 001f 	and.w	r0, r0, #31
 8011e86:	f7fb f8e7 	bl	800d058 <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011e8a:	2301      	movs	r3, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011e8c:	4682      	mov	sl, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011e8e:	4083      	lsls	r3, r0
 8011e90:	3b01      	subs	r3, #1
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 8011e96:	7b2b      	ldrb	r3, [r5, #12]
 8011e98:	f003 031f 	and.w	r3, r3, #31
 8011e9c:	3b07      	subs	r3, #7
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d858      	bhi.n	8011f54 <lv_img_decoder_built_in_read_line+0x2f4>
 8011ea2:	e8df f003 	tbb	[pc, r3]
 8011ea6:	2702      	.short	0x2702
 8011ea8:	4d3a      	.short	0x4d3a
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011eaa:	68eb      	ldr	r3, [r5, #12]
 8011eac:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011eb0:	10df      	asrs	r7, r3, #3
            if(dsc->header.w & 0x7) w++;
 8011eb2:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 8011eb4:	ea4f 01e4 	mov.w	r1, r4, asr #3
            pos = 7 - (x & 0x7);
 8011eb8:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8011ebc:	bf0c      	ite	eq
 8011ebe:	b23f      	sxtheq	r7, r7
            if(dsc->header.w & 0x7) w++;
 8011ec0:	3701      	addne	r7, #1
            pos = 7 - (x & 0x7);
 8011ec2:	f004 0407 	and.w	r4, r4, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 8011ec6:	fb07 1909 	mla	r9, r7, r9, r1
            ofs += 8;                /*Skip the palette*/
 8011eca:	f109 0108 	add.w	r1, r9, #8
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011ece:	4638      	mov	r0, r7
 8011ed0:	9102      	str	r1, [sp, #8]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011ed2:	f8d5 901c 	ldr.w	r9, [r5, #28]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011ed6:	f002 f82d 	bl	8013f34 <_lv_mem_buf_get>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011eda:	7aab      	ldrb	r3, [r5, #10]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8011edc:	4683      	mov	fp, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8011ede:	9902      	ldr	r1, [sp, #8]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d13b      	bne.n	8011f5c <lv_img_decoder_built_in_read_line+0x2fc>
        data_tmp                     = img_dsc->data + ofs;
 8011ee4:	686b      	ldr	r3, [r5, #4]
 8011ee6:	689b      	ldr	r3, [r3, #8]
 8011ee8:	4419      	add	r1, r3
            pos = 8 - px_size;
 8011eea:	f1ca 0708 	rsb	r7, sl, #8
        data_tmp = fs_buf;
 8011eee:	2500      	movs	r5, #0
            pos = 8 - px_size;
 8011ef0:	b27f      	sxtb	r7, r7
 8011ef2:	e05f      	b.n	8011fb4 <lv_img_decoder_built_in_read_line+0x354>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011ef4:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 2); /*First pixel*/
 8011ef6:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 8011ef8:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011efa:	f3c3 238a 	ubfx	r3, r3, #10, #11
            pos = 6 - ((x & 0x3) * 2);
 8011efe:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011f02:	109f      	asrs	r7, r3, #2
            if(dsc->header.w & 0x3) w++;
 8011f04:	079a      	lsls	r2, r3, #30
            pos = 6 - ((x & 0x3) * 2);
 8011f06:	ea4f 0444 	mov.w	r4, r4, lsl #1
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8011f0a:	bf0c      	ite	eq
 8011f0c:	b23f      	sxtheq	r7, r7
            if(dsc->header.w & 0x3) w++;
 8011f0e:	3701      	addne	r7, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 8011f10:	fb07 1909 	mla	r9, r7, r9, r1
            ofs += 16;               /*Skip the palette*/
 8011f14:	f109 0110 	add.w	r1, r9, #16
 8011f18:	e7d9      	b.n	8011ece <lv_img_decoder_built_in_read_line+0x26e>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011f1a:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 1); /*First pixel*/
 8011f1c:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011f1e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011f22:	105f      	asrs	r7, r3, #1
            if(dsc->header.w & 0x1) w++;
 8011f24:	07db      	lsls	r3, r3, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8011f26:	bf54      	ite	pl
 8011f28:	b23f      	sxthpl	r7, r7
            if(dsc->header.w & 0x1) w++;
 8011f2a:	3701      	addmi	r7, #1
            pos = 4 - ((x & 0x1) * 4);
 8011f2c:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8011f30:	fb07 1909 	mla	r9, r7, r9, r1
            pos = 4 - ((x & 0x1) * 4);
 8011f34:	bf0c      	ite	eq
 8011f36:	2404      	moveq	r4, #4
 8011f38:	2400      	movne	r4, #0
            ofs += 64;               /*Skip the palette*/
 8011f3a:	f109 0140 	add.w	r1, r9, #64	; 0x40
 8011f3e:	e7c6      	b.n	8011ece <lv_img_decoder_built_in_read_line+0x26e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8011f40:	68e9      	ldr	r1, [r5, #12]
 8011f42:	f3c1 218a 	ubfx	r1, r1, #10, #11
            ofs += w * y + x;  /*First pixel*/
 8011f46:	fb19 4401 	smlabb	r4, r9, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8011f4a:	b20f      	sxth	r7, r1
            ofs += 1024;       /*Skip the palette*/
 8011f4c:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 8011f50:	2400      	movs	r4, #0
 8011f52:	e7bc      	b.n	8011ece <lv_img_decoder_built_in_read_line+0x26e>
    uint32_t ofs = 0;
 8011f54:	2100      	movs	r1, #0
    int8_t pos   = 0;
 8011f56:	460c      	mov	r4, r1
    lv_coord_t w = 0;
 8011f58:	460f      	mov	r7, r1
 8011f5a:	e7b8      	b.n	8011ece <lv_img_decoder_built_in_read_line+0x26e>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8011f5c:	3104      	adds	r1, #4
 8011f5e:	f8d9 0000 	ldr.w	r0, [r9]
 8011f62:	f001 fb9f 	bl	80136a4 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8011f66:	4659      	mov	r1, fp
 8011f68:	2300      	movs	r3, #0
 8011f6a:	463a      	mov	r2, r7
 8011f6c:	f8d9 0000 	ldr.w	r0, [r9]
 8011f70:	f001 fb7b 	bl	801366a <lv_fs_read>
        data_tmp = fs_buf;
 8011f74:	4659      	mov	r1, fp
 8011f76:	e7b8      	b.n	8011eea <lv_img_decoder_built_in_read_line+0x28a>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	3501      	adds	r5, #1
 8011f7c:	7808      	ldrb	r0, [r1, #0]
 8011f7e:	3603      	adds	r6, #3
 8011f80:	40a3      	lsls	r3, r4
 8011f82:	4018      	ands	r0, r3
        lv_color_t color = user_data->palette[val_act];
 8011f84:	f8d9 3004 	ldr.w	r3, [r9, #4]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8011f88:	4120      	asrs	r0, r4
        pos -= px_size;
 8011f8a:	eba4 040a 	sub.w	r4, r4, sl
        lv_color_t color = user_data->palette[val_act];
 8011f8e:	b2c0      	uxtb	r0, r0
        pos -= px_size;
 8011f90:	b264      	sxtb	r4, r4
        lv_color_t color = user_data->palette[val_act];
 8011f92:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
        if(pos < 0) {
 8011f96:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 8011f98:	f806 3c03 	strb.w	r3, [r6, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8011f9c:	ea4f 2313 	mov.w	r3, r3, lsr #8
            pos = 8 - px_size;
 8011fa0:	bfbc      	itt	lt
 8011fa2:	463c      	movlt	r4, r7
            data_tmp++;
 8011fa4:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8011fa6:	f806 3c02 	strb.w	r3, [r6, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8011faa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011fae:	5c1b      	ldrb	r3, [r3, r0]
 8011fb0:	f806 3c01 	strb.w	r3, [r6, #-1]
    for(i = 0; i < len; i++) {
 8011fb4:	b22b      	sxth	r3, r5
 8011fb6:	4598      	cmp	r8, r3
 8011fb8:	dcde      	bgt.n	8011f78 <lv_img_decoder_built_in_read_line+0x318>
    _lv_mem_buf_release(fs_buf);
 8011fba:	4658      	mov	r0, fp
 8011fbc:	e759      	b.n	8011e72 <lv_img_decoder_built_in_read_line+0x212>
 8011fbe:	bf00      	nop
 8011fc0:	0801f50a 	.word	0x0801f50a

08011fc4 <lv_img_decoder_built_in_open>:
{
 8011fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011fc8:	7a8b      	ldrb	r3, [r1, #10]
{
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d14b      	bne.n	801206a <lv_img_decoder_built_in_open+0xa6>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8011fd2:	6848      	ldr	r0, [r1, #4]
 8011fd4:	f001 fbde 	bl	8013794 <lv_fs_get_ext>
 8011fd8:	497c      	ldr	r1, [pc, #496]	; (80121cc <lv_img_decoder_built_in_open+0x208>)
 8011fda:	f7ee f919 	bl	8000210 <strcmp>
 8011fde:	bb60      	cbnz	r0, 801203a <lv_img_decoder_built_in_open+0x76>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8011fe0:	2202      	movs	r2, #2
 8011fe2:	6861      	ldr	r1, [r4, #4]
 8011fe4:	4668      	mov	r0, sp
 8011fe6:	f001 fb81 	bl	80136ec <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8011fea:	bb30      	cbnz	r0, 801203a <lv_img_decoder_built_in_open+0x76>
        if(dsc->user_data == NULL) {
 8011fec:	69e3      	ldr	r3, [r4, #28]
 8011fee:	b98b      	cbnz	r3, 8012014 <lv_img_decoder_built_in_open+0x50>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8011ff0:	200c      	movs	r0, #12
 8011ff2:	f001 fda9 	bl	8013b48 <lv_mem_alloc>
 8011ff6:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
 8011ff8:	f001 fafe 	bl	80135f8 <lv_debug_check_null>
 8011ffc:	69e2      	ldr	r2, [r4, #28]
 8011ffe:	4603      	mov	r3, r0
 8012000:	b918      	cbnz	r0, 801200a <lv_img_decoder_built_in_open+0x46>
 8012002:	4873      	ldr	r0, [pc, #460]	; (80121d0 <lv_img_decoder_built_in_open+0x20c>)
 8012004:	f001 fafc 	bl	8013600 <lv_debug_log_error>
 8012008:	e7fe      	b.n	8012008 <lv_img_decoder_built_in_open+0x44>
            if(dsc->user_data == NULL) {
 801200a:	b1b2      	cbz	r2, 801203a <lv_img_decoder_built_in_open+0x76>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801200c:	210c      	movs	r1, #12
 801200e:	4610      	mov	r0, r2
 8012010:	f002 f82e 	bl	8014070 <_lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012014:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
 8012016:	2008      	movs	r0, #8
 8012018:	f001 fd96 	bl	8013b48 <lv_mem_alloc>
 801201c:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
 801201e:	f001 faeb 	bl	80135f8 <lv_debug_check_null>
 8012022:	682a      	ldr	r2, [r5, #0]
 8012024:	4603      	mov	r3, r0
 8012026:	b918      	cbnz	r0, 8012030 <lv_img_decoder_built_in_open+0x6c>
 8012028:	4869      	ldr	r0, [pc, #420]	; (80121d0 <lv_img_decoder_built_in_open+0x20c>)
 801202a:	f001 fae9 	bl	8013600 <lv_debug_log_error>
 801202e:	e7fe      	b.n	801202e <lv_img_decoder_built_in_open+0x6a>
        if(user_data->f == NULL) {
 8012030:	b92a      	cbnz	r2, 801203e <lv_img_decoder_built_in_open+0x7a>
                lv_img_decoder_built_in_close(decoder, dsc);
 8012032:	4621      	mov	r1, r4
 8012034:	4630      	mov	r0, r6
 8012036:	f7ff fda7 	bl	8011b88 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
 801203a:	2000      	movs	r0, #0
 801203c:	e01b      	b.n	8012076 <lv_img_decoder_built_in_open+0xb2>
 801203e:	2300      	movs	r3, #0
 8012040:	f81d 1003 	ldrb.w	r1, [sp, r3]
 8012044:	3301      	adds	r3, #1
    while(len) {
 8012046:	2b08      	cmp	r3, #8
        *d8 = *s8;
 8012048:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
 801204c:	d1f8      	bne.n	8012040 <lv_img_decoder_built_in_open+0x7c>
    lv_img_cf_t cf = dsc->header.cf;
 801204e:	7b20      	ldrb	r0, [r4, #12]
 8012050:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8012054:	1f03      	subs	r3, r0, #4
 8012056:	2b02      	cmp	r3, #2
 8012058:	d810      	bhi.n	801207c <lv_img_decoder_built_in_open+0xb8>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801205a:	7aa3      	ldrb	r3, [r4, #10]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d158      	bne.n	8012112 <lv_img_decoder_built_in_open+0x14e>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8012060:	6863      	ldr	r3, [r4, #4]
 8012062:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 8012064:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
 8012066:	2001      	movs	r0, #1
 8012068:	e005      	b.n	8012076 <lv_img_decoder_built_in_open+0xb2>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1ef      	bne.n	801204e <lv_img_decoder_built_in_open+0x8a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 801206e:	684b      	ldr	r3, [r1, #4]
 8012070:	6898      	ldr	r0, [r3, #8]
 8012072:	2800      	cmp	r0, #0
 8012074:	d1eb      	bne.n	801204e <lv_img_decoder_built_in_open+0x8a>
}
 8012076:	b002      	add	sp, #8
 8012078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 801207c:	1fc3      	subs	r3, r0, #7
 801207e:	2b03      	cmp	r3, #3
 8012080:	f200 809f 	bhi.w	80121c2 <lv_img_decoder_built_in_open+0x1fe>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8012084:	f7fa ffe8 	bl	800d058 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8012088:	69e3      	ldr	r3, [r4, #28]
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 801208a:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 801208c:	b993      	cbnz	r3, 80120b4 <lv_img_decoder_built_in_open+0xf0>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 801208e:	200c      	movs	r0, #12
 8012090:	f001 fd5a 	bl	8013b48 <lv_mem_alloc>
 8012094:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
 8012096:	f001 faaf 	bl	80135f8 <lv_debug_check_null>
 801209a:	69e2      	ldr	r2, [r4, #28]
 801209c:	4603      	mov	r3, r0
 801209e:	b918      	cbnz	r0, 80120a8 <lv_img_decoder_built_in_open+0xe4>
 80120a0:	484b      	ldr	r0, [pc, #300]	; (80121d0 <lv_img_decoder_built_in_open+0x20c>)
 80120a2:	f001 faad 	bl	8013600 <lv_debug_log_error>
 80120a6:	e7fe      	b.n	80120a6 <lv_img_decoder_built_in_open+0xe2>
            if(dsc->user_data == NULL) {
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	d0c2      	beq.n	8012032 <lv_img_decoder_built_in_open+0x6e>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80120ac:	210c      	movs	r1, #12
 80120ae:	4610      	mov	r0, r2
 80120b0:	f001 ffde 	bl	8014070 <_lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80120b4:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80120b6:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80120b8:	40b8      	lsls	r0, r7
 80120ba:	f001 fd45 	bl	8013b48 <lv_mem_alloc>
 80120be:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
 80120c0:	f001 fa9a 	bl	80135f8 <lv_debug_check_null>
 80120c4:	4603      	mov	r3, r0
 80120c6:	b920      	cbnz	r0, 80120d2 <lv_img_decoder_built_in_open+0x10e>
 80120c8:	686a      	ldr	r2, [r5, #4]
 80120ca:	4841      	ldr	r0, [pc, #260]	; (80121d0 <lv_img_decoder_built_in_open+0x20c>)
 80120cc:	f001 fa98 	bl	8013600 <lv_debug_log_error>
 80120d0:	e7fe      	b.n	80120d0 <lv_img_decoder_built_in_open+0x10c>
        uint32_t palette_size = 1 << px_size;
 80120d2:	2301      	movs	r3, #1
 80120d4:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80120d8:	4638      	mov	r0, r7
 80120da:	f001 fd35 	bl	8013b48 <lv_mem_alloc>
 80120de:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
 80120e0:	f001 fa8a 	bl	80135f8 <lv_debug_check_null>
 80120e4:	4603      	mov	r3, r0
 80120e6:	b920      	cbnz	r0, 80120f2 <lv_img_decoder_built_in_open+0x12e>
 80120e8:	68aa      	ldr	r2, [r5, #8]
 80120ea:	4839      	ldr	r0, [pc, #228]	; (80121d0 <lv_img_decoder_built_in_open+0x20c>)
 80120ec:	f001 fa88 	bl	8013600 <lv_debug_log_error>
 80120f0:	e7fe      	b.n	80120f0 <lv_img_decoder_built_in_open+0x12c>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80120f2:	686b      	ldr	r3, [r5, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d09c      	beq.n	8012032 <lv_img_decoder_built_in_open+0x6e>
 80120f8:	68ab      	ldr	r3, [r5, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d099      	beq.n	8012032 <lv_img_decoder_built_in_open+0x6e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80120fe:	7aa3      	ldrb	r3, [r4, #10]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d132      	bne.n	801216a <lv_img_decoder_built_in_open+0x1a6>
            for(i = 0; i < palette_size; i++) {
 8012104:	2600      	movs	r6, #0
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8012106:	2104      	movs	r1, #4
 8012108:	6828      	ldr	r0, [r5, #0]
 801210a:	f001 facb 	bl	80136a4 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 801210e:	42be      	cmp	r6, r7
 8012110:	d101      	bne.n	8012116 <lv_img_decoder_built_in_open+0x152>
            dsc->img_data = NULL;
 8012112:	2300      	movs	r3, #0
 8012114:	e7a6      	b.n	8012064 <lv_img_decoder_built_in_open+0xa0>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8012116:	2300      	movs	r3, #0
 8012118:	2204      	movs	r2, #4
 801211a:	4669      	mov	r1, sp
 801211c:	6828      	ldr	r0, [r5, #0]
 801211e:	f001 faa4 	bl	801366a <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8012122:	686a      	ldr	r2, [r5, #4]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 8012124:	f89d 3000 	ldrb.w	r3, [sp]
 8012128:	f812 e016 	ldrb.w	lr, [r2, r6, lsl #1]
 801212c:	eb02 0c46 	add.w	ip, r2, r6, lsl #1
 8012130:	08db      	lsrs	r3, r3, #3
 8012132:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8012136:	f89d 1002 	ldrb.w	r1, [sp, #2]
 801213a:	f363 0e04 	bfi	lr, r3, #0, #5
 801213e:	0880      	lsrs	r0, r0, #2
 8012140:	08c9      	lsrs	r1, r1, #3
 8012142:	f802 e016 	strb.w	lr, [r2, r6, lsl #1]
 8012146:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
 801214a:	f360 134a 	bfi	r3, r0, #5, #6
 801214e:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
 8012152:	f3c3 2307 	ubfx	r3, r3, #8, #8
                user_data->opa[i]     = cur_color.ch.alpha;
 8012156:	f89d 2003 	ldrb.w	r2, [sp, #3]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 801215a:	f361 03c7 	bfi	r3, r1, #3, #5
 801215e:	f88c 3001 	strb.w	r3, [ip, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 8012162:	68ab      	ldr	r3, [r5, #8]
 8012164:	559a      	strb	r2, [r3, r6]
            for(i = 0; i < palette_size; i++) {
 8012166:	3601      	adds	r6, #1
 8012168:	e7d1      	b.n	801210e <lv_img_decoder_built_in_open+0x14a>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 801216a:	6863      	ldr	r3, [r4, #4]
 801216c:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 801216e:	2300      	movs	r3, #0
 8012170:	42bb      	cmp	r3, r7
 8012172:	f102 0204 	add.w	r2, r2, #4
 8012176:	d0cc      	beq.n	8012112 <lv_img_decoder_built_in_open+0x14e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8012178:	6868      	ldr	r0, [r5, #4]
 801217a:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 801217e:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
 8012182:	eb00 0e43 	add.w	lr, r0, r3, lsl #1
 8012186:	08c9      	lsrs	r1, r1, #3
 8012188:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801218c:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 8012190:	f361 0804 	bfi	r8, r1, #0, #5
 8012194:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8012198:	08f6      	lsrs	r6, r6, #3
 801219a:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
 801219e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80121a2:	f36c 114a 	bfi	r1, ip, #5, #6
 80121a6:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 80121aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80121ae:	f812 0c01 	ldrb.w	r0, [r2, #-1]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80121b2:	f366 01c7 	bfi	r1, r6, #3, #5
 80121b6:	f88e 1001 	strb.w	r1, [lr, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80121ba:	68a9      	ldr	r1, [r5, #8]
 80121bc:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
 80121be:	3301      	adds	r3, #1
 80121c0:	e7d6      	b.n	8012170 <lv_img_decoder_built_in_open+0x1ac>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 80121c2:	380b      	subs	r0, #11
 80121c4:	2803      	cmp	r0, #3
 80121c6:	d9a4      	bls.n	8012112 <lv_img_decoder_built_in_open+0x14e>
 80121c8:	e733      	b.n	8012032 <lv_img_decoder_built_in_open+0x6e>
 80121ca:	bf00      	nop
 80121cc:	0802c370 	.word	0x0802c370
 80121d0:	0802c346 	.word	0x0802c346

080121d4 <lv_img_decoder_get_info>:
    header->h = 0;
 80121d4:	884b      	ldrh	r3, [r1, #2]
 80121d6:	f36f 134f 	bfc	r3, #5, #11
{
 80121da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    header->h = 0;
 80121de:	804b      	strh	r3, [r1, #2]
    header->cf = LV_IMG_CF_UNKNOWN;
 80121e0:	2400      	movs	r4, #0
    header->w = 0;
 80121e2:	680b      	ldr	r3, [r1, #0]
{
 80121e4:	4607      	mov	r7, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80121e6:	480f      	ldr	r0, [pc, #60]	; (8012224 <lv_img_decoder_get_info+0x50>)
{
 80121e8:	460d      	mov	r5, r1
    header->w = 0;
 80121ea:	f36f 2394 	bfc	r3, #10, #11
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80121ee:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8012224 <lv_img_decoder_get_info+0x50>
    header->w = 0;
 80121f2:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
 80121f4:	700c      	strb	r4, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80121f6:	f001 fb2d 	bl	8013854 <_lv_ll_get_head>
 80121fa:	4606      	mov	r6, r0
 80121fc:	b916      	cbnz	r6, 8012204 <lv_img_decoder_get_info+0x30>
}
 80121fe:	4620      	mov	r0, r4
 8012200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 8012204:	6834      	ldr	r4, [r6, #0]
 8012206:	b134      	cbz	r4, 8012216 <lv_img_decoder_get_info+0x42>
            res = d->info_cb(d, src, header);
 8012208:	462a      	mov	r2, r5
 801220a:	4639      	mov	r1, r7
 801220c:	4630      	mov	r0, r6
 801220e:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 8012210:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8012212:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 8012214:	d0f3      	beq.n	80121fe <lv_img_decoder_get_info+0x2a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012216:	4631      	mov	r1, r6
 8012218:	4640      	mov	r0, r8
 801221a:	f001 fb21 	bl	8013860 <_lv_ll_get_next>
 801221e:	4606      	mov	r6, r0
 8012220:	e7ec      	b.n	80121fc <lv_img_decoder_get_info+0x28>
 8012222:	bf00      	nop
 8012224:	20028c08 	.word	0x20028c08

08012228 <lv_img_decoder_open>:
{
 8012228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801222c:	4604      	mov	r4, r0
    dsc->color     = color;
 801222e:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 8012230:	4608      	mov	r0, r1
{
 8012232:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 8012234:	f7fb f80c 	bl	800d250 <lv_img_src_get_type>
    dsc->user_data = NULL;
 8012238:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801223a:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
 801223c:	72a0      	strb	r0, [r4, #10]
    dsc->user_data = NULL;
 801223e:	61e3      	str	r3, [r4, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012240:	d117      	bne.n	8012272 <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
 8012242:	4638      	mov	r0, r7
 8012244:	f7ed ffee 	bl	8000224 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 8012248:	3001      	adds	r0, #1
 801224a:	f001 fc7d 	bl	8013b48 <lv_mem_alloc>
        strcpy((char *)dsc->src, src);
 801224e:	4639      	mov	r1, r7
        dsc->src = lv_mem_alloc(fnlen + 1);
 8012250:	6060      	str	r0, [r4, #4]
        strcpy((char *)dsc->src, src);
 8012252:	f00c fc69 	bl	801eb28 <strcpy>
    lv_res_t res = LV_RES_INV;
 8012256:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012258:	4815      	ldr	r0, [pc, #84]	; (80122b0 <lv_img_decoder_open+0x88>)
 801225a:	f001 fafb 	bl	8013854 <_lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 801225e:	f104 090c 	add.w	r9, r4, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012262:	4605      	mov	r5, r0
        dsc->error_msg = NULL;
 8012264:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012266:	f8df a048 	ldr.w	sl, [pc, #72]	; 80122b0 <lv_img_decoder_open+0x88>
 801226a:	b925      	cbnz	r5, 8012276 <lv_img_decoder_open+0x4e>
}
 801226c:	4630      	mov	r0, r6
 801226e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
 8012272:	6067      	str	r7, [r4, #4]
 8012274:	e7ef      	b.n	8012256 <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 8012276:	682b      	ldr	r3, [r5, #0]
 8012278:	b1a3      	cbz	r3, 80122a4 <lv_img_decoder_open+0x7c>
 801227a:	686a      	ldr	r2, [r5, #4]
 801227c:	b192      	cbz	r2, 80122a4 <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
 801227e:	464a      	mov	r2, r9
 8012280:	4639      	mov	r1, r7
 8012282:	4628      	mov	r0, r5
 8012284:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 8012286:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 8012288:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 801228a:	d10b      	bne.n	80122a4 <lv_img_decoder_open+0x7c>
        dsc->error_msg = NULL;
 801228c:	f8c4 8018 	str.w	r8, [r4, #24]
        res = d->open_cb(d, dsc);
 8012290:	4621      	mov	r1, r4
        dsc->img_data  = NULL;
 8012292:	f8c4 8010 	str.w	r8, [r4, #16]
        res = d->open_cb(d, dsc);
 8012296:	4628      	mov	r0, r5
        dsc->decoder   = d;
 8012298:	6025      	str	r5, [r4, #0]
        res = d->open_cb(d, dsc);
 801229a:	686b      	ldr	r3, [r5, #4]
 801229c:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 801229e:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 80122a0:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
 80122a2:	d0e3      	beq.n	801226c <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80122a4:	4629      	mov	r1, r5
 80122a6:	4650      	mov	r0, sl
 80122a8:	f001 fada 	bl	8013860 <_lv_ll_get_next>
 80122ac:	4605      	mov	r5, r0
 80122ae:	e7dc      	b.n	801226a <lv_img_decoder_open+0x42>
 80122b0:	20028c08 	.word	0x20028c08

080122b4 <lv_img_decoder_read_line>:
{
 80122b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122b6:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 80122b8:	6800      	ldr	r0, [r0, #0]
 80122ba:	6884      	ldr	r4, [r0, #8]
 80122bc:	b144      	cbz	r4, 80122d0 <lv_img_decoder_read_line+0x1c>
 80122be:	9e06      	ldr	r6, [sp, #24]
 80122c0:	e9cd 3600 	strd	r3, r6, [sp]
 80122c4:	4613      	mov	r3, r2
 80122c6:	460a      	mov	r2, r1
 80122c8:	4629      	mov	r1, r5
 80122ca:	47a0      	blx	r4
}
 80122cc:	b002      	add	sp, #8
 80122ce:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 80122d0:	4620      	mov	r0, r4
 80122d2:	e7fb      	b.n	80122cc <lv_img_decoder_read_line+0x18>

080122d4 <lv_img_decoder_close>:
{
 80122d4:	b510      	push	{r4, lr}
 80122d6:	4604      	mov	r4, r0
    if(dsc->decoder) {
 80122d8:	6800      	ldr	r0, [r0, #0]
 80122da:	b158      	cbz	r0, 80122f4 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80122dc:	68c3      	ldr	r3, [r0, #12]
 80122de:	b10b      	cbz	r3, 80122e4 <lv_img_decoder_close+0x10>
 80122e0:	4621      	mov	r1, r4
 80122e2:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80122e4:	7aa3      	ldrb	r3, [r4, #10]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d104      	bne.n	80122f4 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
 80122ea:	6860      	ldr	r0, [r4, #4]
 80122ec:	f001 fc7a 	bl	8013be4 <lv_mem_free>
            dsc->src = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	6063      	str	r3, [r4, #4]
}
 80122f4:	bd10      	pop	{r4, pc}
	...

080122f8 <lv_img_decoder_create>:
{
 80122f8:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80122fa:	480a      	ldr	r0, [pc, #40]	; (8012324 <lv_img_decoder_create+0x2c>)
 80122fc:	f001 fa73 	bl	80137e6 <_lv_ll_ins_head>
 8012300:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
 8012302:	f001 f979 	bl	80135f8 <lv_debug_check_null>
 8012306:	4603      	mov	r3, r0
 8012308:	b920      	cbnz	r0, 8012314 <lv_img_decoder_create+0x1c>
 801230a:	4622      	mov	r2, r4
 801230c:	4806      	ldr	r0, [pc, #24]	; (8012328 <lv_img_decoder_create+0x30>)
 801230e:	f001 f977 	bl	8013600 <lv_debug_log_error>
 8012312:	e7fe      	b.n	8012312 <lv_img_decoder_create+0x1a>
    if(decoder == NULL) return NULL;
 8012314:	b11c      	cbz	r4, 801231e <lv_img_decoder_create+0x26>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 8012316:	2110      	movs	r1, #16
 8012318:	4620      	mov	r0, r4
 801231a:	f001 fea9 	bl	8014070 <_lv_memset_00>
}
 801231e:	4620      	mov	r0, r4
 8012320:	bd10      	pop	{r4, pc}
 8012322:	bf00      	nop
 8012324:	20028c08 	.word	0x20028c08
 8012328:	0802c346 	.word	0x0802c346

0801232c <_lv_img_decoder_init>:
{
 801232c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 801232e:	2110      	movs	r1, #16
 8012330:	480b      	ldr	r0, [pc, #44]	; (8012360 <_lv_img_decoder_init+0x34>)
 8012332:	f001 fa50 	bl	80137d6 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 8012336:	f7ff ffdf 	bl	80122f8 <lv_img_decoder_create>
    if(decoder == NULL) {
 801233a:	b940      	cbnz	r0, 801234e <_lv_img_decoder_init+0x22>
        LV_ASSERT_MEM(decoder);
 801233c:	f001 f95c 	bl	80135f8 <lv_debug_check_null>
 8012340:	b968      	cbnz	r0, 801235e <_lv_img_decoder_init+0x32>
 8012342:	2200      	movs	r2, #0
 8012344:	2300      	movs	r3, #0
 8012346:	4807      	ldr	r0, [pc, #28]	; (8012364 <_lv_img_decoder_init+0x38>)
 8012348:	f001 f95a 	bl	8013600 <lv_debug_log_error>
 801234c:	e7fe      	b.n	801234c <_lv_img_decoder_init+0x20>
    decoder->info_cb = info_cb;
 801234e:	4a06      	ldr	r2, [pc, #24]	; (8012368 <_lv_img_decoder_init+0x3c>)
 8012350:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
 8012352:	4a06      	ldr	r2, [pc, #24]	; (801236c <_lv_img_decoder_init+0x40>)
 8012354:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 8012356:	4a06      	ldr	r2, [pc, #24]	; (8012370 <_lv_img_decoder_init+0x44>)
 8012358:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
 801235a:	4a06      	ldr	r2, [pc, #24]	; (8012374 <_lv_img_decoder_init+0x48>)
 801235c:	60c2      	str	r2, [r0, #12]
}
 801235e:	bd08      	pop	{r3, pc}
 8012360:	20028c08 	.word	0x20028c08
 8012364:	0802c346 	.word	0x0802c346
 8012368:	08011bbb 	.word	0x08011bbb
 801236c:	08011fc5 	.word	0x08011fc5
 8012370:	08011c61 	.word	0x08011c61
 8012374:	08011b89 	.word	0x08011b89

08012378 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8012378:	6843      	ldr	r3, [r0, #4]
 801237a:	4718      	bx	r3

0801237c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801237c:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 801237e:	6804      	ldr	r4, [r0, #0]
 8012380:	46a4      	mov	ip, r4
}
 8012382:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8012386:	4760      	bx	ip

08012388 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8012388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801238a:	4613      	mov	r3, r2
 801238c:	460a      	mov	r2, r1
 801238e:	a901      	add	r1, sp, #4
 8012390:	f7ff fff4 	bl	801237c <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 8012394:	b108      	cbz	r0, 801239a <lv_font_get_glyph_width+0x12>
 8012396:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 801239a:	b005      	add	sp, #20
 801239c:	f85d fb04 	ldr.w	pc, [sp], #4

080123a0 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80123a0:	7803      	ldrb	r3, [r0, #0]
 80123a2:	780a      	ldrb	r2, [r1, #0]
 80123a4:	4293      	cmp	r3, r2
 80123a6:	bf11      	iteee	ne
 80123a8:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 80123aa:	784b      	ldrbeq	r3, [r1, #1]
 80123ac:	7840      	ldrbeq	r0, [r0, #1]
 80123ae:	1ac0      	subeq	r0, r0, r3

}
 80123b0:	4770      	bx	lr

080123b2 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80123b2:	8803      	ldrh	r3, [r0, #0]
 80123b4:	880a      	ldrh	r2, [r1, #0]
 80123b6:	4293      	cmp	r3, r2
 80123b8:	bf11      	iteee	ne
 80123ba:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 80123bc:	884b      	ldrheq	r3, [r1, #2]
 80123be:	8840      	ldrheq	r0, [r0, #2]
 80123c0:	1ac0      	subeq	r0, r0, r3
}
 80123c2:	4770      	bx	lr

080123c4 <get_bits>:
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
    uint8_t bit_mask;
    switch(len) {
 80123c4:	1e53      	subs	r3, r2, #1
{
 80123c6:	b570      	push	{r4, r5, r6, lr}
    switch(len) {
 80123c8:	2b07      	cmp	r3, #7
 80123ca:	d822      	bhi.n	8012412 <get_bits+0x4e>
 80123cc:	e8df f003 	tbb	[pc, r3]
 80123d0:	1d1b2604 	.word	0x1d1b2604
 80123d4:	1f212121 	.word	0x1f212121
        case 1:
            bit_mask = 0x1;
 80123d8:	4613      	mov	r3, r2
            break;
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    }

    uint32_t byte_pos = bit_pos >> 3;
 80123da:	08cd      	lsrs	r5, r1, #3
    bit_pos = bit_pos & 0x7;
 80123dc:	f001 0107 	and.w	r1, r1, #7
 80123e0:	b25b      	sxtb	r3, r3

    if(bit_pos + len >= 8) {
 80123e2:	1856      	adds	r6, r2, r1
 80123e4:	5d44      	ldrb	r4, [r0, r5]
 80123e6:	2e07      	cmp	r6, #7
 80123e8:	d91a      	bls.n	8012420 <get_bits+0x5c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80123ea:	4428      	add	r0, r5
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80123ec:	f1c1 0110 	rsb	r1, r1, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80123f0:	7840      	ldrb	r0, [r0, #1]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80123f2:	1a89      	subs	r1, r1, r2
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80123f4:	eb00 2004 	add.w	r0, r0, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80123f8:	b280      	uxth	r0, r0
 80123fa:	fa40 f101 	asr.w	r1, r0, r1
 80123fe:	ea03 0001 	and.w	r0, r3, r1
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012402:	b2c0      	uxtb	r0, r0
    }
}
 8012404:	bd70      	pop	{r4, r5, r6, pc}
            bit_mask = 0x7;
 8012406:	2307      	movs	r3, #7
            break;
 8012408:	e7e7      	b.n	80123da <get_bits+0x16>
            bit_mask = 0xF;
 801240a:	230f      	movs	r3, #15
            break;
 801240c:	e7e5      	b.n	80123da <get_bits+0x16>
            bit_mask = 0xFF;
 801240e:	23ff      	movs	r3, #255	; 0xff
            break;
 8012410:	e7e3      	b.n	80123da <get_bits+0x16>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012412:	2301      	movs	r3, #1
 8012414:	4093      	lsls	r3, r2
 8012416:	3b01      	subs	r3, #1
 8012418:	b2db      	uxtb	r3, r3
 801241a:	e7de      	b.n	80123da <get_bits+0x16>
            bit_mask = 0x3;
 801241c:	2303      	movs	r3, #3
 801241e:	e7dc      	b.n	80123da <get_bits+0x16>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012420:	f1c1 0108 	rsb	r1, r1, #8
 8012424:	1a89      	subs	r1, r1, r2
 8012426:	fa44 f001 	asr.w	r0, r4, r1
 801242a:	4018      	ands	r0, r3
 801242c:	e7e9      	b.n	8012402 <get_bits+0x3e>

0801242e <bits_write>:
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
    if(len == 3) {
 801242e:	2b03      	cmp	r3, #3
{
 8012430:	b530      	push	{r4, r5, lr}
    if(len == 3) {
 8012432:	d10a      	bne.n	801244a <bits_write+0x1c>
        len = 4;
        switch(val) {
 8012434:	1e53      	subs	r3, r2, #1
 8012436:	2b06      	cmp	r3, #6
 8012438:	d82d      	bhi.n	8012496 <bits_write+0x68>
 801243a:	e8df f003 	tbb	[pc, r3]
 801243e:	1a04      	.short	0x1a04
 8012440:	2623201d 	.word	0x2623201d
 8012444:	29          	.byte	0x29
 8012445:	00          	.byte	0x00
        len = 4;
 8012446:	2304      	movs	r3, #4
            case 0:
                val = 0;
                break;
            case 1:
                val = 2;
 8012448:	2202      	movs	r2, #2
                break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
 801244a:	f001 0507 	and.w	r5, r1, #7
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801244e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012452:	f3c1 01cf 	ubfx	r1, r1, #3, #16
 8012456:	f1c5 0508 	rsb	r5, r5, #8
    bit_pos = 8 - bit_pos - len;
 801245a:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801245c:	fa04 f303 	lsl.w	r3, r4, r3
 8012460:	5c44      	ldrb	r4, [r0, r1]
 8012462:	f063 03ff 	orn	r3, r3, #255	; 0xff
    out[byte_pos] |= (val << bit_pos);
 8012466:	40aa      	lsls	r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012468:	40ab      	lsls	r3, r5
 801246a:	4023      	ands	r3, r4
    out[byte_pos] |= (val << bit_pos);
 801246c:	431a      	orrs	r2, r3
 801246e:	5442      	strb	r2, [r0, r1]
}
 8012470:	bd30      	pop	{r4, r5, pc}
        len = 4;
 8012472:	2304      	movs	r3, #4
                val = 4;
 8012474:	461a      	mov	r2, r3
                break;
 8012476:	e7e8      	b.n	801244a <bits_write+0x1c>
        len = 4;
 8012478:	2304      	movs	r3, #4
                val = 6;
 801247a:	2206      	movs	r2, #6
                break;
 801247c:	e7e5      	b.n	801244a <bits_write+0x1c>
        len = 4;
 801247e:	4613      	mov	r3, r2
                val = 9;
 8012480:	2209      	movs	r2, #9
                break;
 8012482:	e7e2      	b.n	801244a <bits_write+0x1c>
        len = 4;
 8012484:	2304      	movs	r3, #4
                val = 11;
 8012486:	220b      	movs	r2, #11
                break;
 8012488:	e7df      	b.n	801244a <bits_write+0x1c>
        len = 4;
 801248a:	2304      	movs	r3, #4
                val = 13;
 801248c:	220d      	movs	r2, #13
                break;
 801248e:	e7dc      	b.n	801244a <bits_write+0x1c>
        len = 4;
 8012490:	2304      	movs	r3, #4
                val = 15;
 8012492:	220f      	movs	r2, #15
                break;
 8012494:	e7d9      	b.n	801244a <bits_write+0x1c>
        len = 4;
 8012496:	2304      	movs	r3, #4
 8012498:	e7d7      	b.n	801244a <bits_write+0x1c>
	...

0801249c <decompress_line>:
{
 801249c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
    else if(rle_state == RLE_STATE_COUNTER) {
        ret = rle_prev_v;
        rle_cnt--;
        if(rle_cnt == 0) {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80124a0:	4c3d      	ldr	r4, [pc, #244]	; (8012598 <decompress_line+0xfc>)
 80124a2:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
                    rle_state = RLE_STATE_COUNTER;
 80124a6:	f04f 0b02 	mov.w	fp, #2
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80124aa:	f8d4 8000 	ldr.w	r8, [r4]
 80124ae:	eb09 0a01 	add.w	sl, r9, r1
 80124b2:	7927      	ldrb	r7, [r4, #4]
    for(i = 0; i < w; i++) {
 80124b4:	45ca      	cmp	sl, r9
 80124b6:	d102      	bne.n	80124be <decompress_line+0x22>
}
 80124b8:	b003      	add	sp, #12
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(rle_state == RLE_STATE_SINGLE) {
 80124be:	7963      	ldrb	r3, [r4, #5]
 80124c0:	b9ab      	cbnz	r3, 80124ee <decompress_line+0x52>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80124c2:	68a6      	ldr	r6, [r4, #8]
 80124c4:	463a      	mov	r2, r7
 80124c6:	4640      	mov	r0, r8
 80124c8:	9301      	str	r3, [sp, #4]
 80124ca:	4631      	mov	r1, r6
 80124cc:	f7ff ff7a 	bl	80123c4 <get_bits>
 80124d0:	4605      	mov	r5, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
 80124d2:	b136      	cbz	r6, 80124e2 <decompress_line+0x46>
 80124d4:	7b22      	ldrb	r2, [r4, #12]
 80124d6:	9b01      	ldr	r3, [sp, #4]
 80124d8:	4282      	cmp	r2, r0
            rle_cnt = 0;
 80124da:	bf02      	ittt	eq
 80124dc:	7363      	strbeq	r3, [r4, #13]
            rle_state = RLE_STATE_REPEATE;
 80124de:	2301      	moveq	r3, #1
 80124e0:	7163      	strbeq	r3, [r4, #5]
        rle_rdp += rle_bpp;
 80124e2:	443e      	add	r6, r7
        rle_prev_v = ret;
 80124e4:	7325      	strb	r5, [r4, #12]
        rle_rdp += rle_bpp;
 80124e6:	60a6      	str	r6, [r4, #8]
        out[i] = rle_next();
 80124e8:	f809 5f01 	strb.w	r5, [r9, #1]!
 80124ec:	e7e2      	b.n	80124b4 <decompress_line+0x18>
    else if(rle_state == RLE_STATE_REPEATE) {
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d138      	bne.n	8012564 <decompress_line+0xc8>
        v = get_bits(rle_in, rle_rdp, 1);
 80124f2:	68a6      	ldr	r6, [r4, #8]
 80124f4:	461a      	mov	r2, r3
 80124f6:	4640      	mov	r0, r8
 80124f8:	4631      	mov	r1, r6
 80124fa:	f7ff ff63 	bl	80123c4 <get_bits>
        rle_cnt++;
 80124fe:	7b62      	ldrb	r2, [r4, #13]
        rle_rdp += 1;
 8012500:	1c73      	adds	r3, r6, #1
        if(v == 1) {
 8012502:	2801      	cmp	r0, #1
        rle_cnt++;
 8012504:	f102 0201 	add.w	r2, r2, #1
        rle_rdp += 1;
 8012508:	60a3      	str	r3, [r4, #8]
        rle_cnt++;
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	7362      	strb	r2, [r4, #13]
        if(v == 1) {
 801250e:	d11b      	bne.n	8012548 <decompress_line+0xac>
            if(rle_cnt == 11) {
 8012510:	2a0b      	cmp	r2, #11
            ret = rle_prev_v;
 8012512:	7b25      	ldrb	r5, [r4, #12]
            if(rle_cnt == 11) {
 8012514:	d1e8      	bne.n	80124e8 <decompress_line+0x4c>
                rle_rdp += 6;
 8012516:	3607      	adds	r6, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 8012518:	2206      	movs	r2, #6
 801251a:	4619      	mov	r1, r3
 801251c:	4640      	mov	r0, r8
 801251e:	f7ff ff51 	bl	80123c4 <get_bits>
                rle_rdp += 6;
 8012522:	60a6      	str	r6, [r4, #8]
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 8012524:	7360      	strb	r0, [r4, #13]
                if(rle_cnt != 0) {
 8012526:	b110      	cbz	r0, 801252e <decompress_line+0x92>
                    rle_state = RLE_STATE_COUNTER;
 8012528:	f884 b005 	strb.w	fp, [r4, #5]
 801252c:	e7dc      	b.n	80124e8 <decompress_line+0x4c>
 801252e:	9001      	str	r0, [sp, #4]
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012530:	4631      	mov	r1, r6
 8012532:	463a      	mov	r2, r7
 8012534:	4640      	mov	r0, r8
 8012536:	f7ff ff45 	bl	80123c4 <get_bits>
                    rle_rdp += rle_bpp;
 801253a:	443e      	add	r6, r7
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801253c:	4605      	mov	r5, r0
                    rle_state = RLE_STATE_SINGLE;
 801253e:	9b01      	ldr	r3, [sp, #4]
                    rle_prev_v = ret;
 8012540:	7320      	strb	r0, [r4, #12]
                    rle_rdp += rle_bpp;
 8012542:	60a6      	str	r6, [r4, #8]
            rle_state = RLE_STATE_SINGLE;
 8012544:	7163      	strb	r3, [r4, #5]
 8012546:	e7cf      	b.n	80124e8 <decompress_line+0x4c>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012548:	4619      	mov	r1, r3
 801254a:	463a      	mov	r2, r7
 801254c:	4640      	mov	r0, r8
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	f7ff ff38 	bl	80123c4 <get_bits>
            rle_rdp += rle_bpp;
 8012554:	9b01      	ldr	r3, [sp, #4]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012556:	4605      	mov	r5, r0
            rle_prev_v = ret;
 8012558:	7320      	strb	r0, [r4, #12]
            rle_rdp += rle_bpp;
 801255a:	443b      	add	r3, r7
 801255c:	60a3      	str	r3, [r4, #8]
            rle_state = RLE_STATE_SINGLE;
 801255e:	f04f 0300 	mov.w	r3, #0
 8012562:	e7ef      	b.n	8012544 <decompress_line+0xa8>
    else if(rle_state == RLE_STATE_COUNTER) {
 8012564:	2b02      	cmp	r3, #2
 8012566:	d114      	bne.n	8012592 <decompress_line+0xf6>
        rle_cnt--;
 8012568:	7b66      	ldrb	r6, [r4, #13]
        ret = rle_prev_v;
 801256a:	7b25      	ldrb	r5, [r4, #12]
        rle_cnt--;
 801256c:	3e01      	subs	r6, #1
 801256e:	b2f6      	uxtb	r6, r6
 8012570:	7366      	strb	r6, [r4, #13]
        if(rle_cnt == 0) {
 8012572:	2e00      	cmp	r6, #0
 8012574:	d1b8      	bne.n	80124e8 <decompress_line+0x4c>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012576:	68a3      	ldr	r3, [r4, #8]
 8012578:	463a      	mov	r2, r7
 801257a:	4640      	mov	r0, r8
 801257c:	4619      	mov	r1, r3
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	f7ff ff20 	bl	80123c4 <get_bits>
            rle_prev_v = ret;
            rle_rdp += rle_bpp;
 8012584:	9b01      	ldr	r3, [sp, #4]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012586:	4605      	mov	r5, r0
            rle_prev_v = ret;
 8012588:	7320      	strb	r0, [r4, #12]
            rle_rdp += rle_bpp;
 801258a:	443b      	add	r3, r7
            rle_state = RLE_STATE_SINGLE;
 801258c:	7166      	strb	r6, [r4, #5]
            rle_rdp += rle_bpp;
 801258e:	60a3      	str	r3, [r4, #8]
 8012590:	e7aa      	b.n	80124e8 <decompress_line+0x4c>
    uint8_t ret = 0;
 8012592:	2500      	movs	r5, #0
 8012594:	e7a8      	b.n	80124e8 <decompress_line+0x4c>
 8012596:	bf00      	nop
 8012598:	20020868 	.word	0x20020868

0801259c <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801259c:	8800      	ldrh	r0, [r0, #0]
 801259e:	880b      	ldrh	r3, [r1, #0]
}
 80125a0:	1ac0      	subs	r0, r0, r3
 80125a2:	4770      	bx	lr

080125a4 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80125a6:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80125a8:	b085      	sub	sp, #20
 80125aa:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80125ac:	6963      	ldr	r3, [r4, #20]
 80125ae:	428b      	cmp	r3, r1
 80125b0:	d00b      	beq.n	80125ca <get_glyph_dsc_id.isra.0.part.1+0x26>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80125b2:	8a67      	ldrh	r7, [r4, #18]
 80125b4:	2200      	movs	r2, #0
 80125b6:	f04f 0c14 	mov.w	ip, #20
 80125ba:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80125be:	b293      	uxth	r3, r2
 80125c0:	429f      	cmp	r7, r3
 80125c2:	d805      	bhi.n	80125d0 <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 80125c4:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 80125c6:	2000      	movs	r0, #0
 80125c8:	e02c      	b.n	8012624 <get_glyph_dsc_id.isra.0.part.1+0x80>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80125ca:	69a0      	ldr	r0, [r4, #24]
}
 80125cc:	b005      	add	sp, #20
 80125ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125d0:	fb0c f602 	mul.w	r6, ip, r2
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80125d4:	68a3      	ldr	r3, [r4, #8]
 80125d6:	3201      	adds	r2, #1
 80125d8:	1999      	adds	r1, r3, r6
 80125da:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80125dc:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80125de:	1aeb      	subs	r3, r5, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80125e0:	4283      	cmp	r3, r0
 80125e2:	d8ec      	bhi.n	80125be <get_glyph_dsc_id.isra.0.part.1+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80125e4:	7c8a      	ldrb	r2, [r1, #18]
 80125e6:	2a02      	cmp	r2, #2
 80125e8:	d102      	bne.n	80125f0 <get_glyph_dsc_id.isra.0.part.1+0x4c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80125ea:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80125ec:	4418      	add	r0, r3
 80125ee:	e018      	b.n	8012622 <get_glyph_dsc_id.isra.0.part.1+0x7e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80125f0:	b91a      	cbnz	r2, 80125fa <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80125f2:	68ca      	ldr	r2, [r1, #12]
 80125f4:	5cd0      	ldrb	r0, [r2, r3]
 80125f6:	88cb      	ldrh	r3, [r1, #6]
 80125f8:	e7f8      	b.n	80125ec <get_glyph_dsc_id.isra.0.part.1+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80125fa:	2a03      	cmp	r2, #3
 80125fc:	d114      	bne.n	8012628 <get_glyph_dsc_id.isra.0.part.1+0x84>
            uint16_t key = rcp;
 80125fe:	a804      	add	r0, sp, #16
 8012600:	f820 3d02 	strh.w	r3, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012604:	4b14      	ldr	r3, [pc, #80]	; (8012658 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 8012606:	8a0a      	ldrh	r2, [r1, #16]
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	2302      	movs	r3, #2
 801260c:	6889      	ldr	r1, [r1, #8]
 801260e:	f002 fd91 	bl	8015134 <_lv_utils_bsearch>
            if(p) {
 8012612:	b130      	cbz	r0, 8012622 <get_glyph_dsc_id.isra.0.part.1+0x7e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8012614:	68a3      	ldr	r3, [r4, #8]
 8012616:	4433      	add	r3, r6
 8012618:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801261a:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801261c:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801261e:	eb03 0060 	add.w	r0, r3, r0, asr #1
        fdsc->last_letter = letter;
 8012622:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 8012624:	61a0      	str	r0, [r4, #24]
 8012626:	e7d1      	b.n	80125cc <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8012628:	2a01      	cmp	r2, #1
 801262a:	d113      	bne.n	8012654 <get_glyph_dsc_id.isra.0.part.1+0xb0>
            uint16_t key = rcp;
 801262c:	a804      	add	r0, sp, #16
 801262e:	f820 3d02 	strh.w	r3, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012632:	4b09      	ldr	r3, [pc, #36]	; (8012658 <get_glyph_dsc_id.isra.0.part.1+0xb4>)
 8012634:	8a0a      	ldrh	r2, [r1, #16]
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	2302      	movs	r3, #2
 801263a:	6889      	ldr	r1, [r1, #8]
 801263c:	f002 fd7a 	bl	8015134 <_lv_utils_bsearch>
            if(p) {
 8012640:	2800      	cmp	r0, #0
 8012642:	d0ee      	beq.n	8012622 <get_glyph_dsc_id.isra.0.part.1+0x7e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8012644:	68a3      	ldr	r3, [r4, #8]
 8012646:	4433      	add	r3, r6
 8012648:	689a      	ldr	r2, [r3, #8]
 801264a:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801264c:	68da      	ldr	r2, [r3, #12]
 801264e:	88db      	ldrh	r3, [r3, #6]
 8012650:	5a10      	ldrh	r0, [r2, r0]
 8012652:	e7cb      	b.n	80125ec <get_glyph_dsc_id.isra.0.part.1+0x48>
        uint32_t glyph_id = 0;
 8012654:	2000      	movs	r0, #0
 8012656:	e7e4      	b.n	8012622 <get_glyph_dsc_id.isra.0.part.1+0x7e>
 8012658:	0801259d 	.word	0x0801259d

0801265c <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 801265c:	2909      	cmp	r1, #9
{
 801265e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012662:	b089      	sub	sp, #36	; 0x24
    if(unicode_letter == '\t') unicode_letter = ' ';
 8012664:	d004      	beq.n	8012670 <lv_font_get_bitmap_fmt_txt+0x14>
    if(letter == '\0') return 0;
 8012666:	b921      	cbnz	r1, 8012672 <lv_font_get_bitmap_fmt_txt+0x16>
    if(!gid) return NULL;
 8012668:	2000      	movs	r0, #0
}
 801266a:	b009      	add	sp, #36	; 0x24
 801266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8012670:	2120      	movs	r1, #32
 8012672:	f850 6f10 	ldr.w	r6, [r0, #16]!
 8012676:	f7ff ff95 	bl	80125a4 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
 801267a:	4607      	mov	r7, r0
 801267c:	2800      	cmp	r0, #0
 801267e:	d0f3      	beq.n	8012668 <lv_font_get_bitmap_fmt_txt+0xc>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8012680:	7cf3      	ldrb	r3, [r6, #19]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8012682:	f8d6 8004 	ldr.w	r8, [r6, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8012686:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801268a:	eb08 05c0 	add.w	r5, r8, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801268e:	d106      	bne.n	801269e <lv_font_get_bitmap_fmt_txt+0x42>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8012690:	f858 3030 	ldr.w	r3, [r8, r0, lsl #3]
 8012694:	6830      	ldr	r0, [r6, #0]
 8012696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801269a:	4418      	add	r0, r3
 801269c:	e7e5      	b.n	801266a <lv_font_get_bitmap_fmt_txt+0xe>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 801269e:	792c      	ldrb	r4, [r5, #4]
 80126a0:	7969      	ldrb	r1, [r5, #5]
 80126a2:	fb14 f401 	smulbb	r4, r4, r1
        if(gsize == 0) return NULL;
 80126a6:	2c00      	cmp	r4, #0
 80126a8:	d0de      	beq.n	8012668 <lv_font_get_bitmap_fmt_txt+0xc>
        switch(fdsc->bpp) {
 80126aa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80126ae:	3b01      	subs	r3, #1
 80126b0:	2b03      	cmp	r3, #3
 80126b2:	d805      	bhi.n	80126c0 <lv_font_get_bitmap_fmt_txt+0x64>
 80126b4:	e8df f003 	tbb	[pc, r3]
 80126b8:	1f1f1c02 	.word	0x1f1f1c02
                buf_size = (gsize + 7) >> 3;
 80126bc:	3407      	adds	r4, #7
 80126be:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 80126c0:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8012840 <lv_font_get_bitmap_fmt_txt+0x1e4>
 80126c4:	f8da 0000 	ldr.w	r0, [sl]
 80126c8:	46d1      	mov	r9, sl
 80126ca:	f001 fabb 	bl	8013c44 <_lv_mem_get_size>
 80126ce:	42a0      	cmp	r0, r4
 80126d0:	d218      	bcs.n	8012704 <lv_font_get_bitmap_fmt_txt+0xa8>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 80126d2:	4621      	mov	r1, r4
 80126d4:	f8da 0000 	ldr.w	r0, [sl]
 80126d8:	f001 fbfe 	bl	8013ed8 <lv_mem_realloc>
 80126dc:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
 80126de:	f000 ff8b 	bl	80135f8 <lv_debug_check_null>
 80126e2:	4603      	mov	r3, r0
 80126e4:	b950      	cbnz	r0, 80126fc <lv_font_get_bitmap_fmt_txt+0xa0>
 80126e6:	4622      	mov	r2, r4
 80126e8:	4853      	ldr	r0, [pc, #332]	; (8012838 <lv_font_get_bitmap_fmt_txt+0x1dc>)
 80126ea:	f000 ff89 	bl	8013600 <lv_debug_log_error>
 80126ee:	e7fe      	b.n	80126ee <lv_font_get_bitmap_fmt_txt+0x92>
                buf_size = (gsize + 3) >> 2;
 80126f0:	3403      	adds	r4, #3
 80126f2:	08a4      	lsrs	r4, r4, #2
                break;
 80126f4:	e7e4      	b.n	80126c0 <lv_font_get_bitmap_fmt_txt+0x64>
                buf_size = (gsize + 1) >> 1;
 80126f6:	3401      	adds	r4, #1
 80126f8:	0864      	lsrs	r4, r4, #1
                break;
 80126fa:	e7e1      	b.n	80126c0 <lv_font_get_bitmap_fmt_txt+0x64>
            if(tmp == NULL) return NULL;
 80126fc:	2c00      	cmp	r4, #0
 80126fe:	d0b3      	beq.n	8012668 <lv_font_get_bitmap_fmt_txt+0xc>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 8012700:	f8ca 4000 	str.w	r4, [sl]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8012704:	7cf2      	ldrb	r2, [r6, #19]
    rle_state = RLE_STATE_SINGLE;
 8012706:	2400      	movs	r4, #0
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012708:	6831      	ldr	r1, [r6, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 801270a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
                   (uint8_t)fdsc->bpp, prefilter);
 801270e:	f3c2 0243 	ubfx	r2, r2, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012712:	f895 a004 	ldrb.w	sl, [r5, #4]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8012716:	9303      	str	r3, [sp, #12]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012718:	f858 3037 	ldr.w	r3, [r8, r7, lsl #3]
 801271c:	fa5f f882 	uxtb.w	r8, r2
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8012720:	4650      	mov	r0, sl
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012722:	fa0f f78a 	sxth.w	r7, sl
 8012726:	f3c3 0313 	ubfx	r3, r3, #0, #20
    if(bpp == 3) wr_size = 4;
 801272a:	f1b8 0f03 	cmp.w	r8, #3
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801272e:	4419      	add	r1, r3
 8012730:	f8d9 3000 	ldr.w	r3, [r9]
    if(bpp == 3) wr_size = 4;
 8012734:	bf14      	ite	ne
 8012736:	46c1      	movne	r9, r8
 8012738:	f04f 0904 	moveq.w	r9, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801273c:	9301      	str	r3, [sp, #4]
 801273e:	796b      	ldrb	r3, [r5, #5]
 8012740:	9306      	str	r3, [sp, #24]
    rle_in = in;
 8012742:	4b3e      	ldr	r3, [pc, #248]	; (801283c <lv_font_get_bitmap_fmt_txt+0x1e0>)
 8012744:	6019      	str	r1, [r3, #0]
    rle_bpp = bpp;
 8012746:	711a      	strb	r2, [r3, #4]
    rle_state = RLE_STATE_SINGLE;
 8012748:	715c      	strb	r4, [r3, #5]
    rle_rdp = 0;
 801274a:	609c      	str	r4, [r3, #8]
    rle_prev_v = 0;
 801274c:	731c      	strb	r4, [r3, #12]
    rle_cnt = 0;
 801274e:	735c      	strb	r4, [r3, #13]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8012750:	f001 fbf0 	bl	8013f34 <_lv_mem_buf_get>
    if(prefilter) {
 8012754:	9b03      	ldr	r3, [sp, #12]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8012756:	4605      	mov	r5, r0
    if(prefilter) {
 8012758:	2b40      	cmp	r3, #64	; 0x40
 801275a:	d103      	bne.n	8012764 <lv_font_get_bitmap_fmt_txt+0x108>
        line_buf2 = _lv_mem_buf_get(w);
 801275c:	4650      	mov	r0, sl
 801275e:	f001 fbe9 	bl	8013f34 <_lv_mem_buf_get>
 8012762:	4604      	mov	r4, r0
    decompress_line(line_buf1, w);
 8012764:	4639      	mov	r1, r7
 8012766:	4628      	mov	r0, r5
 8012768:	f7ff fe98 	bl	801249c <decompress_line>
 801276c:	462e      	mov	r6, r5
 801276e:	b2ab      	uxth	r3, r5
    uint32_t wrp = 0;
 8012770:	f04f 0b00 	mov.w	fp, #0
 8012774:	9305      	str	r3, [sp, #20]
    for(x = 0; x < w; x++) {
 8012776:	9b05      	ldr	r3, [sp, #20]
 8012778:	1af3      	subs	r3, r6, r3
 801277a:	b21b      	sxth	r3, r3
 801277c:	429f      	cmp	r7, r3
 801277e:	dc17      	bgt.n	80127b0 <lv_font_get_bitmap_fmt_txt+0x154>
 8012780:	fb1a f309 	smulbb	r3, sl, r9
 8012784:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012788:	9302      	str	r3, [sp, #8]
 801278a:	461e      	mov	r6, r3
    for(y = 1; y < h; y++) {
 801278c:	2301      	movs	r3, #1
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	eb05 030a 	add.w	r3, r5, sl
 8012794:	9307      	str	r3, [sp, #28]
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	9a00      	ldr	r2, [sp, #0]
 801279a:	4293      	cmp	r3, r2
 801279c:	dc11      	bgt.n	80127c2 <lv_font_get_bitmap_fmt_txt+0x166>
    _lv_mem_buf_release(line_buf1);
 801279e:	4628      	mov	r0, r5
 80127a0:	f001 fa5e 	bl	8013c60 <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 80127a4:	4620      	mov	r0, r4
 80127a6:	f001 fa5b 	bl	8013c60 <_lv_mem_buf_release>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 80127aa:	4b25      	ldr	r3, [pc, #148]	; (8012840 <lv_font_get_bitmap_fmt_txt+0x1e4>)
 80127ac:	6818      	ldr	r0, [r3, #0]
 80127ae:	e75c      	b.n	801266a <lv_font_get_bitmap_fmt_txt+0xe>
        bits_write(out, wrp, line_buf1[x], bpp);
 80127b0:	4659      	mov	r1, fp
 80127b2:	4643      	mov	r3, r8
 80127b4:	f816 2b01 	ldrb.w	r2, [r6], #1
        wrp += wr_size;
 80127b8:	44cb      	add	fp, r9
        bits_write(out, wrp, line_buf1[x], bpp);
 80127ba:	9801      	ldr	r0, [sp, #4]
 80127bc:	f7ff fe37 	bl	801242e <bits_write>
 80127c0:	e7d9      	b.n	8012776 <lv_font_get_bitmap_fmt_txt+0x11a>
        if(prefilter) {
 80127c2:	9b03      	ldr	r3, [sp, #12]
            decompress_line(line_buf2, w);
 80127c4:	4639      	mov	r1, r7
        if(prefilter) {
 80127c6:	2b40      	cmp	r3, #64	; 0x40
 80127c8:	d121      	bne.n	801280e <lv_font_get_bitmap_fmt_txt+0x1b2>
            decompress_line(line_buf2, w);
 80127ca:	4620      	mov	r0, r4
 80127cc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80127d0:	f7ff fe64 	bl	801249c <decompress_line>
 80127d4:	46b3      	mov	fp, r6
 80127d6:	1e63      	subs	r3, r4, #1
 80127d8:	9304      	str	r3, [sp, #16]
            for(x = 0; x < w; x++) {
 80127da:	9b07      	ldr	r3, [sp, #28]
 80127dc:	459a      	cmp	sl, r3
 80127de:	d106      	bne.n	80127ee <lv_font_get_bitmap_fmt_txt+0x192>
 80127e0:	9b02      	ldr	r3, [sp, #8]
 80127e2:	441e      	add	r6, r3
 80127e4:	9b00      	ldr	r3, [sp, #0]
 80127e6:	3301      	adds	r3, #1
 80127e8:	b21b      	sxth	r3, r3
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	e7d3      	b.n	8012796 <lv_font_get_bitmap_fmt_txt+0x13a>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 80127ee:	9b04      	ldr	r3, [sp, #16]
                bits_write(out, wrp, line_buf1[x], bpp);
 80127f0:	4659      	mov	r1, fp
 80127f2:	9801      	ldr	r0, [sp, #4]
                wrp += wr_size;
 80127f4:	44cb      	add	fp, r9
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 80127f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80127fa:	9304      	str	r3, [sp, #16]
 80127fc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8012800:	405a      	eors	r2, r3
                bits_write(out, wrp, line_buf1[x], bpp);
 8012802:	4643      	mov	r3, r8
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8012804:	f88a 2000 	strb.w	r2, [sl]
                bits_write(out, wrp, line_buf1[x], bpp);
 8012808:	f7ff fe11 	bl	801242e <bits_write>
 801280c:	e7e5      	b.n	80127da <lv_font_get_bitmap_fmt_txt+0x17e>
            decompress_line(line_buf1, w);
 801280e:	46aa      	mov	sl, r5
 8012810:	46b3      	mov	fp, r6
 8012812:	4628      	mov	r0, r5
 8012814:	f7ff fe42 	bl	801249c <decompress_line>
            for(x = 0; x < w; x++) {
 8012818:	9b05      	ldr	r3, [sp, #20]
 801281a:	ebaa 0303 	sub.w	r3, sl, r3
 801281e:	b21b      	sxth	r3, r3
 8012820:	429f      	cmp	r7, r3
 8012822:	dddd      	ble.n	80127e0 <lv_font_get_bitmap_fmt_txt+0x184>
                bits_write(out, wrp, line_buf1[x], bpp);
 8012824:	4659      	mov	r1, fp
 8012826:	4643      	mov	r3, r8
 8012828:	f81a 2b01 	ldrb.w	r2, [sl], #1
                wrp += wr_size;
 801282c:	44cb      	add	fp, r9
                bits_write(out, wrp, line_buf1[x], bpp);
 801282e:	9801      	ldr	r0, [sp, #4]
 8012830:	f7ff fdfd 	bl	801242e <bits_write>
 8012834:	e7f0      	b.n	8012818 <lv_font_get_bitmap_fmt_txt+0x1bc>
 8012836:	bf00      	nop
 8012838:	0802c346 	.word	0x0802c346
 801283c:	20020868 	.word	0x20020868
 8012840:	20028bec 	.word	0x20028bec

08012844 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 8012844:	2a09      	cmp	r2, #9
{
 8012846:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801284a:	4681      	mov	r9, r0
 801284c:	460c      	mov	r4, r1
 801284e:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 8012850:	d006      	beq.n	8012860 <lv_font_get_glyph_dsc_fmt_txt+0x1c>
    if(letter == '\0') return 0;
 8012852:	2a00      	cmp	r2, #0
 8012854:	d136      	bne.n	80128c4 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    if(!gid) return false;
 8012856:	2500      	movs	r5, #0
}
 8012858:	4628      	mov	r0, r5
 801285a:	b004      	add	sp, #16
 801285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 8012860:	2501      	movs	r5, #1
        unicode_letter = ' ';
 8012862:	2220      	movs	r2, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8012864:	46c8      	mov	r8, r9
 8012866:	4611      	mov	r1, r2
 8012868:	f858 6f10 	ldr.w	r6, [r8, #16]!
 801286c:	4640      	mov	r0, r8
 801286e:	f7ff fe99 	bl	80125a4 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 8012872:	4607      	mov	r7, r0
 8012874:	2800      	cmp	r0, #0
 8012876:	d0ee      	beq.n	8012856 <lv_font_get_glyph_dsc_fmt_txt+0x12>
    if(fdsc->kern_dsc) {
 8012878:	68f3      	ldr	r3, [r6, #12]
 801287a:	bb2b      	cbnz	r3, 80128c8 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
 801287c:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801287e:	6873      	ldr	r3, [r6, #4]
 8012880:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8012884:	8a33      	ldrh	r3, [r6, #16]
    uint32_t adv_w = gdsc->adv_w;
 8012886:	887a      	ldrh	r2, [r7, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8012888:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 801288a:	f3c2 120b 	ubfx	r2, r2, #4, #12
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801288e:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8012890:	b290      	uxth	r0, r2
    if(is_tab) adv_w *= 2;
 8012892:	b105      	cbz	r5, 8012896 <lv_font_get_glyph_dsc_fmt_txt+0x52>
 8012894:	0050      	lsls	r0, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8012896:	3308      	adds	r3, #8
 8012898:	4403      	add	r3, r0
 801289a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 801289c:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 801289e:	797b      	ldrb	r3, [r7, #5]
 80128a0:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
 80128a2:	793b      	ldrb	r3, [r7, #4]
 80128a4:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 80128a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80128aa:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 80128ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80128b0:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80128b2:	7cf2      	ldrb	r2, [r6, #19]
 80128b4:	f3c2 0243 	ubfx	r2, r2, #1, #4
 80128b8:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80128ba:	2d00      	cmp	r5, #0
 80128bc:	d061      	beq.n	8012982 <lv_font_get_glyph_dsc_fmt_txt+0x13e>
 80128be:	005b      	lsls	r3, r3, #1
 80128c0:	8063      	strh	r3, [r4, #2]
 80128c2:	e7c9      	b.n	8012858 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    bool is_tab = false;
 80128c4:	2500      	movs	r5, #0
 80128c6:	e7cd      	b.n	8012864 <lv_font_get_glyph_dsc_fmt_txt+0x20>
    if(letter == '\0') return 0;
 80128c8:	f1ba 0f00 	cmp.w	sl, #0
 80128cc:	d0d6      	beq.n	801287c <lv_font_get_glyph_dsc_fmt_txt+0x38>
 80128ce:	4651      	mov	r1, sl
 80128d0:	4640      	mov	r0, r8
 80128d2:	f7ff fe67 	bl	80125a4 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 80128d6:	2800      	cmp	r0, #0
 80128d8:	d0d0      	beq.n	801287c <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 80128da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80128de:	f8d3 800c 	ldr.w	r8, [r3, #12]
    if(fdsc->kern_classes == 0) {
 80128e2:	7cdb      	ldrb	r3, [r3, #19]
 80128e4:	069b      	lsls	r3, r3, #26
 80128e6:	d437      	bmi.n	8012958 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        if(kdsc->glyph_ids_size == 0) {
 80128e8:	f898 300b 	ldrb.w	r3, [r8, #11]
 80128ec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 80128f0:	d119      	bne.n	8012926 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80128f2:	eb07 2300 	add.w	r3, r7, r0, lsl #8
 80128f6:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 80128f8:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80128fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8012900:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8012904:	4649      	mov	r1, r9
 8012906:	4b20      	ldr	r3, [pc, #128]	; (8012988 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
 8012908:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 801290c:	9300      	str	r3, [sp, #0]
 801290e:	2302      	movs	r3, #2
 8012910:	f002 fc10 	bl	8015134 <_lv_utils_bsearch>
            if(kid_p) {
 8012914:	2800      	cmp	r0, #0
 8012916:	d0b2      	beq.n	801287e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8012918:	eba0 0009 	sub.w	r0, r0, r9
 801291c:	1040      	asrs	r0, r0, #1
                value = kdsc->values[ofs];
 801291e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012922:	5618      	ldrsb	r0, [r3, r0]
 8012924:	e7ab      	b.n	801287e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 8012926:	2b40      	cmp	r3, #64	; 0x40
 8012928:	d1a8      	bne.n	801287c <lv_font_get_glyph_dsc_fmt_txt+0x38>
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801292a:	eb07 4300 	add.w	r3, r7, r0, lsl #16
 801292e:	a804      	add	r0, sp, #16
            const uint32_t * g_ids = kdsc->glyph_ids;
 8012930:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8012934:	f8d8 2008 	ldr.w	r2, [r8, #8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8012938:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801293c:	4649      	mov	r1, r9
 801293e:	4b13      	ldr	r3, [pc, #76]	; (801298c <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 8012940:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8012944:	9300      	str	r3, [sp, #0]
 8012946:	2304      	movs	r3, #4
 8012948:	f002 fbf4 	bl	8015134 <_lv_utils_bsearch>
            if(kid_p) {
 801294c:	2800      	cmp	r0, #0
 801294e:	d096      	beq.n	801287e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8012950:	eba0 0009 	sub.w	r0, r0, r9
 8012954:	1080      	asrs	r0, r0, #2
 8012956:	e7e2      	b.n	801291e <lv_font_get_glyph_dsc_fmt_txt+0xda>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8012958:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801295c:	5ddb      	ldrb	r3, [r3, r7]
        if(left_class > 0 && right_class > 0) {
 801295e:	2b00      	cmp	r3, #0
 8012960:	d08c      	beq.n	801287c <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8012962:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012966:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8012968:	2900      	cmp	r1, #0
 801296a:	d087      	beq.n	801287c <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801296c:	f8d8 2000 	ldr.w	r2, [r8]
 8012970:	3b01      	subs	r3, #1
 8012972:	f898 000d 	ldrb.w	r0, [r8, #13]
 8012976:	440a      	add	r2, r1
 8012978:	fb00 2303 	mla	r3, r0, r3, r2
 801297c:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 8012980:	e77d      	b.n	801287e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 8012982:	2501      	movs	r5, #1
 8012984:	e768      	b.n	8012858 <lv_font_get_glyph_dsc_fmt_txt+0x14>
 8012986:	bf00      	nop
 8012988:	080123a1 	.word	0x080123a1
 801298c:	080123b3 	.word	0x080123b3

08012990 <_lv_font_clean_up_fmt_txt>:
{
 8012990:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 8012992:	4c04      	ldr	r4, [pc, #16]	; (80129a4 <_lv_font_clean_up_fmt_txt+0x14>)
 8012994:	6820      	ldr	r0, [r4, #0]
 8012996:	b118      	cbz	r0, 80129a0 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 8012998:	f001 f924 	bl	8013be4 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 801299c:	2300      	movs	r3, #0
 801299e:	6023      	str	r3, [r4, #0]
}
 80129a0:	bd10      	pop	{r4, pc}
 80129a2:	bf00      	nop
 80129a4:	20028bec 	.word	0x20028bec

080129a8 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80129a8:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80129aa:	212c      	movs	r1, #44	; 0x2c
{
 80129ac:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80129ae:	f001 fb5f 	bl	8014070 <_lv_memset_00>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 80129b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    driver->flush_cb         = NULL;
 80129b6:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
    driver->dpi = LV_DPI;
 80129b8:	2182      	movs	r1, #130	; 0x82
    driver->hor_res          = LV_HOR_RES_MAX;
 80129ba:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 80129bc:	f44f 7388 	mov.w	r3, #272	; 0x110
    driver->flush_cb         = NULL;
 80129c0:	60e2      	str	r2, [r4, #12]
    driver->ver_res          = LV_VER_RES_MAX;
 80129c2:	8063      	strh	r3, [r4, #2]
    driver->rotated          = 0;
 80129c4:	7a23      	ldrb	r3, [r4, #8]
    driver->buffer           = NULL;
 80129c6:	6062      	str	r2, [r4, #4]
    driver->rotated          = 0;
 80129c8:	f362 0341 	bfi	r3, r2, #1, #1

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 80129cc:	6162      	str	r2, [r4, #20]
    driver->rotated          = 0;
 80129ce:	7223      	strb	r3, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 80129d0:	4b05      	ldr	r3, [pc, #20]	; (80129e8 <lv_disp_drv_init+0x40>)
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->dpi = LV_DPI;
 80129d6:	8923      	ldrh	r3, [r4, #8]
 80129d8:	f361 038b 	bfi	r3, r1, #2, #10
 80129dc:	8123      	strh	r3, [r4, #8]
    driver->antialiasing = true;
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	f043 0301 	orr.w	r3, r3, #1
 80129e4:	7223      	strb	r3, [r4, #8]
}
 80129e6:	bd10      	pop	{r4, pc}
 80129e8:	08022922 	.word	0x08022922

080129ec <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 80129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ee:	4604      	mov	r4, r0
 80129f0:	460d      	mov	r5, r1
 80129f2:	4617      	mov	r7, r2
 80129f4:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 80129f6:	2124      	movs	r1, #36	; 0x24
 80129f8:	f001 fb3a 	bl	8014070 <_lv_memset_00>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 80129fc:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->buf_act = disp_buf->buf1;
    disp_buf->size    = size_in_px_cnt;
 8012a00:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 8012a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a08 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8012a08:	4b01      	ldr	r3, [pc, #4]	; (8012a10 <lv_disp_get_default+0x8>)
 8012a0a:	6818      	ldr	r0, [r3, #0]
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	20020878 	.word	0x20020878

08012a14 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012a14:	b910      	cbnz	r0, 8012a1c <lv_disp_get_hor_res+0x8>
    return disp_def;
 8012a16:	4b07      	ldr	r3, [pc, #28]	; (8012a34 <lv_disp_get_hor_res+0x20>)
 8012a18:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8012a1a:	b138      	cbz	r0, 8012a2c <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 8012a1c:	7a03      	ldrb	r3, [r0, #8]
 8012a1e:	079b      	lsls	r3, r3, #30
 8012a20:	bf54      	ite	pl
 8012a22:	f9b0 0000 	ldrshpl.w	r0, [r0]
 8012a26:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 8012a2a:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 8012a2c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	20020878 	.word	0x20020878

08012a38 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012a38:	b910      	cbnz	r0, 8012a40 <lv_disp_get_ver_res+0x8>
    return disp_def;
 8012a3a:	4b07      	ldr	r3, [pc, #28]	; (8012a58 <lv_disp_get_ver_res+0x20>)
 8012a3c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 8012a3e:	b138      	cbz	r0, 8012a50 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 8012a40:	7a03      	ldrb	r3, [r0, #8]
 8012a42:	079b      	lsls	r3, r3, #30
 8012a44:	bf54      	ite	pl
 8012a46:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 8012a4a:	f9b0 0000 	ldrshmi.w	r0, [r0]
 8012a4e:	4770      	bx	lr
        return LV_VER_RES_MAX;
 8012a50:	f44f 7088 	mov.w	r0, #272	; 0x110
}
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	20020878 	.word	0x20020878

08012a5c <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012a5c:	b910      	cbnz	r0, 8012a64 <lv_disp_get_dpi+0x8>
    return disp_def;
 8012a5e:	4b04      	ldr	r3, [pc, #16]	; (8012a70 <lv_disp_get_dpi+0x14>)
 8012a60:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 8012a62:	b118      	cbz	r0, 8012a6c <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
 8012a64:	8900      	ldrh	r0, [r0, #8]
 8012a66:	f3c0 0089 	ubfx	r0, r0, #2, #10
 8012a6a:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 8012a6c:	2082      	movs	r0, #130	; 0x82
}
 8012a6e:	4770      	bx	lr
 8012a70:	20020878 	.word	0x20020878

08012a74 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 8012a74:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8012a76:	4602      	mov	r2, r0
 8012a78:	b910      	cbnz	r0, 8012a80 <lv_disp_get_size_category+0xc>
    return disp_def;
 8012a7a:	4b0f      	ldr	r3, [pc, #60]	; (8012ab8 <lv_disp_get_size_category+0x44>)
 8012a7c:	681a      	ldr	r2, [r3, #0]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 8012a7e:	b19a      	cbz	r2, 8012aa8 <lv_disp_get_size_category+0x34>
    else w = lv_disp_get_hor_res(disp);
 8012a80:	4610      	mov	r0, r2
 8012a82:	f7ff ffc7 	bl	8012a14 <lv_disp_get_hor_res>
 8012a86:	4601      	mov	r1, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
 8012a88:	4610      	mov	r0, r2
 8012a8a:	f7ff ffe7 	bl	8012a5c <lv_disp_get_dpi>

    w = w * 10 / dpi;
 8012a8e:	230a      	movs	r3, #10
 8012a90:	434b      	muls	r3, r1
 8012a92:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 8012a96:	281d      	cmp	r0, #29
 8012a98:	d909      	bls.n	8012aae <lv_disp_get_size_category+0x3a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 8012a9a:	2831      	cmp	r0, #49	; 0x31
 8012a9c:	d909      	bls.n	8012ab2 <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
 8012a9e:	2846      	cmp	r0, #70	; 0x46
 8012aa0:	bf34      	ite	cc
 8012aa2:	2002      	movcc	r0, #2
 8012aa4:	2003      	movcs	r0, #3
}
 8012aa6:	bd08      	pop	{r3, pc}
    if(disp == NULL) w = LV_HOR_RES_MAX;
 8012aa8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8012aac:	e7ec      	b.n	8012a88 <lv_disp_get_size_category+0x14>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 8012aae:	2000      	movs	r0, #0
 8012ab0:	e7f9      	b.n	8012aa6 <lv_disp_get_size_category+0x32>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	e7f7      	b.n	8012aa6 <lv_disp_get_size_category+0x32>
 8012ab6:	bf00      	nop
 8012ab8:	20020878 	.word	0x20020878

08012abc <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 8012abc:	6843      	ldr	r3, [r0, #4]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 8012ac2:	61da      	str	r2, [r3, #28]
}
 8012ac4:	4770      	bx	lr
	...

08012ac8 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 8012ac8:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8012aca:	4803      	ldr	r0, [pc, #12]	; (8012ad8 <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8012acc:	b909      	cbnz	r1, 8012ad2 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8012ace:	f000 bec1 	b.w	8013854 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8012ad2:	f000 bec5 	b.w	8013860 <_lv_ll_get_next>
 8012ad6:	bf00      	nop
 8012ad8:	20028bfc 	.word	0x20028bfc

08012adc <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 8012adc:	6840      	ldr	r0, [r0, #4]
 8012ade:	4770      	bx	lr

08012ae0 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
 8012ae0:	f8b0 017a 	ldrh.w	r0, [r0, #378]	; 0x17a
}
 8012ae4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8012ae8:	4770      	bx	lr

08012aea <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
 8012aea:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
 8012aee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8012af2:	428a      	cmp	r2, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
 8012af4:	bfaa      	itet	ge
 8012af6:	1a52      	subge	r2, r2, r1
        disp->inv_p = 0;
 8012af8:	f36f 0309 	bfclt	r3, #0, #10
        disp->inv_p -= num;
 8012afc:	f362 0309 	bfige	r3, r2, #0, #10
 8012b00:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
}
 8012b04:	4770      	bx	lr

08012b06 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 8012b06:	6843      	ldr	r3, [r0, #4]
 8012b08:	6818      	ldr	r0, [r3, #0]
 8012b0a:	b118      	cbz	r0, 8012b14 <lv_disp_is_double_buf+0xe>
 8012b0c:	6858      	ldr	r0, [r3, #4]
 8012b0e:	3000      	adds	r0, #0
 8012b10:	bf18      	it	ne
 8012b12:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 8012b14:	4770      	bx	lr

08012b16 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 8012b16:	b508      	push	{r3, lr}
 8012b18:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8012b1a:	f7ff fff4 	bl	8012b06 <lv_disp_is_double_buf>
 8012b1e:	b140      	cbz	r0, 8012b32 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 8012b20:	8853      	ldrh	r3, [r2, #2]
 8012b22:	8810      	ldrh	r0, [r2, #0]
 8012b24:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 8012b28:	6853      	ldr	r3, [r2, #4]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	1ac3      	subs	r3, r0, r3
 8012b2e:	4258      	negs	r0, r3
 8012b30:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
 8012b32:	bd08      	pop	{r3, pc}

08012b34 <lv_disp_drv_register>:
{
 8012b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b36:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8012b38:	4839      	ldr	r0, [pc, #228]	; (8012c20 <lv_disp_drv_register+0xec>)
 8012b3a:	f000 fe54 	bl	80137e6 <_lv_ll_ins_head>
    if(!disp) {
 8012b3e:	4604      	mov	r4, r0
 8012b40:	b958      	cbnz	r0, 8012b5a <lv_disp_drv_register+0x26>
        LV_ASSERT_MEM(disp);
 8012b42:	f000 fd59 	bl	80135f8 <lv_debug_check_null>
 8012b46:	b110      	cbz	r0, 8012b4e <lv_disp_drv_register+0x1a>
        return NULL;
 8012b48:	2400      	movs	r4, #0
}
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2300      	movs	r3, #0
 8012b52:	4834      	ldr	r0, [pc, #208]	; (8012c24 <lv_disp_drv_register+0xf0>)
 8012b54:	f000 fd54 	bl	8013600 <lv_debug_log_error>
 8012b58:	e7fe      	b.n	8012b58 <lv_disp_drv_register+0x24>
    _lv_memset_00(disp, sizeof(lv_disp_t));
 8012b5a:	f44f 71c0 	mov.w	r1, #384	; 0x180
    if(disp_def == NULL) disp_def = disp;
 8012b5e:	4e32      	ldr	r6, [pc, #200]	; (8012c28 <lv_disp_drv_register+0xf4>)
    _lv_memset_00(disp, sizeof(lv_disp_t));
 8012b60:	f001 fa86 	bl	8014070 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 8012b64:	222c      	movs	r2, #44	; 0x2c
 8012b66:	4629      	mov	r1, r5
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f001 f8c5 	bl	8013cf8 <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 8012b6e:	214c      	movs	r1, #76	; 0x4c
 8012b70:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012b74:	f000 fe2f 	bl	80137d6 <_lv_ll_init>
    disp->last_activity_time = 0;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    if(disp_def == NULL) disp_def = disp;
 8012b7e:	6833      	ldr	r3, [r6, #0]
 8012b80:	b903      	cbnz	r3, 8012b84 <lv_disp_drv_register+0x50>
 8012b82:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 8012b84:	4623      	mov	r3, r4
 8012b86:	2203      	movs	r2, #3
 8012b88:	211e      	movs	r1, #30
 8012b8a:	4828      	ldr	r0, [pc, #160]	; (8012c2c <lv_disp_drv_register+0xf8>)
    lv_disp_t * disp_def_tmp = disp_def;
 8012b8c:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8012b8e:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 8012b90:	f001 fe34 	bl	80147fc <lv_task_create>
 8012b94:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
 8012b96:	f000 fd2f 	bl	80135f8 <lv_debug_check_null>
 8012b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	b918      	cbnz	r0, 8012ba8 <lv_disp_drv_register+0x74>
 8012ba0:	4820      	ldr	r0, [pc, #128]	; (8012c24 <lv_disp_drv_register+0xf0>)
 8012ba2:	f000 fd2d 	bl	8013600 <lv_debug_log_error>
 8012ba6:	e7fe      	b.n	8012ba6 <lv_disp_drv_register+0x72>
    if(disp->refr_task == NULL) return NULL;
 8012ba8:	2a00      	cmp	r2, #0
 8012baa:	d0cd      	beq.n	8012b48 <lv_disp_drv_register+0x14>
    disp->inv_p = 0;
 8012bac:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
    disp->last_activity_time = 0;
 8012bb0:	2500      	movs	r5, #0
    disp->inv_p = 0;
 8012bb2:	f36f 0309 	bfc	r3, #0, #10
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8012bb6:	4629      	mov	r1, r5
    disp->last_activity_time = 0;
 8012bb8:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8012bbc:	4628      	mov	r0, r5
    disp->inv_p = 0;
 8012bbe:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
    disp->bg_color = LV_COLOR_WHITE;
 8012bc2:	4b1b      	ldr	r3, [pc, #108]	; (8012c30 <lv_disp_drv_register+0xfc>)
    disp->bg_img = NULL;
 8012bc4:	6565      	str	r5, [r4, #84]	; 0x54
    disp->bg_color = LV_COLOR_WHITE;
 8012bc6:	885b      	ldrh	r3, [r3, #2]
    disp->prev_scr  = NULL;
 8012bc8:	6425      	str	r5, [r4, #64]	; 0x40
    disp->bg_color = LV_COLOR_WHITE;
 8012bca:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    disp->bg_opa = LV_OPA_COVER;
 8012bce:	23ff      	movs	r3, #255	; 0xff
 8012bd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8012bd4:	f7f5 fcb0 	bl	8008538 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012bd8:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8012bda:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7f5 fcab 	bl	8008538 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8012be2:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8012be4:	64a0      	str	r0, [r4, #72]	; 0x48
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8012be6:	4628      	mov	r0, r5
 8012be8:	f7f5 fca6 	bl	8008538 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 8012bec:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8012bee:	64e0      	str	r0, [r4, #76]	; 0x4c
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 8012bf0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012bf2:	f7f6 fbfd 	bl	80093f0 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012bfa:	f7f6 fbf9 	bl	80093f0 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 8012bfe:	4629      	mov	r1, r5
 8012c00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012c02:	f7f4 febf 	bl	8007984 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 8012c06:	4629      	mov	r1, r5
 8012c08:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012c0a:	f7f4 febb 	bl	8007984 <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
 8012c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012c10:	f7f5 f9cc 	bl	8007fac <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8012c14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    disp_def = disp_def_tmp; /*Revert the default display*/
 8012c16:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8012c18:	f001 ff58 	bl	8014acc <lv_task_ready>
 8012c1c:	e795      	b.n	8012b4a <lv_disp_drv_register+0x16>
 8012c1e:	bf00      	nop
 8012c20:	20028bfc 	.word	0x20028bfc
 8012c24:	0802c346 	.word	0x0802c346
 8012c28:	20020878 	.word	0x20020878
 8012c2c:	0800ae79 	.word	0x0800ae79
 8012c30:	08022922 	.word	0x08022922

08012c34 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8012c34:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8012c36:	211c      	movs	r1, #28
{
 8012c38:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8012c3a:	f001 fa19 	bl	8014070 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8012c3e:	2300      	movs	r3, #0
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 8012c40:	4a02      	ldr	r2, [pc, #8]	; (8012c4c <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 8012c42:	7023      	strb	r3, [r4, #0]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 8012c44:	4b02      	ldr	r3, [pc, #8]	; (8012c50 <lv_indev_drv_init+0x1c>)
 8012c46:	e9c4 2305 	strd	r2, r3, [r4, #20]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 8012c4a:	bd10      	pop	{r4, pc}
 8012c4c:	32030a0a 	.word	0x32030a0a
 8012c50:	00640190 	.word	0x00640190

08012c54 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8012c54:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8012c56:	68c3      	ldr	r3, [r0, #12]
{
 8012c58:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8012c5a:	b913      	cbnz	r3, 8012c62 <lv_indev_drv_register+0xe>
 8012c5c:	f7ff fed4 	bl	8012a08 <lv_disp_get_default>
 8012c60:	60e8      	str	r0, [r5, #12]

    if(driver->disp == NULL) {
 8012c62:	68eb      	ldr	r3, [r5, #12]
 8012c64:	b913      	cbnz	r3, 8012c6c <lv_indev_drv_register+0x18>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
 8012c66:	2400      	movs	r4, #0
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);

    return indev;
}
 8012c68:	4620      	mov	r0, r4
 8012c6a:	bd38      	pop	{r3, r4, r5, pc}
    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8012c6c:	4814      	ldr	r0, [pc, #80]	; (8012cc0 <lv_indev_drv_register+0x6c>)
 8012c6e:	f000 fdba 	bl	80137e6 <_lv_ll_ins_head>
    if(!indev) {
 8012c72:	4604      	mov	r4, r0
 8012c74:	b948      	cbnz	r0, 8012c8a <lv_indev_drv_register+0x36>
        LV_ASSERT_MEM(indev);
 8012c76:	f000 fcbf 	bl	80135f8 <lv_debug_check_null>
 8012c7a:	2800      	cmp	r0, #0
 8012c7c:	d1f3      	bne.n	8012c66 <lv_indev_drv_register+0x12>
 8012c7e:	2200      	movs	r2, #0
 8012c80:	2300      	movs	r3, #0
 8012c82:	4810      	ldr	r0, [pc, #64]	; (8012cc4 <lv_indev_drv_register+0x70>)
 8012c84:	f000 fcbc 	bl	8013600 <lv_debug_log_error>
 8012c88:	e7fe      	b.n	8012c88 <lv_indev_drv_register+0x34>
    _lv_memset_00(indev, sizeof(lv_indev_t));
 8012c8a:	2160      	movs	r1, #96	; 0x60
 8012c8c:	f001 f9f0 	bl	8014070 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 8012c90:	221c      	movs	r2, #28
 8012c92:	4629      	mov	r1, r5
 8012c94:	4620      	mov	r0, r4
 8012c96:	f001 f82f 	bl	8013cf8 <_lv_memcpy>
    indev->proc.reset_query = 1;
 8012c9a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8012c9e:	2204      	movs	r2, #4
 8012ca0:	211e      	movs	r1, #30
    indev->proc.reset_query = 1;
 8012ca2:	f043 0302 	orr.w	r3, r3, #2
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8012ca6:	4808      	ldr	r0, [pc, #32]	; (8012cc8 <lv_indev_drv_register+0x74>)
    indev->proc.reset_query = 1;
 8012ca8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
 8012cac:	2300      	movs	r3, #0
    indev->group            = NULL;
 8012cae:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    indev->btn_points       = NULL;
 8012cb2:	65e3      	str	r3, [r4, #92]	; 0x5c
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8012cb4:	4623      	mov	r3, r4
 8012cb6:	f001 fda1 	bl	80147fc <lv_task_create>
 8012cba:	6120      	str	r0, [r4, #16]
    return indev;
 8012cbc:	e7d4      	b.n	8012c68 <lv_indev_drv_register+0x14>
 8012cbe:	bf00      	nop
 8012cc0:	20028bf0 	.word	0x20028bf0
 8012cc4:	0802c346 	.word	0x0802c346
 8012cc8:	0800704d 	.word	0x0800704d

08012ccc <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8012ccc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8012cce:	4803      	ldr	r0, [pc, #12]	; (8012cdc <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8012cd0:	b909      	cbnz	r1, 8012cd6 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8012cd2:	f000 bdbf 	b.w	8013854 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8012cd6:	f000 bdc3 	b.w	8013860 <_lv_ll_get_next>
 8012cda:	bf00      	nop
 8012cdc:	20028bf0 	.word	0x20028bf0

08012ce0 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	4605      	mov	r5, r0
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 8012ce6:	2110      	movs	r1, #16
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f001 f9c1 	bl	8014070 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 8012cee:	782b      	ldrb	r3, [r5, #0]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d10a      	bne.n	8012d0a <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.act_point.x;
 8012cf4:	8c2b      	ldrh	r3, [r5, #32]
 8012cf6:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 8012cf8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8012cfa:	8063      	strh	r3, [r4, #2]
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
 8012cfc:	686b      	ldr	r3, [r5, #4]
 8012cfe:	b183      	cbz	r3, 8012d22 <_lv_indev_read+0x42>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 8012d00:	4621      	mov	r1, r4
 8012d02:	4628      	mov	r0, r5
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 8012d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
 8012d08:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8012d0a:	2b02      	cmp	r3, #2
 8012d0c:	d102      	bne.n	8012d14 <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
 8012d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d10:	6063      	str	r3, [r4, #4]
 8012d12:	e7f3      	b.n	8012cfc <_lv_indev_read+0x1c>
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 8012d14:	2b04      	cmp	r3, #4
        data->key = LV_KEY_ENTER;
 8012d16:	bf01      	itttt	eq
 8012d18:	230a      	moveq	r3, #10
 8012d1a:	6063      	streq	r3, [r4, #4]
        data->enc_diff = 0;
 8012d1c:	2300      	moveq	r3, #0
 8012d1e:	81a3      	strheq	r3, [r4, #12]
 8012d20:	e7ec      	b.n	8012cfc <_lv_indev_read+0x1c>
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	bd70      	pop	{r4, r5, r6, pc}
	...

08012d28 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8012d28:	4b03      	ldr	r3, [pc, #12]	; (8012d38 <lv_tick_inc+0x10>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8012d2e:	685a      	ldr	r2, [r3, #4]
 8012d30:	4410      	add	r0, r2
 8012d32:	6058      	str	r0, [r3, #4]
}
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop
 8012d38:	2002087c 	.word	0x2002087c

08012d3c <lv_tick_get>:
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8012d3c:	4b03      	ldr	r3, [pc, #12]	; (8012d4c <lv_tick_get+0x10>)
        tick_irq_flag = 1;
 8012d3e:	2101      	movs	r1, #1
        result        = sys_time;
 8012d40:	6858      	ldr	r0, [r3, #4]
        tick_irq_flag = 1;
 8012d42:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 8012d44:	781a      	ldrb	r2, [r3, #0]
 8012d46:	2a00      	cmp	r2, #0
 8012d48:	d0fb      	beq.n	8012d42 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8012d4a:	4770      	bx	lr
 8012d4c:	2002087c 	.word	0x2002087c

08012d50 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8012d50:	b510      	push	{r4, lr}
 8012d52:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8012d54:	f7ff fff2 	bl	8012d3c <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8012d58:	1b00      	subs	r0, r0, r4
 8012d5a:	bd10      	pop	{r4, pc}

08012d5c <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8012d5c:	e9d1 0309 	ldrd	r0, r3, [r1, #36]	; 0x24
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 8012d60:	6a0a      	ldr	r2, [r1, #32]
    if(a->time == a->act_time) {
 8012d62:	4298      	cmp	r0, r3
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8012d64:	bf16      	itet	ne
 8012d66:	029b      	lslne	r3, r3, #10
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 8012d68:	f44f 6380 	moveq.w	r3, #1024	; 0x400
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8012d6c:	fb93 f3f0 	sdivne	r3, r3, r0
    new_value = (int32_t)step * (a->end - a->start);
 8012d70:	6988      	ldr	r0, [r1, #24]
 8012d72:	1a12      	subs	r2, r2, r0
 8012d74:	4353      	muls	r3, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 8012d76:	eb00 20a3 	add.w	r0, r0, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 8012d7a:	b200      	sxth	r0, r0
 8012d7c:	4770      	bx	lr
	...

08012d80 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
 8012d80:	b510      	push	{r4, lr}
    anim_list_changed = true;
 8012d82:	2301      	movs	r3, #1
 8012d84:	4c06      	ldr	r4, [pc, #24]	; (8012da0 <anim_mark_list_change+0x20>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8012d86:	4807      	ldr	r0, [pc, #28]	; (8012da4 <anim_mark_list_change+0x24>)
    anim_list_changed = true;
 8012d88:	7023      	strb	r3, [r4, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8012d8a:	f000 fd63 	bl	8013854 <_lv_ll_get_head>
 8012d8e:	4601      	mov	r1, r0
 8012d90:	b920      	cbnz	r0, 8012d9c <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8012d92:	6860      	ldr	r0, [r4, #4]
}
 8012d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8012d98:	f001 be6c 	b.w	8014a74 <lv_task_set_prio>
 8012d9c:	2104      	movs	r1, #4
 8012d9e:	e7f8      	b.n	8012d92 <anim_mark_list_change+0x12>
 8012da0:	20020884 	.word	0x20020884
 8012da4:	20028cc0 	.word	0x20028cc0

08012da8 <anim_task>:
{
 8012da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8012dac:	484f      	ldr	r0, [pc, #316]	; (8012eec <anim_task+0x144>)
{
 8012dae:	b092      	sub	sp, #72	; 0x48
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8012db0:	f000 fd50 	bl	8013854 <_lv_ll_get_head>
 8012db4:	4c4d      	ldr	r4, [pc, #308]	; (8012eec <anim_task+0x144>)
 8012db6:	4605      	mov	r5, r0
 8012db8:	b985      	cbnz	r5, 8012ddc <anim_task+0x34>
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8012dba:	4e4d      	ldr	r6, [pc, #308]	; (8012ef0 <anim_task+0x148>)
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012dbc:	4f4b      	ldr	r7, [pc, #300]	; (8012eec <anim_task+0x144>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 8012dbe:	68b0      	ldr	r0, [r6, #8]
 8012dc0:	f7ff ffc6 	bl	8012d50 <lv_tick_elaps>
 8012dc4:	4680      	mov	r8, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012dc6:	4849      	ldr	r0, [pc, #292]	; (8012eec <anim_task+0x144>)
 8012dc8:	f000 fd44 	bl	8013854 <_lv_ll_get_head>
 8012dcc:	4604      	mov	r4, r0
    while(a != NULL) {
 8012dce:	b98c      	cbnz	r4, 8012df4 <anim_task+0x4c>
    last_task_run = lv_tick_get();
 8012dd0:	f7ff ffb4 	bl	8012d3c <lv_tick_get>
 8012dd4:	60b0      	str	r0, [r6, #8]
}
 8012dd6:	b012      	add	sp, #72	; 0x48
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 8012ddc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8012de0:	4629      	mov	r1, r5
 8012de2:	4620      	mov	r0, r4
        a->has_run = 0;
 8012de4:	f36f 0341 	bfc	r3, #1, #1
 8012de8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8012dec:	f000 fd38 	bl	8013860 <_lv_ll_get_next>
 8012df0:	4605      	mov	r5, r0
 8012df2:	e7e1      	b.n	8012db8 <anim_task+0x10>
        if(!a->has_run) {
 8012df4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        anim_list_changed = false;
 8012df8:	7035      	strb	r5, [r6, #0]
        if(!a->has_run) {
 8012dfa:	0799      	lsls	r1, r3, #30
 8012dfc:	d471      	bmi.n	8012ee2 <anim_task+0x13a>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 8012dfe:	f043 0302 	orr.w	r3, r3, #2
 8012e02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
 8012e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if(a->act_time <= 0 && new_act_time >= 0) {
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	dc06      	bgt.n	8012e1a <anim_task+0x72>
 8012e0c:	eb13 0f08 	cmn.w	r3, r8
 8012e10:	d403      	bmi.n	8012e1a <anim_task+0x72>
                if(a->start_cb) a->start_cb(a);
 8012e12:	68a3      	ldr	r3, [r4, #8]
 8012e14:	b10b      	cbz	r3, 8012e1a <anim_task+0x72>
 8012e16:	4620      	mov	r0, r4
 8012e18:	4798      	blx	r3
            a->act_time += elaps;
 8012e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012e1c:	4443      	add	r3, r8
            if(a->act_time >= 0) {
 8012e1e:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8012e20:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
 8012e22:	db3b      	blt.n	8012e9c <anim_task+0xf4>
                if(a->act_time > a->time) a->act_time = a->time;
 8012e24:	6a62      	ldr	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8012e26:	4620      	mov	r0, r4
 8012e28:	4621      	mov	r1, r4
                if(a->act_time > a->time) a->act_time = a->time;
 8012e2a:	4293      	cmp	r3, r2
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8012e2c:	f850 3f10 	ldr.w	r3, [r0, #16]!
                if(a->act_time > a->time) a->act_time = a->time;
 8012e30:	bfc8      	it	gt
 8012e32:	62a2      	strgt	r2, [r4, #40]	; 0x28
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d038      	beq.n	8012eaa <anim_task+0x102>
 8012e38:	4798      	blx	r3
                if(new_value != a->current) {
 8012e3a:	69e3      	ldr	r3, [r4, #28]
 8012e3c:	4283      	cmp	r3, r0
 8012e3e:	d005      	beq.n	8012e4c <anim_task+0xa4>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012e40:	6863      	ldr	r3, [r4, #4]
                    a->current = new_value;
 8012e42:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012e44:	b113      	cbz	r3, 8012e4c <anim_task+0xa4>
 8012e46:	b201      	sxth	r1, r0
 8012e48:	6820      	ldr	r0, [r4, #0]
 8012e4a:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8012e4c:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
 8012e50:	429a      	cmp	r2, r3
 8012e52:	db23      	blt.n	8012e9c <anim_task+0xf4>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012e54:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8012e58:	f012 0001 	ands.w	r0, r2, #1
 8012e5c:	d107      	bne.n	8012e6e <anim_task+0xc6>
 8012e5e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012e60:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8012e64:	3b01      	subs	r3, #1
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	428b      	cmp	r3, r1
        a->repeat_cnt--;
 8012e6a:	bf98      	it	ls
 8012e6c:	8723      	strhls	r3, [r4, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8012e6e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012e70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012e72:	b9e9      	cbnz	r1, 8012eb0 <anim_task+0x108>
 8012e74:	b103      	cbz	r3, 8012e78 <anim_task+0xd0>
 8012e76:	b1d8      	cbz	r0, 8012eb0 <anim_task+0x108>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8012e78:	2244      	movs	r2, #68	; 0x44
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	a801      	add	r0, sp, #4
 8012e7e:	f000 ff3b 	bl	8013cf8 <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8012e82:	4621      	mov	r1, r4
 8012e84:	4638      	mov	r0, r7
 8012e86:	f000 fd22 	bl	80138ce <_lv_ll_remove>
        lv_mem_free(a);
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f000 feaa 	bl	8013be4 <lv_mem_free>
        anim_mark_list_change();
 8012e90:	f7ff ff76 	bl	8012d80 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8012e94:	9b04      	ldr	r3, [sp, #16]
 8012e96:	b10b      	cbz	r3, 8012e9c <anim_task+0xf4>
 8012e98:	a801      	add	r0, sp, #4
 8012e9a:	4798      	blx	r3
        if(anim_list_changed)
 8012e9c:	7833      	ldrb	r3, [r6, #0]
 8012e9e:	b303      	cbz	r3, 8012ee2 <anim_task+0x13a>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012ea0:	4638      	mov	r0, r7
 8012ea2:	f000 fcd7 	bl	8013854 <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	e791      	b.n	8012dce <anim_task+0x26>
                else new_value = lv_anim_path_linear(&a->path, a);
 8012eaa:	f7ff ff57 	bl	8012d5c <lv_anim_path_linear>
 8012eae:	e7c4      	b.n	8012e3a <anim_task+0x92>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8012eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eb2:	4249      	negs	r1, r1
 8012eb4:	62a1      	str	r1, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d0f0      	beq.n	8012e9c <anim_task+0xf4>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8012eba:	b910      	cbnz	r0, 8012ec2 <anim_task+0x11a>
 8012ebc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012ebe:	4249      	negs	r1, r1
 8012ec0:	62a1      	str	r1, [r4, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012ec2:	43d2      	mvns	r2, r2
 8012ec4:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
            tmp      = a->start;
 8012ec8:	69a0      	ldr	r0, [r4, #24]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012eca:	f362 0100 	bfi	r1, r2, #0, #1
            a->start = a->end;
 8012ece:	6a22      	ldr	r2, [r4, #32]
            a->end   = tmp;
 8012ed0:	6220      	str	r0, [r4, #32]
            a->start = a->end;
 8012ed2:	61a2      	str	r2, [r4, #24]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8012ed4:	07ca      	lsls	r2, r1, #31
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8012ed6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8012eda:	bf58      	it	pl
 8012edc:	6be3      	ldrpl	r3, [r4, #60]	; 0x3c
 8012ede:	6263      	str	r3, [r4, #36]	; 0x24
 8012ee0:	e7dc      	b.n	8012e9c <anim_task+0xf4>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	f000 fcbb 	bl	8013860 <_lv_ll_get_next>
 8012eea:	e7dc      	b.n	8012ea6 <anim_task+0xfe>
 8012eec:	20028cc0 	.word	0x20028cc0
 8012ef0:	20020884 	.word	0x20020884

08012ef4 <_lv_anim_core_init>:
{
 8012ef4:	b510      	push	{r4, lr}
    last_task_run = lv_tick_get();
 8012ef6:	4c0a      	ldr	r4, [pc, #40]	; (8012f20 <_lv_anim_core_init+0x2c>)
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8012ef8:	2144      	movs	r1, #68	; 0x44
 8012efa:	480a      	ldr	r0, [pc, #40]	; (8012f24 <_lv_anim_core_init+0x30>)
 8012efc:	f000 fc6b 	bl	80137d6 <_lv_ll_init>
    last_task_run = lv_tick_get();
 8012f00:	f7ff ff1c 	bl	8012d3c <lv_tick_get>
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8012f04:	2300      	movs	r3, #0
    last_task_run = lv_tick_get();
 8012f06:	60a0      	str	r0, [r4, #8]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8012f08:	2204      	movs	r2, #4
 8012f0a:	211e      	movs	r1, #30
 8012f0c:	4806      	ldr	r0, [pc, #24]	; (8012f28 <_lv_anim_core_init+0x34>)
 8012f0e:	f001 fc75 	bl	80147fc <lv_task_create>
 8012f12:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation task*/
 8012f14:	f7ff ff34 	bl	8012d80 <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
 8012f18:	2300      	movs	r3, #0
 8012f1a:	7023      	strb	r3, [r4, #0]
}
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop
 8012f20:	20020884 	.word	0x20020884
 8012f24:	20028cc0 	.word	0x20028cc0
 8012f28:	08012da9 	.word	0x08012da9

08012f2c <lv_anim_init>:
{
 8012f2c:	b510      	push	{r4, lr}
    _lv_memset_00(a, sizeof(lv_anim_t));
 8012f2e:	2144      	movs	r1, #68	; 0x44
{
 8012f30:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
 8012f32:	f001 f89d 	bl	8014070 <_lv_memset_00>
    a->time    = 500;
 8012f36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012f3a:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
 8012f40:	2364      	movs	r3, #100	; 0x64
 8012f42:	6223      	str	r3, [r4, #32]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8012f44:	4b08      	ldr	r3, [pc, #32]	; (8012f68 <lv_anim_init+0x3c>)
 8012f46:	781a      	ldrb	r2, [r3, #0]
 8012f48:	7422      	strb	r2, [r4, #16]
 8012f4a:	785a      	ldrb	r2, [r3, #1]
 8012f4c:	7462      	strb	r2, [r4, #17]
 8012f4e:	789a      	ldrb	r2, [r3, #2]
 8012f50:	78db      	ldrb	r3, [r3, #3]
 8012f52:	74a2      	strb	r2, [r4, #18]
 8012f54:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
 8012f56:	2301      	movs	r3, #1
 8012f58:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
 8012f5a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8012f5e:	f043 0301 	orr.w	r3, r3, #1
 8012f62:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8012f66:	bd10      	pop	{r4, pc}
 8012f68:	08022928 	.word	0x08022928

08012f6c <lv_anim_del>:
{
 8012f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f70:	4680      	mov	r8, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012f72:	4811      	ldr	r0, [pc, #68]	; (8012fb8 <lv_anim_del+0x4c>)
{
 8012f74:	460e      	mov	r6, r1
    bool del = false;
 8012f76:	2500      	movs	r5, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012f78:	f000 fc6c 	bl	8013854 <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012f7c:	4f0e      	ldr	r7, [pc, #56]	; (8012fb8 <lv_anim_del+0x4c>)
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012f7e:	4604      	mov	r4, r0
    while(a != NULL) {
 8012f80:	b914      	cbnz	r4, 8012f88 <lv_anim_del+0x1c>
}
 8012f82:	4628      	mov	r0, r5
 8012f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012f88:	4621      	mov	r1, r4
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	f000 fc68 	bl	8013860 <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012f90:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012f92:	4681      	mov	r9, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012f94:	4543      	cmp	r3, r8
 8012f96:	d10d      	bne.n	8012fb4 <lv_anim_del+0x48>
 8012f98:	6863      	ldr	r3, [r4, #4]
 8012f9a:	42b3      	cmp	r3, r6
 8012f9c:	d000      	beq.n	8012fa0 <lv_anim_del+0x34>
 8012f9e:	b94e      	cbnz	r6, 8012fb4 <lv_anim_del+0x48>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8012fa0:	4621      	mov	r1, r4
 8012fa2:	4638      	mov	r0, r7
            del = true;
 8012fa4:	2501      	movs	r5, #1
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8012fa6:	f000 fc92 	bl	80138ce <_lv_ll_remove>
            lv_mem_free(a);
 8012faa:	4620      	mov	r0, r4
 8012fac:	f000 fe1a 	bl	8013be4 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
 8012fb0:	f7ff fee6 	bl	8012d80 <anim_mark_list_change>
            del = true;
 8012fb4:	464c      	mov	r4, r9
 8012fb6:	e7e3      	b.n	8012f80 <lv_anim_del+0x14>
 8012fb8:	20028cc0 	.word	0x20028cc0

08012fbc <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8012fbc:	6841      	ldr	r1, [r0, #4]
{
 8012fbe:	b538      	push	{r3, r4, r5, lr}
 8012fc0:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8012fc2:	b111      	cbz	r1, 8012fca <lv_anim_start+0xe>
 8012fc4:	6800      	ldr	r0, [r0, #0]
 8012fc6:	f7ff ffd1 	bl	8012f6c <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8012fca:	4817      	ldr	r0, [pc, #92]	; (8013028 <lv_anim_start+0x6c>)
 8012fcc:	f000 fd38 	bl	8013a40 <_lv_ll_is_empty>
 8012fd0:	b120      	cbz	r0, 8012fdc <lv_anim_start+0x20>
        last_task_run = lv_tick_get() - 1;
 8012fd2:	f7ff feb3 	bl	8012d3c <lv_tick_get>
 8012fd6:	4b15      	ldr	r3, [pc, #84]	; (801302c <lv_anim_start+0x70>)
 8012fd8:	3801      	subs	r0, #1
 8012fda:	6098      	str	r0, [r3, #8]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8012fdc:	4812      	ldr	r0, [pc, #72]	; (8013028 <lv_anim_start+0x6c>)
 8012fde:	f000 fc02 	bl	80137e6 <_lv_ll_ins_head>
 8012fe2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
 8012fe4:	f000 fb08 	bl	80135f8 <lv_debug_check_null>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	b920      	cbnz	r0, 8012ff6 <lv_anim_start+0x3a>
 8012fec:	4622      	mov	r2, r4
 8012fee:	4810      	ldr	r0, [pc, #64]	; (8013030 <lv_anim_start+0x74>)
 8012ff0:	f000 fb06 	bl	8013600 <lv_debug_log_error>
 8012ff4:	e7fe      	b.n	8012ff4 <lv_anim_start+0x38>
    if(new_anim == NULL) return;
 8012ff6:	b1ac      	cbz	r4, 8013024 <lv_anim_start+0x68>
    a->time_orig = a->time;
 8012ff8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8012ffa:	2244      	movs	r2, #68	; 0x44
 8012ffc:	4629      	mov	r1, r5
 8012ffe:	4620      	mov	r0, r4
    a->time_orig = a->time;
 8013000:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8013002:	f000 fe79 	bl	8013cf8 <_lv_memcpy>
    if(new_anim->early_apply) {
 8013006:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 801300a:	07db      	lsls	r3, r3, #31
 801300c:	d506      	bpl.n	801301c <lv_anim_start+0x60>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 801300e:	6863      	ldr	r3, [r4, #4]
 8013010:	b123      	cbz	r3, 801301c <lv_anim_start+0x60>
 8013012:	6820      	ldr	r0, [r4, #0]
 8013014:	b110      	cbz	r0, 801301c <lv_anim_start+0x60>
 8013016:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801301a:	4798      	blx	r3
}
 801301c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
 8013020:	f7ff beae 	b.w	8012d80 <anim_mark_list_change>
}
 8013024:	bd38      	pop	{r3, r4, r5, pc}
 8013026:	bf00      	nop
 8013028:	20028cc0 	.word	0x20028cc0
 801302c:	20020884 	.word	0x20020884
 8013030:	0802c346 	.word	0x0802c346

08013034 <lv_anim_get>:
{
 8013034:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013036:	4e09      	ldr	r6, [pc, #36]	; (801305c <lv_anim_get+0x28>)
{
 8013038:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801303a:	4808      	ldr	r0, [pc, #32]	; (801305c <lv_anim_get+0x28>)
{
 801303c:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801303e:	f000 fc09 	bl	8013854 <_lv_ll_get_head>
 8013042:	b900      	cbnz	r0, 8013046 <lv_anim_get+0x12>
}
 8013044:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && a->exec_cb == exec_cb) {
 8013046:	6803      	ldr	r3, [r0, #0]
 8013048:	42a3      	cmp	r3, r4
 801304a:	d102      	bne.n	8013052 <lv_anim_get+0x1e>
 801304c:	6843      	ldr	r3, [r0, #4]
 801304e:	42ab      	cmp	r3, r5
 8013050:	d0f8      	beq.n	8013044 <lv_anim_get+0x10>
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013052:	4601      	mov	r1, r0
 8013054:	4630      	mov	r0, r6
 8013056:	f000 fc03 	bl	8013860 <_lv_ll_get_next>
 801305a:	e7f2      	b.n	8013042 <lv_anim_get+0xe>
 801305c:	20028cc0 	.word	0x20028cc0

08013060 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8013060:	1a89      	subs	r1, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 8013062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 8013066:	2900      	cmp	r1, #0
 8013068:	bfb8      	it	lt
 801306a:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 801306c:	434a      	muls	r2, r1
 801306e:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 8013072:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013076:	da04      	bge.n	8013082 <lv_anim_speed_to_time+0x22>
        time++;
 8013078:	2800      	cmp	r0, #0
 801307a:	bf08      	it	eq
 801307c:	2001      	moveq	r0, #1
}
 801307e:	b280      	uxth	r0, r0
 8013080:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 8013082:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013086:	e7fa      	b.n	801307e <lv_anim_speed_to_time+0x1e>

08013088 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8013088:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801308a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801308e:	2202      	movs	r2, #2
 8013090:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 8013094:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8013096:	1b5b      	subs	r3, r3, r5
 8013098:	fb93 f3f2 	sdiv	r3, r3, r2
    lv_coord_t px = p->x - cx;
 801309c:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t cx = area->x1 + r;
 801309e:	b29c      	uxth	r4, r3
    lv_coord_t py = p->y - cy;
 80130a0:	8849      	ldrh	r1, [r1, #2]

    uint32_t r_sqrd = r * r;
 80130a2:	435b      	muls	r3, r3
    lv_coord_t px = p->x - cx;
 80130a4:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
 80130a6:	1a08      	subs	r0, r1, r0
    lv_coord_t px = p->x - cx;
 80130a8:	1b12      	subs	r2, r2, r4
    lv_coord_t py = p->y - cy;
 80130aa:	1b00      	subs	r0, r0, r4
    uint32_t dist = (px * px) + (py * py);
 80130ac:	fb10 f000 	smulbb	r0, r0, r0
 80130b0:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 80130b4:	4293      	cmp	r3, r2
 80130b6:	bf34      	ite	cc
 80130b8:	2000      	movcc	r0, #0
 80130ba:	2001      	movcs	r0, #1
 80130bc:	bd30      	pop	{r4, r5, pc}

080130be <lv_area_set>:
    area_p->x2 = x2;
 80130be:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80130c0:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 80130c4:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80130c6:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 80130c8:	80c3      	strh	r3, [r0, #6]
}
 80130ca:	4770      	bx	lr

080130cc <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 80130cc:	3901      	subs	r1, #1
 80130ce:	8843      	ldrh	r3, [r0, #2]
 80130d0:	4419      	add	r1, r3
 80130d2:	80c1      	strh	r1, [r0, #6]
}
 80130d4:	4770      	bx	lr

080130d6 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80130d6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80130da:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80130de:	1ad2      	subs	r2, r2, r3
 80130e0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80130e4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80130e8:	1a18      	subs	r0, r3, r0
 80130ea:	3001      	adds	r0, #1
}
 80130ec:	fb02 0000 	mla	r0, r2, r0, r0
 80130f0:	4770      	bx	lr

080130f2 <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 80130f2:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 80130f6:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 80130f8:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 80130fc:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013100:	429d      	cmp	r5, r3
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013102:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013106:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801310a:	bfb8      	it	lt
 801310c:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801310e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013112:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013114:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013116:	bfb8      	it	lt
 8013118:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801311a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801311e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013122:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013124:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013126:	bfa8      	it	ge
 8013128:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801312a:	428a      	cmp	r2, r1
 801312c:	bfa8      	it	ge
 801312e:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013130:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013132:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013134:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013136:	dc04      	bgt.n	8013142 <_lv_area_intersect+0x50>
 8013138:	4293      	cmp	r3, r2
 801313a:	bfcc      	ite	gt
 801313c:	2000      	movgt	r0, #0
 801313e:	2001      	movle	r0, #1
}
 8013140:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 8013142:	2000      	movs	r0, #0
 8013144:	e7fc      	b.n	8013140 <_lv_area_intersect+0x4e>

08013146 <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013146:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 801314a:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801314c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013150:	42a3      	cmp	r3, r4
 8013152:	bfa8      	it	ge
 8013154:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013156:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801315a:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801315c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013160:	42a3      	cmp	r3, r4
 8013162:	bfa8      	it	ge
 8013164:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013166:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801316a:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 801316c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8013170:	42a3      	cmp	r3, r4
 8013172:	bfb8      	it	lt
 8013174:	4623      	movlt	r3, r4
 8013176:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013178:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801317c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8013180:	4293      	cmp	r3, r2
 8013182:	bfb8      	it	lt
 8013184:	4613      	movlt	r3, r2
 8013186:	80c3      	strh	r3, [r0, #6]
}
 8013188:	bd10      	pop	{r4, pc}

0801318a <_lv_area_is_point_on>:
{
 801318a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801318e:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8013192:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8013194:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 8013198:	4689      	mov	r9, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801319a:	42a3      	cmp	r3, r4
 801319c:	f2c0 8086 	blt.w	80132ac <_lv_area_is_point_on+0x122>
 80131a0:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 80131a4:	455b      	cmp	r3, fp
 80131a6:	f300 8081 	bgt.w	80132ac <_lv_area_is_point_on+0x122>
 80131aa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80131ae:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80131b2:	4555      	cmp	r5, sl
 80131b4:	db7a      	blt.n	80132ac <_lv_area_is_point_on+0x122>
 80131b6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80131ba:	429d      	cmp	r5, r3
 80131bc:	dc76      	bgt.n	80132ac <_lv_area_is_point_on+0x122>
    if(radius <= 0) {
 80131be:	2a00      	cmp	r2, #0
 80131c0:	dc03      	bgt.n	80131ca <_lv_area_is_point_on+0x40>
        return true;
 80131c2:	2001      	movs	r0, #1
}
 80131c4:	b005      	add	sp, #20
 80131c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80131ca:	b29e      	uxth	r6, r3
    corner_area.x1 = a_p->x1;
 80131cc:	f8ad 4008 	strh.w	r4, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80131d0:	fa1f f58b 	uxth.w	r5, fp
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80131d4:	f04f 0e02 	mov.w	lr, #2
 80131d8:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80131da:	f106 0c01 	add.w	ip, r6, #1
 80131de:	fa1f f88a 	uxth.w	r8, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80131e2:	1c6c      	adds	r4, r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80131e4:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80131e6:	1be4      	subs	r4, r4, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80131e8:	ebac 0c08 	sub.w	ip, ip, r8
    corner_area.y1 = a_p->y1;
 80131ec:	f8ad a00a 	strh.w	sl, [sp, #10]
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80131f0:	b220      	sxth	r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80131f2:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 80131f6:	fb90 f4fe 	sdiv	r4, r0, lr
 80131fa:	fb9c f0fe 	sdiv	r0, ip, lr
    corner_area.x2 = a_p->x1 + radius;
 80131fe:	4284      	cmp	r4, r0
 8013200:	bfa8      	it	ge
 8013202:	4604      	movge	r4, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013204:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x1 + radius;
 8013206:	42a2      	cmp	r2, r4
 8013208:	bfa8      	it	ge
 801320a:	4622      	movge	r2, r4
 801320c:	b294      	uxth	r4, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801320e:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 8013210:	44a0      	add	r8, r4
    corner_area.x2 = a_p->x1 + radius;
 8013212:	4427      	add	r7, r4
    corner_area.y2 = a_p->y1 + radius;
 8013214:	fa1f f888 	uxth.w	r8, r8
    corner_area.x2 = a_p->x1 + radius;
 8013218:	b2bf      	uxth	r7, r7
    corner_area.y2 = a_p->y1 + radius;
 801321a:	fa0f f388 	sxth.w	r3, r8
    corner_area.x2 = a_p->x1 + radius;
 801321e:	f8ad 700c 	strh.w	r7, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013228:	f7ff ffaf 	bl	801318a <_lv_area_is_point_on>
 801322c:	9b01      	ldr	r3, [sp, #4]
 801322e:	4602      	mov	r2, r0
 8013230:	b130      	cbz	r0, 8013240 <_lv_area_is_point_on+0xb6>
        corner_area.x2 += radius;
 8013232:	4427      	add	r7, r4
 8013234:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y2 += radius;
 8013238:	4444      	add	r4, r8
 801323a:	f8ad 400e 	strh.w	r4, [sp, #14]
 801323e:	e011      	b.n	8013264 <_lv_area_is_point_on+0xda>
    corner_area.y1 = a_p->y2 - radius;
 8013240:	1b36      	subs	r6, r6, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013242:	4649      	mov	r1, r9
 8013244:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y2;
 8013246:	f8ad 300e 	strh.w	r3, [sp, #14]
    corner_area.y1 = a_p->y2 - radius;
 801324a:	b2b6      	uxth	r6, r6
 801324c:	f8ad 600a 	strh.w	r6, [sp, #10]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013250:	f7ff ff9b 	bl	801318a <_lv_area_is_point_on>
 8013254:	4602      	mov	r2, r0
 8013256:	b150      	cbz	r0, 801326e <_lv_area_is_point_on+0xe4>
        corner_area.x2 += radius;
 8013258:	4427      	add	r7, r4
 801325a:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y1 -= radius;
 801325e:	1b34      	subs	r4, r6, r4
 8013260:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8013264:	4649      	mov	r1, r9
 8013266:	a802      	add	r0, sp, #8
 8013268:	f7ff ff0e 	bl	8013088 <lv_point_within_circle>
 801326c:	e7aa      	b.n	80131c4 <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 801326e:	1b2d      	subs	r5, r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013270:	4649      	mov	r1, r9
 8013272:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x2;
 8013274:	f8ad b00c 	strh.w	fp, [sp, #12]
    corner_area.x1 = a_p->x2 - radius;
 8013278:	b2ad      	uxth	r5, r5
 801327a:	f8ad 5008 	strh.w	r5, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801327e:	f7ff ff84 	bl	801318a <_lv_area_is_point_on>
 8013282:	4602      	mov	r2, r0
 8013284:	b118      	cbz	r0, 801328e <_lv_area_is_point_on+0x104>
        corner_area.x1 -= radius;
 8013286:	1b2d      	subs	r5, r5, r4
 8013288:	f8ad 5008 	strh.w	r5, [sp, #8]
 801328c:	e7e7      	b.n	801325e <_lv_area_is_point_on+0xd4>
    corner_area.y2 = a_p->y1 + radius;
 801328e:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8013290:	4649      	mov	r1, r9
 8013292:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 8013294:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8013298:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801329c:	f7ff ff75 	bl	801318a <_lv_area_is_point_on>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d08e      	beq.n	80131c2 <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 80132a4:	1b2d      	subs	r5, r5, r4
 80132a6:	f8ad 5008 	strh.w	r5, [sp, #8]
 80132aa:	e7c5      	b.n	8013238 <_lv_area_is_point_on+0xae>
        return false;
 80132ac:	2000      	movs	r0, #0
 80132ae:	e789      	b.n	80131c4 <_lv_area_is_point_on+0x3a>

080132b0 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 80132b0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80132b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	dc14      	bgt.n	80132e6 <_lv_area_is_on+0x36>
 80132bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80132c0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	db0e      	blt.n	80132e6 <_lv_area_is_on+0x36>
 80132c8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80132cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	dc08      	bgt.n	80132e6 <_lv_area_is_on+0x36>
 80132d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80132d8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80132dc:	4298      	cmp	r0, r3
 80132de:	bfb4      	ite	lt
 80132e0:	2000      	movlt	r0, #0
 80132e2:	2001      	movge	r0, #1
 80132e4:	4770      	bx	lr
        return false;
 80132e6:	2000      	movs	r0, #0
}
 80132e8:	4770      	bx	lr

080132ea <_lv_area_is_in>:
{
 80132ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80132ee:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 80132f2:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80132f4:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 80132f8:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80132fa:	42bb      	cmp	r3, r7
 80132fc:	dd03      	ble.n	8013306 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 80132fe:	2000      	movs	r0, #0
}
 8013300:	b002      	add	sp, #8
 8013302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8013306:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801330a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801330e:	4299      	cmp	r1, r3
 8013310:	dcf5      	bgt.n	80132fe <_lv_area_is_in+0x14>
 8013312:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8013316:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801331a:	42b1      	cmp	r1, r6
 801331c:	dbef      	blt.n	80132fe <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 801331e:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8013322:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013326:	4541      	cmp	r1, r8
 8013328:	dbe9      	blt.n	80132fe <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 801332a:	b32a      	cbz	r2, 8013378 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801332c:	a901      	add	r1, sp, #4
 801332e:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8013330:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 8013334:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013338:	f7ff ff27 	bl	801318a <_lv_area_is_point_on>
 801333c:	2800      	cmp	r0, #0
 801333e:	d0de      	beq.n	80132fe <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013340:	462a      	mov	r2, r5
 8013342:	a901      	add	r1, sp, #4
 8013344:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8013346:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801334a:	f7ff ff1e 	bl	801318a <_lv_area_is_point_on>
 801334e:	2800      	cmp	r0, #0
 8013350:	d0d5      	beq.n	80132fe <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013352:	462a      	mov	r2, r5
 8013354:	a901      	add	r1, sp, #4
 8013356:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8013358:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 801335c:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013360:	f7ff ff13 	bl	801318a <_lv_area_is_point_on>
 8013364:	2800      	cmp	r0, #0
 8013366:	d0ca      	beq.n	80132fe <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013368:	462a      	mov	r2, r5
 801336a:	a901      	add	r1, sp, #4
 801336c:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 801336e:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8013372:	f7ff ff0a 	bl	801318a <_lv_area_is_point_on>
 8013376:	e7c3      	b.n	8013300 <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8013378:	2001      	movs	r0, #1
 801337a:	e7c1      	b.n	8013300 <_lv_area_is_in+0x16>

0801337c <_lv_area_align>:
{
 801337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801337e:	8804      	ldrh	r4, [r0, #0]
    switch(align) {
 8013380:	2a14      	cmp	r2, #20
 8013382:	d839      	bhi.n	80133f8 <_lv_area_align+0x7c>
 8013384:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013388:	00350015 	.word	0x00350015
 801338c:	00520040 	.word	0x00520040
 8013390:	00610059 	.word	0x00610059
 8013394:	00780071 	.word	0x00780071
 8013398:	00880081 	.word	0x00880081
 801339c:	009f008f 	.word	0x009f008f
 80133a0:	00ac00a6 	.word	0x00ac00a6
 80133a4:	00c300bc 	.word	0x00c300bc
 80133a8:	00cd00c8 	.word	0x00cd00c8
 80133ac:	00d500d2 	.word	0x00d500d2
 80133b0:	00d8      	.short	0x00d8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80133b2:	8885      	ldrh	r5, [r0, #4]
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 80133b4:	2602      	movs	r6, #2
 80133b6:	888a      	ldrh	r2, [r1, #4]
 80133b8:	880f      	ldrh	r7, [r1, #0]
 80133ba:	3501      	adds	r5, #1
 80133bc:	3201      	adds	r2, #1
 80133be:	1b2d      	subs	r5, r5, r4
 80133c0:	1bd2      	subs	r2, r2, r7
 80133c2:	b22d      	sxth	r5, r5
 80133c4:	b212      	sxth	r2, r2
 80133c6:	fb95 f5f6 	sdiv	r5, r5, r6
 80133ca:	fb92 f2f6 	sdiv	r2, r2, r6
 80133ce:	1aad      	subs	r5, r5, r2
 80133d0:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80133d2:	88c2      	ldrh	r2, [r0, #6]
 80133d4:	8845      	ldrh	r5, [r0, #2]
 80133d6:	3201      	adds	r2, #1
 80133d8:	1b52      	subs	r2, r2, r5
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 80133da:	b212      	sxth	r2, r2
 80133dc:	88cd      	ldrh	r5, [r1, #6]
 80133de:	8849      	ldrh	r1, [r1, #2]
 80133e0:	3501      	adds	r5, #1
 80133e2:	1a69      	subs	r1, r5, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 80133e4:	b209      	sxth	r1, r1
 80133e6:	fb92 f2f6 	sdiv	r2, r2, r6
 80133ea:	fb91 f1f6 	sdiv	r1, r1, r6
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 80133ee:	1a52      	subs	r2, r2, r1
 80133f0:	e001      	b.n	80133f6 <_lv_area_align+0x7a>
            res->x = 0;
 80133f2:	2200      	movs	r2, #0
 80133f4:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 80133f6:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
 80133f8:	881a      	ldrh	r2, [r3, #0]
    res->y += base->y1;
 80133fa:	8841      	ldrh	r1, [r0, #2]
    res->x += base->x1;
 80133fc:	4414      	add	r4, r2
    res->y += base->y1;
 80133fe:	885a      	ldrh	r2, [r3, #2]
 8013400:	440a      	add	r2, r1
    res->x += base->x1;
 8013402:	801c      	strh	r4, [r3, #0]
    res->y += base->y1;
 8013404:	805a      	strh	r2, [r3, #2]
}
 8013406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013408:	888d      	ldrh	r5, [r1, #4]
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801340a:	2602      	movs	r6, #2
 801340c:	8882      	ldrh	r2, [r0, #4]
 801340e:	3501      	adds	r5, #1
 8013410:	8809      	ldrh	r1, [r1, #0]
 8013412:	3201      	adds	r2, #1
 8013414:	1a69      	subs	r1, r5, r1
 8013416:	1b12      	subs	r2, r2, r4
 8013418:	b209      	sxth	r1, r1
 801341a:	b212      	sxth	r2, r2
 801341c:	fb91 f1f6 	sdiv	r1, r1, r6
 8013420:	fb92 f2f6 	sdiv	r2, r2, r6
 8013424:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
 8013426:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 8013428:	2200      	movs	r2, #0
 801342a:	e7e4      	b.n	80133f6 <_lv_area_align+0x7a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801342c:	880a      	ldrh	r2, [r1, #0]
 801342e:	8889      	ldrh	r1, [r1, #4]
 8013430:	1a52      	subs	r2, r2, r1
 8013432:	8881      	ldrh	r1, [r0, #4]
 8013434:	440a      	add	r2, r1
 8013436:	1b12      	subs	r2, r2, r4
 8013438:	e7f5      	b.n	8013426 <_lv_area_align+0xaa>
            res->x = 0;
 801343a:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 801343c:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801343e:	884a      	ldrh	r2, [r1, #2]
 8013440:	88c9      	ldrh	r1, [r1, #6]
 8013442:	1a52      	subs	r2, r2, r1
 8013444:	88c1      	ldrh	r1, [r0, #6]
 8013446:	440a      	add	r2, r1
 8013448:	e048      	b.n	80134dc <_lv_area_align+0x160>
 801344a:	8882      	ldrh	r2, [r0, #4]
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801344c:	2602      	movs	r6, #2
 801344e:	888d      	ldrh	r5, [r1, #4]
 8013450:	3201      	adds	r2, #1
 8013452:	880f      	ldrh	r7, [r1, #0]
 8013454:	3501      	adds	r5, #1
 8013456:	1b12      	subs	r2, r2, r4
 8013458:	1bed      	subs	r5, r5, r7
 801345a:	b212      	sxth	r2, r2
 801345c:	b22d      	sxth	r5, r5
 801345e:	fb92 f2f6 	sdiv	r2, r2, r6
 8013462:	fb95 f5f6 	sdiv	r5, r5, r6
 8013466:	1b52      	subs	r2, r2, r5
 8013468:	e7e8      	b.n	801343c <_lv_area_align+0xc0>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801346a:	888d      	ldrh	r5, [r1, #4]
 801346c:	880a      	ldrh	r2, [r1, #0]
 801346e:	1b52      	subs	r2, r2, r5
 8013470:	8885      	ldrh	r5, [r0, #4]
 8013472:	442a      	add	r2, r5
 8013474:	1b12      	subs	r2, r2, r4
 8013476:	e7e1      	b.n	801343c <_lv_area_align+0xc0>
            res->x = 0;
 8013478:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 801347a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801347c:	2602      	movs	r6, #2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801347e:	88c2      	ldrh	r2, [r0, #6]
 8013480:	8845      	ldrh	r5, [r0, #2]
 8013482:	3201      	adds	r2, #1
 8013484:	1b52      	subs	r2, r2, r5
 8013486:	b212      	sxth	r2, r2
 8013488:	e7a8      	b.n	80133dc <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801348a:	888d      	ldrh	r5, [r1, #4]
 801348c:	880a      	ldrh	r2, [r1, #0]
 801348e:	1b52      	subs	r2, r2, r5
 8013490:	8885      	ldrh	r5, [r0, #4]
 8013492:	442a      	add	r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013494:	1b12      	subs	r2, r2, r4
 8013496:	e7f0      	b.n	801347a <_lv_area_align+0xfe>
            res->x = 0;
 8013498:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801349a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801349c:	88ca      	ldrh	r2, [r1, #6]
 801349e:	8849      	ldrh	r1, [r1, #2]
 80134a0:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
 80134a2:	43d2      	mvns	r2, r2
 80134a4:	e7a7      	b.n	80133f6 <_lv_area_align+0x7a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80134a6:	8882      	ldrh	r2, [r0, #4]
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 80134a8:	2602      	movs	r6, #2
 80134aa:	888d      	ldrh	r5, [r1, #4]
 80134ac:	3201      	adds	r2, #1
 80134ae:	880f      	ldrh	r7, [r1, #0]
 80134b0:	3501      	adds	r5, #1
 80134b2:	1b12      	subs	r2, r2, r4
 80134b4:	1bed      	subs	r5, r5, r7
 80134b6:	b212      	sxth	r2, r2
 80134b8:	b22d      	sxth	r5, r5
 80134ba:	fb92 f2f6 	sdiv	r2, r2, r6
 80134be:	fb95 f5f6 	sdiv	r5, r5, r6
 80134c2:	1b52      	subs	r2, r2, r5
 80134c4:	e7e9      	b.n	801349a <_lv_area_align+0x11e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 80134c6:	888d      	ldrh	r5, [r1, #4]
 80134c8:	880a      	ldrh	r2, [r1, #0]
 80134ca:	1b52      	subs	r2, r2, r5
 80134cc:	8885      	ldrh	r5, [r0, #4]
 80134ce:	442a      	add	r2, r5
 80134d0:	1b12      	subs	r2, r2, r4
 80134d2:	e7e2      	b.n	801349a <_lv_area_align+0x11e>
            res->x = 0;
 80134d4:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 80134d6:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80134d8:	88c2      	ldrh	r2, [r0, #6]
 80134da:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 80134dc:	8841      	ldrh	r1, [r0, #2]
 80134de:	e786      	b.n	80133ee <_lv_area_align+0x72>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80134e0:	888d      	ldrh	r5, [r1, #4]
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 80134e2:	2602      	movs	r6, #2
 80134e4:	8882      	ldrh	r2, [r0, #4]
 80134e6:	3501      	adds	r5, #1
 80134e8:	8809      	ldrh	r1, [r1, #0]
 80134ea:	3201      	adds	r2, #1
 80134ec:	1a69      	subs	r1, r5, r1
 80134ee:	1b12      	subs	r2, r2, r4
 80134f0:	b209      	sxth	r1, r1
 80134f2:	b212      	sxth	r2, r2
 80134f4:	fb91 f1f6 	sdiv	r1, r1, r6
 80134f8:	fb92 f2f6 	sdiv	r2, r2, r6
 80134fc:	1a52      	subs	r2, r2, r1
 80134fe:	e7ea      	b.n	80134d6 <_lv_area_align+0x15a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 8013500:	880a      	ldrh	r2, [r1, #0]
 8013502:	8889      	ldrh	r1, [r1, #4]
 8013504:	1a52      	subs	r2, r2, r1
 8013506:	8881      	ldrh	r1, [r0, #4]
 8013508:	440a      	add	r2, r1
 801350a:	1b12      	subs	r2, r2, r4
 801350c:	e7e3      	b.n	80134d6 <_lv_area_align+0x15a>
 801350e:	888a      	ldrh	r2, [r1, #4]
 8013510:	8809      	ldrh	r1, [r1, #0]
 8013512:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
 8013514:	43d2      	mvns	r2, r2
 8013516:	e786      	b.n	8013426 <_lv_area_align+0xaa>
 8013518:	888a      	ldrh	r2, [r1, #4]
 801351a:	880d      	ldrh	r5, [r1, #0]
 801351c:	1b52      	subs	r2, r2, r5
            res->x = -lv_area_get_width(to_align);
 801351e:	43d2      	mvns	r2, r2
 8013520:	e7ab      	b.n	801347a <_lv_area_align+0xfe>
 8013522:	888a      	ldrh	r2, [r1, #4]
 8013524:	880d      	ldrh	r5, [r1, #0]
 8013526:	1b52      	subs	r2, r2, r5
            res->x = -lv_area_get_width(to_align);
 8013528:	43d2      	mvns	r2, r2
 801352a:	e787      	b.n	801343c <_lv_area_align+0xc0>
 801352c:	8882      	ldrh	r2, [r0, #4]
 801352e:	3201      	adds	r2, #1
 8013530:	e781      	b.n	8013436 <_lv_area_align+0xba>
 8013532:	8882      	ldrh	r2, [r0, #4]
 8013534:	3201      	adds	r2, #1
 8013536:	e7ad      	b.n	8013494 <_lv_area_align+0x118>
 8013538:	8882      	ldrh	r2, [r0, #4]
 801353a:	3201      	adds	r2, #1
 801353c:	e79a      	b.n	8013474 <_lv_area_align+0xf8>

0801353e <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801353e:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8013540:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 8013544:	f3c1 24c4 	ubfx	r4, r1, #11, #5
 8013548:	f3c0 23c4 	ubfx	r3, r0, #11, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801354c:	f3c1 1745 	ubfx	r7, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8013550:	4374      	muls	r4, r6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013552:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8013556:	4377      	muls	r7, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8013558:	f248 0581 	movw	r5, #32897	; 0x8081
 801355c:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8013560:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013564:	434e      	muls	r6, r1
 8013566:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801356a:	fb04 7402 	mla	r4, r4, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801356e:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013570:	fb00 6202 	mla	r2, r0, r2, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8013574:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8013578:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801357a:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801357c:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801357e:	436c      	muls	r4, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8013580:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8013584:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8013586:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801358a:	0dd2      	lsrs	r2, r2, #23
    return ret;
 801358c:	f362 0004 	bfi	r0, r2, #0, #5
 8013590:	f364 104a 	bfi	r0, r4, #5, #6
 8013594:	f363 20cf 	bfi	r0, r3, #11, #5
}
 8013598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801359a <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 801359a:	0783      	lsls	r3, r0, #30
{
 801359c:	b510      	push	{r4, lr}
 801359e:	b28c      	uxth	r4, r1
        *buf = color;
        buf++;
        px_num--;
 80135a0:	bf1c      	itt	ne
 80135a2:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
        *buf = color;
 80135a6:	f820 1b02 	strhne.w	r1, [r0], #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 80135aa:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 80135ae:	2a10      	cmp	r2, #16
 80135b0:	4601      	mov	r1, r0
 80135b2:	f100 0020 	add.w	r0, r0, #32
 80135b6:	d804      	bhi.n	80135c2 <lv_color_fill+0x28>
 80135b8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 80135bc:	4291      	cmp	r1, r2
 80135be:	d10a      	bne.n	80135d6 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 80135c0:	bd10      	pop	{r4, pc}
        *buf32 = c32;
 80135c2:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 80135c6:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 80135ca:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 80135ce:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 80135d2:	3a10      	subs	r2, #16
 80135d4:	e7eb      	b.n	80135ae <lv_color_fill+0x14>
        *buf = color;
 80135d6:	f821 4b02 	strh.w	r4, [r1], #2
 80135da:	e7ef      	b.n	80135bc <lv_color_fill+0x22>

080135dc <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
 80135dc:	4b02      	ldr	r3, [pc, #8]	; (80135e8 <lv_color_lighten+0xc>)
 80135de:	460a      	mov	r2, r1
 80135e0:	4601      	mov	r1, r0
 80135e2:	8818      	ldrh	r0, [r3, #0]
 80135e4:	f7ff bfab 	b.w	801353e <lv_color_mix>
 80135e8:	08022930 	.word	0x08022930

080135ec <lv_color_darken>:
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 80135ec:	460a      	mov	r2, r1
 80135ee:	4601      	mov	r1, r0
 80135f0:	f04f 0000 	mov.w	r0, #0
 80135f4:	f7ff bfa3 	b.w	801353e <lv_color_mix>

080135f8 <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
 80135f8:	3000      	adds	r0, #0
 80135fa:	bf18      	it	ne
 80135fc:	2001      	movne	r0, #1
 80135fe:	4770      	bx	lr

08013600 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 8013600:	b510      	push	{r4, lr}
 8013602:	b0c0      	sub	sp, #256	; 0x100
 8013604:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 8013606:	f7ec fe0d 	bl	8000224 <strlen>
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
 801360a:	28e5      	cmp	r0, #229	; 0xe5
    size_t msg_len = strlen(msg);
 801360c:	4602      	mov	r2, r0
    if(msg_len < 230) {
 801360e:	d803      	bhi.n	8013618 <lv_debug_log_error+0x18>
        char buf[255];
        char * bufp = buf;

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
 8013610:	4621      	mov	r1, r4
 8013612:	4668      	mov	r0, sp
 8013614:	f000 fb70 	bl	8013cf8 <_lv_memcpy>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 8013618:	b040      	add	sp, #256	; 0x100
 801361a:	bd10      	pop	{r4, pc}

0801361c <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 801361c:	1c42      	adds	r2, r0, #1
 801361e:	4610      	mov	r0, r2

    while(*path != '\0') {
 8013620:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013624:	b12b      	cbz	r3, 8013632 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8013626:	2b3a      	cmp	r3, #58	; 0x3a
 8013628:	d0f9      	beq.n	801361e <lv_fs_get_real_path+0x2>
 801362a:	2b5c      	cmp	r3, #92	; 0x5c
 801362c:	d0f7      	beq.n	801361e <lv_fs_get_real_path+0x2>
 801362e:	2b2f      	cmp	r3, #47	; 0x2f
 8013630:	d0f5      	beq.n	801361e <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 8013632:	4770      	bx	lr

08013634 <_lv_fs_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 8013634:	2144      	movs	r1, #68	; 0x44
 8013636:	4801      	ldr	r0, [pc, #4]	; (801363c <_lv_fs_init+0x8>)
 8013638:	f000 b8cd 	b.w	80137d6 <_lv_ll_init>
 801363c:	20028c94 	.word	0x20028c94

08013640 <lv_fs_close>:
{
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8013644:	6840      	ldr	r0, [r0, #4]
 8013646:	b160      	cbz	r0, 8013662 <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 8013648:	6903      	ldr	r3, [r0, #16]
 801364a:	b163      	cbz	r3, 8013666 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801364c:	6821      	ldr	r1, [r4, #0]
 801364e:	4798      	blx	r3
 8013650:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 8013652:	6820      	ldr	r0, [r4, #0]
 8013654:	f000 fac6 	bl	8013be4 <lv_mem_free>
    file_p->file_d = NULL;
 8013658:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 801365a:	e9c4 3300 	strd	r3, r3, [r4]
}
 801365e:	4628      	mov	r0, r5
 8013660:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8013662:	250b      	movs	r5, #11
 8013664:	e7fb      	b.n	801365e <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 8013666:	2509      	movs	r5, #9
 8013668:	e7f9      	b.n	801365e <lv_fs_close+0x1e>

0801366a <lv_fs_read>:
{
 801366a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801366c:	4606      	mov	r6, r0
 801366e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 8013670:	461c      	mov	r4, r3
 8013672:	b10b      	cbz	r3, 8013678 <lv_fs_read+0xe>
 8013674:	2300      	movs	r3, #0
 8013676:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8013678:	6870      	ldr	r0, [r6, #4]
 801367a:	b178      	cbz	r0, 801369c <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801367c:	6985      	ldr	r5, [r0, #24]
 801367e:	b17d      	cbz	r5, 80136a0 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 8013680:	ab04      	add	r3, sp, #16
 8013682:	2700      	movs	r7, #0
 8013684:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8013688:	9300      	str	r3, [sp, #0]
 801368a:	4613      	mov	r3, r2
 801368c:	460a      	mov	r2, r1
 801368e:	6831      	ldr	r1, [r6, #0]
 8013690:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 8013692:	b10c      	cbz	r4, 8013698 <lv_fs_read+0x2e>
 8013694:	9b03      	ldr	r3, [sp, #12]
 8013696:	6023      	str	r3, [r4, #0]
}
 8013698:	b005      	add	sp, #20
 801369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801369c:	200b      	movs	r0, #11
 801369e:	e7fb      	b.n	8013698 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 80136a0:	2009      	movs	r0, #9
 80136a2:	e7f9      	b.n	8013698 <lv_fs_read+0x2e>

080136a4 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 80136a4:	6843      	ldr	r3, [r0, #4]
{
 80136a6:	460a      	mov	r2, r1
 80136a8:	b410      	push	{r4}
    if(file_p->drv == NULL) {
 80136aa:	b13b      	cbz	r3, 80136bc <lv_fs_seek+0x18>
    if(file_p->drv->seek_cb == NULL) {
 80136ac:	6a1c      	ldr	r4, [r3, #32]
 80136ae:	b14c      	cbz	r4, 80136c4 <lv_fs_seek+0x20>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 80136b0:	6801      	ldr	r1, [r0, #0]
 80136b2:	4618      	mov	r0, r3
 80136b4:	4623      	mov	r3, r4
}
 80136b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 80136ba:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 80136bc:	200b      	movs	r0, #11
}
 80136be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136c2:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 80136c4:	2009      	movs	r0, #9
 80136c6:	e7fa      	b.n	80136be <lv_fs_seek+0x1a>

080136c8 <lv_fs_get_drv>:
{
 80136c8:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 80136ca:	4d07      	ldr	r5, [pc, #28]	; (80136e8 <lv_fs_get_drv+0x20>)
{
 80136cc:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 80136ce:	4806      	ldr	r0, [pc, #24]	; (80136e8 <lv_fs_get_drv+0x20>)
 80136d0:	f000 f8c0 	bl	8013854 <_lv_ll_get_head>
 80136d4:	b900      	cbnz	r0, 80136d8 <lv_fs_get_drv+0x10>
}
 80136d6:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 80136d8:	7803      	ldrb	r3, [r0, #0]
 80136da:	42a3      	cmp	r3, r4
 80136dc:	d0fb      	beq.n	80136d6 <lv_fs_get_drv+0xe>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 80136de:	4601      	mov	r1, r0
 80136e0:	4628      	mov	r0, r5
 80136e2:	f000 f8bd 	bl	8013860 <_lv_ll_get_next>
 80136e6:	e7f5      	b.n	80136d4 <lv_fs_get_drv+0xc>
 80136e8:	20028c94 	.word	0x20028c94

080136ec <lv_fs_open>:
    file_p->drv    = NULL;
 80136ec:	2300      	movs	r3, #0
{
 80136ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f2:	4604      	mov	r4, r0
 80136f4:	4690      	mov	r8, r2
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80136f6:	460f      	mov	r7, r1
    file_p->file_d = NULL;
 80136f8:	e9c0 3300 	strd	r3, r3, [r0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80136fc:	2900      	cmp	r1, #0
 80136fe:	d042      	beq.n	8013786 <lv_fs_open+0x9a>
    file_p->drv = lv_fs_get_drv(letter);
 8013700:	7808      	ldrb	r0, [r1, #0]
 8013702:	f7ff ffe1 	bl	80136c8 <lv_fs_get_drv>
 8013706:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 8013708:	2800      	cmp	r0, #0
 801370a:	d03e      	beq.n	801378a <lv_fs_open+0x9e>
    if(file_p->drv->ready_cb != NULL) {
 801370c:	6883      	ldr	r3, [r0, #8]
 801370e:	b133      	cbz	r3, 801371e <lv_fs_open+0x32>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 8013710:	4798      	blx	r3
 8013712:	b920      	cbnz	r0, 801371e <lv_fs_open+0x32>
            return LV_FS_RES_HW_ERR;
 8013714:	2501      	movs	r5, #1
            file_p->drv = NULL;
 8013716:	6060      	str	r0, [r4, #4]
}
 8013718:	4628      	mov	r0, r5
 801371a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->open_cb == NULL) {
 801371e:	6866      	ldr	r6, [r4, #4]
 8013720:	68f5      	ldr	r5, [r6, #12]
 8013722:	b915      	cbnz	r5, 801372a <lv_fs_open+0x3e>
        file_p->drv = NULL;
 8013724:	6065      	str	r5, [r4, #4]
        return LV_FS_RES_NOT_IMP;
 8013726:	2509      	movs	r5, #9
 8013728:	e7f6      	b.n	8013718 <lv_fs_open+0x2c>
    const char * real_path = lv_fs_get_real_path(path);
 801372a:	4638      	mov	r0, r7
 801372c:	f7ff ff76 	bl	801361c <lv_fs_get_real_path>
 8013730:	4607      	mov	r7, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
 8013732:	8870      	ldrh	r0, [r6, #2]
 8013734:	b938      	cbnz	r0, 8013746 <lv_fs_open+0x5a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 8013736:	4643      	mov	r3, r8
 8013738:	463a      	mov	r2, r7
 801373a:	4621      	mov	r1, r4
 801373c:	4630      	mov	r0, r6
 801373e:	46ac      	mov	ip, r5
}
 8013740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 8013744:	4760      	bx	ip
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 8013746:	f000 f9ff 	bl	8013b48 <lv_mem_alloc>
 801374a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
 801374c:	f7ff ff54 	bl	80135f8 <lv_debug_check_null>
 8013750:	6821      	ldr	r1, [r4, #0]
 8013752:	4603      	mov	r3, r0
 8013754:	b920      	cbnz	r0, 8013760 <lv_fs_open+0x74>
 8013756:	460a      	mov	r2, r1
 8013758:	480d      	ldr	r0, [pc, #52]	; (8013790 <lv_fs_open+0xa4>)
 801375a:	f7ff ff51 	bl	8013600 <lv_debug_log_error>
 801375e:	e7fe      	b.n	801375e <lv_fs_open+0x72>
    if(file_p->file_d == NULL) {
 8013760:	b911      	cbnz	r1, 8013768 <lv_fs_open+0x7c>
        file_p->drv = NULL;
 8013762:	6061      	str	r1, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 8013764:	250a      	movs	r5, #10
 8013766:	e7d7      	b.n	8013718 <lv_fs_open+0x2c>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 8013768:	6860      	ldr	r0, [r4, #4]
 801376a:	4643      	mov	r3, r8
 801376c:	463a      	mov	r2, r7
 801376e:	68c5      	ldr	r5, [r0, #12]
 8013770:	47a8      	blx	r5
    if(res != LV_FS_RES_OK) {
 8013772:	4605      	mov	r5, r0
 8013774:	2800      	cmp	r0, #0
 8013776:	d0cf      	beq.n	8013718 <lv_fs_open+0x2c>
        lv_mem_free(file_p->file_d);
 8013778:	6820      	ldr	r0, [r4, #0]
 801377a:	f000 fa33 	bl	8013be4 <lv_mem_free>
        file_p->file_d = NULL;
 801377e:	2300      	movs	r3, #0
        file_p->drv    = NULL;
 8013780:	e9c4 3300 	strd	r3, r3, [r4]
 8013784:	e7c8      	b.n	8013718 <lv_fs_open+0x2c>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8013786:	250b      	movs	r5, #11
 8013788:	e7c6      	b.n	8013718 <lv_fs_open+0x2c>
        return LV_FS_RES_NOT_EX;
 801378a:	2503      	movs	r5, #3
 801378c:	e7c4      	b.n	8013718 <lv_fs_open+0x2c>
 801378e:	bf00      	nop
 8013790:	0802c346 	.word	0x0802c346

08013794 <lv_fs_get_ext>:
{
 8013794:	b510      	push	{r4, lr}
 8013796:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8013798:	f7ec fd44 	bl	8000224 <strlen>
 801379c:	4420      	add	r0, r4
 801379e:	42a0      	cmp	r0, r4
 80137a0:	eba0 0304 	sub.w	r3, r0, r4
 80137a4:	d00a      	beq.n	80137bc <lv_fs_get_ext+0x28>
        if(fn[i] == '.') {
 80137a6:	f810 2901 	ldrb.w	r2, [r0], #-1
 80137aa:	2a2e      	cmp	r2, #46	; 0x2e
 80137ac:	d102      	bne.n	80137b4 <lv_fs_get_ext+0x20>
            return &fn[i + 1];
 80137ae:	1c58      	adds	r0, r3, #1
 80137b0:	4420      	add	r0, r4
}
 80137b2:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 80137b4:	2a2f      	cmp	r2, #47	; 0x2f
 80137b6:	d001      	beq.n	80137bc <lv_fs_get_ext+0x28>
 80137b8:	2a5c      	cmp	r2, #92	; 0x5c
 80137ba:	d1f0      	bne.n	801379e <lv_fs_get_ext+0xa>
            return ""; /*No extension if a '\' or '/' found*/
 80137bc:	4800      	ldr	r0, [pc, #0]	; (80137c0 <lv_fs_get_ext+0x2c>)
 80137be:	e7f8      	b.n	80137b2 <lv_fs_get_ext+0x1e>
 80137c0:	0802c40d 	.word	0x0802c40d

080137c4 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 80137c4:	b109      	cbz	r1, 80137ca <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 80137c6:	6803      	ldr	r3, [r0, #0]
 80137c8:	50ca      	str	r2, [r1, r3]
}
 80137ca:	4770      	bx	lr

080137cc <node_set_next.isra.1>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80137cc:	b111      	cbz	r1, 80137d4 <node_set_next.isra.1+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 80137ce:	6803      	ldr	r3, [r0, #0]
 80137d0:	4419      	add	r1, r3
 80137d2:	604a      	str	r2, [r1, #4]
}
 80137d4:	4770      	bx	lr

080137d6 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 80137d6:	3103      	adds	r1, #3
    ll_p->head = NULL;
 80137d8:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 80137da:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 80137de:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 80137e2:	6001      	str	r1, [r0, #0]
}
 80137e4:	4770      	bx	lr

080137e6 <_lv_ll_ins_head>:
{
 80137e6:	b538      	push	{r3, r4, r5, lr}
 80137e8:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80137ea:	6800      	ldr	r0, [r0, #0]
 80137ec:	3008      	adds	r0, #8
 80137ee:	f000 f9ab 	bl	8013b48 <lv_mem_alloc>
    if(n_new != NULL) {
 80137f2:	4605      	mov	r5, r0
 80137f4:	b180      	cbz	r0, 8013818 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 80137f6:	4601      	mov	r1, r0
 80137f8:	2200      	movs	r2, #0
 80137fa:	4620      	mov	r0, r4
 80137fc:	f7ff ffe2 	bl	80137c4 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8013800:	6862      	ldr	r2, [r4, #4]
 8013802:	f7ff ffe3 	bl	80137cc <node_set_next.isra.1>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013806:	6861      	ldr	r1, [r4, #4]
 8013808:	b111      	cbz	r1, 8013810 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801380a:	462a      	mov	r2, r5
 801380c:	f7ff ffda 	bl	80137c4 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8013810:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8013812:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8013814:	b903      	cbnz	r3, 8013818 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 8013816:	60a5      	str	r5, [r4, #8]
}
 8013818:	4628      	mov	r0, r5
 801381a:	bd38      	pop	{r3, r4, r5, pc}

0801381c <_lv_ll_ins_tail>:
{
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8013820:	6800      	ldr	r0, [r0, #0]
 8013822:	3008      	adds	r0, #8
 8013824:	f000 f990 	bl	8013b48 <lv_mem_alloc>
    if(n_new != NULL) {
 8013828:	4605      	mov	r5, r0
 801382a:	b188      	cbz	r0, 8013850 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801382c:	4601      	mov	r1, r0
 801382e:	2200      	movs	r2, #0
 8013830:	4620      	mov	r0, r4
 8013832:	f7ff ffcb 	bl	80137cc <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8013836:	4629      	mov	r1, r5
 8013838:	68a2      	ldr	r2, [r4, #8]
 801383a:	f7ff ffc3 	bl	80137c4 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801383e:	68a1      	ldr	r1, [r4, #8]
 8013840:	b111      	cbz	r1, 8013848 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 8013842:	462a      	mov	r2, r5
 8013844:	f7ff ffc2 	bl	80137cc <node_set_next.isra.1>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8013848:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801384a:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801384c:	b903      	cbnz	r3, 8013850 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 801384e:	6065      	str	r5, [r4, #4]
}
 8013850:	4628      	mov	r0, r5
 8013852:	bd38      	pop	{r3, r4, r5, pc}

08013854 <_lv_ll_get_head>:
    if(ll_p != NULL) {
 8013854:	b100      	cbz	r0, 8013858 <_lv_ll_get_head+0x4>
        head = ll_p->head;
 8013856:	6840      	ldr	r0, [r0, #4]
}
 8013858:	4770      	bx	lr

0801385a <_lv_ll_get_tail>:
    if(ll_p != NULL) {
 801385a:	b100      	cbz	r0, 801385e <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 801385c:	6880      	ldr	r0, [r0, #8]
}
 801385e:	4770      	bx	lr

08013860 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
 8013860:	b110      	cbz	r0, 8013868 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
 8013862:	6803      	ldr	r3, [r0, #0]
 8013864:	4419      	add	r1, r3
 8013866:	6848      	ldr	r0, [r1, #4]
}
 8013868:	4770      	bx	lr

0801386a <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
 801386a:	b108      	cbz	r0, 8013870 <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
 801386c:	6803      	ldr	r3, [r0, #0]
 801386e:	58c8      	ldr	r0, [r1, r3]
}
 8013870:	4770      	bx	lr

08013872 <_lv_ll_ins_prev>:
{
 8013872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013874:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 8013876:	4605      	mov	r5, r0
 8013878:	b328      	cbz	r0, 80138c6 <_lv_ll_ins_prev+0x54>
 801387a:	b331      	cbz	r1, 80138ca <_lv_ll_ins_prev+0x58>
    if(_lv_ll_get_head(ll_p) == n_act) {
 801387c:	6843      	ldr	r3, [r0, #4]
 801387e:	4299      	cmp	r1, r3
 8013880:	d103      	bne.n	801388a <_lv_ll_ins_prev+0x18>
}
 8013882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = _lv_ll_ins_head(ll_p);
 8013886:	f7ff bfae 	b.w	80137e6 <_lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801388a:	6800      	ldr	r0, [r0, #0]
 801388c:	3008      	adds	r0, #8
 801388e:	f000 f95b 	bl	8013b48 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8013892:	4604      	mov	r4, r0
 8013894:	b1a8      	cbz	r0, 80138c2 <_lv_ll_ins_prev+0x50>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 8013896:	4631      	mov	r1, r6
 8013898:	4628      	mov	r0, r5
 801389a:	f7ff ffe6 	bl	801386a <_lv_ll_get_prev>
 801389e:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 80138a0:	4601      	mov	r1, r0
 80138a2:	4622      	mov	r2, r4
 80138a4:	4628      	mov	r0, r5
 80138a6:	f7ff ff91 	bl	80137cc <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, n_prev);
 80138aa:	463a      	mov	r2, r7
 80138ac:	4621      	mov	r1, r4
 80138ae:	f7ff ff89 	bl	80137c4 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
 80138b2:	4622      	mov	r2, r4
 80138b4:	4631      	mov	r1, r6
 80138b6:	f7ff ff85 	bl	80137c4 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
 80138ba:	4632      	mov	r2, r6
 80138bc:	4621      	mov	r1, r4
 80138be:	f7ff ff85 	bl	80137cc <node_set_next.isra.1>
}
 80138c2:	4620      	mov	r0, r4
 80138c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 80138c6:	4604      	mov	r4, r0
 80138c8:	e7fb      	b.n	80138c2 <_lv_ll_ins_prev+0x50>
 80138ca:	460c      	mov	r4, r1
 80138cc:	e7f9      	b.n	80138c2 <_lv_ll_ins_prev+0x50>

080138ce <_lv_ll_remove>:
{
 80138ce:	b570      	push	{r4, r5, r6, lr}
 80138d0:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 80138d2:	4604      	mov	r4, r0
 80138d4:	b308      	cbz	r0, 801391a <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
 80138d6:	6843      	ldr	r3, [r0, #4]
 80138d8:	4299      	cmp	r1, r3
 80138da:	d10e      	bne.n	80138fa <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 80138dc:	4611      	mov	r1, r2
 80138de:	4620      	mov	r0, r4
 80138e0:	f7ff ffbe 	bl	8013860 <_lv_ll_get_next>
 80138e4:	4601      	mov	r1, r0
 80138e6:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 80138e8:	b908      	cbnz	r0, 80138ee <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
 80138ea:	60a0      	str	r0, [r4, #8]
}
 80138ec:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 80138ee:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 80138f0:	4620      	mov	r0, r4
}
 80138f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 80138f6:	f7ff bf65 	b.w	80137c4 <node_set_prev.isra.0>
 80138fa:	f7ff ffb6 	bl	801386a <_lv_ll_get_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	4601      	mov	r1, r0
 8013902:	429a      	cmp	r2, r3
 8013904:	d10b      	bne.n	801391e <_lv_ll_remove+0x50>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8013906:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 8013908:	b908      	cbnz	r0, 801390e <_lv_ll_remove+0x40>
            ll_p->head = NULL;
 801390a:	6060      	str	r0, [r4, #4]
 801390c:	e7ee      	b.n	80138ec <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
 801390e:	4620      	mov	r0, r4
 8013910:	2200      	movs	r2, #0
}
 8013912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8013916:	f7ff bf59 	b.w	80137cc <node_set_next.isra.1>
    if(_lv_ll_get_head(ll_p) == node_p) {
 801391a:	2900      	cmp	r1, #0
 801391c:	d0de      	beq.n	80138dc <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801391e:	4611      	mov	r1, r2
 8013920:	4620      	mov	r0, r4
 8013922:	f7ff ffa2 	bl	801386a <_lv_ll_get_prev>
 8013926:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 8013928:	4620      	mov	r0, r4
 801392a:	f7ff ff99 	bl	8013860 <_lv_ll_get_next>
 801392e:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 8013930:	4602      	mov	r2, r0
 8013932:	4631      	mov	r1, r6
 8013934:	4620      	mov	r0, r4
 8013936:	f7ff ff49 	bl	80137cc <node_set_next.isra.1>
        node_set_prev(ll_p, n_next, n_prev);
 801393a:	4632      	mov	r2, r6
 801393c:	4629      	mov	r1, r5
 801393e:	e7d7      	b.n	80138f0 <_lv_ll_remove+0x22>

08013940 <_lv_ll_chg_list>:
{
 8013940:	b570      	push	{r4, r5, r6, lr}
 8013942:	461e      	mov	r6, r3
 8013944:	460c      	mov	r4, r1
    _lv_ll_remove(ll_ori_p, node);
 8013946:	4611      	mov	r1, r2
{
 8013948:	4615      	mov	r5, r2
    _lv_ll_remove(ll_ori_p, node);
 801394a:	f7ff ffc0 	bl	80138ce <_lv_ll_remove>
    if(head) {
 801394e:	b18e      	cbz	r6, 8013974 <_lv_ll_chg_list+0x34>
        node_set_prev(ll_new_p, node, NULL);
 8013950:	4629      	mov	r1, r5
 8013952:	2200      	movs	r2, #0
 8013954:	4620      	mov	r0, r4
 8013956:	f7ff ff35 	bl	80137c4 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, ll_new_p->head);
 801395a:	6862      	ldr	r2, [r4, #4]
 801395c:	f7ff ff36 	bl	80137cc <node_set_next.isra.1>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8013960:	6861      	ldr	r1, [r4, #4]
 8013962:	b111      	cbz	r1, 801396a <_lv_ll_chg_list+0x2a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 8013964:	462a      	mov	r2, r5
 8013966:	f7ff ff2d 	bl	80137c4 <node_set_prev.isra.0>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801396a:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801396c:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801396e:	b903      	cbnz	r3, 8013972 <_lv_ll_chg_list+0x32>
            ll_new_p->tail = node;
 8013970:	60a5      	str	r5, [r4, #8]
}
 8013972:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8013974:	4629      	mov	r1, r5
 8013976:	68a2      	ldr	r2, [r4, #8]
 8013978:	4620      	mov	r0, r4
 801397a:	f7ff ff23 	bl	80137c4 <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, NULL);
 801397e:	4632      	mov	r2, r6
 8013980:	f7ff ff24 	bl	80137cc <node_set_next.isra.1>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8013984:	68a1      	ldr	r1, [r4, #8]
 8013986:	b111      	cbz	r1, 801398e <_lv_ll_chg_list+0x4e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 8013988:	462a      	mov	r2, r5
 801398a:	f7ff ff1f 	bl	80137cc <node_set_next.isra.1>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 801398e:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8013990:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8013992:	2b00      	cmp	r3, #0
 8013994:	d1ed      	bne.n	8013972 <_lv_ll_chg_list+0x32>
            ll_new_p->head = node;
 8013996:	6065      	str	r5, [r4, #4]
}
 8013998:	e7eb      	b.n	8013972 <_lv_ll_chg_list+0x32>

0801399a <_lv_ll_get_len>:
{
 801399a:	b510      	push	{r4, lr}
    if(ll_p != NULL) {
 801399c:	4604      	mov	r4, r0
 801399e:	b150      	cbz	r0, 80139b6 <_lv_ll_get_len+0x1c>
        head = ll_p->head;
 80139a0:	6841      	ldr	r1, [r0, #4]
 80139a2:	2200      	movs	r2, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 80139a4:	b909      	cbnz	r1, 80139aa <_lv_ll_get_len+0x10>
}
 80139a6:	4610      	mov	r0, r2
 80139a8:	bd10      	pop	{r4, pc}
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 80139aa:	4620      	mov	r0, r4
        len++;
 80139ac:	3201      	adds	r2, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 80139ae:	f7ff ff57 	bl	8013860 <_lv_ll_get_next>
 80139b2:	4601      	mov	r1, r0
 80139b4:	e7f6      	b.n	80139a4 <_lv_ll_get_len+0xa>
    if(ll_p != NULL) {
 80139b6:	4602      	mov	r2, r0
    return len;
 80139b8:	e7f5      	b.n	80139a6 <_lv_ll_get_len+0xc>

080139ba <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 80139ba:	4291      	cmp	r1, r2
{
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	4605      	mov	r5, r0
 80139c0:	460c      	mov	r4, r1
 80139c2:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 80139c4:	d006      	beq.n	80139d4 <_lv_ll_move_before+0x1a>
    if(n_after != NULL)
 80139c6:	b132      	cbz	r2, 80139d6 <_lv_ll_move_before+0x1c>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 80139c8:	4611      	mov	r1, r2
 80139ca:	f7ff ff4e 	bl	801386a <_lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 80139ce:	4284      	cmp	r4, r0
        n_before = _lv_ll_get_prev(ll_p, n_after);
 80139d0:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 80139d2:	d11e      	bne.n	8013a12 <_lv_ll_move_before+0x58>
}
 80139d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 80139d6:	b100      	cbz	r0, 80139da <_lv_ll_move_before+0x20>
        tail = ll_p->tail;
 80139d8:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 80139da:	42a6      	cmp	r6, r4
 80139dc:	d0fa      	beq.n	80139d4 <_lv_ll_move_before+0x1a>
    _lv_ll_remove(ll_p, n_act);
 80139de:	4621      	mov	r1, r4
 80139e0:	4628      	mov	r0, r5
 80139e2:	f7ff ff74 	bl	80138ce <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 80139e6:	4628      	mov	r0, r5
 80139e8:	4622      	mov	r2, r4
 80139ea:	4631      	mov	r1, r6
 80139ec:	f7ff feee 	bl	80137cc <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 80139f0:	4632      	mov	r2, r6
 80139f2:	4621      	mov	r1, r4
 80139f4:	f7ff fee6 	bl	80137c4 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 80139f8:	4622      	mov	r2, r4
 80139fa:	2100      	movs	r1, #0
 80139fc:	f7ff fee2 	bl	80137c4 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 8013a00:	2200      	movs	r2, #0
 8013a02:	4621      	mov	r1, r4
 8013a04:	f7ff fee2 	bl	80137cc <node_set_next.isra.1>
    if(n_after == NULL) ll_p->tail = n_act;
 8013a08:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	d1e2      	bne.n	80139d4 <_lv_ll_move_before+0x1a>
 8013a0e:	606c      	str	r4, [r5, #4]
 8013a10:	e7e0      	b.n	80139d4 <_lv_ll_move_before+0x1a>
    _lv_ll_remove(ll_p, n_act);
 8013a12:	4621      	mov	r1, r4
 8013a14:	4628      	mov	r0, r5
 8013a16:	f7ff ff5a 	bl	80138ce <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	4622      	mov	r2, r4
 8013a1e:	4639      	mov	r1, r7
 8013a20:	f7ff fed4 	bl	80137cc <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 8013a24:	463a      	mov	r2, r7
 8013a26:	4621      	mov	r1, r4
 8013a28:	f7ff fecc 	bl	80137c4 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 8013a2c:	4631      	mov	r1, r6
 8013a2e:	4622      	mov	r2, r4
 8013a30:	f7ff fec8 	bl	80137c4 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 8013a34:	4632      	mov	r2, r6
 8013a36:	4621      	mov	r1, r4
 8013a38:	463e      	mov	r6, r7
 8013a3a:	f7ff fec7 	bl	80137cc <node_set_next.isra.1>
 8013a3e:	e7e4      	b.n	8013a0a <_lv_ll_move_before+0x50>

08013a40 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8013a40:	b130      	cbz	r0, 8013a50 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8013a42:	6843      	ldr	r3, [r0, #4]
 8013a44:	b933      	cbnz	r3, 8013a54 <_lv_ll_is_empty+0x14>
 8013a46:	6880      	ldr	r0, [r0, #8]
 8013a48:	fab0 f080 	clz	r0, r0
 8013a4c:	0940      	lsrs	r0, r0, #5
 8013a4e:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8013a50:	2001      	movs	r0, #1
 8013a52:	4770      	bx	lr
    return false;
 8013a54:	2000      	movs	r0, #0
}
 8013a56:	4770      	bx	lr

08013a58 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8013a58:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8013a5c:	fb90 f2f3 	sdiv	r2, r0, r3
 8013a60:	fb02 0013 	mls	r0, r2, r3, r0
 8013a64:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 8013a66:	2800      	cmp	r0, #0
 8013a68:	bfb8      	it	lt
 8013a6a:	18c0      	addlt	r0, r0, r3
 8013a6c:	4b0f      	ldr	r3, [pc, #60]	; (8013aac <_lv_trigo_sin+0x54>)
 8013a6e:	bfb8      	it	lt
 8013a70:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8013a72:	2859      	cmp	r0, #89	; 0x59
 8013a74:	dc02      	bgt.n	8013a7c <_lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 8013a76:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8013a7a:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 8013a7c:	b280      	uxth	r0, r0
 8013a7e:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 8013a82:	2a59      	cmp	r2, #89	; 0x59
 8013a84:	d803      	bhi.n	8013a8e <_lv_trigo_sin+0x36>
        angle = 180 - angle;
 8013a86:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 8013a8a:	b280      	uxth	r0, r0
 8013a8c:	e7f3      	b.n	8013a76 <_lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 8013a8e:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 8013a92:	b292      	uxth	r2, r2
 8013a94:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8013a96:	bf89      	itett	hi
 8013a98:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 8013a9c:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 8013aa0:	b280      	uxthhi	r0, r0
 8013aa2:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 8013aa6:	4240      	negs	r0, r0
 8013aa8:	b200      	sxth	r0, r0
    }

    return ret;
}
 8013aaa:	4770      	bx	lr
 8013aac:	08022932 	.word	0x08022932

08013ab0 <_lv_sqrt>:
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 8013ab0:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
 8013ab2:	2300      	movs	r3, #0
{
 8013ab4:	b530      	push	{r4, r5, lr}
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 8013ab6:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 8013ab8:	fb04 f504 	mul.w	r5, r4, r4
 8013abc:	4285      	cmp	r5, r0
 8013abe:	bf98      	it	ls
 8013ac0:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
 8013ac2:	0852      	lsrs	r2, r2, #1
 8013ac4:	d1f7      	bne.n	8013ab6 <_lv_sqrt+0x6>

    q->i = root >> 4;
 8013ac6:	091a      	lsrs	r2, r3, #4
    q->f = (root & 0xf) << 4;
 8013ac8:	011b      	lsls	r3, r3, #4
    q->i = root >> 4;
 8013aca:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	804b      	strh	r3, [r1, #2]
}
 8013ad0:	bd30      	pop	{r4, r5, pc}
	...

08013ad4 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 8013ad4:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <ent_get_next+0x20>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 8013ad8:	b150      	cbz	r0, 8013af0 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8013ada:	6801      	ldr	r1, [r0, #0]
        uint8_t * data = &act_e->first_data;
 8013adc:	1d02      	adds	r2, r0, #4

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013ade:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8013ae2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8013ae6:	1d11      	adds	r1, r2, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8013ae8:	4299      	cmp	r1, r3
 8013aea:	bf34      	ite	cc
 8013aec:	4613      	movcc	r3, r2
 8013aee:	2300      	movcs	r3, #0
    }

    return next_e;
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	4770      	bx	lr
 8013af4:	20020890 	.word	0x20020890

08013af8 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 8013af8:	3103      	adds	r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013afa:	6803      	ldr	r3, [r0, #0]
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 8013afc:	f021 0103 	bic.w	r1, r1, #3
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013b00:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8013b04:	1d0a      	adds	r2, r1, #4
 8013b06:	4293      	cmp	r3, r2
{
 8013b08:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8013b0a:	d010      	beq.n	8013b2e <ent_trunc+0x36>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 8013b0c:	428b      	cmp	r3, r1
 8013b0e:	d00e      	beq.n	8013b2e <ent_trunc+0x36>
        uint8_t * e_data             = &e->first_data;
 8013b10:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8013b12:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 8013b14:	5c54      	ldrb	r4, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8013b16:	1a5b      	subs	r3, r3, r1
        after_new_e->header.s.used   = 0;
 8013b18:	f36f 0400 	bfc	r4, #0, #1
 8013b1c:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8013b1e:	5854      	ldr	r4, [r2, r1]
 8013b20:	f363 045f 	bfi	r4, r3, #1, #31
 8013b24:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 8013b26:	6803      	ldr	r3, [r0, #0]
 8013b28:	f361 035f 	bfi	r3, r1, #1, #31
 8013b2c:	6003      	str	r3, [r0, #0]
    }
}
 8013b2e:	bd10      	pop	{r4, pc}

08013b30 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8013b30:	4b03      	ldr	r3, [pc, #12]	; (8013b40 <_lv_mem_init+0x10>)
 8013b32:	4a04      	ldr	r2, [pc, #16]	; (8013b44 <_lv_mem_init+0x14>)
 8013b34:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 8013b36:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8013b3a:	601a      	str	r2, [r3, #0]
}
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	200208a0 	.word	0x200208a0
 8013b44:	20020890 	.word	0x20020890

08013b48 <lv_mem_alloc>:
{
 8013b48:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 8013b4a:	b310      	cbz	r0, 8013b92 <lv_mem_alloc+0x4a>
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 8013b4c:	3003      	adds	r0, #3
    lv_mem_ent_t * e = NULL;
 8013b4e:	2400      	movs	r4, #0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 8013b50:	f020 0503 	bic.w	r5, r0, #3
        e = ent_get_next(e);
 8013b54:	4620      	mov	r0, r4
 8013b56:	f7ff ffbd 	bl	8013ad4 <ent_get_next>
        if(e != NULL) {
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	b1c0      	cbz	r0, 8013b90 <lv_mem_alloc+0x48>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8013b5e:	7803      	ldrb	r3, [r0, #0]
 8013b60:	07db      	lsls	r3, r3, #31
 8013b62:	d4f7      	bmi.n	8013b54 <lv_mem_alloc+0xc>
 8013b64:	6803      	ldr	r3, [r0, #0]
 8013b66:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 8013b6a:	d8f3      	bhi.n	8013b54 <lv_mem_alloc+0xc>
        ent_trunc(e, size);
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	f7ff ffc3 	bl	8013af8 <ent_trunc>
        e->header.s.used = 1;
 8013b72:	7803      	ldrb	r3, [r0, #0]
 8013b74:	f043 0301 	orr.w	r3, r3, #1
 8013b78:	f800 3b04 	strb.w	r3, [r0], #4
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 8013b7c:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <lv_mem_alloc+0x50>)
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	4290      	cmp	r0, r2
 8013b82:	d905      	bls.n	8013b90 <lv_mem_alloc+0x48>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 8013b84:	1aad      	subs	r5, r5, r2
 8013b86:	689a      	ldr	r2, [r3, #8]
 8013b88:	4405      	add	r5, r0
 8013b8a:	4295      	cmp	r5, r2
 8013b8c:	d900      	bls.n	8013b90 <lv_mem_alloc+0x48>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 8013b8e:	609d      	str	r5, [r3, #8]
}
 8013b90:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 8013b92:	4802      	ldr	r0, [pc, #8]	; (8013b9c <lv_mem_alloc+0x54>)
 8013b94:	e7fc      	b.n	8013b90 <lv_mem_alloc+0x48>
 8013b96:	bf00      	nop
 8013b98:	20020890 	.word	0x20020890
 8013b9c:	20020894 	.word	0x20020894

08013ba0 <lv_mem_defrag>:
        next_e = (lv_mem_ent_t *)work_mem;
 8013ba0:	4b0f      	ldr	r3, [pc, #60]	; (8013be0 <lv_mem_defrag+0x40>)
{
 8013ba2:	b510      	push	{r4, lr}
        next_e = (lv_mem_ent_t *)work_mem;
 8013ba4:	681c      	ldr	r4, [r3, #0]
        while(e_free != NULL) {
 8013ba6:	b904      	cbnz	r4, 8013baa <lv_mem_defrag+0xa>
}
 8013ba8:	bd10      	pop	{r4, pc}
 8013baa:	4620      	mov	r0, r4
 8013bac:	f7ff ff92 	bl	8013ad4 <ent_get_next>
            if(e_free->header.s.used != 0) {
 8013bb0:	7823      	ldrb	r3, [r4, #0]
 8013bb2:	07da      	lsls	r2, r3, #31
 8013bb4:	d510      	bpl.n	8013bd8 <lv_mem_defrag+0x38>
{
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	e7f5      	b.n	8013ba6 <lv_mem_defrag+0x6>
            if(e_next->header.s.used == 0) {
 8013bba:	7803      	ldrb	r3, [r0, #0]
 8013bbc:	07db      	lsls	r3, r3, #31
 8013bbe:	d4fa      	bmi.n	8013bb6 <lv_mem_defrag+0x16>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 8013bc0:	6823      	ldr	r3, [r4, #0]
 8013bc2:	6801      	ldr	r1, [r0, #0]
 8013bc4:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8013bc8:	3204      	adds	r2, #4
 8013bca:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8013bce:	f362 035f 	bfi	r3, r2, #1, #31
 8013bd2:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 8013bd4:	f7ff ff7e 	bl	8013ad4 <ent_get_next>
        while(e_next != NULL) {
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d1ee      	bne.n	8013bba <lv_mem_defrag+0x1a>
 8013bdc:	e7e4      	b.n	8013ba8 <lv_mem_defrag+0x8>
 8013bde:	bf00      	nop
 8013be0:	20020890 	.word	0x20020890

08013be4 <lv_mem_free>:
    if(data == &zero_mem) return;
 8013be4:	4a16      	ldr	r2, [pc, #88]	; (8013c40 <lv_mem_free+0x5c>)
 8013be6:	1d13      	adds	r3, r2, #4
 8013be8:	4298      	cmp	r0, r3
{
 8013bea:	b510      	push	{r4, lr}
 8013bec:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 8013bee:	d010      	beq.n	8013c12 <lv_mem_free+0x2e>
    if(data == NULL) return;
 8013bf0:	b178      	cbz	r0, 8013c12 <lv_mem_free+0x2e>
    e->header.s.used = 0;
 8013bf2:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8013bf6:	f36f 0300 	bfc	r3, #0, #1
 8013bfa:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
 8013bfe:	8993      	ldrh	r3, [r2, #12]
 8013c00:	3301      	adds	r3, #1
 8013c02:	b29b      	uxth	r3, r3
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8013c04:	2b0f      	cmp	r3, #15
    full_defrag_cnt++;
 8013c06:	8193      	strh	r3, [r2, #12]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8013c08:	d814      	bhi.n	8013c34 <lv_mem_free+0x50>
        e_next = ent_get_next(e);
 8013c0a:	3804      	subs	r0, #4
            e_next = ent_get_next(e_next);
 8013c0c:	f7ff ff62 	bl	8013ad4 <ent_get_next>
        while(e_next != NULL) {
 8013c10:	b900      	cbnz	r0, 8013c14 <lv_mem_free+0x30>
}
 8013c12:	bd10      	pop	{r4, pc}
            if(e_next->header.s.used == 0) {
 8013c14:	7803      	ldrb	r3, [r0, #0]
 8013c16:	07db      	lsls	r3, r3, #31
 8013c18:	d4fb      	bmi.n	8013c12 <lv_mem_free+0x2e>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8013c1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013c1e:	6801      	ldr	r1, [r0, #0]
 8013c20:	f3c3 025e 	ubfx	r2, r3, #1, #31
 8013c24:	3204      	adds	r2, #4
 8013c26:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8013c2a:	f362 035f 	bfi	r3, r2, #1, #31
 8013c2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c32:	e7eb      	b.n	8013c0c <lv_mem_free+0x28>
        full_defrag_cnt = 0;
 8013c34:	2300      	movs	r3, #0
}
 8013c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        full_defrag_cnt = 0;
 8013c3a:	8193      	strh	r3, [r2, #12]
        lv_mem_defrag();
 8013c3c:	f7ff bfb0 	b.w	8013ba0 <lv_mem_defrag>
 8013c40:	20020890 	.word	0x20020890

08013c44 <_lv_mem_get_size>:
    if(data == NULL) return 0;
 8013c44:	b140      	cbz	r0, 8013c58 <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 8013c46:	4b05      	ldr	r3, [pc, #20]	; (8013c5c <_lv_mem_get_size+0x18>)
 8013c48:	4298      	cmp	r0, r3
 8013c4a:	d004      	beq.n	8013c56 <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
 8013c4c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8013c50:	f3c0 005e 	ubfx	r0, r0, #1, #31
 8013c54:	4770      	bx	lr
    if(data == NULL) return 0;
 8013c56:	2000      	movs	r0, #0
}
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	20020894 	.word	0x20020894

08013c60 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
 8013c60:	4b11      	ldr	r3, [pc, #68]	; (8013ca8 <_lv_mem_buf_release+0x48>)
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	4290      	cmp	r0, r2
{
 8013c66:	b510      	push	{r4, lr}
        if(mem_buf_small[i].p == p) {
 8013c68:	d00a      	beq.n	8013c80 <_lv_mem_buf_release+0x20>
 8013c6a:	689a      	ldr	r2, [r3, #8]
 8013c6c:	4290      	cmp	r0, r2
 8013c6e:	d109      	bne.n	8013c84 <_lv_mem_buf_release+0x24>
 8013c70:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
 8013c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c76:	799a      	ldrb	r2, [r3, #6]
 8013c78:	f36f 0200 	bfc	r2, #0, #1
 8013c7c:	719a      	strb	r2, [r3, #6]
}
 8013c7e:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
 8013c80:	2200      	movs	r2, #0
 8013c82:	e7f6      	b.n	8013c72 <_lv_mem_buf_release+0x12>
 8013c84:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 8013c86:	4a09      	ldr	r2, [pc, #36]	; (8013cac <_lv_mem_buf_release+0x4c>)
 8013c88:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8013c8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013c90:	4284      	cmp	r4, r0
 8013c92:	d104      	bne.n	8013c9e <_lv_mem_buf_release+0x3e>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 8013c94:	798b      	ldrb	r3, [r1, #6]
 8013c96:	f36f 0300 	bfc	r3, #0, #1
 8013c9a:	718b      	strb	r3, [r1, #6]
            return;
 8013c9c:	e7ef      	b.n	8013c7e <_lv_mem_buf_release+0x1e>
 8013c9e:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8013ca0:	2b10      	cmp	r3, #16
 8013ca2:	d1f1      	bne.n	8013c88 <_lv_mem_buf_release+0x28>
 8013ca4:	e7eb      	b.n	8013c7e <_lv_mem_buf_release+0x1e>
 8013ca6:	bf00      	nop
 8013ca8:	20000094 	.word	0x20000094
 8013cac:	20028c14 	.word	0x20028c14

08013cb0 <_lv_mem_buf_free_all>:
{
 8013cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        mem_buf_small[i].used = 0;
 8013cb2:	4b0f      	ldr	r3, [pc, #60]	; (8013cf0 <_lv_mem_buf_free_all+0x40>)
 8013cb4:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 8013cb6:	4d0f      	ldr	r5, [pc, #60]	; (8013cf4 <_lv_mem_buf_free_all+0x44>)
        mem_buf_small[i].used = 0;
 8013cb8:	799a      	ldrb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 8013cba:	4626      	mov	r6, r4
        mem_buf_small[i].used = 0;
 8013cbc:	f36f 0200 	bfc	r2, #0, #1
 8013cc0:	719a      	strb	r2, [r3, #6]
 8013cc2:	7b9a      	ldrb	r2, [r3, #14]
 8013cc4:	f36f 0200 	bfc	r2, #0, #1
 8013cc8:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 8013cca:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 8013cce:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 8013cd2:	b140      	cbz	r0, 8013ce6 <_lv_mem_buf_free_all+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 8013cd4:	f7ff ff86 	bl	8013be4 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 8013cd8:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 8013cdc:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 8013cde:	80be      	strh	r6, [r7, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 8013ce0:	f366 0300 	bfi	r3, r6, #0, #1
 8013ce4:	71bb      	strb	r3, [r7, #6]
 8013ce6:	3401      	adds	r4, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8013ce8:	2c10      	cmp	r4, #16
 8013cea:	d1ee      	bne.n	8013cca <_lv_mem_buf_free_all+0x1a>
}
 8013cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	20000094 	.word	0x20000094
 8013cf4:	20028c14 	.word	0x20028c14

08013cf8 <_lv_memcpy>:
{
 8013cf8:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8013cfa:	f000 0503 	and.w	r5, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8013cfe:	f001 0603 	and.w	r6, r1, #3
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8013d02:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8013d04:	460b      	mov	r3, r1
    if(s_align != d_align) {
 8013d06:	42b5      	cmp	r5, r6
 8013d08:	f040 8098 	bne.w	8013e3c <_lv_memcpy+0x144>
    if(d_align) {
 8013d0c:	2d00      	cmp	r5, #0
 8013d0e:	f040 80a8 	bne.w	8013e62 <_lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 8013d12:	4605      	mov	r5, r0
 8013d14:	462b      	mov	r3, r5
    while(len > 32) {
 8013d16:	2a20      	cmp	r2, #32
 8013d18:	461c      	mov	r4, r3
 8013d1a:	f101 0520 	add.w	r5, r1, #32
 8013d1e:	f103 0320 	add.w	r3, r3, #32
 8013d22:	f200 80af 	bhi.w	8013e84 <_lv_memcpy+0x18c>
    while(len > 4) {
 8013d26:	2a04      	cmp	r2, #4
 8013d28:	460e      	mov	r6, r1
 8013d2a:	f240 809f 	bls.w	8013e6c <_lv_memcpy+0x174>
        COPY32;
 8013d2e:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 8013d32:	3a04      	subs	r2, #4
        COPY32;
 8013d34:	f844 3b04 	str.w	r3, [r4], #4
 8013d38:	e7f5      	b.n	8013d26 <_lv_memcpy+0x2e>
            REPEAT8(COPY8);
 8013d3a:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 8013d3e:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 8013d40:	f804 1c20 	strb.w	r1, [r4, #-32]
 8013d44:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 8013d48:	f804 1c1f 	strb.w	r1, [r4, #-31]
 8013d4c:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8013d50:	f804 1c1e 	strb.w	r1, [r4, #-30]
 8013d54:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 8013d58:	f804 1c1d 	strb.w	r1, [r4, #-29]
 8013d5c:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013d60:	f804 1c1c 	strb.w	r1, [r4, #-28]
 8013d64:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 8013d68:	f804 1c1b 	strb.w	r1, [r4, #-27]
 8013d6c:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 8013d70:	f804 1c1a 	strb.w	r1, [r4, #-26]
 8013d74:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 8013d78:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 8013d7c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8013d80:	f804 1c18 	strb.w	r1, [r4, #-24]
 8013d84:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 8013d88:	f804 1c17 	strb.w	r1, [r4, #-23]
 8013d8c:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 8013d90:	f804 1c16 	strb.w	r1, [r4, #-22]
 8013d94:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 8013d98:	f804 1c15 	strb.w	r1, [r4, #-21]
 8013d9c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8013da0:	f804 1c14 	strb.w	r1, [r4, #-20]
 8013da4:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 8013da8:	f804 1c13 	strb.w	r1, [r4, #-19]
 8013dac:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8013db0:	f804 1c12 	strb.w	r1, [r4, #-18]
 8013db4:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 8013db8:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 8013dbc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8013dc0:	f804 1c10 	strb.w	r1, [r4, #-16]
 8013dc4:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 8013dc8:	f804 1c0f 	strb.w	r1, [r4, #-15]
 8013dcc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8013dd0:	f804 1c0e 	strb.w	r1, [r4, #-14]
 8013dd4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8013dd8:	f804 1c0d 	strb.w	r1, [r4, #-13]
 8013ddc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8013de0:	f804 1c0c 	strb.w	r1, [r4, #-12]
 8013de4:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8013de8:	f804 1c0b 	strb.w	r1, [r4, #-11]
 8013dec:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8013df0:	f804 1c0a 	strb.w	r1, [r4, #-10]
 8013df4:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8013df8:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 8013dfc:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8013e00:	f804 1c08 	strb.w	r1, [r4, #-8]
 8013e04:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8013e08:	f804 1c07 	strb.w	r1, [r4, #-7]
 8013e0c:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8013e10:	f804 1c06 	strb.w	r1, [r4, #-6]
 8013e14:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8013e18:	f804 1c05 	strb.w	r1, [r4, #-5]
 8013e1c:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8013e20:	f804 1c04 	strb.w	r1, [r4, #-4]
 8013e24:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 8013e28:	f804 1c03 	strb.w	r1, [r4, #-3]
 8013e2c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8013e30:	f804 1c02 	strb.w	r1, [r4, #-2]
 8013e34:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013e38:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 8013e3c:	2a20      	cmp	r2, #32
 8013e3e:	461d      	mov	r5, r3
 8013e40:	4621      	mov	r1, r4
 8013e42:	f103 0320 	add.w	r3, r3, #32
 8013e46:	f104 0420 	add.w	r4, r4, #32
 8013e4a:	f63f af76 	bhi.w	8013d3a <_lv_memcpy+0x42>
 8013e4e:	1e6b      	subs	r3, r5, #1
 8013e50:	440a      	add	r2, r1
        while(len) {
 8013e52:	4291      	cmp	r1, r2
 8013e54:	d100      	bne.n	8013e58 <_lv_memcpy+0x160>
}
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 8013e58:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8013e5c:	f801 4b01 	strb.w	r4, [r1], #1
 8013e60:	e7f7      	b.n	8013e52 <_lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 8013e62:	f1c5 0504 	rsb	r5, r5, #4
 8013e66:	4405      	add	r5, r0
 8013e68:	461e      	mov	r6, r3
        while(d_align && len) {
 8013e6a:	b912      	cbnz	r2, 8013e72 <_lv_memcpy+0x17a>
 8013e6c:	1e73      	subs	r3, r6, #1
 8013e6e:	4422      	add	r2, r4
 8013e70:	e02f      	b.n	8013ed2 <_lv_memcpy+0x1da>
            COPY8;
 8013e72:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 8013e76:	3a01      	subs	r2, #1
            COPY8;
 8013e78:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 8013e7c:	42ac      	cmp	r4, r5
            COPY8;
 8013e7e:	4619      	mov	r1, r3
        while(d_align && len) {
 8013e80:	d1f2      	bne.n	8013e68 <_lv_memcpy+0x170>
 8013e82:	e747      	b.n	8013d14 <_lv_memcpy+0x1c>
        REPEAT8(COPY32)
 8013e84:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 8013e88:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 8013e8a:	f843 1c20 	str.w	r1, [r3, #-32]
 8013e8e:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 8013e92:	f843 1c1c 	str.w	r1, [r3, #-28]
 8013e96:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8013e9a:	f843 1c18 	str.w	r1, [r3, #-24]
 8013e9e:	f855 1c14 	ldr.w	r1, [r5, #-20]
 8013ea2:	f843 1c14 	str.w	r1, [r3, #-20]
 8013ea6:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8013eaa:	f843 1c10 	str.w	r1, [r3, #-16]
 8013eae:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8013eb2:	f843 1c0c 	str.w	r1, [r3, #-12]
 8013eb6:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8013eba:	f843 1c08 	str.w	r1, [r3, #-8]
 8013ebe:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8013ec2:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 8013ec6:	4629      	mov	r1, r5
 8013ec8:	e725      	b.n	8013d16 <_lv_memcpy+0x1e>
        COPY8
 8013eca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013ece:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 8013ed2:	4294      	cmp	r4, r2
 8013ed4:	d1f9      	bne.n	8013eca <_lv_memcpy+0x1d2>
 8013ed6:	e7be      	b.n	8013e56 <_lv_memcpy+0x15e>

08013ed8 <lv_mem_realloc>:
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 8013ed8:	3103      	adds	r1, #3
{
 8013eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 8013edc:	f021 0503 	bic.w	r5, r1, #3
    if(data_p != NULL) {
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	b128      	cbz	r0, 8013ef0 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
 8013ee4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 8013ee8:	f013 0f01 	tst.w	r3, #1
 8013eec:	bf08      	it	eq
 8013eee:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f7ff fea7 	bl	8013c44 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013ef6:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
 8013ef8:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 8013efa:	d004      	beq.n	8013f06 <lv_mem_realloc+0x2e>
    if(new_size < old_size) {
 8013efc:	d205      	bcs.n	8013f0a <lv_mem_realloc+0x32>
        ent_trunc(e, new_size);
 8013efe:	4629      	mov	r1, r5
 8013f00:	1f20      	subs	r0, r4, #4
 8013f02:	f7ff fdf9 	bl	8013af8 <ent_trunc>
 8013f06:	4626      	mov	r6, r4
 8013f08:	e011      	b.n	8013f2e <lv_mem_realloc+0x56>
    new_p = lv_mem_alloc(new_size);
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f7ff fe1c 	bl	8013b48 <lv_mem_alloc>
    if(new_p == NULL) {
 8013f10:	4606      	mov	r6, r0
 8013f12:	b160      	cbz	r0, 8013f2e <lv_mem_realloc+0x56>
    if(data_p != NULL) {
 8013f14:	b15c      	cbz	r4, 8013f2e <lv_mem_realloc+0x56>
        if(old_size != 0 && new_size != 0) {
 8013f16:	b13f      	cbz	r7, 8013f28 <lv_mem_realloc+0x50>
 8013f18:	b135      	cbz	r5, 8013f28 <lv_mem_realloc+0x50>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8013f1a:	42bd      	cmp	r5, r7
 8013f1c:	462a      	mov	r2, r5
 8013f1e:	4621      	mov	r1, r4
 8013f20:	bf28      	it	cs
 8013f22:	463a      	movcs	r2, r7
 8013f24:	f7ff fee8 	bl	8013cf8 <_lv_memcpy>
        lv_mem_free(data_p);
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f7ff fe5b 	bl	8013be4 <lv_mem_free>
}
 8013f2e:	4630      	mov	r0, r6
 8013f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f34 <_lv_mem_buf_get>:
{
 8013f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 8013f36:	4604      	mov	r4, r0
 8013f38:	b190      	cbz	r0, 8013f60 <_lv_mem_buf_get+0x2c>
    if(size <= MEM_BUF_SMALL_SIZE) {
 8013f3a:	2810      	cmp	r0, #16
 8013f3c:	d811      	bhi.n	8013f62 <_lv_mem_buf_get+0x2e>
            if(mem_buf_small[i].used == 0) {
 8013f3e:	4a30      	ldr	r2, [pc, #192]	; (8014000 <_lv_mem_buf_get+0xcc>)
 8013f40:	7993      	ldrb	r3, [r2, #6]
 8013f42:	f013 0301 	ands.w	r3, r3, #1
 8013f46:	d003      	beq.n	8013f50 <_lv_mem_buf_get+0x1c>
 8013f48:	7b93      	ldrb	r3, [r2, #14]
 8013f4a:	07db      	lsls	r3, r3, #31
 8013f4c:	d409      	bmi.n	8013f62 <_lv_mem_buf_get+0x2e>
 8013f4e:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
 8013f50:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8013f54:	7981      	ldrb	r1, [r0, #6]
 8013f56:	f041 0101 	orr.w	r1, r1, #1
 8013f5a:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
 8013f5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
}
 8013f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 8013f62:	4928      	ldr	r1, [pc, #160]	; (8014004 <_lv_mem_buf_get+0xd0>)
            if(mem_buf_small[i].used == 0) {
 8013f64:	2200      	movs	r2, #0
 8013f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f6a:	460e      	mov	r6, r1
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 8013f6c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8013f70:	7987      	ldrb	r7, [r0, #6]
 8013f72:	463d      	mov	r5, r7
 8013f74:	07ff      	lsls	r7, r7, #31
 8013f76:	d412      	bmi.n	8013f9e <_lv_mem_buf_get+0x6a>
 8013f78:	8887      	ldrh	r7, [r0, #4]
 8013f7a:	42a7      	cmp	r7, r4
 8013f7c:	d30f      	bcc.n	8013f9e <_lv_mem_buf_get+0x6a>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 8013f7e:	d105      	bne.n	8013f8c <_lv_mem_buf_get+0x58>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8013f80:	f045 0301 	orr.w	r3, r5, #1
 8013f84:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 8013f86:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 8013f8a:	e7e9      	b.n	8013f60 <_lv_mem_buf_get+0x2c>
            else if(i_guess < 0) {
 8013f8c:	1c58      	adds	r0, r3, #1
 8013f8e:	d101      	bne.n	8013f94 <_lv_mem_buf_get+0x60>
                i_guess = i;
 8013f90:	b253      	sxtb	r3, r2
 8013f92:	e004      	b.n	8013f9e <_lv_mem_buf_get+0x6a>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 8013f94:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8013f98:	8880      	ldrh	r0, [r0, #4]
 8013f9a:	42b8      	cmp	r0, r7
 8013f9c:	d8f8      	bhi.n	8013f90 <_lv_mem_buf_get+0x5c>
 8013f9e:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8013fa0:	2a10      	cmp	r2, #16
 8013fa2:	d1e3      	bne.n	8013f6c <_lv_mem_buf_get+0x38>
    if(i_guess >= 0) {
 8013fa4:	1c5a      	adds	r2, r3, #1
 8013fa6:	d008      	beq.n	8013fba <_lv_mem_buf_get+0x86>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 8013fa8:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 8013fac:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 8013fb0:	798a      	ldrb	r2, [r1, #6]
 8013fb2:	f042 0201 	orr.w	r2, r2, #1
 8013fb6:	718a      	strb	r2, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 8013fb8:	e7d2      	b.n	8013f60 <_lv_mem_buf_get+0x2c>
 8013fba:	2500      	movs	r5, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 8013fbc:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 8013fc0:	79bb      	ldrb	r3, [r7, #6]
 8013fc2:	07db      	lsls	r3, r3, #31
 8013fc4:	d413      	bmi.n	8013fee <_lv_mem_buf_get+0xba>
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 8013fcc:	f7ff ff84 	bl	8013ed8 <lv_mem_realloc>
            if(buf == NULL) {
 8013fd0:	b928      	cbnz	r0, 8013fde <_lv_mem_buf_get+0xaa>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	480c      	ldr	r0, [pc, #48]	; (8014008 <_lv_mem_buf_get+0xd4>)
 8013fd8:	f7ff fb12 	bl	8013600 <lv_debug_log_error>
 8013fdc:	e7fe      	b.n	8013fdc <_lv_mem_buf_get+0xa8>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8013fde:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 8013fe0:	80bc      	strh	r4, [r7, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8013fe2:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 8013fe6:	f846 0035 	str.w	r0, [r6, r5, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8013fea:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 8013fec:	e7b8      	b.n	8013f60 <_lv_mem_buf_get+0x2c>
 8013fee:	3501      	adds	r5, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8013ff0:	2d10      	cmp	r5, #16
 8013ff2:	d1e3      	bne.n	8013fbc <_lv_mem_buf_get+0x88>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	4804      	ldr	r0, [pc, #16]	; (801400c <_lv_mem_buf_get+0xd8>)
 8013ffa:	f7ff fb01 	bl	8013600 <lv_debug_log_error>
 8013ffe:	e7fe      	b.n	8013ffe <_lv_mem_buf_get+0xca>
 8014000:	20000094 	.word	0x20000094
 8014004:	20028c14 	.word	0x20028c14
 8014008:	0802c374 	.word	0x0802c374
 801400c:	0802c3c5 	.word	0x0802c3c5

08014010 <_lv_memset>:
    if(d_align) {
 8014010:	f010 0303 	ands.w	r3, r0, #3
{
 8014014:	b510      	push	{r4, lr}
    if(d_align) {
 8014016:	d009      	beq.n	801402c <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 8014018:	f1c3 0304 	rsb	r3, r3, #4
 801401c:	4403      	add	r3, r0
        while(d_align && len) {
 801401e:	b12a      	cbz	r2, 801402c <_lv_memset+0x1c>
            SET8(v);
 8014020:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 8014024:	4298      	cmp	r0, r3
            len--;
 8014026:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        while(d_align && len) {
 801402a:	d1f8      	bne.n	801401e <_lv_memset+0xe>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 801402c:	eb01 2301 	add.w	r3, r1, r1, lsl #8
 8014030:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8014034:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8014038:	2a20      	cmp	r2, #32
 801403a:	4604      	mov	r4, r0
 801403c:	f100 0020 	add.w	r0, r0, #32
 8014040:	d805      	bhi.n	801404e <_lv_memset+0x3e>
    while(len > 4) {
 8014042:	2a04      	cmp	r2, #4
 8014044:	d80d      	bhi.n	8014062 <_lv_memset+0x52>
 8014046:	4422      	add	r2, r4
    while(len) {
 8014048:	4294      	cmp	r4, r2
 801404a:	d10e      	bne.n	801406a <_lv_memset+0x5a>
}
 801404c:	bd10      	pop	{r4, pc}
        REPEAT8(SET32(v32));
 801404e:	e940 3308 	strd	r3, r3, [r0, #-32]
 8014052:	e940 3306 	strd	r3, r3, [r0, #-24]
 8014056:	e940 3304 	strd	r3, r3, [r0, #-16]
 801405a:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 801405e:	3a20      	subs	r2, #32
 8014060:	e7ea      	b.n	8014038 <_lv_memset+0x28>
        SET32(v32);
 8014062:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 8014066:	3a04      	subs	r2, #4
 8014068:	e7eb      	b.n	8014042 <_lv_memset+0x32>
        SET8(v);
 801406a:	f804 1b01 	strb.w	r1, [r4], #1
 801406e:	e7eb      	b.n	8014048 <_lv_memset+0x38>

08014070 <_lv_memset_00>:
    if(d_align) {
 8014070:	f010 0303 	ands.w	r3, r0, #3
 8014074:	d10d      	bne.n	8014092 <_lv_memset_00+0x22>
 8014076:	4603      	mov	r3, r0
        REPEAT8(SET32(0));
 8014078:	2200      	movs	r2, #0
    while(len > 32) {
 801407a:	2920      	cmp	r1, #32
 801407c:	4618      	mov	r0, r3
 801407e:	f103 0320 	add.w	r3, r3, #32
 8014082:	d815      	bhi.n	80140b0 <_lv_memset_00+0x40>
        SET32(0);
 8014084:	2300      	movs	r3, #0
    while(len > 4) {
 8014086:	2904      	cmp	r1, #4
 8014088:	d908      	bls.n	801409c <_lv_memset_00+0x2c>
        SET32(0);
 801408a:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 801408e:	3904      	subs	r1, #4
 8014090:	e7f9      	b.n	8014086 <_lv_memset_00+0x16>
        d_align = ALIGN_MASK + 1 - d_align;
 8014092:	f1c3 0304 	rsb	r3, r3, #4
            SET8(0);
 8014096:	2200      	movs	r2, #0
 8014098:	4403      	add	r3, r0
        while(d_align && len) {
 801409a:	b911      	cbnz	r1, 80140a2 <_lv_memset_00+0x32>
 801409c:	4401      	add	r1, r0
        SET8(0);
 801409e:	2300      	movs	r3, #0
 80140a0:	e012      	b.n	80140c8 <_lv_memset_00+0x58>
            SET8(0);
 80140a2:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 80140a6:	4298      	cmp	r0, r3
            len--;
 80140a8:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        while(d_align && len) {
 80140ac:	d1f5      	bne.n	801409a <_lv_memset_00+0x2a>
 80140ae:	e7e2      	b.n	8014076 <_lv_memset_00+0x6>
        REPEAT8(SET32(0));
 80140b0:	e943 2208 	strd	r2, r2, [r3, #-32]
 80140b4:	e943 2206 	strd	r2, r2, [r3, #-24]
 80140b8:	e943 2204 	strd	r2, r2, [r3, #-16]
 80140bc:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 80140c0:	3920      	subs	r1, #32
 80140c2:	e7da      	b.n	801407a <_lv_memset_00+0xa>
        SET8(0);
 80140c4:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 80140c8:	4288      	cmp	r0, r1
 80140ca:	d1fb      	bne.n	80140c4 <_lv_memset_00+0x54>
}
 80140cc:	4770      	bx	lr

080140ce <_lv_memset_ff>:
    if(d_align) {
 80140ce:	f010 0303 	ands.w	r3, r0, #3
 80140d2:	d10f      	bne.n	80140f4 <_lv_memset_ff+0x26>
 80140d4:	4603      	mov	r3, r0
        REPEAT8(SET32(0xFFFFFFFF));
 80140d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    while(len > 32) {
 80140da:	2920      	cmp	r1, #32
 80140dc:	4618      	mov	r0, r3
 80140de:	f103 0320 	add.w	r3, r3, #32
 80140e2:	d816      	bhi.n	8014112 <_lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 80140e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    while(len > 4) {
 80140e8:	2904      	cmp	r1, #4
 80140ea:	d908      	bls.n	80140fe <_lv_memset_ff+0x30>
        SET32(0xFFFFFFFF);
 80140ec:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 80140f0:	3904      	subs	r1, #4
 80140f2:	e7f9      	b.n	80140e8 <_lv_memset_ff+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 80140f4:	f1c3 0304 	rsb	r3, r3, #4
            SET8(0xFF);
 80140f8:	22ff      	movs	r2, #255	; 0xff
 80140fa:	4403      	add	r3, r0
        while(d_align && len) {
 80140fc:	b911      	cbnz	r1, 8014104 <_lv_memset_ff+0x36>
 80140fe:	4401      	add	r1, r0
        SET8(0xFF);
 8014100:	23ff      	movs	r3, #255	; 0xff
 8014102:	e012      	b.n	801412a <_lv_memset_ff+0x5c>
            SET8(0xFF);
 8014104:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8014108:	4298      	cmp	r0, r3
            len--;
 801410a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        while(d_align && len) {
 801410e:	d1f5      	bne.n	80140fc <_lv_memset_ff+0x2e>
 8014110:	e7e0      	b.n	80140d4 <_lv_memset_ff+0x6>
        REPEAT8(SET32(0xFFFFFFFF));
 8014112:	e943 2208 	strd	r2, r2, [r3, #-32]
 8014116:	e943 2206 	strd	r2, r2, [r3, #-24]
 801411a:	e943 2204 	strd	r2, r2, [r3, #-16]
 801411e:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8014122:	3920      	subs	r1, #32
 8014124:	e7d9      	b.n	80140da <_lv_memset_ff+0xc>
        SET8(0xFF);
 8014126:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 801412a:	4288      	cmp	r0, r1
 801412c:	d1fb      	bne.n	8014126 <_lv_memset_ff+0x58>
}
 801412e:	4770      	bx	lr

08014130 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8014130:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8014132:	bf38      	it	cc
 8014134:	5488      	strbcc	r0, [r1, r2]
    }
}
 8014136:	4770      	bx	lr

08014138 <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8014138:	4770      	bx	lr

0801413a <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801413a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413e:	b085      	sub	sp, #20
 8014140:	469a      	mov	sl, r3
 8014142:	4691      	mov	r9, r2
 8014144:	9b14      	ldr	r3, [sp, #80]	; 0x50
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8014146:	f013 0702 	ands.w	r7, r3, #2
{
 801414a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801414e:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8014152:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    if(!(flags & FLAGS_LEFT)) {
 8014156:	9703      	str	r7, [sp, #12]
{
 8014158:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
    if(!(flags & FLAGS_LEFT)) {
 801415c:	d11d      	bne.n	801419a <_ntoa_format+0x60>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 801415e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014160:	f003 0701 	and.w	r7, r3, #1
 8014164:	b13e      	cbz	r6, 8014176 <_ntoa_format+0x3c>
 8014166:	b137      	cbz	r7, 8014176 <_ntoa_format+0x3c>
 8014168:	b910      	cbnz	r0, 8014170 <_ntoa_format+0x36>
 801416a:	f013 0f0c 	tst.w	r3, #12
 801416e:	d002      	beq.n	8014176 <_ntoa_format+0x3c>
            width--;
 8014170:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014172:	3e01      	subs	r6, #1
 8014174:	9613      	str	r6, [sp, #76]	; 0x4c
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8014176:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801417a:	e004      	b.n	8014186 <_ntoa_format+0x4c>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801417c:	2c20      	cmp	r4, #32
 801417e:	d004      	beq.n	801418a <_ntoa_format+0x50>
            buf[len++] = '0';
 8014180:	f805 c004 	strb.w	ip, [r5, r4]
 8014184:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014186:	42a1      	cmp	r1, r4
 8014188:	d8f8      	bhi.n	801417c <_ntoa_format+0x42>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 801418a:	f04f 0c30 	mov.w	ip, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801418e:	b127      	cbz	r7, 801419a <_ntoa_format+0x60>
 8014190:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014192:	42a6      	cmp	r6, r4
 8014194:	d901      	bls.n	801419a <_ntoa_format+0x60>
 8014196:	2c20      	cmp	r4, #32
 8014198:	d133      	bne.n	8014202 <_ntoa_format+0xc8>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 801419a:	06de      	lsls	r6, r3, #27
 801419c:	d518      	bpl.n	80141d0 <_ntoa_format+0x96>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 801419e:	055f      	lsls	r7, r3, #21
 80141a0:	d434      	bmi.n	801420c <_ntoa_format+0xd2>
 80141a2:	b39c      	cbz	r4, 801420c <_ntoa_format+0xd2>
 80141a4:	428c      	cmp	r4, r1
 80141a6:	d002      	beq.n	80141ae <_ntoa_format+0x74>
 80141a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80141aa:	428c      	cmp	r4, r1
 80141ac:	d12e      	bne.n	801420c <_ntoa_format+0xd2>
            len--;
            if(len && (base == 16U)) {
 80141ae:	1e61      	subs	r1, r4, #1
 80141b0:	d02b      	beq.n	801420a <_ntoa_format+0xd0>
 80141b2:	2a10      	cmp	r2, #16
 80141b4:	d164      	bne.n	8014280 <_ntoa_format+0x146>
                len--;
 80141b6:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80141b8:	069e      	lsls	r6, r3, #26
 80141ba:	d42f      	bmi.n	801421c <_ntoa_format+0xe2>
 80141bc:	2c1f      	cmp	r4, #31
 80141be:	d80d      	bhi.n	80141dc <_ntoa_format+0xa2>
            buf[len++] = 'x';
 80141c0:	2278      	movs	r2, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 80141c2:	552a      	strb	r2, [r5, r4]
 80141c4:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 80141c6:	2c1f      	cmp	r4, #31
 80141c8:	d808      	bhi.n	80141dc <_ntoa_format+0xa2>
            buf[len++] = '0';
 80141ca:	2230      	movs	r2, #48	; 0x30
 80141cc:	552a      	strb	r2, [r5, r4]
 80141ce:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 80141d0:	2c20      	cmp	r4, #32
 80141d2:	d003      	beq.n	80141dc <_ntoa_format+0xa2>
        if(negative) {
 80141d4:	b330      	cbz	r0, 8014224 <_ntoa_format+0xea>
            buf[len++] = '-';
 80141d6:	222d      	movs	r2, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 80141d8:	552a      	strb	r2, [r5, r4]
 80141da:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80141dc:	079b      	lsls	r3, r3, #30
 80141de:	464f      	mov	r7, r9
 80141e0:	d037      	beq.n	8014252 <_ntoa_format+0x118>
 80141e2:	eb05 0804 	add.w	r8, r5, r4
 80141e6:	eb07 0b08 	add.w	fp, r7, r8
    while(len) {
 80141ea:	45a8      	cmp	r8, r5
 80141ec:	ebab 0208 	sub.w	r2, fp, r8
 80141f0:	d132      	bne.n	8014258 <_ntoa_format+0x11e>
    if(flags & FLAGS_LEFT) {
 80141f2:	9b03      	ldr	r3, [sp, #12]
 80141f4:	19e2      	adds	r2, r4, r7
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d13c      	bne.n	8014274 <_ntoa_format+0x13a>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 80141fa:	4610      	mov	r0, r2
 80141fc:	b005      	add	sp, #20
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8014202:	f805 c004 	strb.w	ip, [r5, r4]
 8014206:	3401      	adds	r4, #1
 8014208:	e7c1      	b.n	801418e <_ntoa_format+0x54>
 801420a:	460c      	mov	r4, r1
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801420c:	2a10      	cmp	r2, #16
 801420e:	d0d3      	beq.n	80141b8 <_ntoa_format+0x7e>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014210:	2a02      	cmp	r2, #2
 8014212:	d1d8      	bne.n	80141c6 <_ntoa_format+0x8c>
 8014214:	2c1f      	cmp	r4, #31
 8014216:	d8e1      	bhi.n	80141dc <_ntoa_format+0xa2>
            buf[len++] = 'b';
 8014218:	2262      	movs	r2, #98	; 0x62
 801421a:	e7d2      	b.n	80141c2 <_ntoa_format+0x88>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801421c:	2c1f      	cmp	r4, #31
 801421e:	d8dd      	bhi.n	80141dc <_ntoa_format+0xa2>
            buf[len++] = 'X';
 8014220:	2258      	movs	r2, #88	; 0x58
 8014222:	e7ce      	b.n	80141c2 <_ntoa_format+0x88>
        else if(flags & FLAGS_PLUS) {
 8014224:	0759      	lsls	r1, r3, #29
 8014226:	d501      	bpl.n	801422c <_ntoa_format+0xf2>
            buf[len++] = '+';  // ignore the space if the '+' exists
 8014228:	222b      	movs	r2, #43	; 0x2b
 801422a:	e7d5      	b.n	80141d8 <_ntoa_format+0x9e>
        else if(flags & FLAGS_SPACE) {
 801422c:	071a      	lsls	r2, r3, #28
 801422e:	d5d5      	bpl.n	80141dc <_ntoa_format+0xa2>
            buf[len++] = ' ';
 8014230:	2220      	movs	r2, #32
 8014232:	e7d1      	b.n	80141d8 <_ntoa_format+0x9e>
            out(' ', buffer, idx++, maxlen);
 8014234:	f107 0801 	add.w	r8, r7, #1
 8014238:	463a      	mov	r2, r7
 801423a:	4653      	mov	r3, sl
 801423c:	9f01      	ldr	r7, [sp, #4]
 801423e:	9902      	ldr	r1, [sp, #8]
 8014240:	2020      	movs	r0, #32
 8014242:	47b8      	blx	r7
 8014244:	4647      	mov	r7, r8
        for(i = len; i < width; i++) {
 8014246:	eb0b 0307 	add.w	r3, fp, r7
 801424a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801424c:	429a      	cmp	r2, r3
 801424e:	d8f1      	bhi.n	8014234 <_ntoa_format+0xfa>
 8014250:	e7c7      	b.n	80141e2 <_ntoa_format+0xa8>
 8014252:	eba4 0b09 	sub.w	fp, r4, r9
 8014256:	e7f6      	b.n	8014246 <_ntoa_format+0x10c>
        out(buf[--len], buffer, idx++, maxlen);
 8014258:	4653      	mov	r3, sl
 801425a:	9902      	ldr	r1, [sp, #8]
 801425c:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 8014260:	9e01      	ldr	r6, [sp, #4]
 8014262:	47b0      	blx	r6
 8014264:	e7c1      	b.n	80141ea <_ntoa_format+0xb0>
            out(' ', buffer, idx++, maxlen);
 8014266:	1c54      	adds	r4, r2, #1
 8014268:	4653      	mov	r3, sl
 801426a:	9902      	ldr	r1, [sp, #8]
 801426c:	2020      	movs	r0, #32
 801426e:	9d01      	ldr	r5, [sp, #4]
 8014270:	47a8      	blx	r5
 8014272:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
 8014274:	eba2 0309 	sub.w	r3, r2, r9
 8014278:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801427a:	4299      	cmp	r1, r3
 801427c:	d8f3      	bhi.n	8014266 <_ntoa_format+0x12c>
 801427e:	e7bc      	b.n	80141fa <_ntoa_format+0xc0>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014280:	2a02      	cmp	r2, #2
 8014282:	460c      	mov	r4, r1
 8014284:	d19f      	bne.n	80141c6 <_ntoa_format+0x8c>
 8014286:	e7c7      	b.n	8014218 <_ntoa_format+0xde>

08014288 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801428c:	b090      	sub	sp, #64	; 0x40
 801428e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8014290:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8014294:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8014296:	b90d      	cbnz	r5, 801429c <_ntoa_long+0x14>
        flags &= ~FLAGS_HASH;
 8014298:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 801429c:	057c      	lsls	r4, r7, #21
 801429e:	d500      	bpl.n	80142a2 <_ntoa_long+0x1a>
 80142a0:	b385      	cbz	r5, 8014304 <_ntoa_long+0x7c>
 80142a2:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80142a6:	f04f 0600 	mov.w	r6, #0
 80142aa:	bf14      	ite	ne
 80142ac:	f04f 0837 	movne.w	r8, #55	; 0x37
 80142b0:	f04f 0857 	moveq.w	r8, #87	; 0x57
 80142b4:	3601      	adds	r6, #1
            const char digit = (char)(value % base);
 80142b6:	fbb5 fefc 	udiv	lr, r5, ip
 80142ba:	fb0c 5e1e 	mls	lr, ip, lr, r5
 80142be:	fa5f f48e 	uxtb.w	r4, lr
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80142c2:	f1be 0f09 	cmp.w	lr, #9
 80142c6:	f10d 0e20 	add.w	lr, sp, #32
 80142ca:	bf94      	ite	ls
 80142cc:	3430      	addls	r4, #48	; 0x30
 80142ce:	4444      	addhi	r4, r8
 80142d0:	44b6      	add	lr, r6
 80142d2:	b2e4      	uxtb	r4, r4
            value /= base;
 80142d4:	fbb5 f5fc 	udiv	r5, r5, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80142d8:	f80e 4c01 	strb.w	r4, [lr, #-1]
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80142dc:	b10d      	cbz	r5, 80142e2 <_ntoa_long+0x5a>
 80142de:	2e20      	cmp	r6, #32
 80142e0:	d1e8      	bne.n	80142b4 <_ntoa_long+0x2c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80142e2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80142e4:	9706      	str	r7, [sp, #24]
 80142e6:	9405      	str	r4, [sp, #20]
 80142e8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80142ea:	e9cd c403 	strd	ip, r4, [sp, #12]
 80142ee:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80142f2:	e9cd 6401 	strd	r6, r4, [sp, #4]
 80142f6:	ac08      	add	r4, sp, #32
 80142f8:	9400      	str	r4, [sp, #0]
 80142fa:	f7ff ff1e 	bl	801413a <_ntoa_format>
}
 80142fe:	b010      	add	sp, #64	; 0x40
 8014300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = 0U;
 8014304:	462e      	mov	r6, r5
 8014306:	e7ec      	b.n	80142e2 <_ntoa_long+0x5a>

08014308 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430c:	b093      	sub	sp, #76	; 0x4c
 801430e:	4607      	mov	r7, r0
 8014310:	4688      	mov	r8, r1
 8014312:	469a      	mov	sl, r3
 8014314:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8014316:	4691      	mov	r9, r2
 8014318:	e9dd 6320 	ldrd	r6, r3, [sp, #128]	; 0x80
 801431c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8014320:	9309      	str	r3, [sp, #36]	; 0x24
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8014322:	ea50 0301 	orrs.w	r3, r0, r1
        flags &= ~FLAGS_HASH;
 8014326:	bf08      	it	eq
 8014328:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 801432c:	056b      	lsls	r3, r5, #21
 801432e:	d502      	bpl.n	8014336 <_ntoa_long_long+0x2e>
 8014330:	ea50 0301 	orrs.w	r3, r0, r1
 8014334:	d033      	beq.n	801439e <_ntoa_long_long+0x96>
 8014336:	f015 0f20 	tst.w	r5, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801433a:	f04f 0400 	mov.w	r4, #0
 801433e:	bf14      	ite	ne
 8014340:	f04f 0b37 	movne.w	fp, #55	; 0x37
 8014344:	f04f 0b57 	moveq.w	fp, #87	; 0x57
 8014348:	4632      	mov	r2, r6
 801434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434c:	f7eb ffc8 	bl	80002e0 <__aeabi_uldivmod>
 8014350:	3401      	adds	r4, #1
            const char digit = (char)(value % base);
 8014352:	b2d2      	uxtb	r2, r2
 8014354:	468c      	mov	ip, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014356:	a90a      	add	r1, sp, #40	; 0x28
 8014358:	2a09      	cmp	r2, #9
 801435a:	4421      	add	r1, r4
 801435c:	bf94      	ite	ls
 801435e:	3230      	addls	r2, #48	; 0x30
 8014360:	445a      	addhi	r2, fp
 8014362:	b2d2      	uxtb	r2, r2
 8014364:	f801 2c01 	strb.w	r2, [r1, #-1]
            value /= base;
 8014368:	4661      	mov	r1, ip
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801436a:	ea50 0301 	orrs.w	r3, r0, r1
 801436e:	d001      	beq.n	8014374 <_ntoa_long_long+0x6c>
 8014370:	2c20      	cmp	r4, #32
 8014372:	d1e9      	bne.n	8014348 <_ntoa_long_long+0x40>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8014374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014376:	464a      	mov	r2, r9
 8014378:	4641      	mov	r1, r8
 801437a:	9506      	str	r5, [sp, #24]
 801437c:	9305      	str	r3, [sp, #20]
 801437e:	4638      	mov	r0, r7
 8014380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014382:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8014386:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 801438a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 801438e:	ab0a      	add	r3, sp, #40	; 0x28
 8014390:	9300      	str	r3, [sp, #0]
 8014392:	4653      	mov	r3, sl
 8014394:	f7ff fed1 	bl	801413a <_ntoa_format>
}
 8014398:	b013      	add	sp, #76	; 0x4c
 801439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t len = 0U;
 801439e:	2400      	movs	r4, #0
 80143a0:	e7e8      	b.n	8014374 <_ntoa_long_long+0x6c>
	...

080143a4 <_vsnprintf.constprop.0>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 80143a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a8:	4691      	mov	r9, r2
 80143aa:	461e      	mov	r6, r3
{
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
 80143ac:	4ab5      	ldr	r2, [pc, #724]	; (8014684 <_vsnprintf.constprop.0+0x2e0>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 80143ae:	b08f      	sub	sp, #60	; 0x3c
    if(!buffer) {
 80143b0:	4bb5      	ldr	r3, [pc, #724]	; (8014688 <_vsnprintf.constprop.0+0x2e4>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 80143b2:	460f      	mov	r7, r1
    if(!buffer) {
 80143b4:	4680      	mov	r8, r0
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 80143b6:	2500      	movs	r5, #0
    if(!buffer) {
 80143b8:	2800      	cmp	r0, #0
 80143ba:	bf0c      	ite	eq
 80143bc:	4693      	moveq	fp, r2
 80143be:	469b      	movne	fp, r3
    while(*format) {
 80143c0:	f899 0000 	ldrb.w	r0, [r9]
 80143c4:	b968      	cbnz	r0, 80143e2 <_vsnprintf.constprop.0+0x3e>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80143c6:	42bd      	cmp	r5, r7
 80143c8:	463b      	mov	r3, r7
 80143ca:	4641      	mov	r1, r8
 80143cc:	f04f 0000 	mov.w	r0, #0
 80143d0:	bf2c      	ite	cs
 80143d2:	f107 32ff 	addcs.w	r2, r7, #4294967295	; 0xffffffff
 80143d6:	462a      	movcc	r2, r5
 80143d8:	47d8      	blx	fp

    // return written chars without terminating \0
    return (int)idx;
}
 80143da:	4628      	mov	r0, r5
 80143dc:	b00f      	add	sp, #60	; 0x3c
 80143de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 80143e2:	2825      	cmp	r0, #37	; 0x25
 80143e4:	f109 0901 	add.w	r9, r9, #1
 80143e8:	d006      	beq.n	80143f8 <_vsnprintf.constprop.0+0x54>
                out(*format, buffer, idx++, maxlen);
 80143ea:	1c6c      	adds	r4, r5, #1
 80143ec:	462a      	mov	r2, r5
 80143ee:	463b      	mov	r3, r7
 80143f0:	4641      	mov	r1, r8
 80143f2:	47d8      	blx	fp
 80143f4:	4625      	mov	r5, r4
 80143f6:	e7e3      	b.n	80143c0 <_vsnprintf.constprop.0+0x1c>
        flags = 0U;
 80143f8:	2300      	movs	r3, #0
 80143fa:	e006      	b.n	801440a <_vsnprintf.constprop.0+0x66>
            switch(*format) {
 80143fc:	2a2d      	cmp	r2, #45	; 0x2d
 80143fe:	d015      	beq.n	801442c <_vsnprintf.constprop.0+0x88>
 8014400:	2a30      	cmp	r2, #48	; 0x30
 8014402:	d10c      	bne.n	801441e <_vsnprintf.constprop.0+0x7a>
                    flags |= FLAGS_ZEROPAD;
 8014404:	f043 0301 	orr.w	r3, r3, #1
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8014408:	4689      	mov	r9, r1
            switch(*format) {
 801440a:	4649      	mov	r1, r9
 801440c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014410:	2a2b      	cmp	r2, #43	; 0x2b
 8014412:	d00e      	beq.n	8014432 <_vsnprintf.constprop.0+0x8e>
 8014414:	d8f2      	bhi.n	80143fc <_vsnprintf.constprop.0+0x58>
 8014416:	2a20      	cmp	r2, #32
 8014418:	d00e      	beq.n	8014438 <_vsnprintf.constprop.0+0x94>
 801441a:	2a23      	cmp	r2, #35	; 0x23
 801441c:	d00f      	beq.n	801443e <_vsnprintf.constprop.0+0x9a>
        if(_is_digit(*format)) {
 801441e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8014422:	2809      	cmp	r0, #9
 8014424:	d82c      	bhi.n	8014480 <_vsnprintf.constprop.0+0xdc>
    unsigned int i = 0U;
 8014426:	2200      	movs	r2, #0
 8014428:	920a      	str	r2, [sp, #40]	; 0x28
 801442a:	e012      	b.n	8014452 <_vsnprintf.constprop.0+0xae>
                    flags |= FLAGS_LEFT;
 801442c:	f043 0302 	orr.w	r3, r3, #2
 8014430:	e7ea      	b.n	8014408 <_vsnprintf.constprop.0+0x64>
                    flags |= FLAGS_PLUS;
 8014432:	f043 0304 	orr.w	r3, r3, #4
 8014436:	e7e7      	b.n	8014408 <_vsnprintf.constprop.0+0x64>
                    flags |= FLAGS_SPACE;
 8014438:	f043 0308 	orr.w	r3, r3, #8
 801443c:	e7e4      	b.n	8014408 <_vsnprintf.constprop.0+0x64>
                    flags |= FLAGS_HASH;
 801443e:	f043 0310 	orr.w	r3, r3, #16
 8014442:	e7e1      	b.n	8014408 <_vsnprintf.constprop.0+0x64>
 8014444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014446:	240a      	movs	r4, #10
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8014448:	4689      	mov	r9, r1
 801444a:	fb04 2200 	mla	r2, r4, r0, r2
 801444e:	3a30      	subs	r2, #48	; 0x30
 8014450:	920a      	str	r2, [sp, #40]	; 0x28
    while(_is_digit(**str)) {
 8014452:	4649      	mov	r1, r9
 8014454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014458:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 801445c:	2809      	cmp	r0, #9
 801445e:	d9f1      	bls.n	8014444 <_vsnprintf.constprop.0+0xa0>
        if(*format == '.') {
 8014460:	f899 2000 	ldrb.w	r2, [r9]
 8014464:	2a2e      	cmp	r2, #46	; 0x2e
 8014466:	d13c      	bne.n	80144e2 <_vsnprintf.constprop.0+0x13e>
            if(_is_digit(*format)) {
 8014468:	f899 1001 	ldrb.w	r1, [r9, #1]
 801446c:	f109 0201 	add.w	r2, r9, #1
            flags |= FLAGS_PRECISION;
 8014470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            if(_is_digit(*format)) {
 8014474:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8014478:	2809      	cmp	r0, #9
 801447a:	d829      	bhi.n	80144d0 <_vsnprintf.constprop.0+0x12c>
    unsigned int i = 0U;
 801447c:	2400      	movs	r4, #0
 801447e:	e014      	b.n	80144aa <_vsnprintf.constprop.0+0x106>
        else if(*format == '*') {
 8014480:	2a2a      	cmp	r2, #42	; 0x2a
 8014482:	d10a      	bne.n	801449a <_vsnprintf.constprop.0+0xf6>
            const int w = va_arg(va, int);
 8014484:	6832      	ldr	r2, [r6, #0]
 8014486:	1d30      	adds	r0, r6, #4
 8014488:	4689      	mov	r9, r1
            if(w < 0) {
 801448a:	2a00      	cmp	r2, #0
            const int w = va_arg(va, int);
 801448c:	4606      	mov	r6, r0
                width = (unsigned int) - w;
 801448e:	bfbc      	itt	lt
 8014490:	4252      	neglt	r2, r2
                flags |= FLAGS_LEFT;    // reverse padding
 8014492:	f043 0302 	orrlt.w	r3, r3, #2
                width = (unsigned int)w;
 8014496:	920a      	str	r2, [sp, #40]	; 0x28
 8014498:	e7e2      	b.n	8014460 <_vsnprintf.constprop.0+0xbc>
        width = 0U;
 801449a:	2200      	movs	r2, #0
 801449c:	920a      	str	r2, [sp, #40]	; 0x28
 801449e:	e7df      	b.n	8014460 <_vsnprintf.constprop.0+0xbc>
 80144a0:	220a      	movs	r2, #10
 80144a2:	fb02 1404 	mla	r4, r2, r4, r1
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80144a6:	4602      	mov	r2, r0
 80144a8:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 80144aa:	4610      	mov	r0, r2
 80144ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 80144b0:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
 80144b4:	f1bc 0f09 	cmp.w	ip, #9
 80144b8:	d9f2      	bls.n	80144a0 <_vsnprintf.constprop.0+0xfc>
        switch(*format) {
 80144ba:	7811      	ldrb	r1, [r2, #0]
 80144bc:	1c50      	adds	r0, r2, #1
 80144be:	296c      	cmp	r1, #108	; 0x6c
 80144c0:	d019      	beq.n	80144f6 <_vsnprintf.constprop.0+0x152>
 80144c2:	d811      	bhi.n	80144e8 <_vsnprintf.constprop.0+0x144>
 80144c4:	2968      	cmp	r1, #104	; 0x68
 80144c6:	d01d      	beq.n	8014504 <_vsnprintf.constprop.0+0x160>
 80144c8:	296a      	cmp	r1, #106	; 0x6a
 80144ca:	d02f      	beq.n	801452c <_vsnprintf.constprop.0+0x188>
 80144cc:	4610      	mov	r0, r2
 80144ce:	e01e      	b.n	801450e <_vsnprintf.constprop.0+0x16a>
            else if(*format == '*') {
 80144d0:	292a      	cmp	r1, #42	; 0x2a
 80144d2:	d107      	bne.n	80144e4 <_vsnprintf.constprop.0+0x140>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 80144d4:	6834      	ldr	r4, [r6, #0]
                format++;
 80144d6:	f109 0202 	add.w	r2, r9, #2
                const int prec = (int)va_arg(va, int);
 80144da:	3604      	adds	r6, #4
                precision = prec > 0 ? (unsigned int)prec : 0U;
 80144dc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80144e0:	e7eb      	b.n	80144ba <_vsnprintf.constprop.0+0x116>
        if(*format == '.') {
 80144e2:	464a      	mov	r2, r9
        precision = 0U;
 80144e4:	2400      	movs	r4, #0
 80144e6:	e7e8      	b.n	80144ba <_vsnprintf.constprop.0+0x116>
        switch(*format) {
 80144e8:	2974      	cmp	r1, #116	; 0x74
 80144ea:	d001      	beq.n	80144f0 <_vsnprintf.constprop.0+0x14c>
 80144ec:	297a      	cmp	r1, #122	; 0x7a
 80144ee:	d1ed      	bne.n	80144cc <_vsnprintf.constprop.0+0x128>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80144f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80144f4:	e00b      	b.n	801450e <_vsnprintf.constprop.0+0x16a>
                if(*format == 'l') {
 80144f6:	7851      	ldrb	r1, [r2, #1]
 80144f8:	296c      	cmp	r1, #108	; 0x6c
 80144fa:	d1f9      	bne.n	80144f0 <_vsnprintf.constprop.0+0x14c>
                    flags |= FLAGS_LONG_LONG;
 80144fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
                    format++;
 8014500:	1c90      	adds	r0, r2, #2
 8014502:	e004      	b.n	801450e <_vsnprintf.constprop.0+0x16a>
                if(*format == 'h') {
 8014504:	7851      	ldrb	r1, [r2, #1]
 8014506:	2968      	cmp	r1, #104	; 0x68
 8014508:	d00d      	beq.n	8014526 <_vsnprintf.constprop.0+0x182>
                flags |= FLAGS_SHORT;
 801450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        switch(*format) {
 801450e:	4681      	mov	r9, r0
 8014510:	f819 0b01 	ldrb.w	r0, [r9], #1
 8014514:	2869      	cmp	r0, #105	; 0x69
 8014516:	d01d      	beq.n	8014554 <_vsnprintf.constprop.0+0x1b0>
 8014518:	d856      	bhi.n	80145c8 <_vsnprintf.constprop.0+0x224>
 801451a:	2862      	cmp	r0, #98	; 0x62
 801451c:	d109      	bne.n	8014532 <_vsnprintf.constprop.0+0x18e>
                        base =  2U;
 801451e:	2202      	movs	r2, #2
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8014520:	f023 030c 	bic.w	r3, r3, #12
 8014524:	e01e      	b.n	8014564 <_vsnprintf.constprop.0+0x1c0>
                    flags |= FLAGS_CHAR;
 8014526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801452a:	e7e9      	b.n	8014500 <_vsnprintf.constprop.0+0x15c>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801452c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014530:	e7ed      	b.n	801450e <_vsnprintf.constprop.0+0x16a>
        switch(*format) {
 8014532:	d809      	bhi.n	8014548 <_vsnprintf.constprop.0+0x1a4>
 8014534:	2825      	cmp	r0, #37	; 0x25
 8014536:	f43f af58 	beq.w	80143ea <_vsnprintf.constprop.0+0x46>
 801453a:	2858      	cmp	r0, #88	; 0x58
 801453c:	f47f af55 	bne.w	80143ea <_vsnprintf.constprop.0+0x46>
                        flags |= FLAGS_UPPERCASE;
 8014540:	f043 0320 	orr.w	r3, r3, #32
                        base = 16U;
 8014544:	2210      	movs	r2, #16
 8014546:	e7eb      	b.n	8014520 <_vsnprintf.constprop.0+0x17c>
        switch(*format) {
 8014548:	2863      	cmp	r0, #99	; 0x63
 801454a:	f000 80b0 	beq.w	80146ae <_vsnprintf.constprop.0+0x30a>
 801454e:	2864      	cmp	r0, #100	; 0x64
 8014550:	f47f af4b 	bne.w	80143ea <_vsnprintf.constprop.0+0x46>
                    if((*format != 'i') && (*format != 'd')) {
 8014554:	2869      	cmp	r0, #105	; 0x69
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 8014556:	f023 0310 	bic.w	r3, r3, #16
                        base = 10U;
 801455a:	f04f 020a 	mov.w	r2, #10
                    if((*format != 'i') && (*format != 'd')) {
 801455e:	d001      	beq.n	8014564 <_vsnprintf.constprop.0+0x1c0>
 8014560:	2864      	cmp	r0, #100	; 0x64
 8014562:	d1dd      	bne.n	8014520 <_vsnprintf.constprop.0+0x17c>
                    if(flags & FLAGS_PRECISION) {
 8014564:	0559      	lsls	r1, r3, #21
                        flags &= ~FLAGS_ZEROPAD;
 8014566:	bf48      	it	mi
 8014568:	f023 0301 	bicmi.w	r3, r3, #1
                    if((*format == 'i') || (*format == 'd')) {
 801456c:	2869      	cmp	r0, #105	; 0x69
 801456e:	f403 7100 	and.w	r1, r3, #512	; 0x200
 8014572:	d001      	beq.n	8014578 <_vsnprintf.constprop.0+0x1d4>
 8014574:	2864      	cmp	r0, #100	; 0x64
 8014576:	d167      	bne.n	8014648 <_vsnprintf.constprop.0+0x2a4>
                        if(flags & FLAGS_LONG_LONG) {
 8014578:	2900      	cmp	r1, #0
 801457a:	d043      	beq.n	8014604 <_vsnprintf.constprop.0+0x260>
                            const long long value = va_arg(va, long long);
 801457c:	3607      	adds	r6, #7
 801457e:	f026 0607 	bic.w	r6, r6, #7
 8014582:	e9d6 1000 	ldrd	r1, r0, [r6]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8014586:	9308      	str	r3, [sp, #32]
                            const long long value = va_arg(va, long long);
 8014588:	f106 0a08 	add.w	sl, r6, #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 801458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801458e:	2900      	cmp	r1, #0
 8014590:	9204      	str	r2, [sp, #16]
 8014592:	460a      	mov	r2, r1
 8014594:	f170 0100 	sbcs.w	r1, r0, #0
 8014598:	e9cd 4306 	strd	r4, r3, [sp, #24]
 801459c:	f04f 0300 	mov.w	r3, #0
 80145a0:	9305      	str	r3, [sp, #20]
 80145a2:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 80145a6:	9302      	str	r3, [sp, #8]
 80145a8:	4603      	mov	r3, r0
 80145aa:	da02      	bge.n	80145b2 <_vsnprintf.constprop.0+0x20e>
 80145ac:	4252      	negs	r2, r2
 80145ae:	eb60 0340 	sbc.w	r3, r0, r0, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80145b2:	4641      	mov	r1, r8
 80145b4:	4658      	mov	r0, fp
 80145b6:	e9cd 2300 	strd	r2, r3, [sp]
 80145ba:	463b      	mov	r3, r7
 80145bc:	462a      	mov	r2, r5
 80145be:	f7ff fea3 	bl	8014308 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80145c2:	4605      	mov	r5, r0
        out = _out_null;
 80145c4:	4656      	mov	r6, sl
 80145c6:	e6fb      	b.n	80143c0 <_vsnprintf.constprop.0+0x1c>
        switch(*format) {
 80145c8:	2873      	cmp	r0, #115	; 0x73
 80145ca:	f000 80a5 	beq.w	8014718 <_vsnprintf.constprop.0+0x374>
 80145ce:	d813      	bhi.n	80145f8 <_vsnprintf.constprop.0+0x254>
 80145d0:	286f      	cmp	r0, #111	; 0x6f
 80145d2:	d101      	bne.n	80145d8 <_vsnprintf.constprop.0+0x234>
                        base =  8U;
 80145d4:	2208      	movs	r2, #8
 80145d6:	e7a3      	b.n	8014520 <_vsnprintf.constprop.0+0x17c>
        switch(*format) {
 80145d8:	2870      	cmp	r0, #112	; 0x70
 80145da:	f47f af06 	bne.w	80143ea <_vsnprintf.constprop.0+0x46>
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80145de:	f043 0321 	orr.w	r3, r3, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
 80145e2:	2210      	movs	r2, #16
 80145e4:	f106 0a04 	add.w	sl, r6, #4
 80145e8:	9305      	str	r3, [sp, #20]
 80145ea:	2308      	movs	r3, #8
 80145ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80145f0:	2300      	movs	r3, #0
 80145f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80145f6:	e042      	b.n	801467e <_vsnprintf.constprop.0+0x2da>
        switch(*format) {
 80145f8:	2875      	cmp	r0, #117	; 0x75
 80145fa:	d0ab      	beq.n	8014554 <_vsnprintf.constprop.0+0x1b0>
 80145fc:	2878      	cmp	r0, #120	; 0x78
 80145fe:	f47f aef4 	bne.w	80143ea <_vsnprintf.constprop.0+0x46>
 8014602:	e79f      	b.n	8014544 <_vsnprintf.constprop.0+0x1a0>
                        else if(flags & FLAGS_LONG) {
 8014604:	05d9      	lsls	r1, r3, #23
 8014606:	f106 0a04 	add.w	sl, r6, #4
 801460a:	d513      	bpl.n	8014634 <_vsnprintf.constprop.0+0x290>
                            const long value = va_arg(va, long);
 801460c:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 801460e:	9305      	str	r3, [sp, #20]
 8014610:	2900      	cmp	r1, #0
 8014612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014614:	9202      	str	r2, [sp, #8]
 8014616:	e9cd 4303 	strd	r4, r3, [sp, #12]
 801461a:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 801461e:	bfb8      	it	lt
 8014620:	4249      	neglt	r1, r1
 8014622:	9301      	str	r3, [sp, #4]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8014624:	9100      	str	r1, [sp, #0]
 8014626:	463b      	mov	r3, r7
 8014628:	462a      	mov	r2, r5
 801462a:	4641      	mov	r1, r8
 801462c:	4658      	mov	r0, fp
 801462e:	f7ff fe2b 	bl	8014288 <_ntoa_long>
 8014632:	e7c6      	b.n	80145c2 <_vsnprintf.constprop.0+0x21e>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 8014634:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014638:	6831      	ldr	r1, [r6, #0]
 801463a:	d001      	beq.n	8014640 <_vsnprintf.constprop.0+0x29c>
 801463c:	b2c9      	uxtb	r1, r1
 801463e:	e7e6      	b.n	801460e <_vsnprintf.constprop.0+0x26a>
                                                                                                                                       int) : va_arg(va, int);
 8014640:	061e      	lsls	r6, r3, #24
 8014642:	bf48      	it	mi
 8014644:	b209      	sxthmi	r1, r1
 8014646:	e7e2      	b.n	801460e <_vsnprintf.constprop.0+0x26a>
                        if(flags & FLAGS_LONG_LONG) {
 8014648:	b179      	cbz	r1, 801466a <_vsnprintf.constprop.0+0x2c6>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 801464a:	9308      	str	r3, [sp, #32]
 801464c:	3607      	adds	r6, #7
 801464e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014650:	f026 0607 	bic.w	r6, r6, #7
 8014654:	9204      	str	r2, [sp, #16]
 8014656:	e9cd 4306 	strd	r4, r3, [sp, #24]
 801465a:	2300      	movs	r3, #0
 801465c:	f106 0a08 	add.w	sl, r6, #8
 8014660:	9305      	str	r3, [sp, #20]
 8014662:	9302      	str	r3, [sp, #8]
 8014664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014668:	e7a3      	b.n	80145b2 <_vsnprintf.constprop.0+0x20e>
                        else if(flags & FLAGS_LONG) {
 801466a:	05d8      	lsls	r0, r3, #23
 801466c:	f106 0a04 	add.w	sl, r6, #4
 8014670:	d50c      	bpl.n	801468c <_vsnprintf.constprop.0+0x2e8>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8014672:	9305      	str	r3, [sp, #20]
 8014674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014676:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801467a:	e9cd 4303 	strd	r4, r3, [sp, #12]
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
 801467e:	6833      	ldr	r3, [r6, #0]
 8014680:	9300      	str	r3, [sp, #0]
 8014682:	e7d0      	b.n	8014626 <_vsnprintf.constprop.0+0x282>
 8014684:	08014139 	.word	0x08014139
 8014688:	08014131 	.word	0x08014131
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801468c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014690:	6831      	ldr	r1, [r6, #0]
 8014692:	d008      	beq.n	80146a6 <_vsnprintf.constprop.0+0x302>
 8014694:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8014696:	9305      	str	r3, [sp, #20]
 8014698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801469a:	9202      	str	r2, [sp, #8]
 801469c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80146a0:	2300      	movs	r3, #0
 80146a2:	9301      	str	r3, [sp, #4]
 80146a4:	e7be      	b.n	8014624 <_vsnprintf.constprop.0+0x280>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80146a6:	0618      	lsls	r0, r3, #24
 80146a8:	bf48      	it	mi
 80146aa:	b289      	uxthmi	r1, r1
 80146ac:	e7f3      	b.n	8014696 <_vsnprintf.constprop.0+0x2f2>
                    if(!(flags & FLAGS_LEFT)) {
 80146ae:	f013 0302 	ands.w	r3, r3, #2
 80146b2:	930c      	str	r3, [sp, #48]	; 0x30
 80146b4:	d026      	beq.n	8014704 <_vsnprintf.constprop.0+0x360>
                    unsigned int l = 1U;
 80146b6:	2301      	movs	r3, #1
                    if(!(flags & FLAGS_LEFT)) {
 80146b8:	46aa      	mov	sl, r5
                    unsigned int l = 1U;
 80146ba:	930b      	str	r3, [sp, #44]	; 0x2c
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80146bc:	1d33      	adds	r3, r6, #4
 80146be:	4652      	mov	r2, sl
 80146c0:	4641      	mov	r1, r8
 80146c2:	7830      	ldrb	r0, [r6, #0]
 80146c4:	930d      	str	r3, [sp, #52]	; 0x34
 80146c6:	463b      	mov	r3, r7
 80146c8:	47d8      	blx	fp
                    if(flags & FLAGS_LEFT) {
 80146ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80146cc:	f10a 0501 	add.w	r5, sl, #1
                    if(flags & FLAGS_LEFT) {
 80146d0:	b143      	cbz	r3, 80146e4 <_vsnprintf.constprop.0+0x340>
 80146d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146d4:	3b01      	subs	r3, #1
 80146d6:	eba3 0a0a 	sub.w	sl, r3, sl
                        while(l++ < width) {
 80146da:	eb05 030a 	add.w	r3, r5, sl
 80146de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d311      	bcc.n	8014708 <_vsnprintf.constprop.0+0x364>
                    const char * p = va_arg(va, char *);
 80146e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80146e6:	e66b      	b.n	80143c0 <_vsnprintf.constprop.0+0x1c>
                            out(' ', buffer, idx++, maxlen);
 80146e8:	463b      	mov	r3, r7
 80146ea:	4652      	mov	r2, sl
 80146ec:	4641      	mov	r1, r8
 80146ee:	2020      	movs	r0, #32
 80146f0:	47d8      	blx	fp
 80146f2:	1ca3      	adds	r3, r4, #2
 80146f4:	eb05 0a04 	add.w	sl, r5, r4
 80146f8:	3401      	adds	r4, #1
 80146fa:	930b      	str	r3, [sp, #44]	; 0x2c
                        while(l++ < width) {
 80146fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146fe:	429c      	cmp	r4, r3
 8014700:	d3f2      	bcc.n	80146e8 <_vsnprintf.constprop.0+0x344>
 8014702:	e7db      	b.n	80146bc <_vsnprintf.constprop.0+0x318>
                    if(!(flags & FLAGS_LEFT)) {
 8014704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014706:	e7f4      	b.n	80146f2 <_vsnprintf.constprop.0+0x34e>
                            out(' ', buffer, idx++, maxlen);
 8014708:	1c6c      	adds	r4, r5, #1
 801470a:	462a      	mov	r2, r5
 801470c:	463b      	mov	r3, r7
 801470e:	4641      	mov	r1, r8
 8014710:	2020      	movs	r0, #32
 8014712:	4625      	mov	r5, r4
 8014714:	47d8      	blx	fp
 8014716:	e7e0      	b.n	80146da <_vsnprintf.constprop.0+0x336>
                    const char * p = va_arg(va, char *);
 8014718:	1d32      	adds	r2, r6, #4
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801471a:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 801471c:	6836      	ldr	r6, [r6, #0]
 801471e:	920d      	str	r2, [sp, #52]	; 0x34
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8014720:	bf14      	ite	ne
 8014722:	4622      	movne	r2, r4
 8014724:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8014728:	46b2      	mov	sl, r6
 801472a:	4432      	add	r2, r6
    for(s = str; *s && maxsize--; ++s);
 801472c:	f89a 1000 	ldrb.w	r1, [sl]
 8014730:	b109      	cbz	r1, 8014736 <_vsnprintf.constprop.0+0x392>
 8014732:	4552      	cmp	r2, sl
 8014734:	d10f      	bne.n	8014756 <_vsnprintf.constprop.0+0x3b2>
                    if(flags & FLAGS_PRECISION) {
 8014736:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
    return (unsigned int)(s - str);
 801473a:	ebaa 0a06 	sub.w	sl, sl, r6
                    if(flags & FLAGS_PRECISION) {
 801473e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014740:	d002      	beq.n	8014748 <_vsnprintf.constprop.0+0x3a4>
                        l = (l < precision ? l : precision);
 8014742:	45a2      	cmp	sl, r4
 8014744:	bf28      	it	cs
 8014746:	46a2      	movcs	sl, r4
                    if(!(flags & FLAGS_LEFT)) {
 8014748:	f013 0302 	ands.w	r3, r3, #2
 801474c:	930c      	str	r3, [sp, #48]	; 0x30
 801474e:	d011      	beq.n	8014774 <_vsnprintf.constprop.0+0x3d0>
 8014750:	462a      	mov	r2, r5
 8014752:	1b95      	subs	r5, r2, r6
 8014754:	e015      	b.n	8014782 <_vsnprintf.constprop.0+0x3de>
    for(s = str; *s && maxsize--; ++s);
 8014756:	f10a 0a01 	add.w	sl, sl, #1
 801475a:	e7e7      	b.n	801472c <_vsnprintf.constprop.0+0x388>
                            out(' ', buffer, idx++, maxlen);
 801475c:	463b      	mov	r3, r7
 801475e:	4641      	mov	r1, r8
 8014760:	2020      	movs	r0, #32
 8014762:	47d8      	blx	fp
                        while(l++ < width) {
 8014764:	4653      	mov	r3, sl
 8014766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014768:	18ea      	adds	r2, r5, r3
 801476a:	f103 0a01 	add.w	sl, r3, #1
 801476e:	4299      	cmp	r1, r3
 8014770:	d8f4      	bhi.n	801475c <_vsnprintf.constprop.0+0x3b8>
 8014772:	e7ee      	b.n	8014752 <_vsnprintf.constprop.0+0x3ae>
                    if(!(flags & FLAGS_LEFT)) {
 8014774:	4653      	mov	r3, sl
 8014776:	1aed      	subs	r5, r5, r3
 8014778:	e7f5      	b.n	8014766 <_vsnprintf.constprop.0+0x3c2>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801477a:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 801477c:	463b      	mov	r3, r7
 801477e:	4641      	mov	r1, r8
 8014780:	47d8      	blx	fp
 8014782:	19aa      	adds	r2, r5, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8014784:	f816 0b01 	ldrb.w	r0, [r6], #1
 8014788:	b128      	cbz	r0, 8014796 <_vsnprintf.constprop.0+0x3f2>
 801478a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801478c:	2b00      	cmp	r3, #0
 801478e:	d0f5      	beq.n	801477c <_vsnprintf.constprop.0+0x3d8>
 8014790:	1e63      	subs	r3, r4, #1
 8014792:	2c00      	cmp	r4, #0
 8014794:	d1f1      	bne.n	801477a <_vsnprintf.constprop.0+0x3d6>
                    if(flags & FLAGS_LEFT) {
 8014796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014798:	4615      	mov	r5, r2
 801479a:	2b00      	cmp	r3, #0
 801479c:	d0a2      	beq.n	80146e4 <_vsnprintf.constprop.0+0x340>
 801479e:	ebaa 0a02 	sub.w	sl, sl, r2
 80147a2:	e006      	b.n	80147b2 <_vsnprintf.constprop.0+0x40e>
                            out(' ', buffer, idx++, maxlen);
 80147a4:	1c6e      	adds	r6, r5, #1
 80147a6:	462a      	mov	r2, r5
 80147a8:	463b      	mov	r3, r7
 80147aa:	4641      	mov	r1, r8
 80147ac:	4635      	mov	r5, r6
 80147ae:	2020      	movs	r0, #32
 80147b0:	47d8      	blx	fp
                        while(l++ < width) {
 80147b2:	eb0a 0305 	add.w	r3, sl, r5
 80147b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d3f3      	bcc.n	80147a4 <_vsnprintf.constprop.0+0x400>
 80147bc:	e792      	b.n	80146e4 <_vsnprintf.constprop.0+0x340>
 80147be:	bf00      	nop

080147c0 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 80147c0:	b40c      	push	{r2, r3}
 80147c2:	b507      	push	{r0, r1, r2, lr}
 80147c4:	ab04      	add	r3, sp, #16
 80147c6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, format);
 80147ca:	9301      	str	r3, [sp, #4]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 80147cc:	f7ff fdea 	bl	80143a4 <_vsnprintf.constprop.0>
    va_end(va);
    return ret;
}
 80147d0:	b003      	add	sp, #12
 80147d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80147d6:	b002      	add	sp, #8
 80147d8:	4770      	bx	lr

080147da <lv_vsnprintf>:

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
    return _vsnprintf(_out_buffer, buffer, count, format, va);
 80147da:	f7ff bde3 	b.w	80143a4 <_vsnprintf.constprop.0>
	...

080147e0 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 80147e0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 80147e2:	2118      	movs	r1, #24
 80147e4:	4803      	ldr	r0, [pc, #12]	; (80147f4 <_lv_task_core_init+0x14>)
 80147e6:	f7fe fff6 	bl	80137d6 <_lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 80147ea:	4b03      	ldr	r3, [pc, #12]	; (80147f8 <_lv_task_core_init+0x18>)
 80147ec:	2201      	movs	r2, #1
 80147ee:	701a      	strb	r2, [r3, #0]
}
 80147f0:	bd08      	pop	{r3, pc}
 80147f2:	bf00      	nop
 80147f4:	20028be0 	.word	0x20028be0
 80147f8:	200288c0 	.word	0x200288c0

080147fc <lv_task_create>:
{
 80147fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014800:	4607      	mov	r7, r0
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014802:	482c      	ldr	r0, [pc, #176]	; (80148b4 <lv_task_create+0xb8>)
{
 8014804:	4688      	mov	r8, r1
 8014806:	4616      	mov	r6, r2
 8014808:	4699      	mov	r9, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801480a:	f7ff f823 	bl	8013854 <_lv_ll_get_head>
    if(NULL == tmp) {
 801480e:	4605      	mov	r5, r0
 8014810:	b198      	cbz	r0, 801483a <lv_task_create+0x3e>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014812:	4c28      	ldr	r4, [pc, #160]	; (80148b4 <lv_task_create+0xb8>)
            if(tmp->prio <= prio) {
 8014814:	7d2b      	ldrb	r3, [r5, #20]
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014816:	4629      	mov	r1, r5
            if(tmp->prio <= prio) {
 8014818:	f003 0307 	and.w	r3, r3, #7
 801481c:	42b3      	cmp	r3, r6
 801481e:	dc1e      	bgt.n	801485e <lv_task_create+0x62>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8014820:	4824      	ldr	r0, [pc, #144]	; (80148b4 <lv_task_create+0xb8>)
 8014822:	f7ff f826 	bl	8013872 <_lv_ll_ins_prev>
 8014826:	4604      	mov	r4, r0
                LV_ASSERT_MEM(new_task);
 8014828:	f7fe fee6 	bl	80135f8 <lv_debug_check_null>
 801482c:	4603      	mov	r3, r0
 801482e:	b988      	cbnz	r0, 8014854 <lv_task_create+0x58>
 8014830:	4622      	mov	r2, r4
 8014832:	4821      	ldr	r0, [pc, #132]	; (80148b8 <lv_task_create+0xbc>)
 8014834:	f7fe fee4 	bl	8013600 <lv_debug_log_error>
 8014838:	e7fe      	b.n	8014838 <lv_task_create+0x3c>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 801483a:	481e      	ldr	r0, [pc, #120]	; (80148b4 <lv_task_create+0xb8>)
 801483c:	f7fe ffd3 	bl	80137e6 <_lv_ll_ins_head>
 8014840:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
 8014842:	f7fe fed9 	bl	80135f8 <lv_debug_check_null>
 8014846:	4603      	mov	r3, r0
 8014848:	b920      	cbnz	r0, 8014854 <lv_task_create+0x58>
 801484a:	4622      	mov	r2, r4
 801484c:	481a      	ldr	r0, [pc, #104]	; (80148b8 <lv_task_create+0xbc>)
 801484e:	f7fe fed7 	bl	8013600 <lv_debug_log_error>
 8014852:	e7fe      	b.n	8014852 <lv_task_create+0x56>
        if(new_task == NULL) return NULL;
 8014854:	b9bc      	cbnz	r4, 8014886 <lv_task_create+0x8a>
 8014856:	2400      	movs	r4, #0
}
 8014858:	4620      	mov	r0, r4
 801485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801485e:	4620      	mov	r0, r4
 8014860:	f7fe fffe 	bl	8013860 <_lv_ll_get_next>
        } while(tmp != NULL);
 8014864:	4605      	mov	r5, r0
 8014866:	2800      	cmp	r0, #0
 8014868:	d1d4      	bne.n	8014814 <lv_task_create+0x18>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801486a:	4812      	ldr	r0, [pc, #72]	; (80148b4 <lv_task_create+0xb8>)
 801486c:	f7fe ffd6 	bl	801381c <_lv_ll_ins_tail>
 8014870:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
 8014872:	f7fe fec1 	bl	80135f8 <lv_debug_check_null>
 8014876:	2800      	cmp	r0, #0
 8014878:	d1ec      	bne.n	8014854 <lv_task_create+0x58>
 801487a:	4622      	mov	r2, r4
 801487c:	462b      	mov	r3, r5
 801487e:	480e      	ldr	r0, [pc, #56]	; (80148b8 <lv_task_create+0xbc>)
 8014880:	f7fe febe 	bl	8013600 <lv_debug_log_error>
 8014884:	e7fe      	b.n	8014884 <lv_task_create+0x88>
    new_task->prio    = prio;
 8014886:	7d23      	ldrb	r3, [r4, #20]
    task_list_changed = true;
 8014888:	f04f 0a01 	mov.w	sl, #1
 801488c:	4d0b      	ldr	r5, [pc, #44]	; (80148bc <lv_task_create+0xc0>)
    new_task->prio    = prio;
 801488e:	f366 0302 	bfi	r3, r6, #0, #3
    new_task->period  = period;
 8014892:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
 8014896:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
 8014898:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
 801489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    task_list_changed = true;
 801489e:	f885 a001 	strb.w	sl, [r5, #1]
    new_task->repeat_count = -1;
 80148a2:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 80148a4:	f7fe fa4a 	bl	8012d3c <lv_tick_get>
    new_task->user_data = user_data;
 80148a8:	f8c4 900c 	str.w	r9, [r4, #12]
    new_task->last_run = lv_tick_get();
 80148ac:	6060      	str	r0, [r4, #4]
    task_created = true;
 80148ae:	f885 a002 	strb.w	sl, [r5, #2]
    return new_task;
 80148b2:	e7d1      	b.n	8014858 <lv_task_create+0x5c>
 80148b4:	20028be0 	.word	0x20028be0
 80148b8:	0802c346 	.word	0x0802c346
 80148bc:	200288c0 	.word	0x200288c0

080148c0 <lv_task_del>:
{
 80148c0:	b570      	push	{r4, r5, r6, lr}
 80148c2:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 80148c4:	4601      	mov	r1, r0
    task_list_changed = true;
 80148c6:	4d07      	ldr	r5, [pc, #28]	; (80148e4 <lv_task_del+0x24>)
 80148c8:	2601      	movs	r6, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 80148ca:	4807      	ldr	r0, [pc, #28]	; (80148e8 <lv_task_del+0x28>)
 80148cc:	f7fe ffff 	bl	80138ce <_lv_ll_remove>
    lv_mem_free(task);
 80148d0:	4620      	mov	r0, r4
    task_list_changed = true;
 80148d2:	706e      	strb	r6, [r5, #1]
    lv_mem_free(task);
 80148d4:	f7ff f986 	bl	8013be4 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 80148d8:	4b04      	ldr	r3, [pc, #16]	; (80148ec <lv_task_del+0x2c>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	42a3      	cmp	r3, r4
 80148de:	bf08      	it	eq
 80148e0:	70ee      	strbeq	r6, [r5, #3]
}
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
 80148e4:	200288c0 	.word	0x200288c0
 80148e8:	20028be0 	.word	0x20028be0
 80148ec:	20028cb0 	.word	0x20028cb0

080148f0 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 80148f0:	b510      	push	{r4, lr}
 80148f2:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 80148f4:	6840      	ldr	r0, [r0, #4]
 80148f6:	f7fe fa2b 	bl	8012d50 <lv_tick_elaps>
    if(elp >= task->period)
 80148fa:	6823      	ldr	r3, [r4, #0]
 80148fc:	4298      	cmp	r0, r3
 80148fe:	d318      	bcc.n	8014932 <lv_task_exec+0x42>
        task->last_run = lv_tick_get();
 8014900:	f7fe fa1c 	bl	8012d3c <lv_tick_get>
        if(task->task_cb) task->task_cb(task);
 8014904:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 8014906:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
 8014908:	b10b      	cbz	r3, 801490e <lv_task_exec+0x1e>
 801490a:	4620      	mov	r0, r4
 801490c:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801490e:	4b0a      	ldr	r3, [pc, #40]	; (8014938 <lv_task_exec+0x48>)
 8014910:	78db      	ldrb	r3, [r3, #3]
 8014912:	b10b      	cbz	r3, 8014918 <lv_task_exec+0x28>
                lv_task_del(task);
 8014914:	2001      	movs	r0, #1
}
 8014916:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
 8014918:	6923      	ldr	r3, [r4, #16]
 801491a:	2b00      	cmp	r3, #0
                task->repeat_count--;
 801491c:	bfc4      	itt	gt
 801491e:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
 8014922:	6123      	strgt	r3, [r4, #16]
            if(task->repeat_count == 0) {
 8014924:	6923      	ldr	r3, [r4, #16]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d1f4      	bne.n	8014914 <lv_task_exec+0x24>
                lv_task_del(task);
 801492a:	4620      	mov	r0, r4
 801492c:	f7ff ffc8 	bl	80148c0 <lv_task_del>
 8014930:	e7f0      	b.n	8014914 <lv_task_exec+0x24>
    bool exec = false;
 8014932:	2000      	movs	r0, #0
 8014934:	e7ef      	b.n	8014916 <lv_task_exec+0x26>
 8014936:	bf00      	nop
 8014938:	200288c0 	.word	0x200288c0

0801493c <lv_task_handler>:
    if(already_running) return 1;
 801493c:	4b4a      	ldr	r3, [pc, #296]	; (8014a68 <lv_task_handler+0x12c>)
{
 801493e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(already_running) return 1;
 8014942:	791e      	ldrb	r6, [r3, #4]
 8014944:	461c      	mov	r4, r3
 8014946:	2501      	movs	r5, #1
 8014948:	b91e      	cbnz	r6, 8014952 <lv_task_handler+0x16>
    if(lv_task_run == false) {
 801494a:	781a      	ldrb	r2, [r3, #0]
    already_running = true;
 801494c:	711d      	strb	r5, [r3, #4]
    if(lv_task_run == false) {
 801494e:	b91a      	cbnz	r2, 8014958 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
 8014950:	711a      	strb	r2, [r3, #4]
}
 8014952:	4628      	mov	r0, r5
 8014954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014958:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8014a70 <lv_task_handler+0x134>
    uint32_t handler_start = lv_tick_get();
 801495c:	f7fe f9ee 	bl	8012d3c <lv_tick_get>
    lv_task_t * task_interrupter = NULL;
 8014960:	4635      	mov	r5, r6
    uint32_t handler_start = lv_tick_get();
 8014962:	4607      	mov	r7, r0
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014964:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8014a6c <lv_task_handler+0x130>
 8014968:	4646      	mov	r6, r8
        task_deleted             = false;
 801496a:	2300      	movs	r3, #0
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801496c:	4648      	mov	r0, r9
        task_deleted             = false;
 801496e:	70e3      	strb	r3, [r4, #3]
        task_created             = false;
 8014970:	70a3      	strb	r3, [r4, #2]
        task_list_changed        = false;
 8014972:	7063      	strb	r3, [r4, #1]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014974:	f7fe ff6e 	bl	8013854 <_lv_ll_get_head>
 8014978:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
 801497c:	6831      	ldr	r1, [r6, #0]
 801497e:	b951      	cbnz	r1, 8014996 <lv_task_handler+0x5a>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014980:	483a      	ldr	r0, [pc, #232]	; (8014a6c <lv_task_handler+0x130>)
    uint32_t time_till_next = LV_NO_TASK_READY;
 8014982:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8014986:	f7fe ff65 	bl	8013854 <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 801498a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8014a6c <lv_task_handler+0x130>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801498e:	4606      	mov	r6, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 8014990:	e044      	b.n	8014a1c <lv_task_handler+0xe0>
                task_interrupter = NULL;
 8014992:	461d      	mov	r5, r3
 8014994:	e7e9      	b.n	801496a <lv_task_handler+0x2e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8014996:	4648      	mov	r0, r9
 8014998:	f7fe ff62 	bl	8013860 <_lv_ll_get_next>
 801499c:	4682      	mov	sl, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 801499e:	6830      	ldr	r0, [r6, #0]
 80149a0:	7d03      	ldrb	r3, [r0, #20]
 80149a2:	f013 0207 	ands.w	r2, r3, #7
 80149a6:	d0eb      	beq.n	8014980 <lv_task_handler+0x44>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 80149a8:	42a8      	cmp	r0, r5
 80149aa:	d103      	bne.n	80149b4 <lv_task_handler+0x78>
                LV_GC_ROOT(_lv_task_act) = next;
 80149ac:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 80149b0:	2500      	movs	r5, #0
                continue; /*Load the next task*/
 80149b2:	e7e3      	b.n	801497c <lv_task_handler+0x40>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 80149b4:	2a05      	cmp	r2, #5
 80149b6:	d10d      	bne.n	80149d4 <lv_task_handler+0x98>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 80149b8:	f7ff ff9a 	bl	80148f0 <lv_task_exec>
            if(task_created || task_deleted) {
 80149bc:	78a3      	ldrb	r3, [r4, #2]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1de      	bne.n	8014980 <lv_task_handler+0x44>
 80149c2:	78e3      	ldrb	r3, [r4, #3]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1db      	bne.n	8014980 <lv_task_handler+0x44>
            if(task_list_changed) {
 80149c8:	7862      	ldrb	r2, [r4, #1]
 80149ca:	2a00      	cmp	r2, #0
 80149cc:	d1e1      	bne.n	8014992 <lv_task_handler+0x56>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 80149ce:	f8c6 a000 	str.w	sl, [r6]
 80149d2:	e7d3      	b.n	801497c <lv_task_handler+0x40>
            else if(task_interrupter) {
 80149d4:	b135      	cbz	r5, 80149e4 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 80149d6:	7d2a      	ldrb	r2, [r5, #20]
 80149d8:	f003 0307 	and.w	r3, r3, #7
 80149dc:	f002 0207 	and.w	r2, r2, #7
 80149e0:	4293      	cmp	r3, r2
 80149e2:	d9eb      	bls.n	80149bc <lv_task_handler+0x80>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80149e4:	f7ff ff84 	bl	80148f0 <lv_task_exec>
 80149e8:	2800      	cmp	r0, #0
 80149ea:	d0e7      	beq.n	80149bc <lv_task_handler+0x80>
                    if(!task_created && !task_deleted) {
 80149ec:	78a3      	ldrb	r3, [r4, #2]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d1c6      	bne.n	8014980 <lv_task_handler+0x44>
 80149f2:	78e3      	ldrb	r3, [r4, #3]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d1e4      	bne.n	80149c2 <lv_task_handler+0x86>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80149f8:	6835      	ldr	r5, [r6, #0]
 80149fa:	e7b6      	b.n	801496a <lv_task_handler+0x2e>
    uint32_t elp = lv_tick_elaps(task->last_run);
 80149fc:	6870      	ldr	r0, [r6, #4]
 80149fe:	f7fe f9a7 	bl	8012d50 <lv_tick_elaps>
    if(elp >= task->period)
 8014a02:	6833      	ldr	r3, [r6, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8014a04:	4631      	mov	r1, r6
    if(elp >= task->period)
 8014a06:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
 8014a08:	bf34      	ite	cc
 8014a0a:	1a18      	subcc	r0, r3, r0
        return 0;
 8014a0c:	2000      	movcs	r0, #0
 8014a0e:	4285      	cmp	r5, r0
 8014a10:	bf28      	it	cs
 8014a12:	4605      	movcs	r5, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8014a14:	4640      	mov	r0, r8
 8014a16:	f7fe ff23 	bl	8013860 <_lv_ll_get_next>
 8014a1a:	4606      	mov	r6, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 8014a1c:	b116      	cbz	r6, 8014a24 <lv_task_handler+0xe8>
 8014a1e:	7d33      	ldrb	r3, [r6, #20]
 8014a20:	075b      	lsls	r3, r3, #29
 8014a22:	d1eb      	bne.n	80149fc <lv_task_handler+0xc0>
    busy_time += lv_tick_elaps(handler_start);
 8014a24:	4638      	mov	r0, r7
 8014a26:	f7fe f993 	bl	8012d50 <lv_tick_elaps>
 8014a2a:	68a3      	ldr	r3, [r4, #8]
 8014a2c:	4418      	add	r0, r3
 8014a2e:	60a0      	str	r0, [r4, #8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8014a30:	68e0      	ldr	r0, [r4, #12]
 8014a32:	f7fe f98d 	bl	8012d50 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8014a36:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8014a3a:	d311      	bcc.n	8014a60 <lv_task_handler+0x124>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8014a3c:	68a2      	ldr	r2, [r4, #8]
 8014a3e:	2364      	movs	r3, #100	; 0x64
 8014a40:	4353      	muls	r3, r2
 8014a42:	fbb3 f3f0 	udiv	r3, r3, r0
 8014a46:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8014a48:	2b64      	cmp	r3, #100	; 0x64
 8014a4a:	bf96      	itet	ls
 8014a4c:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 8014a50:	2300      	movhi	r3, #0
 8014a52:	b2db      	uxtbls	r3, r3
 8014a54:	7423      	strb	r3, [r4, #16]
        busy_time         = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	60a3      	str	r3, [r4, #8]
        idle_period_start = lv_tick_get();
 8014a5a:	f7fe f96f 	bl	8012d3c <lv_tick_get>
 8014a5e:	60e0      	str	r0, [r4, #12]
    already_running = false; /*Release the mutex*/
 8014a60:	2300      	movs	r3, #0
 8014a62:	7123      	strb	r3, [r4, #4]
    return time_till_next;
 8014a64:	e775      	b.n	8014952 <lv_task_handler+0x16>
 8014a66:	bf00      	nop
 8014a68:	200288c0 	.word	0x200288c0
 8014a6c:	20028be0 	.word	0x20028be0
 8014a70:	20028cb0 	.word	0x20028cb0

08014a74 <lv_task_set_prio>:
    if(task->prio == prio) return;
 8014a74:	7d03      	ldrb	r3, [r0, #20]
 8014a76:	f003 0307 	and.w	r3, r3, #7
 8014a7a:	428b      	cmp	r3, r1
{
 8014a7c:	b570      	push	{r4, r5, r6, lr}
 8014a7e:	4604      	mov	r4, r0
 8014a80:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 8014a82:	d017      	beq.n	8014ab4 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 8014a84:	480f      	ldr	r0, [pc, #60]	; (8014ac4 <lv_task_set_prio+0x50>)
 8014a86:	f7fe fee5 	bl	8013854 <_lv_ll_get_head>
 8014a8a:	4e0e      	ldr	r6, [pc, #56]	; (8014ac4 <lv_task_set_prio+0x50>)
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	b132      	cbz	r2, 8014a9e <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 8014a90:	7d13      	ldrb	r3, [r2, #20]
 8014a92:	f003 0307 	and.w	r3, r3, #7
 8014a96:	429d      	cmp	r5, r3
 8014a98:	db0d      	blt.n	8014ab6 <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8014a9a:	42a2      	cmp	r2, r4
 8014a9c:	d003      	beq.n	8014aa6 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8014a9e:	4621      	mov	r1, r4
 8014aa0:	4808      	ldr	r0, [pc, #32]	; (8014ac4 <lv_task_set_prio+0x50>)
 8014aa2:	f7fe ff8a 	bl	80139ba <_lv_ll_move_before>
    task_list_changed = true;
 8014aa6:	4b08      	ldr	r3, [pc, #32]	; (8014ac8 <lv_task_set_prio+0x54>)
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	705a      	strb	r2, [r3, #1]
    task->prio = prio;
 8014aac:	7d23      	ldrb	r3, [r4, #20]
 8014aae:	f365 0302 	bfi	r3, r5, #0, #3
 8014ab2:	7523      	strb	r3, [r4, #20]
}
 8014ab4:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 8014ab6:	4611      	mov	r1, r2
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f7fe fed1 	bl	8013860 <_lv_ll_get_next>
 8014abe:	4602      	mov	r2, r0
 8014ac0:	e7e5      	b.n	8014a8e <lv_task_set_prio+0x1a>
 8014ac2:	bf00      	nop
 8014ac4:	20028be0 	.word	0x20028be0
 8014ac8:	200288c0 	.word	0x200288c0

08014acc <lv_task_ready>:
{
 8014acc:	b510      	push	{r4, lr}
 8014ace:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 8014ad0:	f7fe f934 	bl	8012d3c <lv_tick_get>
 8014ad4:	6823      	ldr	r3, [r4, #0]
 8014ad6:	43db      	mvns	r3, r3
 8014ad8:	4403      	add	r3, r0
 8014ada:	6063      	str	r3, [r4, #4]
}
 8014adc:	bd10      	pop	{r4, pc}

08014ade <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8014ade:	7803      	ldrb	r3, [r0, #0]
 8014ae0:	061a      	lsls	r2, r3, #24
 8014ae2:	d50e      	bpl.n	8014b02 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8014ae4:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8014ae8:	2ac0      	cmp	r2, #192	; 0xc0
 8014aea:	d00c      	beq.n	8014b06 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 8014aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014af0:	2ae0      	cmp	r2, #224	; 0xe0
 8014af2:	d00a      	beq.n	8014b0a <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8014af4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014af8:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
 8014afa:	bf0c      	ite	eq
 8014afc:	2004      	moveq	r0, #4
 8014afe:	2000      	movne	r0, #0
 8014b00:	4770      	bx	lr
        return 1;
 8014b02:	2001      	movs	r0, #1
 8014b04:	4770      	bx	lr
        return 2;
 8014b06:	2002      	movs	r0, #2
 8014b08:	4770      	bx	lr
        return 3;
 8014b0a:	2003      	movs	r0, #3
}
 8014b0c:	4770      	bx	lr

08014b0e <lv_txt_utf8_conv_wc>:
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
#if LV_BIG_ENDIAN_SYSTEM == 0
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
 8014b0e:	0603      	lsls	r3, r0, #24
 8014b10:	d514      	bpl.n	8014b3c <lv_txt_utf8_conv_wc+0x2e>
        uint32_t swapped;
        uint8_t c8[4];
        _lv_memcpy_small(c8, &c, 4);
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
 8014b12:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8014b16:	0603      	lsls	r3, r0, #24
 8014b18:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8014b1c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014b20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014b24:	eb03 6010 	add.w	r0, r3, r0, lsr #24
 8014b28:	2304      	movs	r3, #4
        uint8_t i;
        for(i = 0; i < 4; i++) {
            if((swapped & 0xFF) == 0)
 8014b2a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8014b2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
 8014b32:	bf08      	it	eq
 8014b34:	0a00      	lsreq	r0, r0, #8
        for(i = 0; i < 4; i++) {
 8014b36:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8014b3a:	d1f6      	bne.n	8014b2a <lv_txt_utf8_conv_wc+0x1c>
        }
        c = swapped;
    }
#endif
    return c;
}
 8014b3c:	4770      	bx	lr

08014b3e <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8014b3e:	2300      	movs	r3, #0
{
 8014b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 8014b42:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8014b44:	b901      	cbnz	r1, 8014b48 <lv_txt_utf8_next+0xa>
 8014b46:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8014b48:	680a      	ldr	r2, [r1, #0]
 8014b4a:	5c83      	ldrb	r3, [r0, r2]
 8014b4c:	1c54      	adds	r4, r2, #1
 8014b4e:	061d      	lsls	r5, r3, #24
 8014b50:	d403      	bmi.n	8014b5a <lv_txt_utf8_next+0x1c>
        result = txt[*i];
 8014b52:	4618      	mov	r0, r3
        (*i)++;
 8014b54:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8014b56:	b002      	add	sp, #8
 8014b58:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8014b5a:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8014b5e:	2dc0      	cmp	r5, #192	; 0xc0
 8014b60:	d110      	bne.n	8014b84 <lv_txt_utf8_next+0x46>
            (*i)++;
 8014b62:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014b64:	5d00      	ldrb	r0, [r0, r4]
 8014b66:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8014b6a:	2c80      	cmp	r4, #128	; 0x80
 8014b6c:	d001      	beq.n	8014b72 <lv_txt_utf8_next+0x34>
    uint32_t result = 0;
 8014b6e:	2000      	movs	r0, #0
 8014b70:	e7f1      	b.n	8014b56 <lv_txt_utf8_next+0x18>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8014b72:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 8014b74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 8014b78:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8014b7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8014b7e:	4418      	add	r0, r3
            (*i)++;
 8014b80:	600a      	str	r2, [r1, #0]
 8014b82:	e7e8      	b.n	8014b56 <lv_txt_utf8_next+0x18>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8014b84:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8014b88:	2de0      	cmp	r5, #224	; 0xe0
 8014b8a:	d117      	bne.n	8014bbc <lv_txt_utf8_next+0x7e>
            (*i)++;
 8014b8c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014b8e:	5d04      	ldrb	r4, [r0, r4]
 8014b90:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014b94:	2d80      	cmp	r5, #128	; 0x80
 8014b96:	d1ea      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            (*i)++;
 8014b98:	1c95      	adds	r5, r2, #2
 8014b9a:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014b9c:	5d45      	ldrb	r5, [r0, r5]
 8014b9e:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8014ba2:	2880      	cmp	r0, #128	; 0x80
 8014ba4:	d1e3      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014ba6:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 8014ba8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014bac:	01a3      	lsls	r3, r4, #6
            (*i)++;
 8014bae:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014bb0:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014bb2:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8014bb6:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 8014bb8:	4418      	add	r0, r3
 8014bba:	e7e1      	b.n	8014b80 <lv_txt_utf8_next+0x42>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8014bbc:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 8014bc0:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8014bc2:	2df0      	cmp	r5, #240	; 0xf0
 8014bc4:	d1d3      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014bc6:	5d04      	ldrb	r4, [r0, r4]
 8014bc8:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014bcc:	2d80      	cmp	r5, #128	; 0x80
 8014bce:	d1ce      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            (*i)++;
 8014bd0:	1c95      	adds	r5, r2, #2
 8014bd2:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014bd4:	5d45      	ldrb	r5, [r0, r5]
 8014bd6:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8014bda:	2e80      	cmp	r6, #128	; 0x80
 8014bdc:	d1c7      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            (*i)++;
 8014bde:	1cd6      	adds	r6, r2, #3
 8014be0:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8014be2:	5d86      	ldrb	r6, [r0, r6]
 8014be4:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 8014be8:	2880      	cmp	r0, #128	; 0x80
 8014bea:	d1c0      	bne.n	8014b6e <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014bec:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 8014bee:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014bf2:	0320      	lsls	r0, r4, #12
            (*i)++;
 8014bf4:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014bf6:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014bfa:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 8014bfe:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014c00:	01a8      	lsls	r0, r5, #6
 8014c02:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8014c06:	4430      	add	r0, r6
 8014c08:	4418      	add	r0, r3
 8014c0a:	e7b9      	b.n	8014b80 <lv_txt_utf8_next+0x42>

08014c0c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8014c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8014c10:	2400      	movs	r4, #0
{
 8014c12:	4607      	mov	r7, r0
 8014c14:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8014c16:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8014c3c <lv_txt_utf8_get_byte_id+0x30>
    for(i = 0; i < utf8_id; i++) {
 8014c1a:	4625      	mov	r5, r4
 8014c1c:	42b5      	cmp	r5, r6
 8014c1e:	d102      	bne.n	8014c26 <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
 8014c20:	4620      	mov	r0, r4
 8014c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8014c26:	1938      	adds	r0, r7, r4
 8014c28:	f8d8 3000 	ldr.w	r3, [r8]
 8014c2c:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	bf08      	it	eq
 8014c32:	2001      	moveq	r0, #1
    for(i = 0; i < utf8_id; i++) {
 8014c34:	3501      	adds	r5, #1
        byte_cnt += c_size > 0 ? c_size : 1;
 8014c36:	4404      	add	r4, r0
 8014c38:	e7f0      	b.n	8014c1c <lv_txt_utf8_get_byte_id+0x10>
 8014c3a:	bf00      	nop
 8014c3c:	200000a4 	.word	0x200000a4

08014c40 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8014c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 8014c44:	2400      	movs	r4, #0
 8014c46:	ad02      	add	r5, sp, #8
{
 8014c48:	4607      	mov	r7, r0
 8014c4a:	460e      	mov	r6, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8014c4c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8014c70 <lv_txt_utf8_get_char_id+0x30>
    uint32_t i        = 0;
 8014c50:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(i < byte_id) {
 8014c54:	9b01      	ldr	r3, [sp, #4]
 8014c56:	42b3      	cmp	r3, r6
 8014c58:	d303      	bcc.n	8014c62 <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	b002      	add	sp, #8
 8014c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8014c62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c66:	4629      	mov	r1, r5
 8014c68:	4638      	mov	r0, r7
        char_cnt++;
 8014c6a:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8014c6c:	4798      	blx	r3
 8014c6e:	e7f1      	b.n	8014c54 <lv_txt_utf8_get_char_id+0x14>
 8014c70:	200000a4 	.word	0x200000a4

08014c74 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8014c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8014c76:	2400      	movs	r4, #0
 8014c78:	ad02      	add	r5, sp, #8
{
 8014c7a:	4606      	mov	r6, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8014c7c:	4f07      	ldr	r7, [pc, #28]	; (8014c9c <lv_txt_utf8_get_length+0x28>)
    uint32_t i   = 0;
 8014c7e:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(txt[i] != '\0') {
 8014c82:	9b01      	ldr	r3, [sp, #4]
 8014c84:	5cf3      	ldrb	r3, [r6, r3]
 8014c86:	b913      	cbnz	r3, 8014c8e <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 8014c88:	4620      	mov	r0, r4
 8014c8a:	b003      	add	sp, #12
 8014c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	4629      	mov	r1, r5
 8014c92:	4630      	mov	r0, r6
        len++;
 8014c94:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 8014c96:	4798      	blx	r3
 8014c98:	e7f3      	b.n	8014c82 <lv_txt_utf8_get_length+0xe>
 8014c9a:	bf00      	nop
 8014c9c:	200000a4 	.word	0x200000a4

08014ca0 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8014ca0:	287f      	cmp	r0, #127	; 0x7f
{
 8014ca2:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 8014ca4:	d911      	bls.n	8014cca <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
 8014ca6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014caa:	d210      	bcs.n	8014cce <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8014cac:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014cae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8014cb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014cb6:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8014cba:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 8014cbe:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014cc0:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 8014cc4:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
 8014cc8:	9801      	ldr	r0, [sp, #4]
}
 8014cca:	b002      	add	sp, #8
 8014ccc:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8014cce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8014cd2:	d214      	bcs.n	8014cfe <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8014cd4:	0b03      	lsrs	r3, r0, #12
 8014cd6:	f063 031f 	orn	r3, r3, #31
 8014cda:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014cde:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014ce2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014cea:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014cee:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 8014cf2:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014cf4:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8014cf8:	f88d 3007 	strb.w	r3, [sp, #7]
 8014cfc:	e7e4      	b.n	8014cc8 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
 8014cfe:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8014d02:	d2e1      	bcs.n	8014cc8 <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8014d04:	0c83      	lsrs	r3, r0, #18
 8014d06:	f063 030f 	orn	r3, r3, #15
 8014d0a:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8014d0e:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8014d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014d16:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014d1a:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014d1e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014d26:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014d2a:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014d2e:	f88d 0007 	strb.w	r0, [sp, #7]
 8014d32:	e7c9      	b.n	8014cc8 <lv_txt_unicode_to_utf8+0x28>

08014d34 <lv_txt_utf8_prev>:
    (*i)--;
 8014d34:	680b      	ldr	r3, [r1, #0]
{
 8014d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 8014d38:	3b01      	subs	r3, #1
{
 8014d3a:	4606      	mov	r6, r0
 8014d3c:	460d      	mov	r5, r1
    (*i)--;
 8014d3e:	2404      	movs	r4, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8014d40:	4f0c      	ldr	r7, [pc, #48]	; (8014d74 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8014d42:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8014d44:	6828      	ldr	r0, [r5, #0]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	4430      	add	r0, r6
 8014d4a:	4798      	blx	r3
 8014d4c:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 8014d4e:	b948      	cbnz	r0, 8014d64 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 8014d50:	b12b      	cbz	r3, 8014d5e <lv_txt_utf8_prev+0x2a>
 8014d52:	3c01      	subs	r4, #1
                (*i)--;
 8014d54:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014d56:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 8014d5a:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014d5c:	d1f2      	bne.n	8014d44 <lv_txt_utf8_prev+0x10>
 8014d5e:	2000      	movs	r0, #0
}
 8014d60:	b003      	add	sp, #12
 8014d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8014d64:	a902      	add	r1, sp, #8
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014d66:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 8014d68:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4798      	blx	r3
 8014d70:	e7f6      	b.n	8014d60 <lv_txt_utf8_prev+0x2c>
 8014d72:	bf00      	nop
 8014d74:	200000a4 	.word	0x200000a4

08014d78 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014d78:	2923      	cmp	r1, #35	; 0x23
{
 8014d7a:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014d7c:	d117      	bne.n	8014dae <_lv_txt_is_cmd+0x36>
 8014d7e:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8014d80:	b91b      	cbnz	r3, 8014d8a <_lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 8014d82:	2301      	movs	r3, #1
 8014d84:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8014d86:	2001      	movs	r0, #1
 8014d88:	e004      	b.n	8014d94 <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	f04f 0000 	mov.w	r0, #0
 8014d90:	d109      	bne.n	8014da6 <_lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014d92:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8014d94:	7813      	ldrb	r3, [r2, #0]
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	d104      	bne.n	8014da4 <_lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8014d9a:	2920      	cmp	r1, #32
        ret = true;
 8014d9c:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8014d9e:	bf04      	itt	eq
 8014da0:	2102      	moveq	r1, #2
 8014da2:	7011      	strbeq	r1, [r2, #0]
}
 8014da4:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d1f4      	bne.n	8014d94 <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8014daa:	7010      	strb	r0, [r2, #0]
 8014dac:	e7eb      	b.n	8014d86 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 8014dae:	2000      	movs	r0, #0
 8014db0:	e7f0      	b.n	8014d94 <_lv_txt_is_cmd+0x1c>
	...

08014db4 <_lv_txt_get_width>:
{
 8014db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db8:	4688      	mov	r8, r1
 8014dba:	b085      	sub	sp, #20
 8014dbc:	4617      	mov	r7, r2
 8014dbe:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d042      	beq.n	8014e4c <_lv_txt_get_width+0x98>
    if(font == NULL) return 0;
 8014dc6:	2a00      	cmp	r2, #0
 8014dc8:	d042      	beq.n	8014e50 <_lv_txt_get_width+0x9c>
    if(txt[0] == '\0') return 0;
 8014dca:	7804      	ldrb	r4, [r0, #0]
 8014dcc:	2000      	movs	r0, #0
 8014dce:	b124      	cbz	r4, 8014dda <_lv_txt_get_width+0x26>
    uint32_t i                   = 0;
 8014dd0:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014dd2:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
 8014dd6:	bb89      	cbnz	r1, 8014e3c <_lv_txt_get_width+0x88>
    lv_coord_t width             = 0;
 8014dd8:	460c      	mov	r4, r1
}
 8014dda:	4620      	mov	r0, r4
 8014ddc:	b005      	add	sp, #20
 8014dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8014de2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014de6:	a903      	add	r1, sp, #12
 8014de8:	4628      	mov	r0, r5
 8014dea:	4798      	blx	r3
 8014dec:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8014dee:	9803      	ldr	r0, [sp, #12]
 8014df0:	2100      	movs	r1, #0
 8014df2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014df6:	4428      	add	r0, r5
 8014df8:	4798      	blx	r3
 8014dfa:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014dfc:	f1b9 0f00 	cmp.w	r9, #0
 8014e00:	d10e      	bne.n	8014e20 <_lv_txt_get_width+0x6c>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8014e02:	4659      	mov	r1, fp
 8014e04:	4638      	mov	r0, r7
 8014e06:	f7fd fabf 	bl	8012388 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8014e0a:	b203      	sxth	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	dc11      	bgt.n	8014e34 <_lv_txt_get_width+0x80>
        while(i < length) {
 8014e10:	9b03      	ldr	r3, [sp, #12]
 8014e12:	4598      	cmp	r8, r3
 8014e14:	d8e5      	bhi.n	8014de2 <_lv_txt_get_width+0x2e>
        if(width > 0) {
 8014e16:	2c00      	cmp	r4, #0
 8014e18:	dddf      	ble.n	8014dda <_lv_txt_get_width+0x26>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8014e1a:	1ba4      	subs	r4, r4, r6
 8014e1c:	b224      	sxth	r4, r4
 8014e1e:	e7dc      	b.n	8014dda <_lv_txt_get_width+0x26>
 8014e20:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8014e22:	4659      	mov	r1, fp
 8014e24:	f10d 000b 	add.w	r0, sp, #11
 8014e28:	f7ff ffa6 	bl	8014d78 <_lv_txt_is_cmd>
 8014e2c:	9a01      	ldr	r2, [sp, #4]
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	d0e7      	beq.n	8014e02 <_lv_txt_get_width+0x4e>
 8014e32:	e7ed      	b.n	8014e10 <_lv_txt_get_width+0x5c>
                width += letter_space;
 8014e34:	4434      	add	r4, r6
 8014e36:	4404      	add	r4, r0
 8014e38:	b224      	sxth	r4, r4
 8014e3a:	e7e9      	b.n	8014e10 <_lv_txt_get_width+0x5c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014e3c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    lv_coord_t width             = 0;
 8014e40:	4604      	mov	r4, r0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8014e42:	f8df a010 	ldr.w	sl, [pc, #16]	; 8014e54 <_lv_txt_get_width+0xa0>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014e46:	f009 0901 	and.w	r9, r9, #1
 8014e4a:	e7e1      	b.n	8014e10 <_lv_txt_get_width+0x5c>
    if(txt == NULL) return 0;
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	e7c4      	b.n	8014dda <_lv_txt_get_width+0x26>
 8014e50:	4614      	mov	r4, r2
 8014e52:	e7c2      	b.n	8014dda <_lv_txt_get_width+0x26>
 8014e54:	200000a4 	.word	0x200000a4

08014e58 <_lv_txt_get_next_line>:
{
 8014e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5c:	b091      	sub	sp, #68	; 0x44
 8014e5e:	469a      	mov	sl, r3
    if(txt == NULL) return 0;
 8014e60:	4607      	mov	r7, r0
{
 8014e62:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8014e66:	9104      	str	r1, [sp, #16]
 8014e68:	9206      	str	r2, [sp, #24]
 8014e6a:	9305      	str	r3, [sp, #20]
    if(txt == NULL) return 0;
 8014e6c:	b190      	cbz	r0, 8014e94 <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
 8014e6e:	2900      	cmp	r1, #0
 8014e70:	f000 80d1 	beq.w	8015016 <_lv_txt_get_next_line+0x1be>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 8014e74:	9b05      	ldr	r3, [sp, #20]
 8014e76:	f013 0312 	ands.w	r3, r3, #18
 8014e7a:	d00e      	beq.n	8014e9a <_lv_txt_get_next_line+0x42>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	1bd0      	subs	r0, r2, r7
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8014e80:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014e84:	2b0a      	cmp	r3, #10
 8014e86:	f000 80c8 	beq.w	801501a <_lv_txt_get_next_line+0x1c2>
 8014e8a:	2b0d      	cmp	r3, #13
 8014e8c:	f000 80c5 	beq.w	801501a <_lv_txt_get_next_line+0x1c2>
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d1f4      	bne.n	8014e7e <_lv_txt_get_next_line+0x26>
}
 8014e94:	b011      	add	sp, #68	; 0x44
 8014e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014e9a:	9a05      	ldr	r2, [sp, #20]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014e9c:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015024 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014ea0:	f012 0202 	ands.w	r2, r2, #2
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8014ea4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint32_t i = 0;                                        /* Iterating index into txt */
 8014ea8:	930d      	str	r3, [sp, #52]	; 0x34
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014eaa:	9207      	str	r2, [sp, #28]
 8014eac:	f647 4218 	movw	r2, #31768	; 0x7c18
 8014eb0:	bf18      	it	ne
 8014eb2:	4692      	movne	sl, r2
    while(txt[i] != '\0' && max_width > 0) {
 8014eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	18fb      	adds	r3, r7, r3
 8014eba:	9302      	str	r3, [sp, #8]
 8014ebc:	9b01      	ldr	r3, [sp, #4]
 8014ebe:	5cfb      	ldrb	r3, [r7, r3]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f000 808c 	beq.w	8014fde <_lv_txt_get_next_line+0x186>
 8014ec6:	f1ba 0f00 	cmp.w	sl, #0
 8014eca:	f340 8088 	ble.w	8014fde <_lv_txt_get_next_line+0x186>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014ece:	9a07      	ldr	r2, [sp, #28]
 8014ed0:	f647 4318 	movw	r3, #31768	; 0x7c18
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8014ed4:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014ed6:	a90e      	add	r1, sp, #56	; 0x38
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014ed8:	2a00      	cmp	r2, #0
 8014eda:	bf08      	it	eq
 8014edc:	4653      	moveq	r3, sl
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014ede:	9802      	ldr	r0, [sp, #8]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 8014ee0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 8014ee4:	4625      	mov	r5, r4
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014ee6:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8014ee8:	4626      	mov	r6, r4
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014eea:	f8db 3004 	ldr.w	r3, [fp, #4]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8014eee:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014ef2:	4798      	blx	r3
    i_next_next = i_next;
 8014ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014ef6:	9a05      	ldr	r2, [sp, #20]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014ef8:	4681      	mov	r9, r0
    i_next_next = i_next;
 8014efa:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t letter_next = 0; /* Letter at i_next */
 8014efc:	4623      	mov	r3, r4
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014efe:	f002 0201 	and.w	r2, r2, #1
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 8014f02:	9403      	str	r4, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014f04:	920a      	str	r2, [sp, #40]	; 0x28
    while(txt[i] != '\0') {
 8014f06:	9a02      	ldr	r2, [sp, #8]
 8014f08:	5d92      	ldrb	r2, [r2, r6]
 8014f0a:	b93a      	cbnz	r2, 8014f1c <_lv_txt_get_next_line+0xc4>
    if(break_index == NO_BREAK_FOUND) {
 8014f0c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8014f10:	d051      	beq.n	8014fb6 <_lv_txt_get_next_line+0x15e>
    if(force) return break_index;
 8014f12:	9b01      	ldr	r3, [sp, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d16b      	bne.n	8014ff0 <_lv_txt_get_next_line+0x198>
 8014f18:	4646      	mov	r6, r8
 8014f1a:	e054      	b.n	8014fc6 <_lv_txt_get_next_line+0x16e>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8014f1c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014f20:	a90f      	add	r1, sp, #60	; 0x3c
 8014f22:	9802      	ldr	r0, [sp, #8]
 8014f24:	4798      	blx	r3
        word_len++;
 8014f26:	9a03      	ldr	r2, [sp, #12]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8014f28:	4603      	mov	r3, r0
        word_len++;
 8014f2a:	3201      	adds	r2, #1
 8014f2c:	9208      	str	r2, [sp, #32]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8014f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f30:	b172      	cbz	r2, 8014f50 <_lv_txt_get_next_line+0xf8>
 8014f32:	900b      	str	r0, [sp, #44]	; 0x2c
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8014f34:	4649      	mov	r1, r9
 8014f36:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8014f3a:	f7ff ff1d 	bl	8014d78 <_lv_txt_is_cmd>
 8014f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f40:	b130      	cbz	r0, 8014f50 <_lv_txt_get_next_line+0xf8>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8014f42:	4699      	mov	r9, r3
        i_next = i_next_next;
 8014f44:	e9dd 620e 	ldrd	r6, r2, [sp, #56]	; 0x38
 8014f48:	920e      	str	r2, [sp, #56]	; 0x38
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8014f4a:	9a08      	ldr	r2, [sp, #32]
 8014f4c:	9203      	str	r2, [sp, #12]
 8014f4e:	e7da      	b.n	8014f06 <_lv_txt_get_next_line+0xae>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8014f50:	461a      	mov	r2, r3
 8014f52:	4649      	mov	r1, r9
 8014f54:	9804      	ldr	r0, [sp, #16]
 8014f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f58:	f7fd fa16 	bl	8012388 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8014f5c:	4405      	add	r5, r0
        if(letter_w > 0) {
 8014f5e:	b200      	sxth	r0, r0
 8014f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f62:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8014f64:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
 8014f66:	bfc2      	ittt	gt
 8014f68:	9a06      	ldrgt	r2, [sp, #24]
 8014f6a:	18ad      	addgt	r5, r5, r2
 8014f6c:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8014f6e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8014f72:	b22d      	sxth	r5, r5
 8014f74:	d105      	bne.n	8014f82 <_lv_txt_get_next_line+0x12a>
 8014f76:	9a06      	ldr	r2, [sp, #24]
 8014f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f7a:	1aaa      	subs	r2, r5, r2
 8014f7c:	428a      	cmp	r2, r1
 8014f7e:	bfc8      	it	gt
 8014f80:	46b0      	movgt	r8, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8014f82:	f1b9 0f0a 	cmp.w	r9, #10
 8014f86:	d010      	beq.n	8014faa <_lv_txt_get_next_line+0x152>
 8014f88:	f1b9 0f0d 	cmp.w	r9, #13
 8014f8c:	d00d      	beq.n	8014faa <_lv_txt_get_next_line+0x152>
 8014f8e:	2200      	movs	r2, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8014f90:	b2d1      	uxtb	r1, r2
 8014f92:	4823      	ldr	r0, [pc, #140]	; (8015020 <_lv_txt_get_next_line+0x1c8>)
 8014f94:	5c41      	ldrb	r1, [r0, r1]
 8014f96:	b921      	cbnz	r1, 8014fa2 <_lv_txt_get_next_line+0x14a>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8014f98:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8014f9c:	bf08      	it	eq
 8014f9e:	462c      	moveq	r4, r5
 8014fa0:	e7cf      	b.n	8014f42 <_lv_txt_get_next_line+0xea>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8014fa2:	4589      	cmp	r9, r1
 8014fa4:	f102 0201 	add.w	r2, r2, #1
 8014fa8:	d1f2      	bne.n	8014f90 <_lv_txt_get_next_line+0x138>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8014faa:	2e00      	cmp	r6, #0
 8014fac:	d1ae      	bne.n	8014f0c <_lv_txt_get_next_line+0xb4>
 8014fae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8014fb2:	d1ae      	bne.n	8014f12 <_lv_txt_get_next_line+0xba>
 8014fb4:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8014fb6:	9a03      	ldr	r2, [sp, #12]
 8014fb8:	b122      	cbz	r2, 8014fc4 <_lv_txt_get_next_line+0x16c>
 8014fba:	f1b9 0f0d 	cmp.w	r9, #13
 8014fbe:	d102      	bne.n	8014fc6 <_lv_txt_get_next_line+0x16e>
 8014fc0:	2b0a      	cmp	r3, #10
 8014fc2:	d100      	bne.n	8014fc6 <_lv_txt_get_next_line+0x16e>
 8014fc4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        max_width -= word_w;
 8014fc6:	ebaa 0a04 	sub.w	sl, sl, r4
 8014fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fcc:	fa0f fa8a 	sxth.w	sl, sl
        if(advance == 0) {
 8014fd0:	b98e      	cbnz	r6, 8014ff6 <_lv_txt_get_next_line+0x19e>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 8014fd2:	b95b      	cbnz	r3, 8014fec <_lv_txt_get_next_line+0x194>
 8014fd4:	4b13      	ldr	r3, [pc, #76]	; (8015024 <_lv_txt_get_next_line+0x1cc>)
 8014fd6:	a90d      	add	r1, sp, #52	; 0x34
 8014fd8:	4638      	mov	r0, r7
 8014fda:	685b      	ldr	r3, [r3, #4]
 8014fdc:	4798      	blx	r3
    if(i == 0) {
 8014fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fe0:	b923      	cbnz	r3, 8014fec <_lv_txt_get_next_line+0x194>
        _lv_txt_encoded_next(txt, &i);
 8014fe2:	4b10      	ldr	r3, [pc, #64]	; (8015024 <_lv_txt_get_next_line+0x1cc>)
 8014fe4:	a90d      	add	r1, sp, #52	; 0x34
 8014fe6:	4638      	mov	r0, r7
 8014fe8:	685b      	ldr	r3, [r3, #4]
 8014fea:	4798      	blx	r3
    return i;
 8014fec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014fee:	e751      	b.n	8014e94 <_lv_txt_get_next_line+0x3c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 8014ff0:	2400      	movs	r4, #0
    return 0;
 8014ff2:	4626      	mov	r6, r4
 8014ff4:	e7e7      	b.n	8014fc6 <_lv_txt_get_next_line+0x16e>
        i += advance;
 8014ff6:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8014ff8:	783b      	ldrb	r3, [r7, #0]
 8014ffa:	2b0a      	cmp	r3, #10
        i += advance;
 8014ffc:	960d      	str	r6, [sp, #52]	; 0x34
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8014ffe:	d0ee      	beq.n	8014fde <_lv_txt_get_next_line+0x186>
 8015000:	2b0d      	cmp	r3, #13
 8015002:	d0ec      	beq.n	8014fde <_lv_txt_get_next_line+0x186>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8015004:	5dbb      	ldrb	r3, [r7, r6]
 8015006:	2b0a      	cmp	r3, #10
 8015008:	d002      	beq.n	8015010 <_lv_txt_get_next_line+0x1b8>
 801500a:	2b0d      	cmp	r3, #13
 801500c:	f47f af52 	bne.w	8014eb4 <_lv_txt_get_next_line+0x5c>
            i++;  /* Include the following newline in the current line */
 8015010:	3601      	adds	r6, #1
 8015012:	960d      	str	r6, [sp, #52]	; 0x34
 8015014:	e7e3      	b.n	8014fde <_lv_txt_get_next_line+0x186>
    if(txt == NULL) return 0;
 8015016:	9804      	ldr	r0, [sp, #16]
 8015018:	e73c      	b.n	8014e94 <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 801501a:	3001      	adds	r0, #1
 801501c:	e73a      	b.n	8014e94 <_lv_txt_get_next_line+0x3c>
 801501e:	bf00      	nop
 8015020:	0802c3f2 	.word	0x0802c3f2
 8015024:	200000a4 	.word	0x200000a4

08015028 <_lv_txt_get_size>:
{
 8015028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 801502c:	2500      	movs	r5, #0
{
 801502e:	b087      	sub	sp, #28
 8015030:	4604      	mov	r4, r0
 8015032:	4616      	mov	r6, r2
 8015034:	9304      	str	r3, [sp, #16]
    if(text == NULL) return;
 8015036:	4689      	mov	r9, r1
{
 8015038:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801503c:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8015040:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    size_res->x = 0;
 8015044:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8015046:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8015048:	b321      	cbz	r1, 8015094 <_lv_txt_get_size+0x6c>
    if(font == NULL) return;
 801504a:	b31a      	cbz	r2, 8015094 <_lv_txt_get_size+0x6c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801504c:	f647 4318 	movw	r3, #31768	; 0x7c18
 8015050:	f01b 0f02 	tst.w	fp, #2
 8015054:	bf18      	it	ne
 8015056:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
 8015058:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 801505c:	9303      	str	r3, [sp, #12]
 801505e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015062:	9302      	str	r3, [sp, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8015064:	443b      	add	r3, r7
 8015066:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8015068:	f819 3005 	ldrb.w	r3, [r9, r5]
 801506c:	eb09 0805 	add.w	r8, r9, r5
 8015070:	b99b      	cbnz	r3, 801509a <_lv_txt_get_size+0x72>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8015072:	b155      	cbz	r5, 801508a <_lv_txt_get_size+0x62>
 8015074:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015078:	2b0a      	cmp	r3, #10
 801507a:	d001      	beq.n	8015080 <_lv_txt_get_size+0x58>
 801507c:	2b0d      	cmp	r3, #13
 801507e:	d104      	bne.n	801508a <_lv_txt_get_size+0x62>
        size_res->y += letter_height + line_space;
 8015080:	9b02      	ldr	r3, [sp, #8]
 8015082:	8862      	ldrh	r2, [r4, #2]
 8015084:	443b      	add	r3, r7
 8015086:	4413      	add	r3, r2
 8015088:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 801508a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801508e:	bb23      	cbnz	r3, 80150da <_lv_txt_get_size+0xb2>
        size_res->y = letter_height;
 8015090:	9b03      	ldr	r3, [sp, #12]
 8015092:	8063      	strh	r3, [r4, #2]
}
 8015094:	b007      	add	sp, #28
 8015096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801509a:	4653      	mov	r3, sl
 801509c:	9a04      	ldr	r2, [sp, #16]
 801509e:	4631      	mov	r1, r6
 80150a0:	f8cd b000 	str.w	fp, [sp]
 80150a4:	4640      	mov	r0, r8
 80150a6:	f7ff fed7 	bl	8014e58 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80150aa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80150ae:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80150b0:	4601      	mov	r1, r0
 80150b2:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80150b4:	4413      	add	r3, r2
 80150b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150ba:	d2eb      	bcs.n	8015094 <_lv_txt_get_size+0x6c>
            size_res->y += line_space;
 80150bc:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 80150be:	4632      	mov	r2, r6
 80150c0:	9b04      	ldr	r3, [sp, #16]
 80150c2:	4640      	mov	r0, r8
 80150c4:	f8cd b000 	str.w	fp, [sp]
 80150c8:	f7ff fe74 	bl	8014db4 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 80150cc:	f9b4 3000 	ldrsh.w	r3, [r4]
 80150d0:	4298      	cmp	r0, r3
 80150d2:	bfb8      	it	lt
 80150d4:	4618      	movlt	r0, r3
 80150d6:	8020      	strh	r0, [r4, #0]
 80150d8:	e7c6      	b.n	8015068 <_lv_txt_get_size+0x40>
        size_res->y -= line_space;
 80150da:	1bdf      	subs	r7, r3, r7
 80150dc:	8067      	strh	r7, [r4, #2]
 80150de:	e7d9      	b.n	8015094 <_lv_txt_get_size+0x6c>

080150e0 <_lv_txt_set_text_vfmt>:
{
 80150e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80150e4:	460b      	mov	r3, r1
    va_copy(ap_copy, ap);
 80150e6:	9101      	str	r1, [sp, #4]
{
 80150e8:	460d      	mov	r5, r1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80150ea:	2100      	movs	r1, #0
 80150ec:	4602      	mov	r2, r0
{
 80150ee:	4607      	mov	r7, r0
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80150f0:	4608      	mov	r0, r1
 80150f2:	f7ff fb72 	bl	80147da <lv_vsnprintf>
    text = lv_mem_alloc(len + 1);
 80150f6:	1c46      	adds	r6, r0, #1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80150f8:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
 80150fa:	4630      	mov	r0, r6
 80150fc:	f7fe fd24 	bl	8013b48 <lv_mem_alloc>
 8015100:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
 8015102:	f7fe fa79 	bl	80135f8 <lv_debug_check_null>
 8015106:	4603      	mov	r3, r0
 8015108:	b920      	cbnz	r0, 8015114 <_lv_txt_set_text_vfmt+0x34>
 801510a:	4622      	mov	r2, r4
 801510c:	4808      	ldr	r0, [pc, #32]	; (8015130 <_lv_txt_set_text_vfmt+0x50>)
 801510e:	f7fe fa77 	bl	8013600 <lv_debug_log_error>
 8015112:	e7fe      	b.n	8015112 <_lv_txt_set_text_vfmt+0x32>
    if(text == NULL) {
 8015114:	b144      	cbz	r4, 8015128 <_lv_txt_set_text_vfmt+0x48>
    text[len] = 0; /* Ensure NULL termination */
 8015116:	2300      	movs	r3, #0
    lv_vsnprintf(text, len + 1, fmt, ap);
 8015118:	463a      	mov	r2, r7
 801511a:	4631      	mov	r1, r6
 801511c:	4620      	mov	r0, r4
    text[len] = 0; /* Ensure NULL termination */
 801511e:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
 8015122:	462b      	mov	r3, r5
 8015124:	f7ff fb59 	bl	80147da <lv_vsnprintf>
}
 8015128:	4620      	mov	r0, r4
 801512a:	b002      	add	sp, #8
 801512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015130:	0802c346 	.word	0x0802c346

08015134 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8015134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015138:	9d08      	ldr	r5, [sp, #32]
 801513a:	4681      	mov	r9, r0
 801513c:	4688      	mov	r8, r1
 801513e:	4614      	mov	r4, r2
 8015140:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8015142:	b90c      	cbnz	r4, 8015148 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8015144:	4626      	mov	r6, r4
 8015146:	e010      	b.n	801516a <_lv_utils_bsearch+0x36>
        middle += (n / 2) * size;
 8015148:	0867      	lsrs	r7, r4, #1
        if((c = (*cmp)(key, middle)) > 0) {
 801514a:	4648      	mov	r0, r9
        middle += (n / 2) * size;
 801514c:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8015150:	4631      	mov	r1, r6
 8015152:	47a8      	blx	r5
 8015154:	2800      	cmp	r0, #0
 8015156:	dd07      	ble.n	8015168 <_lv_utils_bsearch+0x34>
 8015158:	43e4      	mvns	r4, r4
            base = (middle += size);
 801515a:	eb06 080a 	add.w	r8, r6, sl
 801515e:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 8015162:	1b3f      	subs	r7, r7, r4
{
 8015164:	463c      	mov	r4, r7
 8015166:	e7ec      	b.n	8015142 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8015168:	d1fc      	bne.n	8015164 <_lv_utils_bsearch+0x30>
}
 801516a:	4630      	mov	r0, r6
 801516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015170 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8015170:	b570      	push	{r4, r5, r6, lr}
 8015172:	4604      	mov	r4, r0
    if(th->base) {
 8015174:	6880      	ldr	r0, [r0, #8]
{
 8015176:	460d      	mov	r5, r1
 8015178:	4616      	mov	r6, r2
    if(th->base) {
 801517a:	b108      	cbz	r0, 8015180 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
 801517c:	f7ff fff8 	bl	8015170 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 8015180:	6863      	ldr	r3, [r4, #4]
 8015182:	b123      	cbz	r3, 801518e <apply_theme+0x1e>
        th->apply_xcb(obj, name);
 8015184:	4631      	mov	r1, r6
 8015186:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 8015188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
 801518c:	4718      	bx	r3
    else if(th->apply_cb) {
 801518e:	6823      	ldr	r3, [r4, #0]
 8015190:	b133      	cbz	r3, 80151a0 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
 8015192:	4804      	ldr	r0, [pc, #16]	; (80151a4 <apply_theme+0x34>)
 8015194:	4632      	mov	r2, r6
 8015196:	4629      	mov	r1, r5
 8015198:	6800      	ldr	r0, [r0, #0]
}
 801519a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
 801519e:	4718      	bx	r3
}
 80151a0:	bd70      	pop	{r4, r5, r6, pc}
 80151a2:	bf00      	nop
 80151a4:	200288d4 	.word	0x200288d4

080151a8 <lv_theme_set_act>:
    act_theme = th;
 80151a8:	4b01      	ldr	r3, [pc, #4]	; (80151b0 <lv_theme_set_act+0x8>)
 80151aa:	6018      	str	r0, [r3, #0]
}
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	200288d4 	.word	0x200288d4

080151b4 <lv_theme_apply>:
{
 80151b4:	b538      	push	{r3, r4, r5, lr}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
 80151b6:	1e4b      	subs	r3, r1, #1
{
 80151b8:	4604      	mov	r4, r0
 80151ba:	460d      	mov	r5, r1
    switch(name) {
 80151bc:	2b27      	cmp	r3, #39	; 0x27
 80151be:	d819      	bhi.n	80151f4 <lv_theme_apply+0x40>
 80151c0:	e8df f003 	tbb	[pc, r3]
 80151c4:	20201414 	.word	0x20201414
 80151c8:	14822014 	.word	0x14822014
 80151cc:	20142630 	.word	0x20142630
 80151d0:	14142656 	.word	0x14142656
 80151d4:	14141420 	.word	0x14141420
 80151d8:	1414143b 	.word	0x1414143b
 80151dc:	513b1436 	.word	0x513b1436
 80151e0:	20145126 	.word	0x20145126
 80151e4:	30405f26 	.word	0x30405f26
 80151e8:	14702679 	.word	0x14702679
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80151ec:	2100      	movs	r1, #0
#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7f2 fde8 	bl	8007dc4 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
 80151f4:	4b37      	ldr	r3, [pc, #220]	; (80152d4 <lv_theme_apply+0x120>)
 80151f6:	462a      	mov	r2, r5
 80151f8:	4621      	mov	r1, r4
 80151fa:	6818      	ldr	r0, [r3, #0]
}
 80151fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
 8015200:	f7ff bfb6 	b.w	8015170 <apply_theme>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 8015204:	2100      	movs	r1, #0
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 8015206:	4620      	mov	r0, r4
 8015208:	f7f2 fddc 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 801520c:	2101      	movs	r1, #1
 801520e:	e7ee      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 8015210:	2100      	movs	r1, #0
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 8015212:	4620      	mov	r0, r4
 8015214:	f7f2 fdd6 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
 8015218:	2101      	movs	r1, #1
 801521a:	4620      	mov	r0, r4
 801521c:	f7f2 fdd2 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 8015220:	2102      	movs	r1, #2
 8015222:	e7e4      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
 8015224:	2100      	movs	r1, #0
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8015226:	4620      	mov	r0, r4
 8015228:	f7f2 fdcc 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 801522c:	2140      	movs	r1, #64	; 0x40
 801522e:	e7de      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 8015230:	2140      	movs	r1, #64	; 0x40
 8015232:	f7f2 fdc7 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
 8015236:	2141      	movs	r1, #65	; 0x41
 8015238:	e7d9      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801523a:	2100      	movs	r1, #0
 801523c:	f7f2 fdc2 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8015240:	2140      	movs	r1, #64	; 0x40
 8015242:	e7e0      	b.n	8015206 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
 8015244:	2100      	movs	r1, #0
 8015246:	f7f2 fdbd 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
 801524a:	2140      	movs	r1, #64	; 0x40
 801524c:	4620      	mov	r0, r4
 801524e:	f7f2 fdb9 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8015252:	2141      	movs	r1, #65	; 0x41
 8015254:	4620      	mov	r0, r4
 8015256:	f7f2 fdb5 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
 801525a:	2143      	movs	r1, #67	; 0x43
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801525c:	4620      	mov	r0, r4
 801525e:	f7f2 fdb1 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 8015262:	2142      	movs	r1, #66	; 0x42
 8015264:	e7c3      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
 8015266:	2100      	movs	r1, #0
 8015268:	f7f2 fdac 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
 801526c:	2103      	movs	r1, #3
 801526e:	e7be      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
 8015270:	2100      	movs	r1, #0
 8015272:	f7f2 fda7 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
 8015276:	2140      	movs	r1, #64	; 0x40
 8015278:	4620      	mov	r0, r4
 801527a:	f7f2 fda3 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801527e:	2141      	movs	r1, #65	; 0x41
 8015280:	e7ec      	b.n	801525c <lv_theme_apply+0xa8>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
 8015282:	2100      	movs	r1, #0
 8015284:	f7f2 fd9e 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
 8015288:	2101      	movs	r1, #1
 801528a:	4620      	mov	r0, r4
 801528c:	f7f2 fd9a 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
 8015290:	2102      	movs	r1, #2
 8015292:	4620      	mov	r0, r4
 8015294:	f7f2 fd96 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
 8015298:	2103      	movs	r1, #3
 801529a:	4620      	mov	r0, r4
 801529c:	f7f2 fd92 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
 80152a0:	2104      	movs	r1, #4
 80152a2:	e7a4      	b.n	80151ee <lv_theme_apply+0x3a>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 80152a4:	2100      	movs	r1, #0
 80152a6:	f7f2 fd8d 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 80152aa:	2142      	movs	r1, #66	; 0x42
 80152ac:	4620      	mov	r0, r4
 80152ae:	f7f2 fd89 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 80152b2:	2141      	movs	r1, #65	; 0x41
 80152b4:	e7b7      	b.n	8015226 <lv_theme_apply+0x72>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
 80152b6:	2100      	movs	r1, #0
 80152b8:	f7f2 fd84 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 80152bc:	2104      	movs	r1, #4
 80152be:	4620      	mov	r0, r4
 80152c0:	f7f2 fd80 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 80152c4:	2103      	movs	r1, #3
 80152c6:	e79e      	b.n	8015206 <lv_theme_apply+0x52>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
 80152c8:	2100      	movs	r1, #0
 80152ca:	f7f2 fd7b 	bl	8007dc4 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 80152ce:	2103      	movs	r1, #3
 80152d0:	e79f      	b.n	8015212 <lv_theme_apply+0x5e>
 80152d2:	bf00      	nop
 80152d4:	200288d4 	.word	0x200288d4

080152d8 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
 80152d8:	4b01      	ldr	r3, [pc, #4]	; (80152e0 <lv_theme_get_font_normal+0x8>)
 80152da:	681b      	ldr	r3, [r3, #0]
}
 80152dc:	6958      	ldr	r0, [r3, #20]
 80152de:	4770      	bx	lr
 80152e0:	200288d4 	.word	0x200288d4

080152e4 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 80152e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80152e6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 80152ea:	f3c1 24c4 	ubfx	r4, r1, #11, #5
 80152ee:	f3c0 23c4 	ubfx	r3, r0, #11, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80152f2:	f3c1 1745 	ubfx	r7, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80152f6:	4374      	muls	r4, r6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80152f8:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80152fc:	4377      	muls	r7, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80152fe:	f248 0581 	movw	r5, #32897	; 0x8081
 8015302:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015306:	f3c0 1445 	ubfx	r4, r0, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801530a:	434e      	muls	r6, r1
 801530c:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015310:	fb04 7402 	mla	r4, r4, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015314:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015316:	fb00 6202 	mla	r2, r0, r2, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801531a:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801531e:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015320:	436b      	muls	r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015322:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015324:	436c      	muls	r4, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015326:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801532a:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801532c:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015330:	0dd2      	lsrs	r2, r2, #23
    return ret;
 8015332:	f362 0004 	bfi	r0, r2, #0, #5
 8015336:	f364 104a 	bfi	r0, r4, #5, #6
 801533a:	f363 20cf 	bfi	r0, r3, #11, #5
}
 801533e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015340 <lv_color_hex3>:
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 8015340:	b2c3      	uxtb	r3, r0
 8015342:	f3c0 1207 	ubfx	r2, r0, #4, #8
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 8015346:	f003 010f 	and.w	r1, r3, #15
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801534a:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
 801534e:	f023 030f 	bic.w	r3, r3, #15
{
 8015352:	b510      	push	{r4, lr}
    return LV_COLOR_MAKE(r, g, b);
 8015354:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8015358:	f04f 0400 	mov.w	r4, #0
 801535c:	f361 0404 	bfi	r4, r1, #0, #5
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 8015360:	f002 010f 	and.w	r1, r2, #15
 8015364:	f022 020f 	bic.w	r2, r2, #15
    return LV_COLOR_MAKE(r, g, b);
 8015368:	430b      	orrs	r3, r1
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801536a:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
    return LV_COLOR_MAKE(r, g, b);
 801536e:	089b      	lsrs	r3, r3, #2
 8015370:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015374:	f363 144a 	bfi	r4, r3, #5, #6
 8015378:	f362 24cf 	bfi	r4, r2, #11, #5
}
 801537c:	4620      	mov	r0, r4
 801537e:	bd10      	pop	{r4, pc}

08015380 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 8015380:	3a01      	subs	r2, #1
{
 8015382:	b570      	push	{r4, r5, r6, lr}
 8015384:	460c      	mov	r4, r1
    switch(name) {
 8015386:	2a27      	cmp	r2, #39	; 0x27
 8015388:	f200 818a 	bhi.w	80156a0 <theme_apply+0x320>
 801538c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015390:	00310028 	.word	0x00310028
 8015394:	00690091 	.word	0x00690091
 8015398:	00410039 	.word	0x00410039
 801539c:	01880289 	.word	0x01880289
 80153a0:	01e100e7 	.word	0x01e100e7
 80153a4:	02a90031 	.word	0x02a90031
 80153a8:	02c601b0 	.word	0x02c601b0
 80153ac:	01880188 	.word	0x01880188
 80153b0:	0188005d 	.word	0x0188005d
 80153b4:	01880118 	.word	0x01880118
 80153b8:	01a5018f 	.word	0x01a5018f
 80153bc:	00fc02b9 	.word	0x00fc02b9
 80153c0:	01840109 	.word	0x01840109
 80153c4:	016e0120 	.word	0x016e0120
 80153c8:	026c00c9 	.word	0x026c00c9
 80153cc:	00b90282 	.word	0x00b90282
 80153d0:	02120079 	.word	0x02120079
 80153d4:	015f0140 	.word	0x015f0140
 80153d8:	0167024e 	.word	0x0167024e
 80153dc:	02470228 	.word	0x02470228
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 80153e0:	2100      	movs	r1, #0
 80153e2:	4620      	mov	r0, r4
 80153e4:	f7f2 fca4 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 80153e8:	4bc0      	ldr	r3, [pc, #768]	; (80156ec <theme_apply+0x36c>)
 80153ea:	6819      	ldr	r1, [r3, #0]

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
            _lv_style_list_add_style(list, &styles->gauge_strong);

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
            _lv_style_list_add_style(list, &styles->gauge_needle);
 80153ec:	f7f6 f834 	bl	800b458 <_lv_style_list_add_style>
            break;
 80153f0:	e156      	b.n	80156a0 <theme_apply+0x320>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 80153f2:	2100      	movs	r1, #0
 80153f4:	4620      	mov	r0, r4
 80153f6:	f7f2 fc9b 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80153fa:	4bbc      	ldr	r3, [pc, #752]	; (80156ec <theme_apply+0x36c>)
 80153fc:	6819      	ldr	r1, [r3, #0]
 80153fe:	3104      	adds	r1, #4
 8015400:	e7f4      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8015402:	2100      	movs	r1, #0
 8015404:	4620      	mov	r0, r4
 8015406:	f7f2 fc93 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 801540a:	4bb8      	ldr	r3, [pc, #736]	; (80156ec <theme_apply+0x36c>)
 801540c:	6819      	ldr	r1, [r3, #0]
            _lv_style_list_add_style(list, &styles->btn);
 801540e:	3110      	adds	r1, #16
 8015410:	e7ec      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bg);
 8015412:	4db6      	ldr	r5, [pc, #728]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 8015414:	2100      	movs	r1, #0
 8015416:	4620      	mov	r0, r4
 8015418:	f7f2 fc8a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 801541c:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 801541e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015420:	3104      	adds	r1, #4
 8015422:	f7f6 f819 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8015426:	6829      	ldr	r1, [r5, #0]
 8015428:	3118      	adds	r1, #24
            _lv_style_list_add_style(list, &styles->kb_bg);
 801542a:	4630      	mov	r0, r6
 801542c:	f7f6 f814 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 8015430:	2101      	movs	r1, #1
 8015432:	4620      	mov	r0, r4
 8015434:	f7f2 fc7c 	bl	8007d30 <lv_obj_get_style_list>
 8015438:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801543a:	6829      	ldr	r1, [r5, #0]
 801543c:	3104      	adds	r1, #4
 801543e:	f7f6 f80b 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8015442:	6829      	ldr	r1, [r5, #0]
 8015444:	3108      	adds	r1, #8
            _lv_style_list_add_style(list, &styles->lmeter);
 8015446:	4630      	mov	r0, r6
 8015448:	e7d0      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->scr);
 801544a:	4da8      	ldr	r5, [pc, #672]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 801544c:	2100      	movs	r1, #0
 801544e:	4620      	mov	r0, r4
 8015450:	f7f2 fc6e 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 8015454:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 8015456:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->scr);
 8015458:	f7f5 fffe 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->kb_bg);
 801545c:	6829      	ldr	r1, [r5, #0]
 801545e:	316c      	adds	r1, #108	; 0x6c
 8015460:	e7e3      	b.n	801542a <theme_apply+0xaa>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8015462:	4da2      	ldr	r5, [pc, #648]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 8015464:	2100      	movs	r1, #0
 8015466:	4620      	mov	r0, r4
 8015468:	f7f2 fc62 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 801546c:	6829      	ldr	r1, [r5, #0]
 801546e:	3128      	adds	r1, #40	; 0x28
 8015470:	f7f5 fff2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 8015474:	2101      	movs	r1, #1
 8015476:	4620      	mov	r0, r4
 8015478:	f7f2 fc5a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 801547c:	6829      	ldr	r1, [r5, #0]
 801547e:	312c      	adds	r1, #44	; 0x2c
 8015480:	e7b4      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8015482:	4d9a      	ldr	r5, [pc, #616]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 8015484:	2100      	movs	r1, #0
 8015486:	4620      	mov	r0, r4
 8015488:	f7f2 fc52 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 801548c:	6829      	ldr	r1, [r5, #0]
 801548e:	3128      	adds	r1, #40	; 0x28
 8015490:	f7f5 ffe2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 8015494:	2101      	movs	r1, #1
 8015496:	4620      	mov	r0, r4
 8015498:	f7f2 fc4a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 801549c:	6829      	ldr	r1, [r5, #0]
 801549e:	312c      	adds	r1, #44	; 0x2c
 80154a0:	f7f5 ffda 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 80154a4:	2102      	movs	r1, #2
 80154a6:	4620      	mov	r0, r4
 80154a8:	f7f2 fc42 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sw_knob);
 80154ac:	6829      	ldr	r1, [r5, #0]
 80154ae:	31a0      	adds	r1, #160	; 0xa0
 80154b0:	e79c      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bg);
 80154b2:	4d8e      	ldr	r5, [pc, #568]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 80154b4:	2100      	movs	r1, #0
 80154b6:	4620      	mov	r0, r4
 80154b8:	f7f2 fc3a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80154bc:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 80154be:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80154c0:	3104      	adds	r1, #4
 80154c2:	f7f5 ffc9 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 80154c6:	6829      	ldr	r1, [r5, #0]
 80154c8:	4630      	mov	r0, r6
 80154ca:	3120      	adds	r1, #32
 80154cc:	f7f5 ffc4 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 80154d0:	2101      	movs	r1, #1
 80154d2:	4620      	mov	r0, r4
 80154d4:	f7f2 fc2c 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 80154d8:	6829      	ldr	r1, [r5, #0]
 80154da:	311c      	adds	r1, #28
 80154dc:	f7f5 ffbc 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 80154e0:	2102      	movs	r1, #2
 80154e2:	4620      	mov	r0, r4
 80154e4:	f7f2 fc24 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80154e8:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 80154ea:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80154ec:	3104      	adds	r1, #4
 80154ee:	f7f5 ffb3 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 80154f2:	6829      	ldr	r1, [r5, #0]
 80154f4:	4630      	mov	r0, r6
 80154f6:	3108      	adds	r1, #8
 80154f8:	f7f5 ffae 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 80154fc:	6829      	ldr	r1, [r5, #0]
 80154fe:	3124      	adds	r1, #36	; 0x24
 8015500:	e7a1      	b.n	8015446 <theme_apply+0xc6>
            _lv_style_list_add_style(list, &styles->arc_bg);
 8015502:	4d7a      	ldr	r5, [pc, #488]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
 8015504:	2100      	movs	r1, #0
 8015506:	4620      	mov	r0, r4
 8015508:	f7f2 fc12 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_bg);
 801550c:	6829      	ldr	r1, [r5, #0]
 801550e:	3120      	adds	r1, #32
 8015510:	f7f5 ffa2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
 8015514:	2101      	movs	r1, #1
 8015516:	4620      	mov	r0, r4
 8015518:	f7f2 fc0a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 801551c:	6829      	ldr	r1, [r5, #0]
 801551e:	311c      	adds	r1, #28
 8015520:	e764      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8015522:	4d72      	ldr	r5, [pc, #456]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 8015524:	2100      	movs	r1, #0
 8015526:	4620      	mov	r0, r4
 8015528:	f7f2 fc02 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 801552c:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 801552e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
 8015530:	3128      	adds	r1, #40	; 0x28
 8015532:	f7f5 ff91 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 8015536:	6829      	ldr	r1, [r5, #0]
 8015538:	4630      	mov	r0, r6
 801553a:	3198      	adds	r1, #152	; 0x98
 801553c:	f7f5 ff8c 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8015540:	2101      	movs	r1, #1
 8015542:	4620      	mov	r0, r4
 8015544:	f7f2 fbf4 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 8015548:	6829      	ldr	r1, [r5, #0]
 801554a:	312c      	adds	r1, #44	; 0x2c
 801554c:	f7f5 ff84 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8015550:	2102      	movs	r1, #2
 8015552:	4620      	mov	r0, r4
 8015554:	f7f2 fbec 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->slider_knob);
 8015558:	6829      	ldr	r1, [r5, #0]
 801555a:	3194      	adds	r1, #148	; 0x94
 801555c:	e746      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->cb_bg);
 801555e:	4d63      	ldr	r5, [pc, #396]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
 8015560:	2100      	movs	r1, #0
 8015562:	4620      	mov	r0, r4
 8015564:	f7f2 fbe4 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cb_bg);
 8015568:	6829      	ldr	r1, [r5, #0]
 801556a:	3150      	adds	r1, #80	; 0x50
 801556c:	f7f5 ff74 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8015570:	2140      	movs	r1, #64	; 0x40
 8015572:	4620      	mov	r0, r4
 8015574:	f7f2 fbdc 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 8015578:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 801557a:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->btn);
 801557c:	3110      	adds	r1, #16
 801557e:	f7f5 ff6b 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
 8015582:	6829      	ldr	r1, [r5, #0]
 8015584:	3154      	adds	r1, #84	; 0x54
 8015586:	e75e      	b.n	8015446 <theme_apply+0xc6>
            _lv_style_list_add_style(list, &styles->bg);
 8015588:	4d58      	ldr	r5, [pc, #352]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 801558a:	2100      	movs	r1, #0
 801558c:	4620      	mov	r0, r4
 801558e:	f7f2 fbcf 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015592:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 8015594:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015596:	3104      	adds	r1, #4
 8015598:	f7f5 ff5e 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->mbox_bg);
 801559c:	6829      	ldr	r1, [r5, #0]
 801559e:	3180      	adds	r1, #128	; 0x80
 80155a0:	e751      	b.n	8015446 <theme_apply+0xc6>
            _lv_style_list_add_style(list, &styles->pad_small);
 80155a2:	4d52      	ldr	r5, [pc, #328]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 80155a4:	2140      	movs	r1, #64	; 0x40
 80155a6:	4620      	mov	r0, r4
 80155a8:	f7f2 fbc2 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_small);
 80155ac:	6829      	ldr	r1, [r5, #0]
 80155ae:	3118      	adds	r1, #24
 80155b0:	f7f5 ff52 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
 80155b4:	2141      	movs	r1, #65	; 0x41
 80155b6:	4620      	mov	r0, r4
 80155b8:	f7f2 fbba 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 80155bc:	6829      	ldr	r1, [r5, #0]
 80155be:	e726      	b.n	801540e <theme_apply+0x8e>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
 80155c0:	2100      	movs	r1, #0
 80155c2:	4620      	mov	r0, r4
 80155c4:	f7f2 fbb4 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->led);
 80155c8:	4b48      	ldr	r3, [pc, #288]	; (80156ec <theme_apply+0x36c>)
 80155ca:	6819      	ldr	r1, [r3, #0]
 80155cc:	3170      	adds	r1, #112	; 0x70
 80155ce:	e70d      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bg);
 80155d0:	4d46      	ldr	r5, [pc, #280]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 80155d2:	2100      	movs	r1, #0
 80155d4:	4620      	mov	r0, r4
 80155d6:	f7f2 fbab 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80155da:	6829      	ldr	r1, [r5, #0]
 80155dc:	3104      	adds	r1, #4
 80155de:	f7f5 ff3b 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 80155e2:	2140      	movs	r1, #64	; 0x40
 80155e4:	4620      	mov	r0, r4
 80155e6:	f7f2 fba3 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_inner);
 80155ea:	6829      	ldr	r1, [r5, #0]
 80155ec:	3114      	adds	r1, #20
            _lv_style_list_add_style(list, &styles->scr);
 80155ee:	f7f5 ff33 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 80155f2:	2101      	movs	r1, #1
 80155f4:	4620      	mov	r0, r4
 80155f6:	f7f2 fb9b 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 80155fa:	6829      	ldr	r1, [r5, #0]
 80155fc:	3184      	adds	r1, #132	; 0x84
 80155fe:	f7f5 ff2b 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 8015602:	2102      	movs	r1, #2
 8015604:	4620      	mov	r0, r4
 8015606:	f7f2 fb93 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->edge_flash);
 801560a:	6829      	ldr	r1, [r5, #0]
 801560c:	3188      	adds	r1, #136	; 0x88
 801560e:	e6ed      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->scr);
 8015610:	4d36      	ldr	r5, [pc, #216]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
 8015612:	2100      	movs	r1, #0
 8015614:	4620      	mov	r0, r4
 8015616:	f7f2 fb8b 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 801561a:	6829      	ldr	r1, [r5, #0]
 801561c:	f7f5 ff1c 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8015620:	2141      	movs	r1, #65	; 0x41
 8015622:	4620      	mov	r0, r4
 8015624:	f7f2 fb84 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8015628:	6829      	ldr	r1, [r5, #0]
 801562a:	31ac      	adds	r1, #172	; 0xac
 801562c:	f7f5 ff14 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
 8015630:	2143      	movs	r1, #67	; 0x43
 8015632:	4620      	mov	r0, r4
 8015634:	f7f2 fb7c 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_indic);
 8015638:	6829      	ldr	r1, [r5, #0]
 801563a:	31b0      	adds	r1, #176	; 0xb0
 801563c:	f7f5 ff0c 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 8015640:	2142      	movs	r1, #66	; 0x42
 8015642:	4620      	mov	r0, r4
 8015644:	f7f2 fb74 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8015648:	6829      	ldr	r1, [r5, #0]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 801564a:	31a8      	adds	r1, #168	; 0xa8
 801564c:	e6ce      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801564e:	2140      	movs	r1, #64	; 0x40
 8015650:	4620      	mov	r0, r4
 8015652:	f7f2 fb6d 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8015656:	4b25      	ldr	r3, [pc, #148]	; (80156ec <theme_apply+0x36c>)
 8015658:	6819      	ldr	r1, [r3, #0]
 801565a:	31b4      	adds	r1, #180	; 0xb4
 801565c:	e6c6      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->scr);
 801565e:	4d23      	ldr	r5, [pc, #140]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
 8015660:	2100      	movs	r1, #0
 8015662:	4620      	mov	r0, r4
 8015664:	f7f2 fb64 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 8015668:	6829      	ldr	r1, [r5, #0]
 801566a:	e7c0      	b.n	80155ee <theme_apply+0x26e>
            _lv_style_list_add_style(list, &styles->bg);
 801566c:	4d1f      	ldr	r5, [pc, #124]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 801566e:	2100      	movs	r1, #0
 8015670:	4620      	mov	r0, r4
 8015672:	f7f2 fb5d 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015676:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 8015678:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801567a:	3104      	adds	r1, #4
 801567c:	f7f5 feec 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->roller_bg);
 8015680:	6829      	ldr	r1, [r5, #0]
 8015682:	4630      	mov	r0, r6
 8015684:	318c      	adds	r1, #140	; 0x8c
 8015686:	f7f5 fee7 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
 801568a:	2103      	movs	r1, #3
 801568c:	4620      	mov	r0, r4
 801568e:	f7f2 fb4f 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->roller_sel);
 8015692:	6829      	ldr	r1, [r5, #0]
 8015694:	3190      	adds	r1, #144	; 0x90
 8015696:	e6a9      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 8015698:	2100      	movs	r1, #0
 801569a:	4620      	mov	r0, r4
 801569c:	f7f2 fb48 	bl	8007d30 <lv_obj_get_style_list>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80156a0:	22ff      	movs	r2, #255	; 0xff
 80156a2:	4620      	mov	r0, r4
 80156a4:	4611      	mov	r1, r2
}
 80156a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80156aa:	f7f3 be31 	b.w	8009310 <lv_obj_refresh_style>
            _lv_style_list_add_style(list, &styles->bg);
 80156ae:	4d0f      	ldr	r5, [pc, #60]	; (80156ec <theme_apply+0x36c>)
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 80156b0:	2100      	movs	r1, #0
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7f2 fb3c 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80156b8:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 80156ba:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80156bc:	3104      	adds	r1, #4
 80156be:	f7f5 fecb 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->list_bg);
 80156c2:	6829      	ldr	r1, [r5, #0]
 80156c4:	4630      	mov	r0, r6
 80156c6:	3178      	adds	r1, #120	; 0x78
            _lv_style_list_add_style(list, &styles->ta_cursor);
 80156c8:	f7f5 fec6 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 80156cc:	2101      	movs	r1, #1
 80156ce:	4620      	mov	r0, r4
 80156d0:	f7f2 fb2e 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 80156d4:	6829      	ldr	r1, [r5, #0]
 80156d6:	3184      	adds	r1, #132	; 0x84
 80156d8:	e688      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80156da:	2100      	movs	r1, #0
 80156dc:	4620      	mov	r0, r4
 80156de:	f7f2 fb27 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->list_btn);
 80156e2:	4b02      	ldr	r3, [pc, #8]	; (80156ec <theme_apply+0x36c>)
 80156e4:	6819      	ldr	r1, [r3, #0]
 80156e6:	317c      	adds	r1, #124	; 0x7c
 80156e8:	e680      	b.n	80153ec <theme_apply+0x6c>
 80156ea:	bf00      	nop
 80156ec:	200288d8 	.word	0x200288d8
            _lv_style_list_add_style(list, &styles->bg);
 80156f0:	4d99      	ldr	r5, [pc, #612]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 80156f2:	2100      	movs	r1, #0
 80156f4:	4620      	mov	r0, r4
 80156f6:	f7f2 fb1b 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80156fa:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 80156fc:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80156fe:	3104      	adds	r1, #4
 8015700:	f7f5 feaa 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8015704:	6829      	ldr	r1, [r5, #0]
 8015706:	4630      	mov	r0, r6
 8015708:	3108      	adds	r1, #8
 801570a:	f7f5 fea5 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 801570e:	6829      	ldr	r1, [r5, #0]
 8015710:	4630      	mov	r0, r6
 8015712:	3118      	adds	r1, #24
 8015714:	f7f5 fea0 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 8015718:	2140      	movs	r1, #64	; 0x40
 801571a:	4620      	mov	r0, r4
 801571c:	f7f2 fb08 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015720:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 8015722:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015724:	3104      	adds	r1, #4
 8015726:	f7f5 fe97 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->ddlist_page);
 801572a:	6829      	ldr	r1, [r5, #0]
 801572c:	4630      	mov	r0, r6
 801572e:	3158      	adds	r1, #88	; 0x58
 8015730:	f7f5 fe92 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 8015734:	2141      	movs	r1, #65	; 0x41
 8015736:	4620      	mov	r0, r4
 8015738:	f7f2 fafa 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 801573c:	6829      	ldr	r1, [r5, #0]
 801573e:	3184      	adds	r1, #132	; 0x84
 8015740:	f7f5 fe8a 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 8015744:	2142      	movs	r1, #66	; 0x42
 8015746:	4620      	mov	r0, r4
 8015748:	f7f2 faf2 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ddlist_sel);
 801574c:	6829      	ldr	r1, [r5, #0]
 801574e:	315c      	adds	r1, #92	; 0x5c
 8015750:	e64c      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bg);
 8015752:	4d81      	ldr	r5, [pc, #516]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 8015754:	2100      	movs	r1, #0
 8015756:	4620      	mov	r0, r4
 8015758:	f7f2 faea 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 801575c:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 801575e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015760:	3104      	adds	r1, #4
 8015762:	f7f5 fe79 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
 8015766:	6829      	ldr	r1, [r5, #0]
 8015768:	4630      	mov	r0, r6
 801576a:	3144      	adds	r1, #68	; 0x44
 801576c:	f7f5 fe74 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8015770:	6829      	ldr	r1, [r5, #0]
 8015772:	4630      	mov	r0, r6
 8015774:	3118      	adds	r1, #24
 8015776:	f7f5 fe6f 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 801577a:	2101      	movs	r1, #1
 801577c:	4620      	mov	r0, r4
 801577e:	f7f2 fad7 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_small);
 8015782:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 8015784:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->pad_small);
 8015786:	3118      	adds	r1, #24
 8015788:	f7f5 fe66 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 801578c:	6829      	ldr	r1, [r5, #0]
 801578e:	4630      	mov	r0, r6
 8015790:	3148      	adds	r1, #72	; 0x48
 8015792:	f7f5 fe61 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
 8015796:	2103      	movs	r1, #3
 8015798:	4620      	mov	r0, r4
 801579a:	f7f2 fac9 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 801579e:	6829      	ldr	r1, [r5, #0]
 80157a0:	3148      	adds	r1, #72	; 0x48
 80157a2:	f7f5 fe59 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
 80157a6:	2102      	movs	r1, #2
 80157a8:	4620      	mov	r0, r4
 80157aa:	f7f2 fac1 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->chart_series);
 80157ae:	6829      	ldr	r1, [r5, #0]
 80157b0:	314c      	adds	r1, #76	; 0x4c
 80157b2:	e61b      	b.n	80153ec <theme_apply+0x6c>
                _lv_style_list_add_style(list, &styles->bg);
 80157b4:	4e68      	ldr	r6, [pc, #416]	; (8015958 <theme_apply+0x5d8>)
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 80157b6:	2100      	movs	r1, #0
 80157b8:	4620      	mov	r0, r4
                int idx = 1; /* start value should be 1, not zero, since cell styles
 80157ba:	2501      	movs	r5, #1
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 80157bc:	f7f2 fab8 	bl	8007d30 <lv_obj_get_style_list>
                _lv_style_list_add_style(list, &styles->bg);
 80157c0:	6831      	ldr	r1, [r6, #0]
 80157c2:	3104      	adds	r1, #4
 80157c4:	f7f5 fe48 	bl	800b458 <_lv_style_list_add_style>
                    list = lv_obj_get_style_list(obj, idx);
 80157c8:	b2e9      	uxtb	r1, r5
 80157ca:	4620      	mov	r0, r4
 80157cc:	f7f2 fab0 	bl	8007d30 <lv_obj_get_style_list>
                    _lv_style_list_add_style(list, &styles->table_cell);
 80157d0:	6831      	ldr	r1, [r6, #0]
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 80157d2:	3501      	adds	r5, #1
                    _lv_style_list_add_style(list, &styles->table_cell);
 80157d4:	31a4      	adds	r1, #164	; 0xa4
 80157d6:	f7f5 fe3f 	bl	800b458 <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 80157da:	2d05      	cmp	r5, #5
 80157dc:	d1f4      	bne.n	80157c8 <theme_apply+0x448>
 80157de:	e75f      	b.n	80156a0 <theme_apply+0x320>
            _lv_style_list_add_style(list, &styles->scr);
 80157e0:	4d5d      	ldr	r5, [pc, #372]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 80157e2:	2100      	movs	r1, #0
 80157e4:	4620      	mov	r0, r4
 80157e6:	f7f2 faa3 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 80157ea:	6829      	ldr	r1, [r5, #0]
 80157ec:	f7f5 fe34 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 80157f0:	2142      	movs	r1, #66	; 0x42
 80157f2:	4620      	mov	r0, r4
 80157f4:	f7f2 fa9c 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 80157f8:	6829      	ldr	r1, [r5, #0]
 80157fa:	3184      	adds	r1, #132	; 0x84
 80157fc:	f7f5 fe2c 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8015800:	2141      	movs	r1, #65	; 0x41
 8015802:	4620      	mov	r0, r4
 8015804:	f7f2 fa94 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8015808:	6829      	ldr	r1, [r5, #0]
 801580a:	31b4      	adds	r1, #180	; 0xb4
 801580c:	f7f5 fe24 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 8015810:	2140      	movs	r1, #64	; 0x40
 8015812:	4620      	mov	r0, r4
 8015814:	f7f2 fa8c 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8015818:	6829      	ldr	r1, [r5, #0]
 801581a:	31ac      	adds	r1, #172	; 0xac
 801581c:	e5e6      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 801581e:	2100      	movs	r1, #0
 8015820:	4620      	mov	r0, r4
 8015822:	f7f2 fa85 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8015826:	4b4c      	ldr	r3, [pc, #304]	; (8015958 <theme_apply+0x5d8>)
 8015828:	6819      	ldr	r1, [r3, #0]
 801582a:	e70e      	b.n	801564a <theme_apply+0x2ca>
            _lv_style_list_add_style(list, &styles->bg);
 801582c:	4d4a      	ldr	r5, [pc, #296]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 801582e:	2100      	movs	r1, #0
 8015830:	4620      	mov	r0, r4
 8015832:	f7f2 fa7d 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015836:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 8015838:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801583a:	3104      	adds	r1, #4
 801583c:	f7f5 fe0c 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8015840:	6829      	ldr	r1, [r5, #0]
 8015842:	4630      	mov	r0, r6
 8015844:	3118      	adds	r1, #24
 8015846:	f7f5 fe07 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 801584a:	2104      	movs	r1, #4
 801584c:	4620      	mov	r0, r4
 801584e:	f7f2 fa6f 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_placeholder);
 8015852:	6829      	ldr	r1, [r5, #0]
 8015854:	31bc      	adds	r1, #188	; 0xbc
 8015856:	f7f5 fdff 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 801585a:	2103      	movs	r1, #3
 801585c:	4620      	mov	r0, r4
 801585e:	f7f2 fa67 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_cursor);
 8015862:	6829      	ldr	r1, [r5, #0]
 8015864:	31b8      	adds	r1, #184	; 0xb8
 8015866:	e72f      	b.n	80156c8 <theme_apply+0x348>
            _lv_style_list_add_style(list, &styles->bg);
 8015868:	4d3b      	ldr	r5, [pc, #236]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 801586a:	2100      	movs	r1, #0
 801586c:	4620      	mov	r0, r4
 801586e:	f7f2 fa5f 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015872:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 8015874:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015876:	3104      	adds	r1, #4
 8015878:	f7f5 fdee 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 801587c:	6829      	ldr	r1, [r5, #0]
 801587e:	4630      	mov	r0, r6
 8015880:	3118      	adds	r1, #24
 8015882:	f7f5 fde9 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
 8015886:	2103      	movs	r1, #3
 8015888:	4620      	mov	r0, r4
 801588a:	f7f2 fa51 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
 801588e:	6829      	ldr	r1, [r5, #0]
 8015890:	319c      	adds	r1, #156	; 0x9c
 8015892:	e5ab      	b.n	80153ec <theme_apply+0x6c>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8015894:	2100      	movs	r1, #0
 8015896:	4620      	mov	r0, r4
 8015898:	f7f2 fa4a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 801589c:	4d2e      	ldr	r5, [pc, #184]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 801589e:	4606      	mov	r6, r0
 80158a0:	e5cb      	b.n	801543a <theme_apply+0xba>
            _lv_style_list_add_style(list, &styles->bg);
 80158a2:	4d2d      	ldr	r5, [pc, #180]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
 80158a4:	2100      	movs	r1, #0
 80158a6:	4620      	mov	r0, r4
 80158a8:	f7f2 fa42 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80158ac:	6829      	ldr	r1, [r5, #0]
 80158ae:	3104      	adds	r1, #4
 80158b0:	f7f5 fdd2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
 80158b4:	2103      	movs	r1, #3
 80158b6:	4620      	mov	r0, r4
 80158b8:	f7f2 fa3a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
 80158bc:	6829      	ldr	r1, [r5, #0]
 80158be:	3130      	adds	r1, #48	; 0x30
 80158c0:	f7f5 fdca 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
 80158c4:	2101      	movs	r1, #1
 80158c6:	4620      	mov	r0, r4
 80158c8:	f7f2 fa32 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_header);
 80158cc:	6829      	ldr	r1, [r5, #0]
 80158ce:	3134      	adds	r1, #52	; 0x34
 80158d0:	f7f5 fdc2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 80158d4:	2102      	movs	r1, #2
 80158d6:	4620      	mov	r0, r4
 80158d8:	f7f2 fa2a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_daynames);
 80158dc:	6829      	ldr	r1, [r5, #0]
 80158de:	3138      	adds	r1, #56	; 0x38
 80158e0:	e584      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 80158e2:	4d1d      	ldr	r5, [pc, #116]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 80158e4:	2100      	movs	r1, #0
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7f2 fa22 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 80158ec:	6829      	ldr	r1, [r5, #0]
 80158ee:	313c      	adds	r1, #60	; 0x3c
 80158f0:	f7f5 fdb2 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 80158f4:	2101      	movs	r1, #1
 80158f6:	4620      	mov	r0, r4
 80158f8:	f7f2 fa1a 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 80158fc:	6829      	ldr	r1, [r5, #0]
 80158fe:	3140      	adds	r1, #64	; 0x40
 8015900:	e574      	b.n	80153ec <theme_apply+0x6c>
            _lv_style_list_add_style(list, &styles->bg);
 8015902:	4d15      	ldr	r5, [pc, #84]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 8015904:	2100      	movs	r1, #0
 8015906:	4620      	mov	r0, r4
 8015908:	f7f2 fa12 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 801590c:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 801590e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8015910:	3104      	adds	r1, #4
 8015912:	f7f5 fda1 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->lmeter);
 8015916:	6829      	ldr	r1, [r5, #0]
 8015918:	3174      	adds	r1, #116	; 0x74
 801591a:	e594      	b.n	8015446 <theme_apply+0xc6>
            _lv_style_list_add_style(list, &styles->bg);
 801591c:	4d0e      	ldr	r5, [pc, #56]	; (8015958 <theme_apply+0x5d8>)
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 801591e:	2100      	movs	r1, #0
 8015920:	4620      	mov	r0, r4
 8015922:	f7f2 fa05 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8015926:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 8015928:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801592a:	3104      	adds	r1, #4
 801592c:	f7f5 fd94 	bl	800b458 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gauge_main);
 8015930:	6829      	ldr	r1, [r5, #0]
 8015932:	4630      	mov	r0, r6
 8015934:	3160      	adds	r1, #96	; 0x60
 8015936:	f7f5 fd8f 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
 801593a:	2101      	movs	r1, #1
 801593c:	4620      	mov	r0, r4
 801593e:	f7f2 f9f7 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->gauge_strong);
 8015942:	6829      	ldr	r1, [r5, #0]
 8015944:	3164      	adds	r1, #100	; 0x64
 8015946:	f7f5 fd87 	bl	800b458 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
 801594a:	2102      	movs	r1, #2
 801594c:	4620      	mov	r0, r4
 801594e:	f7f2 f9ef 	bl	8007d30 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->gauge_needle);
 8015952:	6829      	ldr	r1, [r5, #0]
 8015954:	3168      	adds	r1, #104	; 0x68
 8015956:	e549      	b.n	80153ec <theme_apply+0x6c>
 8015958:	200288d8 	.word	0x200288d8

0801595c <lv_color_hex>:
{
 801595c:	4603      	mov	r3, r0
    return LV_COLOR_MAKE(r, g, b);
 801595e:	f3c0 02c4 	ubfx	r2, r0, #3, #5
 8015962:	f04f 0000 	mov.w	r0, #0
 8015966:	f362 0004 	bfi	r0, r2, #0, #5
 801596a:	f3c3 2285 	ubfx	r2, r3, #10, #6
 801596e:	f3c3 43c4 	ubfx	r3, r3, #19, #5
 8015972:	f362 104a 	bfi	r0, r2, #5, #6
 8015976:	f363 20cf 	bfi	r0, r3, #11, #5
}
 801597a:	4770      	bx	lr

0801597c <calendar_init>:
{
 801597c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_style_reset(&styles->calendar_header);
 801597e:	4ce0      	ldr	r4, [pc, #896]	; (8015d00 <calendar_init+0x384>)
 8015980:	6820      	ldr	r0, [r4, #0]
 8015982:	3034      	adds	r0, #52	; 0x34
 8015984:	f7f5 fdce 	bl	800b524 <lv_style_reset>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8015988:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801598a:	2200      	movs	r2, #0
 801598c:	2110      	movs	r1, #16
 801598e:	3034      	adds	r0, #52	; 0x34
 8015990:	f7f5 fe22 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015994:	2000      	movs	r0, #0
 8015996:	6825      	ldr	r5, [r4, #0]
 8015998:	f7fd f86c 	bl	8012a74 <lv_disp_get_size_category>
 801599c:	2801      	cmp	r0, #1
 801599e:	f04f 0000 	mov.w	r0, #0
 80159a2:	f105 0534 	add.w	r5, r5, #52	; 0x34
 80159a6:	f200 81c1 	bhi.w	8015d2c <calendar_init+0x3b0>
 80159aa:	f7fd f857 	bl	8012a5c <lv_disp_get_dpi>
 80159ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80159b2:	28ef      	cmp	r0, #239	; 0xef
 80159b4:	f300 81ae 	bgt.w	8015d14 <calendar_init+0x398>
 80159b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80159ba:	4628      	mov	r0, r5
 80159bc:	2112      	movs	r1, #18
 80159be:	f7f5 fe0b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80159c2:	2000      	movs	r0, #0
 80159c4:	6825      	ldr	r5, [r4, #0]
 80159c6:	f7fd f855 	bl	8012a74 <lv_disp_get_size_category>
 80159ca:	2801      	cmp	r0, #1
 80159cc:	f04f 0000 	mov.w	r0, #0
 80159d0:	f105 0534 	add.w	r5, r5, #52	; 0x34
 80159d4:	f200 81c3 	bhi.w	8015d5e <calendar_init+0x3e2>
 80159d8:	f7fd f840 	bl	8012a5c <lv_disp_get_dpi>
 80159dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80159e0:	28ef      	cmp	r0, #239	; 0xef
 80159e2:	f300 81b0 	bgt.w	8015d46 <calendar_init+0x3ca>
 80159e6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 80159e8:	4628      	mov	r0, r5
 80159ea:	2113      	movs	r1, #19
 80159ec:	f7f5 fdf4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 80159f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80159f2:	2200      	movs	r2, #0
 80159f4:	2111      	movs	r1, #17
 80159f6:	3034      	adds	r0, #52	; 0x34
 80159f8:	f7f5 fdee 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80159fc:	2000      	movs	r0, #0
 80159fe:	6825      	ldr	r5, [r4, #0]
 8015a00:	f7fd f838 	bl	8012a74 <lv_disp_get_size_category>
 8015a04:	2801      	cmp	r0, #1
 8015a06:	f04f 0000 	mov.w	r0, #0
 8015a0a:	f105 0534 	add.w	r5, r5, #52	; 0x34
 8015a0e:	f200 81bf 	bhi.w	8015d90 <calendar_init+0x414>
 8015a12:	f7fd f823 	bl	8012a5c <lv_disp_get_dpi>
 8015a16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015a1a:	28ef      	cmp	r0, #239	; 0xef
 8015a1c:	f300 81ac 	bgt.w	8015d78 <calendar_init+0x3fc>
 8015a20:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 8015a22:	4628      	mov	r0, r5
 8015a24:	2115      	movs	r1, #21
 8015a26:	f7f5 fdd7 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015a2a:	2000      	movs	r0, #0
 8015a2c:	6825      	ldr	r5, [r4, #0]
 8015a2e:	f7fd f821 	bl	8012a74 <lv_disp_get_size_category>
 8015a32:	2801      	cmp	r0, #1
 8015a34:	f04f 0000 	mov.w	r0, #0
 8015a38:	f105 0534 	add.w	r5, r5, #52	; 0x34
 8015a3c:	f200 81c1 	bhi.w	8015dc2 <calendar_init+0x446>
 8015a40:	f7fd f80c 	bl	8012a5c <lv_disp_get_dpi>
 8015a44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015a48:	28ef      	cmp	r0, #239	; 0xef
 8015a4a:	f300 81ae 	bgt.w	8015daa <calendar_init+0x42e>
 8015a4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8015a50:	4628      	mov	r0, r5
 8015a52:	2116      	movs	r1, #22
 8015a54:	f7f5 fdc0 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 8015a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a5a:	6820      	ldr	r0, [r4, #0]
 8015a5c:	f013 0f02 	tst.w	r3, #2
 8015a60:	4da8      	ldr	r5, [pc, #672]	; (8015d04 <calendar_init+0x388>)
 8015a62:	f100 0634 	add.w	r6, r0, #52	; 0x34
 8015a66:	f000 81b9 	beq.w	8015ddc <calendar_init+0x460>
 8015a6a:	48a7      	ldr	r0, [pc, #668]	; (8015d08 <calendar_init+0x38c>)
 8015a6c:	f7ff ff76 	bl	801595c <lv_color_hex>
 8015a70:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8015a72:	f249 0189 	movw	r1, #37001	; 0x9089
 8015a76:	4630      	mov	r0, r6
 8015a78:	f7f5 fdfc 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->calendar_daynames);
 8015a7c:	6820      	ldr	r0, [r4, #0]
 8015a7e:	3038      	adds	r0, #56	; 0x38
 8015a80:	f7f5 fd50 	bl	800b524 <lv_style_reset>
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
 8015a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 8015a86:	6826      	ldr	r6, [r4, #0]
 8015a88:	0799      	lsls	r1, r3, #30
 8015a8a:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8015a8e:	f140 81a7 	bpl.w	8015de0 <calendar_init+0x464>
 8015a92:	489e      	ldr	r0, [pc, #632]	; (8015d0c <calendar_init+0x390>)
 8015a94:	f7ff ff62 	bl	801595c <lv_color_hex>
 8015a98:	4602      	mov	r2, r0
 8015a9a:	f248 0189 	movw	r1, #32905	; 0x8089
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	f7f5 fde8 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	6826      	ldr	r6, [r4, #0]
 8015aa8:	f7fc ffe4 	bl	8012a74 <lv_disp_get_size_category>
 8015aac:	2801      	cmp	r0, #1
 8015aae:	f04f 0000 	mov.w	r0, #0
 8015ab2:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8015ab6:	f200 81a4 	bhi.w	8015e02 <calendar_init+0x486>
 8015aba:	f7fc ffcf 	bl	8012a5c <lv_disp_get_dpi>
 8015abe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015ac2:	28ef      	cmp	r0, #239	; 0xef
 8015ac4:	f300 8191 	bgt.w	8015dea <calendar_init+0x46e>
 8015ac8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8015aca:	4630      	mov	r0, r6
 8015acc:	2112      	movs	r1, #18
 8015ace:	f7f5 fd83 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	6826      	ldr	r6, [r4, #0]
 8015ad6:	f7fc ffcd 	bl	8012a74 <lv_disp_get_size_category>
 8015ada:	2801      	cmp	r0, #1
 8015adc:	f04f 0000 	mov.w	r0, #0
 8015ae0:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8015ae4:	f200 81a6 	bhi.w	8015e34 <calendar_init+0x4b8>
 8015ae8:	f7fc ffb8 	bl	8012a5c <lv_disp_get_dpi>
 8015aec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015af0:	28ef      	cmp	r0, #239	; 0xef
 8015af2:	f300 8193 	bgt.w	8015e1c <calendar_init+0x4a0>
 8015af6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8015af8:	4630      	mov	r0, r6
 8015afa:	2113      	movs	r1, #19
 8015afc:	f7f5 fd6c 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015b00:	2000      	movs	r0, #0
 8015b02:	6826      	ldr	r6, [r4, #0]
 8015b04:	f7fc ffb6 	bl	8012a74 <lv_disp_get_size_category>
 8015b08:	2801      	cmp	r0, #1
 8015b0a:	f04f 0000 	mov.w	r0, #0
 8015b0e:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8015b12:	f200 81a8 	bhi.w	8015e66 <calendar_init+0x4ea>
 8015b16:	f7fc ffa1 	bl	8012a5c <lv_disp_get_dpi>
 8015b1a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015b1e:	28ef      	cmp	r0, #239	; 0xef
 8015b20:	f300 8195 	bgt.w	8015e4e <calendar_init+0x4d2>
 8015b24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8015b26:	2111      	movs	r1, #17
 8015b28:	4630      	mov	r0, r6
 8015b2a:	f7f5 fd55 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->calendar_date_nums);
 8015b2e:	6820      	ldr	r0, [r4, #0]
 8015b30:	3030      	adds	r0, #48	; 0x30
 8015b32:	f7f5 fcf7 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8015b36:	2000      	movs	r0, #0
 8015b38:	6826      	ldr	r6, [r4, #0]
 8015b3a:	f7fc ff8f 	bl	8012a5c <lv_disp_get_dpi>
 8015b3e:	283b      	cmp	r0, #59	; 0x3b
 8015b40:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8015b44:	f340 819c 	ble.w	8015e80 <calendar_init+0x504>
 8015b48:	2000      	movs	r0, #0
 8015b4a:	f7fc ff87 	bl	8012a5c <lv_disp_get_dpi>
 8015b4e:	f100 0214 	add.w	r2, r0, #20
 8015b52:	2028      	movs	r0, #40	; 0x28
 8015b54:	fb92 f2f0 	sdiv	r2, r2, r0
 8015b58:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	2101      	movs	r1, #1
 8015b5e:	f7f5 fd3b 	bl	800b5d8 <_lv_style_set_int>
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8015b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8015b64:	6820      	ldr	r0, [r4, #0]
 8015b66:	079a      	lsls	r2, r3, #30
 8015b68:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8015b6c:	f140 818a 	bpl.w	8015e84 <calendar_init+0x508>
 8015b70:	4866      	ldr	r0, [pc, #408]	; (8015d0c <calendar_init+0x390>)
 8015b72:	f7ff fef3 	bl	801595c <lv_color_hex>
 8015b76:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8015b78:	f248 1189 	movw	r1, #33161	; 0x8189
 8015b7c:	4630      	mov	r0, r6
 8015b7e:	f7f5 fd79 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
 8015b82:	6820      	ldr	r0, [r4, #0]
 8015b84:	886a      	ldrh	r2, [r5, #2]
 8015b86:	f24a 0189 	movw	r1, #41097	; 0xa089
 8015b8a:	3030      	adds	r0, #48	; 0x30
 8015b8c:	f7f5 fd72 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
 8015b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b92:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8015b94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8015b98:	f013 0f02 	tst.w	r3, #2
 8015b9c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8015ba0:	bf14      	ite	ne
 8015ba2:	2233      	movne	r2, #51	; 0x33
 8015ba4:	2266      	moveq	r2, #102	; 0x66
 8015ba6:	f7f5 fdb3 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
 8015baa:	6820      	ldr	r0, [r4, #0]
 8015bac:	2233      	movs	r2, #51	; 0x33
 8015bae:	f241 012c 	movw	r1, #4140	; 0x102c
 8015bb2:	3030      	adds	r0, #48	; 0x30
 8015bb4:	f7f5 fdac 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
 8015bb8:	6820      	ldr	r0, [r4, #0]
 8015bba:	22ff      	movs	r2, #255	; 0xff
 8015bbc:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8015bc0:	3030      	adds	r0, #48	; 0x30
 8015bc2:	f7f5 fda5 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
 8015bc6:	882b      	ldrh	r3, [r5, #0]
 8015bc8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8015bca:	f248 2189 	movw	r1, #33417	; 0x8289
 8015bce:	b29a      	uxth	r2, r3
 8015bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015bd4:	3030      	adds	r0, #48	; 0x30
 8015bd6:	f7f5 fd4d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
 8015bda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8015bdc:	8a22      	ldrh	r2, [r4, #16]
 8015bde:	f240 2129 	movw	r1, #553	; 0x229
 8015be2:	3030      	adds	r0, #48	; 0x30
 8015be4:	f7f5 fd46 	bl	800b674 <_lv_style_set_color>
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
 8015be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 8015bea:	6820      	ldr	r0, [r4, #0]
 8015bec:	079b      	lsls	r3, r3, #30
 8015bee:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8015bf2:	f140 8149 	bpl.w	8015e88 <calendar_init+0x50c>
 8015bf6:	4846      	ldr	r0, [pc, #280]	; (8015d10 <calendar_init+0x394>)
 8015bf8:	f7ff feb0 	bl	801595c <lv_color_hex>
 8015bfc:	4602      	mov	r2, r0
 8015bfe:	4628      	mov	r0, r5
 8015c00:	2129      	movs	r1, #41	; 0x29
 8015c02:	f7f5 fd37 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 8015c06:	6820      	ldr	r0, [r4, #0]
 8015c08:	8a22      	ldrh	r2, [r4, #16]
 8015c0a:	f240 1129 	movw	r1, #297	; 0x129
 8015c0e:	3030      	adds	r0, #48	; 0x30
 8015c10:	f7f5 fd30 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
 8015c14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8015c16:	2202      	movs	r2, #2
 8015c18:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015c1c:	3030      	adds	r0, #48	; 0x30
 8015c1e:	f7f5 fcdb 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
 8015c22:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8015c24:	2204      	movs	r2, #4
 8015c26:	f240 1131 	movw	r1, #305	; 0x131
 8015c2a:	3030      	adds	r0, #48	; 0x30
 8015c2c:	f7f5 fcd4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 8015c30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8015c32:	8a22      	ldrh	r2, [r4, #16]
 8015c34:	f240 1139 	movw	r1, #313	; 0x139
 8015c38:	3030      	adds	r0, #48	; 0x30
 8015c3a:	f7f5 fd1b 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 8015c3e:	2000      	movs	r0, #0
 8015c40:	6825      	ldr	r5, [r4, #0]
 8015c42:	f7fc ff0b 	bl	8012a5c <lv_disp_get_dpi>
 8015c46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015c4a:	3530      	adds	r5, #48	; 0x30
 8015c4c:	28ef      	cmp	r0, #239	; 0xef
 8015c4e:	f340 811e 	ble.w	8015e8e <calendar_init+0x512>
 8015c52:	2000      	movs	r0, #0
 8015c54:	f7fc ff02 	bl	8012a5c <lv_disp_get_dpi>
 8015c58:	2203      	movs	r2, #3
 8015c5a:	2350      	movs	r3, #80	; 0x50
 8015c5c:	fb00 3202 	mla	r2, r0, r2, r3
 8015c60:	20a0      	movs	r0, #160	; 0xa0
 8015c62:	fb92 f2f0 	sdiv	r2, r2, r0
 8015c66:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8015c68:	4628      	mov	r0, r5
 8015c6a:	2114      	movs	r1, #20
 8015c6c:	f7f5 fcb4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015c70:	2000      	movs	r0, #0
 8015c72:	6825      	ldr	r5, [r4, #0]
 8015c74:	f7fc fefe 	bl	8012a74 <lv_disp_get_size_category>
 8015c78:	2801      	cmp	r0, #1
 8015c7a:	f04f 0000 	mov.w	r0, #0
 8015c7e:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8015c82:	f200 8112 	bhi.w	8015eaa <calendar_init+0x52e>
 8015c86:	f7fc fee9 	bl	8012a5c <lv_disp_get_dpi>
 8015c8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015c8e:	28ef      	cmp	r0, #239	; 0xef
 8015c90:	f300 80ff 	bgt.w	8015e92 <calendar_init+0x516>
 8015c94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8015c96:	4628      	mov	r0, r5
 8015c98:	2112      	movs	r1, #18
 8015c9a:	f7f5 fc9d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015c9e:	2000      	movs	r0, #0
 8015ca0:	6825      	ldr	r5, [r4, #0]
 8015ca2:	f7fc fee7 	bl	8012a74 <lv_disp_get_size_category>
 8015ca6:	2801      	cmp	r0, #1
 8015ca8:	f04f 0000 	mov.w	r0, #0
 8015cac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8015cb0:	f200 8114 	bhi.w	8015edc <calendar_init+0x560>
 8015cb4:	f7fc fed2 	bl	8012a5c <lv_disp_get_dpi>
 8015cb8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015cbc:	28ef      	cmp	r0, #239	; 0xef
 8015cbe:	f300 8101 	bgt.w	8015ec4 <calendar_init+0x548>
 8015cc2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8015cc4:	2113      	movs	r1, #19
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f7f5 fc86 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015ccc:	2000      	movs	r0, #0
 8015cce:	6824      	ldr	r4, [r4, #0]
 8015cd0:	f7fc fed0 	bl	8012a74 <lv_disp_get_size_category>
 8015cd4:	2801      	cmp	r0, #1
 8015cd6:	f04f 0000 	mov.w	r0, #0
 8015cda:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8015cde:	f200 8116 	bhi.w	8015f0e <calendar_init+0x592>
 8015ce2:	f7fc febb 	bl	8012a5c <lv_disp_get_dpi>
 8015ce6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015cea:	28ef      	cmp	r0, #239	; 0xef
 8015cec:	f300 8103 	bgt.w	8015ef6 <calendar_init+0x57a>
 8015cf0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8015cf2:	2111      	movs	r1, #17
 8015cf4:	4620      	mov	r0, r4
}
 8015cf6:	b002      	add	sp, #8
 8015cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cfc:	f7f5 bc6c 	b.w	800b5d8 <_lv_style_set_int>
 8015d00:	200288d8 	.word	0x200288d8
 8015d04:	080229e8 	.word	0x080229e8
 8015d08:	00888888 	.word	0x00888888
 8015d0c:	0031404f 	.word	0x0031404f
 8015d10:	00666666 	.word	0x00666666
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015d14:	2000      	movs	r0, #0
 8015d16:	f7fc fea1 	bl	8012a5c <lv_disp_get_dpi>
 8015d1a:	220f      	movs	r2, #15
 8015d1c:	2350      	movs	r3, #80	; 0x50
 8015d1e:	fb00 3202 	mla	r2, r0, r2, r3
 8015d22:	20a0      	movs	r0, #160	; 0xa0
 8015d24:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d28:	b212      	sxth	r2, r2
 8015d2a:	e646      	b.n	80159ba <calendar_init+0x3e>
 8015d2c:	f7fc fe96 	bl	8012a5c <lv_disp_get_dpi>
 8015d30:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015d34:	0040      	lsls	r0, r0, #1
 8015d36:	28ef      	cmp	r0, #239	; 0xef
 8015d38:	f77f ae3e 	ble.w	80159b8 <calendar_init+0x3c>
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	f7fc fe8d 	bl	8012a5c <lv_disp_get_dpi>
 8015d42:	221e      	movs	r2, #30
 8015d44:	e7ea      	b.n	8015d1c <calendar_init+0x3a0>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015d46:	2000      	movs	r0, #0
 8015d48:	f7fc fe88 	bl	8012a5c <lv_disp_get_dpi>
 8015d4c:	220f      	movs	r2, #15
 8015d4e:	2350      	movs	r3, #80	; 0x50
 8015d50:	fb00 3202 	mla	r2, r0, r2, r3
 8015d54:	20a0      	movs	r0, #160	; 0xa0
 8015d56:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d5a:	b212      	sxth	r2, r2
 8015d5c:	e644      	b.n	80159e8 <calendar_init+0x6c>
 8015d5e:	f7fc fe7d 	bl	8012a5c <lv_disp_get_dpi>
 8015d62:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015d66:	0040      	lsls	r0, r0, #1
 8015d68:	28ef      	cmp	r0, #239	; 0xef
 8015d6a:	f77f ae3c 	ble.w	80159e6 <calendar_init+0x6a>
 8015d6e:	2000      	movs	r0, #0
 8015d70:	f7fc fe74 	bl	8012a5c <lv_disp_get_dpi>
 8015d74:	221e      	movs	r2, #30
 8015d76:	e7ea      	b.n	8015d4e <calendar_init+0x3d2>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015d78:	2000      	movs	r0, #0
 8015d7a:	f7fc fe6f 	bl	8012a5c <lv_disp_get_dpi>
 8015d7e:	220f      	movs	r2, #15
 8015d80:	2350      	movs	r3, #80	; 0x50
 8015d82:	fb00 3202 	mla	r2, r0, r2, r3
 8015d86:	20a0      	movs	r0, #160	; 0xa0
 8015d88:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d8c:	b212      	sxth	r2, r2
 8015d8e:	e648      	b.n	8015a22 <calendar_init+0xa6>
 8015d90:	f7fc fe64 	bl	8012a5c <lv_disp_get_dpi>
 8015d94:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015d98:	0040      	lsls	r0, r0, #1
 8015d9a:	28ef      	cmp	r0, #239	; 0xef
 8015d9c:	f77f ae40 	ble.w	8015a20 <calendar_init+0xa4>
 8015da0:	2000      	movs	r0, #0
 8015da2:	f7fc fe5b 	bl	8012a5c <lv_disp_get_dpi>
 8015da6:	221e      	movs	r2, #30
 8015da8:	e7ea      	b.n	8015d80 <calendar_init+0x404>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8015daa:	2000      	movs	r0, #0
 8015dac:	f7fc fe56 	bl	8012a5c <lv_disp_get_dpi>
 8015db0:	220f      	movs	r2, #15
 8015db2:	2350      	movs	r3, #80	; 0x50
 8015db4:	fb00 3202 	mla	r2, r0, r2, r3
 8015db8:	20a0      	movs	r0, #160	; 0xa0
 8015dba:	fb92 f2f0 	sdiv	r2, r2, r0
 8015dbe:	b212      	sxth	r2, r2
 8015dc0:	e646      	b.n	8015a50 <calendar_init+0xd4>
 8015dc2:	f7fc fe4b 	bl	8012a5c <lv_disp_get_dpi>
 8015dc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015dca:	0040      	lsls	r0, r0, #1
 8015dcc:	28ef      	cmp	r0, #239	; 0xef
 8015dce:	f77f ae3e 	ble.w	8015a4e <calendar_init+0xd2>
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	f7fc fe42 	bl	8012a5c <lv_disp_get_dpi>
 8015dd8:	221e      	movs	r2, #30
 8015dda:	e7ea      	b.n	8015db2 <calendar_init+0x436>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 8015ddc:	882a      	ldrh	r2, [r5, #0]
 8015dde:	e648      	b.n	8015a72 <calendar_init+0xf6>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 8015de0:	f640 60ee 	movw	r0, #3822	; 0xeee
 8015de4:	f7ff faac 	bl	8015340 <lv_color_hex3>
 8015de8:	e656      	b.n	8015a98 <calendar_init+0x11c>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015dea:	2000      	movs	r0, #0
 8015dec:	f7fc fe36 	bl	8012a5c <lv_disp_get_dpi>
 8015df0:	220f      	movs	r2, #15
 8015df2:	2350      	movs	r3, #80	; 0x50
 8015df4:	fb00 3202 	mla	r2, r0, r2, r3
 8015df8:	20a0      	movs	r0, #160	; 0xa0
 8015dfa:	fb92 f2f0 	sdiv	r2, r2, r0
 8015dfe:	b212      	sxth	r2, r2
 8015e00:	e663      	b.n	8015aca <calendar_init+0x14e>
 8015e02:	f7fc fe2b 	bl	8012a5c <lv_disp_get_dpi>
 8015e06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015e0a:	0040      	lsls	r0, r0, #1
 8015e0c:	28ef      	cmp	r0, #239	; 0xef
 8015e0e:	f77f ae5b 	ble.w	8015ac8 <calendar_init+0x14c>
 8015e12:	2000      	movs	r0, #0
 8015e14:	f7fc fe22 	bl	8012a5c <lv_disp_get_dpi>
 8015e18:	221e      	movs	r2, #30
 8015e1a:	e7ea      	b.n	8015df2 <calendar_init+0x476>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015e1c:	2000      	movs	r0, #0
 8015e1e:	f7fc fe1d 	bl	8012a5c <lv_disp_get_dpi>
 8015e22:	220f      	movs	r2, #15
 8015e24:	2350      	movs	r3, #80	; 0x50
 8015e26:	fb00 3202 	mla	r2, r0, r2, r3
 8015e2a:	20a0      	movs	r0, #160	; 0xa0
 8015e2c:	fb92 f2f0 	sdiv	r2, r2, r0
 8015e30:	b212      	sxth	r2, r2
 8015e32:	e661      	b.n	8015af8 <calendar_init+0x17c>
 8015e34:	f7fc fe12 	bl	8012a5c <lv_disp_get_dpi>
 8015e38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015e3c:	0040      	lsls	r0, r0, #1
 8015e3e:	28ef      	cmp	r0, #239	; 0xef
 8015e40:	f77f ae59 	ble.w	8015af6 <calendar_init+0x17a>
 8015e44:	2000      	movs	r0, #0
 8015e46:	f7fc fe09 	bl	8012a5c <lv_disp_get_dpi>
 8015e4a:	221e      	movs	r2, #30
 8015e4c:	e7ea      	b.n	8015e24 <calendar_init+0x4a8>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8015e4e:	2000      	movs	r0, #0
 8015e50:	f7fc fe04 	bl	8012a5c <lv_disp_get_dpi>
 8015e54:	220f      	movs	r2, #15
 8015e56:	2350      	movs	r3, #80	; 0x50
 8015e58:	fb00 3202 	mla	r2, r0, r2, r3
 8015e5c:	20a0      	movs	r0, #160	; 0xa0
 8015e5e:	fb92 f2f0 	sdiv	r2, r2, r0
 8015e62:	b212      	sxth	r2, r2
 8015e64:	e65f      	b.n	8015b26 <calendar_init+0x1aa>
 8015e66:	f7fc fdf9 	bl	8012a5c <lv_disp_get_dpi>
 8015e6a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015e6e:	0040      	lsls	r0, r0, #1
 8015e70:	28ef      	cmp	r0, #239	; 0xef
 8015e72:	f77f ae57 	ble.w	8015b24 <calendar_init+0x1a8>
 8015e76:	2000      	movs	r0, #0
 8015e78:	f7fc fdf0 	bl	8012a5c <lv_disp_get_dpi>
 8015e7c:	221e      	movs	r2, #30
 8015e7e:	e7ea      	b.n	8015e56 <calendar_init+0x4da>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8015e80:	2201      	movs	r2, #1
 8015e82:	e66a      	b.n	8015b5a <calendar_init+0x1de>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 8015e84:	882a      	ldrh	r2, [r5, #0]
 8015e86:	e677      	b.n	8015b78 <calendar_init+0x1fc>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 8015e88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015e8c:	e6b7      	b.n	8015bfe <calendar_init+0x282>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 8015e8e:	2201      	movs	r2, #1
 8015e90:	e6ea      	b.n	8015c68 <calendar_init+0x2ec>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015e92:	2000      	movs	r0, #0
 8015e94:	f7fc fde2 	bl	8012a5c <lv_disp_get_dpi>
 8015e98:	220f      	movs	r2, #15
 8015e9a:	2350      	movs	r3, #80	; 0x50
 8015e9c:	fb00 3202 	mla	r2, r0, r2, r3
 8015ea0:	20a0      	movs	r0, #160	; 0xa0
 8015ea2:	fb92 f2f0 	sdiv	r2, r2, r0
 8015ea6:	b212      	sxth	r2, r2
 8015ea8:	e6f5      	b.n	8015c96 <calendar_init+0x31a>
 8015eaa:	f7fc fdd7 	bl	8012a5c <lv_disp_get_dpi>
 8015eae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015eb2:	0040      	lsls	r0, r0, #1
 8015eb4:	28ef      	cmp	r0, #239	; 0xef
 8015eb6:	f77f aeed 	ble.w	8015c94 <calendar_init+0x318>
 8015eba:	2000      	movs	r0, #0
 8015ebc:	f7fc fdce 	bl	8012a5c <lv_disp_get_dpi>
 8015ec0:	221e      	movs	r2, #30
 8015ec2:	e7ea      	b.n	8015e9a <calendar_init+0x51e>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	f7fc fdc9 	bl	8012a5c <lv_disp_get_dpi>
 8015eca:	220f      	movs	r2, #15
 8015ecc:	2350      	movs	r3, #80	; 0x50
 8015ece:	fb00 3202 	mla	r2, r0, r2, r3
 8015ed2:	20a0      	movs	r0, #160	; 0xa0
 8015ed4:	fb92 f2f0 	sdiv	r2, r2, r0
 8015ed8:	b212      	sxth	r2, r2
 8015eda:	e6f3      	b.n	8015cc4 <calendar_init+0x348>
 8015edc:	f7fc fdbe 	bl	8012a5c <lv_disp_get_dpi>
 8015ee0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015ee4:	0040      	lsls	r0, r0, #1
 8015ee6:	28ef      	cmp	r0, #239	; 0xef
 8015ee8:	f77f aeeb 	ble.w	8015cc2 <calendar_init+0x346>
 8015eec:	2000      	movs	r0, #0
 8015eee:	f7fc fdb5 	bl	8012a5c <lv_disp_get_dpi>
 8015ef2:	221e      	movs	r2, #30
 8015ef4:	e7ea      	b.n	8015ecc <calendar_init+0x550>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	f7fc fdb0 	bl	8012a5c <lv_disp_get_dpi>
 8015efc:	220f      	movs	r2, #15
 8015efe:	2350      	movs	r3, #80	; 0x50
 8015f00:	fb00 3202 	mla	r2, r0, r2, r3
 8015f04:	20a0      	movs	r0, #160	; 0xa0
 8015f06:	fb92 f2f0 	sdiv	r2, r2, r0
 8015f0a:	b212      	sxth	r2, r2
 8015f0c:	e6f1      	b.n	8015cf2 <calendar_init+0x376>
 8015f0e:	f7fc fda5 	bl	8012a5c <lv_disp_get_dpi>
 8015f12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8015f16:	0040      	lsls	r0, r0, #1
 8015f18:	28ef      	cmp	r0, #239	; 0xef
 8015f1a:	f77f aee9 	ble.w	8015cf0 <calendar_init+0x374>
 8015f1e:	2000      	movs	r0, #0
 8015f20:	f7fc fd9c 	bl	8012a5c <lv_disp_get_dpi>
 8015f24:	221e      	movs	r2, #30
 8015f26:	e7ea      	b.n	8015efe <calendar_init+0x582>

08015f28 <list_init>:
{
 8015f28:	b570      	push	{r4, r5, r6, lr}
    lv_style_reset(&styles->list_bg);
 8015f2a:	4cd2      	ldr	r4, [pc, #840]	; (8016274 <list_init+0x34c>)
 8015f2c:	6820      	ldr	r0, [r4, #0]
 8015f2e:	3078      	adds	r0, #120	; 0x78
 8015f30:	f7f5 faf8 	bl	800b524 <lv_style_reset>
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
 8015f34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 8015f36:	2201      	movs	r2, #1
 8015f38:	2102      	movs	r1, #2
 8015f3a:	3078      	adds	r0, #120	; 0x78
 8015f3c:	f7f5 fb4c 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8015f40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8015f42:	2200      	movs	r2, #0
 8015f44:	2112      	movs	r1, #18
 8015f46:	3078      	adds	r0, #120	; 0x78
 8015f48:	f7f5 fb46 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8015f4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8015f4e:	2200      	movs	r2, #0
 8015f50:	2113      	movs	r1, #19
 8015f52:	3078      	adds	r0, #120	; 0x78
 8015f54:	f7f5 fb40 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8015f58:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2110      	movs	r1, #16
 8015f5e:	3078      	adds	r0, #120	; 0x78
 8015f60:	f7f5 fb3a 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8015f64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8015f66:	2200      	movs	r2, #0
 8015f68:	2111      	movs	r1, #17
 8015f6a:	3078      	adds	r0, #120	; 0x78
 8015f6c:	f7f5 fb34 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8015f70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8015f72:	2200      	movs	r2, #0
 8015f74:	2114      	movs	r1, #20
 8015f76:	3078      	adds	r0, #120	; 0x78
 8015f78:	f7f5 fb2e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->list_btn);
 8015f7c:	6820      	ldr	r0, [r4, #0]
 8015f7e:	307c      	adds	r0, #124	; 0x7c
 8015f80:	f7f5 fad0 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 8015f84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8015f86:	212c      	movs	r1, #44	; 0x2c
 8015f88:	22ff      	movs	r2, #255	; 0xff
 8015f8a:	307c      	adds	r0, #124	; 0x7c
 8015f8c:	f7f5 fbc0 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
 8015f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f92:	6825      	ldr	r5, [r4, #0]
 8015f94:	0799      	lsls	r1, r3, #30
 8015f96:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8015f9a:	bf4c      	ite	mi
 8015f9c:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8015fa0:	48b5      	ldrpl	r0, [pc, #724]	; (8016278 <list_init+0x350>)
 8015fa2:	f7ff fcdb 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8015fa6:	2129      	movs	r1, #41	; 0x29
 8015fa8:	4602      	mov	r2, r0
 8015faa:	4628      	mov	r0, r5
 8015fac:	f7f5 fb62 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
 8015fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fb2:	6825      	ldr	r5, [r4, #0]
 8015fb4:	079a      	lsls	r2, r3, #30
 8015fb6:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8015fba:	bf4c      	ite	mi
 8015fbc:	48af      	ldrmi	r0, [pc, #700]	; (801627c <list_init+0x354>)
 8015fbe:	48b0      	ldrpl	r0, [pc, #704]	; (8016280 <list_init+0x358>)
 8015fc0:	f7ff fccc 	bl	801595c <lv_color_hex>
 8015fc4:	f241 0129 	movw	r1, #4137	; 0x1029
 8015fc8:	4602      	mov	r2, r0
 8015fca:	4628      	mov	r0, r5
 8015fcc:	f7f5 fb52 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
 8015fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fd2:	6825      	ldr	r5, [r4, #0]
 8015fd4:	079b      	lsls	r3, r3, #30
 8015fd6:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8015fda:	bf4c      	ite	mi
 8015fdc:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8015fe0:	48a5      	ldrpl	r0, [pc, #660]	; (8016278 <list_init+0x350>)
 8015fe2:	f7ff fcbb 	bl	801595c <lv_color_hex>
 8015fe6:	f242 0129 	movw	r1, #8233	; 0x2029
 8015fea:	4602      	mov	r2, r0
 8015fec:	4628      	mov	r0, r5
 8015fee:	f7f5 fb41 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
 8015ff2:	6820      	ldr	r0, [r4, #0]
 8015ff4:	8a22      	ldrh	r2, [r4, #16]
 8015ff6:	f240 1129 	movw	r1, #297	; 0x129
 8015ffa:	307c      	adds	r0, #124	; 0x7c
 8015ffc:	f7f5 fb3a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
 8016000:	6820      	ldr	r0, [r4, #0]
 8016002:	2133      	movs	r1, #51	; 0x33
 8016004:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8016008:	8a20      	ldrh	r0, [r4, #16]
 801600a:	f7fd faef 	bl	80135ec <lv_color_darken>
 801600e:	f241 1129 	movw	r1, #4393	; 0x1129
 8016012:	4602      	mov	r2, r0
 8016014:	4628      	mov	r0, r5
 8016016:	f7f5 fb2d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801601a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801601c:	6825      	ldr	r5, [r4, #0]
 801601e:	079e      	lsls	r6, r3, #30
 8016020:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016024:	bf4c      	ite	mi
 8016026:	4897      	ldrmi	r0, [pc, #604]	; (8016284 <list_init+0x35c>)
 8016028:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 801602c:	f7ff fc96 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016030:	f248 0189 	movw	r1, #32905	; 0x8089
 8016034:	4602      	mov	r2, r0
 8016036:	4628      	mov	r0, r5
 8016038:	f7f5 fb1c 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801603c:	6820      	ldr	r0, [r4, #0]
 801603e:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8016042:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016046:	f7ff fc89 	bl	801595c <lv_color_hex>
 801604a:	f248 1189 	movw	r1, #33161	; 0x8189
 801604e:	4602      	mov	r2, r0
 8016050:	4628      	mov	r0, r5
 8016052:	f7f5 fb0f 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8016056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016058:	6825      	ldr	r5, [r4, #0]
 801605a:	0798      	lsls	r0, r3, #30
 801605c:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016060:	bf4c      	ite	mi
 8016062:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
 8016066:	f640 1099 	movwpl	r0, #2457	; 0x999
 801606a:	f7ff f969 	bl	8015340 <lv_color_hex3>
 801606e:	f24a 0189 	movw	r1, #41097	; 0xa089
 8016072:	4602      	mov	r2, r0
 8016074:	4628      	mov	r0, r5
 8016076:	f7f5 fafd 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801607c:	6825      	ldr	r5, [r4, #0]
 801607e:	0799      	lsls	r1, r3, #30
 8016080:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016084:	bf4c      	ite	mi
 8016086:	487f      	ldrmi	r0, [pc, #508]	; (8016284 <list_init+0x35c>)
 8016088:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 801608c:	f7ff fc66 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8016090:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8016094:	4602      	mov	r2, r0
 8016096:	4628      	mov	r0, r5
 8016098:	f7f5 faec 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801609c:	6820      	ldr	r0, [r4, #0]
 801609e:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 80160a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80160a6:	f7ff fc59 	bl	801595c <lv_color_hex>
 80160aa:	f248 11a9 	movw	r1, #33193	; 0x81a9
 80160ae:	4602      	mov	r2, r0
 80160b0:	4628      	mov	r0, r5
 80160b2:	f7f5 fadf 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 80160b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160b8:	6825      	ldr	r5, [r4, #0]
 80160ba:	079a      	lsls	r2, r3, #30
 80160bc:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80160c0:	bf4c      	ite	mi
 80160c2:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
 80160c6:	f640 1099 	movwpl	r0, #2457	; 0x999
 80160ca:	f7ff f939 	bl	8015340 <lv_color_hex3>
 80160ce:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 80160d2:	4602      	mov	r2, r0
 80160d4:	4628      	mov	r0, r5
 80160d6:	f7f5 facd 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
 80160da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 80160dc:	2201      	movs	r2, #1
 80160de:	2131      	movs	r1, #49	; 0x31
 80160e0:	307c      	adds	r0, #124	; 0x7c
 80160e2:	f7f5 fa79 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 80160e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160e8:	6825      	ldr	r5, [r4, #0]
 80160ea:	079b      	lsls	r3, r3, #30
 80160ec:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80160f0:	bf4c      	ite	mi
 80160f2:	4865      	ldrmi	r0, [pc, #404]	; (8016288 <list_init+0x360>)
 80160f4:	4865      	ldrpl	r0, [pc, #404]	; (801628c <list_init+0x364>)
 80160f6:	f7ff fc31 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 80160fa:	2139      	movs	r1, #57	; 0x39
 80160fc:	4602      	mov	r2, r0
 80160fe:	4628      	mov	r0, r5
 8016100:	f7f5 fab8 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
 8016104:	6820      	ldr	r0, [r4, #0]
 8016106:	8a22      	ldrh	r2, [r4, #16]
 8016108:	f240 2139 	movw	r1, #569	; 0x239
 801610c:	307c      	adds	r0, #124	; 0x7c
 801610e:	f7f5 fab1 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
 8016112:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8016114:	2201      	movs	r2, #1
 8016116:	2130      	movs	r1, #48	; 0x30
 8016118:	307c      	adds	r0, #124	; 0x7c
 801611a:	f7f5 fa5d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
 801611e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 8016120:	8a62      	ldrh	r2, [r4, #18]
 8016122:	f240 2149 	movw	r1, #585	; 0x249
 8016126:	307c      	adds	r0, #124	; 0x7c
 8016128:	f7f5 faa4 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 801612c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801612e:	6826      	ldr	r6, [r4, #0]
 8016130:	f010 0520 	ands.w	r5, r0, #32
 8016134:	f106 067c 	add.w	r6, r6, #124	; 0x7c
 8016138:	f040 813b 	bne.w	80163b2 <list_init+0x48a>
 801613c:	4628      	mov	r0, r5
 801613e:	f7fc fc8d 	bl	8012a5c <lv_disp_get_dpi>
 8016142:	2877      	cmp	r0, #119	; 0x77
 8016144:	f340 8137 	ble.w	80163b6 <list_init+0x48e>
 8016148:	4628      	mov	r0, r5
 801614a:	f7fc fc87 	bl	8012a5c <lv_disp_get_dpi>
 801614e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016152:	2050      	movs	r0, #80	; 0x50
 8016154:	fb92 f2f0 	sdiv	r2, r2, r0
 8016158:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 801615a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801615e:	4630      	mov	r0, r6
 8016160:	f7f5 fa3a 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 8016164:	2000      	movs	r0, #0
 8016166:	6825      	ldr	r5, [r4, #0]
 8016168:	f7fc fc78 	bl	8012a5c <lv_disp_get_dpi>
 801616c:	2877      	cmp	r0, #119	; 0x77
 801616e:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016172:	f340 8122 	ble.w	80163ba <list_init+0x492>
 8016176:	2000      	movs	r0, #0
 8016178:	f7fc fc70 	bl	8012a5c <lv_disp_get_dpi>
 801617c:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016180:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8016184:	fb92 f2f0 	sdiv	r2, r2, r0
 8016188:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 801618a:	4628      	mov	r0, r5
 801618c:	f240 2141 	movw	r1, #577	; 0x241
 8016190:	f7f5 fa22 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8016194:	2000      	movs	r0, #0
 8016196:	6825      	ldr	r5, [r4, #0]
 8016198:	f7fc fc6c 	bl	8012a74 <lv_disp_get_size_category>
 801619c:	2801      	cmp	r0, #1
 801619e:	f04f 0000 	mov.w	r0, #0
 80161a2:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80161a6:	f200 8117 	bhi.w	80163d8 <list_init+0x4b0>
 80161aa:	f7fc fc57 	bl	8012a5c <lv_disp_get_dpi>
 80161ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80161b2:	28ef      	cmp	r0, #239	; 0xef
 80161b4:	f300 8104 	bgt.w	80163c0 <list_init+0x498>
 80161b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80161ba:	4628      	mov	r0, r5
 80161bc:	2112      	movs	r1, #18
 80161be:	f7f5 fa0b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80161c2:	2000      	movs	r0, #0
 80161c4:	6825      	ldr	r5, [r4, #0]
 80161c6:	f7fc fc55 	bl	8012a74 <lv_disp_get_size_category>
 80161ca:	2801      	cmp	r0, #1
 80161cc:	f04f 0000 	mov.w	r0, #0
 80161d0:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80161d4:	f200 8119 	bhi.w	801640a <list_init+0x4e2>
 80161d8:	f7fc fc40 	bl	8012a5c <lv_disp_get_dpi>
 80161dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80161e0:	28ef      	cmp	r0, #239	; 0xef
 80161e2:	f300 8106 	bgt.w	80163f2 <list_init+0x4ca>
 80161e6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 80161e8:	4628      	mov	r0, r5
 80161ea:	2113      	movs	r1, #19
 80161ec:	f7f5 f9f4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80161f0:	2000      	movs	r0, #0
 80161f2:	6825      	ldr	r5, [r4, #0]
 80161f4:	f7fc fc3e 	bl	8012a74 <lv_disp_get_size_category>
 80161f8:	2801      	cmp	r0, #1
 80161fa:	f04f 0000 	mov.w	r0, #0
 80161fe:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016202:	f200 811b 	bhi.w	801643c <list_init+0x514>
 8016206:	f7fc fc29 	bl	8012a5c <lv_disp_get_dpi>
 801620a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801620e:	28ef      	cmp	r0, #239	; 0xef
 8016210:	f300 8108 	bgt.w	8016424 <list_init+0x4fc>
 8016214:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8016216:	4628      	mov	r0, r5
 8016218:	2110      	movs	r1, #16
 801621a:	f7f5 f9dd 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801621e:	2000      	movs	r0, #0
 8016220:	6825      	ldr	r5, [r4, #0]
 8016222:	f7fc fc27 	bl	8012a74 <lv_disp_get_size_category>
 8016226:	2801      	cmp	r0, #1
 8016228:	f04f 0000 	mov.w	r0, #0
 801622c:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016230:	f200 811d 	bhi.w	801646e <list_init+0x546>
 8016234:	f7fc fc12 	bl	8012a5c <lv_disp_get_dpi>
 8016238:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801623c:	28ef      	cmp	r0, #239	; 0xef
 801623e:	f300 810a 	bgt.w	8016456 <list_init+0x52e>
 8016242:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8016244:	4628      	mov	r0, r5
 8016246:	2111      	movs	r1, #17
 8016248:	f7f5 f9c6 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801624c:	2000      	movs	r0, #0
 801624e:	6825      	ldr	r5, [r4, #0]
 8016250:	f7fc fc10 	bl	8012a74 <lv_disp_get_size_category>
 8016254:	2801      	cmp	r0, #1
 8016256:	f04f 0000 	mov.w	r0, #0
 801625a:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 801625e:	f200 811f 	bhi.w	80164a0 <list_init+0x578>
 8016262:	f7fc fbfb 	bl	8012a5c <lv_disp_get_dpi>
 8016266:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801626a:	28ef      	cmp	r0, #239	; 0xef
 801626c:	f300 810c 	bgt.w	8016488 <list_init+0x560>
 8016270:	e00e      	b.n	8016290 <list_init+0x368>
 8016272:	bf00      	nop
 8016274:	200288d8 	.word	0x200288d8
 8016278:	00586273 	.word	0x00586273
 801627c:	00eeeeee 	.word	0x00eeeeee
 8016280:	00494f57 	.word	0x00494f57
 8016284:	003b3e42 	.word	0x003b3e42
 8016288:	00d6dde3 	.word	0x00d6dde3
 801628c:	00808a97 	.word	0x00808a97
 8016290:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8016292:	4628      	mov	r0, r5
 8016294:	2114      	movs	r1, #20
 8016296:	f7f5 f99f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 801629a:	2000      	movs	r0, #0
 801629c:	6825      	ldr	r5, [r4, #0]
 801629e:	f7fc fbe9 	bl	8012a74 <lv_disp_get_size_category>
 80162a2:	2801      	cmp	r0, #1
 80162a4:	f04f 0000 	mov.w	r0, #0
 80162a8:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80162ac:	f200 8112 	bhi.w	80164d4 <list_init+0x5ac>
 80162b0:	f7fc fbd4 	bl	8012a5c <lv_disp_get_dpi>
 80162b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80162b8:	28ef      	cmp	r0, #239	; 0xef
 80162ba:	f300 80fe 	bgt.w	80164ba <list_init+0x592>
 80162be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 80162c2:	4628      	mov	r0, r5
 80162c4:	2104      	movs	r1, #4
 80162c6:	f7f5 f987 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 80162ca:	2000      	movs	r0, #0
 80162cc:	6825      	ldr	r5, [r4, #0]
 80162ce:	f7fc fbc5 	bl	8012a5c <lv_disp_get_dpi>
 80162d2:	2877      	cmp	r0, #119	; 0x77
 80162d4:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 80162d8:	f340 8109 	ble.w	80164ee <list_init+0x5c6>
 80162dc:	2000      	movs	r0, #0
 80162de:	f7fc fbbd 	bl	8012a5c <lv_disp_get_dpi>
 80162e2:	f100 0228 	add.w	r2, r0, #40	; 0x28
 80162e6:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 80162ea:	fb92 f2f0 	sdiv	r2, r2, r0
 80162ee:	b212      	sxth	r2, r2
 80162f0:	4628      	mov	r0, r5
 80162f2:	f241 0104 	movw	r1, #4100	; 0x1004
 80162f6:	f7f5 f96f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 80162fa:	2000      	movs	r0, #0
 80162fc:	6825      	ldr	r5, [r4, #0]
 80162fe:	f7fc fbad 	bl	8012a5c <lv_disp_get_dpi>
 8016302:	2877      	cmp	r0, #119	; 0x77
 8016304:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016308:	f340 80f4 	ble.w	80164f4 <list_init+0x5cc>
 801630c:	2000      	movs	r0, #0
 801630e:	f7fc fba5 	bl	8012a5c <lv_disp_get_dpi>
 8016312:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016316:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 801631a:	fb92 f2f0 	sdiv	r2, r2, r0
 801631e:	b212      	sxth	r2, r2
 8016320:	4628      	mov	r0, r5
 8016322:	f44f 7182 	mov.w	r1, #260	; 0x104
 8016326:	f7f5 f957 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 801632a:	2000      	movs	r0, #0
 801632c:	6825      	ldr	r5, [r4, #0]
 801632e:	f7fc fb95 	bl	8012a5c <lv_disp_get_dpi>
 8016332:	2877      	cmp	r0, #119	; 0x77
 8016334:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016338:	f340 80df 	ble.w	80164fa <list_init+0x5d2>
 801633c:	2000      	movs	r0, #0
 801633e:	f7fc fb8d 	bl	8012a5c <lv_disp_get_dpi>
 8016342:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016346:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 801634a:	fb92 f2f0 	sdiv	r2, r2, r0
 801634e:	b212      	sxth	r2, r2
 8016350:	4628      	mov	r0, r5
 8016352:	f242 0104 	movw	r1, #8196	; 0x2004
 8016356:	f7f5 f93f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 801635a:	2000      	movs	r0, #0
 801635c:	6825      	ldr	r5, [r4, #0]
 801635e:	f7fc fb7d 	bl	8012a5c <lv_disp_get_dpi>
 8016362:	2877      	cmp	r0, #119	; 0x77
 8016364:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8016368:	f340 80ca 	ble.w	8016500 <list_init+0x5d8>
 801636c:	2000      	movs	r0, #0
 801636e:	f7fc fb75 	bl	8012a5c <lv_disp_get_dpi>
 8016372:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016376:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 801637a:	fb92 f2f0 	sdiv	r2, r2, r0
 801637e:	b212      	sxth	r2, r2
 8016380:	4628      	mov	r0, r5
 8016382:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016386:	f7f5 f927 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 801638a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 801638c:	2200      	movs	r2, #0
 801638e:	21b0      	movs	r1, #176	; 0xb0
 8016390:	307c      	adds	r0, #124	; 0x7c
 8016392:	f7f5 f921 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8016396:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 8016398:	2229      	movs	r2, #41	; 0x29
 801639a:	21b7      	movs	r1, #183	; 0xb7
 801639c:	307c      	adds	r0, #124	; 0x7c
 801639e:	f7f5 f91b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
 80163a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 80163a4:	2204      	movs	r2, #4
 80163a6:	21b6      	movs	r1, #182	; 0xb6
 80163a8:	307c      	adds	r0, #124	; 0x7c
}
 80163aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163ae:	f7f5 b913 	b.w	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 80163b2:	2200      	movs	r2, #0
 80163b4:	e6d1      	b.n	801615a <list_init+0x232>
 80163b6:	2201      	movs	r2, #1
 80163b8:	e6cf      	b.n	801615a <list_init+0x232>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 80163ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163be:	e6e4      	b.n	801618a <list_init+0x262>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80163c0:	2000      	movs	r0, #0
 80163c2:	f7fc fb4b 	bl	8012a5c <lv_disp_get_dpi>
 80163c6:	220f      	movs	r2, #15
 80163c8:	2350      	movs	r3, #80	; 0x50
 80163ca:	fb00 3202 	mla	r2, r0, r2, r3
 80163ce:	20a0      	movs	r0, #160	; 0xa0
 80163d0:	fb92 f2f0 	sdiv	r2, r2, r0
 80163d4:	b212      	sxth	r2, r2
 80163d6:	e6f0      	b.n	80161ba <list_init+0x292>
 80163d8:	f7fc fb40 	bl	8012a5c <lv_disp_get_dpi>
 80163dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80163e0:	0040      	lsls	r0, r0, #1
 80163e2:	28ef      	cmp	r0, #239	; 0xef
 80163e4:	f77f aee8 	ble.w	80161b8 <list_init+0x290>
 80163e8:	2000      	movs	r0, #0
 80163ea:	f7fc fb37 	bl	8012a5c <lv_disp_get_dpi>
 80163ee:	221e      	movs	r2, #30
 80163f0:	e7ea      	b.n	80163c8 <list_init+0x4a0>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80163f2:	2000      	movs	r0, #0
 80163f4:	f7fc fb32 	bl	8012a5c <lv_disp_get_dpi>
 80163f8:	220f      	movs	r2, #15
 80163fa:	2350      	movs	r3, #80	; 0x50
 80163fc:	fb00 3202 	mla	r2, r0, r2, r3
 8016400:	20a0      	movs	r0, #160	; 0xa0
 8016402:	fb92 f2f0 	sdiv	r2, r2, r0
 8016406:	b212      	sxth	r2, r2
 8016408:	e6ee      	b.n	80161e8 <list_init+0x2c0>
 801640a:	f7fc fb27 	bl	8012a5c <lv_disp_get_dpi>
 801640e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016412:	0040      	lsls	r0, r0, #1
 8016414:	28ef      	cmp	r0, #239	; 0xef
 8016416:	f77f aee6 	ble.w	80161e6 <list_init+0x2be>
 801641a:	2000      	movs	r0, #0
 801641c:	f7fc fb1e 	bl	8012a5c <lv_disp_get_dpi>
 8016420:	221e      	movs	r2, #30
 8016422:	e7ea      	b.n	80163fa <list_init+0x4d2>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8016424:	2000      	movs	r0, #0
 8016426:	f7fc fb19 	bl	8012a5c <lv_disp_get_dpi>
 801642a:	220f      	movs	r2, #15
 801642c:	2350      	movs	r3, #80	; 0x50
 801642e:	fb00 3202 	mla	r2, r0, r2, r3
 8016432:	20a0      	movs	r0, #160	; 0xa0
 8016434:	fb92 f2f0 	sdiv	r2, r2, r0
 8016438:	b212      	sxth	r2, r2
 801643a:	e6ec      	b.n	8016216 <list_init+0x2ee>
 801643c:	f7fc fb0e 	bl	8012a5c <lv_disp_get_dpi>
 8016440:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016444:	0040      	lsls	r0, r0, #1
 8016446:	28ef      	cmp	r0, #239	; 0xef
 8016448:	f77f aee4 	ble.w	8016214 <list_init+0x2ec>
 801644c:	2000      	movs	r0, #0
 801644e:	f7fc fb05 	bl	8012a5c <lv_disp_get_dpi>
 8016452:	221e      	movs	r2, #30
 8016454:	e7ea      	b.n	801642c <list_init+0x504>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8016456:	2000      	movs	r0, #0
 8016458:	f7fc fb00 	bl	8012a5c <lv_disp_get_dpi>
 801645c:	220f      	movs	r2, #15
 801645e:	2350      	movs	r3, #80	; 0x50
 8016460:	fb00 3202 	mla	r2, r0, r2, r3
 8016464:	20a0      	movs	r0, #160	; 0xa0
 8016466:	fb92 f2f0 	sdiv	r2, r2, r0
 801646a:	b212      	sxth	r2, r2
 801646c:	e6ea      	b.n	8016244 <list_init+0x31c>
 801646e:	f7fc faf5 	bl	8012a5c <lv_disp_get_dpi>
 8016472:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016476:	0040      	lsls	r0, r0, #1
 8016478:	28ef      	cmp	r0, #239	; 0xef
 801647a:	f77f aee2 	ble.w	8016242 <list_init+0x31a>
 801647e:	2000      	movs	r0, #0
 8016480:	f7fc faec 	bl	8012a5c <lv_disp_get_dpi>
 8016484:	221e      	movs	r2, #30
 8016486:	e7ea      	b.n	801645e <list_init+0x536>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8016488:	2000      	movs	r0, #0
 801648a:	f7fc fae7 	bl	8012a5c <lv_disp_get_dpi>
 801648e:	220f      	movs	r2, #15
 8016490:	2350      	movs	r3, #80	; 0x50
 8016492:	fb00 3202 	mla	r2, r0, r2, r3
 8016496:	20a0      	movs	r0, #160	; 0xa0
 8016498:	fb92 f2f0 	sdiv	r2, r2, r0
 801649c:	b212      	sxth	r2, r2
 801649e:	e6f8      	b.n	8016292 <list_init+0x36a>
 80164a0:	f7fc fadc 	bl	8012a5c <lv_disp_get_dpi>
 80164a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80164a8:	0040      	lsls	r0, r0, #1
 80164aa:	28ef      	cmp	r0, #239	; 0xef
 80164ac:	f77f aef0 	ble.w	8016290 <list_init+0x368>
 80164b0:	2000      	movs	r0, #0
 80164b2:	f7fc fad3 	bl	8012a5c <lv_disp_get_dpi>
 80164b6:	221e      	movs	r2, #30
 80164b8:	e7ea      	b.n	8016490 <list_init+0x568>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 80164ba:	2000      	movs	r0, #0
 80164bc:	f7fc face 	bl	8012a5c <lv_disp_get_dpi>
 80164c0:	220f      	movs	r2, #15
 80164c2:	2350      	movs	r3, #80	; 0x50
 80164c4:	fb00 3202 	mla	r2, r0, r2, r3
 80164c8:	f06f 009f 	mvn.w	r0, #159	; 0x9f
 80164cc:	fb92 f2f0 	sdiv	r2, r2, r0
 80164d0:	b212      	sxth	r2, r2
 80164d2:	e6f6      	b.n	80162c2 <list_init+0x39a>
 80164d4:	f7fc fac2 	bl	8012a5c <lv_disp_get_dpi>
 80164d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80164dc:	0040      	lsls	r0, r0, #1
 80164de:	28ef      	cmp	r0, #239	; 0xef
 80164e0:	f77f aeed 	ble.w	80162be <list_init+0x396>
 80164e4:	2000      	movs	r0, #0
 80164e6:	f7fc fab9 	bl	8012a5c <lv_disp_get_dpi>
 80164ea:	221e      	movs	r2, #30
 80164ec:	e7e9      	b.n	80164c2 <list_init+0x59a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 80164ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164f2:	e6fd      	b.n	80162f0 <list_init+0x3c8>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 80164f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164f8:	e712      	b.n	8016320 <list_init+0x3f8>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 80164fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164fe:	e727      	b.n	8016350 <list_init+0x428>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 8016500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016504:	e73c      	b.n	8016380 <list_init+0x458>
 8016506:	bf00      	nop

08016508 <tabview_win_shared_init>:
{
 8016508:	b538      	push	{r3, r4, r5, lr}
    lv_style_reset(&styles->tabview_btns_bg);
 801650a:	4cd8      	ldr	r4, [pc, #864]	; (801686c <tabview_win_shared_init+0x364>)
 801650c:	6820      	ldr	r0, [r4, #0]
 801650e:	30ac      	adds	r0, #172	; 0xac
 8016510:	f7f5 f808 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8016514:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8016516:	212c      	movs	r1, #44	; 0x2c
 8016518:	22ff      	movs	r2, #255	; 0xff
 801651a:	30ac      	adds	r0, #172	; 0xac
 801651c:	f7f5 f8f8 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
 8016520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016522:	6825      	ldr	r5, [r4, #0]
 8016524:	0799      	lsls	r1, r3, #30
 8016526:	f105 05ac 	add.w	r5, r5, #172	; 0xac
 801652a:	bf4c      	ite	mi
 801652c:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8016530:	48cf      	ldrpl	r0, [pc, #828]	; (8016870 <tabview_win_shared_init+0x368>)
 8016532:	f7ff fa13 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016536:	2129      	movs	r1, #41	; 0x29
 8016538:	4602      	mov	r2, r0
 801653a:	4628      	mov	r0, r5
 801653c:	f7f5 f89a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8016540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016542:	6825      	ldr	r5, [r4, #0]
 8016544:	079a      	lsls	r2, r3, #30
 8016546:	f105 05ac 	add.w	r5, r5, #172	; 0xac
 801654a:	bf4c      	ite	mi
 801654c:	48c9      	ldrmi	r0, [pc, #804]	; (8016874 <tabview_win_shared_init+0x36c>)
 801654e:	48ca      	ldrpl	r0, [pc, #808]	; (8016878 <tabview_win_shared_init+0x370>)
 8016550:	f7ff fa04 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016554:	f248 0189 	movw	r1, #32905	; 0x8089
 8016558:	4602      	mov	r2, r0
 801655a:	4628      	mov	r0, r5
 801655c:	f7f5 f88a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	f100 05ac 	add.w	r5, r0, #172	; 0xac
 8016566:	48c5      	ldr	r0, [pc, #788]	; (801687c <tabview_win_shared_init+0x374>)
 8016568:	f7ff f9f8 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 801656c:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8016570:	4602      	mov	r2, r0
 8016572:	4628      	mov	r0, r5
 8016574:	f7f5 f87e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8016578:	2000      	movs	r0, #0
 801657a:	6825      	ldr	r5, [r4, #0]
 801657c:	f7fc fa6e 	bl	8012a5c <lv_disp_get_dpi>
 8016580:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8016584:	35ac      	adds	r5, #172	; 0xac
 8016586:	28ef      	cmp	r0, #239	; 0xef
 8016588:	f340 8157 	ble.w	801683a <tabview_win_shared_init+0x332>
 801658c:	2000      	movs	r0, #0
 801658e:	f7fc fa65 	bl	8012a5c <lv_disp_get_dpi>
 8016592:	2207      	movs	r2, #7
 8016594:	2350      	movs	r3, #80	; 0x50
 8016596:	fb00 3202 	mla	r2, r0, r2, r3
 801659a:	20a0      	movs	r0, #160	; 0xa0
 801659c:	fb92 f2f0 	sdiv	r2, r2, r0
 80165a0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 80165a2:	4628      	mov	r0, r5
 80165a4:	2110      	movs	r1, #16
 80165a6:	f7f5 f817 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80165aa:	2000      	movs	r0, #0
 80165ac:	6825      	ldr	r5, [r4, #0]
 80165ae:	f7fc fa55 	bl	8012a5c <lv_disp_get_dpi>
 80165b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80165b6:	35ac      	adds	r5, #172	; 0xac
 80165b8:	28ef      	cmp	r0, #239	; 0xef
 80165ba:	f340 8140 	ble.w	801683e <tabview_win_shared_init+0x336>
 80165be:	2000      	movs	r0, #0
 80165c0:	f7fc fa4c 	bl	8012a5c <lv_disp_get_dpi>
 80165c4:	2207      	movs	r2, #7
 80165c6:	2350      	movs	r3, #80	; 0x50
 80165c8:	fb00 3202 	mla	r2, r0, r2, r3
 80165cc:	20a0      	movs	r0, #160	; 0xa0
 80165ce:	fb92 f2f0 	sdiv	r2, r2, r0
 80165d2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80165d4:	4628      	mov	r0, r5
 80165d6:	2112      	movs	r1, #18
 80165d8:	f7f4 fffe 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80165dc:	2000      	movs	r0, #0
 80165de:	6825      	ldr	r5, [r4, #0]
 80165e0:	f7fc fa3c 	bl	8012a5c <lv_disp_get_dpi>
 80165e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80165e8:	35ac      	adds	r5, #172	; 0xac
 80165ea:	28ef      	cmp	r0, #239	; 0xef
 80165ec:	f340 8129 	ble.w	8016842 <tabview_win_shared_init+0x33a>
 80165f0:	2000      	movs	r0, #0
 80165f2:	f7fc fa33 	bl	8012a5c <lv_disp_get_dpi>
 80165f6:	2207      	movs	r2, #7
 80165f8:	2350      	movs	r3, #80	; 0x50
 80165fa:	fb00 3202 	mla	r2, r0, r2, r3
 80165fe:	20a0      	movs	r0, #160	; 0xa0
 8016600:	fb92 f2f0 	sdiv	r2, r2, r0
 8016604:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8016606:	2113      	movs	r1, #19
 8016608:	4628      	mov	r0, r5
 801660a:	f7f4 ffe5 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->tabview_btns);
 801660e:	6820      	ldr	r0, [r4, #0]
 8016610:	30a8      	adds	r0, #168	; 0xa8
 8016612:	f7f4 ff87 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
 8016616:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8016618:	227f      	movs	r2, #127	; 0x7f
 801661a:	f241 012c 	movw	r1, #4140	; 0x102c
 801661e:	30a8      	adds	r0, #168	; 0xa8
 8016620:	f7f5 f876 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
 8016624:	6820      	ldr	r0, [r4, #0]
 8016626:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 801662a:	f640 0088 	movw	r0, #2184	; 0x888
 801662e:	f7fe fe87 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016632:	f241 0129 	movw	r1, #4137	; 0x1029
 8016636:	4602      	mov	r2, r0
 8016638:	4628      	mov	r0, r5
 801663a:	f7f5 f81b 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
 801663e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016640:	6825      	ldr	r5, [r4, #0]
 8016642:	079b      	lsls	r3, r3, #30
 8016644:	f105 05a8 	add.w	r5, r5, #168	; 0xa8
 8016648:	bf4c      	ite	mi
 801664a:	488a      	ldrmi	r0, [pc, #552]	; (8016874 <tabview_win_shared_init+0x36c>)
 801664c:	488a      	ldrpl	r0, [pc, #552]	; (8016878 <tabview_win_shared_init+0x370>)
 801664e:	f7ff f985 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016652:	f248 1189 	movw	r1, #33161	; 0x8189
 8016656:	4602      	mov	r2, r0
 8016658:	4628      	mov	r0, r5
 801665a:	f7f5 f80b 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801665e:	2000      	movs	r0, #0
 8016660:	6825      	ldr	r5, [r4, #0]
 8016662:	f7fc f9fb 	bl	8012a5c <lv_disp_get_dpi>
 8016666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801666a:	35a8      	adds	r5, #168	; 0xa8
 801666c:	0080      	lsls	r0, r0, #2
 801666e:	28ef      	cmp	r0, #239	; 0xef
 8016670:	f340 80e9 	ble.w	8016846 <tabview_win_shared_init+0x33e>
 8016674:	2000      	movs	r0, #0
 8016676:	f7fc f9f1 	bl	8012a5c <lv_disp_get_dpi>
 801667a:	2214      	movs	r2, #20
 801667c:	2350      	movs	r3, #80	; 0x50
 801667e:	fb00 3202 	mla	r2, r0, r2, r3
 8016682:	20a0      	movs	r0, #160	; 0xa0
 8016684:	fb92 f2f0 	sdiv	r2, r2, r0
 8016688:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801668a:	4628      	mov	r0, r5
 801668c:	2110      	movs	r1, #16
 801668e:	f7f4 ffa3 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 8016692:	2000      	movs	r0, #0
 8016694:	6825      	ldr	r5, [r4, #0]
 8016696:	f7fc f9e1 	bl	8012a5c <lv_disp_get_dpi>
 801669a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801669e:	35a8      	adds	r5, #168	; 0xa8
 80166a0:	0080      	lsls	r0, r0, #2
 80166a2:	28ef      	cmp	r0, #239	; 0xef
 80166a4:	f340 80d1 	ble.w	801684a <tabview_win_shared_init+0x342>
 80166a8:	2000      	movs	r0, #0
 80166aa:	f7fc f9d7 	bl	8012a5c <lv_disp_get_dpi>
 80166ae:	2214      	movs	r2, #20
 80166b0:	2350      	movs	r3, #80	; 0x50
 80166b2:	fb00 3202 	mla	r2, r0, r2, r3
 80166b6:	20a0      	movs	r0, #160	; 0xa0
 80166b8:	fb92 f2f0 	sdiv	r2, r2, r0
 80166bc:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80166be:	4628      	mov	r0, r5
 80166c0:	2111      	movs	r1, #17
 80166c2:	f7f4 ff89 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
 80166c6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 80166c8:	8a22      	ldrh	r2, [r4, #16]
 80166ca:	f248 2189 	movw	r1, #33417	; 0x8289
 80166ce:	30a8      	adds	r0, #168	; 0xa8
 80166d0:	f7f4 ffd0 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
 80166d4:	6820      	ldr	r0, [r4, #0]
 80166d6:	8a62      	ldrh	r2, [r4, #18]
 80166d8:	f248 4189 	movw	r1, #33929	; 0x8489
 80166dc:	30a8      	adds	r0, #168	; 0xa8
 80166de:	f7f4 ffc9 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->tabview_indic);
 80166e2:	6820      	ldr	r0, [r4, #0]
 80166e4:	30b0      	adds	r0, #176	; 0xb0
 80166e6:	f7f4 ff1d 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 80166ea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 80166ec:	22ff      	movs	r2, #255	; 0xff
 80166ee:	212c      	movs	r1, #44	; 0x2c
 80166f0:	30b0      	adds	r0, #176	; 0xb0
 80166f2:	f7f5 f80d 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
 80166f6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80166f8:	8a22      	ldrh	r2, [r4, #16]
 80166fa:	2129      	movs	r1, #41	; 0x29
 80166fc:	30b0      	adds	r0, #176	; 0xb0
 80166fe:	f7f4 ffb9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
 8016702:	6820      	ldr	r0, [r4, #0]
 8016704:	8a62      	ldrh	r2, [r4, #18]
 8016706:	f240 4129 	movw	r1, #1065	; 0x429
 801670a:	30b0      	adds	r0, #176	; 0xb0
 801670c:	f7f4 ffb2 	bl	800b674 <_lv_style_set_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 8016710:	2000      	movs	r0, #0
 8016712:	6825      	ldr	r5, [r4, #0]
 8016714:	f7fc f9a2 	bl	8012a5c <lv_disp_get_dpi>
 8016718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801671c:	35b0      	adds	r5, #176	; 0xb0
 801671e:	28ef      	cmp	r0, #239	; 0xef
 8016720:	f340 8095 	ble.w	801684e <tabview_win_shared_init+0x346>
 8016724:	2000      	movs	r0, #0
 8016726:	f7fc f999 	bl	8012a5c <lv_disp_get_dpi>
 801672a:	2205      	movs	r2, #5
 801672c:	2350      	movs	r3, #80	; 0x50
 801672e:	fb00 3202 	mla	r2, r0, r2, r3
 8016732:	20a0      	movs	r0, #160	; 0xa0
 8016734:	fb92 f2f0 	sdiv	r2, r2, r0
 8016738:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 801673a:	4628      	mov	r0, r5
 801673c:	2103      	movs	r1, #3
 801673e:	f7f4 ff4b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8016742:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8016744:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016748:	2101      	movs	r1, #1
 801674a:	30b0      	adds	r0, #176	; 0xb0
 801674c:	f7f4 ff44 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->tabview_page_scrl);
 8016750:	6820      	ldr	r0, [r4, #0]
 8016752:	30b4      	adds	r0, #180	; 0xb4
 8016754:	f7f4 fee6 	bl	800b524 <lv_style_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8016758:	2000      	movs	r0, #0
 801675a:	6825      	ldr	r5, [r4, #0]
 801675c:	f7fc f98a 	bl	8012a74 <lv_disp_get_size_category>
 8016760:	2801      	cmp	r0, #1
 8016762:	f04f 0000 	mov.w	r0, #0
 8016766:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 801676a:	f200 8089 	bhi.w	8016880 <tabview_win_shared_init+0x378>
 801676e:	f7fc f975 	bl	8012a5c <lv_disp_get_dpi>
 8016772:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016776:	28ef      	cmp	r0, #239	; 0xef
 8016778:	dc6b      	bgt.n	8016852 <tabview_win_shared_init+0x34a>
 801677a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801677c:	4628      	mov	r0, r5
 801677e:	2110      	movs	r1, #16
 8016780:	f7f4 ff2a 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8016784:	2000      	movs	r0, #0
 8016786:	6825      	ldr	r5, [r4, #0]
 8016788:	f7fc f974 	bl	8012a74 <lv_disp_get_size_category>
 801678c:	2801      	cmp	r0, #1
 801678e:	f04f 0000 	mov.w	r0, #0
 8016792:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 8016796:	f200 808c 	bhi.w	80168b2 <tabview_win_shared_init+0x3aa>
 801679a:	f7fc f95f 	bl	8012a5c <lv_disp_get_dpi>
 801679e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80167a2:	28ef      	cmp	r0, #239	; 0xef
 80167a4:	dc79      	bgt.n	801689a <tabview_win_shared_init+0x392>
 80167a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80167a8:	4628      	mov	r0, r5
 80167aa:	2111      	movs	r1, #17
 80167ac:	f7f4 ff14 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80167b0:	2000      	movs	r0, #0
 80167b2:	6825      	ldr	r5, [r4, #0]
 80167b4:	f7fc f95e 	bl	8012a74 <lv_disp_get_size_category>
 80167b8:	2801      	cmp	r0, #1
 80167ba:	f04f 0000 	mov.w	r0, #0
 80167be:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 80167c2:	f200 808f 	bhi.w	80168e4 <tabview_win_shared_init+0x3dc>
 80167c6:	f7fc f949 	bl	8012a5c <lv_disp_get_dpi>
 80167ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80167ce:	28ef      	cmp	r0, #239	; 0xef
 80167d0:	dc7c      	bgt.n	80168cc <tabview_win_shared_init+0x3c4>
 80167d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80167d4:	4628      	mov	r0, r5
 80167d6:	2112      	movs	r1, #18
 80167d8:	f7f4 fefe 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80167dc:	2000      	movs	r0, #0
 80167de:	6825      	ldr	r5, [r4, #0]
 80167e0:	f7fc f948 	bl	8012a74 <lv_disp_get_size_category>
 80167e4:	2801      	cmp	r0, #1
 80167e6:	f04f 0000 	mov.w	r0, #0
 80167ea:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 80167ee:	f200 8092 	bhi.w	8016916 <tabview_win_shared_init+0x40e>
 80167f2:	f7fc f933 	bl	8012a5c <lv_disp_get_dpi>
 80167f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80167fa:	28ef      	cmp	r0, #239	; 0xef
 80167fc:	dc7f      	bgt.n	80168fe <tabview_win_shared_init+0x3f6>
 80167fe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8016800:	2113      	movs	r1, #19
 8016802:	4628      	mov	r0, r5
 8016804:	f7f4 fee8 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8016808:	2000      	movs	r0, #0
 801680a:	6824      	ldr	r4, [r4, #0]
 801680c:	f7fc f932 	bl	8012a74 <lv_disp_get_size_category>
 8016810:	2801      	cmp	r0, #1
 8016812:	f04f 0000 	mov.w	r0, #0
 8016816:	f104 04b4 	add.w	r4, r4, #180	; 0xb4
 801681a:	f200 8095 	bhi.w	8016948 <tabview_win_shared_init+0x440>
 801681e:	f7fc f91d 	bl	8012a5c <lv_disp_get_dpi>
 8016822:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016826:	28ef      	cmp	r0, #239	; 0xef
 8016828:	f300 8082 	bgt.w	8016930 <tabview_win_shared_init+0x428>
 801682c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801682e:	4620      	mov	r0, r4
 8016830:	2114      	movs	r1, #20
}
 8016832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016836:	f7f4 becf 	b.w	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801683a:	2201      	movs	r2, #1
 801683c:	e6b1      	b.n	80165a2 <tabview_win_shared_init+0x9a>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801683e:	2201      	movs	r2, #1
 8016840:	e6c8      	b.n	80165d4 <tabview_win_shared_init+0xcc>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8016842:	2201      	movs	r2, #1
 8016844:	e6df      	b.n	8016606 <tabview_win_shared_init+0xfe>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 8016846:	2201      	movs	r2, #1
 8016848:	e71f      	b.n	801668a <tabview_win_shared_init+0x182>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801684a:	2201      	movs	r2, #1
 801684c:	e737      	b.n	80166be <tabview_win_shared_init+0x1b6>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 801684e:	2201      	movs	r2, #1
 8016850:	e773      	b.n	801673a <tabview_win_shared_init+0x232>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8016852:	2000      	movs	r0, #0
 8016854:	f7fc f902 	bl	8012a5c <lv_disp_get_dpi>
 8016858:	220f      	movs	r2, #15
 801685a:	2350      	movs	r3, #80	; 0x50
 801685c:	fb00 3202 	mla	r2, r0, r2, r3
 8016860:	20a0      	movs	r0, #160	; 0xa0
 8016862:	fb92 f2f0 	sdiv	r2, r2, r0
 8016866:	b212      	sxth	r2, r2
 8016868:	e788      	b.n	801677c <tabview_win_shared_init+0x274>
 801686a:	bf00      	nop
 801686c:	200288d8 	.word	0x200288d8
 8016870:	00586273 	.word	0x00586273
 8016874:	003b3e42 	.word	0x003b3e42
 8016878:	00e7e9ec 	.word	0x00e7e9ec
 801687c:	00979a9f 	.word	0x00979a9f
 8016880:	f7fc f8ec 	bl	8012a5c <lv_disp_get_dpi>
 8016884:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016888:	0040      	lsls	r0, r0, #1
 801688a:	28ef      	cmp	r0, #239	; 0xef
 801688c:	f77f af75 	ble.w	801677a <tabview_win_shared_init+0x272>
 8016890:	2000      	movs	r0, #0
 8016892:	f7fc f8e3 	bl	8012a5c <lv_disp_get_dpi>
 8016896:	221e      	movs	r2, #30
 8016898:	e7df      	b.n	801685a <tabview_win_shared_init+0x352>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801689a:	2000      	movs	r0, #0
 801689c:	f7fc f8de 	bl	8012a5c <lv_disp_get_dpi>
 80168a0:	220f      	movs	r2, #15
 80168a2:	2350      	movs	r3, #80	; 0x50
 80168a4:	fb00 3202 	mla	r2, r0, r2, r3
 80168a8:	20a0      	movs	r0, #160	; 0xa0
 80168aa:	fb92 f2f0 	sdiv	r2, r2, r0
 80168ae:	b212      	sxth	r2, r2
 80168b0:	e77a      	b.n	80167a8 <tabview_win_shared_init+0x2a0>
 80168b2:	f7fc f8d3 	bl	8012a5c <lv_disp_get_dpi>
 80168b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80168ba:	0040      	lsls	r0, r0, #1
 80168bc:	28ef      	cmp	r0, #239	; 0xef
 80168be:	f77f af72 	ble.w	80167a6 <tabview_win_shared_init+0x29e>
 80168c2:	2000      	movs	r0, #0
 80168c4:	f7fc f8ca 	bl	8012a5c <lv_disp_get_dpi>
 80168c8:	221e      	movs	r2, #30
 80168ca:	e7ea      	b.n	80168a2 <tabview_win_shared_init+0x39a>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80168cc:	2000      	movs	r0, #0
 80168ce:	f7fc f8c5 	bl	8012a5c <lv_disp_get_dpi>
 80168d2:	220f      	movs	r2, #15
 80168d4:	2350      	movs	r3, #80	; 0x50
 80168d6:	fb00 3202 	mla	r2, r0, r2, r3
 80168da:	20a0      	movs	r0, #160	; 0xa0
 80168dc:	fb92 f2f0 	sdiv	r2, r2, r0
 80168e0:	b212      	sxth	r2, r2
 80168e2:	e777      	b.n	80167d4 <tabview_win_shared_init+0x2cc>
 80168e4:	f7fc f8ba 	bl	8012a5c <lv_disp_get_dpi>
 80168e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80168ec:	0040      	lsls	r0, r0, #1
 80168ee:	28ef      	cmp	r0, #239	; 0xef
 80168f0:	f77f af6f 	ble.w	80167d2 <tabview_win_shared_init+0x2ca>
 80168f4:	2000      	movs	r0, #0
 80168f6:	f7fc f8b1 	bl	8012a5c <lv_disp_get_dpi>
 80168fa:	221e      	movs	r2, #30
 80168fc:	e7ea      	b.n	80168d4 <tabview_win_shared_init+0x3cc>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80168fe:	2000      	movs	r0, #0
 8016900:	f7fc f8ac 	bl	8012a5c <lv_disp_get_dpi>
 8016904:	220f      	movs	r2, #15
 8016906:	2350      	movs	r3, #80	; 0x50
 8016908:	fb00 3202 	mla	r2, r0, r2, r3
 801690c:	20a0      	movs	r0, #160	; 0xa0
 801690e:	fb92 f2f0 	sdiv	r2, r2, r0
 8016912:	b212      	sxth	r2, r2
 8016914:	e774      	b.n	8016800 <tabview_win_shared_init+0x2f8>
 8016916:	f7fc f8a1 	bl	8012a5c <lv_disp_get_dpi>
 801691a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801691e:	0040      	lsls	r0, r0, #1
 8016920:	28ef      	cmp	r0, #239	; 0xef
 8016922:	f77f af6c 	ble.w	80167fe <tabview_win_shared_init+0x2f6>
 8016926:	2000      	movs	r0, #0
 8016928:	f7fc f898 	bl	8012a5c <lv_disp_get_dpi>
 801692c:	221e      	movs	r2, #30
 801692e:	e7ea      	b.n	8016906 <tabview_win_shared_init+0x3fe>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8016930:	2000      	movs	r0, #0
 8016932:	f7fc f893 	bl	8012a5c <lv_disp_get_dpi>
 8016936:	220f      	movs	r2, #15
 8016938:	2350      	movs	r3, #80	; 0x50
 801693a:	fb00 3202 	mla	r2, r0, r2, r3
 801693e:	20a0      	movs	r0, #160	; 0xa0
 8016940:	fb92 f2f0 	sdiv	r2, r2, r0
 8016944:	b212      	sxth	r2, r2
 8016946:	e772      	b.n	801682e <tabview_win_shared_init+0x326>
 8016948:	f7fc f888 	bl	8012a5c <lv_disp_get_dpi>
 801694c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016950:	0040      	lsls	r0, r0, #1
 8016952:	28ef      	cmp	r0, #239	; 0xef
 8016954:	f77f af6a 	ble.w	801682c <tabview_win_shared_init+0x324>
 8016958:	2000      	movs	r0, #0
 801695a:	f7fc f87f 	bl	8012a5c <lv_disp_get_dpi>
 801695e:	221e      	movs	r2, #30
 8016960:	e7ea      	b.n	8016938 <tabview_win_shared_init+0x430>
 8016962:	bf00      	nop

08016964 <basic_init>:
{
 8016964:	b570      	push	{r4, r5, r6, lr}
    lv_style_reset(&styles->scr);
 8016966:	4cc7      	ldr	r4, [pc, #796]	; (8016c84 <basic_init+0x320>)
 8016968:	6820      	ldr	r0, [r4, #0]
 801696a:	f7f4 fddb 	bl	800b524 <lv_style_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 801696e:	212c      	movs	r1, #44	; 0x2c
 8016970:	6820      	ldr	r0, [r4, #0]
 8016972:	22ff      	movs	r2, #255	; 0xff
 8016974:	f7f4 fecc 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 8016978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801697a:	6825      	ldr	r5, [r4, #0]
 801697c:	0799      	lsls	r1, r3, #30
 801697e:	bf4c      	ite	mi
 8016980:	48c1      	ldrmi	r0, [pc, #772]	; (8016c88 <basic_init+0x324>)
 8016982:	48c2      	ldrpl	r0, [pc, #776]	; (8016c8c <basic_init+0x328>)
 8016984:	f7fe ffea 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016988:	2129      	movs	r1, #41	; 0x29
 801698a:	4602      	mov	r2, r0
 801698c:	4628      	mov	r0, r5
 801698e:	f7f4 fe71 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8016992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016994:	6825      	ldr	r5, [r4, #0]
 8016996:	079a      	lsls	r2, r3, #30
 8016998:	bf4c      	ite	mi
 801699a:	48bd      	ldrmi	r0, [pc, #756]	; (8016c90 <basic_init+0x32c>)
 801699c:	48bd      	ldrpl	r0, [pc, #756]	; (8016c94 <basic_init+0x330>)
 801699e:	f7fe ffdd 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 80169a2:	f248 0189 	movw	r1, #32905	; 0x8089
 80169a6:	4602      	mov	r2, r0
 80169a8:	4628      	mov	r0, r5
 80169aa:	f7f4 fe63 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 80169ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169b0:	6825      	ldr	r5, [r4, #0]
 80169b2:	079b      	lsls	r3, r3, #30
 80169b4:	bf4c      	ite	mi
 80169b6:	48b6      	ldrmi	r0, [pc, #728]	; (8016c90 <basic_init+0x32c>)
 80169b8:	48b6      	ldrpl	r0, [pc, #728]	; (8016c94 <basic_init+0x330>)
 80169ba:	f7fe ffcf 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 80169be:	2179      	movs	r1, #121	; 0x79
 80169c0:	4602      	mov	r2, r0
 80169c2:	4628      	mov	r0, r5
 80169c4:	f7f4 fe56 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 80169c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169ca:	6825      	ldr	r5, [r4, #0]
 80169cc:	079e      	lsls	r6, r3, #30
 80169ce:	bf4c      	ite	mi
 80169d0:	48af      	ldrmi	r0, [pc, #700]	; (8016c90 <basic_init+0x32c>)
 80169d2:	48b0      	ldrpl	r0, [pc, #704]	; (8016c94 <basic_init+0x330>)
 80169d4:	f7fe ffc2 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color)
 80169d8:	f248 018a 	movw	r1, #32906	; 0x808a
 80169dc:	4602      	mov	r2, r0
 80169de:	4628      	mov	r0, r5
 80169e0:	f7f4 fe48 	bl	800b674 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color)
 80169e4:	8a22      	ldrh	r2, [r4, #16]
 80169e6:	f248 018b 	movw	r1, #32907	; 0x808b
 80169ea:	6820      	ldr	r0, [r4, #0]
 80169ec:	f7f4 fe42 	bl	800b674 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 80169f0:	69a2      	ldr	r2, [r4, #24]
 80169f2:	217e      	movs	r1, #126	; 0x7e
 80169f4:	6820      	ldr	r0, [r4, #0]
 80169f6:	f7f4 fedb 	bl	800b7b0 <_lv_style_set_ptr>
    lv_style_reset(&styles->bg);
 80169fa:	6820      	ldr	r0, [r4, #0]
 80169fc:	3004      	adds	r0, #4
 80169fe:	f7f4 fd91 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 8016a02:	2000      	movs	r0, #0
 8016a04:	6825      	ldr	r5, [r4, #0]
 8016a06:	f7fc f829 	bl	8012a5c <lv_disp_get_dpi>
 8016a0a:	281d      	cmp	r0, #29
 8016a0c:	f105 0504 	add.w	r5, r5, #4
 8016a10:	f340 85c3 	ble.w	801759a <basic_init+0xc36>
 8016a14:	2000      	movs	r0, #0
 8016a16:	f7fc f821 	bl	8012a5c <lv_disp_get_dpi>
 8016a1a:	f100 020a 	add.w	r2, r0, #10
 8016a1e:	2014      	movs	r0, #20
 8016a20:	fb92 f2f0 	sdiv	r2, r2, r0
 8016a24:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8016a26:	4628      	mov	r0, r5
 8016a28:	2101      	movs	r1, #1
 8016a2a:	f7f4 fdd5 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8016a2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8016a30:	22ff      	movs	r2, #255	; 0xff
 8016a32:	212c      	movs	r1, #44	; 0x2c
 8016a34:	3004      	adds	r0, #4
 8016a36:	f7f4 fe6b 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 8016a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a3c:	6825      	ldr	r5, [r4, #0]
 8016a3e:	0798      	lsls	r0, r3, #30
 8016a40:	f105 0504 	add.w	r5, r5, #4
 8016a44:	bf4c      	ite	mi
 8016a46:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8016a4a:	4893      	ldrpl	r0, [pc, #588]	; (8016c98 <basic_init+0x334>)
 8016a4c:	f7fe ff86 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016a50:	2129      	movs	r1, #41	; 0x29
 8016a52:	4602      	mov	r2, r0
 8016a54:	4628      	mov	r0, r5
 8016a56:	f7f4 fe0d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8016a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a5c:	6825      	ldr	r5, [r4, #0]
 8016a5e:	0799      	lsls	r1, r3, #30
 8016a60:	f105 0504 	add.w	r5, r5, #4
 8016a64:	bf4c      	ite	mi
 8016a66:	488d      	ldrmi	r0, [pc, #564]	; (8016c9c <basic_init+0x338>)
 8016a68:	488d      	ldrpl	r0, [pc, #564]	; (8016ca0 <basic_init+0x33c>)
 8016a6a:	f7fe ff77 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8016a6e:	2139      	movs	r1, #57	; 0x39
 8016a70:	4602      	mov	r2, r0
 8016a72:	4628      	mov	r0, r5
 8016a74:	f7f4 fdfe 	bl	800b674 <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 8016a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a7a:	069a      	lsls	r2, r3, #26
 8016a7c:	d406      	bmi.n	8016a8c <basic_init+0x128>
 8016a7e:	6820      	ldr	r0, [r4, #0]
 8016a80:	f240 2139 	movw	r1, #569	; 0x239
 8016a84:	8a22      	ldrh	r2, [r4, #16]
 8016a86:	3004      	adds	r0, #4
 8016a88:	f7f4 fdf4 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 8016a8c:	6820      	ldr	r0, [r4, #0]
 8016a8e:	f240 4139 	movw	r1, #1081	; 0x439
 8016a92:	8a62      	ldrh	r2, [r4, #18]
 8016a94:	3004      	adds	r0, #4
 8016a96:	f7f4 fded 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 8016a9a:	2000      	movs	r0, #0
 8016a9c:	6825      	ldr	r5, [r4, #0]
 8016a9e:	f7fb ffdd 	bl	8012a5c <lv_disp_get_dpi>
 8016aa2:	2877      	cmp	r0, #119	; 0x77
 8016aa4:	f105 0504 	add.w	r5, r5, #4
 8016aa8:	f340 857a 	ble.w	80175a0 <basic_init+0xc3c>
 8016aac:	2000      	movs	r0, #0
 8016aae:	f7fb ffd5 	bl	8012a5c <lv_disp_get_dpi>
 8016ab2:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016ab6:	2050      	movs	r0, #80	; 0x50
 8016ab8:	fb92 f2f0 	sdiv	r2, r2, r0
 8016abc:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8016abe:	4628      	mov	r0, r5
 8016ac0:	2130      	movs	r1, #48	; 0x30
 8016ac2:	f7f4 fd89 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 8016ac6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8016ac8:	2201      	movs	r2, #1
 8016aca:	2133      	movs	r1, #51	; 0x33
 8016acc:	3004      	adds	r0, #4
 8016ace:	f7f4 fd83 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8016ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ad4:	6825      	ldr	r5, [r4, #0]
 8016ad6:	079b      	lsls	r3, r3, #30
 8016ad8:	f105 0504 	add.w	r5, r5, #4
 8016adc:	bf4c      	ite	mi
 8016ade:	486c      	ldrmi	r0, [pc, #432]	; (8016c90 <basic_init+0x32c>)
 8016ae0:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016ae4:	f7fe ff3a 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016ae8:	f248 0189 	movw	r1, #32905	; 0x8089
 8016aec:	4602      	mov	r2, r0
 8016aee:	4628      	mov	r0, r5
 8016af0:	f7f4 fdc0 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 8016af4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr)
 8016af6:	69a2      	ldr	r2, [r4, #24]
 8016af8:	217e      	movs	r1, #126	; 0x7e
 8016afa:	3004      	adds	r0, #4
 8016afc:	f7f4 fe58 	bl	800b7b0 <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8016b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b02:	6825      	ldr	r5, [r4, #0]
 8016b04:	079e      	lsls	r6, r3, #30
 8016b06:	f105 0504 	add.w	r5, r5, #4
 8016b0a:	bf4c      	ite	mi
 8016b0c:	4860      	ldrmi	r0, [pc, #384]	; (8016c90 <basic_init+0x32c>)
 8016b0e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016b12:	f7fe ff23 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 8016b16:	2179      	movs	r1, #121	; 0x79
 8016b18:	4602      	mov	r2, r0
 8016b1a:	4628      	mov	r0, r5
 8016b1c:	f7f4 fdaa 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8016b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b22:	6825      	ldr	r5, [r4, #0]
 8016b24:	0798      	lsls	r0, r3, #30
 8016b26:	f105 0504 	add.w	r5, r5, #4
 8016b2a:	bf4c      	ite	mi
 8016b2c:	4858      	ldrmi	r0, [pc, #352]	; (8016c90 <basic_init+0x32c>)
 8016b2e:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016b32:	f7fe ff13 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8016b36:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	f7f4 fd99 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8016b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b44:	6825      	ldr	r5, [r4, #0]
 8016b46:	0799      	lsls	r1, r3, #30
 8016b48:	f105 0504 	add.w	r5, r5, #4
 8016b4c:	bf4c      	ite	mi
 8016b4e:	4850      	ldrmi	r0, [pc, #320]	; (8016c90 <basic_init+0x32c>)
 8016b50:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016b54:	f7fe ff02 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8016b58:	2199      	movs	r1, #153	; 0x99
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	4628      	mov	r0, r5
 8016b5e:	f7f4 fd89 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 8016b62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8016b64:	2201      	movs	r2, #1
 8016b66:	2190      	movs	r1, #144	; 0x90
 8016b68:	3004      	adds	r0, #4
 8016b6a:	f7f4 fd35 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8016b6e:	2000      	movs	r0, #0
 8016b70:	6826      	ldr	r6, [r4, #0]
 8016b72:	f7fb ff7f 	bl	8012a74 <lv_disp_get_size_category>
 8016b76:	2801      	cmp	r0, #1
 8016b78:	f04f 0000 	mov.w	r0, #0
 8016b7c:	f106 0604 	add.w	r6, r6, #4
 8016b80:	f200 851e 	bhi.w	80175c0 <basic_init+0xc5c>
 8016b84:	f7fb ff6a 	bl	8012a5c <lv_disp_get_dpi>
 8016b88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016b8c:	28ef      	cmp	r0, #239	; 0xef
 8016b8e:	f300 850a 	bgt.w	80175a6 <basic_init+0xc42>
 8016b92:	2501      	movs	r5, #1
 8016b94:	2000      	movs	r0, #0
 8016b96:	f7fb ff61 	bl	8012a5c <lv_disp_get_dpi>
 8016b9a:	2877      	cmp	r0, #119	; 0x77
 8016b9c:	f340 851d 	ble.w	80175da <basic_init+0xc76>
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	f7fb ff5b 	bl	8012a5c <lv_disp_get_dpi>
 8016ba6:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016baa:	2050      	movs	r0, #80	; 0x50
 8016bac:	fb92 f2f0 	sdiv	r2, r2, r0
 8016bb0:	b292      	uxth	r2, r2
 8016bb2:	442a      	add	r2, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	2112      	movs	r1, #18
 8016bb8:	b212      	sxth	r2, r2
 8016bba:	f7f4 fd0d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	6826      	ldr	r6, [r4, #0]
 8016bc2:	f7fb ff57 	bl	8012a74 <lv_disp_get_size_category>
 8016bc6:	2801      	cmp	r0, #1
 8016bc8:	f04f 0000 	mov.w	r0, #0
 8016bcc:	f106 0604 	add.w	r6, r6, #4
 8016bd0:	f200 8513 	bhi.w	80175fa <basic_init+0xc96>
 8016bd4:	f7fb ff42 	bl	8012a5c <lv_disp_get_dpi>
 8016bd8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016bdc:	28ef      	cmp	r0, #239	; 0xef
 8016bde:	f300 84ff 	bgt.w	80175e0 <basic_init+0xc7c>
 8016be2:	2501      	movs	r5, #1
 8016be4:	2000      	movs	r0, #0
 8016be6:	f7fb ff39 	bl	8012a5c <lv_disp_get_dpi>
 8016bea:	2877      	cmp	r0, #119	; 0x77
 8016bec:	f340 8512 	ble.w	8017614 <basic_init+0xcb0>
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	f7fb ff33 	bl	8012a5c <lv_disp_get_dpi>
 8016bf6:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016bfa:	2050      	movs	r0, #80	; 0x50
 8016bfc:	fb92 f2f0 	sdiv	r2, r2, r0
 8016c00:	b292      	uxth	r2, r2
 8016c02:	442a      	add	r2, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8016c04:	4630      	mov	r0, r6
 8016c06:	2113      	movs	r1, #19
 8016c08:	b212      	sxth	r2, r2
 8016c0a:	f7f4 fce5 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8016c0e:	2000      	movs	r0, #0
 8016c10:	6826      	ldr	r6, [r4, #0]
 8016c12:	f7fb ff2f 	bl	8012a74 <lv_disp_get_size_category>
 8016c16:	2801      	cmp	r0, #1
 8016c18:	f04f 0000 	mov.w	r0, #0
 8016c1c:	f106 0604 	add.w	r6, r6, #4
 8016c20:	f200 8508 	bhi.w	8017634 <basic_init+0xcd0>
 8016c24:	f7fb ff1a 	bl	8012a5c <lv_disp_get_dpi>
 8016c28:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016c2c:	28ef      	cmp	r0, #239	; 0xef
 8016c2e:	f300 84f4 	bgt.w	801761a <basic_init+0xcb6>
 8016c32:	2501      	movs	r5, #1
 8016c34:	2000      	movs	r0, #0
 8016c36:	f7fb ff11 	bl	8012a5c <lv_disp_get_dpi>
 8016c3a:	2877      	cmp	r0, #119	; 0x77
 8016c3c:	f340 8507 	ble.w	801764e <basic_init+0xcea>
 8016c40:	2000      	movs	r0, #0
 8016c42:	f7fb ff0b 	bl	8012a5c <lv_disp_get_dpi>
 8016c46:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016c4a:	2050      	movs	r0, #80	; 0x50
 8016c4c:	fb92 f2f0 	sdiv	r2, r2, r0
 8016c50:	b292      	uxth	r2, r2
 8016c52:	442a      	add	r2, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8016c54:	4630      	mov	r0, r6
 8016c56:	2110      	movs	r1, #16
 8016c58:	b212      	sxth	r2, r2
 8016c5a:	f7f4 fcbd 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8016c5e:	2000      	movs	r0, #0
 8016c60:	6826      	ldr	r6, [r4, #0]
 8016c62:	f7fb ff07 	bl	8012a74 <lv_disp_get_size_category>
 8016c66:	2801      	cmp	r0, #1
 8016c68:	f04f 0000 	mov.w	r0, #0
 8016c6c:	f106 0604 	add.w	r6, r6, #4
 8016c70:	f200 84fd 	bhi.w	801766e <basic_init+0xd0a>
 8016c74:	f7fb fef2 	bl	8012a5c <lv_disp_get_dpi>
 8016c78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016c7c:	28ef      	cmp	r0, #239	; 0xef
 8016c7e:	f300 84e9 	bgt.w	8017654 <basic_init+0xcf0>
 8016c82:	e00f      	b.n	8016ca4 <basic_init+0x340>
 8016c84:	200288d8 	.word	0x200288d8
 8016c88:	00eaeff3 	.word	0x00eaeff3
 8016c8c:	00444b5a 	.word	0x00444b5a
 8016c90:	003b3e42 	.word	0x003b3e42
 8016c94:	00e7e9ec 	.word	0x00e7e9ec
 8016c98:	00586273 	.word	0x00586273
 8016c9c:	00d6dde3 	.word	0x00d6dde3
 8016ca0:	00808a97 	.word	0x00808a97
 8016ca4:	2501      	movs	r5, #1
 8016ca6:	2000      	movs	r0, #0
 8016ca8:	f7fb fed8 	bl	8012a5c <lv_disp_get_dpi>
 8016cac:	2877      	cmp	r0, #119	; 0x77
 8016cae:	f340 84eb 	ble.w	8017688 <basic_init+0xd24>
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	f7fb fed2 	bl	8012a5c <lv_disp_get_dpi>
 8016cb8:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016cbc:	2050      	movs	r0, #80	; 0x50
 8016cbe:	fb92 f2f0 	sdiv	r2, r2, r0
 8016cc2:	b292      	uxth	r2, r2
 8016cc4:	442a      	add	r2, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8016cc6:	2111      	movs	r1, #17
 8016cc8:	4630      	mov	r0, r6
 8016cca:	b212      	sxth	r2, r2
 8016ccc:	f7f4 fc84 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	6825      	ldr	r5, [r4, #0]
 8016cd4:	f7fb fece 	bl	8012a74 <lv_disp_get_size_category>
 8016cd8:	2801      	cmp	r0, #1
 8016cda:	f04f 0000 	mov.w	r0, #0
 8016cde:	f105 0504 	add.w	r5, r5, #4
 8016ce2:	f200 84e1 	bhi.w	80176a8 <basic_init+0xd44>
 8016ce6:	f7fb feb9 	bl	8012a5c <lv_disp_get_dpi>
 8016cea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016cee:	28ef      	cmp	r0, #239	; 0xef
 8016cf0:	f300 84cd 	bgt.w	801768e <basic_init+0xd2a>
 8016cf4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	2114      	movs	r1, #20
 8016cfa:	f7f4 fc6d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8016cfe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 8016d00:	2200      	movs	r2, #0
 8016d02:	21b0      	movs	r1, #176	; 0xb0
 8016d04:	3004      	adds	r0, #4
 8016d06:	f7f4 fc67 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 8016d0a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 8016d0c:	2239      	movs	r2, #57	; 0x39
 8016d0e:	21b7      	movs	r1, #183	; 0xb7
 8016d10:	3004      	adds	r0, #4
 8016d12:	f7f4 fc61 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->bg_sec);
 8016d16:	6820      	ldr	r0, [r4, #0]
 8016d18:	300c      	adds	r0, #12
 8016d1a:	f7f4 fc03 	bl	800b524 <lv_style_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 8016d1e:	6820      	ldr	r0, [r4, #0]
 8016d20:	1d01      	adds	r1, r0, #4
 8016d22:	300c      	adds	r0, #12
 8016d24:	f7f4 fc1b 	bl	800b55e <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8016d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d2a:	6825      	ldr	r5, [r4, #0]
 8016d2c:	079a      	lsls	r2, r3, #30
 8016d2e:	f105 050c 	add.w	r5, r5, #12
 8016d32:	bf4c      	ite	mi
 8016d34:	48c6      	ldrmi	r0, [pc, #792]	; (8017050 <basic_init+0x6ec>)
 8016d36:	48c7      	ldrpl	r0, [pc, #796]	; (8017054 <basic_init+0x6f0>)
 8016d38:	f7fe fe10 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016d3c:	2129      	movs	r1, #41	; 0x29
 8016d3e:	4602      	mov	r2, r0
 8016d40:	4628      	mov	r0, r5
 8016d42:	f7f4 fc97 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 8016d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d48:	6825      	ldr	r5, [r4, #0]
 8016d4a:	079b      	lsls	r3, r3, #30
 8016d4c:	f105 050c 	add.w	r5, r5, #12
 8016d50:	bf4c      	ite	mi
 8016d52:	48c1      	ldrmi	r0, [pc, #772]	; (8017058 <basic_init+0x6f4>)
 8016d54:	48c1      	ldrpl	r0, [pc, #772]	; (801705c <basic_init+0x6f8>)
 8016d56:	f7fe fe01 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8016d5a:	2139      	movs	r1, #57	; 0x39
 8016d5c:	4602      	mov	r2, r0
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f7f4 fc88 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8016d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d66:	6825      	ldr	r5, [r4, #0]
 8016d68:	079e      	lsls	r6, r3, #30
 8016d6a:	f105 050c 	add.w	r5, r5, #12
 8016d6e:	bf4c      	ite	mi
 8016d70:	48bb      	ldrmi	r0, [pc, #748]	; (8017060 <basic_init+0x6fc>)
 8016d72:	48bc      	ldrpl	r0, [pc, #752]	; (8017064 <basic_init+0x700>)
 8016d74:	f7fe fdf2 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016d78:	f248 0189 	movw	r1, #32905	; 0x8089
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	4628      	mov	r0, r5
 8016d80:	f7f4 fc78 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8016d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d86:	6825      	ldr	r5, [r4, #0]
 8016d88:	0798      	lsls	r0, r3, #30
 8016d8a:	f105 050c 	add.w	r5, r5, #12
 8016d8e:	bf4c      	ite	mi
 8016d90:	48b3      	ldrmi	r0, [pc, #716]	; (8017060 <basic_init+0x6fc>)
 8016d92:	48b4      	ldrpl	r0, [pc, #720]	; (8017064 <basic_init+0x700>)
 8016d94:	f7fe fde2 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 8016d98:	2179      	movs	r1, #121	; 0x79
 8016d9a:	4602      	mov	r2, r0
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f7f4 fc69 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8016da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016da4:	6825      	ldr	r5, [r4, #0]
 8016da6:	0799      	lsls	r1, r3, #30
 8016da8:	f105 050c 	add.w	r5, r5, #12
 8016dac:	bf4c      	ite	mi
 8016dae:	48ac      	ldrmi	r0, [pc, #688]	; (8017060 <basic_init+0x6fc>)
 8016db0:	48ac      	ldrpl	r0, [pc, #688]	; (8017064 <basic_init+0x700>)
 8016db2:	f7fe fdd3 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8016db6:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8016dba:	4602      	mov	r2, r0
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	f7f4 fc59 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8016dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dc4:	6825      	ldr	r5, [r4, #0]
 8016dc6:	079a      	lsls	r2, r3, #30
 8016dc8:	f105 050c 	add.w	r5, r5, #12
 8016dcc:	bf4c      	ite	mi
 8016dce:	48a4      	ldrmi	r0, [pc, #656]	; (8017060 <basic_init+0x6fc>)
 8016dd0:	48a4      	ldrpl	r0, [pc, #656]	; (8017064 <basic_init+0x700>)
 8016dd2:	f7fe fdc3 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8016dd6:	2199      	movs	r1, #153	; 0x99
 8016dd8:	4602      	mov	r2, r0
 8016dda:	4628      	mov	r0, r5
 8016ddc:	f7f4 fc4a 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->bg_click);
 8016de0:	6820      	ldr	r0, [r4, #0]
 8016de2:	3008      	adds	r0, #8
 8016de4:	f7f4 fb9e 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 8016de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dea:	6825      	ldr	r5, [r4, #0]
 8016dec:	079b      	lsls	r3, r3, #30
 8016dee:	f105 0508 	add.w	r5, r5, #8
 8016df2:	bf4c      	ite	mi
 8016df4:	489c      	ldrmi	r0, [pc, #624]	; (8017068 <basic_init+0x704>)
 8016df6:	489d      	ldrpl	r0, [pc, #628]	; (801706c <basic_init+0x708>)
 8016df8:	f7fe fdb0 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8016dfc:	f241 0129 	movw	r1, #4137	; 0x1029
 8016e00:	4602      	mov	r2, r0
 8016e02:	4628      	mov	r0, r5
 8016e04:	f7f4 fc36 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 8016e08:	6820      	ldr	r0, [r4, #0]
 8016e0a:	8a22      	ldrh	r2, [r4, #16]
 8016e0c:	f240 1129 	movw	r1, #297	; 0x129
 8016e10:	3008      	adds	r0, #8
 8016e12:	f7f4 fc2f 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 8016e16:	6820      	ldr	r0, [r4, #0]
 8016e18:	2133      	movs	r1, #51	; 0x33
 8016e1a:	f100 0508 	add.w	r5, r0, #8
 8016e1e:	8a20      	ldrh	r0, [r4, #16]
 8016e20:	f7fc fbe4 	bl	80135ec <lv_color_darken>
 8016e24:	f241 1129 	movw	r1, #4393	; 0x1129
 8016e28:	4602      	mov	r2, r0
 8016e2a:	4628      	mov	r0, r5
 8016e2c:	f7f4 fc22 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 8016e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e32:	6825      	ldr	r5, [r4, #0]
 8016e34:	079e      	lsls	r6, r3, #30
 8016e36:	f105 0508 	add.w	r5, r5, #8
 8016e3a:	bf4c      	ite	mi
 8016e3c:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8016e40:	488b      	ldrpl	r0, [pc, #556]	; (8017070 <basic_init+0x70c>)
 8016e42:	f7fe fd8b 	bl	801595c <lv_color_hex>
 8016e46:	f242 0129 	movw	r1, #8233	; 0x2029
 8016e4a:	4602      	mov	r2, r0
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	f7f4 fc11 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 8016e52:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8016e54:	2200      	movs	r2, #0
 8016e56:	f44f 7198 	mov.w	r1, #304	; 0x130
 8016e5a:	3008      	adds	r0, #8
 8016e5c:	f7f4 fbbc 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 8016e60:	6820      	ldr	r0, [r4, #0]
 8016e62:	2133      	movs	r1, #51	; 0x33
 8016e64:	f100 0508 	add.w	r5, r0, #8
 8016e68:	8a20      	ldrh	r0, [r4, #16]
 8016e6a:	f7fc fbbf 	bl	80135ec <lv_color_darken>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8016e6e:	f241 2139 	movw	r1, #4665	; 0x1239
 8016e72:	4602      	mov	r2, r0
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7f4 fbfd 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 8016e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e7c:	6825      	ldr	r5, [r4, #0]
 8016e7e:	0798      	lsls	r0, r3, #30
 8016e80:	f105 0508 	add.w	r5, r5, #8
 8016e84:	f140 841d 	bpl.w	80176c2 <basic_init+0xd5e>
 8016e88:	f640 40cc 	movw	r0, #3276	; 0xccc
 8016e8c:	f7fe fa58 	bl	8015340 <lv_color_hex3>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 8016e90:	4c78      	ldr	r4, [pc, #480]	; (8017074 <basic_init+0x710>)
 8016e92:	4602      	mov	r2, r0
 8016e94:	f241 0139 	movw	r1, #4153	; 0x1039
 8016e98:	4628      	mov	r0, r5
 8016e9a:	f7f4 fbeb 	bl	800b674 <_lv_style_set_color>
 8016e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ea0:	6825      	ldr	r5, [r4, #0]
 8016ea2:	0799      	lsls	r1, r3, #30
 8016ea4:	f105 0508 	add.w	r5, r5, #8
 8016ea8:	bf4c      	ite	mi
 8016eaa:	4873      	ldrmi	r0, [pc, #460]	; (8017078 <basic_init+0x714>)
 8016eac:	4873      	ldrpl	r0, [pc, #460]	; (801707c <basic_init+0x718>)
 8016eae:	f7fe fd55 	bl	801595c <lv_color_hex>
 8016eb2:	f240 1139 	movw	r1, #313	; 0x139
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	4628      	mov	r0, r5
 8016eba:	f7f4 fbdb 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 8016ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ec0:	6825      	ldr	r5, [r4, #0]
 8016ec2:	079a      	lsls	r2, r3, #30
 8016ec4:	f105 0508 	add.w	r5, r5, #8
 8016ec8:	bf4c      	ite	mi
 8016eca:	486b      	ldrmi	r0, [pc, #428]	; (8017078 <basic_init+0x714>)
 8016ecc:	486b      	ldrpl	r0, [pc, #428]	; (801707c <basic_init+0x718>)
 8016ece:	f7fe fd45 	bl	801595c <lv_color_hex>
 8016ed2:	f241 1139 	movw	r1, #4409	; 0x1139
 8016ed6:	4602      	mov	r2, r0
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f7f4 fbcb 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 8016ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ee0:	6825      	ldr	r5, [r4, #0]
 8016ee2:	079b      	lsls	r3, r3, #30
 8016ee4:	f105 0508 	add.w	r5, r5, #8
 8016ee8:	bf4c      	ite	mi
 8016eea:	4865      	ldrmi	r0, [pc, #404]	; (8017080 <basic_init+0x71c>)
 8016eec:	4863      	ldrpl	r0, [pc, #396]	; (801707c <basic_init+0x718>)
 8016eee:	f7fe fd35 	bl	801595c <lv_color_hex>
 8016ef2:	f242 0139 	movw	r1, #8249	; 0x2039
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	4628      	mov	r0, r5
 8016efa:	f7f4 fbbb 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8016efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f00:	6825      	ldr	r5, [r4, #0]
 8016f02:	079e      	lsls	r6, r3, #30
 8016f04:	f105 0508 	add.w	r5, r5, #8
 8016f08:	bf4c      	ite	mi
 8016f0a:	485b      	ldrmi	r0, [pc, #364]	; (8017078 <basic_init+0x714>)
 8016f0c:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016f10:	f7fe fd24 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8016f14:	f249 0189 	movw	r1, #37001	; 0x9089
 8016f18:	4602      	mov	r2, r0
 8016f1a:	4628      	mov	r0, r5
 8016f1c:	f7f4 fbaa 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8016f20:	6820      	ldr	r0, [r4, #0]
 8016f22:	f100 0508 	add.w	r5, r0, #8
 8016f26:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016f2a:	f7fe fd17 	bl	801595c <lv_color_hex>
 8016f2e:	f248 1189 	movw	r1, #33161	; 0x8189
 8016f32:	4602      	mov	r2, r0
 8016f34:	4628      	mov	r0, r5
 8016f36:	f7f4 fb9d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 8016f3a:	6820      	ldr	r0, [r4, #0]
 8016f3c:	f100 0508 	add.w	r5, r0, #8
 8016f40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016f44:	f7fe fd0a 	bl	801595c <lv_color_hex>
 8016f48:	f249 1189 	movw	r1, #37257	; 0x9189
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f7f4 fb90 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8016f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f56:	6825      	ldr	r5, [r4, #0]
 8016f58:	0798      	lsls	r0, r3, #30
 8016f5a:	f105 0508 	add.w	r5, r5, #8
 8016f5e:	bf4c      	ite	mi
 8016f60:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
 8016f64:	f640 1099 	movwpl	r0, #2457	; 0x999
 8016f68:	f7fe f9ea 	bl	8015340 <lv_color_hex3>
 8016f6c:	f24a 0189 	movw	r1, #41097	; 0xa089
 8016f70:	4602      	mov	r2, r0
 8016f72:	4628      	mov	r0, r5
 8016f74:	f7f4 fb7e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8016f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f7a:	6825      	ldr	r5, [r4, #0]
 8016f7c:	0799      	lsls	r1, r3, #30
 8016f7e:	f105 0508 	add.w	r5, r5, #8
 8016f82:	bf4c      	ite	mi
 8016f84:	483c      	ldrmi	r0, [pc, #240]	; (8017078 <basic_init+0x714>)
 8016f86:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8016f8a:	f7fe fce7 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 8016f8e:	f249 01a9 	movw	r1, #37033	; 0x90a9
 8016f92:	4602      	mov	r2, r0
 8016f94:	4628      	mov	r0, r5
 8016f96:	f7f4 fb6d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8016f9a:	6820      	ldr	r0, [r4, #0]
 8016f9c:	f100 0508 	add.w	r5, r0, #8
 8016fa0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016fa4:	f7fe fcda 	bl	801595c <lv_color_hex>
 8016fa8:	f248 11a9 	movw	r1, #33193	; 0x81a9
 8016fac:	4602      	mov	r2, r0
 8016fae:	4628      	mov	r0, r5
 8016fb0:	f7f4 fb60 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 8016fb4:	6820      	ldr	r0, [r4, #0]
 8016fb6:	f100 0508 	add.w	r5, r0, #8
 8016fba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016fbe:	f7fe fccd 	bl	801595c <lv_color_hex>
 8016fc2:	f249 11a9 	movw	r1, #37289	; 0x91a9
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	4628      	mov	r0, r5
 8016fca:	f7f4 fb53 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8016fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fd0:	6825      	ldr	r5, [r4, #0]
 8016fd2:	079a      	lsls	r2, r3, #30
 8016fd4:	f105 0508 	add.w	r5, r5, #8
 8016fd8:	bf4c      	ite	mi
 8016fda:	f640 20aa 	movwmi	r0, #2730	; 0xaaa
 8016fde:	f640 1099 	movwpl	r0, #2457	; 0x999
 8016fe2:	f7fe f9ad 	bl	8015340 <lv_color_hex3>
 8016fe6:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 8016fea:	4602      	mov	r2, r0
 8016fec:	4628      	mov	r0, r5
 8016fee:	f7f4 fb41 	bl	800b674 <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8016ff2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 8016ff4:	2229      	movs	r2, #41	; 0x29
 8016ff6:	21b6      	movs	r1, #182	; 0xb6
 8016ff8:	3008      	adds	r0, #8
 8016ffa:	f7f4 faed 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->btn);
 8016ffe:	6820      	ldr	r0, [r4, #0]
 8017000:	3010      	adds	r0, #16
 8017002:	f7f4 fa8f 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017006:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8017008:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801700c:	2101      	movs	r1, #1
 801700e:	3010      	adds	r0, #16
 8017010:	f7f4 fae2 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 8017014:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8017016:	22ff      	movs	r2, #255	; 0xff
 8017018:	212c      	movs	r1, #44	; 0x2c
 801701a:	3010      	adds	r0, #16
 801701c:	f7f4 fb78 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 8017020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017022:	6825      	ldr	r5, [r4, #0]
 8017024:	079b      	lsls	r3, r3, #30
 8017026:	f105 0510 	add.w	r5, r5, #16
 801702a:	bf4c      	ite	mi
 801702c:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 8017030:	480f      	ldrpl	r0, [pc, #60]	; (8017070 <basic_init+0x70c>)
 8017032:	f7fe fc93 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8017036:	2129      	movs	r1, #41	; 0x29
 8017038:	4602      	mov	r2, r0
 801703a:	4628      	mov	r0, r5
 801703c:	f7f4 fb1a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 8017040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017042:	6825      	ldr	r5, [r4, #0]
 8017044:	079e      	lsls	r6, r3, #30
 8017046:	f105 0510 	add.w	r5, r5, #16
 801704a:	f140 833f 	bpl.w	80176cc <basic_init+0xd68>
 801704e:	e019      	b.n	8017084 <basic_init+0x720>
 8017050:	00d4d7d9 	.word	0x00d4d7d9
 8017054:	0045494d 	.word	0x0045494d
 8017058:	00dfe7ed 	.word	0x00dfe7ed
 801705c:	00404040 	.word	0x00404040
 8017060:	0031404f 	.word	0x0031404f
 8017064:	00a5a8ad 	.word	0x00a5a8ad
 8017068:	00eeeeee 	.word	0x00eeeeee
 801706c:	00494f57 	.word	0x00494f57
 8017070:	00586273 	.word	0x00586273
 8017074:	200288d8 	.word	0x200288d8
 8017078:	003b3e42 	.word	0x003b3e42
 801707c:	005f656e 	.word	0x005f656e
 8017080:	00d6dde3 	.word	0x00d6dde3
 8017084:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017088:	f7fe fc68 	bl	801595c <lv_color_hex>
 801708c:	2233      	movs	r2, #51	; 0x33
 801708e:	4601      	mov	r1, r0
 8017090:	8a20      	ldrh	r0, [r4, #16]
 8017092:	f7fe f927 	bl	80152e4 <lv_color_mix>
 8017096:	f241 0129 	movw	r1, #4137	; 0x1029
 801709a:	4602      	mov	r2, r0
 801709c:	4628      	mov	r0, r5
 801709e:	f7f4 fae9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 80170a2:	6820      	ldr	r0, [r4, #0]
 80170a4:	8a22      	ldrh	r2, [r4, #16]
 80170a6:	f240 1129 	movw	r1, #297	; 0x129
 80170aa:	3010      	adds	r0, #16
 80170ac:	f7f4 fae2 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 80170b0:	6820      	ldr	r0, [r4, #0]
 80170b2:	214c      	movs	r1, #76	; 0x4c
 80170b4:	f100 0510 	add.w	r5, r0, #16
 80170b8:	8a20      	ldrh	r0, [r4, #16]
 80170ba:	f7fc fa97 	bl	80135ec <lv_color_darken>
 80170be:	f241 1129 	movw	r1, #4393	; 0x1129
 80170c2:	4602      	mov	r2, r0
 80170c4:	4628      	mov	r0, r5
 80170c6:	f7f4 fad5 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 80170ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170cc:	6825      	ldr	r5, [r4, #0]
 80170ce:	0798      	lsls	r0, r3, #30
 80170d0:	f105 0510 	add.w	r5, r5, #16
 80170d4:	bf4c      	ite	mi
 80170d6:	f06f 407f 	mvnmi.w	r0, #4278190080	; 0xff000000
 80170da:	48d5      	ldrpl	r0, [pc, #852]	; (8017430 <basic_init+0xacc>)
 80170dc:	f7fe fc3e 	bl	801595c <lv_color_hex>
 80170e0:	f242 0129 	movw	r1, #8233	; 0x2029
 80170e4:	4602      	mov	r2, r0
 80170e6:	4628      	mov	r0, r5
 80170e8:	f7f4 fac4 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 80170ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170ee:	6825      	ldr	r5, [r4, #0]
 80170f0:	0799      	lsls	r1, r3, #30
 80170f2:	f105 0510 	add.w	r5, r5, #16
 80170f6:	bf4c      	ite	mi
 80170f8:	f640 40cc 	movwmi	r0, #3276	; 0xccc
 80170fc:	f640 0088 	movwpl	r0, #2184	; 0x888
 8017100:	f7fe f91e 	bl	8015340 <lv_color_hex3>
 8017104:	f242 1129 	movw	r1, #8489	; 0x2129
 8017108:	4602      	mov	r2, r0
 801710a:	4628      	mov	r0, r5
 801710c:	f7f4 fab2 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 8017110:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8017112:	8a22      	ldrh	r2, [r4, #16]
 8017114:	2139      	movs	r1, #57	; 0x39
 8017116:	3010      	adds	r0, #16
 8017118:	f7f4 faac 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 801711c:	6820      	ldr	r0, [r4, #0]
 801711e:	8a22      	ldrh	r2, [r4, #16]
 8017120:	f241 0139 	movw	r1, #4153	; 0x1039
 8017124:	3010      	adds	r0, #16
 8017126:	f7f4 faa5 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 801712a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801712c:	6825      	ldr	r5, [r4, #0]
 801712e:	079a      	lsls	r2, r3, #30
 8017130:	f105 0510 	add.w	r5, r5, #16
 8017134:	f140 82cf 	bpl.w	80176d6 <basic_init+0xd72>
 8017138:	f640 0088 	movw	r0, #2184	; 0x888
 801713c:	f7fe f900 	bl	8015340 <lv_color_hex3>
 8017140:	4602      	mov	r2, r0
 8017142:	f242 0139 	movw	r1, #8249	; 0x2039
 8017146:	4628      	mov	r0, r5
 8017148:	f7f4 fa94 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 801714c:	2000      	movs	r0, #0
 801714e:	6825      	ldr	r5, [r4, #0]
 8017150:	f7fb fc84 	bl	8012a5c <lv_disp_get_dpi>
 8017154:	2877      	cmp	r0, #119	; 0x77
 8017156:	f105 0510 	add.w	r5, r5, #16
 801715a:	f340 82c0 	ble.w	80176de <basic_init+0xd7a>
 801715e:	2000      	movs	r0, #0
 8017160:	f7fb fc7c 	bl	8012a5c <lv_disp_get_dpi>
 8017164:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8017168:	2050      	movs	r0, #80	; 0x50
 801716a:	fb92 f2f0 	sdiv	r2, r2, r0
 801716e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8017170:	4628      	mov	r0, r5
 8017172:	2130      	movs	r1, #48	; 0x30
 8017174:	f7f4 fa30 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 8017178:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 801717a:	2200      	movs	r2, #0
 801717c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8017180:	3010      	adds	r0, #16
 8017182:	f7f4 fac5 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8017186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017188:	6825      	ldr	r5, [r4, #0]
 801718a:	079b      	lsls	r3, r3, #30
 801718c:	f105 0510 	add.w	r5, r5, #16
 8017190:	bf4c      	ite	mi
 8017192:	48a8      	ldrmi	r0, [pc, #672]	; (8017434 <basic_init+0xad0>)
 8017194:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8017198:	f7fe fbe0 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 801719c:	f248 0189 	movw	r1, #32905	; 0x8089
 80171a0:	4602      	mov	r2, r0
 80171a2:	4628      	mov	r0, r5
 80171a4:	f7f4 fa66 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80171a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171aa:	6825      	ldr	r5, [r4, #0]
 80171ac:	079e      	lsls	r6, r3, #30
 80171ae:	f105 0510 	add.w	r5, r5, #16
 80171b2:	bf4c      	ite	mi
 80171b4:	489f      	ldrmi	r0, [pc, #636]	; (8017434 <basic_init+0xad0>)
 80171b6:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 80171ba:	f7fe fbcf 	bl	801595c <lv_color_hex>
 80171be:	f249 0189 	movw	r1, #37001	; 0x9089
 80171c2:	4602      	mov	r2, r0
 80171c4:	4628      	mov	r0, r5
 80171c6:	f7f4 fa55 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 80171ca:	6820      	ldr	r0, [r4, #0]
 80171cc:	f100 0510 	add.w	r5, r0, #16
 80171d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80171d4:	f7fe fbc2 	bl	801595c <lv_color_hex>
 80171d8:	f248 1189 	movw	r1, #33161	; 0x8189
 80171dc:	4602      	mov	r2, r0
 80171de:	4628      	mov	r0, r5
 80171e0:	f7f4 fa48 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 80171e4:	6820      	ldr	r0, [r4, #0]
 80171e6:	f100 0510 	add.w	r5, r0, #16
 80171ea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80171ee:	f7fe fbb5 	bl	801595c <lv_color_hex>
 80171f2:	f249 1189 	movw	r1, #37257	; 0x9189
 80171f6:	4602      	mov	r2, r0
 80171f8:	4628      	mov	r0, r5
 80171fa:	f7f4 fa3b 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 80171fe:	6820      	ldr	r0, [r4, #0]
 8017200:	f100 0510 	add.w	r5, r0, #16
 8017204:	488c      	ldr	r0, [pc, #560]	; (8017438 <basic_init+0xad4>)
 8017206:	f7fe fba9 	bl	801595c <lv_color_hex>
 801720a:	f24a 0189 	movw	r1, #41097	; 0xa089
 801720e:	4602      	mov	r2, r0
 8017210:	4628      	mov	r0, r5
 8017212:	f7f4 fa2f 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8017216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017218:	6825      	ldr	r5, [r4, #0]
 801721a:	0798      	lsls	r0, r3, #30
 801721c:	f105 0510 	add.w	r5, r5, #16
 8017220:	bf4c      	ite	mi
 8017222:	4884      	ldrmi	r0, [pc, #528]	; (8017434 <basic_init+0xad0>)
 8017224:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8017228:	f7fe fb98 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 801722c:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8017230:	4602      	mov	r2, r0
 8017232:	4628      	mov	r0, r5
 8017234:	f7f4 fa1e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8017238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801723a:	6825      	ldr	r5, [r4, #0]
 801723c:	0799      	lsls	r1, r3, #30
 801723e:	f105 0510 	add.w	r5, r5, #16
 8017242:	bf4c      	ite	mi
 8017244:	487b      	ldrmi	r0, [pc, #492]	; (8017434 <basic_init+0xad0>)
 8017246:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 801724a:	f7fe fb87 	bl	801595c <lv_color_hex>
 801724e:	f249 01a9 	movw	r1, #37033	; 0x90a9
 8017252:	4602      	mov	r2, r0
 8017254:	4628      	mov	r0, r5
 8017256:	f7f4 fa0d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 801725a:	6820      	ldr	r0, [r4, #0]
 801725c:	f100 0510 	add.w	r5, r0, #16
 8017260:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017264:	f7fe fb7a 	bl	801595c <lv_color_hex>
 8017268:	f249 01a9 	movw	r1, #37033	; 0x90a9
 801726c:	4602      	mov	r2, r0
 801726e:	4628      	mov	r0, r5
 8017270:	f7f4 fa00 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8017274:	6820      	ldr	r0, [r4, #0]
 8017276:	f100 0510 	add.w	r5, r0, #16
 801727a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801727e:	f7fe fb6d 	bl	801595c <lv_color_hex>
 8017282:	f249 11a9 	movw	r1, #37289	; 0x91a9
 8017286:	4602      	mov	r2, r0
 8017288:	4628      	mov	r0, r5
 801728a:	f7f4 f9f3 	bl	800b674 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 801728e:	6820      	ldr	r0, [r4, #0]
 8017290:	f100 0510 	add.w	r5, r0, #16
 8017294:	4868      	ldr	r0, [pc, #416]	; (8017438 <basic_init+0xad4>)
 8017296:	f7fe fb61 	bl	801595c <lv_color_hex>
 801729a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 801729e:	4602      	mov	r2, r0
 80172a0:	4628      	mov	r0, r5
 80172a2:	f7f4 f9e7 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80172a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172a8:	6825      	ldr	r5, [r4, #0]
 80172aa:	079a      	lsls	r2, r3, #30
 80172ac:	f105 0510 	add.w	r5, r5, #16
 80172b0:	bf4c      	ite	mi
 80172b2:	4860      	ldrmi	r0, [pc, #384]	; (8017434 <basic_init+0xad0>)
 80172b4:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 80172b8:	f7fe fb50 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 80172bc:	2179      	movs	r1, #121	; 0x79
 80172be:	4602      	mov	r2, r0
 80172c0:	4628      	mov	r0, r5
 80172c2:	f7f4 f9d7 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80172c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172c8:	6825      	ldr	r5, [r4, #0]
 80172ca:	079b      	lsls	r3, r3, #30
 80172cc:	f105 0510 	add.w	r5, r5, #16
 80172d0:	bf4c      	ite	mi
 80172d2:	4858      	ldrmi	r0, [pc, #352]	; (8017434 <basic_init+0xad0>)
 80172d4:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 80172d8:	f7fe fb40 	bl	801595c <lv_color_hex>
 80172dc:	f241 0179 	movw	r1, #4217	; 0x1079
 80172e0:	4602      	mov	r2, r0
 80172e2:	4628      	mov	r0, r5
 80172e4:	f7f4 f9c6 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 80172e8:	6820      	ldr	r0, [r4, #0]
 80172ea:	f100 0510 	add.w	r5, r0, #16
 80172ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80172f2:	f7fe fb33 	bl	801595c <lv_color_hex>
 80172f6:	f240 1179 	movw	r1, #377	; 0x179
 80172fa:	4602      	mov	r2, r0
 80172fc:	4628      	mov	r0, r5
 80172fe:	f7f4 f9b9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8017302:	6820      	ldr	r0, [r4, #0]
 8017304:	f100 0510 	add.w	r5, r0, #16
 8017308:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801730c:	f7fe fb26 	bl	801595c <lv_color_hex>
 8017310:	f241 1179 	movw	r1, #4473	; 0x1179
 8017314:	4602      	mov	r2, r0
 8017316:	4628      	mov	r0, r5
 8017318:	f7f4 f9ac 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 801731c:	6820      	ldr	r0, [r4, #0]
 801731e:	f100 0510 	add.w	r5, r0, #16
 8017322:	4845      	ldr	r0, [pc, #276]	; (8017438 <basic_init+0xad4>)
 8017324:	f7fe fb1a 	bl	801595c <lv_color_hex>
 8017328:	f242 0179 	movw	r1, #8313	; 0x2079
 801732c:	4602      	mov	r2, r0
 801732e:	4628      	mov	r0, r5
 8017330:	f7f4 f9a0 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8017334:	2000      	movs	r0, #0
 8017336:	6825      	ldr	r5, [r4, #0]
 8017338:	f7fb fb90 	bl	8012a5c <lv_disp_get_dpi>
 801733c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017340:	3510      	adds	r5, #16
 8017342:	00c0      	lsls	r0, r0, #3
 8017344:	28ef      	cmp	r0, #239	; 0xef
 8017346:	f340 81cc 	ble.w	80176e2 <basic_init+0xd7e>
 801734a:	2000      	movs	r0, #0
 801734c:	f7fb fb86 	bl	8012a5c <lv_disp_get_dpi>
 8017350:	2228      	movs	r2, #40	; 0x28
 8017352:	2350      	movs	r3, #80	; 0x50
 8017354:	fb00 3202 	mla	r2, r0, r2, r3
 8017358:	20a0      	movs	r0, #160	; 0xa0
 801735a:	fb92 f2f0 	sdiv	r2, r2, r0
 801735e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8017360:	4628      	mov	r0, r5
 8017362:	2112      	movs	r1, #18
 8017364:	f7f4 f938 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8017368:	2000      	movs	r0, #0
 801736a:	6825      	ldr	r5, [r4, #0]
 801736c:	f7fb fb76 	bl	8012a5c <lv_disp_get_dpi>
 8017370:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017374:	3510      	adds	r5, #16
 8017376:	00c0      	lsls	r0, r0, #3
 8017378:	28ef      	cmp	r0, #239	; 0xef
 801737a:	f340 81b4 	ble.w	80176e6 <basic_init+0xd82>
 801737e:	2000      	movs	r0, #0
 8017380:	f7fb fb6c 	bl	8012a5c <lv_disp_get_dpi>
 8017384:	2228      	movs	r2, #40	; 0x28
 8017386:	2350      	movs	r3, #80	; 0x50
 8017388:	fb00 3202 	mla	r2, r0, r2, r3
 801738c:	20a0      	movs	r0, #160	; 0xa0
 801738e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017392:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017394:	4628      	mov	r0, r5
 8017396:	2113      	movs	r1, #19
 8017398:	f7f4 f91e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 801739c:	2000      	movs	r0, #0
 801739e:	6825      	ldr	r5, [r4, #0]
 80173a0:	f7fb fb5c 	bl	8012a5c <lv_disp_get_dpi>
 80173a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80173a8:	3510      	adds	r5, #16
 80173aa:	28ef      	cmp	r0, #239	; 0xef
 80173ac:	f340 819d 	ble.w	80176ea <basic_init+0xd86>
 80173b0:	2000      	movs	r0, #0
 80173b2:	f7fb fb53 	bl	8012a5c <lv_disp_get_dpi>
 80173b6:	220f      	movs	r2, #15
 80173b8:	2350      	movs	r3, #80	; 0x50
 80173ba:	fb00 3202 	mla	r2, r0, r2, r3
 80173be:	20a0      	movs	r0, #160	; 0xa0
 80173c0:	fb92 f2f0 	sdiv	r2, r2, r0
 80173c4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 80173c6:	4628      	mov	r0, r5
 80173c8:	2110      	movs	r1, #16
 80173ca:	f7f4 f905 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 80173ce:	2000      	movs	r0, #0
 80173d0:	6825      	ldr	r5, [r4, #0]
 80173d2:	f7fb fb43 	bl	8012a5c <lv_disp_get_dpi>
 80173d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80173da:	3510      	adds	r5, #16
 80173dc:	28ef      	cmp	r0, #239	; 0xef
 80173de:	f340 8186 	ble.w	80176ee <basic_init+0xd8a>
 80173e2:	2000      	movs	r0, #0
 80173e4:	f7fb fb3a 	bl	8012a5c <lv_disp_get_dpi>
 80173e8:	220f      	movs	r2, #15
 80173ea:	2350      	movs	r3, #80	; 0x50
 80173ec:	fb00 3202 	mla	r2, r0, r2, r3
 80173f0:	20a0      	movs	r0, #160	; 0xa0
 80173f2:	fb92 f2f0 	sdiv	r2, r2, r0
 80173f6:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80173f8:	4628      	mov	r0, r5
 80173fa:	2111      	movs	r1, #17
 80173fc:	f7f4 f8ec 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 8017400:	2000      	movs	r0, #0
 8017402:	6825      	ldr	r5, [r4, #0]
 8017404:	f7fb fb2a 	bl	8012a5c <lv_disp_get_dpi>
 8017408:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801740c:	3510      	adds	r5, #16
 801740e:	0080      	lsls	r0, r0, #2
 8017410:	28ef      	cmp	r0, #239	; 0xef
 8017412:	f340 816e 	ble.w	80176f2 <basic_init+0xd8e>
 8017416:	2000      	movs	r0, #0
 8017418:	f7fb fb20 	bl	8012a5c <lv_disp_get_dpi>
 801741c:	2214      	movs	r2, #20
 801741e:	2350      	movs	r3, #80	; 0x50
 8017420:	fb00 3202 	mla	r2, r0, r2, r3
 8017424:	20a0      	movs	r0, #160	; 0xa0
 8017426:	fb92 f2f0 	sdiv	r2, r2, r0
 801742a:	b212      	sxth	r2, r2
 801742c:	e006      	b.n	801743c <basic_init+0xad8>
 801742e:	bf00      	nop
 8017430:	00586273 	.word	0x00586273
 8017434:	0031404f 	.word	0x0031404f
 8017438:	00888888 	.word	0x00888888
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801743c:	4628      	mov	r0, r5
 801743e:	2114      	movs	r1, #20
 8017440:	f7f4 f8ca 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8017444:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017446:	6826      	ldr	r6, [r4, #0]
 8017448:	f010 0520 	ands.w	r5, r0, #32
 801744c:	f106 0610 	add.w	r6, r6, #16
 8017450:	f040 8151 	bne.w	80176f6 <basic_init+0xd92>
 8017454:	4628      	mov	r0, r5
 8017456:	f7fb fb01 	bl	8012a5c <lv_disp_get_dpi>
 801745a:	2877      	cmp	r0, #119	; 0x77
 801745c:	f340 814d 	ble.w	80176fa <basic_init+0xd96>
 8017460:	4628      	mov	r0, r5
 8017462:	f7fb fafb 	bl	8012a5c <lv_disp_get_dpi>
 8017466:	f100 0228 	add.w	r2, r0, #40	; 0x28
 801746a:	2050      	movs	r0, #80	; 0x50
 801746c:	fb92 f2f0 	sdiv	r2, r2, r0
 8017470:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 8017472:	2140      	movs	r1, #64	; 0x40
 8017474:	4630      	mov	r0, r6
 8017476:	f7f4 f8af 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 801747a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 801747c:	2200      	movs	r2, #0
 801747e:	214c      	movs	r1, #76	; 0x4c
 8017480:	3010      	adds	r0, #16
 8017482:	f7f4 f945 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 8017486:	6820      	ldr	r0, [r4, #0]
 8017488:	227f      	movs	r2, #127	; 0x7f
 801748a:	f44f 7113 	mov.w	r1, #588	; 0x24c
 801748e:	3010      	adds	r0, #16
 8017490:	f7f4 f93e 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 8017494:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 8017496:	8a22      	ldrh	r2, [r4, #16]
 8017498:	2149      	movs	r1, #73	; 0x49
 801749a:	3010      	adds	r0, #16
 801749c:	f7f4 f8ea 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 80174a0:	6820      	ldr	r0, [r4, #0]
 80174a2:	8a62      	ldrh	r2, [r4, #18]
 80174a4:	f240 4149 	movw	r1, #1097	; 0x449
 80174a8:	3010      	adds	r0, #16
 80174aa:	f7f4 f8e3 	bl	800b674 <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80174ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 80174b0:	2200      	movs	r2, #0
 80174b2:	21b0      	movs	r1, #176	; 0xb0
 80174b4:	3010      	adds	r0, #16
 80174b6:	f7f4 f88f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 80174ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int)
 80174bc:	223c      	movs	r2, #60	; 0x3c
 80174be:	21b5      	movs	r1, #181	; 0xb5
 80174c0:	3010      	adds	r0, #16
 80174c2:	f7f4 f889 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 80174c6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int)
 80174c8:	2229      	movs	r2, #41	; 0x29
 80174ca:	21b6      	movs	r1, #182	; 0xb6
 80174cc:	3010      	adds	r0, #16
 80174ce:	f7f4 f883 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80174d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 80174d4:	224c      	movs	r2, #76	; 0x4c
 80174d6:	21b7      	movs	r1, #183	; 0xb7
 80174d8:	3010      	adds	r0, #16
 80174da:	f7f4 f87d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80174de:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int)
 80174e0:	2200      	movs	r2, #0
 80174e2:	21b1      	movs	r1, #177	; 0xb1
 80174e4:	3010      	adds	r0, #16
 80174e6:	f7f4 f877 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 80174ea:	6820      	ldr	r0, [r4, #0]
 80174ec:	2200      	movs	r2, #0
 80174ee:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80174f2:	3010      	adds	r0, #16
 80174f4:	f7f4 f870 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->pad_inner);
 80174f8:	6820      	ldr	r0, [r4, #0]
 80174fa:	3014      	adds	r0, #20
 80174fc:	f7f4 f812 	bl	800b524 <lv_style_reset>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8017500:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8017502:	6825      	ldr	r5, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8017504:	f7fb fab6 	bl	8012a74 <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8017508:	2801      	cmp	r0, #1
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 801750a:	f04f 0000 	mov.w	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 801750e:	f105 0514 	add.w	r5, r5, #20
 8017512:	f200 8100 	bhi.w	8017716 <basic_init+0xdb2>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8017516:	f7fb faa1 	bl	8012a5c <lv_disp_get_dpi>
 801751a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801751e:	0080      	lsls	r0, r0, #2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8017520:	28ef      	cmp	r0, #239	; 0xef
 8017522:	f300 80ec 	bgt.w	80176fe <basic_init+0xd9a>
 8017526:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8017528:	2114      	movs	r1, #20
 801752a:	4628      	mov	r0, r5
 801752c:	f7f4 f854 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->pad_small);
 8017530:	6820      	ldr	r0, [r4, #0]
 8017532:	3018      	adds	r0, #24
 8017534:	f7f3 fff6 	bl	800b524 <lv_style_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 8017538:	2000      	movs	r0, #0
 801753a:	f7fb fa9b 	bl	8012a74 <lv_disp_get_size_category>
 801753e:	2801      	cmp	r0, #1
 8017540:	f04f 0000 	mov.w	r0, #0
 8017544:	f200 8100 	bhi.w	8017748 <basic_init+0xde4>
 8017548:	f7fb fa88 	bl	8012a5c <lv_disp_get_dpi>
 801754c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017550:	0040      	lsls	r0, r0, #1
 8017552:	28ef      	cmp	r0, #239	; 0xef
 8017554:	f300 80ec 	bgt.w	8017730 <basic_init+0xdcc>
 8017558:	2501      	movs	r5, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 801755a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801755c:	462a      	mov	r2, r5
 801755e:	2112      	movs	r1, #18
 8017560:	3018      	adds	r0, #24
 8017562:	f7f4 f839 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8017566:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017568:	462a      	mov	r2, r5
 801756a:	2113      	movs	r1, #19
 801756c:	3018      	adds	r0, #24
 801756e:	f7f4 f833 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8017572:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8017574:	462a      	mov	r2, r5
 8017576:	2110      	movs	r1, #16
 8017578:	3018      	adds	r0, #24
 801757a:	f7f4 f82d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 801757e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8017580:	462a      	mov	r2, r5
 8017582:	2111      	movs	r1, #17
 8017584:	3018      	adds	r0, #24
 8017586:	f7f4 f827 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 801758a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801758c:	462a      	mov	r2, r5
 801758e:	2114      	movs	r1, #20
 8017590:	3018      	adds	r0, #24
}
 8017592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017596:	f7f4 b81f 	b.w	800b5d8 <_lv_style_set_int>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 801759a:	2201      	movs	r2, #1
 801759c:	f7ff ba43 	b.w	8016a26 <basic_init+0xc2>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 80175a0:	2201      	movs	r2, #1
 80175a2:	f7ff ba8c 	b.w	8016abe <basic_init+0x15a>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 80175a6:	250f      	movs	r5, #15
 80175a8:	2000      	movs	r0, #0
 80175aa:	f7fb fa57 	bl	8012a5c <lv_disp_get_dpi>
 80175ae:	2250      	movs	r2, #80	; 0x50
 80175b0:	fb00 2505 	mla	r5, r0, r5, r2
 80175b4:	20a0      	movs	r0, #160	; 0xa0
 80175b6:	fb95 f5f0 	sdiv	r5, r5, r0
 80175ba:	b2ad      	uxth	r5, r5
 80175bc:	f7ff baea 	b.w	8016b94 <basic_init+0x230>
 80175c0:	f7fb fa4c 	bl	8012a5c <lv_disp_get_dpi>
 80175c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80175c8:	0040      	lsls	r0, r0, #1
 80175ca:	28ef      	cmp	r0, #239	; 0xef
 80175cc:	f77f aae1 	ble.w	8016b92 <basic_init+0x22e>
 80175d0:	2000      	movs	r0, #0
 80175d2:	251e      	movs	r5, #30
 80175d4:	f7fb fa42 	bl	8012a5c <lv_disp_get_dpi>
 80175d8:	e7e9      	b.n	80175ae <basic_init+0xc4a>
 80175da:	2201      	movs	r2, #1
 80175dc:	f7ff bae9 	b.w	8016bb2 <basic_init+0x24e>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 80175e0:	250f      	movs	r5, #15
 80175e2:	2000      	movs	r0, #0
 80175e4:	f7fb fa3a 	bl	8012a5c <lv_disp_get_dpi>
 80175e8:	2250      	movs	r2, #80	; 0x50
 80175ea:	fb00 2505 	mla	r5, r0, r5, r2
 80175ee:	20a0      	movs	r0, #160	; 0xa0
 80175f0:	fb95 f5f0 	sdiv	r5, r5, r0
 80175f4:	b2ad      	uxth	r5, r5
 80175f6:	f7ff baf5 	b.w	8016be4 <basic_init+0x280>
 80175fa:	f7fb fa2f 	bl	8012a5c <lv_disp_get_dpi>
 80175fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017602:	0040      	lsls	r0, r0, #1
 8017604:	28ef      	cmp	r0, #239	; 0xef
 8017606:	f77f aaec 	ble.w	8016be2 <basic_init+0x27e>
 801760a:	2000      	movs	r0, #0
 801760c:	251e      	movs	r5, #30
 801760e:	f7fb fa25 	bl	8012a5c <lv_disp_get_dpi>
 8017612:	e7e9      	b.n	80175e8 <basic_init+0xc84>
 8017614:	2201      	movs	r2, #1
 8017616:	f7ff baf4 	b.w	8016c02 <basic_init+0x29e>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801761a:	250f      	movs	r5, #15
 801761c:	2000      	movs	r0, #0
 801761e:	f7fb fa1d 	bl	8012a5c <lv_disp_get_dpi>
 8017622:	2250      	movs	r2, #80	; 0x50
 8017624:	fb00 2505 	mla	r5, r0, r5, r2
 8017628:	20a0      	movs	r0, #160	; 0xa0
 801762a:	fb95 f5f0 	sdiv	r5, r5, r0
 801762e:	b2ad      	uxth	r5, r5
 8017630:	f7ff bb00 	b.w	8016c34 <basic_init+0x2d0>
 8017634:	f7fb fa12 	bl	8012a5c <lv_disp_get_dpi>
 8017638:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801763c:	0040      	lsls	r0, r0, #1
 801763e:	28ef      	cmp	r0, #239	; 0xef
 8017640:	f77f aaf7 	ble.w	8016c32 <basic_init+0x2ce>
 8017644:	2000      	movs	r0, #0
 8017646:	251e      	movs	r5, #30
 8017648:	f7fb fa08 	bl	8012a5c <lv_disp_get_dpi>
 801764c:	e7e9      	b.n	8017622 <basic_init+0xcbe>
 801764e:	2201      	movs	r2, #1
 8017650:	f7ff baff 	b.w	8016c52 <basic_init+0x2ee>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8017654:	250f      	movs	r5, #15
 8017656:	2000      	movs	r0, #0
 8017658:	f7fb fa00 	bl	8012a5c <lv_disp_get_dpi>
 801765c:	2250      	movs	r2, #80	; 0x50
 801765e:	fb00 2505 	mla	r5, r0, r5, r2
 8017662:	20a0      	movs	r0, #160	; 0xa0
 8017664:	fb95 f5f0 	sdiv	r5, r5, r0
 8017668:	b2ad      	uxth	r5, r5
 801766a:	f7ff bb1c 	b.w	8016ca6 <basic_init+0x342>
 801766e:	f7fb f9f5 	bl	8012a5c <lv_disp_get_dpi>
 8017672:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017676:	0040      	lsls	r0, r0, #1
 8017678:	28ef      	cmp	r0, #239	; 0xef
 801767a:	f77f ab13 	ble.w	8016ca4 <basic_init+0x340>
 801767e:	2000      	movs	r0, #0
 8017680:	251e      	movs	r5, #30
 8017682:	f7fb f9eb 	bl	8012a5c <lv_disp_get_dpi>
 8017686:	e7e9      	b.n	801765c <basic_init+0xcf8>
 8017688:	2201      	movs	r2, #1
 801768a:	f7ff bb1b 	b.w	8016cc4 <basic_init+0x360>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 801768e:	2000      	movs	r0, #0
 8017690:	f7fb f9e4 	bl	8012a5c <lv_disp_get_dpi>
 8017694:	220f      	movs	r2, #15
 8017696:	2350      	movs	r3, #80	; 0x50
 8017698:	fb00 3202 	mla	r2, r0, r2, r3
 801769c:	20a0      	movs	r0, #160	; 0xa0
 801769e:	fb92 f2f0 	sdiv	r2, r2, r0
 80176a2:	b212      	sxth	r2, r2
 80176a4:	f7ff bb27 	b.w	8016cf6 <basic_init+0x392>
 80176a8:	f7fb f9d8 	bl	8012a5c <lv_disp_get_dpi>
 80176ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80176b0:	0040      	lsls	r0, r0, #1
 80176b2:	28ef      	cmp	r0, #239	; 0xef
 80176b4:	f77f ab1e 	ble.w	8016cf4 <basic_init+0x390>
 80176b8:	2000      	movs	r0, #0
 80176ba:	f7fb f9cf 	bl	8012a5c <lv_disp_get_dpi>
 80176be:	221e      	movs	r2, #30
 80176c0:	e7e9      	b.n	8017696 <basic_init+0xd32>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 80176c2:	4828      	ldr	r0, [pc, #160]	; (8017764 <basic_init+0xe00>)
 80176c4:	f7fe f94a 	bl	801595c <lv_color_hex>
 80176c8:	f7ff bbe2 	b.w	8016e90 <basic_init+0x52c>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 80176cc:	4826      	ldr	r0, [pc, #152]	; (8017768 <basic_init+0xe04>)
 80176ce:	f7fe f945 	bl	801595c <lv_color_hex>
 80176d2:	224c      	movs	r2, #76	; 0x4c
 80176d4:	e4db      	b.n	801708e <basic_init+0x72a>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 80176d6:	4825      	ldr	r0, [pc, #148]	; (801776c <basic_init+0xe08>)
 80176d8:	f7fe f940 	bl	801595c <lv_color_hex>
 80176dc:	e530      	b.n	8017140 <basic_init+0x7dc>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 80176de:	2201      	movs	r2, #1
 80176e0:	e546      	b.n	8017170 <basic_init+0x80c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 80176e2:	2201      	movs	r2, #1
 80176e4:	e63c      	b.n	8017360 <basic_init+0x9fc>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 80176e6:	2201      	movs	r2, #1
 80176e8:	e654      	b.n	8017394 <basic_init+0xa30>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 80176ea:	2201      	movs	r2, #1
 80176ec:	e66b      	b.n	80173c6 <basic_init+0xa62>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 80176ee:	2201      	movs	r2, #1
 80176f0:	e682      	b.n	80173f8 <basic_init+0xa94>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 80176f2:	2201      	movs	r2, #1
 80176f4:	e6a2      	b.n	801743c <basic_init+0xad8>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80176f6:	2200      	movs	r2, #0
 80176f8:	e6bb      	b.n	8017472 <basic_init+0xb0e>
 80176fa:	2201      	movs	r2, #1
 80176fc:	e6b9      	b.n	8017472 <basic_init+0xb0e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 80176fe:	2000      	movs	r0, #0
 8017700:	f7fb f9ac 	bl	8012a5c <lv_disp_get_dpi>
 8017704:	2214      	movs	r2, #20
 8017706:	2350      	movs	r3, #80	; 0x50
 8017708:	fb00 3202 	mla	r2, r0, r2, r3
 801770c:	20a0      	movs	r0, #160	; 0xa0
 801770e:	fb92 f2f0 	sdiv	r2, r2, r0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8017712:	b212      	sxth	r2, r2
 8017714:	e708      	b.n	8017528 <basic_init+0xbc4>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8017716:	f7fb f9a1 	bl	8012a5c <lv_disp_get_dpi>
 801771a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801771e:	00c0      	lsls	r0, r0, #3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8017720:	28ef      	cmp	r0, #239	; 0xef
 8017722:	f77f af00 	ble.w	8017526 <basic_init+0xbc2>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8017726:	2000      	movs	r0, #0
 8017728:	f7fb f998 	bl	8012a5c <lv_disp_get_dpi>
 801772c:	2228      	movs	r2, #40	; 0x28
 801772e:	e7ea      	b.n	8017706 <basic_init+0xda2>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 8017730:	250a      	movs	r5, #10
 8017732:	2000      	movs	r0, #0
 8017734:	f7fb f992 	bl	8012a5c <lv_disp_get_dpi>
 8017738:	2350      	movs	r3, #80	; 0x50
 801773a:	fb00 3505 	mla	r5, r0, r5, r3
 801773e:	20a0      	movs	r0, #160	; 0xa0
 8017740:	fb95 f5f0 	sdiv	r5, r5, r0
 8017744:	b22d      	sxth	r5, r5
 8017746:	e708      	b.n	801755a <basic_init+0xbf6>
 8017748:	f7fb f988 	bl	8012a5c <lv_disp_get_dpi>
 801774c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017750:	0080      	lsls	r0, r0, #2
 8017752:	28ef      	cmp	r0, #239	; 0xef
 8017754:	f77f af00 	ble.w	8017558 <basic_init+0xbf4>
 8017758:	2000      	movs	r0, #0
 801775a:	2514      	movs	r5, #20
 801775c:	f7fb f97e 	bl	8012a5c <lv_disp_get_dpi>
 8017760:	e7ea      	b.n	8017738 <basic_init+0xdd4>
 8017762:	bf00      	nop
 8017764:	005f656e 	.word	0x005f656e
 8017768:	00586273 	.word	0x00586273
 801776c:	00404040 	.word	0x00404040

08017770 <lv_theme_material_init>:
{
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(styles == NULL) {
 8017774:	4cd0      	ldr	r4, [pc, #832]	; (8017ab8 <lv_theme_material_init+0x348>)
{
 8017776:	461e      	mov	r6, r3
 8017778:	4680      	mov	r8, r0
 801777a:	460f      	mov	r7, r1
    if(styles == NULL) {
 801777c:	6823      	ldr	r3, [r4, #0]
{
 801777e:	4615      	mov	r5, r2
    if(styles == NULL) {
 8017780:	b963      	cbnz	r3, 801779c <lv_theme_material_init+0x2c>
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 8017782:	20c0      	movs	r0, #192	; 0xc0
 8017784:	f7fc f9e0 	bl	8013b48 <lv_mem_alloc>
 8017788:	6020      	str	r0, [r4, #0]
        if(styles == NULL) return NULL;
 801778a:	2800      	cmp	r0, #0
 801778c:	f001 8431 	beq.w	8018ff2 <lv_theme_material_init+0x1882>
        _lv_memset_00(styles, sizeof(theme_styles_t));
 8017790:	21c0      	movs	r1, #192	; 0xc0
 8017792:	f7fc fc6d 	bl	8014070 <_lv_memset_00>
        LV_GC_ROOT(_lv_theme_material_styles) = styles;
 8017796:	6822      	ldr	r2, [r4, #0]
 8017798:	4bc8      	ldr	r3, [pc, #800]	; (8017abc <lv_theme_material_init+0x34c>)
 801779a:	601a      	str	r2, [r3, #0]
    theme.font_normal = font_normal;
 801779c:	9b06      	ldr	r3, [sp, #24]
    theme.font_small = font_small;
 801779e:	6166      	str	r6, [r4, #20]
    theme.font_normal = font_normal;
 80177a0:	61a3      	str	r3, [r4, #24]
    theme.font_subtitle = font_subtitle;
 80177a2:	9b07      	ldr	r3, [sp, #28]
    theme.color_primary = color_primary;
 80177a4:	f8a4 8010 	strh.w	r8, [r4, #16]
    theme.font_subtitle = font_subtitle;
 80177a8:	61e3      	str	r3, [r4, #28]
    theme.font_title = font_title;
 80177aa:	9b08      	ldr	r3, [sp, #32]
    theme.color_secondary = color_secondary;
 80177ac:	8267      	strh	r7, [r4, #18]
    theme.flags = flags;
 80177ae:	e9c4 3508 	strd	r3, r5, [r4, #32]
    basic_init();
 80177b2:	f7ff f8d7 	bl	8016964 <basic_init>
    lv_style_reset(&styles->bar_bg);
 80177b6:	6820      	ldr	r0, [r4, #0]
 80177b8:	3028      	adds	r0, #40	; 0x28
 80177ba:	f7f3 feb3 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80177be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 80177c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80177c4:	2101      	movs	r1, #1
 80177c6:	3028      	adds	r0, #40	; 0x28
 80177c8:	f7f3 ff06 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 80177cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 80177ce:	22ff      	movs	r2, #255	; 0xff
 80177d0:	212c      	movs	r1, #44	; 0x2c
 80177d2:	3028      	adds	r0, #40	; 0x28
 80177d4:	f7f3 ff9c 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 80177d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177da:	6825      	ldr	r5, [r4, #0]
 80177dc:	079e      	lsls	r6, r3, #30
 80177de:	f105 0528 	add.w	r5, r5, #40	; 0x28
 80177e2:	bf4c      	ite	mi
 80177e4:	48b6      	ldrmi	r0, [pc, #728]	; (8017ac0 <lv_theme_material_init+0x350>)
 80177e6:	48b7      	ldrpl	r0, [pc, #732]	; (8017ac4 <lv_theme_material_init+0x354>)
 80177e8:	f7fe f8b8 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80177ec:	2129      	movs	r1, #41	; 0x29
 80177ee:	4602      	mov	r2, r0
 80177f0:	4628      	mov	r0, r5
 80177f2:	f7f3 ff3f 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 80177f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	f013 0f02 	tst.w	r3, #2
 80177fe:	4db2      	ldr	r5, [pc, #712]	; (8017ac8 <lv_theme_material_init+0x358>)
 8017800:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8017804:	f001 83f7 	beq.w	8018ff6 <lv_theme_material_init+0x1886>
 8017808:	48b0      	ldr	r0, [pc, #704]	; (8017acc <lv_theme_material_init+0x35c>)
 801780a:	f7fe f8a7 	bl	801595c <lv_color_hex>
 801780e:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 8017810:	4630      	mov	r0, r6
 8017812:	2179      	movs	r1, #121	; 0x79
 8017814:	f7f3 ff2e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 8017818:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 801781a:	8a22      	ldrh	r2, [r4, #16]
 801781c:	2149      	movs	r1, #73	; 0x49
 801781e:	3028      	adds	r0, #40	; 0x28
 8017820:	f7f3 ff28 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 8017824:	6820      	ldr	r0, [r4, #0]
 8017826:	8a62      	ldrh	r2, [r4, #18]
 8017828:	f240 4149 	movw	r1, #1097	; 0x449
 801782c:	3028      	adds	r0, #40	; 0x28
 801782e:	f7f3 ff21 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8017832:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 8017834:	2200      	movs	r2, #0
 8017836:	214c      	movs	r1, #76	; 0x4c
 8017838:	3028      	adds	r0, #40	; 0x28
 801783a:	f7f3 ff69 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 801783e:	6820      	ldr	r0, [r4, #0]
 8017840:	227f      	movs	r2, #127	; 0x7f
 8017842:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8017846:	3028      	adds	r0, #40	; 0x28
 8017848:	f7f3 ff62 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 801784c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801784e:	6827      	ldr	r7, [r4, #0]
 8017850:	f010 0620 	ands.w	r6, r0, #32
 8017854:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8017858:	f041 83d0 	bne.w	8018ffc <lv_theme_material_init+0x188c>
 801785c:	4630      	mov	r0, r6
 801785e:	f7fb f8fd 	bl	8012a5c <lv_disp_get_dpi>
 8017862:	2877      	cmp	r0, #119	; 0x77
 8017864:	f341 83cd 	ble.w	8019002 <lv_theme_material_init+0x1892>
 8017868:	4630      	mov	r0, r6
 801786a:	f7fb f8f7 	bl	8012a5c <lv_disp_get_dpi>
 801786e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8017872:	2050      	movs	r0, #80	; 0x50
 8017874:	fb92 f2f0 	sdiv	r2, r2, r0
 8017878:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 801787a:	2140      	movs	r1, #64	; 0x40
 801787c:	4638      	mov	r0, r7
 801787e:	f7f3 feab 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8017882:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 8017884:	2200      	movs	r2, #0
 8017886:	21b0      	movs	r1, #176	; 0xb0
 8017888:	3028      	adds	r0, #40	; 0x28
 801788a:	f7f3 fea5 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 801788e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 8017890:	224c      	movs	r2, #76	; 0x4c
 8017892:	21b7      	movs	r1, #183	; 0xb7
 8017894:	3028      	adds	r0, #40	; 0x28
 8017896:	f7f3 fe9f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->bar_indic);
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	302c      	adds	r0, #44	; 0x2c
 801789e:	f7f3 fe41 	bl	800b524 <lv_style_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 80178a2:	212c      	movs	r1, #44	; 0x2c
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 80178a4:	6820      	ldr	r0, [r4, #0]
 80178a6:	22ff      	movs	r2, #255	; 0xff
 80178a8:	4408      	add	r0, r1
 80178aa:	f7f3 ff31 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80178ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 80178b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178b4:	2101      	movs	r1, #1
 80178b6:	302c      	adds	r0, #44	; 0x2c
 80178b8:	f7f3 fe8e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 80178bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80178be:	8a22      	ldrh	r2, [r4, #16]
 80178c0:	2129      	movs	r1, #41	; 0x29
 80178c2:	302c      	adds	r0, #44	; 0x2c
 80178c4:	f7f3 fed6 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 80178c8:	6820      	ldr	r0, [r4, #0]
 80178ca:	f100 062c 	add.w	r6, r0, #44	; 0x2c
 80178ce:	f640 0088 	movw	r0, #2184	; 0x888
 80178d2:	f7fd fd35 	bl	8015340 <lv_color_hex3>
 80178d6:	f242 0129 	movw	r1, #8233	; 0x2029
 80178da:	4602      	mov	r2, r0
 80178dc:	4630      	mov	r0, r6
 80178de:	f7f3 fec9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 80178e2:	6820      	ldr	r0, [r4, #0]
 80178e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178e6:	f100 062c 	add.w	r6, r0, #44	; 0x2c
 80178ea:	0798      	lsls	r0, r3, #30
 80178ec:	f141 838c 	bpl.w	8019008 <lv_theme_material_init+0x1898>
 80178f0:	4877      	ldr	r0, [pc, #476]	; (8017ad0 <lv_theme_material_init+0x360>)
 80178f2:	f7fe f833 	bl	801595c <lv_color_hex>
 80178f6:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 80178f8:	2179      	movs	r1, #121	; 0x79
 80178fa:	4630      	mov	r0, r6
 80178fc:	f7f3 feba 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->led);
 8017900:	6820      	ldr	r0, [r4, #0]
 8017902:	3070      	adds	r0, #112	; 0x70
 8017904:	f7f3 fe0e 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
 8017908:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 801790a:	22ff      	movs	r2, #255	; 0xff
 801790c:	212c      	movs	r1, #44	; 0x2c
 801790e:	3070      	adds	r0, #112	; 0x70
 8017910:	f7f3 fefe 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8017914:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8017916:	8a22      	ldrh	r2, [r4, #16]
 8017918:	2129      	movs	r1, #41	; 0x29
 801791a:	3070      	adds	r0, #112	; 0x70
 801791c:	f7f3 feaa 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
 8017920:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8017922:	2202      	movs	r2, #2
 8017924:	2130      	movs	r1, #48	; 0x30
 8017926:	3070      	adds	r0, #112	; 0x70
 8017928:	f7f3 fe56 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
 801792c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa)
 801792e:	227f      	movs	r2, #127	; 0x7f
 8017930:	213c      	movs	r1, #60	; 0x3c
 8017932:	3070      	adds	r0, #112	; 0x70
 8017934:	f7f3 feec 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
 8017938:	6820      	ldr	r0, [r4, #0]
 801793a:	214c      	movs	r1, #76	; 0x4c
 801793c:	f100 0670 	add.w	r6, r0, #112	; 0x70
 8017940:	8a20      	ldrh	r0, [r4, #16]
 8017942:	f7fb fe4b 	bl	80135dc <lv_color_lighten>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8017946:	2139      	movs	r1, #57	; 0x39
 8017948:	4602      	mov	r2, r0
 801794a:	4630      	mov	r0, r6
 801794c:	f7f3 fe92 	bl	800b674 <_lv_style_set_color>
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017950:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8017952:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017956:	2101      	movs	r1, #1
 8017958:	3070      	adds	r0, #112	; 0x70
 801795a:	f7f3 fe3d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 801795e:	2000      	movs	r0, #0
 8017960:	6826      	ldr	r6, [r4, #0]
 8017962:	f7fb f87b 	bl	8012a5c <lv_disp_get_dpi>
 8017966:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801796a:	3670      	adds	r6, #112	; 0x70
 801796c:	28ef      	cmp	r0, #239	; 0xef
 801796e:	f341 834e 	ble.w	801900e <lv_theme_material_init+0x189e>
 8017972:	2000      	movs	r0, #0
 8017974:	f7fb f872 	bl	8012a5c <lv_disp_get_dpi>
 8017978:	220f      	movs	r2, #15
 801797a:	2350      	movs	r3, #80	; 0x50
 801797c:	fb00 3202 	mla	r2, r0, r2, r3
 8017980:	20a0      	movs	r0, #160	; 0xa0
 8017982:	fb92 f2f0 	sdiv	r2, r2, r0
 8017986:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 8017988:	4630      	mov	r0, r6
 801798a:	2150      	movs	r1, #80	; 0x50
 801798c:	f7f3 fe24 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8017990:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color)
 8017992:	8a22      	ldrh	r2, [r4, #16]
 8017994:	2159      	movs	r1, #89	; 0x59
 8017996:	3070      	adds	r0, #112	; 0x70
 8017998:	f7f3 fe6c 	bl	800b674 <_lv_style_set_color>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 801799c:	2000      	movs	r0, #0
 801799e:	6826      	ldr	r6, [r4, #0]
 80179a0:	f7fb f85c 	bl	8012a5c <lv_disp_get_dpi>
 80179a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80179a8:	3670      	adds	r6, #112	; 0x70
 80179aa:	28ef      	cmp	r0, #239	; 0xef
 80179ac:	f341 8332 	ble.w	8019014 <lv_theme_material_init+0x18a4>
 80179b0:	2000      	movs	r0, #0
 80179b2:	f7fb f853 	bl	8012a5c <lv_disp_get_dpi>
 80179b6:	2205      	movs	r2, #5
 80179b8:	2350      	movs	r3, #80	; 0x50
 80179ba:	fb00 3202 	mla	r2, r0, r2, r3
 80179be:	20a0      	movs	r0, #160	; 0xa0
 80179c0:	fb92 f2f0 	sdiv	r2, r2, r0
 80179c4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int)
 80179c6:	2153      	movs	r1, #83	; 0x53
 80179c8:	4630      	mov	r0, r6
 80179ca:	f7f3 fe05 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->slider_knob);
 80179ce:	6820      	ldr	r0, [r4, #0]
 80179d0:	3094      	adds	r0, #148	; 0x94
 80179d2:	f7f3 fda7 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 80179d6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 80179d8:	22ff      	movs	r2, #255	; 0xff
 80179da:	212c      	movs	r1, #44	; 0x2c
 80179dc:	3094      	adds	r0, #148	; 0x94
 80179de:	f7f3 fe97 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 80179e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80179e4:	6820      	ldr	r0, [r4, #0]
 80179e6:	0799      	lsls	r1, r3, #30
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80179e8:	f04f 0129 	mov.w	r1, #41	; 0x29
 80179ec:	f100 0094 	add.w	r0, r0, #148	; 0x94
 80179f0:	bf4c      	ite	mi
 80179f2:	8a22      	ldrhmi	r2, [r4, #16]
 80179f4:	882a      	ldrhpl	r2, [r5, #0]
 80179f6:	f7f3 fe3d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 80179fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80179fc:	6820      	ldr	r0, [r4, #0]
 80179fe:	079a      	lsls	r2, r3, #30
 8017a00:	f100 0694 	add.w	r6, r0, #148	; 0x94
 8017a04:	f141 8309 	bpl.w	801901a <lv_theme_material_init+0x18aa>
 8017a08:	4830      	ldr	r0, [pc, #192]	; (8017acc <lv_theme_material_init+0x35c>)
 8017a0a:	f7fd ffa7 	bl	801595c <lv_color_hex>
 8017a0e:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color)
 8017a10:	4630      	mov	r0, r6
 8017a12:	2179      	movs	r1, #121	; 0x79
 8017a14:	f7f3 fe2e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017a18:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8017a1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017a1e:	2101      	movs	r1, #1
 8017a20:	3094      	adds	r0, #148	; 0x94
 8017a22:	f7f3 fdd9 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8017a26:	2000      	movs	r0, #0
 8017a28:	6826      	ldr	r6, [r4, #0]
 8017a2a:	f7fb f817 	bl	8012a5c <lv_disp_get_dpi>
 8017a2e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8017a32:	3694      	adds	r6, #148	; 0x94
 8017a34:	28ef      	cmp	r0, #239	; 0xef
 8017a36:	f341 82f3 	ble.w	8019020 <lv_theme_material_init+0x18b0>
 8017a3a:	2000      	movs	r0, #0
 8017a3c:	f7fb f80e 	bl	8012a5c <lv_disp_get_dpi>
 8017a40:	2207      	movs	r2, #7
 8017a42:	2350      	movs	r3, #80	; 0x50
 8017a44:	fb00 3202 	mla	r2, r0, r2, r3
 8017a48:	20a0      	movs	r0, #160	; 0xa0
 8017a4a:	fb92 f2f0 	sdiv	r2, r2, r0
 8017a4e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8017a50:	4630      	mov	r0, r6
 8017a52:	2112      	movs	r1, #18
 8017a54:	f7f3 fdc0 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8017a58:	2000      	movs	r0, #0
 8017a5a:	6826      	ldr	r6, [r4, #0]
 8017a5c:	f7fa fffe 	bl	8012a5c <lv_disp_get_dpi>
 8017a60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8017a64:	3694      	adds	r6, #148	; 0x94
 8017a66:	28ef      	cmp	r0, #239	; 0xef
 8017a68:	f341 82dd 	ble.w	8019026 <lv_theme_material_init+0x18b6>
 8017a6c:	2000      	movs	r0, #0
 8017a6e:	f7fa fff5 	bl	8012a5c <lv_disp_get_dpi>
 8017a72:	2207      	movs	r2, #7
 8017a74:	2350      	movs	r3, #80	; 0x50
 8017a76:	fb00 3202 	mla	r2, r0, r2, r3
 8017a7a:	20a0      	movs	r0, #160	; 0xa0
 8017a7c:	fb92 f2f0 	sdiv	r2, r2, r0
 8017a80:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017a82:	4630      	mov	r0, r6
 8017a84:	2113      	movs	r1, #19
 8017a86:	f7f3 fda7 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	6826      	ldr	r6, [r4, #0]
 8017a8e:	f7fa ffe5 	bl	8012a5c <lv_disp_get_dpi>
 8017a92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8017a96:	3694      	adds	r6, #148	; 0x94
 8017a98:	28ef      	cmp	r0, #239	; 0xef
 8017a9a:	f341 82c7 	ble.w	801902c <lv_theme_material_init+0x18bc>
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	f7fa ffdc 	bl	8012a5c <lv_disp_get_dpi>
 8017aa4:	2207      	movs	r2, #7
 8017aa6:	2350      	movs	r3, #80	; 0x50
 8017aa8:	fb00 3202 	mla	r2, r0, r2, r3
 8017aac:	20a0      	movs	r0, #160	; 0xa0
 8017aae:	fb92 f2f0 	sdiv	r2, r2, r0
 8017ab2:	b212      	sxth	r2, r2
 8017ab4:	e00e      	b.n	8017ad4 <lv_theme_material_init+0x364>
 8017ab6:	bf00      	nop
 8017ab8:	200288d8 	.word	0x200288d8
 8017abc:	20028cac 	.word	0x20028cac
 8017ac0:	00d4d7d9 	.word	0x00d4d7d9
 8017ac4:	0045494d 	.word	0x0045494d
 8017ac8:	080229e8 	.word	0x080229e8
 8017acc:	0031404f 	.word	0x0031404f
 8017ad0:	0041404f 	.word	0x0041404f
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	2110      	movs	r1, #16
 8017ad8:	f7f3 fd7e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8017adc:	2000      	movs	r0, #0
 8017ade:	6826      	ldr	r6, [r4, #0]
 8017ae0:	f7fa ffbc 	bl	8012a5c <lv_disp_get_dpi>
 8017ae4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8017ae8:	3694      	adds	r6, #148	; 0x94
 8017aea:	28ef      	cmp	r0, #239	; 0xef
 8017aec:	f341 82a1 	ble.w	8019032 <lv_theme_material_init+0x18c2>
 8017af0:	2000      	movs	r0, #0
 8017af2:	f7fa ffb3 	bl	8012a5c <lv_disp_get_dpi>
 8017af6:	2207      	movs	r2, #7
 8017af8:	2350      	movs	r3, #80	; 0x50
 8017afa:	fb00 3202 	mla	r2, r0, r2, r3
 8017afe:	20a0      	movs	r0, #160	; 0xa0
 8017b00:	fb92 f2f0 	sdiv	r2, r2, r0
 8017b04:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8017b06:	2111      	movs	r1, #17
 8017b08:	4630      	mov	r0, r6
 8017b0a:	f7f3 fd65 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->slider_bg);
 8017b0e:	6820      	ldr	r0, [r4, #0]
 8017b10:	3098      	adds	r0, #152	; 0x98
 8017b12:	f7f3 fd07 	bl	800b524 <lv_style_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8017b16:	2000      	movs	r0, #0
 8017b18:	6826      	ldr	r6, [r4, #0]
 8017b1a:	f7fa ff9f 	bl	8012a5c <lv_disp_get_dpi>
 8017b1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017b22:	3698      	adds	r6, #152	; 0x98
 8017b24:	0040      	lsls	r0, r0, #1
 8017b26:	28ef      	cmp	r0, #239	; 0xef
 8017b28:	f341 8286 	ble.w	8019038 <lv_theme_material_init+0x18c8>
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	f7fa ff95 	bl	8012a5c <lv_disp_get_dpi>
 8017b32:	220a      	movs	r2, #10
 8017b34:	2350      	movs	r3, #80	; 0x50
 8017b36:	fb00 3202 	mla	r2, r0, r2, r3
 8017b3a:	20a0      	movs	r0, #160	; 0xa0
 8017b3c:	fb92 f2f0 	sdiv	r2, r2, r0
 8017b40:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 8017b42:	4630      	mov	r0, r6
 8017b44:	2117      	movs	r1, #23
 8017b46:	f7f3 fd47 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8017b4a:	2000      	movs	r0, #0
 8017b4c:	6826      	ldr	r6, [r4, #0]
 8017b4e:	f7fa ff85 	bl	8012a5c <lv_disp_get_dpi>
 8017b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017b56:	3698      	adds	r6, #152	; 0x98
 8017b58:	0040      	lsls	r0, r0, #1
 8017b5a:	28ef      	cmp	r0, #239	; 0xef
 8017b5c:	f341 826f 	ble.w	801903e <lv_theme_material_init+0x18ce>
 8017b60:	2000      	movs	r0, #0
 8017b62:	f7fa ff7b 	bl	8012a5c <lv_disp_get_dpi>
 8017b66:	220a      	movs	r2, #10
 8017b68:	2350      	movs	r3, #80	; 0x50
 8017b6a:	fb00 3202 	mla	r2, r0, r2, r3
 8017b6e:	20a0      	movs	r0, #160	; 0xa0
 8017b70:	fb92 f2f0 	sdiv	r2, r2, r0
 8017b74:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 8017b76:	4630      	mov	r0, r6
 8017b78:	2118      	movs	r1, #24
 8017b7a:	f7f3 fd2d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8017b7e:	2000      	movs	r0, #0
 8017b80:	6826      	ldr	r6, [r4, #0]
 8017b82:	f7fa ff6b 	bl	8012a5c <lv_disp_get_dpi>
 8017b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017b8a:	3698      	adds	r6, #152	; 0x98
 8017b8c:	0040      	lsls	r0, r0, #1
 8017b8e:	28ef      	cmp	r0, #239	; 0xef
 8017b90:	f341 8258 	ble.w	8019044 <lv_theme_material_init+0x18d4>
 8017b94:	2000      	movs	r0, #0
 8017b96:	f7fa ff61 	bl	8012a5c <lv_disp_get_dpi>
 8017b9a:	220a      	movs	r2, #10
 8017b9c:	2350      	movs	r3, #80	; 0x50
 8017b9e:	fb00 3202 	mla	r2, r0, r2, r3
 8017ba2:	20a0      	movs	r0, #160	; 0xa0
 8017ba4:	fb92 f2f0 	sdiv	r2, r2, r0
 8017ba8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 8017baa:	4630      	mov	r0, r6
 8017bac:	2115      	movs	r1, #21
 8017bae:	f7f3 fd13 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	6826      	ldr	r6, [r4, #0]
 8017bb6:	f7fa ff51 	bl	8012a5c <lv_disp_get_dpi>
 8017bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017bbe:	3698      	adds	r6, #152	; 0x98
 8017bc0:	0040      	lsls	r0, r0, #1
 8017bc2:	28ef      	cmp	r0, #239	; 0xef
 8017bc4:	f341 8241 	ble.w	801904a <lv_theme_material_init+0x18da>
 8017bc8:	2000      	movs	r0, #0
 8017bca:	f7fa ff47 	bl	8012a5c <lv_disp_get_dpi>
 8017bce:	220a      	movs	r2, #10
 8017bd0:	2350      	movs	r3, #80	; 0x50
 8017bd2:	fb00 3202 	mla	r2, r0, r2, r3
 8017bd6:	20a0      	movs	r0, #160	; 0xa0
 8017bd8:	fb92 f2f0 	sdiv	r2, r2, r0
 8017bdc:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 8017bde:	2116      	movs	r1, #22
 8017be0:	4630      	mov	r0, r6
 8017be2:	f7f3 fcf9 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->sw_knob);
 8017be6:	6820      	ldr	r0, [r4, #0]
 8017be8:	30a0      	adds	r0, #160	; 0xa0
 8017bea:	f7f3 fc9b 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8017bee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8017bf0:	22ff      	movs	r2, #255	; 0xff
 8017bf2:	212c      	movs	r1, #44	; 0x2c
 8017bf4:	30a0      	adds	r0, #160	; 0xa0
 8017bf6:	f7f3 fd8b 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8017bfa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8017bfc:	882a      	ldrh	r2, [r5, #0]
 8017bfe:	2129      	movs	r1, #41	; 0x29
 8017c00:	30a0      	adds	r0, #160	; 0xa0
 8017c02:	f7f3 fd37 	bl	800b674 <_lv_style_set_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017c06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8017c08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017c0c:	2101      	movs	r1, #1
 8017c0e:	30a0      	adds	r0, #160	; 0xa0
 8017c10:	f7f3 fce2 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 8017c14:	2000      	movs	r0, #0
 8017c16:	6825      	ldr	r5, [r4, #0]
 8017c18:	f7fa ff20 	bl	8012a5c <lv_disp_get_dpi>
 8017c1c:	283b      	cmp	r0, #59	; 0x3b
 8017c1e:	f105 05a0 	add.w	r5, r5, #160	; 0xa0
 8017c22:	f341 8215 	ble.w	8019050 <lv_theme_material_init+0x18e0>
 8017c26:	2000      	movs	r0, #0
 8017c28:	f7fa ff18 	bl	8012a5c <lv_disp_get_dpi>
 8017c2c:	f100 0214 	add.w	r2, r0, #20
 8017c30:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8017c34:	fb92 f2f0 	sdiv	r2, r2, r0
 8017c38:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	2110      	movs	r1, #16
 8017c3e:	f7f3 fccb 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 8017c42:	2000      	movs	r0, #0
 8017c44:	6825      	ldr	r5, [r4, #0]
 8017c46:	f7fa ff09 	bl	8012a5c <lv_disp_get_dpi>
 8017c4a:	283b      	cmp	r0, #59	; 0x3b
 8017c4c:	f105 05a0 	add.w	r5, r5, #160	; 0xa0
 8017c50:	f341 8202 	ble.w	8019058 <lv_theme_material_init+0x18e8>
 8017c54:	2000      	movs	r0, #0
 8017c56:	f7fa ff01 	bl	8012a5c <lv_disp_get_dpi>
 8017c5a:	f100 0214 	add.w	r2, r0, #20
 8017c5e:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8017c62:	fb92 f2f0 	sdiv	r2, r2, r0
 8017c66:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8017c68:	4628      	mov	r0, r5
 8017c6a:	2111      	movs	r1, #17
 8017c6c:	f7f3 fcb4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 8017c70:	2000      	movs	r0, #0
 8017c72:	6825      	ldr	r5, [r4, #0]
 8017c74:	f7fa fef2 	bl	8012a5c <lv_disp_get_dpi>
 8017c78:	283b      	cmp	r0, #59	; 0x3b
 8017c7a:	f105 05a0 	add.w	r5, r5, #160	; 0xa0
 8017c7e:	f341 81ef 	ble.w	8019060 <lv_theme_material_init+0x18f0>
 8017c82:	2000      	movs	r0, #0
 8017c84:	f7fa feea 	bl	8012a5c <lv_disp_get_dpi>
 8017c88:	f100 0214 	add.w	r2, r0, #20
 8017c8c:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8017c90:	fb92 f2f0 	sdiv	r2, r2, r0
 8017c94:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8017c96:	4628      	mov	r0, r5
 8017c98:	2112      	movs	r1, #18
 8017c9a:	f7f3 fc9d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 8017c9e:	2000      	movs	r0, #0
 8017ca0:	6825      	ldr	r5, [r4, #0]
 8017ca2:	f7fa fedb 	bl	8012a5c <lv_disp_get_dpi>
 8017ca6:	283b      	cmp	r0, #59	; 0x3b
 8017ca8:	f105 05a0 	add.w	r5, r5, #160	; 0xa0
 8017cac:	f341 81dc 	ble.w	8019068 <lv_theme_material_init+0x18f8>
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	f7fa fed3 	bl	8012a5c <lv_disp_get_dpi>
 8017cb6:	f100 0214 	add.w	r2, r0, #20
 8017cba:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8017cbe:	fb92 f2f0 	sdiv	r2, r2, r0
 8017cc2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017cc4:	2113      	movs	r1, #19
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	f7f3 fc86 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->lmeter);
 8017ccc:	6820      	ldr	r0, [r4, #0]
 8017cce:	3074      	adds	r0, #116	; 0x74
 8017cd0:	f7f3 fc28 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017cd4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8017cd6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017cda:	2101      	movs	r1, #1
 8017cdc:	3074      	adds	r0, #116	; 0x74
 8017cde:	f7f3 fc7b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8017ce2:	2000      	movs	r0, #0
 8017ce4:	6825      	ldr	r5, [r4, #0]
 8017ce6:	f7fa feb9 	bl	8012a5c <lv_disp_get_dpi>
 8017cea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017cee:	3574      	adds	r5, #116	; 0x74
 8017cf0:	0080      	lsls	r0, r0, #2
 8017cf2:	28ef      	cmp	r0, #239	; 0xef
 8017cf4:	f341 81bc 	ble.w	8019070 <lv_theme_material_init+0x1900>
 8017cf8:	2000      	movs	r0, #0
 8017cfa:	f7fa feaf 	bl	8012a5c <lv_disp_get_dpi>
 8017cfe:	2214      	movs	r2, #20
 8017d00:	2350      	movs	r3, #80	; 0x50
 8017d02:	fb00 3202 	mla	r2, r0, r2, r3
 8017d06:	20a0      	movs	r0, #160	; 0xa0
 8017d08:	fb92 f2f0 	sdiv	r2, r2, r0
 8017d0c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8017d0e:	4628      	mov	r0, r5
 8017d10:	2112      	movs	r1, #18
 8017d12:	f7f3 fc61 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8017d16:	2000      	movs	r0, #0
 8017d18:	6825      	ldr	r5, [r4, #0]
 8017d1a:	f7fa fe9f 	bl	8012a5c <lv_disp_get_dpi>
 8017d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017d22:	3574      	adds	r5, #116	; 0x74
 8017d24:	0080      	lsls	r0, r0, #2
 8017d26:	28ef      	cmp	r0, #239	; 0xef
 8017d28:	f341 81a5 	ble.w	8019076 <lv_theme_material_init+0x1906>
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	f7fa fe95 	bl	8012a5c <lv_disp_get_dpi>
 8017d32:	2214      	movs	r2, #20
 8017d34:	2350      	movs	r3, #80	; 0x50
 8017d36:	fb00 3202 	mla	r2, r0, r2, r3
 8017d3a:	20a0      	movs	r0, #160	; 0xa0
 8017d3c:	fb92 f2f0 	sdiv	r2, r2, r0
 8017d40:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017d42:	4628      	mov	r0, r5
 8017d44:	2113      	movs	r1, #19
 8017d46:	f7f3 fc47 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	6825      	ldr	r5, [r4, #0]
 8017d4e:	f7fa fe85 	bl	8012a5c <lv_disp_get_dpi>
 8017d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017d56:	3574      	adds	r5, #116	; 0x74
 8017d58:	0080      	lsls	r0, r0, #2
 8017d5a:	28ef      	cmp	r0, #239	; 0xef
 8017d5c:	f341 818e 	ble.w	801907c <lv_theme_material_init+0x190c>
 8017d60:	2000      	movs	r0, #0
 8017d62:	f7fa fe7b 	bl	8012a5c <lv_disp_get_dpi>
 8017d66:	2214      	movs	r2, #20
 8017d68:	2350      	movs	r3, #80	; 0x50
 8017d6a:	fb00 3202 	mla	r2, r0, r2, r3
 8017d6e:	20a0      	movs	r0, #160	; 0xa0
 8017d70:	fb92 f2f0 	sdiv	r2, r2, r0
 8017d74:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8017d76:	4628      	mov	r0, r5
 8017d78:	2110      	movs	r1, #16
 8017d7a:	f7f3 fc2d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 8017d7e:	2000      	movs	r0, #0
 8017d80:	6825      	ldr	r5, [r4, #0]
 8017d82:	f7fa fe6b 	bl	8012a5c <lv_disp_get_dpi>
 8017d86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017d8a:	3574      	adds	r5, #116	; 0x74
 8017d8c:	0040      	lsls	r0, r0, #1
 8017d8e:	28ef      	cmp	r0, #239	; 0xef
 8017d90:	f341 8177 	ble.w	8019082 <lv_theme_material_init+0x1912>
 8017d94:	2000      	movs	r0, #0
 8017d96:	f7fa fe61 	bl	8012a5c <lv_disp_get_dpi>
 8017d9a:	221e      	movs	r2, #30
 8017d9c:	2350      	movs	r3, #80	; 0x50
 8017d9e:	fb00 3202 	mla	r2, r0, r2, r3
 8017da2:	20a0      	movs	r0, #160	; 0xa0
 8017da4:	fb92 f2f0 	sdiv	r2, r2, r0
 8017da8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8017daa:	4628      	mov	r0, r5
 8017dac:	2114      	movs	r1, #20
 8017dae:	f7f3 fc13 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 8017db2:	2000      	movs	r0, #0
 8017db4:	6825      	ldr	r5, [r4, #0]
 8017db6:	f7fa fe51 	bl	8012a5c <lv_disp_get_dpi>
 8017dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017dbe:	3574      	adds	r5, #116	; 0x74
 8017dc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017dc4:	28ef      	cmp	r0, #239	; 0xef
 8017dc6:	f341 815f 	ble.w	8019088 <lv_theme_material_init+0x1918>
 8017dca:	2000      	movs	r0, #0
 8017dcc:	f7fa fe46 	bl	8012a5c <lv_disp_get_dpi>
 8017dd0:	2219      	movs	r2, #25
 8017dd2:	2350      	movs	r3, #80	; 0x50
 8017dd4:	fb00 3202 	mla	r2, r0, r2, r3
 8017dd8:	20a0      	movs	r0, #160	; 0xa0
 8017dda:	fb92 f2f0 	sdiv	r2, r2, r0
 8017dde:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const lv_anim_path_t *, _ptr)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 8017de0:	4628      	mov	r0, r5
 8017de2:	21c0      	movs	r1, #192	; 0xc0
 8017de4:	f7f3 fbf8 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 8017de8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8017dea:	8a22      	ldrh	r2, [r4, #16]
 8017dec:	2199      	movs	r1, #153	; 0x99
 8017dee:	3074      	adds	r0, #116	; 0x74
 8017df0:	f7f3 fc40 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 8017df4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 8017df6:	8a22      	ldrh	r2, [r4, #16]
 8017df8:	21c9      	movs	r1, #201	; 0xc9
 8017dfa:	3074      	adds	r0, #116	; 0x74
 8017dfc:	f7f3 fc3a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8017e00:	6820      	ldr	r0, [r4, #0]
 8017e02:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8017e06:	f640 0088 	movw	r0, #2184	; 0x888
 8017e0a:	f7fd fa99 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 8017e0e:	21ca      	movs	r1, #202	; 0xca
 8017e10:	4602      	mov	r2, r0
 8017e12:	4628      	mov	r0, r5
 8017e14:	f7f3 fc2e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 8017e18:	2000      	movs	r0, #0
 8017e1a:	6825      	ldr	r5, [r4, #0]
 8017e1c:	f7fa fe1e 	bl	8012a5c <lv_disp_get_dpi>
 8017e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017e24:	3574      	adds	r5, #116	; 0x74
 8017e26:	0040      	lsls	r0, r0, #1
 8017e28:	28ef      	cmp	r0, #239	; 0xef
 8017e2a:	f341 8130 	ble.w	801908e <lv_theme_material_init+0x191e>
 8017e2e:	2000      	movs	r0, #0
 8017e30:	f7fa fe14 	bl	8012a5c <lv_disp_get_dpi>
 8017e34:	220a      	movs	r2, #10
 8017e36:	2350      	movs	r3, #80	; 0x50
 8017e38:	fb00 3202 	mla	r2, r0, r2, r3
 8017e3c:	20a0      	movs	r0, #160	; 0xa0
 8017e3e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017e42:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8017e44:	4628      	mov	r0, r5
 8017e46:	2190      	movs	r1, #144	; 0x90
 8017e48:	f7f3 fbc6 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 8017e4c:	2000      	movs	r0, #0
 8017e4e:	6825      	ldr	r5, [r4, #0]
 8017e50:	f7fa fe04 	bl	8012a5c <lv_disp_get_dpi>
 8017e54:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8017e58:	3574      	adds	r5, #116	; 0x74
 8017e5a:	28ef      	cmp	r0, #239	; 0xef
 8017e5c:	f341 811a 	ble.w	8019094 <lv_theme_material_init+0x1924>
 8017e60:	2000      	movs	r0, #0
 8017e62:	f7fa fdfb 	bl	8012a5c <lv_disp_get_dpi>
 8017e66:	2207      	movs	r2, #7
 8017e68:	2350      	movs	r3, #80	; 0x50
 8017e6a:	fb00 3202 	mla	r2, r0, r2, r3
 8017e6e:	20a0      	movs	r0, #160	; 0xa0
 8017e70:	fb92 f2f0 	sdiv	r2, r2, r0
 8017e74:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 8017e76:	21c3      	movs	r1, #195	; 0xc3
 8017e78:	4628      	mov	r0, r5
 8017e7a:	f7f3 fbad 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->gauge_main);
 8017e7e:	6820      	ldr	r0, [r4, #0]
 8017e80:	3060      	adds	r0, #96	; 0x60
 8017e82:	f7f3 fb4f 	bl	800b524 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8017e86:	6820      	ldr	r0, [r4, #0]
 8017e88:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8017e8c:	f640 0088 	movw	r0, #2184	; 0x888
 8017e90:	f7fd fa56 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8017e94:	2199      	movs	r1, #153	; 0x99
 8017e96:	4602      	mov	r2, r0
 8017e98:	4628      	mov	r0, r5
 8017e9a:	f7f3 fbeb 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8017e9e:	6820      	ldr	r0, [r4, #0]
 8017ea0:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8017ea4:	f640 0088 	movw	r0, #2184	; 0x888
 8017ea8:	f7fd fa4a 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 8017eac:	21c9      	movs	r1, #201	; 0xc9
 8017eae:	4602      	mov	r2, r0
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	f7f3 fbdf 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
 8017eb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 8017eb8:	8a22      	ldrh	r2, [r4, #16]
 8017eba:	21ca      	movs	r1, #202	; 0xca
 8017ebc:	3060      	adds	r0, #96	; 0x60
 8017ebe:	f7f3 fbd9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	6825      	ldr	r5, [r4, #0]
 8017ec6:	f7fa fdc9 	bl	8012a5c <lv_disp_get_dpi>
 8017eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017ece:	3560      	adds	r5, #96	; 0x60
 8017ed0:	28ef      	cmp	r0, #239	; 0xef
 8017ed2:	f341 80e2 	ble.w	801909a <lv_theme_material_init+0x192a>
 8017ed6:	2000      	movs	r0, #0
 8017ed8:	f7fa fdc0 	bl	8012a5c <lv_disp_get_dpi>
 8017edc:	2205      	movs	r2, #5
 8017ede:	2350      	movs	r3, #80	; 0x50
 8017ee0:	fb00 3202 	mla	r2, r0, r2, r3
 8017ee4:	20a0      	movs	r0, #160	; 0xa0
 8017ee6:	fb92 f2f0 	sdiv	r2, r2, r0
 8017eea:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8017eec:	4628      	mov	r0, r5
 8017eee:	2190      	movs	r1, #144	; 0x90
 8017ef0:	f7f3 fb72 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	6825      	ldr	r5, [r4, #0]
 8017ef8:	f7fa fdb0 	bl	8012a5c <lv_disp_get_dpi>
 8017efc:	283b      	cmp	r0, #59	; 0x3b
 8017efe:	f105 0560 	add.w	r5, r5, #96	; 0x60
 8017f02:	f341 80cd 	ble.w	80190a0 <lv_theme_material_init+0x1930>
 8017f06:	2000      	movs	r0, #0
 8017f08:	f7fa fda8 	bl	8012a5c <lv_disp_get_dpi>
 8017f0c:	f100 0214 	add.w	r2, r0, #20
 8017f10:	2028      	movs	r0, #40	; 0x28
 8017f12:	fb92 f2f0 	sdiv	r2, r2, r0
 8017f16:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 8017f18:	21c3      	movs	r1, #195	; 0xc3
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	f7f3 fb5c 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 8017f20:	2000      	movs	r0, #0
 8017f22:	6824      	ldr	r4, [r4, #0]
 8017f24:	f7fa fd9a 	bl	8012a5c <lv_disp_get_dpi>
 8017f28:	281d      	cmp	r0, #29
 8017f2a:	f104 0460 	add.w	r4, r4, #96	; 0x60
 8017f2e:	f341 80ba 	ble.w	80190a6 <lv_theme_material_init+0x1936>
 8017f32:	2000      	movs	r0, #0
 8017f34:	f7fa fd92 	bl	8012a5c <lv_disp_get_dpi>
 8017f38:	f100 020a 	add.w	r2, r0, #10
 8017f3c:	2014      	movs	r0, #20
 8017f3e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017f42:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int)
 8017f44:	4620      	mov	r0, r4
 8017f46:	21c2      	movs	r1, #194	; 0xc2
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8017f48:	4ce2      	ldr	r4, [pc, #904]	; (80182d4 <lv_theme_material_init+0xb64>)
 8017f4a:	f7f3 fb45 	bl	800b5d8 <_lv_style_set_int>
 8017f4e:	2000      	movs	r0, #0
 8017f50:	6825      	ldr	r5, [r4, #0]
 8017f52:	f7fa fd83 	bl	8012a5c <lv_disp_get_dpi>
 8017f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017f5a:	3560      	adds	r5, #96	; 0x60
 8017f5c:	0080      	lsls	r0, r0, #2
 8017f5e:	28ef      	cmp	r0, #239	; 0xef
 8017f60:	f341 80a4 	ble.w	80190ac <lv_theme_material_init+0x193c>
 8017f64:	2000      	movs	r0, #0
 8017f66:	f7fa fd79 	bl	8012a5c <lv_disp_get_dpi>
 8017f6a:	2214      	movs	r2, #20
 8017f6c:	2350      	movs	r3, #80	; 0x50
 8017f6e:	fb00 3202 	mla	r2, r0, r2, r3
 8017f72:	20a0      	movs	r0, #160	; 0xa0
 8017f74:	fb92 f2f0 	sdiv	r2, r2, r0
 8017f78:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	2112      	movs	r1, #18
 8017f7e:	f7f3 fb2b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8017f82:	2000      	movs	r0, #0
 8017f84:	6825      	ldr	r5, [r4, #0]
 8017f86:	f7fa fd69 	bl	8012a5c <lv_disp_get_dpi>
 8017f8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017f8e:	3560      	adds	r5, #96	; 0x60
 8017f90:	0080      	lsls	r0, r0, #2
 8017f92:	28ef      	cmp	r0, #239	; 0xef
 8017f94:	f341 808d 	ble.w	80190b2 <lv_theme_material_init+0x1942>
 8017f98:	2000      	movs	r0, #0
 8017f9a:	f7fa fd5f 	bl	8012a5c <lv_disp_get_dpi>
 8017f9e:	2214      	movs	r2, #20
 8017fa0:	2350      	movs	r3, #80	; 0x50
 8017fa2:	fb00 3202 	mla	r2, r0, r2, r3
 8017fa6:	20a0      	movs	r0, #160	; 0xa0
 8017fa8:	fb92 f2f0 	sdiv	r2, r2, r0
 8017fac:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8017fae:	4628      	mov	r0, r5
 8017fb0:	2113      	movs	r1, #19
 8017fb2:	f7f3 fb11 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	6825      	ldr	r5, [r4, #0]
 8017fba:	f7fa fd4f 	bl	8012a5c <lv_disp_get_dpi>
 8017fbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017fc2:	3560      	adds	r5, #96	; 0x60
 8017fc4:	0080      	lsls	r0, r0, #2
 8017fc6:	28ef      	cmp	r0, #239	; 0xef
 8017fc8:	f341 8076 	ble.w	80190b8 <lv_theme_material_init+0x1948>
 8017fcc:	2000      	movs	r0, #0
 8017fce:	f7fa fd45 	bl	8012a5c <lv_disp_get_dpi>
 8017fd2:	2214      	movs	r2, #20
 8017fd4:	2350      	movs	r3, #80	; 0x50
 8017fd6:	fb00 3202 	mla	r2, r0, r2, r3
 8017fda:	20a0      	movs	r0, #160	; 0xa0
 8017fdc:	fb92 f2f0 	sdiv	r2, r2, r0
 8017fe0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	2110      	movs	r1, #16
 8017fe6:	f7f3 faf7 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8017fea:	2000      	movs	r0, #0
 8017fec:	6825      	ldr	r5, [r4, #0]
 8017fee:	f7fa fd35 	bl	8012a5c <lv_disp_get_dpi>
 8017ff2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017ff6:	3560      	adds	r5, #96	; 0x60
 8017ff8:	0080      	lsls	r0, r0, #2
 8017ffa:	28ef      	cmp	r0, #239	; 0xef
 8017ffc:	f341 805f 	ble.w	80190be <lv_theme_material_init+0x194e>
 8018000:	2000      	movs	r0, #0
 8018002:	f7fa fd2b 	bl	8012a5c <lv_disp_get_dpi>
 8018006:	2214      	movs	r2, #20
 8018008:	2350      	movs	r3, #80	; 0x50
 801800a:	fb00 3202 	mla	r2, r0, r2, r3
 801800e:	20a0      	movs	r0, #160	; 0xa0
 8018010:	fb92 f2f0 	sdiv	r2, r2, r0
 8018014:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8018016:	4628      	mov	r0, r5
 8018018:	2114      	movs	r1, #20
 801801a:	f7f3 fadd 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 801801e:	2000      	movs	r0, #0
 8018020:	6825      	ldr	r5, [r4, #0]
 8018022:	f7fa fd1b 	bl	8012a5c <lv_disp_get_dpi>
 8018026:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801802a:	3560      	adds	r5, #96	; 0x60
 801802c:	28ef      	cmp	r0, #239	; 0xef
 801802e:	f341 8049 	ble.w	80190c4 <lv_theme_material_init+0x1954>
 8018032:	2000      	movs	r0, #0
 8018034:	f7fa fd12 	bl	8012a5c <lv_disp_get_dpi>
 8018038:	220f      	movs	r2, #15
 801803a:	2350      	movs	r3, #80	; 0x50
 801803c:	fb00 3202 	mla	r2, r0, r2, r3
 8018040:	20a0      	movs	r0, #160	; 0xa0
 8018042:	fb92 f2f0 	sdiv	r2, r2, r0
 8018046:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 8018048:	4628      	mov	r0, r5
 801804a:	21c0      	movs	r1, #192	; 0xc0
 801804c:	f7f3 fac4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018050:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8018052:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018056:	2101      	movs	r1, #1
 8018058:	3060      	adds	r0, #96	; 0x60
 801805a:	f7f3 fabd 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->gauge_strong);
 801805e:	6820      	ldr	r0, [r4, #0]
 8018060:	3064      	adds	r0, #100	; 0x64
 8018062:	f7f3 fa5f 	bl	800b524 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8018066:	6820      	ldr	r0, [r4, #0]
 8018068:	f100 0564 	add.w	r5, r0, #100	; 0x64
 801806c:	f640 0088 	movw	r0, #2184	; 0x888
 8018070:	f7fd f966 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8018074:	2199      	movs	r1, #153	; 0x99
 8018076:	4602      	mov	r2, r0
 8018078:	4628      	mov	r0, r5
 801807a:	f7f3 fafb 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 801807e:	6820      	ldr	r0, [r4, #0]
 8018080:	f100 0564 	add.w	r5, r0, #100	; 0x64
 8018084:	f640 0088 	movw	r0, #2184	; 0x888
 8018088:	f7fd f95a 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color)
 801808c:	21c9      	movs	r1, #201	; 0xc9
 801808e:	4602      	mov	r2, r0
 8018090:	4628      	mov	r0, r5
 8018092:	f7f3 faef 	bl	800b674 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
 8018096:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color)
 8018098:	8a22      	ldrh	r2, [r4, #16]
 801809a:	21ca      	movs	r1, #202	; 0xca
 801809c:	3064      	adds	r0, #100	; 0x64
 801809e:	f7f3 fae9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80180a2:	2000      	movs	r0, #0
 80180a4:	6825      	ldr	r5, [r4, #0]
 80180a6:	f7fa fcd9 	bl	8012a5c <lv_disp_get_dpi>
 80180aa:	281d      	cmp	r0, #29
 80180ac:	f105 0564 	add.w	r5, r5, #100	; 0x64
 80180b0:	f341 800b 	ble.w	80190ca <lv_theme_material_init+0x195a>
 80180b4:	2000      	movs	r0, #0
 80180b6:	f7fa fcd1 	bl	8012a5c <lv_disp_get_dpi>
 80180ba:	f100 020a 	add.w	r2, r0, #10
 80180be:	2014      	movs	r0, #20
 80180c0:	fb92 f2f0 	sdiv	r2, r2, r0
 80180c4:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 80180c6:	4628      	mov	r0, r5
 80180c8:	2190      	movs	r1, #144	; 0x90
 80180ca:	f7f3 fa85 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80180ce:	2000      	movs	r0, #0
 80180d0:	6825      	ldr	r5, [r4, #0]
 80180d2:	f7fa fcc3 	bl	8012a5c <lv_disp_get_dpi>
 80180d6:	281d      	cmp	r0, #29
 80180d8:	f105 0564 	add.w	r5, r5, #100	; 0x64
 80180dc:	f340 87f8 	ble.w	80190d0 <lv_theme_material_init+0x1960>
 80180e0:	2000      	movs	r0, #0
 80180e2:	f7fa fcbb 	bl	8012a5c <lv_disp_get_dpi>
 80180e6:	f100 020a 	add.w	r2, r0, #10
 80180ea:	2014      	movs	r0, #20
 80180ec:	fb92 f2f0 	sdiv	r2, r2, r0
 80180f0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int)
 80180f2:	4628      	mov	r0, r5
 80180f4:	21c3      	movs	r1, #195	; 0xc3
 80180f6:	f7f3 fa6f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 80180fa:	2000      	movs	r0, #0
 80180fc:	6825      	ldr	r5, [r4, #0]
 80180fe:	f7fa fcad 	bl	8012a5c <lv_disp_get_dpi>
 8018102:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018106:	3564      	adds	r5, #100	; 0x64
 8018108:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801810c:	28ef      	cmp	r0, #239	; 0xef
 801810e:	f340 87e2 	ble.w	80190d6 <lv_theme_material_init+0x1966>
 8018112:	2000      	movs	r0, #0
 8018114:	f7fa fca2 	bl	8012a5c <lv_disp_get_dpi>
 8018118:	2219      	movs	r2, #25
 801811a:	2350      	movs	r3, #80	; 0x50
 801811c:	fb00 3202 	mla	r2, r0, r2, r3
 8018120:	20a0      	movs	r0, #160	; 0xa0
 8018122:	fb92 f2f0 	sdiv	r2, r2, r0
 8018126:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 8018128:	4628      	mov	r0, r5
 801812a:	21c0      	movs	r1, #192	; 0xc0
 801812c:	f7f3 fa54 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->gauge_needle);
 8018130:	6820      	ldr	r0, [r4, #0]
 8018132:	4d69      	ldr	r5, [pc, #420]	; (80182d8 <lv_theme_material_init+0xb68>)
 8018134:	3068      	adds	r0, #104	; 0x68
 8018136:	f7f3 f9f5 	bl	800b524 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 801813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801813c:	6820      	ldr	r0, [r4, #0]
 801813e:	f013 0f02 	tst.w	r3, #2
 8018142:	f100 0668 	add.w	r6, r0, #104	; 0x68
 8018146:	f000 87c9 	beq.w	80190dc <lv_theme_material_init+0x196c>
 801814a:	4864      	ldr	r0, [pc, #400]	; (80182dc <lv_theme_material_init+0xb6c>)
 801814c:	f7fd fc06 	bl	801595c <lv_color_hex>
 8018150:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8018152:	4630      	mov	r0, r6
 8018154:	2199      	movs	r1, #153	; 0x99
 8018156:	f7f3 fa8d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 801815a:	2000      	movs	r0, #0
 801815c:	6826      	ldr	r6, [r4, #0]
 801815e:	f7fa fc7d 	bl	8012a5c <lv_disp_get_dpi>
 8018162:	281d      	cmp	r0, #29
 8018164:	f106 0668 	add.w	r6, r6, #104	; 0x68
 8018168:	f340 87bb 	ble.w	80190e2 <lv_theme_material_init+0x1972>
 801816c:	2000      	movs	r0, #0
 801816e:	f7fa fc75 	bl	8012a5c <lv_disp_get_dpi>
 8018172:	f100 020a 	add.w	r2, r0, #10
 8018176:	2014      	movs	r0, #20
 8018178:	fb92 f2f0 	sdiv	r2, r2, r0
 801817c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 801817e:	4630      	mov	r0, r6
 8018180:	2190      	movs	r1, #144	; 0x90
 8018182:	f7f3 fa29 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018186:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018188:	22ff      	movs	r2, #255	; 0xff
 801818a:	212c      	movs	r1, #44	; 0x2c
 801818c:	3068      	adds	r0, #104	; 0x68
 801818e:	f7f3 fabf 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 8018192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018194:	6820      	ldr	r0, [r4, #0]
 8018196:	079b      	lsls	r3, r3, #30
 8018198:	f100 0668 	add.w	r6, r0, #104	; 0x68
 801819c:	f140 87a4 	bpl.w	80190e8 <lv_theme_material_init+0x1978>
 80181a0:	484e      	ldr	r0, [pc, #312]	; (80182dc <lv_theme_material_init+0xb6c>)
 80181a2:	f7fd fbdb 	bl	801595c <lv_color_hex>
 80181a6:	4602      	mov	r2, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80181a8:	4630      	mov	r0, r6
 80181aa:	2129      	movs	r1, #41	; 0x29
 80181ac:	f7f3 fa62 	bl	800b674 <_lv_style_set_color>
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80181b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 80181b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80181b6:	2101      	movs	r1, #1
 80181b8:	3068      	adds	r0, #104	; 0x68
 80181ba:	f7f3 fa0d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 80181be:	2000      	movs	r0, #0
 80181c0:	6826      	ldr	r6, [r4, #0]
 80181c2:	f7fa fc4b 	bl	8012a5c <lv_disp_get_dpi>
 80181c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80181ca:	3668      	adds	r6, #104	; 0x68
 80181cc:	0040      	lsls	r0, r0, #1
 80181ce:	28ef      	cmp	r0, #239	; 0xef
 80181d0:	f340 878d 	ble.w	80190ee <lv_theme_material_init+0x197e>
 80181d4:	2000      	movs	r0, #0
 80181d6:	f7fa fc41 	bl	8012a5c <lv_disp_get_dpi>
 80181da:	221e      	movs	r2, #30
 80181dc:	2350      	movs	r3, #80	; 0x50
 80181de:	fb00 3202 	mla	r2, r0, r2, r3
 80181e2:	20a0      	movs	r0, #160	; 0xa0
 80181e4:	fb92 f2f0 	sdiv	r2, r2, r0
 80181e8:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 80181ea:	4630      	mov	r0, r6
 80181ec:	2103      	movs	r1, #3
 80181ee:	f7f3 f9f3 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 80181f2:	2000      	movs	r0, #0
 80181f4:	6826      	ldr	r6, [r4, #0]
 80181f6:	f7fa fc31 	bl	8012a5c <lv_disp_get_dpi>
 80181fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80181fe:	3668      	adds	r6, #104	; 0x68
 8018200:	0040      	lsls	r0, r0, #1
 8018202:	28ef      	cmp	r0, #239	; 0xef
 8018204:	f340 8776 	ble.w	80190f4 <lv_theme_material_init+0x1984>
 8018208:	2000      	movs	r0, #0
 801820a:	f7fa fc27 	bl	8012a5c <lv_disp_get_dpi>
 801820e:	220a      	movs	r2, #10
 8018210:	2350      	movs	r3, #80	; 0x50
 8018212:	fb00 3202 	mla	r2, r0, r2, r3
 8018216:	20a0      	movs	r0, #160	; 0xa0
 8018218:	fb92 f2f0 	sdiv	r2, r2, r0
 801821c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801821e:	2114      	movs	r1, #20
 8018220:	4630      	mov	r0, r6
 8018222:	f7f3 f9d9 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->arc_indic);
 8018226:	6820      	ldr	r0, [r4, #0]
 8018228:	301c      	adds	r0, #28
 801822a:	f7f3 f97b 	bl	800b524 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 801822e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8018230:	8a22      	ldrh	r2, [r4, #16]
 8018232:	2199      	movs	r1, #153	; 0x99
 8018234:	301c      	adds	r0, #28
 8018236:	f7f3 fa1d 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 801823a:	2000      	movs	r0, #0
 801823c:	6826      	ldr	r6, [r4, #0]
 801823e:	f7fa fc0d 	bl	8012a5c <lv_disp_get_dpi>
 8018242:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018246:	361c      	adds	r6, #28
 8018248:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801824c:	28ef      	cmp	r0, #239	; 0xef
 801824e:	f340 8754 	ble.w	80190fa <lv_theme_material_init+0x198a>
 8018252:	2000      	movs	r0, #0
 8018254:	f7fa fc02 	bl	8012a5c <lv_disp_get_dpi>
 8018258:	2219      	movs	r2, #25
 801825a:	2350      	movs	r3, #80	; 0x50
 801825c:	fb00 3202 	mla	r2, r0, r2, r3
 8018260:	20a0      	movs	r0, #160	; 0xa0
 8018262:	fb92 f2f0 	sdiv	r2, r2, r0
 8018266:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8018268:	4630      	mov	r0, r6
 801826a:	2190      	movs	r1, #144	; 0x90
 801826c:	f7f3 f9b4 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 8018270:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 8018272:	2201      	movs	r2, #1
 8018274:	2194      	movs	r1, #148	; 0x94
 8018276:	301c      	adds	r0, #28
 8018278:	f7f3 f9ae 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->arc_bg);
 801827c:	6820      	ldr	r0, [r4, #0]
 801827e:	3020      	adds	r0, #32
 8018280:	f7f3 f950 	bl	800b524 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8018284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018286:	6826      	ldr	r6, [r4, #0]
 8018288:	079f      	lsls	r7, r3, #30
 801828a:	f106 0620 	add.w	r6, r6, #32
 801828e:	bf4c      	ite	mi
 8018290:	4813      	ldrmi	r0, [pc, #76]	; (80182e0 <lv_theme_material_init+0xb70>)
 8018292:	4814      	ldrpl	r0, [pc, #80]	; (80182e4 <lv_theme_material_init+0xb74>)
 8018294:	f7fd fb62 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 8018298:	2199      	movs	r1, #153	; 0x99
 801829a:	4602      	mov	r2, r0
 801829c:	4630      	mov	r0, r6
 801829e:	f7f3 f9e9 	bl	800b674 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 80182a2:	2000      	movs	r0, #0
 80182a4:	6826      	ldr	r6, [r4, #0]
 80182a6:	f7fa fbd9 	bl	8012a5c <lv_disp_get_dpi>
 80182aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80182ae:	3620      	adds	r6, #32
 80182b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80182b4:	28ef      	cmp	r0, #239	; 0xef
 80182b6:	f340 8723 	ble.w	8019100 <lv_theme_material_init+0x1990>
 80182ba:	2000      	movs	r0, #0
 80182bc:	f7fa fbce 	bl	8012a5c <lv_disp_get_dpi>
 80182c0:	2219      	movs	r2, #25
 80182c2:	2350      	movs	r3, #80	; 0x50
 80182c4:	fb00 3202 	mla	r2, r0, r2, r3
 80182c8:	20a0      	movs	r0, #160	; 0xa0
 80182ca:	fb92 f2f0 	sdiv	r2, r2, r0
 80182ce:	b212      	sxth	r2, r2
 80182d0:	e00a      	b.n	80182e8 <lv_theme_material_init+0xb78>
 80182d2:	bf00      	nop
 80182d4:	200288d8 	.word	0x200288d8
 80182d8:	080229e8 	.word	0x080229e8
 80182dc:	00464b5b 	.word	0x00464b5b
 80182e0:	00d4d7d9 	.word	0x00d4d7d9
 80182e4:	0045494d 	.word	0x0045494d
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 80182e8:	4630      	mov	r0, r6
 80182ea:	2190      	movs	r1, #144	; 0x90
 80182ec:	f7f3 f974 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 80182f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
 80182f2:	2201      	movs	r2, #1
 80182f4:	2194      	movs	r1, #148	; 0x94
 80182f6:	3020      	adds	r0, #32
 80182f8:	f7f3 f96e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->arc_knob);
 80182fc:	6820      	ldr	r0, [r4, #0]
 80182fe:	3024      	adds	r0, #36	; 0x24
 8018300:	f7f3 f910 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 8018304:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8018306:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801830a:	2101      	movs	r1, #1
 801830c:	3024      	adds	r0, #36	; 0x24
 801830e:	f7f3 f963 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8018312:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8018314:	2200      	movs	r2, #0
 8018316:	2110      	movs	r1, #16
 8018318:	3024      	adds	r0, #36	; 0x24
 801831a:	f7f3 f95d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 801831e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018320:	2200      	movs	r2, #0
 8018322:	2111      	movs	r1, #17
 8018324:	3024      	adds	r0, #36	; 0x24
 8018326:	f7f3 f957 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 801832a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801832c:	2200      	movs	r2, #0
 801832e:	2112      	movs	r1, #18
 8018330:	3024      	adds	r0, #36	; 0x24
 8018332:	f7f3 f951 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 8018336:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8018338:	2200      	movs	r2, #0
 801833a:	2113      	movs	r1, #19
 801833c:	3024      	adds	r0, #36	; 0x24
 801833e:	f7f3 f94b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->chart_bg);
 8018342:	6820      	ldr	r0, [r4, #0]
 8018344:	3044      	adds	r0, #68	; 0x44
 8018346:	f7f3 f8ed 	bl	800b524 <lv_style_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 801834a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801834c:	6826      	ldr	r6, [r4, #0]
 801834e:	0798      	lsls	r0, r3, #30
 8018350:	f106 0644 	add.w	r6, r6, #68	; 0x44
 8018354:	f140 86d7 	bpl.w	8019106 <lv_theme_material_init+0x1996>
 8018358:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801835c:	f7fc fff0 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018360:	4602      	mov	r2, r0
 8018362:	f248 0189 	movw	r1, #32905	; 0x8089
 8018366:	4630      	mov	r0, r6
 8018368:	f7f3 f984 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->chart_series_bg);
 801836c:	6820      	ldr	r0, [r4, #0]
 801836e:	3048      	adds	r0, #72	; 0x48
 8018370:	f7f3 f8d8 	bl	800b524 <lv_style_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 8018374:	2000      	movs	r0, #0
 8018376:	6826      	ldr	r6, [r4, #0]
 8018378:	f7fa fb70 	bl	8012a5c <lv_disp_get_dpi>
 801837c:	28ef      	cmp	r0, #239	; 0xef
 801837e:	f106 0648 	add.w	r6, r6, #72	; 0x48
 8018382:	f340 86c5 	ble.w	8019110 <lv_theme_material_init+0x19a0>
 8018386:	2000      	movs	r0, #0
 8018388:	f7fa fb68 	bl	8012a5c <lv_disp_get_dpi>
 801838c:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8018390:	20a0      	movs	r0, #160	; 0xa0
 8018392:	fb92 f2f0 	sdiv	r2, r2, r0
 8018396:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8018398:	4630      	mov	r0, r6
 801839a:	2190      	movs	r1, #144	; 0x90
 801839c:	f7f3 f91c 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80183a0:	2000      	movs	r0, #0
 80183a2:	6826      	ldr	r6, [r4, #0]
 80183a4:	f7fa fb5a 	bl	8012a5c <lv_disp_get_dpi>
 80183a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80183ac:	3648      	adds	r6, #72	; 0x48
 80183ae:	0040      	lsls	r0, r0, #1
 80183b0:	28ef      	cmp	r0, #239	; 0xef
 80183b2:	f340 86b0 	ble.w	8019116 <lv_theme_material_init+0x19a6>
 80183b6:	2000      	movs	r0, #0
 80183b8:	f7fa fb50 	bl	8012a5c <lv_disp_get_dpi>
 80183bc:	220a      	movs	r2, #10
 80183be:	2350      	movs	r3, #80	; 0x50
 80183c0:	fb00 3202 	mla	r2, r0, r2, r3
 80183c4:	20a0      	movs	r0, #160	; 0xa0
 80183c6:	fb92 f2f0 	sdiv	r2, r2, r0
 80183ca:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int)
 80183cc:	4630      	mov	r0, r6
 80183ce:	2192      	movs	r1, #146	; 0x92
 80183d0:	f7f3 f902 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80183d4:	2000      	movs	r0, #0
 80183d6:	6826      	ldr	r6, [r4, #0]
 80183d8:	f7fa fb40 	bl	8012a5c <lv_disp_get_dpi>
 80183dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80183e0:	3648      	adds	r6, #72	; 0x48
 80183e2:	0040      	lsls	r0, r0, #1
 80183e4:	28ef      	cmp	r0, #239	; 0xef
 80183e6:	f340 8699 	ble.w	801911c <lv_theme_material_init+0x19ac>
 80183ea:	2000      	movs	r0, #0
 80183ec:	f7fa fb36 	bl	8012a5c <lv_disp_get_dpi>
 80183f0:	220a      	movs	r2, #10
 80183f2:	2350      	movs	r3, #80	; 0x50
 80183f4:	fb00 3202 	mla	r2, r0, r2, r3
 80183f8:	20a0      	movs	r0, #160	; 0xa0
 80183fa:	fb92 f2f0 	sdiv	r2, r2, r0
 80183fe:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int)
 8018400:	4630      	mov	r0, r6
 8018402:	2193      	movs	r1, #147	; 0x93
 8018404:	f7f3 f8e8 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8018408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801840a:	6826      	ldr	r6, [r4, #0]
 801840c:	0799      	lsls	r1, r3, #30
 801840e:	f106 0648 	add.w	r6, r6, #72	; 0x48
 8018412:	bf4c      	ite	mi
 8018414:	48dd      	ldrmi	r0, [pc, #884]	; (801878c <lv_theme_material_init+0x101c>)
 8018416:	48de      	ldrpl	r0, [pc, #888]	; (8018790 <lv_theme_material_init+0x1020>)
 8018418:	f7fd faa0 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
 801841c:	2199      	movs	r1, #153	; 0x99
 801841e:	4602      	mov	r2, r0
 8018420:	4630      	mov	r0, r6
 8018422:	f7f3 f927 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->chart_series);
 8018426:	6820      	ldr	r0, [r4, #0]
 8018428:	304c      	adds	r0, #76	; 0x4c
 801842a:	f7f3 f87b 	bl	800b524 <lv_style_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 801842e:	2000      	movs	r0, #0
 8018430:	6826      	ldr	r6, [r4, #0]
 8018432:	f7fa fb13 	bl	8012a5c <lv_disp_get_dpi>
 8018436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801843a:	364c      	adds	r6, #76	; 0x4c
 801843c:	28ef      	cmp	r0, #239	; 0xef
 801843e:	f340 8670 	ble.w	8019122 <lv_theme_material_init+0x19b2>
 8018442:	2000      	movs	r0, #0
 8018444:	f7fa fb0a 	bl	8012a5c <lv_disp_get_dpi>
 8018448:	2203      	movs	r2, #3
 801844a:	2350      	movs	r3, #80	; 0x50
 801844c:	fb00 3202 	mla	r2, r0, r2, r3
 8018450:	20a0      	movs	r0, #160	; 0xa0
 8018452:	fb92 f2f0 	sdiv	r2, r2, r0
 8018456:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int)
 8018458:	4630      	mov	r0, r6
 801845a:	2190      	movs	r1, #144	; 0x90
 801845c:	f7f3 f8bc 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 8018460:	2000      	movs	r0, #0
 8018462:	6826      	ldr	r6, [r4, #0]
 8018464:	f7fa fafa 	bl	8012a5c <lv_disp_get_dpi>
 8018468:	283b      	cmp	r0, #59	; 0x3b
 801846a:	f106 064c 	add.w	r6, r6, #76	; 0x4c
 801846e:	f340 865b 	ble.w	8019128 <lv_theme_material_init+0x19b8>
 8018472:	2000      	movs	r0, #0
 8018474:	f7fa faf2 	bl	8012a5c <lv_disp_get_dpi>
 8018478:	f100 0214 	add.w	r2, r0, #20
 801847c:	2028      	movs	r0, #40	; 0x28
 801847e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018482:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 8018484:	4630      	mov	r0, r6
 8018486:	2103      	movs	r1, #3
 8018488:	f7f3 f8a6 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 801848c:	2000      	movs	r0, #0
 801848e:	6826      	ldr	r6, [r4, #0]
 8018490:	f7fa fae4 	bl	8012a5c <lv_disp_get_dpi>
 8018494:	2877      	cmp	r0, #119	; 0x77
 8018496:	f106 064c 	add.w	r6, r6, #76	; 0x4c
 801849a:	f340 8648 	ble.w	801912e <lv_theme_material_init+0x19be>
 801849e:	2000      	movs	r0, #0
 80184a0:	f7fa fadc 	bl	8012a5c <lv_disp_get_dpi>
 80184a4:	f100 0228 	add.w	r2, r0, #40	; 0x28
 80184a8:	2050      	movs	r0, #80	; 0x50
 80184aa:	fb92 f2f0 	sdiv	r2, r2, r0
 80184ae:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 80184b0:	4630      	mov	r0, r6
 80184b2:	2114      	movs	r1, #20
 80184b4:	f7f3 f890 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 80184b8:	2000      	movs	r0, #0
 80184ba:	6826      	ldr	r6, [r4, #0]
 80184bc:	f7fa face 	bl	8012a5c <lv_disp_get_dpi>
 80184c0:	28ef      	cmp	r0, #239	; 0xef
 80184c2:	f106 064c 	add.w	r6, r6, #76	; 0x4c
 80184c6:	f340 8635 	ble.w	8019134 <lv_theme_material_init+0x19c4>
 80184ca:	2000      	movs	r0, #0
 80184cc:	f7fa fac6 	bl	8012a5c <lv_disp_get_dpi>
 80184d0:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80184d4:	20a0      	movs	r0, #160	; 0xa0
 80184d6:	fb92 f2f0 	sdiv	r2, r2, r0
 80184da:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 80184dc:	2101      	movs	r1, #1
 80184de:	4630      	mov	r0, r6
 80184e0:	f7f3 f87a 	bl	800b5d8 <_lv_style_set_int>
    calendar_init();
 80184e4:	f7fd fa4a 	bl	801597c <calendar_init>
    lv_style_reset(&styles->cpicker_bg);
 80184e8:	6820      	ldr	r0, [r4, #0]
 80184ea:	303c      	adds	r0, #60	; 0x3c
 80184ec:	f7f3 f81a 	bl	800b524 <lv_style_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 80184f0:	2000      	movs	r0, #0
 80184f2:	6826      	ldr	r6, [r4, #0]
 80184f4:	f7fa fab2 	bl	8012a5c <lv_disp_get_dpi>
 80184f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80184fc:	363c      	adds	r6, #60	; 0x3c
 80184fe:	0040      	lsls	r0, r0, #1
 8018500:	28ef      	cmp	r0, #239	; 0xef
 8018502:	f340 861a 	ble.w	801913a <lv_theme_material_init+0x19ca>
 8018506:	2000      	movs	r0, #0
 8018508:	f7fa faa8 	bl	8012a5c <lv_disp_get_dpi>
 801850c:	221e      	movs	r2, #30
 801850e:	2350      	movs	r3, #80	; 0x50
 8018510:	fb00 3202 	mla	r2, r0, r2, r3
 8018514:	20a0      	movs	r0, #160	; 0xa0
 8018516:	fb92 f2f0 	sdiv	r2, r2, r0
 801851a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int)
 801851c:	4630      	mov	r0, r6
 801851e:	21c0      	movs	r1, #192	; 0xc0
 8018520:	f7f3 f85a 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018524:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018526:	22ff      	movs	r2, #255	; 0xff
 8018528:	212c      	movs	r1, #44	; 0x2c
 801852a:	303c      	adds	r0, #60	; 0x3c
 801852c:	f7f3 f8f0 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 8018530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018532:	6826      	ldr	r6, [r4, #0]
 8018534:	079a      	lsls	r2, r3, #30
 8018536:	f106 063c 	add.w	r6, r6, #60	; 0x3c
 801853a:	bf4c      	ite	mi
 801853c:	4895      	ldrmi	r0, [pc, #596]	; (8018794 <lv_theme_material_init+0x1024>)
 801853e:	4896      	ldrpl	r0, [pc, #600]	; (8018798 <lv_theme_material_init+0x1028>)
 8018540:	f7fd fa0c 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018544:	2129      	movs	r1, #41	; 0x29
 8018546:	4602      	mov	r2, r0
 8018548:	4630      	mov	r0, r6
 801854a:	f7f3 f893 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 801854e:	2000      	movs	r0, #0
 8018550:	6826      	ldr	r6, [r4, #0]
 8018552:	f7fa fa83 	bl	8012a5c <lv_disp_get_dpi>
 8018556:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801855a:	363c      	adds	r6, #60	; 0x3c
 801855c:	0080      	lsls	r0, r0, #2
 801855e:	28ef      	cmp	r0, #239	; 0xef
 8018560:	f340 85ee 	ble.w	8019140 <lv_theme_material_init+0x19d0>
 8018564:	2000      	movs	r0, #0
 8018566:	f7fa fa79 	bl	8012a5c <lv_disp_get_dpi>
 801856a:	2214      	movs	r2, #20
 801856c:	2350      	movs	r3, #80	; 0x50
 801856e:	fb00 3202 	mla	r2, r0, r2, r3
 8018572:	20a0      	movs	r0, #160	; 0xa0
 8018574:	fb92 f2f0 	sdiv	r2, r2, r0
 8018578:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801857a:	4630      	mov	r0, r6
 801857c:	2114      	movs	r1, #20
 801857e:	f7f3 f82b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018582:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8018584:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018588:	2101      	movs	r1, #1
 801858a:	303c      	adds	r0, #60	; 0x3c
 801858c:	f7f3 f824 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->cpicker_indic);
 8018590:	6820      	ldr	r0, [r4, #0]
 8018592:	3040      	adds	r0, #64	; 0x40
 8018594:	f7f2 ffc6 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018598:	6820      	ldr	r0, [r4, #0]
 801859a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801859e:	2101      	movs	r1, #1
 80185a0:	3040      	adds	r0, #64	; 0x40
 80185a2:	f7f3 f819 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 80185a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 80185a8:	882a      	ldrh	r2, [r5, #0]
 80185aa:	2129      	movs	r1, #41	; 0x29
 80185ac:	3040      	adds	r0, #64	; 0x40
 80185ae:	f7f3 f861 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 80185b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 80185b4:	22ff      	movs	r2, #255	; 0xff
 80185b6:	212c      	movs	r1, #44	; 0x2c
 80185b8:	3040      	adds	r0, #64	; 0x40
 80185ba:	f7f3 f8a9 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 80185be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 80185c0:	2202      	movs	r2, #2
 80185c2:	2130      	movs	r1, #48	; 0x30
 80185c4:	3040      	adds	r0, #64	; 0x40
 80185c6:	f7f3 f807 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 80185ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 80185cc:	886a      	ldrh	r2, [r5, #2]
 80185ce:	2139      	movs	r1, #57	; 0x39
 80185d0:	3040      	adds	r0, #64	; 0x40
 80185d2:	f7f3 f84f 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 80185d6:	6820      	ldr	r0, [r4, #0]
 80185d8:	8a22      	ldrh	r2, [r4, #16]
 80185da:	f240 2139 	movw	r1, #569	; 0x239
 80185de:	3040      	adds	r0, #64	; 0x40
 80185e0:	f7f3 f848 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 80185e4:	6820      	ldr	r0, [r4, #0]
 80185e6:	8a62      	ldrh	r2, [r4, #18]
 80185e8:	f240 4139 	movw	r1, #1081	; 0x439
 80185ec:	3040      	adds	r0, #64	; 0x40
 80185ee:	f7f3 f841 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80185f2:	2000      	movs	r0, #0
 80185f4:	6826      	ldr	r6, [r4, #0]
 80185f6:	f7fa fa31 	bl	8012a5c <lv_disp_get_dpi>
 80185fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80185fe:	3640      	adds	r6, #64	; 0x40
 8018600:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018604:	28ef      	cmp	r0, #239	; 0xef
 8018606:	f340 859e 	ble.w	8019146 <lv_theme_material_init+0x19d6>
 801860a:	2000      	movs	r0, #0
 801860c:	f7fa fa26 	bl	8012a5c <lv_disp_get_dpi>
 8018610:	220d      	movs	r2, #13
 8018612:	2350      	movs	r3, #80	; 0x50
 8018614:	fb00 3202 	mla	r2, r0, r2, r3
 8018618:	20a0      	movs	r0, #160	; 0xa0
 801861a:	fb92 f2f0 	sdiv	r2, r2, r0
 801861e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8018620:	4630      	mov	r0, r6
 8018622:	2112      	movs	r1, #18
 8018624:	f7f2 ffd8 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8018628:	2000      	movs	r0, #0
 801862a:	6826      	ldr	r6, [r4, #0]
 801862c:	f7fa fa16 	bl	8012a5c <lv_disp_get_dpi>
 8018630:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8018634:	3640      	adds	r6, #64	; 0x40
 8018636:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801863a:	28ef      	cmp	r0, #239	; 0xef
 801863c:	f340 8586 	ble.w	801914c <lv_theme_material_init+0x19dc>
 8018640:	2000      	movs	r0, #0
 8018642:	f7fa fa0b 	bl	8012a5c <lv_disp_get_dpi>
 8018646:	220d      	movs	r2, #13
 8018648:	2350      	movs	r3, #80	; 0x50
 801864a:	fb00 3202 	mla	r2, r0, r2, r3
 801864e:	20a0      	movs	r0, #160	; 0xa0
 8018650:	fb92 f2f0 	sdiv	r2, r2, r0
 8018654:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8018656:	2113      	movs	r1, #19
 8018658:	4630      	mov	r0, r6
 801865a:	f7f2 ffbd 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 801865e:	2000      	movs	r0, #0
 8018660:	6824      	ldr	r4, [r4, #0]
 8018662:	f7fa f9fb 	bl	8012a5c <lv_disp_get_dpi>
 8018666:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801866a:	3440      	adds	r4, #64	; 0x40
 801866c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018670:	28ef      	cmp	r0, #239	; 0xef
 8018672:	f340 856e 	ble.w	8019152 <lv_theme_material_init+0x19e2>
 8018676:	2000      	movs	r0, #0
 8018678:	f7fa f9f0 	bl	8012a5c <lv_disp_get_dpi>
 801867c:	220d      	movs	r2, #13
 801867e:	2350      	movs	r3, #80	; 0x50
 8018680:	fb00 3202 	mla	r2, r0, r2, r3
 8018684:	20a0      	movs	r0, #160	; 0xa0
 8018686:	fb92 f2f0 	sdiv	r2, r2, r0
 801868a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801868c:	4620      	mov	r0, r4
 801868e:	2110      	movs	r1, #16
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8018690:	4c42      	ldr	r4, [pc, #264]	; (801879c <lv_theme_material_init+0x102c>)
 8018692:	f7f2 ffa1 	bl	800b5d8 <_lv_style_set_int>
 8018696:	2000      	movs	r0, #0
 8018698:	6826      	ldr	r6, [r4, #0]
 801869a:	f7fa f9df 	bl	8012a5c <lv_disp_get_dpi>
 801869e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80186a2:	3640      	adds	r6, #64	; 0x40
 80186a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80186a8:	28ef      	cmp	r0, #239	; 0xef
 80186aa:	f340 8555 	ble.w	8019158 <lv_theme_material_init+0x19e8>
 80186ae:	2000      	movs	r0, #0
 80186b0:	f7fa f9d4 	bl	8012a5c <lv_disp_get_dpi>
 80186b4:	220d      	movs	r2, #13
 80186b6:	2350      	movs	r3, #80	; 0x50
 80186b8:	fb00 3202 	mla	r2, r0, r2, r3
 80186bc:	20a0      	movs	r0, #160	; 0xa0
 80186be:	fb92 f2f0 	sdiv	r2, r2, r0
 80186c2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 80186c4:	2111      	movs	r1, #17
 80186c6:	4630      	mov	r0, r6
 80186c8:	f7f2 ff86 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->cb_bg);
 80186cc:	6820      	ldr	r0, [r4, #0]
 80186ce:	3050      	adds	r0, #80	; 0x50
 80186d0:	f7f2 ff28 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 80186d4:	2000      	movs	r0, #0
 80186d6:	6826      	ldr	r6, [r4, #0]
 80186d8:	f7fa f9c0 	bl	8012a5c <lv_disp_get_dpi>
 80186dc:	283b      	cmp	r0, #59	; 0x3b
 80186de:	f106 0650 	add.w	r6, r6, #80	; 0x50
 80186e2:	f340 853c 	ble.w	801915e <lv_theme_material_init+0x19ee>
 80186e6:	2000      	movs	r0, #0
 80186e8:	f7fa f9b8 	bl	8012a5c <lv_disp_get_dpi>
 80186ec:	f100 0214 	add.w	r2, r0, #20
 80186f0:	2028      	movs	r0, #40	; 0x28
 80186f2:	fb92 f2f0 	sdiv	r2, r2, r0
 80186f6:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 80186f8:	4630      	mov	r0, r6
 80186fa:	2101      	movs	r1, #1
 80186fc:	f7f2 ff6c 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8018700:	2000      	movs	r0, #0
 8018702:	6826      	ldr	r6, [r4, #0]
 8018704:	f7fa f9aa 	bl	8012a5c <lv_disp_get_dpi>
 8018708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801870c:	3650      	adds	r6, #80	; 0x50
 801870e:	0040      	lsls	r0, r0, #1
 8018710:	28ef      	cmp	r0, #239	; 0xef
 8018712:	f340 8527 	ble.w	8019164 <lv_theme_material_init+0x19f4>
 8018716:	2000      	movs	r0, #0
 8018718:	f7fa f9a0 	bl	8012a5c <lv_disp_get_dpi>
 801871c:	220a      	movs	r2, #10
 801871e:	2350      	movs	r3, #80	; 0x50
 8018720:	fb00 3202 	mla	r2, r0, r2, r3
 8018724:	20a0      	movs	r0, #160	; 0xa0
 8018726:	fb92 f2f0 	sdiv	r2, r2, r0
 801872a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801872c:	4630      	mov	r0, r6
 801872e:	2114      	movs	r1, #20
 8018730:	f7f2 ff52 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
 8018734:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color)
 8018736:	8a22      	ldrh	r2, [r4, #16]
 8018738:	2149      	movs	r1, #73	; 0x49
 801873a:	3050      	adds	r0, #80	; 0x50
 801873c:	f7f2 ff9a 	bl	800b674 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8018740:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 8018742:	2200      	movs	r2, #0
 8018744:	214c      	movs	r1, #76	; 0x4c
 8018746:	3050      	adds	r0, #80	; 0x50
 8018748:	f7f2 ffe2 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
 801874c:	6820      	ldr	r0, [r4, #0]
 801874e:	227f      	movs	r2, #127	; 0x7f
 8018750:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8018754:	3050      	adds	r0, #80	; 0x50
 8018756:	f7f2 ffdb 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 801875a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801875c:	6827      	ldr	r7, [r4, #0]
 801875e:	f010 0620 	ands.w	r6, r0, #32
 8018762:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8018766:	f040 8500 	bne.w	801916a <lv_theme_material_init+0x19fa>
 801876a:	4630      	mov	r0, r6
 801876c:	f7fa f976 	bl	8012a5c <lv_disp_get_dpi>
 8018770:	2877      	cmp	r0, #119	; 0x77
 8018772:	f340 84fd 	ble.w	8019170 <lv_theme_material_init+0x1a00>
 8018776:	4630      	mov	r0, r6
 8018778:	f7fa f970 	bl	8012a5c <lv_disp_get_dpi>
 801877c:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8018780:	2050      	movs	r0, #80	; 0x50
 8018782:	fb92 f2f0 	sdiv	r2, r2, r0
 8018786:	b212      	sxth	r2, r2
 8018788:	e00a      	b.n	80187a0 <lv_theme_material_init+0x1030>
 801878a:	bf00      	nop
 801878c:	00d6dde3 	.word	0x00d6dde3
 8018790:	00808a97 	.word	0x00808a97
 8018794:	00eaeff3 	.word	0x00eaeff3
 8018798:	00444b5a 	.word	0x00444b5a
 801879c:	200288d8 	.word	0x200288d8
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int)
 80187a0:	2140      	movs	r1, #64	; 0x40
 80187a2:	4638      	mov	r0, r7
 80187a4:	f7f2 ff18 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80187a8:	2000      	movs	r0, #0
 80187aa:	6826      	ldr	r6, [r4, #0]
 80187ac:	f7fa f956 	bl	8012a5c <lv_disp_get_dpi>
 80187b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80187b4:	3650      	adds	r6, #80	; 0x50
 80187b6:	0040      	lsls	r0, r0, #1
 80187b8:	28ef      	cmp	r0, #239	; 0xef
 80187ba:	f340 84dc 	ble.w	8019176 <lv_theme_material_init+0x1a06>
 80187be:	2000      	movs	r0, #0
 80187c0:	f7fa f94c 	bl	8012a5c <lv_disp_get_dpi>
 80187c4:	220a      	movs	r2, #10
 80187c6:	2350      	movs	r3, #80	; 0x50
 80187c8:	fb00 3202 	mla	r2, r0, r2, r3
 80187cc:	20a0      	movs	r0, #160	; 0xa0
 80187ce:	fb92 f2f0 	sdiv	r2, r2, r0
 80187d2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int)
 80187d4:	4630      	mov	r0, r6
 80187d6:	2141      	movs	r1, #65	; 0x41
 80187d8:	f7f2 fefe 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 80187dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int)
 80187de:	2200      	movs	r2, #0
 80187e0:	21b0      	movs	r1, #176	; 0xb0
 80187e2:	3050      	adds	r0, #80	; 0x50
 80187e4:	f7f2 fef8 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80187e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int)
 80187ea:	224c      	movs	r2, #76	; 0x4c
 80187ec:	21b7      	movs	r1, #183	; 0xb7
 80187ee:	3050      	adds	r0, #80	; 0x50
 80187f0:	f7f2 fef2 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->cb_bullet);
 80187f4:	6820      	ldr	r0, [r4, #0]
 80187f6:	3054      	adds	r0, #84	; 0x54
 80187f8:	f7f2 fe94 	bl	800b524 <lv_style_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
 80187fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa)
 80187fe:	2200      	movs	r2, #0
 8018800:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8018804:	3054      	adds	r0, #84	; 0x54
 8018806:	f7f2 ff83 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 801880a:	2000      	movs	r0, #0
 801880c:	6826      	ldr	r6, [r4, #0]
 801880e:	f7fa f925 	bl	8012a5c <lv_disp_get_dpi>
 8018812:	283b      	cmp	r0, #59	; 0x3b
 8018814:	f106 0654 	add.w	r6, r6, #84	; 0x54
 8018818:	f340 84b0 	ble.w	801917c <lv_theme_material_init+0x1a0c>
 801881c:	2000      	movs	r0, #0
 801881e:	f7fa f91d 	bl	8012a5c <lv_disp_get_dpi>
 8018822:	f100 0214 	add.w	r2, r0, #20
 8018826:	2028      	movs	r0, #40	; 0x28
 8018828:	fb92 f2f0 	sdiv	r2, r2, r0
 801882c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 801882e:	2101      	movs	r1, #1
 8018830:	4630      	mov	r0, r6
 8018832:	f7f2 fed1 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
 8018836:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr)
 8018838:	4ad8      	ldr	r2, [pc, #864]	; (8018b9c <lv_theme_material_init+0x142c>)
 801883a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 801883e:	3054      	adds	r0, #84	; 0x54
 8018840:	f7f2 ffb6 	bl	800b7b0 <_lv_style_set_ptr>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
 8018844:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color)
 8018846:	882a      	ldrh	r2, [r5, #0]
 8018848:	f240 1169 	movw	r1, #361	; 0x169
 801884c:	3054      	adds	r0, #84	; 0x54
 801884e:	f7f2 ff11 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8018852:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa)
 8018854:	2200      	movs	r2, #0
 8018856:	216c      	movs	r1, #108	; 0x6c
 8018858:	3054      	adds	r0, #84	; 0x54
 801885a:	f7f2 ff59 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
 801885e:	6820      	ldr	r0, [r4, #0]
 8018860:	22ff      	movs	r2, #255	; 0xff
 8018862:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8018866:	3054      	adds	r0, #84	; 0x54
 8018868:	f7f2 ff52 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
 801886c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int)
 801886e:	226c      	movs	r2, #108	; 0x6c
 8018870:	21b4      	movs	r1, #180	; 0xb4
 8018872:	3054      	adds	r0, #84	; 0x54
 8018874:	f7f2 feb0 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
 8018878:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801887a:	6962      	ldr	r2, [r4, #20]
 801887c:	f248 118e 	movw	r1, #33166	; 0x818e
 8018880:	3054      	adds	r0, #84	; 0x54
 8018882:	f7f2 ff95 	bl	800b7b0 <_lv_style_set_ptr>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8018886:	2000      	movs	r0, #0
 8018888:	6825      	ldr	r5, [r4, #0]
 801888a:	f7fa f8e7 	bl	8012a5c <lv_disp_get_dpi>
 801888e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018892:	3554      	adds	r5, #84	; 0x54
 8018894:	28ef      	cmp	r0, #239	; 0xef
 8018896:	f340 8474 	ble.w	8019182 <lv_theme_material_init+0x1a12>
 801889a:	2000      	movs	r0, #0
 801889c:	f7fa f8de 	bl	8012a5c <lv_disp_get_dpi>
 80188a0:	2203      	movs	r2, #3
 80188a2:	2350      	movs	r3, #80	; 0x50
 80188a4:	fb00 3202 	mla	r2, r0, r2, r3
 80188a8:	20a0      	movs	r0, #160	; 0xa0
 80188aa:	fb92 f2f0 	sdiv	r2, r2, r0
 80188ae:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80188b0:	4628      	mov	r0, r5
 80188b2:	2112      	movs	r1, #18
 80188b4:	f7f2 fe90 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 80188b8:	2000      	movs	r0, #0
 80188ba:	6825      	ldr	r5, [r4, #0]
 80188bc:	f7fa f8ce 	bl	8012a5c <lv_disp_get_dpi>
 80188c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188c4:	3554      	adds	r5, #84	; 0x54
 80188c6:	28ef      	cmp	r0, #239	; 0xef
 80188c8:	f340 845e 	ble.w	8019188 <lv_theme_material_init+0x1a18>
 80188cc:	2000      	movs	r0, #0
 80188ce:	f7fa f8c5 	bl	8012a5c <lv_disp_get_dpi>
 80188d2:	2203      	movs	r2, #3
 80188d4:	2350      	movs	r3, #80	; 0x50
 80188d6:	fb00 3202 	mla	r2, r0, r2, r3
 80188da:	20a0      	movs	r0, #160	; 0xa0
 80188dc:	fb92 f2f0 	sdiv	r2, r2, r0
 80188e0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 80188e2:	4628      	mov	r0, r5
 80188e4:	2113      	movs	r1, #19
 80188e6:	f7f2 fe77 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 80188ea:	2000      	movs	r0, #0
 80188ec:	6825      	ldr	r5, [r4, #0]
 80188ee:	f7fa f8b5 	bl	8012a5c <lv_disp_get_dpi>
 80188f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188f6:	3554      	adds	r5, #84	; 0x54
 80188f8:	28ef      	cmp	r0, #239	; 0xef
 80188fa:	f340 8448 	ble.w	801918e <lv_theme_material_init+0x1a1e>
 80188fe:	2000      	movs	r0, #0
 8018900:	f7fa f8ac 	bl	8012a5c <lv_disp_get_dpi>
 8018904:	2203      	movs	r2, #3
 8018906:	2350      	movs	r3, #80	; 0x50
 8018908:	fb00 3202 	mla	r2, r0, r2, r3
 801890c:	20a0      	movs	r0, #160	; 0xa0
 801890e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018912:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8018914:	4628      	mov	r0, r5
 8018916:	2110      	movs	r1, #16
 8018918:	f7f2 fe5e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 801891c:	2000      	movs	r0, #0
 801891e:	6825      	ldr	r5, [r4, #0]
 8018920:	f7fa f89c 	bl	8012a5c <lv_disp_get_dpi>
 8018924:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018928:	3554      	adds	r5, #84	; 0x54
 801892a:	28ef      	cmp	r0, #239	; 0xef
 801892c:	f340 8432 	ble.w	8019194 <lv_theme_material_init+0x1a24>
 8018930:	2000      	movs	r0, #0
 8018932:	f7fa f893 	bl	8012a5c <lv_disp_get_dpi>
 8018936:	2203      	movs	r2, #3
 8018938:	2350      	movs	r3, #80	; 0x50
 801893a:	fb00 3202 	mla	r2, r0, r2, r3
 801893e:	20a0      	movs	r0, #160	; 0xa0
 8018940:	fb92 f2f0 	sdiv	r2, r2, r0
 8018944:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018946:	2111      	movs	r1, #17
 8018948:	4628      	mov	r0, r5
 801894a:	f7f2 fe45 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->kb_bg);
 801894e:	6820      	ldr	r0, [r4, #0]
 8018950:	306c      	adds	r0, #108	; 0x6c
 8018952:	f7f2 fde7 	bl	800b524 <lv_style_reset>
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
 8018956:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8018958:	2200      	movs	r2, #0
 801895a:	2101      	movs	r1, #1
 801895c:	306c      	adds	r0, #108	; 0x6c
 801895e:	f7f2 fe3b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8018962:	2000      	movs	r0, #0
 8018964:	6825      	ldr	r5, [r4, #0]
 8018966:	f7fa f879 	bl	8012a5c <lv_disp_get_dpi>
 801896a:	283b      	cmp	r0, #59	; 0x3b
 801896c:	f105 056c 	add.w	r5, r5, #108	; 0x6c
 8018970:	f340 8413 	ble.w	801919a <lv_theme_material_init+0x1a2a>
 8018974:	2000      	movs	r0, #0
 8018976:	f7fa f871 	bl	8012a5c <lv_disp_get_dpi>
 801897a:	f100 0214 	add.w	r2, r0, #20
 801897e:	2028      	movs	r0, #40	; 0x28
 8018980:	fb92 f2f0 	sdiv	r2, r2, r0
 8018984:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8018986:	4628      	mov	r0, r5
 8018988:	2130      	movs	r1, #48	; 0x30
 801898a:	f7f2 fe25 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
 801898e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8018990:	2202      	movs	r2, #2
 8018992:	2131      	movs	r1, #49	; 0x31
 8018994:	306c      	adds	r0, #108	; 0x6c
 8018996:	f7f2 fe1f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 801899a:	6820      	ldr	r0, [r4, #0]
 801899c:	f100 056c 	add.w	r5, r0, #108	; 0x6c
 80189a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80189a2:	f010 0002 	ands.w	r0, r0, #2
 80189a6:	f000 83fb 	beq.w	80191a0 <lv_theme_material_init+0x1a30>
 80189aa:	487d      	ldr	r0, [pc, #500]	; (8018ba0 <lv_theme_material_init+0x1430>)
 80189ac:	f7fc ffd6 	bl	801595c <lv_color_hex>
 80189b0:	f000 011f 	and.w	r1, r0, #31
 80189b4:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80189b8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80189bc:	f04f 0200 	mov.w	r2, #0
 80189c0:	f361 0204 	bfi	r2, r1, #0, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 80189c4:	2139      	movs	r1, #57	; 0x39
 80189c6:	f363 124a 	bfi	r2, r3, #5, #6
 80189ca:	f360 22cf 	bfi	r2, r0, #11, #5
 80189ce:	4628      	mov	r0, r5
 80189d0:	f7f2 fe50 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	8a62      	ldrh	r2, [r4, #18]
 80189d8:	f240 4139 	movw	r1, #1081	; 0x439
 80189dc:	306c      	adds	r0, #108	; 0x6c
 80189de:	f7f2 fe49 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 80189e2:	2000      	movs	r0, #0
 80189e4:	6825      	ldr	r5, [r4, #0]
 80189e6:	f7fa f839 	bl	8012a5c <lv_disp_get_dpi>
 80189ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80189ee:	356c      	adds	r5, #108	; 0x6c
 80189f0:	28ef      	cmp	r0, #239	; 0xef
 80189f2:	f340 83d8 	ble.w	80191a6 <lv_theme_material_init+0x1a36>
 80189f6:	2000      	movs	r0, #0
 80189f8:	f7fa f830 	bl	8012a5c <lv_disp_get_dpi>
 80189fc:	2205      	movs	r2, #5
 80189fe:	2350      	movs	r3, #80	; 0x50
 8018a00:	fb00 3202 	mla	r2, r0, r2, r3
 8018a04:	20a0      	movs	r0, #160	; 0xa0
 8018a06:	fb92 f2f0 	sdiv	r2, r2, r0
 8018a0a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8018a0c:	4628      	mov	r0, r5
 8018a0e:	2112      	movs	r1, #18
 8018a10:	f7f2 fde2 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8018a14:	2000      	movs	r0, #0
 8018a16:	6825      	ldr	r5, [r4, #0]
 8018a18:	f7fa f820 	bl	8012a5c <lv_disp_get_dpi>
 8018a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018a20:	356c      	adds	r5, #108	; 0x6c
 8018a22:	28ef      	cmp	r0, #239	; 0xef
 8018a24:	f340 83c1 	ble.w	80191aa <lv_theme_material_init+0x1a3a>
 8018a28:	2000      	movs	r0, #0
 8018a2a:	f7fa f817 	bl	8012a5c <lv_disp_get_dpi>
 8018a2e:	2205      	movs	r2, #5
 8018a30:	2350      	movs	r3, #80	; 0x50
 8018a32:	fb00 3202 	mla	r2, r0, r2, r3
 8018a36:	20a0      	movs	r0, #160	; 0xa0
 8018a38:	fb92 f2f0 	sdiv	r2, r2, r0
 8018a3c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8018a3e:	4628      	mov	r0, r5
 8018a40:	2113      	movs	r1, #19
 8018a42:	f7f2 fdc9 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8018a46:	2000      	movs	r0, #0
 8018a48:	6825      	ldr	r5, [r4, #0]
 8018a4a:	f7fa f807 	bl	8012a5c <lv_disp_get_dpi>
 8018a4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018a52:	356c      	adds	r5, #108	; 0x6c
 8018a54:	28ef      	cmp	r0, #239	; 0xef
 8018a56:	f340 83aa 	ble.w	80191ae <lv_theme_material_init+0x1a3e>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	f7f9 fffe 	bl	8012a5c <lv_disp_get_dpi>
 8018a60:	2205      	movs	r2, #5
 8018a62:	2350      	movs	r3, #80	; 0x50
 8018a64:	fb00 3202 	mla	r2, r0, r2, r3
 8018a68:	20a0      	movs	r0, #160	; 0xa0
 8018a6a:	fb92 f2f0 	sdiv	r2, r2, r0
 8018a6e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8018a70:	4628      	mov	r0, r5
 8018a72:	2110      	movs	r1, #16
 8018a74:	f7f2 fdb0 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8018a78:	2000      	movs	r0, #0
 8018a7a:	6825      	ldr	r5, [r4, #0]
 8018a7c:	f7f9 ffee 	bl	8012a5c <lv_disp_get_dpi>
 8018a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018a84:	356c      	adds	r5, #108	; 0x6c
 8018a86:	28ef      	cmp	r0, #239	; 0xef
 8018a88:	f340 8393 	ble.w	80191b2 <lv_theme_material_init+0x1a42>
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	f7f9 ffe5 	bl	8012a5c <lv_disp_get_dpi>
 8018a92:	2205      	movs	r2, #5
 8018a94:	2350      	movs	r3, #80	; 0x50
 8018a96:	fb00 3202 	mla	r2, r0, r2, r3
 8018a9a:	20a0      	movs	r0, #160	; 0xa0
 8018a9c:	fb92 f2f0 	sdiv	r2, r2, r0
 8018aa0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018aa2:	4628      	mov	r0, r5
 8018aa4:	2111      	movs	r1, #17
 8018aa6:	f7f2 fd97 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 8018aaa:	2000      	movs	r0, #0
 8018aac:	6825      	ldr	r5, [r4, #0]
 8018aae:	f7f9 ffd5 	bl	8012a5c <lv_disp_get_dpi>
 8018ab2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ab6:	356c      	adds	r5, #108	; 0x6c
 8018ab8:	28ef      	cmp	r0, #239	; 0xef
 8018aba:	f340 837c 	ble.w	80191b6 <lv_theme_material_init+0x1a46>
 8018abe:	2000      	movs	r0, #0
 8018ac0:	f7f9 ffcc 	bl	8012a5c <lv_disp_get_dpi>
 8018ac4:	2203      	movs	r2, #3
 8018ac6:	2350      	movs	r3, #80	; 0x50
 8018ac8:	fb00 3202 	mla	r2, r0, r2, r3
 8018acc:	20a0      	movs	r0, #160	; 0xa0
 8018ace:	fb92 f2f0 	sdiv	r2, r2, r0
 8018ad2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8018ad4:	2114      	movs	r1, #20
 8018ad6:	4628      	mov	r0, r5
 8018ad8:	f7f2 fd7e 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->mbox_bg);
 8018adc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 8018ade:	2532      	movs	r5, #50	; 0x32
    lv_style_reset(&styles->mbox_bg);
 8018ae0:	3080      	adds	r0, #128	; 0x80
 8018ae2:	f7f2 fd1f 	bl	800b524 <lv_style_reset>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	6826      	ldr	r6, [r4, #0]
 8018aea:	f7f9 ffb7 	bl	8012a5c <lv_disp_get_dpi>
 8018aee:	4368      	muls	r0, r5
 8018af0:	3680      	adds	r6, #128	; 0x80
 8018af2:	28ef      	cmp	r0, #239	; 0xef
 8018af4:	f340 8361 	ble.w	80191ba <lv_theme_material_init+0x1a4a>
 8018af8:	2000      	movs	r0, #0
 8018afa:	f7f9 ffaf 	bl	8012a5c <lv_disp_get_dpi>
 8018afe:	2250      	movs	r2, #80	; 0x50
 8018b00:	fb00 2205 	mla	r2, r0, r5, r2
 8018b04:	20a0      	movs	r0, #160	; 0xa0
 8018b06:	fb92 f2f0 	sdiv	r2, r2, r0
 8018b0a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int)
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	2150      	movs	r1, #80	; 0x50
 8018b10:	f7f2 fd62 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 8018b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b16:	6820      	ldr	r0, [r4, #0]
 8018b18:	f013 0f02 	tst.w	r3, #2
 8018b1c:	4e21      	ldr	r6, [pc, #132]	; (8018ba4 <lv_theme_material_init+0x1434>)
 8018b1e:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8018b22:	f000 834c 	beq.w	80191be <lv_theme_material_init+0x1a4e>
 8018b26:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color)
 8018b28:	2159      	movs	r1, #89	; 0x59
 8018b2a:	4628      	mov	r0, r5
 8018b2c:	f7f2 fda2 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->sb);
 8018b30:	6820      	ldr	r0, [r4, #0]
 8018b32:	3084      	adds	r0, #132	; 0x84
 8018b34:	f7f2 fcf6 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018b38:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018b3a:	22ff      	movs	r2, #255	; 0xff
 8018b3c:	212c      	movs	r1, #44	; 0x2c
 8018b3e:	3084      	adds	r0, #132	; 0x84
 8018b40:	f7f2 fde6 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
 8018b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b46:	6825      	ldr	r5, [r4, #0]
 8018b48:	079b      	lsls	r3, r3, #30
 8018b4a:	f105 0584 	add.w	r5, r5, #132	; 0x84
 8018b4e:	bf4c      	ite	mi
 8018b50:	4815      	ldrmi	r0, [pc, #84]	; (8018ba8 <lv_theme_material_init+0x1438>)
 8018b52:	4816      	ldrpl	r0, [pc, #88]	; (8018bac <lv_theme_material_init+0x143c>)
 8018b54:	f7fc ff02 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018b58:	2129      	movs	r1, #41	; 0x29
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	4628      	mov	r0, r5
 8018b5e:	f7f2 fd89 	bl	800b674 <_lv_style_set_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018b62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 8018b64:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018b68:	2101      	movs	r1, #1
 8018b6a:	3084      	adds	r0, #132	; 0x84
 8018b6c:	f7f2 fd34 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 8018b70:	2000      	movs	r0, #0
 8018b72:	6825      	ldr	r5, [r4, #0]
 8018b74:	f7f9 ff72 	bl	8012a5c <lv_disp_get_dpi>
 8018b78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8018b7c:	3584      	adds	r5, #132	; 0x84
 8018b7e:	28ef      	cmp	r0, #239	; 0xef
 8018b80:	f340 8323 	ble.w	80191ca <lv_theme_material_init+0x1a5a>
 8018b84:	2000      	movs	r0, #0
 8018b86:	f7f9 ff69 	bl	8012a5c <lv_disp_get_dpi>
 8018b8a:	2207      	movs	r2, #7
 8018b8c:	2350      	movs	r3, #80	; 0x50
 8018b8e:	fb00 3202 	mla	r2, r0, r2, r3
 8018b92:	20a0      	movs	r0, #160	; 0xa0
 8018b94:	fb92 f2f0 	sdiv	r2, r2, r0
 8018b98:	b212      	sxth	r2, r2
 8018b9a:	e009      	b.n	8018bb0 <lv_theme_material_init+0x1440>
 8018b9c:	0802c3fa 	.word	0x0802c3fa
 8018ba0:	003b3e42 	.word	0x003b3e42
 8018ba4:	080229e8 	.word	0x080229e8
 8018ba8:	00cccfd1 	.word	0x00cccfd1
 8018bac:	00777f85 	.word	0x00777f85
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int)
 8018bb0:	4628      	mov	r0, r5
 8018bb2:	2103      	movs	r1, #3
 8018bb4:	f7f2 fd10 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 8018bb8:	2000      	movs	r0, #0
 8018bba:	6825      	ldr	r5, [r4, #0]
 8018bbc:	f7f9 ff4e 	bl	8012a5c <lv_disp_get_dpi>
 8018bc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8018bc4:	3584      	adds	r5, #132	; 0x84
 8018bc6:	28ef      	cmp	r0, #239	; 0xef
 8018bc8:	f340 8301 	ble.w	80191ce <lv_theme_material_init+0x1a5e>
 8018bcc:	2000      	movs	r0, #0
 8018bce:	f7f9 ff45 	bl	8012a5c <lv_disp_get_dpi>
 8018bd2:	2207      	movs	r2, #7
 8018bd4:	2350      	movs	r3, #80	; 0x50
 8018bd6:	fb00 3202 	mla	r2, r0, r2, r3
 8018bda:	20a0      	movs	r0, #160	; 0xa0
 8018bdc:	fb92 f2f0 	sdiv	r2, r2, r0
 8018be0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8018be2:	4628      	mov	r0, r5
 8018be4:	2113      	movs	r1, #19
 8018be6:	f7f2 fcf7 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 8018bea:	2000      	movs	r0, #0
 8018bec:	6825      	ldr	r5, [r4, #0]
 8018bee:	f7f9 ff35 	bl	8012a5c <lv_disp_get_dpi>
 8018bf2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8018bf6:	3584      	adds	r5, #132	; 0x84
 8018bf8:	28ef      	cmp	r0, #239	; 0xef
 8018bfa:	f340 82ea 	ble.w	80191d2 <lv_theme_material_init+0x1a62>
 8018bfe:	2000      	movs	r0, #0
 8018c00:	f7f9 ff2c 	bl	8012a5c <lv_disp_get_dpi>
 8018c04:	2207      	movs	r2, #7
 8018c06:	2350      	movs	r3, #80	; 0x50
 8018c08:	fb00 3202 	mla	r2, r0, r2, r3
 8018c0c:	20a0      	movs	r0, #160	; 0xa0
 8018c0e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018c12:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018c14:	2111      	movs	r1, #17
 8018c16:	4628      	mov	r0, r5
 8018c18:	f7f2 fcde 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->edge_flash);
 8018c1c:	6820      	ldr	r0, [r4, #0]
 8018c1e:	3088      	adds	r0, #136	; 0x88
 8018c20:	f7f2 fc80 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018c24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018c26:	22ff      	movs	r2, #255	; 0xff
 8018c28:	212c      	movs	r1, #44	; 0x2c
 8018c2a:	3088      	adds	r0, #136	; 0x88
 8018c2c:	f7f2 fd70 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
 8018c30:	6820      	ldr	r0, [r4, #0]
 8018c32:	f100 0588 	add.w	r5, r0, #136	; 0x88
 8018c36:	f640 0088 	movw	r0, #2184	; 0x888
 8018c3a:	f7fc fb81 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018c3e:	2129      	movs	r1, #41	; 0x29
 8018c40:	4602      	mov	r2, r0
 8018c42:	4628      	mov	r0, r5
 8018c44:	f7f2 fd16 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->ta_cursor);
 8018c48:	6820      	ldr	r0, [r4, #0]
 8018c4a:	30b8      	adds	r0, #184	; 0xb8
 8018c4c:	f7f2 fc6a 	bl	800b524 <lv_style_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8018c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c52:	6825      	ldr	r5, [r4, #0]
 8018c54:	079f      	lsls	r7, r3, #30
 8018c56:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
 8018c5a:	bf4c      	ite	mi
 8018c5c:	48db      	ldrmi	r0, [pc, #876]	; (8018fcc <lv_theme_material_init+0x185c>)
 8018c5e:	48dc      	ldrpl	r0, [pc, #880]	; (8018fd0 <lv_theme_material_init+0x1860>)
 8018c60:	f7fc fe7c 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8018c64:	2139      	movs	r1, #57	; 0x39
 8018c66:	4602      	mov	r2, r0
 8018c68:	4628      	mov	r0, r5
 8018c6a:	f7f2 fd03 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 8018c6e:	2000      	movs	r0, #0
 8018c70:	6825      	ldr	r5, [r4, #0]
 8018c72:	f7f9 fef3 	bl	8012a5c <lv_disp_get_dpi>
 8018c76:	2877      	cmp	r0, #119	; 0x77
 8018c78:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
 8018c7c:	f340 82ab 	ble.w	80191d6 <lv_theme_material_init+0x1a66>
 8018c80:	2000      	movs	r0, #0
 8018c82:	f7f9 feeb 	bl	8012a5c <lv_disp_get_dpi>
 8018c86:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8018c8a:	2050      	movs	r0, #80	; 0x50
 8018c8c:	fb92 f2f0 	sdiv	r2, r2, r0
 8018c90:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8018c92:	4628      	mov	r0, r5
 8018c94:	2130      	movs	r1, #48	; 0x30
 8018c96:	f7f2 fc9f 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	6825      	ldr	r5, [r4, #0]
 8018c9e:	f7f9 fedd 	bl	8012a5c <lv_disp_get_dpi>
 8018ca2:	28ef      	cmp	r0, #239	; 0xef
 8018ca4:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
 8018ca8:	f340 8297 	ble.w	80191da <lv_theme_material_init+0x1a6a>
 8018cac:	2000      	movs	r0, #0
 8018cae:	f7f9 fed5 	bl	8012a5c <lv_disp_get_dpi>
 8018cb2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8018cb6:	20a0      	movs	r0, #160	; 0xa0
 8018cb8:	fb92 f2f0 	sdiv	r2, r2, r0
 8018cbc:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8018cbe:	4628      	mov	r0, r5
 8018cc0:	2112      	movs	r1, #18
 8018cc2:	f7f2 fc89 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
 8018cc6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8018cc8:	2204      	movs	r2, #4
 8018cca:	2131      	movs	r1, #49	; 0x31
 8018ccc:	30b8      	adds	r0, #184	; 0xb8
 8018cce:	f7f2 fc83 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->ta_placeholder);
 8018cd2:	6820      	ldr	r0, [r4, #0]
 8018cd4:	30bc      	adds	r0, #188	; 0xbc
 8018cd6:	f7f2 fc25 	bl	800b524 <lv_style_reset>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8018cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 8018cdc:	6825      	ldr	r5, [r4, #0]
 8018cde:	0798      	lsls	r0, r3, #30
 8018ce0:	f105 05bc 	add.w	r5, r5, #188	; 0xbc
 8018ce4:	f140 827b 	bpl.w	80191de <lv_theme_material_init+0x1a6e>
 8018ce8:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8018cec:	f7fc fb28 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018cf0:	4602      	mov	r2, r0
 8018cf2:	f248 0189 	movw	r1, #32905	; 0x8089
 8018cf6:	4628      	mov	r0, r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8018cf8:	2564      	movs	r5, #100	; 0x64
 8018cfa:	f7f2 fcbb 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->spinbox_cursor);
 8018cfe:	6820      	ldr	r0, [r4, #0]
 8018d00:	309c      	adds	r0, #156	; 0x9c
 8018d02:	f7f2 fc0f 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018d06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018d08:	22ff      	movs	r2, #255	; 0xff
 8018d0a:	212c      	movs	r1, #44	; 0x2c
 8018d0c:	309c      	adds	r0, #156	; 0x9c
 8018d0e:	f7f2 fcff 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
 8018d12:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018d14:	8a22      	ldrh	r2, [r4, #16]
 8018d16:	2129      	movs	r1, #41	; 0x29
 8018d18:	309c      	adds	r0, #156	; 0x9c
 8018d1a:	f7f2 fcab 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8018d1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018d20:	8832      	ldrh	r2, [r6, #0]
 8018d22:	f248 0189 	movw	r1, #32905	; 0x8089
 8018d26:	309c      	adds	r0, #156	; 0x9c
 8018d28:	f7f2 fca4 	bl	800b674 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8018d2c:	2000      	movs	r0, #0
 8018d2e:	6827      	ldr	r7, [r4, #0]
 8018d30:	f7f9 fe94 	bl	8012a5c <lv_disp_get_dpi>
 8018d34:	4368      	muls	r0, r5
 8018d36:	379c      	adds	r7, #156	; 0x9c
 8018d38:	28ef      	cmp	r0, #239	; 0xef
 8018d3a:	f340 8254 	ble.w	80191e6 <lv_theme_material_init+0x1a76>
 8018d3e:	2000      	movs	r0, #0
 8018d40:	f7f9 fe8c 	bl	8012a5c <lv_disp_get_dpi>
 8018d44:	2250      	movs	r2, #80	; 0x50
 8018d46:	fb00 2205 	mla	r2, r0, r5, r2
 8018d4a:	20a0      	movs	r0, #160	; 0xa0
 8018d4c:	fb92 f2f0 	sdiv	r2, r2, r0
 8018d50:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8018d52:	4638      	mov	r0, r7
 8018d54:	2110      	movs	r1, #16
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8018d56:	2564      	movs	r5, #100	; 0x64
 8018d58:	f7f2 fc3e 	bl	800b5d8 <_lv_style_set_int>
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	6827      	ldr	r7, [r4, #0]
 8018d60:	f7f9 fe7c 	bl	8012a5c <lv_disp_get_dpi>
 8018d64:	4368      	muls	r0, r5
 8018d66:	379c      	adds	r7, #156	; 0x9c
 8018d68:	28ef      	cmp	r0, #239	; 0xef
 8018d6a:	f340 823e 	ble.w	80191ea <lv_theme_material_init+0x1a7a>
 8018d6e:	2000      	movs	r0, #0
 8018d70:	f7f9 fe74 	bl	8012a5c <lv_disp_get_dpi>
 8018d74:	2250      	movs	r2, #80	; 0x50
 8018d76:	fb00 2205 	mla	r2, r0, r5, r2
 8018d7a:	20a0      	movs	r0, #160	; 0xa0
 8018d7c:	fb92 f2f0 	sdiv	r2, r2, r0
 8018d80:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018d82:	2111      	movs	r1, #17
 8018d84:	4638      	mov	r0, r7
 8018d86:	f7f2 fc27 	bl	800b5d8 <_lv_style_set_int>
    list_init();
 8018d8a:	f7fd f8cd 	bl	8015f28 <list_init>
    lv_style_reset(&styles->ddlist_page);
 8018d8e:	6820      	ldr	r0, [r4, #0]
 8018d90:	3058      	adds	r0, #88	; 0x58
 8018d92:	f7f2 fbc7 	bl	800b524 <lv_style_reset>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 8018d96:	2000      	movs	r0, #0
 8018d98:	6825      	ldr	r5, [r4, #0]
 8018d9a:	f7f9 fe5f 	bl	8012a5c <lv_disp_get_dpi>
 8018d9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018da2:	3558      	adds	r5, #88	; 0x58
 8018da4:	0080      	lsls	r0, r0, #2
 8018da6:	28ef      	cmp	r0, #239	; 0xef
 8018da8:	f340 8221 	ble.w	80191ee <lv_theme_material_init+0x1a7e>
 8018dac:	2000      	movs	r0, #0
 8018dae:	f7f9 fe55 	bl	8012a5c <lv_disp_get_dpi>
 8018db2:	2214      	movs	r2, #20
 8018db4:	2350      	movs	r3, #80	; 0x50
 8018db6:	fb00 3202 	mla	r2, r0, r2, r3
 8018dba:	20a0      	movs	r0, #160	; 0xa0
 8018dbc:	fb92 f2f0 	sdiv	r2, r2, r0
 8018dc0:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	f248 0181 	movw	r1, #32897	; 0x8081
 8018dc8:	f7f2 fc06 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
 8018dcc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 8018dce:	2201      	movs	r2, #1
 8018dd0:	2102      	movs	r1, #2
 8018dd2:	3058      	adds	r0, #88	; 0x58
 8018dd4:	f7f2 fc00 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->ddlist_sel);
 8018dd8:	6820      	ldr	r0, [r4, #0]
 8018dda:	305c      	adds	r0, #92	; 0x5c
 8018ddc:	f7f2 fba2 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018de0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018de2:	22ff      	movs	r2, #255	; 0xff
 8018de4:	212c      	movs	r1, #44	; 0x2c
 8018de6:	305c      	adds	r0, #92	; 0x5c
 8018de8:	f7f2 fc92 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
 8018dec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018dee:	8a22      	ldrh	r2, [r4, #16]
 8018df0:	2129      	movs	r1, #41	; 0x29
 8018df2:	305c      	adds	r0, #92	; 0x5c
 8018df4:	f7f2 fc3e 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
 8018df8:	6820      	ldr	r0, [r4, #0]
 8018dfa:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 8018dfe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8018e02:	f7fc fa9d 	bl	8015340 <lv_color_hex3>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018e06:	f248 0189 	movw	r1, #32905	; 0x8089
 8018e0a:	4602      	mov	r2, r0
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f7f2 fc31 	bl	800b674 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8018e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e14:	6825      	ldr	r5, [r4, #0]
 8018e16:	0799      	lsls	r1, r3, #30
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8018e18:	4c6e      	ldr	r4, [pc, #440]	; (8018fd4 <lv_theme_material_init+0x1864>)
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8018e1a:	f105 055c 	add.w	r5, r5, #92	; 0x5c
 8018e1e:	bf4c      	ite	mi
 8018e20:	486d      	ldrmi	r0, [pc, #436]	; (8018fd8 <lv_theme_material_init+0x1868>)
 8018e22:	486e      	ldrpl	r0, [pc, #440]	; (8018fdc <lv_theme_material_init+0x186c>)
 8018e24:	f7fc fd9a 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018e28:	f241 0129 	movw	r1, #4137	; 0x1029
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	4628      	mov	r0, r5
 8018e30:	f7f2 fc20 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8018e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e36:	6825      	ldr	r5, [r4, #0]
 8018e38:	079a      	lsls	r2, r3, #30
 8018e3a:	f105 055c 	add.w	r5, r5, #92	; 0x5c
 8018e3e:	bf4c      	ite	mi
 8018e40:	4867      	ldrmi	r0, [pc, #412]	; (8018fe0 <lv_theme_material_init+0x1870>)
 8018e42:	f06f 407f 	mvnpl.w	r0, #4278190080	; 0xff000000
 8018e46:	f7fc fd89 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018e4a:	f249 0189 	movw	r1, #37001	; 0x9089
 8018e4e:	4602      	mov	r2, r0
 8018e50:	4628      	mov	r0, r5
 8018e52:	f7f2 fc0f 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->roller_bg);
 8018e56:	6820      	ldr	r0, [r4, #0]
 8018e58:	308c      	adds	r0, #140	; 0x8c
 8018e5a:	f7f2 fb63 	bl	800b524 <lv_style_reset>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8018e5e:	2000      	movs	r0, #0
 8018e60:	6825      	ldr	r5, [r4, #0]
 8018e62:	f7f9 fdfb 	bl	8012a5c <lv_disp_get_dpi>
 8018e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e6a:	358c      	adds	r5, #140	; 0x8c
 8018e6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e70:	28ef      	cmp	r0, #239	; 0xef
 8018e72:	f340 81be 	ble.w	80191f2 <lv_theme_material_init+0x1a82>
 8018e76:	2000      	movs	r0, #0
 8018e78:	f7f9 fdf0 	bl	8012a5c <lv_disp_get_dpi>
 8018e7c:	2219      	movs	r2, #25
 8018e7e:	2350      	movs	r3, #80	; 0x50
 8018e80:	fb00 3202 	mla	r2, r0, r2, r3
 8018e84:	20a0      	movs	r0, #160	; 0xa0
 8018e86:	fb92 f2f0 	sdiv	r2, r2, r0
 8018e8a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 8018e8c:	f248 0181 	movw	r1, #32897	; 0x8081
 8018e90:	4628      	mov	r0, r5
 8018e92:	f7f2 fba1 	bl	800b5d8 <_lv_style_set_int>
    lv_style_reset(&styles->roller_sel);
 8018e96:	6820      	ldr	r0, [r4, #0]
 8018e98:	3090      	adds	r0, #144	; 0x90
 8018e9a:	f7f2 fb43 	bl	800b524 <lv_style_reset>
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018e9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
 8018ea0:	22ff      	movs	r2, #255	; 0xff
 8018ea2:	212c      	movs	r1, #44	; 0x2c
 8018ea4:	3090      	adds	r0, #144	; 0x90
 8018ea6:	f7f2 fc33 	bl	800b710 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
 8018eaa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color)
 8018eac:	8a22      	ldrh	r2, [r4, #16]
 8018eae:	2129      	movs	r1, #41	; 0x29
 8018eb0:	3090      	adds	r0, #144	; 0x90
 8018eb2:	f7f2 fbdf 	bl	800b674 <_lv_style_set_color>
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8018eb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color)
 8018eb8:	8832      	ldrh	r2, [r6, #0]
 8018eba:	f248 0189 	movw	r1, #32905	; 0x8089
 8018ebe:	3090      	adds	r0, #144	; 0x90
 8018ec0:	f7f2 fbd8 	bl	800b674 <_lv_style_set_color>
    lv_style_reset(&styles->table_cell);
 8018ec4:	6820      	ldr	r0, [r4, #0]
 8018ec6:	30a4      	adds	r0, #164	; 0xa4
 8018ec8:	f7f2 fb2c 	bl	800b524 <lv_style_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8018ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ece:	6825      	ldr	r5, [r4, #0]
 8018ed0:	079b      	lsls	r3, r3, #30
 8018ed2:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8018ed6:	bf4c      	ite	mi
 8018ed8:	4842      	ldrmi	r0, [pc, #264]	; (8018fe4 <lv_theme_material_init+0x1874>)
 8018eda:	4843      	ldrpl	r0, [pc, #268]	; (8018fe8 <lv_theme_material_init+0x1878>)
 8018edc:	f7fc fd3e 	bl	801595c <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color)
 8018ee0:	2139      	movs	r1, #57	; 0x39
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	4628      	mov	r0, r5
 8018ee6:	f7f2 fbc5 	bl	800b674 <_lv_style_set_color>
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
 8018eea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
 8018eec:	2201      	movs	r2, #1
 8018eee:	2130      	movs	r1, #48	; 0x30
 8018ef0:	30a4      	adds	r0, #164	; 0xa4
 8018ef2:	f7f2 fb71 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8018ef6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
 8018ef8:	2203      	movs	r2, #3
 8018efa:	2131      	movs	r1, #49	; 0x31
 8018efc:	30a4      	adds	r0, #164	; 0xa4
 8018efe:	f7f2 fb6b 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8018f02:	2000      	movs	r0, #0
 8018f04:	6825      	ldr	r5, [r4, #0]
 8018f06:	f7f9 fdb5 	bl	8012a74 <lv_disp_get_size_category>
 8018f0a:	2801      	cmp	r0, #1
 8018f0c:	f04f 0000 	mov.w	r0, #0
 8018f10:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8018f14:	f200 817b 	bhi.w	801920e <lv_theme_material_init+0x1a9e>
 8018f18:	f7f9 fda0 	bl	8012a5c <lv_disp_get_dpi>
 8018f1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018f20:	28ef      	cmp	r0, #239	; 0xef
 8018f22:	f300 8168 	bgt.w	80191f6 <lv_theme_material_init+0x1a86>
 8018f26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8018f28:	4628      	mov	r0, r5
 8018f2a:	2112      	movs	r1, #18
 8018f2c:	f7f2 fb54 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8018f30:	2000      	movs	r0, #0
 8018f32:	6825      	ldr	r5, [r4, #0]
 8018f34:	f7f9 fd9e 	bl	8012a74 <lv_disp_get_size_category>
 8018f38:	2801      	cmp	r0, #1
 8018f3a:	f04f 0000 	mov.w	r0, #0
 8018f3e:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8018f42:	f200 817d 	bhi.w	8019240 <lv_theme_material_init+0x1ad0>
 8018f46:	f7f9 fd89 	bl	8012a5c <lv_disp_get_dpi>
 8018f4a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018f4e:	28ef      	cmp	r0, #239	; 0xef
 8018f50:	f300 816a 	bgt.w	8019228 <lv_theme_material_init+0x1ab8>
 8018f54:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8018f56:	4628      	mov	r0, r5
 8018f58:	2113      	movs	r1, #19
 8018f5a:	f7f2 fb3d 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8018f5e:	2000      	movs	r0, #0
 8018f60:	6825      	ldr	r5, [r4, #0]
 8018f62:	f7f9 fd87 	bl	8012a74 <lv_disp_get_size_category>
 8018f66:	2801      	cmp	r0, #1
 8018f68:	f04f 0000 	mov.w	r0, #0
 8018f6c:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8018f70:	f200 817f 	bhi.w	8019272 <lv_theme_material_init+0x1b02>
 8018f74:	f7f9 fd72 	bl	8012a5c <lv_disp_get_dpi>
 8018f78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018f7c:	28ef      	cmp	r0, #239	; 0xef
 8018f7e:	f300 816c 	bgt.w	801925a <lv_theme_material_init+0x1aea>
 8018f82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8018f84:	4628      	mov	r0, r5
 8018f86:	2110      	movs	r1, #16
 8018f88:	f7f2 fb26 	bl	800b5d8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	6825      	ldr	r5, [r4, #0]
 8018f90:	f7f9 fd70 	bl	8012a74 <lv_disp_get_size_category>
 8018f94:	2801      	cmp	r0, #1
 8018f96:	f04f 0000 	mov.w	r0, #0
 8018f9a:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8018f9e:	f200 8181 	bhi.w	80192a4 <lv_theme_material_init+0x1b34>
 8018fa2:	f7f9 fd5b 	bl	8012a5c <lv_disp_get_dpi>
 8018fa6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018faa:	28ef      	cmp	r0, #239	; 0xef
 8018fac:	f300 816e 	bgt.w	801928c <lv_theme_material_init+0x1b1c>
 8018fb0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8018fb2:	2111      	movs	r1, #17
 8018fb4:	4628      	mov	r0, r5
 8018fb6:	f7f2 fb0f 	bl	800b5d8 <_lv_style_set_int>
    tabview_win_shared_init();
 8018fba:	f7fd faa5 	bl	8016508 <tabview_win_shared_init>
    theme.apply_xcb = NULL;
 8018fbe:	2000      	movs	r0, #0
    theme.apply_cb = theme_apply;
 8018fc0:	4b0a      	ldr	r3, [pc, #40]	; (8018fec <lv_theme_material_init+0x187c>)
    theme.apply_xcb = NULL;
 8018fc2:	60a0      	str	r0, [r4, #8]
    theme.apply_cb = theme_apply;
 8018fc4:	6063      	str	r3, [r4, #4]
    lv_obj_report_style_mod(NULL);
 8018fc6:	f7f0 fa5e 	bl	8009486 <lv_obj_report_style_mod>
 8018fca:	e011      	b.n	8018ff0 <lv_theme_material_init+0x1880>
 8018fcc:	0031404f 	.word	0x0031404f
 8018fd0:	00a5a8ad 	.word	0x00a5a8ad
 8018fd4:	200288d8 	.word	0x200288d8
 8018fd8:	00eeeeee 	.word	0x00eeeeee
 8018fdc:	00494f57 	.word	0x00494f57
 8018fe0:	003b3e42 	.word	0x003b3e42
 8018fe4:	00d6dde3 	.word	0x00d6dde3
 8018fe8:	00808a97 	.word	0x00808a97
 8018fec:	08015381 	.word	0x08015381
    return &theme;
 8018ff0:	48b3      	ldr	r0, [pc, #716]	; (80192c0 <lv_theme_material_init+0x1b50>)
}
 8018ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8018ff6:	882a      	ldrh	r2, [r5, #0]
 8018ff8:	f7fe bc0a 	b.w	8017810 <lv_theme_material_init+0xa0>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	f7fe bc3c 	b.w	801787a <lv_theme_material_init+0x10a>
 8019002:	2201      	movs	r2, #1
 8019004:	f7fe bc39 	b.w	801787a <lv_theme_material_init+0x10a>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 8019008:	882a      	ldrh	r2, [r5, #0]
 801900a:	f7fe bc75 	b.w	80178f8 <lv_theme_material_init+0x188>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 801900e:	2201      	movs	r2, #1
 8019010:	f7fe bcba 	b.w	8017988 <lv_theme_material_init+0x218>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 8019014:	2201      	movs	r2, #1
 8019016:	f7fe bcd6 	b.w	80179c6 <lv_theme_material_init+0x256>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 801901a:	882a      	ldrh	r2, [r5, #0]
 801901c:	f7fe bcf8 	b.w	8017a10 <lv_theme_material_init+0x2a0>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019020:	2201      	movs	r2, #1
 8019022:	f7fe bd15 	b.w	8017a50 <lv_theme_material_init+0x2e0>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019026:	2201      	movs	r2, #1
 8019028:	f7fe bd2b 	b.w	8017a82 <lv_theme_material_init+0x312>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 801902c:	2201      	movs	r2, #1
 801902e:	f7fe bd51 	b.w	8017ad4 <lv_theme_material_init+0x364>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019032:	2201      	movs	r2, #1
 8019034:	f7fe bd67 	b.w	8017b06 <lv_theme_material_init+0x396>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019038:	2201      	movs	r2, #1
 801903a:	f7fe bd82 	b.w	8017b42 <lv_theme_material_init+0x3d2>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801903e:	2201      	movs	r2, #1
 8019040:	f7fe bd99 	b.w	8017b76 <lv_theme_material_init+0x406>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019044:	2201      	movs	r2, #1
 8019046:	f7fe bdb0 	b.w	8017baa <lv_theme_material_init+0x43a>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801904a:	2201      	movs	r2, #1
 801904c:	f7fe bdc7 	b.w	8017bde <lv_theme_material_init+0x46e>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 8019050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019054:	f7fe bdf1 	b.w	8017c3a <lv_theme_material_init+0x4ca>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 8019058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801905c:	f7fe be04 	b.w	8017c68 <lv_theme_material_init+0x4f8>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 8019060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019064:	f7fe be17 	b.w	8017c96 <lv_theme_material_init+0x526>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 8019068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801906c:	f7fe be2a 	b.w	8017cc4 <lv_theme_material_init+0x554>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8019070:	2201      	movs	r2, #1
 8019072:	f7fe be4c 	b.w	8017d0e <lv_theme_material_init+0x59e>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8019076:	2201      	movs	r2, #1
 8019078:	f7fe be63 	b.w	8017d42 <lv_theme_material_init+0x5d2>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 801907c:	2201      	movs	r2, #1
 801907e:	f7fe be7a 	b.w	8017d76 <lv_theme_material_init+0x606>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 8019082:	2201      	movs	r2, #1
 8019084:	f7fe be91 	b.w	8017daa <lv_theme_material_init+0x63a>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 8019088:	2201      	movs	r2, #1
 801908a:	f7fe bea9 	b.w	8017de0 <lv_theme_material_init+0x670>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 801908e:	2201      	movs	r2, #1
 8019090:	f7fe bed8 	b.w	8017e44 <lv_theme_material_init+0x6d4>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 8019094:	2201      	movs	r2, #1
 8019096:	f7fe beee 	b.w	8017e76 <lv_theme_material_init+0x706>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 801909a:	2201      	movs	r2, #1
 801909c:	f7fe bf26 	b.w	8017eec <lv_theme_material_init+0x77c>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 80190a0:	2201      	movs	r2, #1
 80190a2:	f7fe bf39 	b.w	8017f18 <lv_theme_material_init+0x7a8>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 80190a6:	2201      	movs	r2, #1
 80190a8:	f7fe bf4c 	b.w	8017f44 <lv_theme_material_init+0x7d4>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80190ac:	2201      	movs	r2, #1
 80190ae:	f7fe bf64 	b.w	8017f7a <lv_theme_material_init+0x80a>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80190b2:	2201      	movs	r2, #1
 80190b4:	f7fe bf7b 	b.w	8017fae <lv_theme_material_init+0x83e>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80190b8:	2201      	movs	r2, #1
 80190ba:	f7fe bf92 	b.w	8017fe2 <lv_theme_material_init+0x872>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80190be:	2201      	movs	r2, #1
 80190c0:	f7fe bfa9 	b.w	8018016 <lv_theme_material_init+0x8a6>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 80190c4:	2201      	movs	r2, #1
 80190c6:	f7fe bfbf 	b.w	8018048 <lv_theme_material_init+0x8d8>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80190ca:	2201      	movs	r2, #1
 80190cc:	f7fe bffb 	b.w	80180c6 <lv_theme_material_init+0x956>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80190d0:	2201      	movs	r2, #1
 80190d2:	f7ff b80e 	b.w	80180f2 <lv_theme_material_init+0x982>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 80190d6:	2201      	movs	r2, #1
 80190d8:	f7ff b826 	b.w	8018128 <lv_theme_material_init+0x9b8>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 80190dc:	882a      	ldrh	r2, [r5, #0]
 80190de:	f7ff b838 	b.w	8018152 <lv_theme_material_init+0x9e2>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 80190e2:	2201      	movs	r2, #1
 80190e4:	f7ff b84b 	b.w	801817e <lv_theme_material_init+0xa0e>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 80190e8:	882a      	ldrh	r2, [r5, #0]
 80190ea:	f7ff b85d 	b.w	80181a8 <lv_theme_material_init+0xa38>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 80190ee:	2201      	movs	r2, #1
 80190f0:	f7ff b87b 	b.w	80181ea <lv_theme_material_init+0xa7a>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 80190f4:	2201      	movs	r2, #1
 80190f6:	f7ff b892 	b.w	801821e <lv_theme_material_init+0xaae>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 80190fa:	2201      	movs	r2, #1
 80190fc:	f7ff b8b4 	b.w	8018268 <lv_theme_material_init+0xaf8>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8019100:	2201      	movs	r2, #1
 8019102:	f7ff b8f1 	b.w	80182e8 <lv_theme_material_init+0xb78>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8019106:	486f      	ldr	r0, [pc, #444]	; (80192c4 <lv_theme_material_init+0x1b54>)
 8019108:	f7fc fc28 	bl	801595c <lv_color_hex>
 801910c:	f7ff b928 	b.w	8018360 <lv_theme_material_init+0xbf0>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 8019110:	2201      	movs	r2, #1
 8019112:	f7ff b941 	b.w	8018398 <lv_theme_material_init+0xc28>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019116:	2201      	movs	r2, #1
 8019118:	f7ff b958 	b.w	80183cc <lv_theme_material_init+0xc5c>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801911c:	2201      	movs	r2, #1
 801911e:	f7ff b96f 	b.w	8018400 <lv_theme_material_init+0xc90>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 8019122:	2201      	movs	r2, #1
 8019124:	f7ff b998 	b.w	8018458 <lv_theme_material_init+0xce8>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 8019128:	2201      	movs	r2, #1
 801912a:	f7ff b9ab 	b.w	8018484 <lv_theme_material_init+0xd14>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 801912e:	2201      	movs	r2, #1
 8019130:	f7ff b9be 	b.w	80184b0 <lv_theme_material_init+0xd40>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 8019134:	2201      	movs	r2, #1
 8019136:	f7ff b9d1 	b.w	80184dc <lv_theme_material_init+0xd6c>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 801913a:	2201      	movs	r2, #1
 801913c:	f7ff b9ee 	b.w	801851c <lv_theme_material_init+0xdac>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 8019140:	2201      	movs	r2, #1
 8019142:	f7ff ba1a 	b.w	801857a <lv_theme_material_init+0xe0a>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8019146:	2201      	movs	r2, #1
 8019148:	f7ff ba6a 	b.w	8018620 <lv_theme_material_init+0xeb0>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 801914c:	2201      	movs	r2, #1
 801914e:	f7ff ba82 	b.w	8018656 <lv_theme_material_init+0xee6>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8019152:	2201      	movs	r2, #1
 8019154:	f7ff ba9a 	b.w	801868c <lv_theme_material_init+0xf1c>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8019158:	2201      	movs	r2, #1
 801915a:	f7ff bab3 	b.w	80186c4 <lv_theme_material_init+0xf54>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 801915e:	2201      	movs	r2, #1
 8019160:	f7ff baca 	b.w	80186f8 <lv_theme_material_init+0xf88>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019164:	2201      	movs	r2, #1
 8019166:	f7ff bae1 	b.w	801872c <lv_theme_material_init+0xfbc>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 801916a:	2200      	movs	r2, #0
 801916c:	f7ff bb18 	b.w	80187a0 <lv_theme_material_init+0x1030>
 8019170:	2201      	movs	r2, #1
 8019172:	f7ff bb15 	b.w	80187a0 <lv_theme_material_init+0x1030>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019176:	2201      	movs	r2, #1
 8019178:	f7ff bb2c 	b.w	80187d4 <lv_theme_material_init+0x1064>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 801917c:	2201      	movs	r2, #1
 801917e:	f7ff bb56 	b.w	801882e <lv_theme_material_init+0x10be>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8019182:	2201      	movs	r2, #1
 8019184:	f7ff bb94 	b.w	80188b0 <lv_theme_material_init+0x1140>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8019188:	2201      	movs	r2, #1
 801918a:	f7ff bbaa 	b.w	80188e2 <lv_theme_material_init+0x1172>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 801918e:	2201      	movs	r2, #1
 8019190:	f7ff bbc0 	b.w	8018914 <lv_theme_material_init+0x11a4>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8019194:	2201      	movs	r2, #1
 8019196:	f7ff bbd6 	b.w	8018946 <lv_theme_material_init+0x11d6>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 801919a:	2201      	movs	r2, #1
 801919c:	f7ff bbf3 	b.w	8018986 <lv_theme_material_init+0x1216>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 80191a0:	4603      	mov	r3, r0
 80191a2:	4601      	mov	r1, r0
 80191a4:	e40a      	b.n	80189bc <lv_theme_material_init+0x124c>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 80191a6:	2201      	movs	r2, #1
 80191a8:	e430      	b.n	8018a0c <lv_theme_material_init+0x129c>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 80191aa:	2201      	movs	r2, #1
 80191ac:	e447      	b.n	8018a3e <lv_theme_material_init+0x12ce>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 80191ae:	2201      	movs	r2, #1
 80191b0:	e45e      	b.n	8018a70 <lv_theme_material_init+0x1300>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 80191b2:	2201      	movs	r2, #1
 80191b4:	e475      	b.n	8018aa2 <lv_theme_material_init+0x1332>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 80191b6:	2201      	movs	r2, #1
 80191b8:	e48c      	b.n	8018ad4 <lv_theme_material_init+0x1364>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 80191ba:	2201      	movs	r2, #1
 80191bc:	e4a6      	b.n	8018b0c <lv_theme_material_init+0x139c>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 80191be:	f640 1099 	movw	r0, #2457	; 0x999
 80191c2:	f7fc f8bd 	bl	8015340 <lv_color_hex3>
 80191c6:	4602      	mov	r2, r0
 80191c8:	e4ae      	b.n	8018b28 <lv_theme_material_init+0x13b8>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 80191ca:	2201      	movs	r2, #1
 80191cc:	e4f0      	b.n	8018bb0 <lv_theme_material_init+0x1440>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80191ce:	2201      	movs	r2, #1
 80191d0:	e507      	b.n	8018be2 <lv_theme_material_init+0x1472>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80191d2:	2201      	movs	r2, #1
 80191d4:	e51e      	b.n	8018c14 <lv_theme_material_init+0x14a4>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 80191d6:	2201      	movs	r2, #1
 80191d8:	e55b      	b.n	8018c92 <lv_theme_material_init+0x1522>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 80191da:	2201      	movs	r2, #1
 80191dc:	e56f      	b.n	8018cbe <lv_theme_material_init+0x154e>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80191de:	4839      	ldr	r0, [pc, #228]	; (80192c4 <lv_theme_material_init+0x1b54>)
 80191e0:	f7fc fbbc 	bl	801595c <lv_color_hex>
 80191e4:	e584      	b.n	8018cf0 <lv_theme_material_init+0x1580>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 80191e6:	2201      	movs	r2, #1
 80191e8:	e5b3      	b.n	8018d52 <lv_theme_material_init+0x15e2>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 80191ea:	2201      	movs	r2, #1
 80191ec:	e5c9      	b.n	8018d82 <lv_theme_material_init+0x1612>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 80191ee:	2201      	movs	r2, #1
 80191f0:	e5e7      	b.n	8018dc2 <lv_theme_material_init+0x1652>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 80191f2:	2201      	movs	r2, #1
 80191f4:	e64a      	b.n	8018e8c <lv_theme_material_init+0x171c>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 80191f6:	2000      	movs	r0, #0
 80191f8:	f7f9 fc30 	bl	8012a5c <lv_disp_get_dpi>
 80191fc:	220f      	movs	r2, #15
 80191fe:	2350      	movs	r3, #80	; 0x50
 8019200:	fb00 3202 	mla	r2, r0, r2, r3
 8019204:	20a0      	movs	r0, #160	; 0xa0
 8019206:	fb92 f2f0 	sdiv	r2, r2, r0
 801920a:	b212      	sxth	r2, r2
 801920c:	e68c      	b.n	8018f28 <lv_theme_material_init+0x17b8>
 801920e:	f7f9 fc25 	bl	8012a5c <lv_disp_get_dpi>
 8019212:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019216:	0040      	lsls	r0, r0, #1
 8019218:	28ef      	cmp	r0, #239	; 0xef
 801921a:	f77f ae84 	ble.w	8018f26 <lv_theme_material_init+0x17b6>
 801921e:	2000      	movs	r0, #0
 8019220:	f7f9 fc1c 	bl	8012a5c <lv_disp_get_dpi>
 8019224:	221e      	movs	r2, #30
 8019226:	e7ea      	b.n	80191fe <lv_theme_material_init+0x1a8e>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8019228:	2000      	movs	r0, #0
 801922a:	f7f9 fc17 	bl	8012a5c <lv_disp_get_dpi>
 801922e:	220f      	movs	r2, #15
 8019230:	2350      	movs	r3, #80	; 0x50
 8019232:	fb00 3202 	mla	r2, r0, r2, r3
 8019236:	20a0      	movs	r0, #160	; 0xa0
 8019238:	fb92 f2f0 	sdiv	r2, r2, r0
 801923c:	b212      	sxth	r2, r2
 801923e:	e68a      	b.n	8018f56 <lv_theme_material_init+0x17e6>
 8019240:	f7f9 fc0c 	bl	8012a5c <lv_disp_get_dpi>
 8019244:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019248:	0040      	lsls	r0, r0, #1
 801924a:	28ef      	cmp	r0, #239	; 0xef
 801924c:	f77f ae82 	ble.w	8018f54 <lv_theme_material_init+0x17e4>
 8019250:	2000      	movs	r0, #0
 8019252:	f7f9 fc03 	bl	8012a5c <lv_disp_get_dpi>
 8019256:	221e      	movs	r2, #30
 8019258:	e7ea      	b.n	8019230 <lv_theme_material_init+0x1ac0>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801925a:	2000      	movs	r0, #0
 801925c:	f7f9 fbfe 	bl	8012a5c <lv_disp_get_dpi>
 8019260:	220f      	movs	r2, #15
 8019262:	2350      	movs	r3, #80	; 0x50
 8019264:	fb00 3202 	mla	r2, r0, r2, r3
 8019268:	20a0      	movs	r0, #160	; 0xa0
 801926a:	fb92 f2f0 	sdiv	r2, r2, r0
 801926e:	b212      	sxth	r2, r2
 8019270:	e688      	b.n	8018f84 <lv_theme_material_init+0x1814>
 8019272:	f7f9 fbf3 	bl	8012a5c <lv_disp_get_dpi>
 8019276:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801927a:	0040      	lsls	r0, r0, #1
 801927c:	28ef      	cmp	r0, #239	; 0xef
 801927e:	f77f ae80 	ble.w	8018f82 <lv_theme_material_init+0x1812>
 8019282:	2000      	movs	r0, #0
 8019284:	f7f9 fbea 	bl	8012a5c <lv_disp_get_dpi>
 8019288:	221e      	movs	r2, #30
 801928a:	e7ea      	b.n	8019262 <lv_theme_material_init+0x1af2>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801928c:	2000      	movs	r0, #0
 801928e:	f7f9 fbe5 	bl	8012a5c <lv_disp_get_dpi>
 8019292:	220f      	movs	r2, #15
 8019294:	2350      	movs	r3, #80	; 0x50
 8019296:	fb00 3202 	mla	r2, r0, r2, r3
 801929a:	20a0      	movs	r0, #160	; 0xa0
 801929c:	fb92 f2f0 	sdiv	r2, r2, r0
 80192a0:	b212      	sxth	r2, r2
 80192a2:	e686      	b.n	8018fb2 <lv_theme_material_init+0x1842>
 80192a4:	f7f9 fbda 	bl	8012a5c <lv_disp_get_dpi>
 80192a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80192ac:	0040      	lsls	r0, r0, #1
 80192ae:	28ef      	cmp	r0, #239	; 0xef
 80192b0:	f77f ae7e 	ble.w	8018fb0 <lv_theme_material_init+0x1840>
 80192b4:	2000      	movs	r0, #0
 80192b6:	f7f9 fbd1 	bl	8012a5c <lv_disp_get_dpi>
 80192ba:	221e      	movs	r2, #30
 80192bc:	e7ea      	b.n	8019294 <lv_theme_material_init+0x1b24>
 80192be:	bf00      	nop
 80192c0:	200288dc 	.word	0x200288dc
 80192c4:	00a1adbd 	.word	0x00a1adbd

080192c8 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80192c8:	8883      	ldrh	r3, [r0, #4]
 80192ca:	8800      	ldrh	r0, [r0, #0]
 80192cc:	3301      	adds	r3, #1
 80192ce:	1a18      	subs	r0, r3, r0
}
 80192d0:	b200      	sxth	r0, r0
 80192d2:	4770      	bx	lr

080192d4 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80192d4:	88c3      	ldrh	r3, [r0, #6]
 80192d6:	8840      	ldrh	r0, [r0, #2]
 80192d8:	3301      	adds	r3, #1
 80192da:	1a18      	subs	r0, r3, r0
}
 80192dc:	b200      	sxth	r0, r0
 80192de:	4770      	bx	lr

080192e0 <lv_bar_anim_ready>:
    var->anim_state    = value;
    lv_obj_invalidate(var->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
 80192e0:	b510      	push	{r4, lr}
    lv_bar_anim_t * var = a->var;
 80192e2:	6804      	ldr	r4, [r0, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(var->bar);
 80192e4:	6820      	ldr	r0, [r4, #0]
 80192e6:	f7f0 f989 	bl	80095fc <lv_obj_get_ext_attr>
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 80192ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80192ee:	8123      	strh	r3, [r4, #8]
    if(var == &ext->cur_value_anim)
 80192f0:	f100 0314 	add.w	r3, r0, #20
 80192f4:	429c      	cmp	r4, r3
 80192f6:	d106      	bne.n	8019306 <lv_bar_anim_ready+0x26>
        ext->cur_value = var->anim_end;
 80192f8:	8b43      	ldrh	r3, [r0, #26]
 80192fa:	8003      	strh	r3, [r0, #0]
    else if(var == &ext->start_value_anim)
        ext->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 80192fc:	6820      	ldr	r0, [r4, #0]
}
 80192fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(var->bar);
 8019302:	f7ee be53 	b.w	8007fac <lv_obj_invalidate>
    else if(var == &ext->start_value_anim)
 8019306:	f100 0320 	add.w	r3, r0, #32
 801930a:	429c      	cmp	r4, r3
        ext->start_value = var->anim_end;
 801930c:	bf04      	itt	eq
 801930e:	8cc3      	ldrheq	r3, [r0, #38]	; 0x26
 8019310:	80c3      	strheq	r3, [r0, #6]
 8019312:	e7f3      	b.n	80192fc <lv_bar_anim_ready+0x1c>

08019314 <lv_bar_anim>:
    var->anim_state    = value;
 8019314:	8101      	strh	r1, [r0, #8]
    lv_obj_invalidate(var->bar);
 8019316:	6800      	ldr	r0, [r0, #0]
 8019318:	f7ee be48 	b.w	8007fac <lv_obj_invalidate>

0801931c <lv_bar_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801931c:	2908      	cmp	r1, #8
{
 801931e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019322:	4604      	mov	r4, r0
 8019324:	460d      	mov	r5, r1
 8019326:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 8019328:	d124      	bne.n	8019374 <lv_bar_signal+0x58>
        info->result = lv_bar_get_style(bar, info->part);
 801932a:	7815      	ldrb	r5, [r2, #0]
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 801932c:	f7fa f964 	bl	80135f8 <lv_debug_check_null>
 8019330:	4603      	mov	r3, r0
 8019332:	b920      	cbnz	r0, 801933e <lv_bar_signal+0x22>
 8019334:	4622      	mov	r2, r4
 8019336:	4827      	ldr	r0, [pc, #156]	; (80193d4 <lv_bar_signal+0xb8>)
 8019338:	f7fa f962 	bl	8013600 <lv_debug_log_error>
 801933c:	e7fe      	b.n	801933c <lv_bar_signal+0x20>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801933e:	4620      	mov	r0, r4
 8019340:	f7f0 f95c 	bl	80095fc <lv_obj_get_ext_attr>
    switch(part) {
 8019344:	b15d      	cbz	r5, 801935e <lv_bar_signal+0x42>
 8019346:	2d01      	cmp	r5, #1
 8019348:	d012      	beq.n	8019370 <lv_bar_signal+0x54>
        info->result = lv_bar_get_style(bar, info->part);
 801934a:	2300      	movs	r3, #0
 801934c:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(bar, sign, param);
 801934e:	4b22      	ldr	r3, [pc, #136]	; (80193d8 <lv_bar_signal+0xbc>)
 8019350:	463a      	mov	r2, r7
 8019352:	4620      	mov	r0, r4
 8019354:	2108      	movs	r1, #8
 8019356:	681b      	ldr	r3, [r3, #0]
}
 8019358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(bar, sign, param);
 801935c:	4718      	bx	r3
            style_dsc_p = &bar->style_list;
 801935e:	f104 0028 	add.w	r0, r4, #40	; 0x28
        info->result = lv_bar_get_style(bar, info->part);
 8019362:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
 8019364:	2800      	cmp	r0, #0
 8019366:	d0f2      	beq.n	801934e <lv_bar_signal+0x32>
 8019368:	2601      	movs	r6, #1
}
 801936a:	4630      	mov	r0, r6
 801936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = &ext->style_indic;
 8019370:	3030      	adds	r0, #48	; 0x30
 8019372:	e7f6      	b.n	8019362 <lv_bar_signal+0x46>
    res = ancestor_signal(bar, sign, param);
 8019374:	4b18      	ldr	r3, [pc, #96]	; (80193d8 <lv_bar_signal+0xbc>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801937a:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 801937c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801937e:	d1f4      	bne.n	801936a <lv_bar_signal+0x4e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8019380:	2d07      	cmp	r5, #7
 8019382:	d105      	bne.n	8019390 <lv_bar_signal+0x74>
 8019384:	4638      	mov	r0, r7
 8019386:	4915      	ldr	r1, [pc, #84]	; (80193dc <lv_bar_signal+0xc0>)
}
 8019388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801938c:	f7f0 ba40 	b.w	8009810 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8019390:	2d06      	cmp	r5, #6
 8019392:	d10a      	bne.n	80193aa <lv_bar_signal+0x8e>
        indic_size = lv_obj_get_draw_rect_ext_pad_size(bar, LV_BAR_PART_INDIC);
 8019394:	4601      	mov	r1, r0
 8019396:	4620      	mov	r0, r4
 8019398:	f7f1 fa04 	bl	800a7a4 <lv_obj_get_draw_rect_ext_pad_size>
        bar->ext_draw_pad = LV_MATH_MAX(bar->ext_draw_pad, indic_size);
 801939c:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 80193a0:	4298      	cmp	r0, r3
 80193a2:	bfb8      	it	lt
 80193a4:	4618      	movlt	r0, r3
 80193a6:	8660      	strh	r0, [r4, #50]	; 0x32
 80193a8:	e7df      	b.n	801936a <lv_bar_signal+0x4e>
    if(sign == LV_SIGNAL_CLEANUP) {
 80193aa:	2d00      	cmp	r5, #0
 80193ac:	d1dc      	bne.n	8019368 <lv_bar_signal+0x4c>
        lv_obj_clean_style_list(bar, LV_BAR_PART_INDIC);
 80193ae:	4601      	mov	r1, r0
 80193b0:	4620      	mov	r0, r4
 80193b2:	f7ee fd07 	bl	8007dc4 <lv_obj_clean_style_list>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80193b6:	4620      	mov	r0, r4
 80193b8:	f7f0 f920 	bl	80095fc <lv_obj_get_ext_attr>
 80193bc:	4604      	mov	r4, r0
        lv_anim_del(&ext->cur_value_anim, NULL);
 80193be:	4629      	mov	r1, r5
 80193c0:	3014      	adds	r0, #20
 80193c2:	f7f9 fdd3 	bl	8012f6c <lv_anim_del>
        lv_anim_del(&ext->start_value_anim, NULL);
 80193c6:	4629      	mov	r1, r5
 80193c8:	f104 0020 	add.w	r0, r4, #32
 80193cc:	f7f9 fdce 	bl	8012f6c <lv_anim_del>
 80193d0:	e7cb      	b.n	801936a <lv_bar_signal+0x4e>
 80193d2:	bf00      	nop
 80193d4:	0802c354 	.word	0x0802c354
 80193d8:	20028904 	.word	0x20028904
 80193dc:	0802c3fe 	.word	0x0802c3fe

080193e0 <lv_bar_set_value_with_anim>:

static void lv_bar_set_value_with_anim(lv_obj_t * bar, int16_t new_value, int16_t * value_ptr,
                                       lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 80193e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193e2:	b093      	sub	sp, #76	; 0x4c
 80193e4:	461c      	mov	r4, r3
 80193e6:	460d      	mov	r5, r1
 80193e8:	4616      	mov	r6, r2
 80193ea:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    if(en == LV_ANIM_OFF) {
 80193ee:	b923      	cbnz	r3, 80193fa <lv_bar_set_value_with_anim+0x1a>
        *value_ptr = new_value;
 80193f0:	8031      	strh	r1, [r6, #0]
        lv_obj_invalidate(bar);
 80193f2:	f7ee fddb 	bl	8007fac <lv_obj_invalidate>
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, ext->anim_time);
        lv_anim_start(&a);
    }
}
 80193f6:	b013      	add	sp, #76	; 0x4c
 80193f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80193fa:	f7f0 f8ff 	bl	80095fc <lv_obj_get_ext_attr>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 80193fe:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019402:	4607      	mov	r7, r0
        lv_anim_del(anim_info, NULL);
 8019404:	2100      	movs	r1, #0
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8019406:	3301      	adds	r3, #1
        lv_anim_del(anim_info, NULL);
 8019408:	4620      	mov	r0, r4
            anim_info->anim_start = *value_ptr;
 801940a:	bf0c      	ite	eq
 801940c:	f9b6 3000 	ldrsheq.w	r3, [r6]
            anim_info->anim_start = anim_info->anim_end;
 8019410:	88e3      	ldrhne	r3, [r4, #6]
            anim_info->anim_end   = new_value;
 8019412:	80e5      	strh	r5, [r4, #6]
            anim_info->anim_start = anim_info->anim_end;
 8019414:	80a3      	strh	r3, [r4, #4]
        *value_ptr = new_value;
 8019416:	8035      	strh	r5, [r6, #0]
        lv_anim_del(anim_info, NULL);
 8019418:	f7f9 fda8 	bl	8012f6c <lv_anim_del>
        lv_anim_init(&a);
 801941c:	a801      	add	r0, sp, #4
 801941e:	f7f9 fd85 	bl	8012f2c <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8019422:	4b09      	ldr	r3, [pc, #36]	; (8019448 <lv_bar_set_value_with_anim+0x68>)
        lv_anim_start(&a);
 8019424:	a801      	add	r0, sp, #4
    a->var     = var;
 8019426:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8019428:	9302      	str	r3, [sp, #8]
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
    a->start = start;
 801942a:	2300      	movs	r3, #0
    a->current = start;
 801942c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    a->end   = end;
 8019430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019434:	9309      	str	r3, [sp, #36]	; 0x24
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8019436:	4b05      	ldr	r3, [pc, #20]	; (801944c <lv_bar_set_value_with_anim+0x6c>)
 8019438:	9304      	str	r3, [sp, #16]
    a->time     = duration;
 801943a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801943e:	930a      	str	r3, [sp, #40]	; 0x28
 8019440:	f7f9 fdbc 	bl	8012fbc <lv_anim_start>
}
 8019444:	e7d7      	b.n	80193f6 <lv_bar_set_value_with_anim+0x16>
 8019446:	bf00      	nop
 8019448:	08019315 	.word	0x08019315
 801944c:	080192e1 	.word	0x080192e1

08019450 <lv_bar_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8019450:	2a02      	cmp	r2, #2
{
 8019452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019456:	4605      	mov	r5, r0
 8019458:	b0b1      	sub	sp, #196	; 0xc4
 801945a:	4688      	mov	r8, r1
 801945c:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 801945e:	d105      	bne.n	801946c <lv_bar_design+0x1c>
        return ancestor_design_f(bar, clip_area, mode);
 8019460:	4b89      	ldr	r3, [pc, #548]	; (8019688 <lv_bar_design+0x238>)
 8019462:	685b      	ldr	r3, [r3, #4]
 8019464:	4798      	blx	r3
}
 8019466:	b031      	add	sp, #196	; 0xc4
 8019468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801946c:	2a00      	cmp	r2, #0
 801946e:	f040 80e9 	bne.w	8019644 <lv_bar_design+0x1f4>
    lv_draw_rect_dsc_init(&draw_dsc);
 8019472:	a81b      	add	r0, sp, #108	; 0x6c
 8019474:	f7f6 fa18 	bl	800f8a8 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 8019478:	2233      	movs	r2, #51	; 0x33
 801947a:	4621      	mov	r1, r4
 801947c:	4628      	mov	r0, r5
 801947e:	f7ef fb15 	bl	8008aac <_lv_obj_get_style_int>
    if(lv_obj_get_style_border_post(bar, LV_BAR_PART_BG)) {
 8019482:	b108      	cbz	r0, 8019488 <lv_bar_design+0x38>
        draw_dsc.border_opa = LV_OPA_TRANSP;
 8019484:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
    draw_dsc.value_opa = LV_OPA_TRANSP;
 8019488:	f04f 0a00 	mov.w	sl, #0
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 801948c:	aa1b      	add	r2, sp, #108	; 0x6c
 801948e:	4628      	mov	r0, r5
 8019490:	4651      	mov	r1, sl
    draw_dsc.value_opa = LV_OPA_TRANSP;
 8019492:	f88d a0b0 	strb.w	sl, [sp, #176]	; 0xb0
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8019496:	f7f0 f9c9 	bl	800982c <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 801949a:	f105 0310 	add.w	r3, r5, #16
 801949e:	aa1b      	add	r2, sp, #108	; 0x6c
 80194a0:	4641      	mov	r1, r8
 80194a2:	4618      	mov	r0, r3
 80194a4:	9303      	str	r3, [sp, #12]
 80194a6:	f7f6 fa23 	bl	800f8f0 <lv_draw_rect>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 80194aa:	4628      	mov	r0, r5
 80194ac:	f7f0 f8a6 	bl	80095fc <lv_obj_get_ext_attr>
 80194b0:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(bar);
 80194b2:	4628      	mov	r0, r5
 80194b4:	f7ef f836 	bl	8008524 <lv_obj_get_base_dir>
 80194b8:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t objw = lv_obj_get_width(bar);
 80194ba:	4628      	mov	r0, r5
 80194bc:	f7ee fc0a 	bl	8007cd4 <lv_obj_get_width>
 80194c0:	4606      	mov	r6, r0
    lv_coord_t objh = lv_obj_get_height(bar);
 80194c2:	4628      	mov	r0, r5
 80194c4:	f7ee fc14 	bl	8007cf0 <lv_obj_get_height>
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 80194c8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    int32_t range = ext->max_value - ext->min_value;
 80194cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
    lv_coord_t objh = lv_obj_get_height(bar);
 80194d0:	4607      	mov	r7, r0
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 80194d2:	f002 0203 	and.w	r2, r2, #3
    int32_t range = ext->max_value - ext->min_value;
 80194d6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 80194da:	2a01      	cmp	r2, #1
    int32_t range = ext->max_value - ext->min_value;
 80194dc:	eba1 0903 	sub.w	r9, r1, r3
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 80194e0:	d175      	bne.n	80195ce <lv_bar_design+0x17e>
 80194e2:	4553      	cmp	r3, sl
 80194e4:	da73      	bge.n	80195ce <lv_bar_design+0x17e>
 80194e6:	4551      	cmp	r1, sl
 80194e8:	dd71      	ble.n	80195ce <lv_bar_design+0x17e>
 80194ea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80194ee:	1ad2      	subs	r2, r2, r3
 80194f0:	4253      	negs	r3, r2
 80194f2:	4153      	adcs	r3, r2
 80194f4:	9302      	str	r3, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 80194f6:	2212      	movs	r2, #18
 80194f8:	2100      	movs	r1, #0
 80194fa:	4628      	mov	r0, r5
 80194fc:	f7ef fad6 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019500:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8019502:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019504:	2100      	movs	r1, #0
 8019506:	4628      	mov	r0, r5
 8019508:	f7ef fad0 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801950c:	2210      	movs	r2, #16
 801950e:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019510:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8019512:	4628      	mov	r0, r5
 8019514:	f7ef faca 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8019518:	2211      	movs	r2, #17
 801951a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801951c:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801951e:	4628      	mov	r0, r5
 8019520:	f7ef fac4 	bl	8008aac <_lv_obj_get_style_int>
    lv_area_copy(&ext->indic_area, &bar->coords);
 8019524:	f104 0308 	add.w	r3, r4, #8
 8019528:	f105 010f 	add.w	r1, r5, #15
 801952c:	f104 0c10 	add.w	ip, r4, #16
 8019530:	9301      	str	r3, [sp, #4]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 8019532:	461a      	mov	r2, r3
 8019534:	9b04      	ldr	r3, [sp, #16]
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8019536:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 801953a:	f802 eb01 	strb.w	lr, [r2], #1
    while(len) {
 801953e:	4562      	cmp	r2, ip
 8019540:	d1f9      	bne.n	8019536 <lv_bar_design+0xe6>
    ext->indic_area.x1 += bg_left;
 8019542:	b29b      	uxth	r3, r3
 8019544:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 8019548:	42be      	cmp	r6, r7
    ext->indic_area.x1 += bg_left;
 801954a:	449c      	add	ip, r3
 801954c:	9304      	str	r3, [sp, #16]
    ext->indic_area.x2 -= bg_right;
 801954e:	fa1f f38b 	uxth.w	r3, fp
    ext->indic_area.x1 += bg_left;
 8019552:	fa1f fc8c 	uxth.w	ip, ip
    ext->indic_area.x2 -= bg_right;
 8019556:	9305      	str	r3, [sp, #20]
 8019558:	9a05      	ldr	r2, [sp, #20]
 801955a:	89a3      	ldrh	r3, [r4, #12]
    ext->indic_area.x1 += bg_left;
 801955c:	f8a4 c008 	strh.w	ip, [r4, #8]
    ext->indic_area.x2 -= bg_right;
 8019560:	eba3 0302 	sub.w	r3, r3, r2
    ext->indic_area.y1 += bg_top;
 8019564:	fa1f f28a 	uxth.w	r2, sl
 8019568:	9206      	str	r2, [sp, #24]
    ext->indic_area.x2 -= bg_right;
 801956a:	b29b      	uxth	r3, r3
    ext->indic_area.y1 += bg_top;
 801956c:	8962      	ldrh	r2, [r4, #10]
 801956e:	9906      	ldr	r1, [sp, #24]
    ext->indic_area.x2 -= bg_right;
 8019570:	81a3      	strh	r3, [r4, #12]
    ext->indic_area.y1 += bg_top;
 8019572:	440a      	add	r2, r1
 8019574:	b291      	uxth	r1, r2
    ext->indic_area.y2 -= bg_bottom;
 8019576:	b282      	uxth	r2, r0
    ext->indic_area.y1 += bg_top;
 8019578:	8161      	strh	r1, [r4, #10]
    ext->indic_area.y2 -= bg_bottom;
 801957a:	9207      	str	r2, [sp, #28]
 801957c:	9807      	ldr	r0, [sp, #28]
 801957e:	89e2      	ldrh	r2, [r4, #14]
 8019580:	eba2 0200 	sub.w	r2, r2, r0
 8019584:	b292      	uxth	r2, r2
 8019586:	81e2      	strh	r2, [r4, #14]
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 8019588:	db24      	blt.n	80195d4 <lv_bar_design+0x184>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801958a:	3201      	adds	r2, #1
 801958c:	1a52      	subs	r2, r2, r1
 801958e:	b212      	sxth	r2, r2
 8019590:	2a03      	cmp	r2, #3
 8019592:	dc09      	bgt.n	80195a8 <lv_bar_design+0x158>
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 8019594:	2302      	movs	r3, #2
 8019596:	8a6a      	ldrh	r2, [r5, #18]
 8019598:	fb97 f3f3 	sdiv	r3, r7, r3
 801959c:	4413      	add	r3, r2
 801959e:	b29b      	uxth	r3, r3
 80195a0:	1e9a      	subs	r2, r3, #2
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
 80195a2:	3302      	adds	r3, #2
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 80195a4:	8162      	strh	r2, [r4, #10]
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
 80195a6:	81e3      	strh	r3, [r4, #14]
    lv_coord_t anim_length = hor ? indicw : indich;
 80195a8:	42be      	cmp	r6, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80195aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195ae:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80195b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195b6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80195ba:	da69      	bge.n	8019690 <lv_bar_design+0x240>
 80195bc:	3101      	adds	r1, #1
        axis1 = &ext->indic_area.y1;
 80195be:	f104 000a 	add.w	r0, r4, #10
        axis2 = &ext->indic_area.y2;
 80195c2:	f104 0c0e 	add.w	ip, r4, #14
        indic_length_calc = lv_area_get_height;
 80195c6:	4b31      	ldr	r3, [pc, #196]	; (801968c <lv_bar_design+0x23c>)
 80195c8:	1a89      	subs	r1, r1, r2
 80195ca:	b209      	sxth	r1, r1
 80195cc:	e067      	b.n	801969e <lv_bar_design+0x24e>
    bool sym = false;
 80195ce:	f8cd a008 	str.w	sl, [sp, #8]
 80195d2:	e790      	b.n	80194f6 <lv_bar_design+0xa6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80195d4:	3301      	adds	r3, #1
 80195d6:	eba3 0c0c 	sub.w	ip, r3, ip
    else if(!hor && lv_area_get_width(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 80195da:	fa0f fc8c 	sxth.w	ip, ip
 80195de:	f1bc 0f03 	cmp.w	ip, #3
 80195e2:	dce1      	bgt.n	80195a8 <lv_bar_design+0x158>
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 80195e4:	2302      	movs	r3, #2
 80195e6:	8a2a      	ldrh	r2, [r5, #16]
 80195e8:	fb96 f3f3 	sdiv	r3, r6, r3
 80195ec:	4413      	add	r3, r2
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	1e9a      	subs	r2, r3, #2
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
 80195f2:	3302      	adds	r3, #2
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 80195f4:	8122      	strh	r2, [r4, #8]
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
 80195f6:	81a3      	strh	r3, [r4, #12]
 80195f8:	e7d6      	b.n	80195a8 <lv_bar_design+0x158>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
 80195fa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80195fe:	eba2 020b 	sub.w	r2, r2, fp
 8019602:	434a      	muls	r2, r1
 8019604:	fb92 f2f9 	sdiv	r2, r2, r9
 8019608:	e06c      	b.n	80196e4 <lv_bar_design+0x294>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
 801960a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801960e:	eba3 0e0b 	sub.w	lr, r3, fp
 8019612:	fb01 fe0e 	mul.w	lr, r1, lr
 8019616:	fb9e fef9 	sdiv	lr, lr, r9
 801961a:	e084      	b.n	8019726 <lv_bar_design+0x2d6>
 801961c:	3201      	adds	r2, #1
 801961e:	eba2 020c 	sub.w	r2, r2, ip
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8019622:	b212      	sxth	r2, r2
 8019624:	2a03      	cmp	r2, #3
 8019626:	f300 8148 	bgt.w	80198ba <lv_bar_design+0x46a>
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 801962a:	2302      	movs	r3, #2
 801962c:	fb96 f6f3 	sdiv	r6, r6, r3
 8019630:	8a2b      	ldrh	r3, [r5, #16]
 8019632:	441e      	add	r6, r3
 8019634:	b2b6      	uxth	r6, r6
 8019636:	1eb3      	subs	r3, r6, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8019638:	3602      	adds	r6, #2
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 801963a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801963e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8019642:	e13a      	b.n	80198ba <lv_bar_design+0x46a>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8019644:	2a01      	cmp	r2, #1
 8019646:	d001      	beq.n	801964c <lv_bar_design+0x1fc>
    return LV_DESIGN_RES_OK;
 8019648:	2000      	movs	r0, #0
 801964a:	e70c      	b.n	8019466 <lv_bar_design+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 801964c:	2233      	movs	r2, #51	; 0x33
 801964e:	2100      	movs	r1, #0
 8019650:	f7ef fa2c 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(bar, LV_OBJ_PART_MAIN)) {
 8019654:	2800      	cmp	r0, #0
 8019656:	d0f7      	beq.n	8019648 <lv_bar_design+0x1f8>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8019658:	2400      	movs	r4, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 801965a:	a81b      	add	r0, sp, #108	; 0x6c
 801965c:	f7f6 f924 	bl	800f8a8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
 8019660:	aa1b      	add	r2, sp, #108	; 0x6c
 8019662:	4621      	mov	r1, r4
 8019664:	4628      	mov	r0, r5
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8019666:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 801966a:	f88d 40a2 	strb.w	r4, [sp, #162]	; 0xa2
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 801966e:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8019672:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8019676:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
 801967a:	f7f0 f8d7 	bl	800982c <lv_obj_init_draw_rect_dsc>
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 801967e:	aa1b      	add	r2, sp, #108	; 0x6c
 8019680:	4641      	mov	r1, r8
 8019682:	f105 0010 	add.w	r0, r5, #16
 8019686:	e15d      	b.n	8019944 <lv_bar_design+0x4f4>
 8019688:	20028904 	.word	0x20028904
 801968c:	080192d5 	.word	0x080192d5
 8019690:	1c59      	adds	r1, r3, #1
        axis2 = &ext->indic_area.x2;
 8019692:	f104 0c0c 	add.w	ip, r4, #12
        indic_length_calc = lv_area_get_width;
 8019696:	4bb7      	ldr	r3, [pc, #732]	; (8019974 <lv_bar_design+0x524>)
 8019698:	1a09      	subs	r1, r1, r0
        axis1 = &ext->indic_area.x1;
 801969a:	9801      	ldr	r0, [sp, #4]
 801969c:	b209      	sxth	r1, r1
    if(LV_BAR_IS_ANIMATING(ext->start_value_anim)) {
 801969e:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
        indic_length_calc = lv_area_get_height;
 80196a2:	9308      	str	r3, [sp, #32]
    if(LV_BAR_IS_ANIMATING(ext->start_value_anim)) {
 80196a4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80196a8:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
 80196ac:	d0a5      	beq.n	80195fa <lv_bar_design+0x1aa>
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 80196ae:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 80196b2:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 80196b6:	ebae 0e0b 	sub.w	lr, lr, fp
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 80196ba:	eba3 030b 	sub.w	r3, r3, fp
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 80196be:	fb01 fe0e 	mul.w	lr, r1, lr
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 80196c2:	434b      	muls	r3, r1
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 80196c4:	fb9e fef9 	sdiv	lr, lr, r9
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 80196c8:	fb93 f3f9 	sdiv	r3, r3, r9
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * ext->start_value_anim.anim_state) /
 80196cc:	fa0f f28e 	sxth.w	r2, lr
 80196d0:	b21b      	sxth	r3, r3
 80196d2:	1a9b      	subs	r3, r3, r2
 80196d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80196d8:	fb0a fa03 	mul.w	sl, sl, r3
 80196dc:	fb9a faf2 	sdiv	sl, sl, r2
        anim_start_value_x += anim_start_value_start_x;
 80196e0:	eb0a 020e 	add.w	r2, sl, lr
    if(LV_BAR_IS_ANIMATING(ext->cur_value_anim)) {
 80196e4:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
 80196e8:	b212      	sxth	r2, r2
    if(LV_BAR_IS_ANIMATING(ext->cur_value_anim)) {
 80196ea:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80196ee:	d08c      	beq.n	801960a <lv_bar_design+0x1ba>
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 80196f0:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 80196f4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 80196f8:	ebae 0e0b 	sub.w	lr, lr, fp
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 80196fc:	eba3 030b 	sub.w	r3, r3, fp
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8019700:	fb01 fe0e 	mul.w	lr, r1, lr
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 8019704:	434b      	muls	r3, r1
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8019706:	fb9e fef9 	sdiv	lr, lr, r9
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 801970a:	fb93 f3f9 	sdiv	r3, r3, r9
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801970e:	fa0f fb8e 	sxth.w	fp, lr
 8019712:	b21b      	sxth	r3, r3
 8019714:	eba3 030b 	sub.w	r3, r3, fp
 8019718:	fb0a fa03 	mul.w	sl, sl, r3
                                                      ext->cur_value_anim.anim_state) /
 801971c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019720:	fb9a faf3 	sdiv	sl, sl, r3
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8019724:	44d6      	add	lr, sl
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
 8019726:	fa0f fe8e 	sxth.w	lr, lr
    if(hor && base_dir == LV_BIDI_DIR_RTL) {
 801972a:	42be      	cmp	r6, r7
 801972c:	fa1f fb82 	uxth.w	fp, r2
 8019730:	fa1f fa8e 	uxth.w	sl, lr
 8019734:	f2c0 8109 	blt.w	801994a <lv_bar_design+0x4fa>
 8019738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973a:	2b01      	cmp	r3, #1
 801973c:	d109      	bne.n	8019752 <lv_bar_design+0x302>
        anim_start_value_x = -anim_start_value_x;
 801973e:	4603      	mov	r3, r0
        anim_cur_value_x = -anim_cur_value_x;
 8019740:	f1ca 0e00 	rsb	lr, sl, #0
        anim_start_value_x = -anim_start_value_x;
 8019744:	f1cb 0200 	rsb	r2, fp, #0
 8019748:	4660      	mov	r0, ip
        anim_cur_value_x = -anim_cur_value_x;
 801974a:	fa0f fe8e 	sxth.w	lr, lr
        anim_start_value_x = -anim_start_value_x;
 801974e:	469c      	mov	ip, r3
 8019750:	b212      	sxth	r2, r2
        *axis2 = *axis1 + anim_cur_value_x;
 8019752:	8803      	ldrh	r3, [r0, #0]
 8019754:	449e      	add	lr, r3
 8019756:	f8ac e000 	strh.w	lr, [ip]
        *axis1 += anim_start_value_x;
 801975a:	8803      	ldrh	r3, [r0, #0]
 801975c:	441a      	add	r2, r3
 801975e:	8002      	strh	r2, [r0, #0]
    if(sym) {
 8019760:	9b02      	ldr	r3, [sp, #8]
 8019762:	2b00      	cmp	r3, #0
 8019764:	f000 80fe 	beq.w	8019964 <lv_bar_design+0x514>
        zero = *axis1 + (-ext->min_value * anim_length) / range;
 8019768:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801976c:	425b      	negs	r3, r3
 801976e:	4359      	muls	r1, r3
        if(*axis2 > zero)
 8019770:	f9bc 3000 	ldrsh.w	r3, [ip]
        zero = *axis1 + (-ext->min_value * anim_length) / range;
 8019774:	fb91 f9f9 	sdiv	r9, r1, r9
 8019778:	8801      	ldrh	r1, [r0, #0]
 801977a:	4489      	add	r9, r1
 801977c:	fa0f f989 	sxth.w	r9, r9
        if(*axis2 > zero)
 8019780:	4599      	cmp	r9, r3
            *axis1 = *axis2;
 8019782:	bfaa      	itet	ge
 8019784:	8003      	strhge	r3, [r0, #0]
            *axis1 = zero;
 8019786:	f8a0 9000 	strhlt.w	r9, [r0]
            *axis2 = zero;
 801978a:	f8ac 9000 	strhge.w	r9, [ip]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 801978e:	2201      	movs	r2, #1
 8019790:	2100      	movs	r1, #0
 8019792:	4628      	mov	r0, r5
 8019794:	f7ef f98a 	bl	8008aac <_lv_obj_get_style_int>
    lv_coord_t short_side = LV_MATH_MIN(objw, objh);
 8019798:	42be      	cmp	r6, r7
 801979a:	4633      	mov	r3, r6
    uint16_t bg_radius = lv_obj_get_style_radius(bar, LV_BAR_PART_BG);
 801979c:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t short_side = LV_MATH_MIN(objw, objh);
 80197a0:	bfa8      	it	ge
 80197a2:	463b      	movge	r3, r7
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 80197a4:	a81b      	add	r0, sp, #108	; 0x6c
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 80197a6:	f343 034e 	sbfx	r3, r3, #1, #15
 80197aa:	4599      	cmp	r9, r3
 80197ac:	bfc8      	it	gt
 80197ae:	fa1f f983 	uxthgt.w	r9, r3
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 80197b2:	f7f6 f879 	bl	800f8a8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_INDIC, &draw_indic_dsc);
 80197b6:	2101      	movs	r1, #1
 80197b8:	aa1b      	add	r2, sp, #108	; 0x6c
 80197ba:	4628      	mov	r0, r5
 80197bc:	f7f0 f836 	bl	800982c <lv_obj_init_draw_rect_dsc>
    if((hor && lv_area_get_width(&ext->indic_area) > bg_radius * 2) ||
 80197c0:	42be      	cmp	r6, r7
 80197c2:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80197c6:	bfa9      	itett	ge
 80197c8:	89a3      	ldrhge	r3, [r4, #12]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80197ca:	89e3      	ldrhlt	r3, [r4, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80197cc:	3301      	addge	r3, #1
 80197ce:	8921      	ldrhge	r1, [r4, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80197d0:	bfbc      	itt	lt
 80197d2:	3301      	addlt	r3, #1
 80197d4:	8961      	ldrhlt	r1, [r4, #10]
 80197d6:	1a5b      	subs	r3, r3, r1
       (!hor && lv_area_get_height(&ext->indic_area) > bg_radius * 2)) {
 80197d8:	b21b      	sxth	r3, r3
 80197da:	429a      	cmp	r2, r3
 80197dc:	da1c      	bge.n	8019818 <lv_bar_design+0x3c8>
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80197de:	2200      	movs	r2, #0
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
 80197e0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
        lv_opa_t border_opa = draw_indic_dsc.border_opa;
 80197e4:	f89d b080 	ldrb.w	fp, [sp, #128]	; 0x80
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80197e8:	4641      	mov	r1, r8
        lv_opa_t value_opa = draw_indic_dsc.value_opa;
 80197ea:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
        const void * pattern_src = draw_indic_dsc.pattern_image;
 80197ee:	9c26      	ldr	r4, [sp, #152]	; 0x98
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80197f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
        draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 80197f4:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
        draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 80197f8:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
        draw_indic_dsc.pattern_image = NULL;
 80197fc:	9226      	str	r2, [sp, #152]	; 0x98
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80197fe:	aa1b      	add	r2, sp, #108	; 0x6c
 8019800:	9801      	ldr	r0, [sp, #4]
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
 8019802:	9302      	str	r3, [sp, #8]
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 8019804:	f7f6 f874 	bl	800f8f0 <lv_draw_rect>
        draw_indic_dsc.bg_opa = bg_opa;
 8019808:	9b02      	ldr	r3, [sp, #8]
        draw_indic_dsc.border_opa = border_opa;
 801980a:	f88d b080 	strb.w	fp, [sp, #128]	; 0x80
        draw_indic_dsc.bg_opa = bg_opa;
 801980e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        draw_indic_dsc.value_opa = value_opa;
 8019812:	f88d a0b0 	strb.w	sl, [sp, #176]	; 0xb0
        draw_indic_dsc.pattern_image = pattern_src;
 8019816:	9426      	str	r4, [sp, #152]	; 0x98
    lv_draw_mask_radius_init(&mask_bg_param, &bar->coords, bg_radius, false);
 8019818:	2300      	movs	r3, #0
 801981a:	fa0f f289 	sxth.w	r2, r9
 801981e:	9903      	ldr	r1, [sp, #12]
 8019820:	a80d      	add	r0, sp, #52	; 0x34
 8019822:	f7f5 fcb9 	bl	800f198 <lv_draw_mask_radius_init>
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8019826:	2100      	movs	r1, #0
 8019828:	a80d      	add	r0, sp, #52	; 0x34
        *d8 = *s8;
 801982a:	ac0b      	add	r4, sp, #44	; 0x2c
 801982c:	f7f5 fbbc 	bl	800efa8 <lv_draw_mask_add>
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 8019830:	2300      	movs	r3, #0
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8019832:	4682      	mov	sl, r0
    lv_opa_t border_opa = draw_indic_dsc.border_opa;
 8019834:	f89d b080 	ldrb.w	fp, [sp, #128]	; 0x80
    lv_opa_t value_opa = draw_indic_dsc.value_opa;
 8019838:	f89d 90b0 	ldrb.w	r9, [sp, #176]	; 0xb0
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 801983c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
 8019840:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 8019844:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8019848:	9a03      	ldr	r2, [sp, #12]
 801984a:	5cd2      	ldrb	r2, [r2, r3]
 801984c:	551a      	strb	r2, [r3, r4]
 801984e:	3301      	adds	r3, #1
    while(len) {
 8019850:	2b08      	cmp	r3, #8
 8019852:	d1f9      	bne.n	8019848 <lv_bar_design+0x3f8>
    mask_indic_max_area.x1 += bg_left;
 8019854:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8019858:	42be      	cmp	r6, r7
    mask_indic_max_area.x1 += bg_left;
 801985a:	9a04      	ldr	r2, [sp, #16]
    mask_indic_max_area.y1 += bg_top;
 801985c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    mask_indic_max_area.x1 += bg_left;
 8019860:	441a      	add	r2, r3
    mask_indic_max_area.y2 -= bg_bottom;
 8019862:	9b07      	ldr	r3, [sp, #28]
    mask_indic_max_area.x1 += bg_left;
 8019864:	fa1f fc82 	uxth.w	ip, r2
    mask_indic_max_area.y1 += bg_top;
 8019868:	9a06      	ldr	r2, [sp, #24]
 801986a:	4402      	add	r2, r0
    mask_indic_max_area.x2 -= bg_right;
 801986c:	9805      	ldr	r0, [sp, #20]
    mask_indic_max_area.x1 += bg_left;
 801986e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
    mask_indic_max_area.y1 += bg_top;
 8019872:	b291      	uxth	r1, r2
    mask_indic_max_area.x2 -= bg_right;
 8019874:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8019878:	eba2 0200 	sub.w	r2, r2, r0
    mask_indic_max_area.y2 -= bg_bottom;
 801987c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
    mask_indic_max_area.y1 += bg_top;
 8019880:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    mask_indic_max_area.y2 -= bg_bottom;
 8019884:	eba0 0003 	sub.w	r0, r0, r3
    mask_indic_max_area.x2 -= bg_right;
 8019888:	b292      	uxth	r2, r2
    mask_indic_max_area.y2 -= bg_bottom;
 801988a:	b280      	uxth	r0, r0
    mask_indic_max_area.x2 -= bg_right;
 801988c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    mask_indic_max_area.y2 -= bg_bottom;
 8019890:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8019894:	f6ff aec2 	blt.w	801961c <lv_bar_design+0x1cc>
 8019898:	3001      	adds	r0, #1
 801989a:	1a40      	subs	r0, r0, r1
 801989c:	b200      	sxth	r0, r0
 801989e:	2803      	cmp	r0, #3
 80198a0:	dc0b      	bgt.n	80198ba <lv_bar_design+0x46a>
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 80198a2:	2302      	movs	r3, #2
 80198a4:	fb97 f7f3 	sdiv	r7, r7, r3
 80198a8:	8a6b      	ldrh	r3, [r5, #18]
 80198aa:	441f      	add	r7, r3
 80198ac:	b2bf      	uxth	r7, r7
 80198ae:	1ebb      	subs	r3, r7, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 80198b0:	3702      	adds	r7, #2
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 80198b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 80198b6:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_indic_param, &ext->indic_area, draw_indic_dsc.radius, false);
 80198ba:	2300      	movs	r3, #0
 80198bc:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 80198c0:	9901      	ldr	r1, [sp, #4]
 80198c2:	a814      	add	r0, sp, #80	; 0x50
 80198c4:	f7f5 fc68 	bl	800f198 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 80198c8:	2100      	movs	r1, #0
 80198ca:	a814      	add	r0, sp, #80	; 0x50
 80198cc:	f7f5 fb6c 	bl	800efa8 <lv_draw_mask_add>
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
 80198d0:	aa1b      	add	r2, sp, #108	; 0x6c
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 80198d2:	4606      	mov	r6, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
 80198d4:	4641      	mov	r1, r8
 80198d6:	4620      	mov	r0, r4
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80198d8:	2400      	movs	r4, #0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
 80198da:	f7f6 f809 	bl	800f8f0 <lv_draw_rect>
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80198de:	aa1b      	add	r2, sp, #108	; 0x6c
 80198e0:	4641      	mov	r1, r8
 80198e2:	9801      	ldr	r0, [sp, #4]
    draw_indic_dsc.border_opa = border_opa;
 80198e4:	f88d b080 	strb.w	fp, [sp, #128]	; 0x80
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80198e8:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
 80198ec:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 80198f0:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
    draw_indic_dsc.pattern_image = NULL;
 80198f4:	9426      	str	r4, [sp, #152]	; 0x98
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80198f6:	f7f5 fffb 	bl	800f8f0 <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
 80198fa:	4630      	mov	r0, r6
 80198fc:	f7f5 fb90 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8019900:	4650      	mov	r0, sl
 8019902:	f7f5 fb8d 	bl	800f020 <lv_draw_mask_remove_id>
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 8019906:	aa1b      	add	r2, sp, #108	; 0x6c
 8019908:	4641      	mov	r1, r8
 801990a:	9801      	ldr	r0, [sp, #4]
    draw_indic_dsc.value_opa = value_opa;
 801990c:	f88d 90b0 	strb.w	r9, [sp, #176]	; 0xb0
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 8019910:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 8019914:	f7f5 ffec 	bl	800f8f0 <lv_draw_rect>
        draw_dsc.bg_opa = LV_OPA_TRANSP;
 8019918:	2400      	movs	r4, #0
        lv_draw_rect_dsc_init(&draw_dsc);
 801991a:	a81b      	add	r0, sp, #108	; 0x6c
 801991c:	f7f5 ffc4 	bl	800f8a8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8019920:	aa1b      	add	r2, sp, #108	; 0x6c
 8019922:	4621      	mov	r1, r4
 8019924:	4628      	mov	r0, r5
        draw_dsc.bg_opa = LV_OPA_TRANSP;
 8019926:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
        draw_dsc.border_opa = LV_OPA_TRANSP;
 801992a:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
        draw_dsc.shadow_opa = LV_OPA_TRANSP;
 801992e:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
        draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8019932:	f88d 40a2 	strb.w	r4, [sp, #162]	; 0xa2
        draw_dsc.outline_opa = LV_OPA_TRANSP;
 8019936:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 801993a:	f7ef ff77 	bl	800982c <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 801993e:	aa1b      	add	r2, sp, #108	; 0x6c
 8019940:	4641      	mov	r1, r8
 8019942:	9803      	ldr	r0, [sp, #12]
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 8019944:	f7f5 ffd4 	bl	800f8f0 <lv_draw_rect>
 8019948:	e67e      	b.n	8019648 <lv_bar_design+0x1f8>
        *axis1 = *axis2 - anim_cur_value_x;
 801994a:	f8bc e000 	ldrh.w	lr, [ip]
 801994e:	ebae 0e0a 	sub.w	lr, lr, sl
 8019952:	f8a0 e000 	strh.w	lr, [r0]
        *axis2 -= anim_start_value_x;
 8019956:	f8bc 2000 	ldrh.w	r2, [ip]
 801995a:	eba2 020b 	sub.w	r2, r2, fp
 801995e:	f8ac 2000 	strh.w	r2, [ip]
 8019962:	e6fd      	b.n	8019760 <lv_bar_design+0x310>
    if(!sym && indic_length_calc(&ext->indic_area) <= 1) return;
 8019964:	9801      	ldr	r0, [sp, #4]
 8019966:	9b08      	ldr	r3, [sp, #32]
 8019968:	4798      	blx	r3
 801996a:	2801      	cmp	r0, #1
 801996c:	f73f af0f 	bgt.w	801978e <lv_bar_design+0x33e>
 8019970:	e7d2      	b.n	8019918 <lv_bar_design+0x4c8>
 8019972:	bf00      	nop
 8019974:	080192c9 	.word	0x080192c9

08019978 <lv_bar_set_value>:
{
 8019978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801997a:	4604      	mov	r4, r0
 801997c:	460e      	mov	r6, r1
 801997e:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8019980:	f7f9 fe3a 	bl	80135f8 <lv_debug_check_null>
 8019984:	4603      	mov	r3, r0
 8019986:	b920      	cbnz	r0, 8019992 <lv_bar_set_value+0x1a>
 8019988:	4622      	mov	r2, r4
 801998a:	4812      	ldr	r0, [pc, #72]	; (80199d4 <lv_bar_set_value+0x5c>)
 801998c:	f7f9 fe38 	bl	8013600 <lv_debug_log_error>
 8019990:	e7fe      	b.n	8019990 <lv_bar_set_value+0x18>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019992:	4620      	mov	r0, r4
 8019994:	f7ef fe32 	bl	80095fc <lv_obj_get_ext_attr>
 8019998:	4602      	mov	r2, r0
    if(ext->cur_value == value) return;
 801999a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801999e:	42b0      	cmp	r0, r6
 80199a0:	d016      	beq.n	80199d0 <lv_bar_set_value+0x58>
    new_value = new_value < ext->start_value ? ext->start_value : new_value;
 80199a2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80199a6:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80199aa:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80199ae:	42b9      	cmp	r1, r7
 80199b0:	bfb8      	it	lt
 80199b2:	4639      	movlt	r1, r7
 80199b4:	42b3      	cmp	r3, r6
 80199b6:	bfa8      	it	ge
 80199b8:	4633      	movge	r3, r6
 80199ba:	4299      	cmp	r1, r3
 80199bc:	bfb8      	it	lt
 80199be:	4619      	movlt	r1, r3
    if(ext->cur_value == new_value) return;
 80199c0:	4288      	cmp	r0, r1
 80199c2:	d005      	beq.n	80199d0 <lv_bar_set_value+0x58>
    lv_bar_set_value_with_anim(bar, new_value, &ext->cur_value, &ext->cur_value_anim, anim);
 80199c4:	9500      	str	r5, [sp, #0]
 80199c6:	f102 0314 	add.w	r3, r2, #20
 80199ca:	4620      	mov	r0, r4
 80199cc:	f7ff fd08 	bl	80193e0 <lv_bar_set_value_with_anim>
}
 80199d0:	b003      	add	sp, #12
 80199d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d4:	0802c354 	.word	0x0802c354

080199d8 <lv_bar_create>:
{
 80199d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199dc:	460f      	mov	r7, r1
    lv_obj_t * bar = lv_obj_create(par, copy);
 80199de:	f7ee fdab 	bl	8008538 <lv_obj_create>
 80199e2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(bar);
 80199e4:	f7f9 fe08 	bl	80135f8 <lv_debug_check_null>
 80199e8:	4603      	mov	r3, r0
 80199ea:	b920      	cbnz	r0, 80199f6 <lv_bar_create+0x1e>
 80199ec:	462a      	mov	r2, r5
 80199ee:	4843      	ldr	r0, [pc, #268]	; (8019afc <lv_bar_create+0x124>)
 80199f0:	f7f9 fe06 	bl	8013600 <lv_debug_log_error>
 80199f4:	e7fe      	b.n	80199f4 <lv_bar_create+0x1c>
    if(bar == NULL) return NULL;
 80199f6:	b305      	cbz	r5, 8019a3a <lv_bar_create+0x62>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(bar);
 80199f8:	4c41      	ldr	r4, [pc, #260]	; (8019b00 <lv_bar_create+0x128>)
 80199fa:	6823      	ldr	r3, [r4, #0]
 80199fc:	b91b      	cbnz	r3, 8019a06 <lv_bar_create+0x2e>
 80199fe:	4628      	mov	r0, r5
 8019a00:	f7ef fddc 	bl	80095bc <lv_obj_get_signal_cb>
 8019a04:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(bar);
 8019a06:	6863      	ldr	r3, [r4, #4]
 8019a08:	b91b      	cbnz	r3, 8019a12 <lv_bar_create+0x3a>
 8019a0a:	4628      	mov	r0, r5
 8019a0c:	f7ef fde6 	bl	80095dc <lv_obj_get_design_cb>
 8019a10:	6060      	str	r0, [r4, #4]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(bar, sizeof(lv_bar_ext_t));
 8019a12:	2138      	movs	r1, #56	; 0x38
 8019a14:	4628      	mov	r0, r5
 8019a16:	f7ee f893 	bl	8007b40 <lv_obj_allocate_ext_attr>
 8019a1a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
 8019a1c:	f7f9 fdec 	bl	80135f8 <lv_debug_check_null>
 8019a20:	4603      	mov	r3, r0
 8019a22:	b920      	cbnz	r0, 8019a2e <lv_bar_create+0x56>
 8019a24:	4622      	mov	r2, r4
 8019a26:	4835      	ldr	r0, [pc, #212]	; (8019afc <lv_bar_create+0x124>)
 8019a28:	f7f9 fdea 	bl	8013600 <lv_debug_log_error>
 8019a2c:	e7fe      	b.n	8019a2c <lv_bar_create+0x54>
 8019a2e:	2600      	movs	r6, #0
    if(ext == NULL) {
 8019a30:	b934      	cbnz	r4, 8019a40 <lv_bar_create+0x68>
        lv_obj_del(bar);
 8019a32:	4628      	mov	r0, r5
        return NULL;
 8019a34:	4625      	mov	r5, r4
        lv_obj_del(bar);
 8019a36:	f7ef fe65 	bl	8009704 <lv_obj_del>
}
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->min_value = 0;
 8019a40:	2364      	movs	r3, #100	; 0x64
    lv_style_list_init(&ext->style_indic);
 8019a42:	f104 0830 	add.w	r8, r4, #48	; 0x30
    ext->cur_value = 0;
 8019a46:	6026      	str	r6, [r4, #0]
    ext->min_value = 0;
 8019a48:	6063      	str	r3, [r4, #4]
    ext->anim_time  = 200;
 8019a4a:	23c8      	movs	r3, #200	; 0xc8
    lv_style_list_init(&ext->style_indic);
 8019a4c:	4640      	mov	r0, r8
    ext->anim_time  = 200;
 8019a4e:	8223      	strh	r3, [r4, #16]

static void lv_bar_init_anim(lv_obj_t * bar, lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = bar;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 8019a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a54:	83a3      	strh	r3, [r4, #28]
 8019a56:	8523      	strh	r3, [r4, #40]	; 0x28
    ext->type         = LV_BAR_TYPE_NORMAL;
 8019a58:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019a5c:	f366 0301 	bfi	r3, r6, #0, #2
    bar_anim->anim_start = 0;
 8019a60:	e9c4 5605 	strd	r5, r6, [r4, #20]
    ext->type         = LV_BAR_TYPE_NORMAL;
 8019a64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    bar_anim->anim_start = 0;
 8019a68:	e9c4 5608 	strd	r5, r6, [r4, #32]
    lv_style_list_init(&ext->style_indic);
 8019a6c:	f7f1 fca3 	bl	800b3b6 <lv_style_list_init>
    lv_obj_set_signal_cb(bar, lv_bar_signal);
 8019a70:	4924      	ldr	r1, [pc, #144]	; (8019b04 <lv_bar_create+0x12c>)
 8019a72:	4628      	mov	r0, r5
 8019a74:	f7ee f83e 	bl	8007af4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(bar, lv_bar_design);
 8019a78:	4923      	ldr	r1, [pc, #140]	; (8019b08 <lv_bar_create+0x130>)
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	f7ee f850 	bl	8007b20 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8019a80:	b9a7      	cbnz	r7, 8019aac <lv_bar_create+0xd4>
        lv_obj_set_click(bar, false);
 8019a82:	4639      	mov	r1, r7
 8019a84:	4628      	mov	r0, r5
 8019a86:	f7ed ff7d 	bl	8007984 <lv_obj_set_click>
        lv_obj_set_size(bar, LV_DPI * 2, LV_DPI / 10);
 8019a8a:	4628      	mov	r0, r5
 8019a8c:	220d      	movs	r2, #13
 8019a8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019a92:	f7ee ff15 	bl	80088c0 <lv_obj_set_size>
        lv_bar_set_value(bar, ext->cur_value, false);
 8019a96:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019a9a:	4628      	mov	r0, r5
 8019a9c:	463a      	mov	r2, r7
 8019a9e:	f7ff ff6b 	bl	8019978 <lv_bar_set_value>
        lv_theme_apply(bar, LV_THEME_BAR);
 8019aa2:	2104      	movs	r1, #4
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	f7fb fb85 	bl	80151b4 <lv_theme_apply>
 8019aaa:	e7c6      	b.n	8019a3a <lv_bar_create+0x62>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 8019aac:	4638      	mov	r0, r7
 8019aae:	f7ef fda5 	bl	80095fc <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 8019ab2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        ext->type                = ext_copy->type;
 8019ab6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 8019aba:	f100 0130 	add.w	r1, r0, #48	; 0x30
        ext->min_value          = ext_copy->min_value;
 8019abe:	8063      	strh	r3, [r4, #2]
        ext->start_value        = ext_copy->start_value;
 8019ac0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019ac4:	80e3      	strh	r3, [r4, #6]
        ext->max_value          = ext_copy->max_value;
 8019ac6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019aca:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 8019acc:	f9b0 3000 	ldrsh.w	r3, [r0]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 8019ad0:	4640      	mov	r0, r8
        ext->cur_value          = ext_copy->cur_value;
 8019ad2:	8023      	strh	r3, [r4, #0]
        ext->type                = ext_copy->type;
 8019ad4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019ad8:	f362 0301 	bfi	r3, r2, #0, #2
 8019adc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 8019ae0:	f7f1 ff55 	bl	800b98e <lv_style_list_copy>
        lv_obj_refresh_style(bar, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8019ae4:	22ff      	movs	r2, #255	; 0xff
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	4611      	mov	r1, r2
 8019aea:	f7ef fc11 	bl	8009310 <lv_obj_refresh_style>
        lv_bar_set_value(bar, ext->cur_value, LV_ANIM_OFF);
 8019aee:	4632      	mov	r2, r6
 8019af0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019af4:	4628      	mov	r0, r5
 8019af6:	f7ff ff3f 	bl	8019978 <lv_bar_set_value>
 8019afa:	e79e      	b.n	8019a3a <lv_bar_create+0x62>
 8019afc:	0802c346 	.word	0x0802c346
 8019b00:	20028904 	.word	0x20028904
 8019b04:	0801931d 	.word	0x0801931d
 8019b08:	08019451 	.word	0x08019451

08019b0c <lv_bar_set_start_value>:
{
 8019b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019b0e:	4604      	mov	r4, r0
 8019b10:	460e      	mov	r6, r1
 8019b12:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8019b14:	f7f9 fd70 	bl	80135f8 <lv_debug_check_null>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	b920      	cbnz	r0, 8019b26 <lv_bar_set_start_value+0x1a>
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	4812      	ldr	r0, [pc, #72]	; (8019b68 <lv_bar_set_start_value+0x5c>)
 8019b20:	f7f9 fd6e 	bl	8013600 <lv_debug_log_error>
 8019b24:	e7fe      	b.n	8019b24 <lv_bar_set_start_value+0x18>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019b26:	4620      	mov	r0, r4
 8019b28:	f7ef fd68 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->start_value == start_value) return;
 8019b2c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019b30:	42b2      	cmp	r2, r6
 8019b32:	d017      	beq.n	8019b64 <lv_bar_set_start_value+0x58>
    new_value = new_value > ext->max_value ? ext->max_value : new_value;
 8019b34:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8019b38:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = new_value > ext->max_value ? ext->max_value : new_value;
 8019b3c:	42b3      	cmp	r3, r6
 8019b3e:	bfa8      	it	ge
 8019b40:	4633      	movge	r3, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8019b42:	428b      	cmp	r3, r1
 8019b44:	bfb8      	it	lt
 8019b46:	460b      	movlt	r3, r1
    new_value = new_value > ext->cur_value ? ext->cur_value : new_value;
 8019b48:	f9b0 1000 	ldrsh.w	r1, [r0]
 8019b4c:	4299      	cmp	r1, r3
 8019b4e:	bfa8      	it	ge
 8019b50:	4619      	movge	r1, r3
    if(ext->start_value == new_value) return;
 8019b52:	428a      	cmp	r2, r1
 8019b54:	d006      	beq.n	8019b64 <lv_bar_set_start_value+0x58>
    lv_bar_set_value_with_anim(bar, new_value, &ext->start_value, &ext->start_value_anim, anim);
 8019b56:	f100 0320 	add.w	r3, r0, #32
 8019b5a:	1d82      	adds	r2, r0, #6
 8019b5c:	9500      	str	r5, [sp, #0]
 8019b5e:	4620      	mov	r0, r4
 8019b60:	f7ff fc3e 	bl	80193e0 <lv_bar_set_value_with_anim>
}
 8019b64:	b002      	add	sp, #8
 8019b66:	bd70      	pop	{r4, r5, r6, pc}
 8019b68:	0802c354 	.word	0x0802c354

08019b6c <lv_bar_get_value>:
{
 8019b6c:	b510      	push	{r4, lr}
 8019b6e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8019b70:	f7f9 fd42 	bl	80135f8 <lv_debug_check_null>
 8019b74:	4603      	mov	r3, r0
 8019b76:	b920      	cbnz	r0, 8019b82 <lv_bar_get_value+0x16>
 8019b78:	4622      	mov	r2, r4
 8019b7a:	4808      	ldr	r0, [pc, #32]	; (8019b9c <lv_bar_get_value+0x30>)
 8019b7c:	f7f9 fd40 	bl	8013600 <lv_debug_log_error>
 8019b80:	e7fe      	b.n	8019b80 <lv_bar_get_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019b82:	4620      	mov	r0, r4
 8019b84:	f7ef fd3a 	bl	80095fc <lv_obj_get_ext_attr>
    return LV_BAR_GET_ANIM_VALUE(ext->cur_value, ext->cur_value_anim);
 8019b88:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8019b8c:	3301      	adds	r3, #1
 8019b8e:	bf14      	ite	ne
 8019b90:	f9b0 001a 	ldrshne.w	r0, [r0, #26]
 8019b94:	f9b0 0000 	ldrsheq.w	r0, [r0]
}
 8019b98:	bd10      	pop	{r4, pc}
 8019b9a:	bf00      	nop
 8019b9c:	0802c354 	.word	0x0802c354

08019ba0 <lv_bar_get_start_value>:
{
 8019ba0:	b510      	push	{r4, lr}
 8019ba2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8019ba4:	f7f9 fd28 	bl	80135f8 <lv_debug_check_null>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	b920      	cbnz	r0, 8019bb6 <lv_bar_get_start_value+0x16>
 8019bac:	4622      	mov	r2, r4
 8019bae:	480c      	ldr	r0, [pc, #48]	; (8019be0 <lv_bar_get_start_value+0x40>)
 8019bb0:	f7f9 fd26 	bl	8013600 <lv_debug_log_error>
 8019bb4:	e7fe      	b.n	8019bb4 <lv_bar_get_start_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	f7ef fd20 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->type != LV_BAR_TYPE_CUSTOM) return ext->min_value;
 8019bbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019bc0:	f003 0303 	and.w	r3, r3, #3
 8019bc4:	2b02      	cmp	r3, #2
 8019bc6:	d002      	beq.n	8019bce <lv_bar_get_start_value+0x2e>
 8019bc8:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
}
 8019bcc:	bd10      	pop	{r4, pc}
    return LV_BAR_GET_ANIM_VALUE(ext->start_value, ext->start_value_anim);
 8019bce:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
 8019bd2:	3301      	adds	r3, #1
 8019bd4:	bf14      	ite	ne
 8019bd6:	f9b0 0026 	ldrshne.w	r0, [r0, #38]	; 0x26
 8019bda:	f9b0 0006 	ldrsheq.w	r0, [r0, #6]
 8019bde:	e7f5      	b.n	8019bcc <lv_bar_get_start_value+0x2c>
 8019be0:	0802c354 	.word	0x0802c354

08019be4 <lv_bar_get_type>:
{
 8019be4:	b510      	push	{r4, lr}
 8019be6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8019be8:	f7f9 fd06 	bl	80135f8 <lv_debug_check_null>
 8019bec:	4603      	mov	r3, r0
 8019bee:	b920      	cbnz	r0, 8019bfa <lv_bar_get_type+0x16>
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	4806      	ldr	r0, [pc, #24]	; (8019c0c <lv_bar_get_type+0x28>)
 8019bf4:	f7f9 fd04 	bl	8013600 <lv_debug_log_error>
 8019bf8:	e7fe      	b.n	8019bf8 <lv_bar_get_type+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8019bfa:	4620      	mov	r0, r4
 8019bfc:	f7ef fcfe 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->type;
 8019c00:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
}
 8019c04:	f000 0003 	and.w	r0, r0, #3
 8019c08:	bd10      	pop	{r4, pc}
 8019c0a:	bf00      	nop
 8019c0c:	0802c354 	.word	0x0802c354

08019c10 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 8019c10:	2a02      	cmp	r2, #2
{
 8019c12:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8019c14:	d104      	bne.n	8019c20 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
 8019c16:	4b07      	ldr	r3, [pc, #28]	; (8019c34 <lv_btn_design+0x24>)
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
}
 8019c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(btn, clip_area, mode);
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8019c20:	b91a      	cbnz	r2, 8019c2a <lv_btn_design+0x1a>
        ancestor_design(btn, clip_area, mode);
 8019c22:	4b04      	ldr	r3, [pc, #16]	; (8019c34 <lv_btn_design+0x24>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	4798      	blx	r3
 8019c28:	e001      	b.n	8019c2e <lv_btn_design+0x1e>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8019c2a:	2a01      	cmp	r2, #1
 8019c2c:	d0f9      	beq.n	8019c22 <lv_btn_design+0x12>
}
 8019c2e:	2000      	movs	r0, #0
 8019c30:	bd10      	pop	{r4, pc}
 8019c32:	bf00      	nop
 8019c34:	2002890c 	.word	0x2002890c

08019c38 <lv_btn_create>:
{
 8019c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3a:	460e      	mov	r6, r1
 8019c3c:	4607      	mov	r7, r0
    btn = lv_cont_create(par, copy);
 8019c3e:	f001 fb77 	bl	801b330 <lv_cont_create>
 8019c42:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
 8019c44:	f7f9 fcd8 	bl	80135f8 <lv_debug_check_null>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	b920      	cbnz	r0, 8019c56 <lv_btn_create+0x1e>
 8019c4c:	4622      	mov	r2, r4
 8019c4e:	482a      	ldr	r0, [pc, #168]	; (8019cf8 <lv_btn_create+0xc0>)
 8019c50:	f7f9 fcd6 	bl	8013600 <lv_debug_log_error>
 8019c54:	e7fe      	b.n	8019c54 <lv_btn_create+0x1c>
    if(btn == NULL) return NULL;
 8019c56:	b1fc      	cbz	r4, 8019c98 <lv_btn_create+0x60>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
 8019c58:	4d28      	ldr	r5, [pc, #160]	; (8019cfc <lv_btn_create+0xc4>)
 8019c5a:	686b      	ldr	r3, [r5, #4]
 8019c5c:	b91b      	cbnz	r3, 8019c66 <lv_btn_create+0x2e>
 8019c5e:	4620      	mov	r0, r4
 8019c60:	f7ef fcac 	bl	80095bc <lv_obj_get_signal_cb>
 8019c64:	6068      	str	r0, [r5, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
 8019c66:	682b      	ldr	r3, [r5, #0]
 8019c68:	b91b      	cbnz	r3, 8019c72 <lv_btn_create+0x3a>
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	f7ef fcb6 	bl	80095dc <lv_obj_get_design_cb>
 8019c70:	6028      	str	r0, [r5, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
 8019c72:	2103      	movs	r1, #3
 8019c74:	4620      	mov	r0, r4
 8019c76:	f7ed ff63 	bl	8007b40 <lv_obj_allocate_ext_attr>
 8019c7a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 8019c7c:	f7f9 fcbc 	bl	80135f8 <lv_debug_check_null>
 8019c80:	4603      	mov	r3, r0
 8019c82:	b920      	cbnz	r0, 8019c8e <lv_btn_create+0x56>
 8019c84:	462a      	mov	r2, r5
 8019c86:	481c      	ldr	r0, [pc, #112]	; (8019cf8 <lv_btn_create+0xc0>)
 8019c88:	f7f9 fcba 	bl	8013600 <lv_debug_log_error>
 8019c8c:	e7fe      	b.n	8019c8c <lv_btn_create+0x54>
    if(ext == NULL) {
 8019c8e:	b92d      	cbnz	r5, 8019c9c <lv_btn_create+0x64>
        lv_obj_del(btn);
 8019c90:	4620      	mov	r0, r4
        return NULL;
 8019c92:	462c      	mov	r4, r5
        lv_obj_del(btn);
 8019c94:	f7ef fd36 	bl	8009704 <lv_obj_del>
}
 8019c98:	4620      	mov	r0, r4
 8019c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ext->checkable = 0;
 8019c9c:	78ab      	ldrb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	4917      	ldr	r1, [pc, #92]	; (8019d00 <lv_btn_create+0xc8>)
    ext->checkable = 0;
 8019ca2:	f36f 0300 	bfc	r3, #0, #1
 8019ca6:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 8019ca8:	f7ed ff24 	bl	8007af4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btn, lv_btn_design);
 8019cac:	4915      	ldr	r1, [pc, #84]	; (8019d04 <lv_btn_create+0xcc>)
 8019cae:	4620      	mov	r0, r4
 8019cb0:	f7ed ff36 	bl	8007b20 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8019cb4:	b996      	cbnz	r6, 8019cdc <lv_btn_create+0xa4>
        if(par) {
 8019cb6:	b147      	cbz	r7, 8019cca <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
 8019cb8:	2182      	movs	r1, #130	; 0x82
 8019cba:	4620      	mov	r0, r4
 8019cbc:	222b      	movs	r2, #43	; 0x2b
 8019cbe:	f7ee fdff 	bl	80088c0 <lv_obj_set_size>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8019cc2:	2101      	movs	r1, #1
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	f001 fbad 	bl	801b424 <lv_cont_set_layout>
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
 8019cca:	4620      	mov	r0, r4
 8019ccc:	2101      	movs	r1, #1
 8019cce:	f7ed fe59 	bl	8007984 <lv_obj_set_click>
        lv_theme_apply(btn, LV_THEME_BTN);
 8019cd2:	2105      	movs	r1, #5
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	f7fb fa6d 	bl	80151b4 <lv_theme_apply>
 8019cda:	e7dd      	b.n	8019c98 <lv_btn_create+0x60>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8019cdc:	4630      	mov	r0, r6
 8019cde:	f7ef fc8d 	bl	80095fc <lv_obj_get_ext_attr>
        ext->checkable             = copy_ext->checkable;
 8019ce2:	78ab      	ldrb	r3, [r5, #2]
 8019ce4:	7882      	ldrb	r2, [r0, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8019ce6:	4620      	mov	r0, r4
        ext->checkable             = copy_ext->checkable;
 8019ce8:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8019cec:	22ff      	movs	r2, #255	; 0xff
        ext->checkable             = copy_ext->checkable;
 8019cee:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8019cf0:	4611      	mov	r1, r2
 8019cf2:	f7ef fb0d 	bl	8009310 <lv_obj_refresh_style>
 8019cf6:	e7cf      	b.n	8019c98 <lv_btn_create+0x60>
 8019cf8:	0802c346 	.word	0x0802c346
 8019cfc:	2002890c 	.word	0x2002890c
 8019d00:	08019dad 	.word	0x08019dad
 8019d04:	08019c11 	.word	0x08019c11

08019d08 <lv_btn_set_state>:
{
 8019d08:	b538      	push	{r3, r4, r5, lr}
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 8019d0e:	f7f9 fc73 	bl	80135f8 <lv_debug_check_null>
 8019d12:	4603      	mov	r3, r0
 8019d14:	b920      	cbnz	r0, 8019d20 <lv_btn_set_state+0x18>
 8019d16:	4622      	mov	r2, r4
 8019d18:	4819      	ldr	r0, [pc, #100]	; (8019d80 <lv_btn_set_state+0x78>)
 8019d1a:	f7f9 fc71 	bl	8013600 <lv_debug_log_error>
 8019d1e:	e7fe      	b.n	8019d1e <lv_btn_set_state+0x16>
    switch(state) {
 8019d20:	2d05      	cmp	r5, #5
 8019d22:	d82c      	bhi.n	8019d7e <lv_btn_set_state+0x76>
 8019d24:	e8df f005 	tbb	[pc, r5]
 8019d28:	131f0903 	.word	0x131f0903
 8019d2c:	2519      	.short	0x2519
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
 8019d2e:	2131      	movs	r1, #49	; 0x31
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 8019d30:	4620      	mov	r0, r4
}
 8019d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 8019d36:	f7f0 bd20 	b.w	800a77a <lv_obj_clear_state>
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
 8019d3a:	2121      	movs	r1, #33	; 0x21
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f7f0 fd1c 	bl	800a77a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_PRESSED);
 8019d42:	2110      	movs	r1, #16
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 8019d44:	4620      	mov	r0, r4
}
 8019d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 8019d4a:	f7f0 bd01 	b.w	800a750 <lv_obj_add_state>
            lv_obj_add_state(btn, LV_STATE_CHECKED);
 8019d4e:	2101      	movs	r1, #1
 8019d50:	4620      	mov	r0, r4
 8019d52:	f7f0 fcfd 	bl	800a750 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 8019d56:	2130      	movs	r1, #48	; 0x30
 8019d58:	e7ea      	b.n	8019d30 <lv_btn_set_state+0x28>
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
 8019d5a:	2111      	movs	r1, #17
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	f7f0 fcf7 	bl	800a750 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
 8019d62:	2120      	movs	r1, #32
 8019d64:	e7e4      	b.n	8019d30 <lv_btn_set_state+0x28>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
 8019d66:	2111      	movs	r1, #17
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f7f0 fd06 	bl	800a77a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED);
 8019d6e:	2120      	movs	r1, #32
 8019d70:	e7e8      	b.n	8019d44 <lv_btn_set_state+0x3c>
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
 8019d72:	2110      	movs	r1, #16
 8019d74:	4620      	mov	r0, r4
 8019d76:	f7f0 fd00 	bl	800a77a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 8019d7a:	2121      	movs	r1, #33	; 0x21
 8019d7c:	e7e2      	b.n	8019d44 <lv_btn_set_state+0x3c>
}
 8019d7e:	bd38      	pop	{r3, r4, r5, pc}
 8019d80:	0802c354 	.word	0x0802c354

08019d84 <lv_btn_get_checkable>:
{
 8019d84:	b510      	push	{r4, lr}
 8019d86:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 8019d88:	f7f9 fc36 	bl	80135f8 <lv_debug_check_null>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	b920      	cbnz	r0, 8019d9a <lv_btn_get_checkable+0x16>
 8019d90:	4622      	mov	r2, r4
 8019d92:	4805      	ldr	r0, [pc, #20]	; (8019da8 <lv_btn_get_checkable+0x24>)
 8019d94:	f7f9 fc34 	bl	8013600 <lv_debug_log_error>
 8019d98:	e7fe      	b.n	8019d98 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	f7ef fc2e 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->checkable != 0 ? true : false;
 8019da0:	7880      	ldrb	r0, [r0, #2]
}
 8019da2:	f000 0001 	and.w	r0, r0, #1
 8019da6:	bd10      	pop	{r4, pc}
 8019da8:	0802c354 	.word	0x0802c354

08019dac <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8019dac:	4b31      	ldr	r3, [pc, #196]	; (8019e74 <lv_btn_signal+0xc8>)
{
 8019dae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(btn, sign, param);
 8019db2:	685b      	ldr	r3, [r3, #4]
{
 8019db4:	4604      	mov	r4, r0
 8019db6:	460f      	mov	r7, r1
 8019db8:	4616      	mov	r6, r2
    res = ancestor_signal(btn, sign, param);
 8019dba:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8019dbc:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 8019dbe:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8019dc0:	d106      	bne.n	8019dd0 <lv_btn_signal+0x24>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8019dc2:	2f07      	cmp	r7, #7
 8019dc4:	d108      	bne.n	8019dd8 <lv_btn_signal+0x2c>
 8019dc6:	492c      	ldr	r1, [pc, #176]	; (8019e78 <lv_btn_signal+0xcc>)
 8019dc8:	4630      	mov	r0, r6
 8019dca:	f7ef fd21 	bl	8009810 <lv_obj_handle_get_type_signal>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
            if(lv_btn_get_checkable(btn)) {
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);

                uint32_t state = 0;
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8019dce:	4605      	mov	r5, r0
        }
#endif
    }

    return res;
}
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	b002      	add	sp, #8
 8019dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool tgl           = lv_btn_get_checkable(btn);
 8019dd8:	4620      	mov	r0, r4
 8019dda:	f7ff ffd3 	bl	8019d84 <lv_btn_get_checkable>
    if(sign == LV_SIGNAL_RELEASED) {
 8019dde:	2f0e      	cmp	r7, #14
    bool tgl           = lv_btn_get_checkable(btn);
 8019de0:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
 8019de2:	d120      	bne.n	8019e26 <lv_btn_signal+0x7a>
        if(lv_indev_is_dragging(param) == false && tgl) {
 8019de4:	4630      	mov	r0, r6
 8019de6:	f7ec fd3c 	bl	8006862 <lv_indev_is_dragging>
 8019dea:	4606      	mov	r6, r0
 8019dec:	2800      	cmp	r0, #0
 8019dee:	d1ef      	bne.n	8019dd0 <lv_btn_signal+0x24>
 8019df0:	f1b8 0f00 	cmp.w	r8, #0
 8019df4:	d0ec      	beq.n	8019dd0 <lv_btn_signal+0x24>
            uint32_t toggled = 0;
 8019df6:	9001      	str	r0, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
 8019df8:	4601      	mov	r1, r0
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	f7ee fdfe 	bl	80089fc <lv_obj_get_state>
 8019e00:	07c3      	lsls	r3, r0, #31
 8019e02:	d50a      	bpl.n	8019e1a <lv_btn_signal+0x6e>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
 8019e04:	4631      	mov	r1, r6
 8019e06:	4620      	mov	r0, r4
 8019e08:	f7ff ff7e 	bl	8019d08 <lv_btn_set_state>
                toggled = 0;
 8019e0c:	9601      	str	r6, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 8019e0e:	aa01      	add	r2, sp, #4
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8019e10:	2110      	movs	r1, #16
 8019e12:	4620      	mov	r0, r4
 8019e14:	f7ed fe4e 	bl	8007ab4 <lv_event_send>
 8019e18:	e7d9      	b.n	8019dce <lv_btn_signal+0x22>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
 8019e1a:	2103      	movs	r1, #3
 8019e1c:	4620      	mov	r0, r4
 8019e1e:	f7ff ff73 	bl	8019d08 <lv_btn_set_state>
                toggled = 1;
 8019e22:	9501      	str	r5, [sp, #4]
 8019e24:	e7f3      	b.n	8019e0e <lv_btn_signal+0x62>
    else if(sign == LV_SIGNAL_CONTROL) {
 8019e26:	2f18      	cmp	r7, #24
 8019e28:	d1d2      	bne.n	8019dd0 <lv_btn_signal+0x24>
        char c = *((char *)param);
 8019e2a:	7833      	ldrb	r3, [r6, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8019e2c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8019e30:	2a11      	cmp	r2, #17
 8019e32:	d10c      	bne.n	8019e4e <lv_btn_signal+0xa2>
            if(lv_btn_get_checkable(btn)) {
 8019e34:	4620      	mov	r0, r4
 8019e36:	f7ff ffa5 	bl	8019d84 <lv_btn_get_checkable>
 8019e3a:	2800      	cmp	r0, #0
 8019e3c:	d0c8      	beq.n	8019dd0 <lv_btn_signal+0x24>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
 8019e3e:	2103      	movs	r1, #3
 8019e40:	4620      	mov	r0, r4
 8019e42:	f7ff ff61 	bl	8019d08 <lv_btn_set_state>
                uint32_t state = 1;
 8019e46:	aa02      	add	r2, sp, #8
 8019e48:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019e4c:	e7e0      	b.n	8019e10 <lv_btn_signal+0x64>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8019e4e:	2b14      	cmp	r3, #20
 8019e50:	d001      	beq.n	8019e56 <lv_btn_signal+0xaa>
 8019e52:	2b12      	cmp	r3, #18
 8019e54:	d1bc      	bne.n	8019dd0 <lv_btn_signal+0x24>
            if(lv_btn_get_checkable(btn)) {
 8019e56:	4620      	mov	r0, r4
 8019e58:	f7ff ff94 	bl	8019d84 <lv_btn_get_checkable>
 8019e5c:	2800      	cmp	r0, #0
 8019e5e:	d0b7      	beq.n	8019dd0 <lv_btn_signal+0x24>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
 8019e60:	2100      	movs	r1, #0
 8019e62:	4620      	mov	r0, r4
 8019e64:	f7ff ff50 	bl	8019d08 <lv_btn_set_state>
                uint32_t state = 0;
 8019e68:	aa02      	add	r2, sp, #8
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019e70:	e7ce      	b.n	8019e10 <lv_btn_signal+0x64>
 8019e72:	bf00      	nop
 8019e74:	2002890c 	.word	0x2002890c
 8019e78:	0802c405 	.word	0x0802c405

08019e7c <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 8019e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	4604      	mov	r4, r0
 8019e82:	b089      	sub	sp, #36	; 0x24
 8019e84:	468a      	mov	sl, r1
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019e86:	f7ef fbb9 	bl	80095fc <lv_obj_get_ext_attr>
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 8019e8a:	a904      	add	r1, sp, #16
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019e8c:	4680      	mov	r8, r0
    lv_obj_get_coords(btnm, &btnm_cords);
 8019e8e:	4620      	mov	r0, r4
 8019e90:	f7ed fed6 	bl	8007c40 <lv_obj_get_coords>

    lv_coord_t w = lv_obj_get_width(btnm);
 8019e94:	4620      	mov	r0, r4
 8019e96:	f7ed ff1d 	bl	8007cd4 <lv_obj_get_width>
 8019e9a:	4683      	mov	fp, r0
    lv_coord_t h = lv_obj_get_height(btnm);
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	f7ed ff27 	bl	8007cf0 <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8019ea2:	2212      	movs	r2, #18
 8019ea4:	9000      	str	r0, [sp, #0]
 8019ea6:	2100      	movs	r1, #0
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f7ee fdff 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019eae:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 8019eb0:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019eb2:	2100      	movs	r1, #0
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f7ee fdf9 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8019eba:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 8019ebc:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8019ebe:	2100      	movs	r1, #0
 8019ec0:	4620      	mov	r0, r4
 8019ec2:	f7ee fdf3 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8019ec6:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 8019ec8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 8019eca:	2100      	movs	r1, #0
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f7ee fded 	bl	8008aac <_lv_obj_get_style_int>
 8019ed2:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 8019ed4:	4620      	mov	r0, r4
    lv_style_int_t ptop = lv_obj_get_style_pad_top(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pbottom = lv_obj_get_style_pad_bottom(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pinner = lv_obj_get_style_pad_inner(btnm, LV_BTNMATRIX_PART_BG);

    /*Get the half inner padding. Button look larger with this value. (+1 for rounding error)*/
    pinner = (pinner / 2) + 1 + (pinner & 1);
 8019ed6:	2402      	movs	r4, #2
 8019ed8:	2214      	movs	r2, #20
 8019eda:	2100      	movs	r1, #0
 8019edc:	f7ee fde6 	bl	8008aac <_lv_obj_get_style_int>
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);

    for(i = 0; i < ext->btn_cnt; i++) {
        lv_area_copy(&btn_area, &ext->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019ee0:	464a      	mov	r2, r9
    for(i = 0; i < ext->btn_cnt; i++) {
 8019ee2:	2300      	movs	r3, #0
    pinner = (pinner / 2) + 1 + (pinner & 1);
 8019ee4:	fb90 f4f4 	sdiv	r4, r0, r4
 8019ee8:	f000 0001 	and.w	r0, r0, #1
 8019eec:	4404      	add	r4, r0
 8019eee:	3401      	adds	r4, #1
 8019ef0:	b224      	sxth	r4, r4
    pinner = LV_MATH_MIN(pinner, BTN_EXTRA_CLICK_AREA_MAX);
 8019ef2:	2c20      	cmp	r4, #32
 8019ef4:	bfa8      	it	ge
 8019ef6:	2420      	movge	r4, #32
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8019ef8:	2d20      	cmp	r5, #32
 8019efa:	bfa8      	it	ge
 8019efc:	2520      	movge	r5, #32
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8019efe:	2e20      	cmp	r6, #32
 8019f00:	bfa8      	it	ge
 8019f02:	2620      	movge	r6, #32
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8019f04:	2f20      	cmp	r7, #32
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8019f06:	b22d      	sxth	r5, r5
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8019f08:	bfa8      	it	ge
 8019f0a:	2720      	movge	r7, #32
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019f0c:	2a20      	cmp	r2, #32
        else btn_area.x1 += btnm_cords.x1 - pinner;

        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
        else btn_area.y1 += btnm_cords.y1 - pinner;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
 8019f0e:	ebab 0b05 	sub.w	fp, fp, r5
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8019f12:	b236      	sxth	r6, r6
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019f14:	bfa8      	it	ge
 8019f16:	2220      	movge	r2, #32
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8019f18:	b23f      	sxth	r7, r7
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019f1a:	9201      	str	r2, [sp, #4]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
 8019f1c:	f1ab 0202 	sub.w	r2, fp, #2
 8019f20:	9202      	str	r2, [sp, #8]
 8019f22:	fa1f fb83 	uxth.w	fp, r3
    for(i = 0; i < ext->btn_cnt; i++) {
 8019f26:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8019f2a:	455a      	cmp	r2, fp
 8019f2c:	d94d      	bls.n	8019fca <get_button_from_point+0x14e>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8019f2e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019f32:	b299      	uxth	r1, r3
        *d8 = *s8;
 8019f34:	a806      	add	r0, sp, #24
 8019f36:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	f811 c002 	ldrb.w	ip, [r1, r2]
 8019f40:	f802 c000 	strb.w	ip, [r2, r0]
 8019f44:	3201      	adds	r2, #1
    while(len) {
 8019f46:	2a08      	cmp	r2, #8
 8019f48:	d1f8      	bne.n	8019f3c <get_button_from_point+0xc0>
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019f4a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8019f4e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019f52:	4548      	cmp	r0, r9
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8019f54:	f9bd c01a 	ldrsh.w	ip, [sp, #26]
 8019f58:	eb01 0200 	add.w	r2, r1, r0
 8019f5c:	f8bd e012 	ldrh.w	lr, [sp, #18]
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8019f60:	bfd8      	it	le
 8019f62:	9801      	ldrle	r0, [sp, #4]
 8019f64:	b292      	uxth	r2, r2
 8019f66:	9303      	str	r3, [sp, #12]
 8019f68:	bfd8      	it	le
 8019f6a:	1a12      	suble	r2, r2, r0
 8019f6c:	eb0e 000c 	add.w	r0, lr, ip
        else btn_area.x1 += btnm_cords.x1 - pinner;
 8019f70:	bfc8      	it	gt
 8019f72:	1b12      	subgt	r2, r2, r4
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8019f74:	45b4      	cmp	ip, r6
 8019f76:	b280      	uxth	r0, r0
        else btn_area.x1 += btnm_cords.x1 - pinner;
 8019f78:	f8ad 2018 	strh.w	r2, [sp, #24]
        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8019f7c:	bfd4      	ite	le
 8019f7e:	1b80      	suble	r0, r0, r6
        else btn_area.y1 += btnm_cords.y1 - pinner;
 8019f80:	1b00      	subgt	r0, r0, r4
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
 8019f82:	9a02      	ldr	r2, [sp, #8]
        else btn_area.y1 += btnm_cords.y1 - pinner;
 8019f84:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
 8019f88:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019f8c:	4401      	add	r1, r0
 8019f8e:	4290      	cmp	r0, r2
                                                                                         BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += btnm_cords.x1 + pinner;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
 8019f90:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 8019f94:	b289      	uxth	r1, r1
 8019f96:	eb0e 0200 	add.w	r2, lr, r0
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
 8019f9a:	bfac      	ite	ge
 8019f9c:	1949      	addge	r1, r1, r5
        else btn_area.x2 += btnm_cords.x1 + pinner;
 8019f9e:	1909      	addlt	r1, r1, r4
 8019fa0:	b292      	uxth	r2, r2
 8019fa2:	f8ad 101c 	strh.w	r1, [sp, #28]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
 8019fa6:	9900      	ldr	r1, [sp, #0]
 8019fa8:	1bc9      	subs	r1, r1, r7
 8019faa:	3902      	subs	r1, #2
 8019fac:	4288      	cmp	r0, r1
                                                                                          BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += btnm_cords.y1 + pinner;

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8019fae:	4651      	mov	r1, sl
 8019fb0:	a806      	add	r0, sp, #24
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
 8019fb2:	bfac      	ite	ge
 8019fb4:	19d2      	addge	r2, r2, r7
        else btn_area.y2 += btnm_cords.y1 + pinner;
 8019fb6:	1912      	addlt	r2, r2, r4
 8019fb8:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	f7f9 f8e4 	bl	801318a <_lv_area_is_point_on>
 8019fc2:	9b03      	ldr	r3, [sp, #12]
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d0ab      	beq.n	8019f22 <get_button_from_point+0xa6>
            break;
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8019fca:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8019fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fd2:	455a      	cmp	r2, fp
 8019fd4:	bf08      	it	eq
 8019fd6:	469b      	moveq	fp, r3

    return i;
}
 8019fd8:	4658      	mov	r0, fp
 8019fda:	b009      	add	sp, #36	; 0x24
 8019fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019fe0 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8019fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fe4:	4299      	cmp	r1, r3
{
 8019fe6:	b530      	push	{r4, r5, lr}
 8019fe8:	4604      	mov	r4, r0
 8019fea:	b085      	sub	sp, #20
 8019fec:	460d      	mov	r5, r1
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8019fee:	d02b      	beq.n	801a048 <invalidate_button_area+0x68>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8019ff0:	f7ef fb04 	bl	80095fc <lv_obj_get_ext_attr>
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 8019ff4:	6841      	ldr	r1, [r0, #4]
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
        *d8 = *s8;
 8019ffc:	5cca      	ldrb	r2, [r1, r3]
 8019ffe:	f80d 2003 	strb.w	r2, [sp, r3]
 801a002:	3301      	adds	r3, #1
    while(len) {
 801a004:	2b08      	cmp	r3, #8
 801a006:	d1f9      	bne.n	8019ffc <invalidate_button_area+0x1c>
    lv_obj_get_coords(btnm, &btnm_area);
 801a008:	a902      	add	r1, sp, #8
 801a00a:	4620      	mov	r0, r4
 801a00c:	f7ed fe18 	bl	8007c40 <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 801a010:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a014:	f8bd 3000 	ldrh.w	r3, [sp]
    btn_area.y1 += btnm_area.y1;
    btn_area.x2 += btnm_area.x1;
    btn_area.y2 += btnm_area.y1;

    lv_obj_invalidate_area(btnm, &btn_area);
 801a018:	4620      	mov	r0, r4
    btn_area.y1 += btnm_area.y1;
 801a01a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.x1 += btnm_area.x1;
 801a01e:	4413      	add	r3, r2
 801a020:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += btnm_area.y1;
 801a024:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a028:	4419      	add	r1, r3
 801a02a:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.x2 += btnm_area.x1;
 801a02e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801a032:	440a      	add	r2, r1
    lv_obj_invalidate_area(btnm, &btn_area);
 801a034:	4669      	mov	r1, sp
    btn_area.x2 += btnm_area.x1;
 801a036:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += btnm_area.y1;
 801a03a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a03e:	4413      	add	r3, r2
 801a040:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(btnm, &btn_area);
 801a044:	f7ed ff92 	bl	8007f6c <lv_obj_invalidate_area>
}
 801a048:	b005      	add	sp, #20
 801a04a:	bd30      	pop	{r4, r5, pc}

0801a04c <lv_btnmatrix_set_map>:
{
 801a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a050:	b097      	sub	sp, #92	; 0x5c
 801a052:	4604      	mov	r4, r0
 801a054:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a056:	f7f9 facf 	bl	80135f8 <lv_debug_check_null>
 801a05a:	4603      	mov	r3, r0
 801a05c:	b920      	cbnz	r0, 801a068 <lv_btnmatrix_set_map+0x1c>
 801a05e:	4622      	mov	r2, r4
 801a060:	4896      	ldr	r0, [pc, #600]	; (801a2bc <lv_btnmatrix_set_map+0x270>)
 801a062:	f7f9 facd 	bl	8013600 <lv_debug_log_error>
 801a066:	e7fe      	b.n	801a066 <lv_btnmatrix_set_map+0x1a>
    LV_ASSERT_NULL(map);
 801a068:	4638      	mov	r0, r7
 801a06a:	f7f9 fac5 	bl	80135f8 <lv_debug_check_null>
 801a06e:	4603      	mov	r3, r0
 801a070:	b920      	cbnz	r0, 801a07c <lv_btnmatrix_set_map+0x30>
 801a072:	463a      	mov	r2, r7
 801a074:	4891      	ldr	r0, [pc, #580]	; (801a2bc <lv_btnmatrix_set_map+0x270>)
 801a076:	f7f9 fac3 	bl	8013600 <lv_debug_log_error>
 801a07a:	e7fe      	b.n	801a07a <lv_btnmatrix_set_map+0x2e>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a07c:	2600      	movs	r6, #0
 801a07e:	4620      	mov	r0, r4
 801a080:	f7ef fabc 	bl	80095fc <lv_obj_get_ext_attr>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801a084:	f8df a23c 	ldr.w	sl, [pc, #572]	; 801a2c4 <lv_btnmatrix_set_map+0x278>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a088:	4680      	mov	r8, r0
    uint16_t btn_cnt = 0;
 801a08a:	4635      	mov	r5, r6
    while(strlen(map[i]) != 0) {
 801a08c:	b2b3      	uxth	r3, r6
 801a08e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801a092:	f890 9000 	ldrb.w	r9, [r0]
 801a096:	f1b9 0f00 	cmp.w	r9, #0
 801a09a:	d11f      	bne.n	801a0dc <lv_btnmatrix_set_map+0x90>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a09c:	4620      	mov	r0, r4
 801a09e:	f7ef faad 	bl	80095fc <lv_obj_get_ext_attr>
    if(btn_cnt == ext->btn_cnt) return;
 801a0a2:	8a83      	ldrh	r3, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a0a4:	4606      	mov	r6, r0
    if(btn_cnt == ext->btn_cnt) return;
 801a0a6:	42ab      	cmp	r3, r5
 801a0a8:	d039      	beq.n	801a11e <lv_btnmatrix_set_map+0xd2>
    if(ext->button_areas != NULL) {
 801a0aa:	6840      	ldr	r0, [r0, #4]
 801a0ac:	b118      	cbz	r0, 801a0b6 <lv_btnmatrix_set_map+0x6a>
        lv_mem_free(ext->button_areas);
 801a0ae:	f7f9 fd99 	bl	8013be4 <lv_mem_free>
        ext->button_areas = NULL;
 801a0b2:	f8c6 9004 	str.w	r9, [r6, #4]
    if(ext->ctrl_bits != NULL) {
 801a0b6:	68b0      	ldr	r0, [r6, #8]
 801a0b8:	b118      	cbz	r0, 801a0c2 <lv_btnmatrix_set_map+0x76>
        lv_mem_free(ext->ctrl_bits);
 801a0ba:	f7f9 fd93 	bl	8013be4 <lv_mem_free>
        ext->ctrl_bits = NULL;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	60b3      	str	r3, [r6, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801a0c2:	00e8      	lsls	r0, r5, #3
 801a0c4:	f7f9 fd40 	bl	8013b48 <lv_mem_alloc>
 801a0c8:	6070      	str	r0, [r6, #4]
    LV_ASSERT_MEM(ext->button_areas);
 801a0ca:	f7f9 fa95 	bl	80135f8 <lv_debug_check_null>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	b960      	cbnz	r0, 801a0ec <lv_btnmatrix_set_map+0xa0>
 801a0d2:	6872      	ldr	r2, [r6, #4]
 801a0d4:	487a      	ldr	r0, [pc, #488]	; (801a2c0 <lv_btnmatrix_set_map+0x274>)
 801a0d6:	f7f9 fa93 	bl	8013600 <lv_debug_log_error>
 801a0da:	e7fe      	b.n	801a0da <lv_btnmatrix_set_map+0x8e>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801a0dc:	4651      	mov	r1, sl
 801a0de:	f7e6 f897 	bl	8000210 <strcmp>
 801a0e2:	b108      	cbz	r0, 801a0e8 <lv_btnmatrix_set_map+0x9c>
            btn_cnt++;
 801a0e4:	3501      	adds	r5, #1
 801a0e6:	b2ad      	uxth	r5, r5
 801a0e8:	3601      	adds	r6, #1
 801a0ea:	e7cf      	b.n	801a08c <lv_btnmatrix_set_map+0x40>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801a0ec:	0068      	lsls	r0, r5, #1
 801a0ee:	f7f9 fd2b 	bl	8013b48 <lv_mem_alloc>
 801a0f2:	60b0      	str	r0, [r6, #8]
    LV_ASSERT_MEM(ext->ctrl_bits);
 801a0f4:	f7f9 fa80 	bl	80135f8 <lv_debug_check_null>
 801a0f8:	68b2      	ldr	r2, [r6, #8]
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	b918      	cbnz	r0, 801a106 <lv_btnmatrix_set_map+0xba>
 801a0fe:	4870      	ldr	r0, [pc, #448]	; (801a2c0 <lv_btnmatrix_set_map+0x274>)
 801a100:	f7f9 fa7e 	bl	8013600 <lv_debug_log_error>
 801a104:	e7fe      	b.n	801a104 <lv_btnmatrix_set_map+0xb8>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 801a106:	6873      	ldr	r3, [r6, #4]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	f000 80b7 	beq.w	801a27c <lv_btnmatrix_set_map+0x230>
 801a10e:	2a00      	cmp	r2, #0
 801a110:	bf08      	it	eq
 801a112:	2500      	moveq	r5, #0
    _lv_memset_00(ext->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801a114:	0069      	lsls	r1, r5, #1
 801a116:	4610      	mov	r0, r2
 801a118:	f7f9 ffaa 	bl	8014070 <_lv_memset_00>
    ext->btn_cnt = btn_cnt;
 801a11c:	82b5      	strh	r5, [r6, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801a11e:	2212      	movs	r2, #18
 801a120:	2100      	movs	r1, #0
    ext->map_p = map;
 801a122:	f8c8 7000 	str.w	r7, [r8]
 801a126:	4620      	mov	r0, r4
 801a128:	f7ee fcc0 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801a12c:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801a12e:	900e      	str	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801a130:	2100      	movs	r1, #0
 801a132:	4620      	mov	r0, r4
    uint8_t line_cnt = 1;
 801a134:	f04f 0b01 	mov.w	fp, #1
 801a138:	f7ee fcb8 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801a13c:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801a13e:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801a140:	2100      	movs	r1, #0
 801a142:	4620      	mov	r0, r4
 801a144:	f7ee fcb2 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801a148:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801a14a:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801a14c:	2100      	movs	r1, #0
 801a14e:	4620      	mov	r0, r4
 801a150:	f7ee fcac 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801a154:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801a156:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801a158:	2100      	movs	r1, #0
 801a15a:	4620      	mov	r0, r4
 801a15c:	f7ee fca6 	bl	8008aac <_lv_obj_get_style_int>
 801a160:	900d      	str	r0, [sp, #52]	; 0x34
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
 801a162:	4620      	mov	r0, r4
 801a164:	f7ed fdb6 	bl	8007cd4 <lv_obj_get_width>
 801a168:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a16c:	9308      	str	r3, [sp, #32]
 801a16e:	b2b3      	uxth	r3, r6
 801a170:	9309      	str	r3, [sp, #36]	; 0x24
 801a172:	9b08      	ldr	r3, [sp, #32]
 801a174:	1ac0      	subs	r0, r0, r3
 801a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a178:	1ac0      	subs	r0, r0, r3
 801a17a:	b283      	uxth	r3, r0
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
 801a17c:	4620      	mov	r0, r4
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
 801a17e:	930a      	str	r3, [sp, #40]	; 0x28
 801a180:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
 801a184:	f7ed fdb4 	bl	8007cf0 <lv_obj_get_height>
 801a188:	b2ab      	uxth	r3, r5
    for(li = 0; strlen(map[li]) != 0; li++) {
 801a18a:	2500      	movs	r5, #0
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
 801a18c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a18e:	9b04      	ldr	r3, [sp, #16]
 801a190:	eba0 0a03 	sub.w	sl, r0, r3
 801a194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a196:	ebaa 0a03 	sub.w	sl, sl, r3
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 801a19a:	4b4a      	ldr	r3, [pc, #296]	; (801a2c4 <lv_btnmatrix_set_map+0x278>)
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
 801a19c:	fa1f fa8a 	uxth.w	sl, sl
    for(li = 0; strlen(map[li]) != 0; li++) {
 801a1a0:	b2ea      	uxtb	r2, r5
 801a1a2:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801a1a6:	7802      	ldrb	r2, [r0, #0]
 801a1a8:	2a00      	cmp	r2, #0
 801a1aa:	d169      	bne.n	801a280 <lv_btnmatrix_set_map+0x234>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
 801a1ac:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801a1b0:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 801a1b4:	4615      	mov	r5, r2
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
 801a1b6:	fb10 f003 	smulbb	r0, r0, r3
 801a1ba:	9303      	str	r3, [sp, #12]
 801a1bc:	ebaa 0000 	sub.w	r0, sl, r0
    btn_h            = (btn_h + line_cnt / 2) / line_cnt;
 801a1c0:	ea4f 0a5b 	mov.w	sl, fp, lsr #1
 801a1c4:	fa0a f080 	sxtah	r0, sl, r0
 801a1c8:	fb90 fbfb 	sdiv	fp, r0, fp
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 801a1cc:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 801a1d0:	b203      	sxth	r3, r0
 801a1d2:	9306      	str	r3, [sp, #24]
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
 801a1d4:	eba9 0306 	sub.w	r3, r9, r6
 801a1d8:	9312      	str	r3, [sp, #72]	; 0x48
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 801a1da:	f04f 0a00 	mov.w	sl, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 801a1de:	46d1      	mov	r9, sl
 801a1e0:	fa1f f68a 	uxth.w	r6, sl
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 801a1e4:	4937      	ldr	r1, [pc, #220]	; (801a2c4 <lv_btnmatrix_set_map+0x278>)
 801a1e6:	f857 b026 	ldr.w	fp, [r7, r6, lsl #2]
 801a1ea:	eb07 0386 	add.w	r3, r7, r6, lsl #2
 801a1ee:	9605      	str	r6, [sp, #20]
 801a1f0:	4658      	mov	r0, fp
 801a1f2:	9310      	str	r3, [sp, #64]	; 0x40
 801a1f4:	f7e6 f80c 	bl	8000210 <strcmp>
 801a1f8:	f89b 3000 	ldrb.w	r3, [fp]
 801a1fc:	b108      	cbz	r0, 801a202 <lv_btnmatrix_set_map+0x1b6>
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d14a      	bne.n	801a298 <lv_btnmatrix_set_map+0x24c>
 801a202:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a206:	9207      	str	r2, [sp, #28]
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 801a208:	b94b      	cbnz	r3, 801a21e <lv_btnmatrix_set_map+0x1d2>
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
 801a20a:	4620      	mov	r0, r4
 801a20c:	f7ed fd70 	bl	8007cf0 <lv_obj_get_height>
 801a210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a212:	9a07      	ldr	r2, [sp, #28]
 801a214:	43db      	mvns	r3, r3
 801a216:	1a9b      	subs	r3, r3, r2
 801a218:	4418      	add	r0, r3
 801a21a:	b203      	sxth	r3, r0
 801a21c:	9306      	str	r3, [sp, #24]
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(btnm);
 801a21e:	4620      	mov	r0, r4
 801a220:	f7ee f980 	bl	8008524 <lv_obj_get_base_dir>
 801a224:	4683      	mov	fp, r0
        if(btn_cnt != 0) {
 801a226:	b1ae      	cbz	r6, 801a254 <lv_btnmatrix_set_map+0x208>
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
 801a228:	9a03      	ldr	r2, [sp, #12]
 801a22a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 801a22e:	442e      	add	r6, r5
            unit_act_cnt = 0;
 801a230:	f04f 0a00 	mov.w	sl, #0
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
 801a234:	fb13 f302 	smulbb	r3, r3, r2
 801a238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a23a:	1ad3      	subs	r3, r2, r3
 801a23c:	b21b      	sxth	r3, r3
 801a23e:	930c      	str	r3, [sp, #48]	; 0x30
 801a240:	b2b3      	uxth	r3, r6
 801a242:	9311      	str	r3, [sp, #68]	; 0x44
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 801a244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a248:	4413      	add	r3, r2
 801a24a:	b21b      	sxth	r3, r3
 801a24c:	930f      	str	r3, [sp, #60]	; 0x3c
            for(i = 0; i < btn_cnt; i++) {
 801a24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a250:	429d      	cmp	r5, r3
 801a252:	d139      	bne.n	801a2c8 <lv_btnmatrix_set_map+0x27c>
        act_y += btn_h + inner + 1;
 801a254:	9b03      	ldr	r3, [sp, #12]
 801a256:	9a07      	ldr	r2, [sp, #28]
 801a258:	3301      	adds	r3, #1
 801a25a:	441a      	add	r2, r3
 801a25c:	4613      	mov	r3, r2
 801a25e:	9a06      	ldr	r2, [sp, #24]
 801a260:	4413      	add	r3, r2
 801a262:	b21b      	sxth	r3, r3
 801a264:	9304      	str	r3, [sp, #16]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 801a266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	f000 808f 	beq.w	801a390 <lv_btnmatrix_set_map+0x344>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 801a272:	9b05      	ldr	r3, [sp, #20]
 801a274:	3301      	adds	r3, #1
 801a276:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    while(1) {
 801a27a:	e7ae      	b.n	801a1da <lv_btnmatrix_set_map+0x18e>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 801a27c:	461d      	mov	r5, r3
 801a27e:	e749      	b.n	801a114 <lv_btnmatrix_set_map+0xc8>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 801a280:	4619      	mov	r1, r3
 801a282:	9303      	str	r3, [sp, #12]
 801a284:	f7e5 ffc4 	bl	8000210 <strcmp>
 801a288:	9b03      	ldr	r3, [sp, #12]
 801a28a:	b918      	cbnz	r0, 801a294 <lv_btnmatrix_set_map+0x248>
 801a28c:	f10b 0b01 	add.w	fp, fp, #1
 801a290:	fa5f fb8b 	uxtb.w	fp, fp
 801a294:	3501      	adds	r5, #1
 801a296:	e783      	b.n	801a1a0 <lv_btnmatrix_set_map+0x154>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 801a298:	9b05      	ldr	r3, [sp, #20]
 801a29a:	f10a 0a01 	add.w	sl, sl, #1
 801a29e:	442b      	add	r3, r5
 801a2a0:	461a      	mov	r2, r3
 801a2a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801a2a6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    return w != 0 ? w : 1;
 801a2aa:	f013 0307 	ands.w	r3, r3, #7
 801a2ae:	bf08      	it	eq
 801a2b0:	2301      	moveq	r3, #1
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 801a2b2:	4499      	add	r9, r3
 801a2b4:	fa1f f989 	uxth.w	r9, r9
 801a2b8:	e792      	b.n	801a1e0 <lv_btnmatrix_set_map+0x194>
 801a2ba:	bf00      	nop
 801a2bc:	0802c354 	.word	0x0802c354
 801a2c0:	0802c346 	.word	0x0802c346
 801a2c4:	0802c40c 	.word	0x0802c40c
                uint8_t btn_unit_w = get_button_width(ext->ctrl_bits[btn_i]);
 801a2c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
 801a2cc:	9903      	ldr	r1, [sp, #12]
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801a2ce:	f813 6015 	ldrb.w	r6, [r3, r5, lsl #1]
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
 801a2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return w != 0 ? w : 1;
 801a2d4:	f016 0607 	ands.w	r6, r6, #7
 801a2d8:	bf08      	it	eq
 801a2da:	2601      	moveq	r6, #1
                if(base_dir == LV_BIDI_DIR_RTL)  {
 801a2dc:	f1bb 0f01 	cmp.w	fp, #1
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
 801a2e0:	fb16 f203 	smulbb	r2, r6, r3
 801a2e4:	fb92 f3f9 	sdiv	r3, r2, r9
 801a2e8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801a2ec:	fb12 f201 	smulbb	r2, r2, r1
 801a2f0:	441a      	add	r2, r3
 801a2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2f4:	fb0a f103 	mul.w	r1, sl, r3
 801a2f8:	9b03      	ldr	r3, [sp, #12]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 801a2fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801a2fe:	fb13 f30a 	smulbb	r3, r3, sl
 801a302:	b292      	uxth	r2, r2
 801a304:	b29b      	uxth	r3, r3
 801a306:	fb91 f1f9 	sdiv	r1, r1, r9
 801a30a:	b289      	uxth	r1, r1
                if(base_dir == LV_BIDI_DIR_RTL)  {
 801a30c:	d133      	bne.n	801a376 <lv_btnmatrix_set_map+0x32a>
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
 801a30e:	4620      	mov	r0, r4
 801a310:	9213      	str	r2, [sp, #76]	; 0x4c
 801a312:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
 801a316:	f7ed fcdd 	bl	8007cd4 <lv_obj_get_width>
 801a31a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a31c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a31e:	43db      	mvns	r3, r3
 801a320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a322:	1a59      	subs	r1, r3, r1
 801a324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a326:	1ac9      	subs	r1, r1, r3
 801a328:	1a89      	subs	r1, r1, r2
 801a32a:	4401      	add	r1, r0
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
 801a32c:	b209      	sxth	r1, r1
 801a32e:	1853      	adds	r3, r2, r1
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
 801a330:	b32d      	cbz	r5, 801a37e <lv_btnmatrix_set_map+0x332>
 801a332:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a334:	bb18      	cbnz	r0, 801a37e <lv_btnmatrix_set_map+0x332>
 801a336:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a338:	4281      	cmp	r1, r0
 801a33a:	d002      	beq.n	801a342 <lv_btnmatrix_set_map+0x2f6>
 801a33c:	f1bb 0f01 	cmp.w	fp, #1
 801a340:	d107      	bne.n	801a352 <lv_btnmatrix_set_map+0x306>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
 801a342:	fa01 f282 	sxtah	r2, r1, r2
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
 801a346:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a348:	4282      	cmp	r2, r0
 801a34a:	d118      	bne.n	801a37e <lv_btnmatrix_set_map+0x332>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
 801a34c:	f1bb 0f01 	cmp.w	fp, #1
 801a350:	d115      	bne.n	801a37e <lv_btnmatrix_set_map+0x332>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 801a352:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a356:	b21b      	sxth	r3, r3
 801a358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a35a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801a35e:	f930 1c04 	ldrsh.w	r1, [r0, #-4]
 801a362:	9200      	str	r2, [sp, #0]
 801a364:	9a04      	ldr	r2, [sp, #16]
                unit_act_cnt += btn_unit_w;
 801a366:	44b2      	add	sl, r6
                btn_i++;
 801a368:	3501      	adds	r5, #1
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 801a36a:	f7f8 fea8 	bl	80130be <lv_area_set>
                unit_act_cnt += btn_unit_w;
 801a36e:	fa1f fa8a 	uxth.w	sl, sl
                btn_i++;
 801a372:	b2ad      	uxth	r5, r5
 801a374:	e76b      	b.n	801a24e <lv_btnmatrix_set_map+0x202>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
 801a376:	9808      	ldr	r0, [sp, #32]
 801a378:	4403      	add	r3, r0
 801a37a:	4419      	add	r1, r3
 801a37c:	e7d6      	b.n	801a32c <lv_btnmatrix_set_map+0x2e0>
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 801a37e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a382:	b21b      	sxth	r3, r3
 801a384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a386:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801a38a:	9200      	str	r2, [sp, #0]
 801a38c:	9a04      	ldr	r2, [sp, #16]
 801a38e:	e7ea      	b.n	801a366 <lv_btnmatrix_set_map+0x31a>
    lv_obj_invalidate(btnm);
 801a390:	4620      	mov	r0, r4
}
 801a392:	b017      	add	sp, #92	; 0x5c
 801a394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(btnm);
 801a398:	f7ed be08 	b.w	8007fac <lv_obj_invalidate>

0801a39c <lv_btnmatrix_set_ctrl_map>:
{
 801a39c:	b570      	push	{r4, r5, r6, lr}
 801a39e:	4604      	mov	r4, r0
 801a3a0:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a3a2:	f7f9 f929 	bl	80135f8 <lv_debug_check_null>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	b920      	cbnz	r0, 801a3b4 <lv_btnmatrix_set_ctrl_map+0x18>
 801a3aa:	4622      	mov	r2, r4
 801a3ac:	4809      	ldr	r0, [pc, #36]	; (801a3d4 <lv_btnmatrix_set_ctrl_map+0x38>)
 801a3ae:	f7f9 f927 	bl	8013600 <lv_debug_log_error>
 801a3b2:	e7fe      	b.n	801a3b2 <lv_btnmatrix_set_ctrl_map+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	f7ef f921 	bl	80095fc <lv_obj_get_ext_attr>
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
 801a3ba:	8a82      	ldrh	r2, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a3bc:	4605      	mov	r5, r0
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
 801a3be:	4631      	mov	r1, r6
 801a3c0:	0052      	lsls	r2, r2, #1
 801a3c2:	6880      	ldr	r0, [r0, #8]
 801a3c4:	f7f9 fc98 	bl	8013cf8 <_lv_memcpy>
    lv_btnmatrix_set_map(btnm, ext->map_p);
 801a3c8:	6829      	ldr	r1, [r5, #0]
 801a3ca:	4620      	mov	r0, r4
}
 801a3cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_btnmatrix_set_map(btnm, ext->map_p);
 801a3d0:	f7ff be3c 	b.w	801a04c <lv_btnmatrix_set_map>
 801a3d4:	0802c354 	.word	0x0802c354

0801a3d8 <lv_btnmatrix_create>:
{
 801a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3dc:	460f      	mov	r7, r1
    lv_obj_t * btnm = lv_obj_create(par, copy);
 801a3de:	f7ee f8ab 	bl	8008538 <lv_obj_create>
 801a3e2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btnm);
 801a3e4:	f7f9 f908 	bl	80135f8 <lv_debug_check_null>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	b920      	cbnz	r0, 801a3f6 <lv_btnmatrix_create+0x1e>
 801a3ec:	4622      	mov	r2, r4
 801a3ee:	4835      	ldr	r0, [pc, #212]	; (801a4c4 <lv_btnmatrix_create+0xec>)
 801a3f0:	f7f9 f906 	bl	8013600 <lv_debug_log_error>
 801a3f4:	e7fe      	b.n	801a3f4 <lv_btnmatrix_create+0x1c>
    if(btnm == NULL) return NULL;
 801a3f6:	b1d4      	cbz	r4, 801a42e <lv_btnmatrix_create+0x56>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
 801a3f8:	4e33      	ldr	r6, [pc, #204]	; (801a4c8 <lv_btnmatrix_create+0xf0>)
 801a3fa:	6833      	ldr	r3, [r6, #0]
 801a3fc:	b91b      	cbnz	r3, 801a406 <lv_btnmatrix_create+0x2e>
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7ef f8dc 	bl	80095bc <lv_obj_get_signal_cb>
 801a404:	6030      	str	r0, [r6, #0]
    lv_btnmatrix_ext_t * ext = lv_obj_allocate_ext_attr(btnm, sizeof(lv_btnmatrix_ext_t));
 801a406:	2120      	movs	r1, #32
 801a408:	4620      	mov	r0, r4
 801a40a:	f7ed fb99 	bl	8007b40 <lv_obj_allocate_ext_attr>
 801a40e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801a410:	f7f9 f8f2 	bl	80135f8 <lv_debug_check_null>
 801a414:	4603      	mov	r3, r0
 801a416:	b920      	cbnz	r0, 801a422 <lv_btnmatrix_create+0x4a>
 801a418:	462a      	mov	r2, r5
 801a41a:	482a      	ldr	r0, [pc, #168]	; (801a4c4 <lv_btnmatrix_create+0xec>)
 801a41c:	f7f9 f8f0 	bl	8013600 <lv_debug_log_error>
 801a420:	e7fe      	b.n	801a420 <lv_btnmatrix_create+0x48>
 801a422:	2300      	movs	r3, #0
    if(ext == NULL) {
 801a424:	b935      	cbnz	r5, 801a434 <lv_btnmatrix_create+0x5c>
        lv_obj_del(btnm);
 801a426:	4620      	mov	r0, r4
        return NULL;
 801a428:	462c      	mov	r4, r5
        lv_obj_del(btnm);
 801a42a:	f7ef f96b 	bl	8009704 <lv_obj_del>
}
 801a42e:	4620      	mov	r0, r4
 801a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->btn_id_pr      = LV_BTNMATRIX_BTN_NONE;
 801a434:	f64f 72ff 	movw	r2, #65535	; 0xffff
    lv_style_list_init(&ext->style_btn);
 801a438:	f105 080c 	add.w	r8, r5, #12
    ext->btn_cnt        = 0;
 801a43c:	82ab      	strh	r3, [r5, #20]
    ext->btn_id_pr      = LV_BTNMATRIX_BTN_NONE;
 801a43e:	82ea      	strh	r2, [r5, #22]
    lv_style_list_init(&ext->style_btn);
 801a440:	4640      	mov	r0, r8
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
 801a442:	832a      	strh	r2, [r5, #24]
    ext->btn_id_act     = LV_BTNMATRIX_BTN_NONE;
 801a444:	836a      	strh	r2, [r5, #26]
    ext->recolor        = 0;
 801a446:	7f2a      	ldrb	r2, [r5, #28]
    ext->map_p          = NULL;
 801a448:	602b      	str	r3, [r5, #0]
    ext->one_check      = 0;
 801a44a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801a44e:	f363 0241 	bfi	r2, r3, #1, #1
    ext->ctrl_bits      = NULL;
 801a452:	e9c5 3301 	strd	r3, r3, [r5, #4]
    ext->one_check      = 0;
 801a456:	772a      	strb	r2, [r5, #28]
    lv_style_list_init(&ext->style_btn);
 801a458:	f7f0 ffad 	bl	800b3b6 <lv_style_list_init>
    ext->style_btn.ignore_trans = 1;
 801a45c:	7c6b      	ldrb	r3, [r5, #17]
 801a45e:	f043 0302 	orr.w	r3, r3, #2
 801a462:	746b      	strb	r3, [r5, #17]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
 801a464:	6873      	ldr	r3, [r6, #4]
 801a466:	b91b      	cbnz	r3, 801a470 <lv_btnmatrix_create+0x98>
 801a468:	4620      	mov	r0, r4
 801a46a:	f7ef f8b7 	bl	80095dc <lv_obj_get_design_cb>
 801a46e:	6070      	str	r0, [r6, #4]
    lv_obj_set_signal_cb(btnm, lv_btnmatrix_signal);
 801a470:	4916      	ldr	r1, [pc, #88]	; (801a4cc <lv_btnmatrix_create+0xf4>)
 801a472:	4620      	mov	r0, r4
 801a474:	f7ed fb3e 	bl	8007af4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btnm, lv_btnmatrix_design);
 801a478:	4915      	ldr	r1, [pc, #84]	; (801a4d0 <lv_btnmatrix_create+0xf8>)
 801a47a:	4620      	mov	r0, r4
 801a47c:	f7ed fb50 	bl	8007b20 <lv_obj_set_design_cb>
    if(copy == NULL) {
 801a480:	b977      	cbnz	r7, 801a4a0 <lv_btnmatrix_create+0xc8>
        lv_btnmatrix_set_map(btnm, lv_btnmatrix_def_map);
 801a482:	4620      	mov	r0, r4
 801a484:	4913      	ldr	r1, [pc, #76]	; (801a4d4 <lv_btnmatrix_create+0xfc>)
 801a486:	f7ff fde1 	bl	801a04c <lv_btnmatrix_set_map>
        lv_obj_set_size(btnm, LV_DPI * 2, LV_DPI * 1);
 801a48a:	4620      	mov	r0, r4
 801a48c:	2282      	movs	r2, #130	; 0x82
 801a48e:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a492:	f7ee fa15 	bl	80088c0 <lv_obj_set_size>
        lv_theme_apply(btnm, LV_THEME_BTNMATRIX);
 801a496:	2106      	movs	r1, #6
 801a498:	4620      	mov	r0, r4
 801a49a:	f7fa fe8b 	bl	80151b4 <lv_theme_apply>
 801a49e:	e7c6      	b.n	801a42e <lv_btnmatrix_create+0x56>
        lv_btnmatrix_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801a4a0:	4638      	mov	r0, r7
 801a4a2:	f7ef f8ab 	bl	80095fc <lv_obj_get_ext_attr>
 801a4a6:	4605      	mov	r5, r0
        lv_btnmatrix_set_map(btnm, copy_ext->map_p);
 801a4a8:	6801      	ldr	r1, [r0, #0]
 801a4aa:	4620      	mov	r0, r4
 801a4ac:	f7ff fdce 	bl	801a04c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(btnm, copy_ext->ctrl_bits);
 801a4b0:	68a9      	ldr	r1, [r5, #8]
 801a4b2:	4620      	mov	r0, r4
 801a4b4:	f7ff ff72 	bl	801a39c <lv_btnmatrix_set_ctrl_map>
        lv_style_list_copy(&ext->style_btn, &copy_ext->style_btn);
 801a4b8:	f105 010c 	add.w	r1, r5, #12
 801a4bc:	4640      	mov	r0, r8
 801a4be:	f7f1 fa66 	bl	800b98e <lv_style_list_copy>
 801a4c2:	e7b4      	b.n	801a42e <lv_btnmatrix_create+0x56>
 801a4c4:	0802c346 	.word	0x0802c346
 801a4c8:	20028914 	.word	0x20028914
 801a4cc:	0801a719 	.word	0x0801a719
 801a4d0:	0801af85 	.word	0x0801af85
 801a4d4:	200000c4 	.word	0x200000c4

0801a4d8 <lv_btnmatrix_set_focused_btn>:
{
 801a4d8:	b538      	push	{r3, r4, r5, lr}
 801a4da:	4605      	mov	r5, r0
 801a4dc:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a4de:	f7f9 f88b 	bl	80135f8 <lv_debug_check_null>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	b920      	cbnz	r0, 801a4f0 <lv_btnmatrix_set_focused_btn+0x18>
 801a4e6:	462a      	mov	r2, r5
 801a4e8:	480e      	ldr	r0, [pc, #56]	; (801a524 <lv_btnmatrix_set_focused_btn+0x4c>)
 801a4ea:	f7f9 f889 	bl	8013600 <lv_debug_log_error>
 801a4ee:	e7fe      	b.n	801a4ee <lv_btnmatrix_set_focused_btn+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	f7ef f883 	bl	80095fc <lv_obj_get_ext_attr>
    if(id >= ext->btn_cnt && id != LV_BTNMATRIX_BTN_NONE) return;
 801a4f6:	8a83      	ldrh	r3, [r0, #20]
 801a4f8:	42a3      	cmp	r3, r4
 801a4fa:	d803      	bhi.n	801a504 <lv_btnmatrix_set_focused_btn+0x2c>
 801a4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a500:	429c      	cmp	r4, r3
 801a502:	d10e      	bne.n	801a522 <lv_btnmatrix_set_focused_btn+0x4a>
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
 801a504:	8b42      	ldrh	r2, [r0, #26]
 801a506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a50a:	429a      	cmp	r2, r3
    if(id == ext->btn_id_focused) return;
 801a50c:	8b03      	ldrh	r3, [r0, #24]
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
 801a50e:	bf08      	it	eq
 801a510:	8344      	strheq	r4, [r0, #26]
    if(id == ext->btn_id_focused) return;
 801a512:	42a3      	cmp	r3, r4
 801a514:	d005      	beq.n	801a522 <lv_btnmatrix_set_focused_btn+0x4a>
    ext->btn_id_focused = id;
 801a516:	8304      	strh	r4, [r0, #24]
    lv_obj_invalidate(btnm);
 801a518:	4628      	mov	r0, r5
}
 801a51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(btnm);
 801a51e:	f7ed bd45 	b.w	8007fac <lv_obj_invalidate>
}
 801a522:	bd38      	pop	{r3, r4, r5, pc}
 801a524:	0802c354 	.word	0x0802c354

0801a528 <lv_btnmatrix_clear_btn_ctrl>:
{
 801a528:	b570      	push	{r4, r5, r6, lr}
 801a52a:	4605      	mov	r5, r0
 801a52c:	460c      	mov	r4, r1
 801a52e:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a530:	f7f9 f862 	bl	80135f8 <lv_debug_check_null>
 801a534:	4603      	mov	r3, r0
 801a536:	b920      	cbnz	r0, 801a542 <lv_btnmatrix_clear_btn_ctrl+0x1a>
 801a538:	462a      	mov	r2, r5
 801a53a:	480c      	ldr	r0, [pc, #48]	; (801a56c <lv_btnmatrix_clear_btn_ctrl+0x44>)
 801a53c:	f7f9 f860 	bl	8013600 <lv_debug_log_error>
 801a540:	e7fe      	b.n	801a540 <lv_btnmatrix_clear_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a542:	4628      	mov	r0, r5
 801a544:	f7ef f85a 	bl	80095fc <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
 801a548:	8a83      	ldrh	r3, [r0, #20]
 801a54a:	42a3      	cmp	r3, r4
 801a54c:	d90c      	bls.n	801a568 <lv_btnmatrix_clear_btn_ctrl+0x40>
    ext->ctrl_bits[btn_id] &= (~ctrl);
 801a54e:	6883      	ldr	r3, [r0, #8]
    invalidate_button_area(btnm, btn_id);
 801a550:	4621      	mov	r1, r4
 801a552:	4628      	mov	r0, r5
    ext->ctrl_bits[btn_id] &= (~ctrl);
 801a554:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801a558:	ea22 0206 	bic.w	r2, r2, r6
 801a55c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
 801a560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(btnm, btn_id);
 801a564:	f7ff bd3c 	b.w	8019fe0 <invalidate_button_area>
}
 801a568:	bd70      	pop	{r4, r5, r6, pc}
 801a56a:	bf00      	nop
 801a56c:	0802c354 	.word	0x0802c354

0801a570 <lv_btnmatrix_clear_btn_ctrl_all>:
{
 801a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a572:	4605      	mov	r5, r0
 801a574:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a576:	f7f9 f83f 	bl	80135f8 <lv_debug_check_null>
 801a57a:	4603      	mov	r3, r0
 801a57c:	b920      	cbnz	r0, 801a588 <lv_btnmatrix_clear_btn_ctrl_all+0x18>
 801a57e:	462a      	mov	r2, r5
 801a580:	4809      	ldr	r0, [pc, #36]	; (801a5a8 <lv_btnmatrix_clear_btn_ctrl_all+0x38>)
 801a582:	f7f9 f83d 	bl	8013600 <lv_debug_log_error>
 801a586:	e7fe      	b.n	801a586 <lv_btnmatrix_clear_btn_ctrl_all+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a588:	4628      	mov	r0, r5
    for(i = 0; i < ext->btn_cnt; i++) {
 801a58a:	2400      	movs	r4, #0
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a58c:	f7ef f836 	bl	80095fc <lv_obj_get_ext_attr>
 801a590:	4606      	mov	r6, r0
 801a592:	b2a1      	uxth	r1, r4
    for(i = 0; i < ext->btn_cnt; i++) {
 801a594:	8ab3      	ldrh	r3, [r6, #20]
 801a596:	3401      	adds	r4, #1
 801a598:	428b      	cmp	r3, r1
 801a59a:	d800      	bhi.n	801a59e <lv_btnmatrix_clear_btn_ctrl_all+0x2e>
}
 801a59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_btnmatrix_clear_btn_ctrl(btnm, i, ctrl);
 801a59e:	463a      	mov	r2, r7
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	f7ff ffc1 	bl	801a528 <lv_btnmatrix_clear_btn_ctrl>
 801a5a6:	e7f4      	b.n	801a592 <lv_btnmatrix_clear_btn_ctrl_all+0x22>
 801a5a8:	0802c354 	.word	0x0802c354

0801a5ac <lv_btnmatrix_set_btn_ctrl>:
{
 801a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	460c      	mov	r4, r1
 801a5b2:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a5b4:	f7f9 f820 	bl	80135f8 <lv_debug_check_null>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	b920      	cbnz	r0, 801a5c6 <lv_btnmatrix_set_btn_ctrl+0x1a>
 801a5bc:	462a      	mov	r2, r5
 801a5be:	4811      	ldr	r0, [pc, #68]	; (801a604 <lv_btnmatrix_set_btn_ctrl+0x58>)
 801a5c0:	f7f9 f81e 	bl	8013600 <lv_debug_log_error>
 801a5c4:	e7fe      	b.n	801a5c4 <lv_btnmatrix_set_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a5c6:	4628      	mov	r0, r5
 801a5c8:	f7ef f818 	bl	80095fc <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return;
 801a5cc:	8a83      	ldrh	r3, [r0, #20]
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a5ce:	4607      	mov	r7, r0
    if(btn_id >= ext->btn_cnt) return;
 801a5d0:	42a3      	cmp	r3, r4
 801a5d2:	d915      	bls.n	801a600 <lv_btnmatrix_set_btn_ctrl+0x54>
    if(ext->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECK_STATE)) {
 801a5d4:	7f03      	ldrb	r3, [r0, #28]
 801a5d6:	079a      	lsls	r2, r3, #30
 801a5d8:	d506      	bpl.n	801a5e8 <lv_btnmatrix_set_btn_ctrl+0x3c>
 801a5da:	0633      	lsls	r3, r6, #24
 801a5dc:	d504      	bpl.n	801a5e8 <lv_btnmatrix_set_btn_ctrl+0x3c>
        lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a5de:	2180      	movs	r1, #128	; 0x80
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	f7ff ffc5 	bl	801a570 <lv_btnmatrix_clear_btn_ctrl_all>
        ext->btn_id_act = btn_id;
 801a5e6:	837c      	strh	r4, [r7, #26]
    ext->ctrl_bits[btn_id] |= ctrl;
 801a5e8:	68bb      	ldr	r3, [r7, #8]
    invalidate_button_area(btnm, btn_id);
 801a5ea:	4621      	mov	r1, r4
 801a5ec:	4628      	mov	r0, r5
    ext->ctrl_bits[btn_id] |= ctrl;
 801a5ee:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801a5f2:	4316      	orrs	r6, r2
 801a5f4:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]
}
 801a5f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    invalidate_button_area(btnm, btn_id);
 801a5fc:	f7ff bcf0 	b.w	8019fe0 <invalidate_button_area>
}
 801a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a602:	bf00      	nop
 801a604:	0802c354 	.word	0x0802c354

0801a608 <lv_btnmatrix_set_btn_ctrl_all>:
{
 801a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a60a:	4605      	mov	r5, r0
 801a60c:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a60e:	f7f8 fff3 	bl	80135f8 <lv_debug_check_null>
 801a612:	4603      	mov	r3, r0
 801a614:	b920      	cbnz	r0, 801a620 <lv_btnmatrix_set_btn_ctrl_all+0x18>
 801a616:	462a      	mov	r2, r5
 801a618:	4809      	ldr	r0, [pc, #36]	; (801a640 <lv_btnmatrix_set_btn_ctrl_all+0x38>)
 801a61a:	f7f8 fff1 	bl	8013600 <lv_debug_log_error>
 801a61e:	e7fe      	b.n	801a61e <lv_btnmatrix_set_btn_ctrl_all+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a620:	4628      	mov	r0, r5
    for(i = 0; i < ext->btn_cnt; i++) {
 801a622:	2400      	movs	r4, #0
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a624:	f7ee ffea 	bl	80095fc <lv_obj_get_ext_attr>
 801a628:	4606      	mov	r6, r0
 801a62a:	b2a1      	uxth	r1, r4
    for(i = 0; i < ext->btn_cnt; i++) {
 801a62c:	8ab3      	ldrh	r3, [r6, #20]
 801a62e:	3401      	adds	r4, #1
 801a630:	428b      	cmp	r3, r1
 801a632:	d800      	bhi.n	801a636 <lv_btnmatrix_set_btn_ctrl_all+0x2e>
}
 801a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_btnmatrix_set_btn_ctrl(btnm, i, ctrl);
 801a636:	463a      	mov	r2, r7
 801a638:	4628      	mov	r0, r5
 801a63a:	f7ff ffb7 	bl	801a5ac <lv_btnmatrix_set_btn_ctrl>
 801a63e:	e7f4      	b.n	801a62a <lv_btnmatrix_set_btn_ctrl_all+0x22>
 801a640:	0802c354 	.word	0x0802c354

0801a644 <lv_btnmatrix_get_map_array>:
{
 801a644:	b510      	push	{r4, lr}
 801a646:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a648:	f7f8 ffd6 	bl	80135f8 <lv_debug_check_null>
 801a64c:	4603      	mov	r3, r0
 801a64e:	b920      	cbnz	r0, 801a65a <lv_btnmatrix_get_map_array+0x16>
 801a650:	4622      	mov	r2, r4
 801a652:	4804      	ldr	r0, [pc, #16]	; (801a664 <lv_btnmatrix_get_map_array+0x20>)
 801a654:	f7f8 ffd4 	bl	8013600 <lv_debug_log_error>
 801a658:	e7fe      	b.n	801a658 <lv_btnmatrix_get_map_array+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a65a:	4620      	mov	r0, r4
 801a65c:	f7ee ffce 	bl	80095fc <lv_obj_get_ext_attr>
}
 801a660:	6800      	ldr	r0, [r0, #0]
 801a662:	bd10      	pop	{r4, pc}
 801a664:	0802c354 	.word	0x0802c354

0801a668 <lv_btnmatrix_get_active_btn>:
{
 801a668:	b510      	push	{r4, lr}
 801a66a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a66c:	f7f8 ffc4 	bl	80135f8 <lv_debug_check_null>
 801a670:	4603      	mov	r3, r0
 801a672:	b920      	cbnz	r0, 801a67e <lv_btnmatrix_get_active_btn+0x16>
 801a674:	4622      	mov	r2, r4
 801a676:	4804      	ldr	r0, [pc, #16]	; (801a688 <lv_btnmatrix_get_active_btn+0x20>)
 801a678:	f7f8 ffc2 	bl	8013600 <lv_debug_log_error>
 801a67c:	e7fe      	b.n	801a67c <lv_btnmatrix_get_active_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a67e:	4620      	mov	r0, r4
 801a680:	f7ee ffbc 	bl	80095fc <lv_obj_get_ext_attr>
}
 801a684:	8b40      	ldrh	r0, [r0, #26]
 801a686:	bd10      	pop	{r4, pc}
 801a688:	0802c354 	.word	0x0802c354

0801a68c <lv_btnmatrix_get_focused_btn>:
{
 801a68c:	b510      	push	{r4, lr}
 801a68e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a690:	f7f8 ffb2 	bl	80135f8 <lv_debug_check_null>
 801a694:	4603      	mov	r3, r0
 801a696:	b920      	cbnz	r0, 801a6a2 <lv_btnmatrix_get_focused_btn+0x16>
 801a698:	4622      	mov	r2, r4
 801a69a:	4804      	ldr	r0, [pc, #16]	; (801a6ac <lv_btnmatrix_get_focused_btn+0x20>)
 801a69c:	f7f8 ffb0 	bl	8013600 <lv_debug_log_error>
 801a6a0:	e7fe      	b.n	801a6a0 <lv_btnmatrix_get_focused_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	f7ee ffaa 	bl	80095fc <lv_obj_get_ext_attr>
}
 801a6a8:	8b00      	ldrh	r0, [r0, #24]
 801a6aa:	bd10      	pop	{r4, pc}
 801a6ac:	0802c354 	.word	0x0802c354

0801a6b0 <lv_btnmatrix_get_btn_ctrl>:
{
 801a6b0:	b570      	push	{r4, r5, r6, lr}
 801a6b2:	4605      	mov	r5, r0
 801a6b4:	460c      	mov	r4, r1
 801a6b6:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a6b8:	f7f8 ff9e 	bl	80135f8 <lv_debug_check_null>
 801a6bc:	4603      	mov	r3, r0
 801a6be:	b920      	cbnz	r0, 801a6ca <lv_btnmatrix_get_btn_ctrl+0x1a>
 801a6c0:	462a      	mov	r2, r5
 801a6c2:	480a      	ldr	r0, [pc, #40]	; (801a6ec <lv_btnmatrix_get_btn_ctrl+0x3c>)
 801a6c4:	f7f8 ff9c 	bl	8013600 <lv_debug_log_error>
 801a6c8:	e7fe      	b.n	801a6c8 <lv_btnmatrix_get_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a6ca:	4628      	mov	r0, r5
 801a6cc:	f7ee ff96 	bl	80095fc <lv_obj_get_ext_attr>
    if(btn_id >= ext->btn_cnt) return false;
 801a6d0:	8a83      	ldrh	r3, [r0, #20]
 801a6d2:	42a3      	cmp	r3, r4
 801a6d4:	d907      	bls.n	801a6e6 <lv_btnmatrix_get_btn_ctrl+0x36>
    return (ext->ctrl_bits[btn_id] & ctrl) ? true : false;
 801a6d6:	6883      	ldr	r3, [r0, #8]
 801a6d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801a6dc:	421e      	tst	r6, r3
 801a6de:	bf14      	ite	ne
 801a6e0:	2001      	movne	r0, #1
 801a6e2:	2000      	moveq	r0, #0
}
 801a6e4:	bd70      	pop	{r4, r5, r6, pc}
    if(btn_id >= ext->btn_cnt) return false;
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	e7fc      	b.n	801a6e4 <lv_btnmatrix_get_btn_ctrl+0x34>
 801a6ea:	bf00      	nop
 801a6ec:	0802c354 	.word	0x0802c354

0801a6f0 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 801a6f0:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a6f2:	2280      	movs	r2, #128	; 0x80
{
 801a6f4:	4604      	mov	r4, r0
 801a6f6:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a6f8:	f7ff ffda 	bl	801a6b0 <lv_btnmatrix_get_btn_ctrl>
 801a6fc:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a6fe:	2180      	movs	r1, #128	; 0x80
 801a700:	4620      	mov	r0, r4
 801a702:	f7ff ff35 	bl	801a570 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a706:	b136      	cbz	r6, 801a716 <make_one_button_toggled+0x26>
 801a708:	4629      	mov	r1, r5
 801a70a:	4620      	mov	r0, r4
 801a70c:	2280      	movs	r2, #128	; 0x80
}
 801a70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a712:	f7ff bf4b 	b.w	801a5ac <lv_btnmatrix_set_btn_ctrl>
}
 801a716:	bd70      	pop	{r4, r5, r6, pc}

0801a718 <lv_btnmatrix_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801a718:	2908      	cmp	r1, #8
{
 801a71a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a71e:	4605      	mov	r5, r0
 801a720:	460e      	mov	r6, r1
 801a722:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801a724:	d126      	bne.n	801a774 <lv_btnmatrix_signal+0x5c>
        info->result = lv_btnmatrix_get_style(btnm, info->part);
 801a726:	7814      	ldrb	r4, [r2, #0]
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801a728:	f7f8 ff66 	bl	80135f8 <lv_debug_check_null>
 801a72c:	4603      	mov	r3, r0
 801a72e:	b920      	cbnz	r0, 801a73a <lv_btnmatrix_signal+0x22>
 801a730:	462a      	mov	r2, r5
 801a732:	48bc      	ldr	r0, [pc, #752]	; (801aa24 <lv_btnmatrix_signal+0x30c>)
 801a734:	f7f8 ff64 	bl	8013600 <lv_debug_log_error>
 801a738:	e7fe      	b.n	801a738 <lv_btnmatrix_signal+0x20>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a73a:	4628      	mov	r0, r5
 801a73c:	f7ee ff5e 	bl	80095fc <lv_obj_get_ext_attr>
    switch(part) {
 801a740:	b174      	cbz	r4, 801a760 <lv_btnmatrix_signal+0x48>
 801a742:	2c01      	cmp	r4, #1
 801a744:	d014      	beq.n	801a770 <lv_btnmatrix_signal+0x58>
        info->result = lv_btnmatrix_get_style(btnm, info->part);
 801a746:	2300      	movs	r3, #0
 801a748:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(btnm, sign, param);
 801a74a:	4bb7      	ldr	r3, [pc, #732]	; (801aa28 <lv_btnmatrix_signal+0x310>)
 801a74c:	463a      	mov	r2, r7
 801a74e:	2108      	movs	r1, #8
 801a750:	4628      	mov	r0, r5
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801a756:	4680      	mov	r8, r0
}
 801a758:	4640      	mov	r0, r8
 801a75a:	b003      	add	sp, #12
 801a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            style_dsc_p = &btnm->style_list;
 801a760:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_btnmatrix_get_style(btnm, info->part);
 801a764:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
 801a766:	2800      	cmp	r0, #0
 801a768:	d0ef      	beq.n	801a74a <lv_btnmatrix_signal+0x32>
 801a76a:	f04f 0801 	mov.w	r8, #1
 801a76e:	e7f3      	b.n	801a758 <lv_btnmatrix_signal+0x40>
            style_dsc_p = &ext->style_btn;
 801a770:	300c      	adds	r0, #12
 801a772:	e7f7      	b.n	801a764 <lv_btnmatrix_signal+0x4c>
    res = ancestor_signal(btnm, sign, param);
 801a774:	4bac      	ldr	r3, [pc, #688]	; (801aa28 <lv_btnmatrix_signal+0x310>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801a77a:	2801      	cmp	r0, #1
    res = ancestor_signal(btnm, sign, param);
 801a77c:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 801a77e:	d1eb      	bne.n	801a758 <lv_btnmatrix_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801a780:	2e07      	cmp	r6, #7
 801a782:	d104      	bne.n	801a78e <lv_btnmatrix_signal+0x76>
 801a784:	49a9      	ldr	r1, [pc, #676]	; (801aa2c <lv_btnmatrix_signal+0x314>)
 801a786:	4638      	mov	r0, r7
 801a788:	f7ef f842 	bl	8009810 <lv_obj_handle_get_type_signal>
 801a78c:	e7e3      	b.n	801a756 <lv_btnmatrix_signal+0x3e>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801a78e:	4628      	mov	r0, r5
 801a790:	f7ee ff34 	bl	80095fc <lv_obj_get_ext_attr>
 801a794:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801a796:	b956      	cbnz	r6, 801a7ae <lv_btnmatrix_signal+0x96>
        lv_obj_clean_style_list(btnm, LV_BTNMATRIX_PART_BTN);
 801a798:	4641      	mov	r1, r8
 801a79a:	4628      	mov	r0, r5
 801a79c:	f7ed fb12 	bl	8007dc4 <lv_obj_clean_style_list>
        lv_mem_free(ext->button_areas);
 801a7a0:	6860      	ldr	r0, [r4, #4]
 801a7a2:	f7f9 fa1f 	bl	8013be4 <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 801a7a6:	68a0      	ldr	r0, [r4, #8]
 801a7a8:	f7f9 fa1c 	bl	8013be4 <lv_mem_free>
 801a7ac:	e7d4      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 801a7ae:	2e04      	cmp	r6, #4
 801a7b0:	d104      	bne.n	801a7bc <lv_btnmatrix_signal+0xa4>
            lv_btnmatrix_set_map(btnm, ext->map_p);
 801a7b2:	6821      	ldr	r1, [r4, #0]
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f7ff fc49 	bl	801a04c <lv_btnmatrix_set_map>
 801a7ba:	e7cd      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 801a7bc:	2e02      	cmp	r6, #2
 801a7be:	d114      	bne.n	801a7ea <lv_btnmatrix_signal+0xd2>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
 801a7c0:	4628      	mov	r0, r5
 801a7c2:	f7ed fa87 	bl	8007cd4 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a7c6:	88bb      	ldrh	r3, [r7, #4]
 801a7c8:	883a      	ldrh	r2, [r7, #0]
 801a7ca:	3301      	adds	r3, #1
 801a7cc:	1a9b      	subs	r3, r3, r2
 801a7ce:	b21b      	sxth	r3, r3
 801a7d0:	4298      	cmp	r0, r3
 801a7d2:	d1ee      	bne.n	801a7b2 <lv_btnmatrix_signal+0x9a>
 801a7d4:	4628      	mov	r0, r5
 801a7d6:	f7ed fa8b 	bl	8007cf0 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a7da:	88fb      	ldrh	r3, [r7, #6]
 801a7dc:	887a      	ldrh	r2, [r7, #2]
 801a7de:	3301      	adds	r3, #1
 801a7e0:	1a9b      	subs	r3, r3, r2
 801a7e2:	b21b      	sxth	r3, r3
 801a7e4:	4298      	cmp	r0, r3
 801a7e6:	d1e4      	bne.n	801a7b2 <lv_btnmatrix_signal+0x9a>
 801a7e8:	e7b6      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_PRESSED) {
 801a7ea:	2e0b      	cmp	r6, #11
 801a7ec:	d14e      	bne.n	801a88c <lv_btnmatrix_signal+0x174>
        invalidate_button_area(btnm, ext->btn_id_pr);
 801a7ee:	8ac1      	ldrh	r1, [r0, #22]
 801a7f0:	4628      	mov	r0, r5
 801a7f2:	f7ff fbf5 	bl	8019fe0 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a7f6:	f7eb ffdf 	bl	80067b8 <lv_indev_get_act>
 801a7fa:	f7eb ffe3 	bl	80067c4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801a7fe:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 801a802:	2b01      	cmp	r3, #1
 801a804:	d133      	bne.n	801a86e <lv_btnmatrix_signal+0x156>
            lv_indev_get_point(param, &p);
 801a806:	4669      	mov	r1, sp
 801a808:	4638      	mov	r0, r7
 801a80a:	f7ec f816 	bl	800683a <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 801a80e:	4669      	mov	r1, sp
 801a810:	4628      	mov	r0, r5
 801a812:	f7ff fb33 	bl	8019e7c <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801a816:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(btnm, &p);
 801a81a:	4606      	mov	r6, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801a81c:	4298      	cmp	r0, r3
 801a81e:	d011      	beq.n	801a844 <lv_btnmatrix_signal+0x12c>
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
 801a820:	68a3      	ldr	r3, [r4, #8]
 801a822:	8ae1      	ldrh	r1, [r4, #22]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801a824:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 801a828:	1153      	asrs	r3, r2, #5
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
 801a82a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801a82e:	07db      	lsls	r3, r3, #31
 801a830:	d408      	bmi.n	801a844 <lv_btnmatrix_signal+0x12c>
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 801a832:	4628      	mov	r0, r5
 801a834:	f7ff fbd4 	bl	8019fe0 <invalidate_button_area>
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 801a838:	4631      	mov	r1, r6
                    ext->btn_id_pr = btn_pr;
 801a83a:	82e6      	strh	r6, [r4, #22]
                    ext->btn_id_act = btn_pr;
 801a83c:	8366      	strh	r6, [r4, #26]
            invalidate_button_area(btnm, ext->btn_id_focused);
 801a83e:	4628      	mov	r0, r5
 801a840:	f7ff fbce 	bl	8019fe0 <invalidate_button_area>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
 801a844:	8ae3      	ldrh	r3, [r4, #22]
 801a846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d084      	beq.n	801a758 <lv_btnmatrix_signal+0x40>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
 801a84e:	68a2      	ldr	r2, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801a850:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801a854:	1211      	asrs	r1, r2, #8
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
 801a856:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a85a:	07cc      	lsls	r4, r1, #31
 801a85c:	f53f af7c 	bmi.w	801a758 <lv_btnmatrix_signal+0x40>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a860:	0710      	lsls	r0, r2, #28
 801a862:	f53f af79 	bmi.w	801a758 <lv_btnmatrix_signal+0x40>
                uint32_t b = ext->btn_id_act;
 801a866:	aa02      	add	r2, sp, #8
 801a868:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a86c:	e098      	b.n	801a9a0 <lv_btnmatrix_signal+0x288>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
 801a86e:	2802      	cmp	r0, #2
 801a870:	d102      	bne.n	801a878 <lv_btnmatrix_signal+0x160>
            ext->btn_id_pr = ext->btn_id_focused;
 801a872:	8b21      	ldrh	r1, [r4, #24]
 801a874:	82e1      	strh	r1, [r4, #22]
 801a876:	e7e2      	b.n	801a83e <lv_btnmatrix_signal+0x126>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
 801a878:	2804      	cmp	r0, #4
 801a87a:	d1e3      	bne.n	801a844 <lv_btnmatrix_signal+0x12c>
                                                       lv_group_get_editing(lv_obj_get_group(btnm)))) {
 801a87c:	4628      	mov	r0, r5
 801a87e:	f7ee fecd 	bl	800961c <lv_obj_get_group>
 801a882:	f7eb fdcf 	bl	8006424 <lv_group_get_editing>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
 801a886:	2800      	cmp	r0, #0
 801a888:	d1f3      	bne.n	801a872 <lv_btnmatrix_signal+0x15a>
 801a88a:	e7db      	b.n	801a844 <lv_btnmatrix_signal+0x12c>
    else if(sign == LV_SIGNAL_PRESSING) {
 801a88c:	2e0c      	cmp	r6, #12
 801a88e:	d143      	bne.n	801a918 <lv_btnmatrix_signal+0x200>
        lv_indev_t * indev = lv_indev_get_act();
 801a890:	f7eb ff92 	bl	80067b8 <lv_indev_get_act>
 801a894:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801a896:	f7eb ff95 	bl	80067c4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return LV_RES_OK;
 801a89a:	2804      	cmp	r0, #4
 801a89c:	f43f af5c 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
 801a8a0:	2802      	cmp	r0, #2
 801a8a2:	f43f af59 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
        lv_indev_get_point(indev, &p);
 801a8a6:	4630      	mov	r0, r6
 801a8a8:	4669      	mov	r1, sp
 801a8aa:	f7eb ffc6 	bl	800683a <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 801a8ae:	4669      	mov	r1, sp
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	f7ff fae3 	bl	8019e7c <get_button_from_point>
        if(btn_pr != ext->btn_id_pr) {
 801a8b6:	8ae1      	ldrh	r1, [r4, #22]
        btn_pr = get_button_from_point(btnm, &p);
 801a8b8:	4606      	mov	r6, r0
        if(btn_pr != ext->btn_id_pr) {
 801a8ba:	4288      	cmp	r0, r1
 801a8bc:	f43f af4c 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
            if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
 801a8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8c4:	4299      	cmp	r1, r3
 801a8c6:	d002      	beq.n	801a8ce <lv_btnmatrix_signal+0x1b6>
                invalidate_button_area(btnm, ext->btn_id_pr);
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	f7ff fb89 	bl	8019fe0 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 801a8ce:	82e6      	strh	r6, [r4, #22]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801a8d0:	4638      	mov	r0, r7
            ext->btn_id_act = btn_pr;
 801a8d2:	8366      	strh	r6, [r4, #26]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801a8d4:	f7eb ffa2 	bl	800681c <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801a8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8dc:	429e      	cmp	r6, r3
 801a8de:	f43f af3b 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
 801a8e2:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801a8e4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801a8e8:	10d3      	asrs	r3, r2, #3
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
 801a8ea:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801a8ee:	07df      	lsls	r7, r3, #31
 801a8f0:	f53f af32 	bmi.w	801a758 <lv_btnmatrix_signal+0x40>
                invalidate_button_area(btnm, btn_pr);
 801a8f4:	4631      	mov	r1, r6
 801a8f6:	4628      	mov	r0, r5
 801a8f8:	f7ff fb72 	bl	8019fe0 <invalidate_button_area>
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
 801a8fc:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801a8fe:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
 801a902:	05dc      	lsls	r4, r3, #23
 801a904:	f53f af28 	bmi.w	801a758 <lv_btnmatrix_signal+0x40>
                    uint32_t b = btn_pr;
 801a908:	aa02      	add	r2, sp, #8
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a90a:	2110      	movs	r1, #16
 801a90c:	4628      	mov	r0, r5
                    uint32_t b = btn_pr;
 801a90e:	f842 6d04 	str.w	r6, [r2, #-4]!
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a912:	f7ed f8cf 	bl	8007ab4 <lv_event_send>
 801a916:	e71f      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_RELEASED) {
 801a918:	2e0e      	cmp	r6, #14
 801a91a:	d149      	bne.n	801a9b0 <lv_btnmatrix_signal+0x298>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
 801a91c:	8ac2      	ldrh	r2, [r0, #22]
 801a91e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a922:	429a      	cmp	r2, r3
 801a924:	f43f af18 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
 801a928:	6881      	ldr	r1, [r0, #8]
 801a92a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 801a92e:	0658      	lsls	r0, r3, #25
 801a930:	d511      	bpl.n	801a956 <lv_btnmatrix_signal+0x23e>
 801a932:	069f      	lsls	r7, r3, #26
 801a934:	d40f      	bmi.n	801a956 <lv_btnmatrix_signal+0x23e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr]) && !ext->one_check) {
 801a936:	061e      	lsls	r6, r3, #24
 801a938:	d537      	bpl.n	801a9aa <lv_btnmatrix_signal+0x292>
 801a93a:	7f20      	ldrb	r0, [r4, #28]
 801a93c:	0780      	lsls	r0, r0, #30
 801a93e:	d434      	bmi.n	801a9aa <lv_btnmatrix_signal+0x292>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNMATRIX_CTRL_CHECK_STATE);
 801a940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
 801a944:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
 801a948:	7f23      	ldrb	r3, [r4, #28]
 801a94a:	8ae1      	ldrh	r1, [r4, #22]
 801a94c:	079b      	lsls	r3, r3, #30
 801a94e:	d502      	bpl.n	801a956 <lv_btnmatrix_signal+0x23e>
 801a950:	4628      	mov	r0, r5
 801a952:	f7ff fecd 	bl	801a6f0 <make_one_button_toggled>
            invalidate_button_area(btnm, ext->btn_id_pr);
 801a956:	8ae1      	ldrh	r1, [r4, #22]
 801a958:	4628      	mov	r0, r5
 801a95a:	f7ff fb41 	bl	8019fe0 <invalidate_button_area>
            invalidate_button_area(btnm, ext->btn_id_focused);
 801a95e:	8b21      	ldrh	r1, [r4, #24]
 801a960:	4628      	mov	r0, r5
 801a962:	f7ff fb3d 	bl	8019fe0 <invalidate_button_area>
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a966:	f7eb ff27 	bl	80067b8 <lv_indev_get_act>
 801a96a:	f7eb ff2b 	bl	80067c4 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) {
 801a96e:	2802      	cmp	r0, #2
 801a970:	d001      	beq.n	801a976 <lv_btnmatrix_signal+0x25e>
 801a972:	2804      	cmp	r0, #4
 801a974:	d101      	bne.n	801a97a <lv_btnmatrix_signal+0x262>
                ext->btn_id_focused = ext->btn_id_pr;
 801a976:	8ae3      	ldrh	r3, [r4, #22]
 801a978:	8323      	strh	r3, [r4, #24]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
 801a97a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801a97e:	8b61      	ldrh	r1, [r4, #26]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
 801a980:	82e3      	strh	r3, [r4, #22]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801a982:	68a3      	ldr	r3, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801a984:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 801a988:	05d7      	lsls	r7, r2, #23
 801a98a:	f57f aee5 	bpl.w	801a758 <lv_btnmatrix_signal+0x40>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801a98e:	10d3      	asrs	r3, r2, #3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a990:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801a994:	07de      	lsls	r6, r3, #31
 801a996:	f53f aedf 	bmi.w	801a758 <lv_btnmatrix_signal+0x40>
                uint32_t b = ext->btn_id_act;
 801a99a:	aa02      	add	r2, sp, #8
 801a99c:	f842 1d04 	str.w	r1, [r2, #-4]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801a9a0:	2110      	movs	r1, #16
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	f7ed f886 	bl	8007ab4 <lv_event_send>
 801a9a8:	e6d5      	b.n	801a756 <lv_btnmatrix_signal+0x3e>
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
 801a9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9ae:	e7c9      	b.n	801a944 <lv_btnmatrix_signal+0x22c>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 801a9b0:	2e10      	cmp	r6, #16
 801a9b2:	d10c      	bne.n	801a9ce <lv_btnmatrix_signal+0x2b6>
        if(ext->btn_id_act != LV_BTNMATRIX_BTN_NONE) {
 801a9b4:	8b43      	ldrh	r3, [r0, #26]
 801a9b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9ba:	4293      	cmp	r3, r2
 801a9bc:	f43f aecc 	beq.w	801a758 <lv_btnmatrix_signal+0x40>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a9c0:	6882      	ldr	r2, [r0, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 801a9c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801a9c6:	1151      	asrs	r1, r2, #5
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801a9c8:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 801a9cc:	e745      	b.n	801a85a <lv_btnmatrix_signal+0x142>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
 801a9ce:	2e0d      	cmp	r6, #13
 801a9d0:	d107      	bne.n	801a9e2 <lv_btnmatrix_signal+0x2ca>
        ext->btn_id_pr  = LV_BTNMATRIX_BTN_NONE;
 801a9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9d6:	82c3      	strh	r3, [r0, #22]
            ext->btn_id_act = ext->btn_id_focused;
 801a9d8:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(btnm);
 801a9da:	4628      	mov	r0, r5
 801a9dc:	f7ed fae6 	bl	8007fac <lv_obj_invalidate>
 801a9e0:	e6ba      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_FOCUS) {
 801a9e2:	2e16      	cmp	r6, #22
 801a9e4:	d124      	bne.n	801aa30 <lv_btnmatrix_signal+0x318>
        lv_indev_t * indev         = lv_indev_get_act();
 801a9e6:	f7eb fee7 	bl	80067b8 <lv_indev_get_act>
 801a9ea:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801a9ec:	f7eb feea 	bl	80067c4 <lv_indev_get_type>
        if(indev == NULL) {
 801a9f0:	b926      	cbnz	r6, 801a9fc <lv_btnmatrix_signal+0x2e4>
            indev = lv_indev_get_next(NULL);
 801a9f2:	4630      	mov	r0, r6
 801a9f4:	f7f8 f96a 	bl	8012ccc <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 801a9f8:	f7eb fee4 	bl	80067c4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a9fc:	2804      	cmp	r0, #4
 801a9fe:	d10c      	bne.n	801aa1a <lv_btnmatrix_signal+0x302>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) {
 801aa00:	4628      	mov	r0, r5
 801aa02:	f7ee fe0b 	bl	800961c <lv_obj_get_group>
 801aa06:	f7eb fd0d 	bl	8006424 <lv_group_get_editing>
 801aa0a:	b110      	cbz	r0, 801aa12 <lv_btnmatrix_signal+0x2fa>
            ext->btn_id_focused = 0;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	61a3      	str	r3, [r4, #24]
 801aa10:	e6a2      	b.n	801a758 <lv_btnmatrix_signal+0x40>
                ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
 801aa12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa16:	8323      	strh	r3, [r4, #24]
 801aa18:	e69e      	b.n	801a758 <lv_btnmatrix_signal+0x40>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD) {
 801aa1a:	2802      	cmp	r0, #2
 801aa1c:	f47f ae9c 	bne.w	801a758 <lv_btnmatrix_signal+0x40>
 801aa20:	e7f4      	b.n	801aa0c <lv_btnmatrix_signal+0x2f4>
 801aa22:	bf00      	nop
 801aa24:	0802c354 	.word	0x0802c354
 801aa28:	20028914 	.word	0x20028914
 801aa2c:	0802c40e 	.word	0x0802c40e
    else if(sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_LEAVE) {
 801aa30:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 801aa34:	2b15      	cmp	r3, #21
 801aa36:	d113      	bne.n	801aa60 <lv_btnmatrix_signal+0x348>
        if(ext->btn_id_focused != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_focused);
 801aa38:	8b01      	ldrh	r1, [r0, #24]
 801aa3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa3e:	4299      	cmp	r1, r3
 801aa40:	d002      	beq.n	801aa48 <lv_btnmatrix_signal+0x330>
 801aa42:	4628      	mov	r0, r5
 801aa44:	f7ff facc 	bl	8019fe0 <invalidate_button_area>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_pr);
 801aa48:	8ae1      	ldrh	r1, [r4, #22]
 801aa4a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801aa4e:	42b1      	cmp	r1, r6
 801aa50:	d002      	beq.n	801aa58 <lv_btnmatrix_signal+0x340>
 801aa52:	4628      	mov	r0, r5
 801aa54:	f7ff fac4 	bl	8019fe0 <invalidate_button_area>
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
 801aa58:	8326      	strh	r6, [r4, #24]
        ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
 801aa5a:	82e6      	strh	r6, [r4, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
 801aa5c:	8366      	strh	r6, [r4, #26]
 801aa5e:	e67b      	b.n	801a758 <lv_btnmatrix_signal+0x40>
    else if(sign == LV_SIGNAL_CONTROL) {
 801aa60:	2e18      	cmp	r6, #24
 801aa62:	f040 809a 	bne.w	801ab9a <lv_btnmatrix_signal+0x482>
        char c = *((char *)param);
 801aa66:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT) {
 801aa68:	2b13      	cmp	r3, #19
 801aa6a:	d10e      	bne.n	801aa8a <lv_btnmatrix_signal+0x372>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE)
 801aa6c:	8b03      	ldrh	r3, [r0, #24]
 801aa6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa72:	4293      	cmp	r3, r2
                ext->btn_id_focused = 0;
 801aa74:	bf0c      	ite	eq
 801aa76:	2300      	moveq	r3, #0
                ext->btn_id_focused++;
 801aa78:	3301      	addne	r3, #1
 801aa7a:	8303      	strh	r3, [r0, #24]
            if(ext->btn_id_focused >= ext->btn_cnt - 1) ext->btn_id_focused = ext->btn_cnt - 1;
 801aa7c:	8a83      	ldrh	r3, [r0, #20]
 801aa7e:	8b02      	ldrh	r2, [r0, #24]
 801aa80:	3b01      	subs	r3, #1
 801aa82:	429a      	cmp	r2, r3
 801aa84:	db2f      	blt.n	801aae6 <lv_btnmatrix_signal+0x3ce>
                if(area_above >= 0) ext->btn_id_focused = area_above;
 801aa86:	8323      	strh	r3, [r4, #24]
 801aa88:	e02d      	b.n	801aae6 <lv_btnmatrix_signal+0x3ce>
        else if(c == LV_KEY_LEFT) {
 801aa8a:	2b14      	cmp	r3, #20
 801aa8c:	d10a      	bne.n	801aaa4 <lv_btnmatrix_signal+0x38c>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
 801aa8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa92:	8b02      	ldrh	r2, [r0, #24]
 801aa94:	429a      	cmp	r2, r3
 801aa96:	bf04      	itt	eq
 801aa98:	2300      	moveq	r3, #0
 801aa9a:	8303      	strheq	r3, [r0, #24]
            if(ext->btn_id_focused > 0) ext->btn_id_focused--;
 801aa9c:	8b03      	ldrh	r3, [r0, #24]
 801aa9e:	b313      	cbz	r3, 801aae6 <lv_btnmatrix_signal+0x3ce>
 801aaa0:	3b01      	subs	r3, #1
 801aaa2:	e7f0      	b.n	801aa86 <lv_btnmatrix_signal+0x36e>
        else if(c == LV_KEY_DOWN) {
 801aaa4:	2b12      	cmp	r3, #18
 801aaa6:	d13e      	bne.n	801ab26 <lv_btnmatrix_signal+0x40e>
 801aaa8:	2214      	movs	r2, #20
 801aaaa:	2100      	movs	r1, #0
 801aaac:	4628      	mov	r0, r5
 801aaae:	f7ed fffd 	bl	8008aac <_lv_obj_get_style_int>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
 801aab2:	8b22      	ldrh	r2, [r4, #24]
 801aab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d101      	bne.n	801aac0 <lv_btnmatrix_signal+0x3a8>
                ext->btn_id_focused = 0;
 801aabc:	2300      	movs	r3, #0
 801aabe:	e7e2      	b.n	801aa86 <lv_btnmatrix_signal+0x36e>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
 801aac0:	6863      	ldr	r3, [r4, #4]
 801aac2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
 801aac6:	f8b4 e014 	ldrh.w	lr, [r4, #20]
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
 801aaca:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801aace:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aad2:	88b3      	ldrh	r3, [r6, #4]
 801aad4:	4637      	mov	r7, r6
 801aad6:	3301      	adds	r3, #1
 801aad8:	1a5b      	subs	r3, r3, r1
 801aada:	f343 034e 	sbfx	r3, r3, #1, #15
 801aade:	440b      	add	r3, r1
                lv_coord_t pr_center =
 801aae0:	b21b      	sxth	r3, r3
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
 801aae2:	4572      	cmp	r2, lr
 801aae4:	d301      	bcc.n	801aaea <lv_btnmatrix_signal+0x3d2>
            ext->btn_id_act = ext->btn_id_focused;
 801aae6:	8b23      	ldrh	r3, [r4, #24]
 801aae8:	e776      	b.n	801a9d8 <lv_btnmatrix_signal+0x2c0>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
 801aaea:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 801aaee:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801aaf2:	4589      	cmp	r9, r1
 801aaf4:	dd11      	ble.n	801ab1a <lv_btnmatrix_signal+0x402>
 801aaf6:	f9b7 1000 	ldrsh.w	r1, [r7]
 801aafa:	4299      	cmp	r1, r3
 801aafc:	dc0d      	bgt.n	801ab1a <lv_btnmatrix_signal+0x402>
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
 801aafe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801ab02:	4401      	add	r1, r0
                       pr_center >= ext->button_areas[area_below].x1 &&
 801ab04:	428b      	cmp	r3, r1
 801ab06:	dc08      	bgt.n	801ab1a <lv_btnmatrix_signal+0x402>
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
 801ab08:	68a1      	ldr	r1, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801ab0a:	f831 900c 	ldrh.w	r9, [r1, ip]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801ab0e:	ea4f 01e9 	mov.w	r1, r9, asr #3
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
 801ab12:	ea41 1159 	orr.w	r1, r1, r9, lsr #5
 801ab16:	07c9      	lsls	r1, r1, #31
 801ab18:	d545      	bpl.n	801aba6 <lv_btnmatrix_signal+0x48e>
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
 801ab1a:	3201      	adds	r2, #1
 801ab1c:	3708      	adds	r7, #8
 801ab1e:	f10c 0c02 	add.w	ip, ip, #2
 801ab22:	b292      	uxth	r2, r2
 801ab24:	e7dd      	b.n	801aae2 <lv_btnmatrix_signal+0x3ca>
        else if(c == LV_KEY_UP) {
 801ab26:	2b11      	cmp	r3, #17
 801ab28:	f47f ae16 	bne.w	801a758 <lv_btnmatrix_signal+0x40>
 801ab2c:	2214      	movs	r2, #20
 801ab2e:	2100      	movs	r1, #0
 801ab30:	4628      	mov	r0, r5
 801ab32:	f7ed ffbb 	bl	8008aac <_lv_obj_get_style_int>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
 801ab36:	8b23      	ldrh	r3, [r4, #24]
 801ab38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab3c:	4293      	cmp	r3, r2
 801ab3e:	d0bd      	beq.n	801aabc <lv_btnmatrix_signal+0x3a4>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
 801ab40:	6861      	ldr	r1, [r4, #4]
 801ab42:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
 801ab46:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
 801ab4a:	b21b      	sxth	r3, r3
 801ab4c:	88b2      	ldrh	r2, [r6, #4]
 801ab4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab52:	3201      	adds	r2, #1
 801ab54:	1bd2      	subs	r2, r2, r7
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
 801ab56:	f342 024e 	sbfx	r2, r2, #1, #15
 801ab5a:	443a      	add	r2, r7
                lv_coord_t pr_center =
 801ab5c:	b212      	sxth	r2, r2
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
 801ab5e:	041f      	lsls	r7, r3, #16
 801ab60:	d4c1      	bmi.n	801aae6 <lv_btnmatrix_signal+0x3ce>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
 801ab62:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 801ab66:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
 801ab6a:	45bc      	cmp	ip, r7
 801ab6c:	da12      	bge.n	801ab94 <lv_btnmatrix_signal+0x47c>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
 801ab6e:	f9b1 7000 	ldrsh.w	r7, [r1]
 801ab72:	1a3f      	subs	r7, r7, r0
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
 801ab74:	42ba      	cmp	r2, r7
 801ab76:	db0d      	blt.n	801ab94 <lv_btnmatrix_signal+0x47c>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
 801ab78:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801ab7c:	4297      	cmp	r7, r2
 801ab7e:	db09      	blt.n	801ab94 <lv_btnmatrix_signal+0x47c>
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
 801ab80:	68a7      	ldr	r7, [r4, #8]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801ab82:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801ab86:	ea4f 07ec 	mov.w	r7, ip, asr #3
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
 801ab8a:	ea47 175c 	orr.w	r7, r7, ip, lsr #5
 801ab8e:	07ff      	lsls	r7, r7, #31
 801ab90:	f57f af79 	bpl.w	801aa86 <lv_btnmatrix_signal+0x36e>
 801ab94:	3b01      	subs	r3, #1
 801ab96:	3908      	subs	r1, #8
 801ab98:	e7e1      	b.n	801ab5e <lv_btnmatrix_signal+0x446>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801ab9a:	2e19      	cmp	r6, #25
 801ab9c:	f47f addc 	bne.w	801a758 <lv_btnmatrix_signal+0x40>
        *editable       = true;
 801aba0:	2301      	movs	r3, #1
 801aba2:	703b      	strb	r3, [r7, #0]
 801aba4:	e5d8      	b.n	801a758 <lv_btnmatrix_signal+0x40>
                if(area_below < ext->btn_cnt) ext->btn_id_focused = area_below;
 801aba6:	8322      	strh	r2, [r4, #24]
 801aba8:	e79d      	b.n	801aae6 <lv_btnmatrix_signal+0x3ce>
 801abaa:	bf00      	nop

0801abac <lv_btnmatrix_get_align>:
{
 801abac:	b510      	push	{r4, lr}
 801abae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
 801abb0:	f7f8 fd22 	bl	80135f8 <lv_debug_check_null>
 801abb4:	4603      	mov	r3, r0
 801abb6:	b920      	cbnz	r0, 801abc2 <lv_btnmatrix_get_align+0x16>
 801abb8:	4622      	mov	r2, r4
 801abba:	4807      	ldr	r0, [pc, #28]	; (801abd8 <lv_btnmatrix_get_align+0x2c>)
 801abbc:	f7f8 fd20 	bl	8013600 <lv_debug_log_error>
 801abc0:	e7fe      	b.n	801abc0 <lv_btnmatrix_get_align+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801abc2:	4620      	mov	r0, r4
 801abc4:	f7ee fd1a 	bl	80095fc <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
 801abc8:	7f00      	ldrb	r0, [r0, #28]
 801abca:	f3c0 0081 	ubfx	r0, r0, #2, #2
        align = LV_LABEL_ALIGN_LEFT;
 801abce:	2803      	cmp	r0, #3
}
 801abd0:	bf08      	it	eq
 801abd2:	2000      	moveq	r0, #0
 801abd4:	bd10      	pop	{r4, pc}
 801abd6:	bf00      	nop
 801abd8:	0802c354 	.word	0x0802c354

0801abdc <lv_btnmatrix_design.part.4>:
        ancestor_design_f(btnm, clip_area, mode);
 801abdc:	4bb2      	ldr	r3, [pc, #712]	; (801aea8 <lv_btnmatrix_design.part.4+0x2cc>)
 801abde:	2200      	movs	r2, #0
static lv_design_res_t lv_btnmatrix_design(lv_obj_t * btnm, const lv_area_t * clip_area, lv_design_mode_t mode)
 801abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abe4:	4604      	mov	r4, r0
 801abe6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
        ancestor_design_f(btnm, clip_area, mode);
 801abea:	685b      	ldr	r3, [r3, #4]
static lv_design_res_t lv_btnmatrix_design(lv_obj_t * btnm, const lv_area_t * clip_area, lv_design_mode_t mode)
 801abec:	9108      	str	r1, [sp, #32]
        ancestor_design_f(btnm, clip_area, mode);
 801abee:	4798      	blx	r3
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 801abf0:	4620      	mov	r0, r4
 801abf2:	f7ee fd03 	bl	80095fc <lv_obj_get_ext_attr>
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
 801abf6:	8a83      	ldrh	r3, [r0, #20]
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 801abf8:	4682      	mov	sl, r0
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	f000 81bb 	beq.w	801af76 <lv_btnmatrix_design.part.4+0x39a>
        lv_obj_get_coords(btnm, &area_btnm);
 801ac00:	a912      	add	r1, sp, #72	; 0x48
 801ac02:	4620      	mov	r0, r4
 801ac04:	f7ed f81c 	bl	8007c40 <lv_obj_get_coords>
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
 801ac08:	4620      	mov	r0, r4
 801ac0a:	f89a 901c 	ldrb.w	r9, [sl, #28]
 801ac0e:	f7ff ffcd 	bl	801abac <lv_btnmatrix_get_align>
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
 801ac12:	2801      	cmp	r0, #1
 801ac14:	f009 0901 	and.w	r9, r9, #1
 801ac18:	f040 80c4 	bne.w	801ada4 <lv_btnmatrix_design.part.4+0x1c8>
 801ac1c:	f049 0904 	orr.w	r9, r9, #4
        lv_state_t state_ori = btnm->state;
 801ac20:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        btnm->state = LV_STATE_DEFAULT;
 801ac24:	f04f 0800 	mov.w	r8, #0
        _lv_obj_disable_style_caching(btnm, true);
 801ac28:	2101      	movs	r1, #1
 801ac2a:	4620      	mov	r0, r4
        lv_state_t state_ori = btnm->state;
 801ac2c:	9304      	str	r3, [sp, #16]
        _lv_obj_disable_style_caching(btnm, true);
 801ac2e:	f7ed f8da 	bl	8007de6 <_lv_obj_disable_style_caching>
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
 801ac32:	a83a      	add	r0, sp, #232	; 0xe8
        btnm->state = LV_STATE_DEFAULT;
 801ac34:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
 801ac38:	f7f4 fe36 	bl	800f8a8 <lv_draw_rect_dsc_init>
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
 801ac3c:	a816      	add	r0, sp, #88	; 0x58
 801ac3e:	f7f2 fb2b 	bl	800d298 <lv_draw_label_dsc_init>
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
 801ac42:	aa3a      	add	r2, sp, #232	; 0xe8
 801ac44:	2101      	movs	r1, #1
 801ac46:	4620      	mov	r0, r4
 801ac48:	f7ee fdf0 	bl	800982c <lv_obj_init_draw_rect_dsc>
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
 801ac4c:	aa16      	add	r2, sp, #88	; 0x58
 801ac4e:	2101      	movs	r1, #1
 801ac50:	4620      	mov	r0, r4
 801ac52:	f7ef f8a8 	bl	8009da6 <lv_obj_init_draw_label_dsc>
        btnm->state = state_ori;
 801ac56:	9b04      	ldr	r3, [sp, #16]
        _lv_obj_disable_style_caching(btnm, false);
 801ac58:	4641      	mov	r1, r8
 801ac5a:	4620      	mov	r0, r4
        btnm->state = state_ori;
 801ac5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        uint16_t txt_i = 0;
 801ac60:	46c3      	mov	fp, r8
        draw_label_rel_dsc.flag = txt_flag;
 801ac62:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
        _lv_obj_disable_style_caching(btnm, false);
 801ac66:	f7ed f8be 	bl	8007de6 <_lv_obj_disable_style_caching>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ac6a:	2210      	movs	r2, #16
 801ac6c:	4641      	mov	r1, r8
 801ac6e:	4620      	mov	r0, r4
 801ac70:	f7ed ff1c 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801ac74:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ac76:	900d      	str	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801ac78:	4641      	mov	r1, r8
 801ac7a:	4620      	mov	r0, r4
 801ac7c:	f7ed ff16 	bl	8008aac <_lv_obj_get_style_int>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801ac80:	9b04      	ldr	r3, [sp, #16]
 801ac82:	900c      	str	r0, [sp, #48]	; 0x30
 801ac84:	f003 0304 	and.w	r3, r3, #4
        bool chk_inited = false;
 801ac88:	e9cd 8806 	strd	r8, r8, [sp, #24]
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801ac8c:	930e      	str	r3, [sp, #56]	; 0x38
 801ac8e:	fa1f f588 	uxth.w	r5, r8
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 801ac92:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 801ac96:	42ab      	cmp	r3, r5
 801ac98:	f240 816d 	bls.w	801af76 <lv_btnmatrix_design.part.4+0x39a>
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 801ac9c:	f8da 6000 	ldr.w	r6, [sl]
 801aca0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801aca4:	f8cd b014 	str.w	fp, [sp, #20]
 801aca8:	f856 002b 	ldr.w	r0, [r6, fp, lsl #2]
 801acac:	f10b 0b01 	add.w	fp, fp, #1
 801acb0:	497e      	ldr	r1, [pc, #504]	; (801aeac <lv_btnmatrix_design.part.4+0x2d0>)
 801acb2:	9309      	str	r3, [sp, #36]	; 0x24
 801acb4:	fa1f fb8b 	uxth.w	fp, fp
 801acb8:	f7e5 faaa 	bl	8000210 <strcmp>
 801acbc:	2800      	cmp	r0, #0
 801acbe:	d0ef      	beq.n	801aca0 <lv_btnmatrix_design.part.4+0xc4>
 801acc0:	fa1f f788 	uxth.w	r7, r8
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 801acc4:	f8da c008 	ldr.w	ip, [sl, #8]
 801acc8:	f83c 3017 	ldrh.w	r3, [ip, r7, lsl #1]
 801accc:	f013 0308 	ands.w	r3, r3, #8
 801acd0:	f040 814e 	bne.w	801af70 <lv_btnmatrix_design.part.4+0x394>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 801acd4:	f8da 2004 	ldr.w	r2, [sl, #4]
        *d8 = *s8;
 801acd8:	a914      	add	r1, sp, #80	; 0x50
 801acda:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 801acde:	5cd0      	ldrb	r0, [r2, r3]
 801ace0:	5458      	strb	r0, [r3, r1]
 801ace2:	3301      	adds	r3, #1
    while(len) {
 801ace4:	2b08      	cmp	r3, #8
 801ace6:	d1fa      	bne.n	801acde <lv_btnmatrix_design.part.4+0x102>
            area_tmp.x2 += area_btnm.x1;
 801ace8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
            area_tmp.x1 += area_btnm.x1;
 801acec:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801acf0:	880e      	ldrh	r6, [r1, #0]
            area_tmp.y1 += area_btnm.y1;
 801acf2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            area_tmp.x1 += area_btnm.x1;
 801acf6:	4416      	add	r6, r2
            area_tmp.y1 += area_btnm.y1;
 801acf8:	8848      	ldrh	r0, [r1, #2]
            area_tmp.x2 += area_btnm.x1;
 801acfa:	4472      	add	r2, lr
            area_tmp.y2 += area_btnm.y1;
 801acfc:	f8b1 e006 	ldrh.w	lr, [r1, #6]
            area_tmp.y1 += area_btnm.y1;
 801ad00:	4418      	add	r0, r3
            area_tmp.x1 += area_btnm.x1;
 801ad02:	b2b6      	uxth	r6, r6
            area_tmp.y2 += area_btnm.y1;
 801ad04:	4473      	add	r3, lr
            area_tmp.x2 += area_btnm.x1;
 801ad06:	b292      	uxth	r2, r2
            area_tmp.y1 += area_btnm.y1;
 801ad08:	b280      	uxth	r0, r0
            area_tmp.x1 += area_btnm.x1;
 801ad0a:	800e      	strh	r6, [r1, #0]
            area_tmp.y2 += area_btnm.y1;
 801ad0c:	b29b      	uxth	r3, r3
            area_tmp.x2 += area_btnm.x1;
 801ad0e:	808a      	strh	r2, [r1, #4]
            area_tmp.y1 += area_btnm.y1;
 801ad10:	8048      	strh	r0, [r1, #2]
 801ad12:	3201      	adds	r2, #1
            area_tmp.y2 += area_btnm.y1;
 801ad14:	80cb      	strh	r3, [r1, #6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ad16:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ad18:	1b92      	subs	r2, r2, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ad1a:	1a18      	subs	r0, r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ad1c:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ad1e:	b203      	sxth	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ad20:	920a      	str	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ad22:	930b      	str	r3, [sp, #44]	; 0x2c
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
 801ad24:	f83c 3017 	ldrh.w	r3, [ip, r7, lsl #1]
            lv_state_t btn_state = LV_STATE_DEFAULT;
 801ad28:	f3c3 17c0 	ubfx	r7, r3, #7, #1
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801ad2c:	069a      	lsls	r2, r3, #26
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
 801ad2e:	f8ba 3016 	ldrh.w	r3, [sl, #22]
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801ad32:	bf48      	it	mi
 801ad34:	f047 0720 	orrmi.w	r7, r7, #32
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
 801ad38:	42ab      	cmp	r3, r5
            if(btn_i == ext->btn_id_focused) {
 801ad3a:	f8ba 3018 	ldrh.w	r3, [sl, #24]
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
 801ad3e:	bf08      	it	eq
 801ad40:	f047 0710 	orreq.w	r7, r7, #16
            if(btn_i == ext->btn_id_focused) {
 801ad44:	42ab      	cmp	r3, r5
 801ad46:	d135      	bne.n	801adb4 <lv_btnmatrix_design.part.4+0x1d8>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801ad48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad4a:	bb83      	cbnz	r3, 801adae <lv_btnmatrix_design.part.4+0x1d2>
                btn_state |= LV_STATE_FOCUSED;
 801ad4c:	f047 0702 	orr.w	r7, r7, #2
            else if(btn_state == LV_STATE_DISABLED) {
 801ad50:	2f20      	cmp	r7, #32
 801ad52:	d17d      	bne.n	801ae50 <lv_btnmatrix_design.part.4+0x274>
                if(!disabled_inited) {
 801ad54:	9b07      	ldr	r3, [sp, #28]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	f040 80a2 	bne.w	801aea0 <lv_btnmatrix_design.part.4+0x2c4>
                    _lv_obj_disable_style_caching(btnm, true);
 801ad5c:	2101      	movs	r1, #1
 801ad5e:	4620      	mov	r0, r4
                    btnm->state = LV_STATE_DISABLED;
 801ad60:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
                draw_label_dsc_act = &draw_label_ina_dsc;
 801ad64:	ae28      	add	r6, sp, #160	; 0xa0
                    _lv_obj_disable_style_caching(btnm, true);
 801ad66:	f7ed f83e 	bl	8007de6 <_lv_obj_disable_style_caching>
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
 801ad6a:	a864      	add	r0, sp, #400	; 0x190
 801ad6c:	f7f4 fd9c 	bl	800f8a8 <lv_draw_rect_dsc_init>
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
 801ad70:	a828      	add	r0, sp, #160	; 0xa0
 801ad72:	f7f2 fa91 	bl	800d298 <lv_draw_label_dsc_init>
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
 801ad76:	aa64      	add	r2, sp, #400	; 0x190
 801ad78:	2101      	movs	r1, #1
 801ad7a:	4620      	mov	r0, r4
 801ad7c:	f7ee fd56 	bl	800982c <lv_obj_init_draw_rect_dsc>
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
 801ad80:	aa28      	add	r2, sp, #160	; 0xa0
 801ad82:	2101      	movs	r1, #1
 801ad84:	4620      	mov	r0, r4
 801ad86:	f7ef f80e 	bl	8009da6 <lv_obj_init_draw_label_dsc>
                    btnm->state = state_ori;
 801ad8a:	9b04      	ldr	r3, [sp, #16]
                    _lv_obj_disable_style_caching(btnm, false);
 801ad8c:	9907      	ldr	r1, [sp, #28]
 801ad8e:	4620      	mov	r0, r4
                    btnm->state = state_ori;
 801ad90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
                draw_rect_dsc_act = &draw_rect_ina_dsc;
 801ad94:	ad64      	add	r5, sp, #400	; 0x190
                    draw_label_ina_dsc.flag = txt_flag;
 801ad96:	f88d 90c1 	strb.w	r9, [sp, #193]	; 0xc1
                    _lv_obj_disable_style_caching(btnm, false);
 801ad9a:	f7ed f824 	bl	8007de6 <_lv_obj_disable_style_caching>
                    disabled_inited = true;
 801ad9e:	2301      	movs	r3, #1
 801ada0:	9307      	str	r3, [sp, #28]
 801ada2:	e030      	b.n	801ae06 <lv_btnmatrix_design.part.4+0x22a>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
 801ada4:	2802      	cmp	r0, #2
 801ada6:	bf08      	it	eq
 801ada8:	f049 0908 	orreq.w	r9, r9, #8
 801adac:	e738      	b.n	801ac20 <lv_btnmatrix_design.part.4+0x44>
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801adae:	f047 0706 	orr.w	r7, r7, #6
 801adb2:	e7cd      	b.n	801ad50 <lv_btnmatrix_design.part.4+0x174>
            if(btn_state == LV_STATE_DEFAULT) {
 801adb4:	2f00      	cmp	r7, #0
 801adb6:	d06d      	beq.n	801ae94 <lv_btnmatrix_design.part.4+0x2b8>
            else if(btn_state == LV_STATE_CHECKED) {
 801adb8:	2f01      	cmp	r7, #1
 801adba:	d1c9      	bne.n	801ad50 <lv_btnmatrix_design.part.4+0x174>
                if(!chk_inited) {
 801adbc:	9b06      	ldr	r3, [sp, #24]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d16b      	bne.n	801ae9a <lv_btnmatrix_design.part.4+0x2be>
                    _lv_obj_disable_style_caching(btnm, true);
 801adc2:	4639      	mov	r1, r7
 801adc4:	4620      	mov	r0, r4
                    btnm->state = LV_STATE_CHECKED;
 801adc6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
                draw_label_dsc_act = &draw_label_chk_dsc;
 801adca:	ae1f      	add	r6, sp, #124	; 0x7c
                    _lv_obj_disable_style_caching(btnm, true);
 801adcc:	f7ed f80b 	bl	8007de6 <_lv_obj_disable_style_caching>
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
 801add0:	a84f      	add	r0, sp, #316	; 0x13c
 801add2:	f7f4 fd69 	bl	800f8a8 <lv_draw_rect_dsc_init>
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
 801add6:	a81f      	add	r0, sp, #124	; 0x7c
 801add8:	f7f2 fa5e 	bl	800d298 <lv_draw_label_dsc_init>
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
 801addc:	aa4f      	add	r2, sp, #316	; 0x13c
 801adde:	4639      	mov	r1, r7
 801ade0:	4620      	mov	r0, r4
 801ade2:	f7ee fd23 	bl	800982c <lv_obj_init_draw_rect_dsc>
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
 801ade6:	aa1f      	add	r2, sp, #124	; 0x7c
 801ade8:	4639      	mov	r1, r7
 801adea:	4620      	mov	r0, r4
 801adec:	f7ee ffdb 	bl	8009da6 <lv_obj_init_draw_label_dsc>
                    btnm->state = state_ori;
 801adf0:	9b04      	ldr	r3, [sp, #16]
                draw_rect_dsc_act = &draw_rect_chk_dsc;
 801adf2:	ad4f      	add	r5, sp, #316	; 0x13c
                    _lv_obj_disable_style_caching(btnm, false);
 801adf4:	9906      	ldr	r1, [sp, #24]
                    btnm->state = state_ori;
 801adf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
 801adfa:	4620      	mov	r0, r4
                    draw_label_chk_dsc.flag = txt_flag;
 801adfc:	f88d 909d 	strb.w	r9, [sp, #157]	; 0x9d
                    _lv_obj_disable_style_caching(btnm, false);
 801ae00:	f7ec fff1 	bl	8007de6 <_lv_obj_disable_style_caching>
                    chk_inited = true;
 801ae04:	9706      	str	r7, [sp, #24]
            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;
 801ae06:	f9b5 7012 	ldrsh.w	r7, [r5, #18]
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
 801ae0a:	06fb      	lsls	r3, r7, #27
 801ae0c:	d56b      	bpl.n	801aee6 <lv_btnmatrix_design.part.4+0x30a>
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
 801ae0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ae10:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 801ae14:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 801ae18:	440b      	add	r3, r1
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
 801ae1a:	990c      	ldr	r1, [sp, #48]	; 0x30
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
 801ae1c:	429a      	cmp	r2, r3
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
 801ae1e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
 801ae22:	bf04      	itt	eq
 801ae24:	f027 0302 	biceq.w	r3, r7, #2
 801ae28:	826b      	strheq	r3, [r5, #18]
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
 801ae2a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801ae2e:	1a5b      	subs	r3, r3, r1
 801ae30:	429a      	cmp	r2, r3
                if(txt_i == 0) { /*First button*/
 801ae32:	9a05      	ldr	r2, [sp, #20]
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
 801ae34:	bf02      	ittt	eq
 801ae36:	8a6b      	ldrheq	r3, [r5, #18]
 801ae38:	f023 0301 	biceq.w	r3, r3, #1
 801ae3c:	826b      	strheq	r3, [r5, #18]
 801ae3e:	f8da 3000 	ldr.w	r3, [sl]
                if(txt_i == 0) { /*First button*/
 801ae42:	2a00      	cmp	r2, #0
 801ae44:	d134      	bne.n	801aeb0 <lv_btnmatrix_design.part.4+0x2d4>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
 801ae46:	8a6a      	ldrh	r2, [r5, #18]
 801ae48:	f022 0204 	bic.w	r2, r2, #4
 801ae4c:	826a      	strh	r2, [r5, #18]
 801ae4e:	e03c      	b.n	801aeca <lv_btnmatrix_design.part.4+0x2ee>
                _lv_obj_disable_style_caching(btnm, true);
 801ae50:	2101      	movs	r1, #1
 801ae52:	4620      	mov	r0, r4
                btnm->state = btn_state;
 801ae54:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
                draw_label_dsc_act = &draw_label_tmp_dsc;
 801ae58:	ae31      	add	r6, sp, #196	; 0xc4
                _lv_obj_disable_style_caching(btnm, true);
 801ae5a:	f7ec ffc4 	bl	8007de6 <_lv_obj_disable_style_caching>
                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
 801ae5e:	a879      	add	r0, sp, #484	; 0x1e4
 801ae60:	f7f4 fd22 	bl	800f8a8 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
 801ae64:	a831      	add	r0, sp, #196	; 0xc4
 801ae66:	f7f2 fa17 	bl	800d298 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
 801ae6a:	aa79      	add	r2, sp, #484	; 0x1e4
 801ae6c:	2101      	movs	r1, #1
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f7ee fcdc 	bl	800982c <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
 801ae74:	aa31      	add	r2, sp, #196	; 0xc4
 801ae76:	2101      	movs	r1, #1
 801ae78:	4620      	mov	r0, r4
 801ae7a:	f7ee ff94 	bl	8009da6 <lv_obj_init_draw_label_dsc>
                btnm->state = state_ori;
 801ae7e:	9b04      	ldr	r3, [sp, #16]
                _lv_obj_disable_style_caching(btnm, false);
 801ae80:	2100      	movs	r1, #0
 801ae82:	4620      	mov	r0, r4
                btnm->state = state_ori;
 801ae84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
 801ae88:	ad79      	add	r5, sp, #484	; 0x1e4
                draw_label_tmp_dsc.flag = txt_flag;
 801ae8a:	f88d 90e5 	strb.w	r9, [sp, #229]	; 0xe5
                _lv_obj_disable_style_caching(btnm, false);
 801ae8e:	f7ec ffaa 	bl	8007de6 <_lv_obj_disable_style_caching>
 801ae92:	e7b8      	b.n	801ae06 <lv_btnmatrix_design.part.4+0x22a>
                draw_label_dsc_act = &draw_label_rel_dsc;
 801ae94:	ae16      	add	r6, sp, #88	; 0x58
                draw_rect_dsc_act = &draw_rect_rel_dsc;
 801ae96:	ad3a      	add	r5, sp, #232	; 0xe8
 801ae98:	e7b5      	b.n	801ae06 <lv_btnmatrix_design.part.4+0x22a>
                draw_label_dsc_act = &draw_label_chk_dsc;
 801ae9a:	ae1f      	add	r6, sp, #124	; 0x7c
                draw_rect_dsc_act = &draw_rect_chk_dsc;
 801ae9c:	ad4f      	add	r5, sp, #316	; 0x13c
 801ae9e:	e7b2      	b.n	801ae06 <lv_btnmatrix_design.part.4+0x22a>
                draw_label_dsc_act = &draw_label_ina_dsc;
 801aea0:	ae28      	add	r6, sp, #160	; 0xa0
                draw_rect_dsc_act = &draw_rect_ina_dsc;
 801aea2:	ad64      	add	r5, sp, #400	; 0x190
 801aea4:	e7af      	b.n	801ae06 <lv_btnmatrix_design.part.4+0x22a>
 801aea6:	bf00      	nop
 801aea8:	20028914 	.word	0x20028914
 801aeac:	0802c40c 	.word	0x0802c40c
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 801aeb0:	9a05      	ldr	r2, [sp, #20]
 801aeb2:	4933      	ldr	r1, [pc, #204]	; (801af80 <lv_btnmatrix_design.part.4+0x3a4>)
 801aeb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801aeb8:	930f      	str	r3, [sp, #60]	; 0x3c
 801aeba:	3a01      	subs	r2, #1
 801aebc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801aec0:	f7e5 f9a6 	bl	8000210 <strcmp>
 801aec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d0bd      	beq.n	801ae46 <lv_btnmatrix_design.part.4+0x26a>
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 801aeca:	9a05      	ldr	r2, [sp, #20]
 801aecc:	3201      	adds	r2, #1
 801aece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801aed2:	7803      	ldrb	r3, [r0, #0]
 801aed4:	b11b      	cbz	r3, 801aede <lv_btnmatrix_design.part.4+0x302>
 801aed6:	492a      	ldr	r1, [pc, #168]	; (801af80 <lv_btnmatrix_design.part.4+0x3a4>)
 801aed8:	f7e5 f99a 	bl	8000210 <strcmp>
 801aedc:	b918      	cbnz	r0, 801aee6 <lv_btnmatrix_design.part.4+0x30a>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
 801aede:	8a6b      	ldrh	r3, [r5, #18]
 801aee0:	f023 0308 	bic.w	r3, r3, #8
 801aee4:	826b      	strh	r3, [r5, #18]
            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);
 801aee6:	462a      	mov	r2, r5
 801aee8:	9908      	ldr	r1, [sp, #32]
 801aeea:	a814      	add	r0, sp, #80	; 0x50
 801aeec:	f7f4 fd00 	bl	800f8f0 <lv_draw_rect>
            const char * txt = ext->map_p[txt_i];
 801aef0:	f8da 3000 	ldr.w	r3, [sl]
 801aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
 801aef6:	a811      	add	r0, sp, #68	; 0x44
            draw_rect_dsc_act->border_side = border_part_ori;
 801aef8:	826f      	strh	r7, [r5, #18]
            const char * txt = ext->map_p[txt_i];
 801aefa:	589d      	ldr	r5, [r3, r2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aefc:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801af00:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801af04:	3201      	adds	r2, #1
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
 801af06:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 801af0a:	f8cd 9008 	str.w	r9, [sp, #8]
 801af0e:	1a52      	subs	r2, r2, r1
 801af10:	4629      	mov	r1, r5
 801af12:	b212      	sxth	r2, r2
 801af14:	9201      	str	r2, [sp, #4]
 801af16:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 801af1a:	9200      	str	r2, [sp, #0]
 801af1c:	68b2      	ldr	r2, [r6, #8]
 801af1e:	f7fa f883 	bl	8015028 <_lv_txt_get_size>
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801af22:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801af26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af28:	2002      	movs	r0, #2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801af2a:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801af2e:	1bda      	subs	r2, r3, r7
 801af30:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801af34:	fb92 f2f0 	sdiv	r2, r2, r0
 801af38:	441a      	add	r2, r3
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801af3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af3c:	1a5b      	subs	r3, r3, r1
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801af3e:	b292      	uxth	r2, r2
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801af40:	fb93 f3f0 	sdiv	r3, r3, r0
 801af44:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801af48:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 801af4c:	443a      	add	r2, r7
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801af4e:	4403      	add	r3, r0
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
 801af50:	a814      	add	r0, sp, #80	; 0x50
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 801af52:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
 801af56:	4632      	mov	r2, r6
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801af58:	b29b      	uxth	r3, r3
 801af5a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 801af5e:	440b      	add	r3, r1
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
 801af60:	9908      	ldr	r1, [sp, #32]
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 801af62:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
 801af66:	2300      	movs	r3, #0
 801af68:	9300      	str	r3, [sp, #0]
 801af6a:	462b      	mov	r3, r5
 801af6c:	f7f2 f9aa 	bl	800d2c4 <lv_draw_label>
 801af70:	f108 0801 	add.w	r8, r8, #1
 801af74:	e68b      	b.n	801ac8e <lv_btnmatrix_design.part.4+0xb2>
}
 801af76:	2000      	movs	r0, #0
 801af78:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af80:	0802c40c 	.word	0x0802c40c

0801af84 <lv_btnmatrix_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801af84:	2a02      	cmp	r2, #2
{
 801af86:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 801af88:	d104      	bne.n	801af94 <lv_btnmatrix_design+0x10>
        return ancestor_design_f(btnm, clip_area, mode);
 801af8a:	4b08      	ldr	r3, [pc, #32]	; (801afac <lv_btnmatrix_design+0x28>)
}
 801af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design_f(btnm, clip_area, mode);
 801af90:	685b      	ldr	r3, [r3, #4]
 801af92:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801af94:	b91a      	cbnz	r2, 801af9e <lv_btnmatrix_design+0x1a>
}
 801af96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af9a:	f7ff be1f 	b.w	801abdc <lv_btnmatrix_design.part.4>
    else if(mode == LV_DESIGN_DRAW_POST) {
 801af9e:	2a01      	cmp	r2, #1
 801afa0:	d102      	bne.n	801afa8 <lv_btnmatrix_design+0x24>
        ancestor_design_f(btnm, clip_area, mode);
 801afa2:	4b02      	ldr	r3, [pc, #8]	; (801afac <lv_btnmatrix_design+0x28>)
 801afa4:	685b      	ldr	r3, [r3, #4]
 801afa6:	4798      	blx	r3
}
 801afa8:	2000      	movs	r0, #0
 801afaa:	bd10      	pop	{r4, pc}
 801afac:	20028914 	.word	0x20028914

0801afb0 <lv_area_copy>:
{
 801afb0:	3901      	subs	r1, #1
 801afb2:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 801afb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801afba:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 801afbe:	4298      	cmp	r0, r3
 801afc0:	d1f9      	bne.n	801afb6 <lv_area_copy+0x6>
}
 801afc2:	4770      	bx	lr

0801afc4 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 801afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801afc8:	2101      	movs	r1, #1
{
 801afca:	b088      	sub	sp, #32
 801afcc:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801afce:	f7ed fd05 	bl	80089dc <lv_obj_is_protected>
 801afd2:	2800      	cmp	r0, #0
 801afd4:	f040 8103 	bne.w	801b1de <lv_cont_refr_autofit+0x21a>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801afd8:	4620      	mov	r0, r4
 801afda:	f7ee fb0f 	bl	80095fc <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801afde:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801afe0:	4606      	mov	r6, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801afe2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801afe6:	d103      	bne.n	801aff0 <lv_cont_refr_autofit+0x2c>
 801afe8:	7843      	ldrb	r3, [r0, #1]
 801afea:	0719      	lsls	r1, r3, #28
 801afec:	f000 80f7 	beq.w	801b1de <lv_cont_refr_autofit+0x21a>
       ext->fit_bottom == LV_FIT_NONE) {
        return;
    }

    static int recursion_level = 0;
    recursion_level++;
 801aff0:	4acc      	ldr	r2, [pc, #816]	; (801b324 <lv_cont_refr_autofit+0x360>)
 801aff2:	6813      	ldr	r3, [r2, #0]
 801aff4:	4691      	mov	r9, r2
 801aff6:	3301      	adds	r3, #1
    /*Ensure it won't keep recursing forever*/
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
 801aff8:	2b0a      	cmp	r3, #10
    recursion_level++;
 801affa:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
 801affc:	f300 80ea 	bgt.w	801b1d4 <lv_cont_refr_autofit+0x210>
        lv_area_t tight_area;
        lv_area_t ori;
        lv_obj_t * child_i;

        lv_obj_t * par               = lv_obj_get_parent(cont);
 801b000:	4620      	mov	r0, r4

        /*Search the side coordinates of the children*/
        lv_obj_get_coords(cont, &ori);
        lv_obj_get_coords(cont, &tight_area);

        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 801b002:	f104 0a04 	add.w	sl, r4, #4
        lv_obj_t * par               = lv_obj_get_parent(cont);
 801b006:	f7ec fdc1 	bl	8007b8c <lv_obj_get_parent>
 801b00a:	4607      	mov	r7, r0
        lv_area_copy(&parent_area, &par->coords);
 801b00c:	f100 0110 	add.w	r1, r0, #16
 801b010:	a804      	add	r0, sp, #16
 801b012:	f7ff ffcd 	bl	801afb0 <lv_area_copy>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b016:	2212      	movs	r2, #18
 801b018:	2100      	movs	r1, #0
 801b01a:	4638      	mov	r0, r7
 801b01c:	f7ed fd46 	bl	8008aac <_lv_obj_get_style_int>
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
 801b020:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b024:	2213      	movs	r2, #19
 801b026:	2100      	movs	r1, #0
 801b028:	4418      	add	r0, r3
 801b02a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b02e:	4638      	mov	r0, r7
 801b030:	f7ed fd3c 	bl	8008aac <_lv_obj_get_style_int>
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
 801b034:	f8bd 3014 	ldrh.w	r3, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b038:	2210      	movs	r2, #16
 801b03a:	2100      	movs	r1, #0
 801b03c:	1a18      	subs	r0, r3, r0
 801b03e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b042:	4638      	mov	r0, r7
 801b044:	f7ed fd32 	bl	8008aac <_lv_obj_get_style_int>
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
 801b048:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801b04c:	2211      	movs	r2, #17
 801b04e:	2100      	movs	r1, #0
 801b050:	4418      	add	r0, r3
 801b052:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b056:	4638      	mov	r0, r7
 801b058:	f7ed fd28 	bl	8008aac <_lv_obj_get_style_int>
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 801b05c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        lv_obj_get_coords(cont, &ori);
 801b060:	a902      	add	r1, sp, #8
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 801b062:	1a18      	subs	r0, r3, r0
 801b064:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
 801b068:	4620      	mov	r0, r4
 801b06a:	f7ec fde9 	bl	8007c40 <lv_obj_get_coords>
        lv_obj_get_coords(cont, &tight_area);
 801b06e:	4669      	mov	r1, sp
 801b070:	4620      	mov	r0, r4
 801b072:	f7ec fde5 	bl	8007c40 <lv_obj_get_coords>
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 801b076:	4650      	mov	r0, sl
 801b078:	f7f8 fce2 	bl	8013a40 <_lv_ll_is_empty>
 801b07c:	f080 0001 	eor.w	r0, r0, #1

        if(has_children) {
 801b080:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 801b084:	d032      	beq.n	801b0ec <lv_cont_refr_autofit+0x128>
            tight_area.x1 = LV_COORD_MAX;
            tight_area.y1 = LV_COORD_MAX;
 801b086:	4aa8      	ldr	r2, [pc, #672]	; (801b328 <lv_cont_refr_autofit+0x364>)
            tight_area.x2 = LV_COORD_MIN;
            tight_area.y2 = LV_COORD_MIN;

            _LV_LL_READ(cont->child_ll, child_i) {
 801b088:	4650      	mov	r0, sl
            tight_area.y1 = LV_COORD_MAX;
 801b08a:	4ba8      	ldr	r3, [pc, #672]	; (801b32c <lv_cont_refr_autofit+0x368>)
 801b08c:	e9cd 2300 	strd	r2, r3, [sp]
            _LV_LL_READ(cont->child_ll, child_i) {
 801b090:	f7f8 fbe0 	bl	8013854 <_lv_ll_get_head>
 801b094:	4605      	mov	r5, r0
 801b096:	2800      	cmp	r0, #0
 801b098:	f040 80a4 	bne.w	801b1e4 <lv_cont_refr_autofit+0x220>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b09c:	4601      	mov	r1, r0
 801b09e:	2212      	movs	r2, #18
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	f7ed fd03 	bl	8008aac <_lv_obj_get_style_int>
                    lv_style_int_t mbottom = lv_obj_get_style_margin_bottom(child_i, LV_OBJ_PART_MAIN);
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
                }
            }

            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
 801b0a6:	f8bd 3000 	ldrh.w	r3, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b0aa:	2213      	movs	r2, #19
 801b0ac:	4629      	mov	r1, r5
 801b0ae:	1a18      	subs	r0, r3, r0
 801b0b0:	f8ad 0000 	strh.w	r0, [sp]
 801b0b4:	4620      	mov	r0, r4
 801b0b6:	f7ed fcf9 	bl	8008aac <_lv_obj_get_style_int>
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
 801b0ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b0be:	2210      	movs	r2, #16
 801b0c0:	4629      	mov	r1, r5
 801b0c2:	4418      	add	r0, r3
 801b0c4:	f8ad 0004 	strh.w	r0, [sp, #4]
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f7ed fcef 	bl	8008aac <_lv_obj_get_style_int>
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
 801b0ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801b0d2:	2211      	movs	r2, #17
 801b0d4:	4629      	mov	r1, r5
 801b0d6:	1a18      	subs	r0, r3, r0
 801b0d8:	f8ad 0002 	strh.w	r0, [sp, #2]
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f7ed fce5 	bl	8008aac <_lv_obj_get_style_int>
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 801b0e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b0e6:	4418      	add	r0, r3
 801b0e8:	f8ad 0006 	strh.w	r0, [sp, #6]
        }

        lv_area_t new_area;
        lv_area_copy(&new_area, &ori);
 801b0ec:	a902      	add	r1, sp, #8
 801b0ee:	a806      	add	r0, sp, #24
 801b0f0:	f7ff ff5e 	bl	801afb0 <lv_area_copy>

        switch(ext->fit_left) {
 801b0f4:	7833      	ldrb	r3, [r6, #0]
 801b0f6:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801b0fa:	2a02      	cmp	r2, #2
 801b0fc:	f000 80cc 	beq.w	801b298 <lv_cont_refr_autofit+0x2d4>
 801b100:	f200 80cd 	bhi.w	801b29e <lv_cont_refr_autofit+0x2da>
 801b104:	2a01      	cmp	r2, #1
 801b106:	d103      	bne.n	801b110 <lv_cont_refr_autofit+0x14c>
            case LV_FIT_TIGHT:
                new_area.x1 = tight_area.x1;
 801b108:	f8bd 2000 	ldrh.w	r2, [sp]
                break;
            case LV_FIT_PARENT:
                new_area.x1 = parent_area.x1;
                break;
            case LV_FIT_MAX:
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
 801b10c:	f8ad 2018 	strh.w	r2, [sp, #24]
                break;
            default:
                break;
        }

        switch(ext->fit_right) {
 801b110:	099b      	lsrs	r3, r3, #6
 801b112:	2b02      	cmp	r3, #2
 801b114:	f000 80cf 	beq.w	801b2b6 <lv_cont_refr_autofit+0x2f2>
 801b118:	f200 80d0 	bhi.w	801b2bc <lv_cont_refr_autofit+0x2f8>
 801b11c:	2b01      	cmp	r3, #1
 801b11e:	d103      	bne.n	801b128 <lv_cont_refr_autofit+0x164>
            case LV_FIT_TIGHT:
                new_area.x2 = tight_area.x2;
 801b120:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                break;
            case LV_FIT_PARENT:
                new_area.x2 = parent_area.x2;
                break;
            case LV_FIT_MAX:
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
 801b124:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
            default:
                break;
        }

        switch(ext->fit_top) {
 801b128:	7873      	ldrb	r3, [r6, #1]
 801b12a:	f003 0203 	and.w	r2, r3, #3
 801b12e:	2a02      	cmp	r2, #2
 801b130:	f000 80d0 	beq.w	801b2d4 <lv_cont_refr_autofit+0x310>
 801b134:	f200 80d1 	bhi.w	801b2da <lv_cont_refr_autofit+0x316>
 801b138:	2a01      	cmp	r2, #1
 801b13a:	d103      	bne.n	801b144 <lv_cont_refr_autofit+0x180>
            case LV_FIT_TIGHT:
                new_area.y1 = tight_area.y1;
 801b13c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                break;
            case LV_FIT_PARENT:
                new_area.y1 = parent_area.y1;
                break;
            case LV_FIT_MAX:
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
 801b140:	f8ad 201a 	strh.w	r2, [sp, #26]
                break;
            default:
                break;
        }

        switch(ext->fit_bottom) {
 801b144:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b148:	2b02      	cmp	r3, #2
 801b14a:	f000 80d2 	beq.w	801b2f2 <lv_cont_refr_autofit+0x32e>
 801b14e:	f200 80d3 	bhi.w	801b2f8 <lv_cont_refr_autofit+0x334>
 801b152:	2b01      	cmp	r3, #1
 801b154:	d103      	bne.n	801b15e <lv_cont_refr_autofit+0x19a>
            case LV_FIT_TIGHT:
                new_area.y2 = tight_area.y2;
 801b156:	f8bd 3006 	ldrh.w	r3, [sp, #6]
                break;
            case LV_FIT_PARENT:
                new_area.y2 = parent_area.y2;
                break;
            case LV_FIT_MAX:
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
 801b15a:	f8ad 301e 	strh.w	r3, [sp, #30]
            default:
                break;
        }

        /*Do nothing if the coordinates are not changed*/
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801b15e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801b162:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b166:	429a      	cmp	r2, r3
 801b168:	d111      	bne.n	801b18e <lv_cont_refr_autofit+0x1ca>
 801b16a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801b16e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b172:	429a      	cmp	r2, r3
 801b174:	d10b      	bne.n	801b18e <lv_cont_refr_autofit+0x1ca>
 801b176:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801b17a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b17e:	429a      	cmp	r2, r3
 801b180:	d105      	bne.n	801b18e <lv_cont_refr_autofit+0x1ca>
 801b182:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801b186:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b18a:	429a      	cmp	r2, r3
 801b18c:	d022      	beq.n	801b1d4 <lv_cont_refr_autofit+0x210>
           cont->coords.y2 != new_area.y2) {

            lv_obj_invalidate(cont);
 801b18e:	4620      	mov	r0, r4
 801b190:	f7ec ff0c 	bl	8007fac <lv_obj_invalidate>
            lv_area_copy(&cont->coords, &new_area);
 801b194:	a906      	add	r1, sp, #24
 801b196:	f104 0010 	add.w	r0, r4, #16
 801b19a:	f7ff ff09 	bl	801afb0 <lv_area_copy>
            lv_obj_invalidate(cont);
 801b19e:	4620      	mov	r0, r4
 801b1a0:	f7ec ff04 	bl	8007fac <lv_obj_invalidate>

            /*Notify the object about its new coordinates*/
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
 801b1a4:	69e3      	ldr	r3, [r4, #28]
 801b1a6:	aa02      	add	r2, sp, #8
 801b1a8:	2102      	movs	r1, #2
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	4798      	blx	r3

            /*Inform the parent about the new coordinates*/
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 801b1ae:	69fb      	ldr	r3, [r7, #28]
 801b1b0:	4622      	mov	r2, r4
 801b1b2:	2101      	movs	r1, #1
 801b1b4:	4638      	mov	r0, r7
 801b1b6:	4798      	blx	r3

            if(lv_obj_get_auto_realign(cont)) {
 801b1b8:	4620      	mov	r0, r4
 801b1ba:	f7ec fda7 	bl	8007d0c <lv_obj_get_auto_realign>
 801b1be:	b110      	cbz	r0, 801b1c6 <lv_cont_refr_autofit+0x202>
                lv_obj_realign(cont);
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	f7ed f921 	bl	8008408 <lv_obj_realign>
            }

            /*Tell the children the parent's size has changed*/
            _LV_LL_READ(cont->child_ll, child_i) {
 801b1c6:	4650      	mov	r0, sl
 801b1c8:	f7f8 fb44 	bl	8013854 <_lv_ll_get_head>
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	f040 809e 	bne.w	801b310 <lv_cont_refr_autofit+0x34c>
    }
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
 801b1d4:	f8d9 3000 	ldr.w	r3, [r9]
 801b1d8:	3b01      	subs	r3, #1
 801b1da:	f8c9 3000 	str.w	r3, [r9]
}
 801b1de:	b008      	add	sp, #32
 801b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(lv_obj_get_hidden(child_i) != false) continue;
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	f7ec fe51 	bl	8007e8c <lv_obj_get_hidden>
 801b1ea:	4601      	mov	r1, r0
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	d14e      	bne.n	801b28e <lv_cont_refr_autofit+0x2ca>
                if(ext->fit_left != LV_FIT_PARENT) {
 801b1f0:	7833      	ldrb	r3, [r6, #0]
 801b1f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b1f6:	2b20      	cmp	r3, #32
 801b1f8:	d00d      	beq.n	801b216 <lv_cont_refr_autofit+0x252>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b1fa:	2217      	movs	r2, #23
 801b1fc:	4628      	mov	r0, r5
 801b1fe:	f7ed fc55 	bl	8008aac <_lv_obj_get_style_int>
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
 801b202:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 801b206:	1a18      	subs	r0, r3, r0
 801b208:	f9bd 3000 	ldrsh.w	r3, [sp]
 801b20c:	4298      	cmp	r0, r3
 801b20e:	bfa8      	it	ge
 801b210:	4618      	movge	r0, r3
 801b212:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
 801b216:	7833      	ldrb	r3, [r6, #0]
 801b218:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b21c:	2b80      	cmp	r3, #128	; 0x80
 801b21e:	d00e      	beq.n	801b23e <lv_cont_refr_autofit+0x27a>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 801b220:	2218      	movs	r2, #24
 801b222:	2100      	movs	r1, #0
 801b224:	4628      	mov	r0, r5
 801b226:	f7ed fc41 	bl	8008aac <_lv_obj_get_style_int>
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
 801b22a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801b22e:	4418      	add	r0, r3
 801b230:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b234:	4298      	cmp	r0, r3
 801b236:	bfb8      	it	lt
 801b238:	4618      	movlt	r0, r3
 801b23a:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
 801b23e:	7873      	ldrb	r3, [r6, #1]
 801b240:	f003 0303 	and.w	r3, r3, #3
 801b244:	2b02      	cmp	r3, #2
 801b246:	d00e      	beq.n	801b266 <lv_cont_refr_autofit+0x2a2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801b248:	2215      	movs	r2, #21
 801b24a:	2100      	movs	r1, #0
 801b24c:	4628      	mov	r0, r5
 801b24e:	f7ed fc2d 	bl	8008aac <_lv_obj_get_style_int>
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
 801b252:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 801b256:	1a18      	subs	r0, r3, r0
 801b258:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801b25c:	4298      	cmp	r0, r3
 801b25e:	bfa8      	it	ge
 801b260:	4618      	movge	r0, r3
 801b262:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
 801b266:	7873      	ldrb	r3, [r6, #1]
 801b268:	f003 030c 	and.w	r3, r3, #12
 801b26c:	2b08      	cmp	r3, #8
 801b26e:	d00e      	beq.n	801b28e <lv_cont_refr_autofit+0x2ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801b270:	2216      	movs	r2, #22
 801b272:	2100      	movs	r1, #0
 801b274:	4628      	mov	r0, r5
 801b276:	f7ed fc19 	bl	8008aac <_lv_obj_get_style_int>
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
 801b27a:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801b27e:	4418      	add	r0, r3
 801b280:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801b284:	4298      	cmp	r0, r3
 801b286:	bfb8      	it	lt
 801b288:	4618      	movlt	r0, r3
 801b28a:	f8ad 0006 	strh.w	r0, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
 801b28e:	4629      	mov	r1, r5
 801b290:	4650      	mov	r0, sl
 801b292:	f7f8 fae5 	bl	8013860 <_lv_ll_get_next>
 801b296:	e6fd      	b.n	801b094 <lv_cont_refr_autofit+0xd0>
                new_area.x1 = parent_area.x1;
 801b298:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b29c:	e736      	b.n	801b10c <lv_cont_refr_autofit+0x148>
 801b29e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
 801b2a2:	f1b8 0f00 	cmp.w	r8, #0
 801b2a6:	f43f af31 	beq.w	801b10c <lv_cont_refr_autofit+0x148>
 801b2aa:	f9bd 1000 	ldrsh.w	r1, [sp]
 801b2ae:	428a      	cmp	r2, r1
 801b2b0:	bfa8      	it	ge
 801b2b2:	460a      	movge	r2, r1
 801b2b4:	e72a      	b.n	801b10c <lv_cont_refr_autofit+0x148>
                new_area.x2 = parent_area.x2;
 801b2b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b2ba:	e733      	b.n	801b124 <lv_cont_refr_autofit+0x160>
 801b2bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
 801b2c0:	f1b8 0f00 	cmp.w	r8, #0
 801b2c4:	f43f af2e 	beq.w	801b124 <lv_cont_refr_autofit+0x160>
 801b2c8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b2cc:	4293      	cmp	r3, r2
 801b2ce:	bfb8      	it	lt
 801b2d0:	4613      	movlt	r3, r2
 801b2d2:	e727      	b.n	801b124 <lv_cont_refr_autofit+0x160>
                new_area.y1 = parent_area.y1;
 801b2d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b2d8:	e732      	b.n	801b140 <lv_cont_refr_autofit+0x17c>
 801b2da:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
 801b2de:	f1b8 0f00 	cmp.w	r8, #0
 801b2e2:	f43f af2d 	beq.w	801b140 <lv_cont_refr_autofit+0x17c>
 801b2e6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801b2ea:	428a      	cmp	r2, r1
 801b2ec:	bfa8      	it	ge
 801b2ee:	460a      	movge	r2, r1
 801b2f0:	e726      	b.n	801b140 <lv_cont_refr_autofit+0x17c>
                new_area.y2 = parent_area.y2;
 801b2f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b2f6:	e730      	b.n	801b15a <lv_cont_refr_autofit+0x196>
 801b2f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
 801b2fc:	f1b8 0f00 	cmp.w	r8, #0
 801b300:	f43f af2b 	beq.w	801b15a <lv_cont_refr_autofit+0x196>
 801b304:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801b308:	4293      	cmp	r3, r2
 801b30a:	bfb8      	it	lt
 801b30c:	4613      	movlt	r3, r2
 801b30e:	e724      	b.n	801b15a <lv_cont_refr_autofit+0x196>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
 801b310:	69e3      	ldr	r3, [r4, #28]
 801b312:	aa02      	add	r2, sp, #8
 801b314:	2103      	movs	r1, #3
 801b316:	4620      	mov	r0, r4
 801b318:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
 801b31a:	4621      	mov	r1, r4
 801b31c:	4650      	mov	r0, sl
 801b31e:	f7f8 fa9f 	bl	8013860 <_lv_ll_get_next>
 801b322:	e753      	b.n	801b1cc <lv_cont_refr_autofit+0x208>
 801b324:	2002891c 	.word	0x2002891c
 801b328:	7c187c18 	.word	0x7c187c18
 801b32c:	83e883e8 	.word	0x83e883e8

0801b330 <lv_cont_create>:
{
 801b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b332:	460e      	mov	r6, r1
 801b334:	4607      	mov	r7, r0
    lv_obj_t * cont = lv_obj_create(par, copy);
 801b336:	f7ed f8ff 	bl	8008538 <lv_obj_create>
 801b33a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
 801b33c:	f7f8 f95c 	bl	80135f8 <lv_debug_check_null>
 801b340:	4603      	mov	r3, r0
 801b342:	b920      	cbnz	r0, 801b34e <lv_cont_create+0x1e>
 801b344:	462a      	mov	r2, r5
 801b346:	4834      	ldr	r0, [pc, #208]	; (801b418 <lv_cont_create+0xe8>)
 801b348:	f7f8 f95a 	bl	8013600 <lv_debug_log_error>
 801b34c:	e7fe      	b.n	801b34c <lv_cont_create+0x1c>
    if(cont == NULL) return NULL;
 801b34e:	b1cd      	cbz	r5, 801b384 <lv_cont_create+0x54>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
 801b350:	4c32      	ldr	r4, [pc, #200]	; (801b41c <lv_cont_create+0xec>)
 801b352:	6863      	ldr	r3, [r4, #4]
 801b354:	b91b      	cbnz	r3, 801b35e <lv_cont_create+0x2e>
 801b356:	4628      	mov	r0, r5
 801b358:	f7ee f930 	bl	80095bc <lv_obj_get_signal_cb>
 801b35c:	6060      	str	r0, [r4, #4]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
 801b35e:	68a3      	ldr	r3, [r4, #8]
 801b360:	b91b      	cbnz	r3, 801b36a <lv_cont_create+0x3a>
 801b362:	4628      	mov	r0, r5
 801b364:	f7ee f93a 	bl	80095dc <lv_obj_get_design_cb>
 801b368:	60a0      	str	r0, [r4, #8]
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
 801b36a:	2102      	movs	r1, #2
 801b36c:	4628      	mov	r0, r5
 801b36e:	f7ec fbe7 	bl	8007b40 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b372:	4628      	mov	r0, r5
 801b374:	f7ee f942 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext == NULL) {
 801b378:	4604      	mov	r4, r0
 801b37a:	b928      	cbnz	r0, 801b388 <lv_cont_create+0x58>
        lv_obj_del(cont);
 801b37c:	4628      	mov	r0, r5
        return NULL;
 801b37e:	4625      	mov	r5, r4
        lv_obj_del(cont);
 801b380:	f7ee f9c0 	bl	8009704 <lv_obj_del>
}
 801b384:	4628      	mov	r0, r5
 801b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(ext);
 801b388:	f7f8 f936 	bl	80135f8 <lv_debug_check_null>
 801b38c:	4603      	mov	r3, r0
 801b38e:	b920      	cbnz	r0, 801b39a <lv_cont_create+0x6a>
 801b390:	4622      	mov	r2, r4
 801b392:	4821      	ldr	r0, [pc, #132]	; (801b418 <lv_cont_create+0xe8>)
 801b394:	f7f8 f934 	bl	8013600 <lv_debug_log_error>
 801b398:	e7fe      	b.n	801b398 <lv_cont_create+0x68>
    ext->fit_left   = LV_FIT_NONE;
 801b39a:	7823      	ldrb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 801b39c:	4628      	mov	r0, r5
    ext->fit_top    = LV_FIT_NONE;
 801b39e:	7862      	ldrb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
 801b3a0:	f003 030f 	and.w	r3, r3, #15
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 801b3a4:	491e      	ldr	r1, [pc, #120]	; (801b420 <lv_cont_create+0xf0>)
    ext->fit_bottom = LV_FIT_NONE;
 801b3a6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 801b3aa:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 801b3ae:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 801b3b2:	7023      	strb	r3, [r4, #0]
    ext->fit_bottom = LV_FIT_NONE;
 801b3b4:	7062      	strb	r2, [r4, #1]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 801b3b6:	f7ec fb9d 	bl	8007af4 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 801b3ba:	b936      	cbnz	r6, 801b3ca <lv_cont_create+0x9a>
        if(par != NULL) {
 801b3bc:	2f00      	cmp	r7, #0
 801b3be:	d0e1      	beq.n	801b384 <lv_cont_create+0x54>
            lv_theme_apply(cont, LV_THEME_CONT);
 801b3c0:	210b      	movs	r1, #11
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	f7f9 fef6 	bl	80151b4 <lv_theme_apply>
 801b3c8:	e7dc      	b.n	801b384 <lv_cont_create+0x54>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f7ee f916 	bl	80095fc <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 801b3d0:	7803      	ldrb	r3, [r0, #0]
 801b3d2:	7822      	ldrb	r2, [r4, #0]
 801b3d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b3d8:	f363 1205 	bfi	r2, r3, #4, #2
 801b3dc:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 801b3de:	b2d2      	uxtb	r2, r2
 801b3e0:	7803      	ldrb	r3, [r0, #0]
 801b3e2:	099b      	lsrs	r3, r3, #6
 801b3e4:	f363 1287 	bfi	r2, r3, #6, #2
        ext->fit_top             = copy_ext->fit_top;
 801b3e8:	7863      	ldrb	r3, [r4, #1]
        ext->fit_right           = copy_ext->fit_right;
 801b3ea:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 801b3ec:	7842      	ldrb	r2, [r0, #1]
 801b3ee:	f362 0301 	bfi	r3, r2, #0, #2
 801b3f2:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 801b3f4:	7843      	ldrb	r3, [r0, #1]
 801b3f6:	7862      	ldrb	r2, [r4, #1]
 801b3f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b3fc:	f363 0283 	bfi	r2, r3, #2, #2
        ext->layout              = copy_ext->layout;
 801b400:	7823      	ldrb	r3, [r4, #0]
        ext->fit_bottom          = copy_ext->fit_bottom;
 801b402:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 801b404:	7802      	ldrb	r2, [r0, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b406:	4628      	mov	r0, r5
        ext->layout              = copy_ext->layout;
 801b408:	f362 0303 	bfi	r3, r2, #0, #4
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b40c:	22ff      	movs	r2, #255	; 0xff
        ext->layout              = copy_ext->layout;
 801b40e:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b410:	4611      	mov	r1, r2
 801b412:	f7ed ff7d 	bl	8009310 <lv_obj_refresh_style>
 801b416:	e7b5      	b.n	801b384 <lv_cont_create+0x54>
 801b418:	0802c346 	.word	0x0802c346
 801b41c:	2002891c 	.word	0x2002891c
 801b420:	0801bb5d 	.word	0x0801bb5d

0801b424 <lv_cont_set_layout>:
{
 801b424:	b570      	push	{r4, r5, r6, lr}
 801b426:	4604      	mov	r4, r0
 801b428:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b42a:	f7f8 f8e5 	bl	80135f8 <lv_debug_check_null>
 801b42e:	4603      	mov	r3, r0
 801b430:	b920      	cbnz	r0, 801b43c <lv_cont_set_layout+0x18>
 801b432:	4622      	mov	r2, r4
 801b434:	480b      	ldr	r0, [pc, #44]	; (801b464 <lv_cont_set_layout+0x40>)
 801b436:	f7f8 f8e3 	bl	8013600 <lv_debug_log_error>
 801b43a:	e7fe      	b.n	801b43a <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b43c:	4620      	mov	r0, r4
 801b43e:	f7ee f8dd 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 801b442:	7803      	ldrb	r3, [r0, #0]
 801b444:	f003 020f 	and.w	r2, r3, #15
 801b448:	42aa      	cmp	r2, r5
 801b44a:	d009      	beq.n	801b460 <lv_cont_set_layout+0x3c>
    ext->layout = layout;
 801b44c:	f365 0303 	bfi	r3, r5, #0, #4
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b450:	2200      	movs	r2, #0
 801b452:	2101      	movs	r1, #1
    ext->layout = layout;
 801b454:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b456:	4620      	mov	r0, r4
 801b458:	69e3      	ldr	r3, [r4, #28]
}
 801b45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b45e:	4718      	bx	r3
}
 801b460:	bd70      	pop	{r4, r5, r6, pc}
 801b462:	bf00      	nop
 801b464:	0802c354 	.word	0x0802c354

0801b468 <lv_cont_set_fit4>:
{
 801b468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b46c:	461e      	mov	r6, r3
 801b46e:	4604      	mov	r4, r0
 801b470:	4688      	mov	r8, r1
 801b472:	4617      	mov	r7, r2
 801b474:	f89d 5018 	ldrb.w	r5, [sp, #24]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b478:	f7f8 f8be 	bl	80135f8 <lv_debug_check_null>
 801b47c:	4603      	mov	r3, r0
 801b47e:	b920      	cbnz	r0, 801b48a <lv_cont_set_fit4+0x22>
 801b480:	4622      	mov	r2, r4
 801b482:	4818      	ldr	r0, [pc, #96]	; (801b4e4 <lv_cont_set_fit4+0x7c>)
 801b484:	f7f8 f8bc 	bl	8013600 <lv_debug_log_error>
 801b488:	e7fe      	b.n	801b488 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
 801b48a:	4620      	mov	r0, r4
 801b48c:	f7ec fd8e 	bl	8007fac <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b490:	4620      	mov	r0, r4
 801b492:	f7ee f8b3 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 801b496:	7803      	ldrb	r3, [r0, #0]
 801b498:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801b49c:	4542      	cmp	r2, r8
 801b49e:	d10b      	bne.n	801b4b8 <lv_cont_set_fit4+0x50>
 801b4a0:	ebb7 1f93 	cmp.w	r7, r3, lsr #6
 801b4a4:	d108      	bne.n	801b4b8 <lv_cont_set_fit4+0x50>
 801b4a6:	7843      	ldrb	r3, [r0, #1]
 801b4a8:	f003 0203 	and.w	r2, r3, #3
 801b4ac:	42b2      	cmp	r2, r6
 801b4ae:	d103      	bne.n	801b4b8 <lv_cont_set_fit4+0x50>
 801b4b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b4b4:	42ab      	cmp	r3, r5
 801b4b6:	d012      	beq.n	801b4de <lv_cont_set_fit4+0x76>
    ext->fit_left   = left;
 801b4b8:	7803      	ldrb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	2101      	movs	r1, #1
    ext->fit_left   = left;
 801b4be:	f368 1305 	bfi	r3, r8, #4, #2
    ext->fit_right  = right;
 801b4c2:	f367 1387 	bfi	r3, r7, #6, #2
 801b4c6:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = top;
 801b4c8:	7843      	ldrb	r3, [r0, #1]
 801b4ca:	f366 0301 	bfi	r3, r6, #0, #2
    ext->fit_bottom = bottom;
 801b4ce:	f365 0383 	bfi	r3, r5, #2, #2
 801b4d2:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	69e3      	ldr	r3, [r4, #28]
}
 801b4d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801b4dc:	4718      	bx	r3
}
 801b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4e2:	bf00      	nop
 801b4e4:	0802c354 	.word	0x0802c354

0801b4e8 <lv_cont_get_layout>:
{
 801b4e8:	b510      	push	{r4, lr}
 801b4ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b4ec:	f7f8 f884 	bl	80135f8 <lv_debug_check_null>
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	b920      	cbnz	r0, 801b4fe <lv_cont_get_layout+0x16>
 801b4f4:	4622      	mov	r2, r4
 801b4f6:	4805      	ldr	r0, [pc, #20]	; (801b50c <lv_cont_get_layout+0x24>)
 801b4f8:	f7f8 f882 	bl	8013600 <lv_debug_log_error>
 801b4fc:	e7fe      	b.n	801b4fc <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b4fe:	4620      	mov	r0, r4
 801b500:	f7ee f87c 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->layout;
 801b504:	7800      	ldrb	r0, [r0, #0]
}
 801b506:	f000 000f 	and.w	r0, r0, #15
 801b50a:	bd10      	pop	{r4, pc}
 801b50c:	0802c354 	.word	0x0802c354

0801b510 <lv_cont_refr_layout>:
{
 801b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801b514:	2101      	movs	r1, #1
{
 801b516:	b08f      	sub	sp, #60	; 0x3c
 801b518:	4683      	mov	fp, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801b51a:	f7ed fa5f 	bl	80089dc <lv_obj_is_protected>
 801b51e:	4604      	mov	r4, r0
 801b520:	2800      	cmp	r0, #0
 801b522:	f040 8317 	bne.w	801bb54 <lv_cont_refr_layout+0x644>
    lv_layout_t type = lv_cont_get_layout(cont);
 801b526:	4658      	mov	r0, fp
 801b528:	f7ff ffde 	bl	801b4e8 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b52c:	4621      	mov	r1, r4
    lv_layout_t type = lv_cont_get_layout(cont);
 801b52e:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b530:	4658      	mov	r0, fp
 801b532:	f7ec fb71 	bl	8007c18 <lv_obj_get_child>
 801b536:	2800      	cmp	r0, #0
 801b538:	f000 830c 	beq.w	801bb54 <lv_cont_refr_layout+0x644>
    if(type == LV_LAYOUT_OFF) return;
 801b53c:	2d00      	cmp	r5, #0
 801b53e:	f000 8309 	beq.w	801bb54 <lv_cont_refr_layout+0x644>
    if(type == LV_LAYOUT_CENTER) {
 801b542:	2d01      	cmp	r5, #1
 801b544:	d165      	bne.n	801b612 <lv_cont_refr_layout+0x102>
    _LV_LL_READ(cont->child_ll, child) {
 801b546:	f10b 0504 	add.w	r5, fp, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b54a:	2214      	movs	r2, #20
 801b54c:	4621      	mov	r1, r4
 801b54e:	4658      	mov	r0, fp
 801b550:	f7ed faac 	bl	8008aac <_lv_obj_get_style_int>
 801b554:	4606      	mov	r6, r0
 801b556:	4628      	mov	r0, r5
    uint32_t obj_num         = 0;
 801b558:	46a0      	mov	r8, r4
    _LV_LL_READ(cont->child_ll, child) {
 801b55a:	f7f8 f97b 	bl	8013854 <_lv_ll_get_head>
 801b55e:	4607      	mov	r7, r0
 801b560:	b9e7      	cbnz	r7, 801b59c <lv_cont_refr_layout+0x8c>
    if(obj_num == 0) return;
 801b562:	f1b8 0f00 	cmp.w	r8, #0
 801b566:	f000 82f5 	beq.w	801bb54 <lv_cont_refr_layout+0x644>
    h_tot -= inner;
 801b56a:	1ba4      	subs	r4, r4, r6
    lv_coord_t last_cord = -(h_tot / 2);
 801b56c:	f04f 0802 	mov.w	r8, #2
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b570:	4658      	mov	r0, fp
 801b572:	2101      	movs	r1, #1
    h_tot -= inner;
 801b574:	b2a4      	uxth	r4, r4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b576:	f7ec fa15 	bl	80079a4 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b57a:	4628      	mov	r0, r5
    lv_coord_t last_cord = -(h_tot / 2);
 801b57c:	b224      	sxth	r4, r4
 801b57e:	fb94 f4f8 	sdiv	r4, r4, r8
 801b582:	4264      	negs	r4, r4
 801b584:	b224      	sxth	r4, r4
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b586:	f7f8 f968 	bl	801385a <_lv_ll_get_tail>
 801b58a:	4607      	mov	r7, r0
 801b58c:	b9e8      	cbnz	r0, 801b5ca <lv_cont_refr_layout+0xba>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b58e:	2101      	movs	r1, #1
 801b590:	4658      	mov	r0, fp
}
 801b592:	b00f      	add	sp, #60	; 0x3c
 801b594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b598:	f7ec ba18 	b.w	80079cc <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b59c:	4638      	mov	r0, r7
 801b59e:	f7ec fc75 	bl	8007e8c <lv_obj_get_hidden>
 801b5a2:	b960      	cbnz	r0, 801b5be <lv_cont_refr_layout+0xae>
 801b5a4:	2104      	movs	r1, #4
 801b5a6:	4638      	mov	r0, r7
 801b5a8:	f7ed fa18 	bl	80089dc <lv_obj_is_protected>
 801b5ac:	b938      	cbnz	r0, 801b5be <lv_cont_refr_layout+0xae>
        h_tot += lv_obj_get_height(child) + inner;
 801b5ae:	4638      	mov	r0, r7
        obj_num++;
 801b5b0:	f108 0801 	add.w	r8, r8, #1
        h_tot += lv_obj_get_height(child) + inner;
 801b5b4:	f7ec fb9c 	bl	8007cf0 <lv_obj_get_height>
 801b5b8:	4430      	add	r0, r6
 801b5ba:	4404      	add	r4, r0
 801b5bc:	b224      	sxth	r4, r4
    _LV_LL_READ(cont->child_ll, child) {
 801b5be:	4639      	mov	r1, r7
 801b5c0:	4628      	mov	r0, r5
 801b5c2:	f7f8 f94d 	bl	8013860 <_lv_ll_get_next>
 801b5c6:	4607      	mov	r7, r0
 801b5c8:	e7ca      	b.n	801b560 <lv_cont_refr_layout+0x50>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b5ca:	4638      	mov	r0, r7
 801b5cc:	f7ec fc5e 	bl	8007e8c <lv_obj_get_hidden>
 801b5d0:	b9d0      	cbnz	r0, 801b608 <lv_cont_refr_layout+0xf8>
 801b5d2:	2104      	movs	r1, #4
 801b5d4:	4638      	mov	r0, r7
 801b5d6:	f7ed fa01 	bl	80089dc <lv_obj_is_protected>
 801b5da:	4681      	mov	r9, r0
 801b5dc:	b9a0      	cbnz	r0, 801b608 <lv_cont_refr_layout+0xf8>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 801b5de:	4638      	mov	r0, r7
 801b5e0:	b2a4      	uxth	r4, r4
 801b5e2:	f7ec fb85 	bl	8007cf0 <lv_obj_get_height>
 801b5e6:	464b      	mov	r3, r9
 801b5e8:	464a      	mov	r2, r9
 801b5ea:	4659      	mov	r1, fp
 801b5ec:	fb90 f0f8 	sdiv	r0, r0, r8
 801b5f0:	4420      	add	r0, r4
 801b5f2:	b200      	sxth	r0, r0
 801b5f4:	9000      	str	r0, [sp, #0]
 801b5f6:	4638      	mov	r0, r7
 801b5f8:	f7ec fdec 	bl	80081d4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner;
 801b5fc:	4638      	mov	r0, r7
 801b5fe:	f7ec fb77 	bl	8007cf0 <lv_obj_get_height>
 801b602:	4430      	add	r0, r6
 801b604:	4404      	add	r4, r0
 801b606:	b224      	sxth	r4, r4
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b608:	4639      	mov	r1, r7
 801b60a:	4628      	mov	r0, r5
 801b60c:	f7f8 f92d 	bl	801386a <_lv_ll_get_prev>
 801b610:	e7bb      	b.n	801b58a <lv_cont_refr_layout+0x7a>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
 801b612:	1eab      	subs	r3, r5, #2
 801b614:	b2db      	uxtb	r3, r3
 801b616:	2b02      	cmp	r3, #2
 801b618:	d86c      	bhi.n	801b6f4 <lv_cont_refr_layout+0x1e4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b61a:	2212      	movs	r2, #18
 801b61c:	4621      	mov	r1, r4
 801b61e:	4658      	mov	r0, fp
 801b620:	f7ed fa44 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b624:	2213      	movs	r2, #19
 801b626:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b628:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b62a:	4658      	mov	r0, fp
 801b62c:	f7ed fa3e 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b630:	2210      	movs	r2, #16
 801b632:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b634:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b636:	4658      	mov	r0, fp
 801b638:	f7ed fa38 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b63c:	2214      	movs	r2, #20
 801b63e:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b640:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b642:	4658      	mov	r0, fp
 801b644:	f7ed fa32 	bl	8008aac <_lv_obj_get_style_int>
 801b648:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
 801b64a:	4658      	mov	r0, fp
 801b64c:	f7ff ff4c 	bl	801b4e8 <lv_cont_get_layout>
    switch(type) {
 801b650:	2803      	cmp	r0, #3
 801b652:	d04c      	beq.n	801b6ee <lv_cont_refr_layout+0x1de>
 801b654:	2804      	cmp	r0, #4
 801b656:	d046      	beq.n	801b6e6 <lv_cont_refr_layout+0x1d6>
            hpad_corr = 0;
 801b658:	2802      	cmp	r0, #2
 801b65a:	f04f 0701 	mov.w	r7, #1
 801b65e:	bf18      	it	ne
 801b660:	2600      	movne	r6, #0
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b662:	f10b 0804 	add.w	r8, fp, #4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b666:	4658      	mov	r0, fp
 801b668:	2101      	movs	r1, #1
 801b66a:	f7ec f99b 	bl	80079a4 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b66e:	4640      	mov	r0, r8
 801b670:	f7f8 f8f3 	bl	801385a <_lv_ll_get_tail>
 801b674:	4604      	mov	r4, r0
 801b676:	2800      	cmp	r0, #0
 801b678:	d089      	beq.n	801b58e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b67a:	4620      	mov	r0, r4
 801b67c:	f7ec fc06 	bl	8007e8c <lv_obj_get_hidden>
 801b680:	bb60      	cbnz	r0, 801b6dc <lv_cont_refr_layout+0x1cc>
 801b682:	2104      	movs	r1, #4
 801b684:	4620      	mov	r0, r4
 801b686:	f7ed f9a9 	bl	80089dc <lv_obj_is_protected>
 801b68a:	4682      	mov	sl, r0
 801b68c:	bb30      	cbnz	r0, 801b6dc <lv_cont_refr_layout+0x1cc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801b68e:	4601      	mov	r1, r0
 801b690:	2215      	movs	r2, #21
 801b692:	4620      	mov	r0, r4
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
 801b694:	b2ad      	uxth	r5, r5
 801b696:	f7ed fa09 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801b69a:	2216      	movs	r2, #22
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801b69c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801b69e:	4651      	mov	r1, sl
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	f7ed fa03 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b6a6:	2217      	movs	r2, #23
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801b6a8:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b6aa:	4651      	mov	r1, sl
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	f7ed f9fd 	bl	8008aac <_lv_obj_get_style_int>
 801b6b2:	eb05 0209 	add.w	r2, r5, r9
 801b6b6:	1833      	adds	r3, r6, r0
 801b6b8:	4659      	mov	r1, fp
 801b6ba:	b212      	sxth	r2, r2
 801b6bc:	4620      	mov	r0, r4
 801b6be:	b21b      	sxth	r3, r3
 801b6c0:	9200      	str	r2, [sp, #0]
 801b6c2:	463a      	mov	r2, r7
 801b6c4:	f7ec fd86 	bl	80081d4 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f7ec fb11 	bl	8007cf0 <lv_obj_get_height>
 801b6ce:	9b02      	ldr	r3, [sp, #8]
 801b6d0:	4418      	add	r0, r3
 801b6d2:	9b03      	ldr	r3, [sp, #12]
 801b6d4:	4481      	add	r9, r0
 801b6d6:	444b      	add	r3, r9
 801b6d8:	441d      	add	r5, r3
 801b6da:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b6dc:	4621      	mov	r1, r4
 801b6de:	4640      	mov	r0, r8
 801b6e0:	f7f8 f8c3 	bl	801386a <_lv_ll_get_prev>
 801b6e4:	e7c6      	b.n	801b674 <lv_cont_refr_layout+0x164>
            hpad_corr = -right;
 801b6e6:	427e      	negs	r6, r7
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801b6e8:	2703      	movs	r7, #3
            hpad_corr = -right;
 801b6ea:	b236      	sxth	r6, r6
 801b6ec:	e7b9      	b.n	801b662 <lv_cont_refr_layout+0x152>
            hpad_corr = 0;
 801b6ee:	4626      	mov	r6, r4
            align     = LV_ALIGN_IN_TOP_MID;
 801b6f0:	2702      	movs	r7, #2
 801b6f2:	e7b6      	b.n	801b662 <lv_cont_refr_layout+0x152>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
 801b6f4:	1f6b      	subs	r3, r5, #5
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	2b02      	cmp	r3, #2
 801b6fa:	d86d      	bhi.n	801b7d8 <lv_cont_refr_layout+0x2c8>
    lv_layout_t type = lv_cont_get_layout(cont);
 801b6fc:	4658      	mov	r0, fp
 801b6fe:	f7ff fef3 	bl	801b4e8 <lv_cont_get_layout>
 801b702:	4605      	mov	r5, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 801b704:	4658      	mov	r0, fp
 801b706:	f7ec ff0d 	bl	8008524 <lv_obj_get_base_dir>
    switch(type) {
 801b70a:	2d06      	cmp	r5, #6
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 801b70c:	4606      	mov	r6, r0
    switch(type) {
 801b70e:	d00e      	beq.n	801b72e <lv_cont_refr_layout+0x21e>
 801b710:	2d07      	cmp	r5, #7
 801b712:	d054      	beq.n	801b7be <lv_cont_refr_layout+0x2ae>
 801b714:	2d05      	cmp	r5, #5
 801b716:	d105      	bne.n	801b724 <lv_cont_refr_layout+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b718:	4621      	mov	r1, r4
 801b71a:	2210      	movs	r2, #16
 801b71c:	4658      	mov	r0, fp
 801b71e:	f7ed f9c5 	bl	8008aac <_lv_obj_get_style_int>
 801b722:	4604      	mov	r4, r0
            vpad_corr = 0;
 801b724:	2e01      	cmp	r6, #1
 801b726:	bf14      	ite	ne
 801b728:	2701      	movne	r7, #1
 801b72a:	2703      	moveq	r7, #3
 801b72c:	e003      	b.n	801b736 <lv_cont_refr_layout+0x226>
            vpad_corr = 0;
 801b72e:	2801      	cmp	r0, #1
 801b730:	bf14      	ite	ne
 801b732:	2707      	movne	r7, #7
 801b734:	2708      	moveq	r7, #8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b736:	2101      	movs	r1, #1
 801b738:	4658      	mov	r0, fp
 801b73a:	f7ec f933 	bl	80079a4 <lv_obj_add_protect>
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
 801b73e:	2e01      	cmp	r6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b740:	f04f 0100 	mov.w	r1, #0
 801b744:	4658      	mov	r0, fp
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b746:	bf0c      	ite	eq
 801b748:	2213      	moveq	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b74a:	2212      	movne	r2, #18
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b74c:	f10b 0a04 	add.w	sl, fp, #4
 801b750:	f7ed f9ac 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b754:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b756:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b758:	2100      	movs	r1, #0
 801b75a:	4658      	mov	r0, fp
 801b75c:	f7ed f9a6 	bl	8008aac <_lv_obj_get_style_int>
 801b760:	9002      	str	r0, [sp, #8]
 801b762:	4650      	mov	r0, sl
 801b764:	f7f8 f879 	bl	801385a <_lv_ll_get_tail>
 801b768:	4605      	mov	r5, r0
 801b76a:	2800      	cmp	r0, #0
 801b76c:	f43f af0f 	beq.w	801b58e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b770:	4628      	mov	r0, r5
 801b772:	f7ec fb8b 	bl	8007e8c <lv_obj_get_hidden>
 801b776:	b9e8      	cbnz	r0, 801b7b4 <lv_cont_refr_layout+0x2a4>
 801b778:	2104      	movs	r1, #4
 801b77a:	4628      	mov	r0, r5
 801b77c:	f7ed f92e 	bl	80089dc <lv_obj_is_protected>
 801b780:	b9c0      	cbnz	r0, 801b7b4 <lv_cont_refr_layout+0x2a4>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801b782:	2e01      	cmp	r6, #1
 801b784:	fa1f f988 	uxth.w	r9, r8
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b788:	463a      	mov	r2, r7
 801b78a:	4659      	mov	r1, fp
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801b78c:	bf0a      	itet	eq
 801b78e:	f1c9 0300 	rsbeq	r3, r9, #0
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b792:	4643      	movne	r3, r8
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801b794:	9400      	streq	r4, [sp, #0]
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b796:	4628      	mov	r0, r5
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801b798:	bf0c      	ite	eq
 801b79a:	b21b      	sxtheq	r3, r3
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b79c:	9400      	strne	r4, [sp, #0]
 801b79e:	f7ec fd19 	bl	80081d4 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + inner;
 801b7a2:	4628      	mov	r0, r5
 801b7a4:	f7ec fa96 	bl	8007cd4 <lv_obj_get_width>
 801b7a8:	9b02      	ldr	r3, [sp, #8]
 801b7aa:	eb00 0803 	add.w	r8, r0, r3
 801b7ae:	44c8      	add	r8, r9
 801b7b0:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b7b4:	4629      	mov	r1, r5
 801b7b6:	4650      	mov	r0, sl
 801b7b8:	f7f8 f857 	bl	801386a <_lv_ll_get_prev>
 801b7bc:	e7d4      	b.n	801b768 <lv_cont_refr_layout+0x258>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801b7be:	4621      	mov	r1, r4
 801b7c0:	2211      	movs	r2, #17
 801b7c2:	4658      	mov	r0, fp
 801b7c4:	f7ed f972 	bl	8008aac <_lv_obj_get_style_int>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 801b7c8:	2e01      	cmp	r6, #1
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 801b7ca:	f1c0 0400 	rsb	r4, r0, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 801b7ce:	bf14      	ite	ne
 801b7d0:	2704      	movne	r7, #4
 801b7d2:	2706      	moveq	r7, #6
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 801b7d4:	b224      	sxth	r4, r4
 801b7d6:	e7ae      	b.n	801b736 <lv_cont_refr_layout+0x226>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
 801b7d8:	f1a5 0308 	sub.w	r3, r5, #8
 801b7dc:	b2db      	uxtb	r3, r3
 801b7de:	2b02      	cmp	r3, #2
 801b7e0:	f200 8130 	bhi.w	801ba44 <lv_cont_refr_layout+0x534>
    lv_layout_t type = lv_cont_get_layout(cont);
 801b7e4:	4658      	mov	r0, fp
 801b7e6:	f7ff fe7f 	bl	801b4e8 <lv_cont_get_layout>
 801b7ea:	9005      	str	r0, [sp, #20]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801b7ec:	4658      	mov	r0, fp
 801b7ee:	f7ec fa71 	bl	8007cd4 <lv_obj_get_width>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801b7f2:	2210      	movs	r2, #16
 801b7f4:	9007      	str	r0, [sp, #28]
 801b7f6:	4621      	mov	r1, r4
 801b7f8:	4658      	mov	r0, fp
 801b7fa:	f7ed f957 	bl	8008aac <_lv_obj_get_style_int>
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801b7fe:	f10b 0304 	add.w	r3, fp, #4
 801b802:	4606      	mov	r6, r0
 801b804:	4618      	mov	r0, r3
 801b806:	9303      	str	r3, [sp, #12]
 801b808:	f7f8 f827 	bl	801385a <_lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 801b80c:	4605      	mov	r5, r0
 801b80e:	2800      	cmp	r0, #0
 801b810:	f000 81a0 	beq.w	801bb54 <lv_cont_refr_layout+0x644>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b814:	2101      	movs	r1, #1
 801b816:	4658      	mov	r0, fp
 801b818:	f7ec f8c4 	bl	80079a4 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b81c:	2212      	movs	r2, #18
 801b81e:	4621      	mov	r1, r4
 801b820:	4658      	mov	r0, fp
 801b822:	f7ed f943 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b826:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801b828:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b82a:	4621      	mov	r1, r4
 801b82c:	4658      	mov	r0, fp
 801b82e:	f7ed f93d 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b832:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801b834:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801b836:	4621      	mov	r1, r4
 801b838:	4658      	mov	r0, fp
 801b83a:	f7ed f937 	bl	8008aac <_lv_obj_get_style_int>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
 801b83e:	9b08      	ldr	r3, [sp, #32]
 801b840:	9006      	str	r0, [sp, #24]
 801b842:	441f      	add	r7, r3
 801b844:	b23b      	sxth	r3, r7
 801b846:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t obj_num = 0;
 801b848:	2700      	movs	r7, #0
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
 801b84a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801b84e:	462c      	mov	r4, r5
        lv_coord_t h_row = 0;
 801b850:	9702      	str	r7, [sp, #8]
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801b852:	4628      	mov	r0, r5
 801b854:	f7ec fb1a 	bl	8007e8c <lv_obj_get_hidden>
 801b858:	2800      	cmp	r0, #0
 801b85a:	d15f      	bne.n	801b91c <lv_cont_refr_layout+0x40c>
 801b85c:	2104      	movs	r1, #4
 801b85e:	4628      	mov	r0, r5
 801b860:	f7ed f8bc 	bl	80089dc <lv_obj_is_protected>
 801b864:	4681      	mov	r9, r0
 801b866:	2800      	cmp	r0, #0
 801b868:	d158      	bne.n	801b91c <lv_cont_refr_layout+0x40c>
                lv_coord_t w = lv_obj_get_width(child_rc);
 801b86a:	4628      	mov	r0, r5
 801b86c:	f7ec fa32 	bl	8007cd4 <lv_obj_get_width>
 801b870:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b872:	2217      	movs	r2, #23
 801b874:	4649      	mov	r1, r9
 801b876:	4628      	mov	r0, r5
 801b878:	f7ed f918 	bl	8008aac <_lv_obj_get_style_int>
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
 801b87c:	4482      	add	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 801b87e:	2218      	movs	r2, #24
 801b880:	4649      	mov	r1, r9
 801b882:	fa1f fa8a 	uxth.w	sl, sl
 801b886:	4628      	mov	r0, r5
 801b888:	f7ed f910 	bl	8008aac <_lv_obj_get_style_int>
                if(w_row + w > w_obj) {
 801b88c:	9a07      	ldr	r2, [sp, #28]
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
 801b88e:	4450      	add	r0, sl
 801b890:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
 801b892:	fa08 f380 	sxtah	r3, r8, r0
 801b896:	4293      	cmp	r3, r2
 801b898:	dd1b      	ble.n	801b8d2 <lv_cont_refr_layout+0x3c2>
                    if(child_rc != NULL && obj_num != 0) {
 801b89a:	2f00      	cmp	r7, #0
 801b89c:	f000 812b 	beq.w	801baf6 <lv_cont_refr_layout+0x5e6>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
 801b8a0:	4629      	mov	r1, r5
 801b8a2:	9803      	ldr	r0, [sp, #12]
 801b8a4:	f7f7 ffdc 	bl	8013860 <_lv_ll_get_next>
 801b8a8:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 801b8aa:	2f01      	cmp	r7, #1
 801b8ac:	d141      	bne.n	801b932 <lv_cont_refr_layout+0x422>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801b8ae:	2215      	movs	r2, #21
 801b8b0:	2100      	movs	r1, #0
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	f7ed f8fa 	bl	8008aac <_lv_obj_get_style_int>
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
 801b8b8:	4430      	add	r0, r6
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	2202      	movs	r2, #2
 801b8be:	b200      	sxth	r0, r0
 801b8c0:	4659      	mov	r1, fp
 801b8c2:	9000      	str	r0, [sp, #0]
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f7ec fc85 	bl	80081d4 <lv_obj_align>
        if(child_rc == NULL) break;
 801b8ca:	2d00      	cmp	r5, #0
 801b8cc:	f040 812f 	bne.w	801bb2e <lv_cont_refr_layout+0x61e>
 801b8d0:	e65d      	b.n	801b58e <lv_cont_refr_layout+0x7e>
                w_row += w + pinner; /*Add the object width + inner padding*/
 801b8d2:	9b06      	ldr	r3, [sp, #24]
                obj_num++;
 801b8d4:	3701      	adds	r7, #1
                w_row += w + pinner; /*Add the object width + inner padding*/
 801b8d6:	4498      	add	r8, r3
 801b8d8:	4480      	add	r8, r0
                lv_coord_t h = lv_obj_get_height(child_rc);
 801b8da:	4628      	mov	r0, r5
 801b8dc:	f7ec fa08 	bl	8007cf0 <lv_obj_get_height>
 801b8e0:	4682      	mov	sl, r0
 801b8e2:	2215      	movs	r2, #21
 801b8e4:	4649      	mov	r1, r9
 801b8e6:	4628      	mov	r0, r5
                w_row += w + pinner; /*Add the object width + inner padding*/
 801b8e8:	fa0f f888 	sxth.w	r8, r8
 801b8ec:	f7ed f8de 	bl	8008aac <_lv_obj_get_style_int>
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
 801b8f0:	4482      	add	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801b8f2:	4649      	mov	r1, r9
 801b8f4:	2216      	movs	r2, #22
 801b8f6:	fa1f fa8a 	uxth.w	sl, sl
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	f7ed f8d6 	bl	8008aac <_lv_obj_get_style_int>
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 801b900:	9b02      	ldr	r3, [sp, #8]
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 801b902:	4450      	add	r0, sl
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801b904:	2108      	movs	r1, #8
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 801b906:	b200      	sxth	r0, r0
 801b908:	4283      	cmp	r3, r0
 801b90a:	bfb8      	it	lt
 801b90c:	4603      	movlt	r3, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801b90e:	4628      	mov	r0, r5
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 801b910:	9302      	str	r3, [sp, #8]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801b912:	f7ed f863 	bl	80089dc <lv_obj_is_protected>
 801b916:	2800      	cmp	r0, #0
 801b918:	f040 80ea 	bne.w	801baf0 <lv_cont_refr_layout+0x5e0>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801b91c:	4629      	mov	r1, r5
 801b91e:	9803      	ldr	r0, [sp, #12]
 801b920:	f7f7 ffa3 	bl	801386a <_lv_ll_get_prev>
 801b924:	4605      	mov	r5, r0
            if(obj_num == 0)
 801b926:	2f00      	cmp	r7, #0
 801b928:	f000 810f 	beq.w	801bb4a <lv_cont_refr_layout+0x63a>
        } while(child_rc != NULL);
 801b92c:	2800      	cmp	r0, #0
 801b92e:	d190      	bne.n	801b852 <lv_cont_refr_layout+0x342>
 801b930:	e7bb      	b.n	801b8aa <lv_cont_refr_layout+0x39a>
            w_row -= pinner * obj_num;
 801b932:	9b06      	ldr	r3, [sp, #24]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 801b934:	4658      	mov	r0, fp
            w_row -= pinner * obj_num;
 801b936:	fb13 f307 	smulbb	r3, r3, r7
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 801b93a:	3f01      	subs	r7, #1
            w_row -= pinner * obj_num;
 801b93c:	eba8 0803 	sub.w	r8, r8, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 801b940:	9b07      	ldr	r3, [sp, #28]
 801b942:	fa0f f888 	sxth.w	r8, r8
 801b946:	eba3 0808 	sub.w	r8, r3, r8
 801b94a:	fbb8 f7f7 	udiv	r7, r8, r7
 801b94e:	b23b      	sxth	r3, r7
 801b950:	9309      	str	r3, [sp, #36]	; 0x24
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 801b952:	f7ec fde7 	bl	8008524 <lv_obj_get_base_dir>
 801b956:	2801      	cmp	r0, #1
 801b958:	d06f      	beq.n	801ba3a <lv_cont_refr_layout+0x52a>
                inv = 1;
 801b95a:	f04f 0901 	mov.w	r9, #1
                align = LV_ALIGN_IN_TOP_LEFT;
 801b95e:	f8cd 9010 	str.w	r9, [sp, #16]
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801b962:	9b02      	ldr	r3, [sp, #8]
                align = LV_ALIGN_IN_TOP_LEFT;
 801b964:	f8dd 8020 	ldr.w	r8, [sp, #32]
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801b968:	18f3      	adds	r3, r6, r3
 801b96a:	b29b      	uxth	r3, r3
 801b96c:	930c      	str	r3, [sp, #48]	; 0x30
 801b96e:	e041      	b.n	801b9f4 <lv_cont_refr_layout+0x4e4>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 801b970:	4620      	mov	r0, r4
 801b972:	f7ec fa8b 	bl	8007e8c <lv_obj_get_hidden>
 801b976:	bba8      	cbnz	r0, 801b9e4 <lv_cont_refr_layout+0x4d4>
 801b978:	2104      	movs	r1, #4
 801b97a:	4620      	mov	r0, r4
 801b97c:	f7ed f82e 	bl	80089dc <lv_obj_is_protected>
 801b980:	4607      	mov	r7, r0
 801b982:	bb78      	cbnz	r0, 801b9e4 <lv_cont_refr_layout+0x4d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b984:	4601      	mov	r1, r0
 801b986:	2217      	movs	r2, #23
 801b988:	4620      	mov	r0, r4
 801b98a:	f7ed f88f 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 801b98e:	2218      	movs	r2, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int)
 801b990:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int)
 801b992:	4639      	mov	r1, r7
 801b994:	4620      	mov	r0, r4
 801b996:	f7ed f889 	bl	8008aac <_lv_obj_get_style_int>
                    switch(type) {
 801b99a:	9b05      	ldr	r3, [sp, #20]
 801b99c:	900b      	str	r0, [sp, #44]	; 0x2c
 801b99e:	2b09      	cmp	r3, #9
 801b9a0:	d02b      	beq.n	801b9fa <lv_cont_refr_layout+0x4ea>
 801b9a2:	2b0a      	cmp	r3, #10
 801b9a4:	d036      	beq.n	801ba14 <lv_cont_refr_layout+0x504>
 801b9a6:	2b08      	cmp	r3, #8
 801b9a8:	d111      	bne.n	801b9ce <lv_cont_refr_layout+0x4be>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801b9aa:	2215      	movs	r2, #21
 801b9ac:	4639      	mov	r1, r7
 801b9ae:	4620      	mov	r0, r4
 801b9b0:	f7ed f87c 	bl	8008aac <_lv_obj_get_style_int>
                                         inv * (act_x + mleft),
 801b9b4:	eb08 030a 	add.w	r3, r8, sl
                            lv_obj_align(child_tmp, cont, align,
 801b9b8:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801b9bc:	4430      	add	r0, r6
                            lv_obj_align(child_tmp, cont, align,
 801b9be:	b200      	sxth	r0, r0
 801b9c0:	9a04      	ldr	r2, [sp, #16]
 801b9c2:	b21b      	sxth	r3, r3
 801b9c4:	4659      	mov	r1, fp
 801b9c6:	9000      	str	r0, [sp, #0]
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	f7ec fc03 	bl	80081d4 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f7ec f980 	bl	8007cd4 <lv_obj_get_width>
 801b9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9d6:	4418      	add	r0, r3
 801b9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9da:	4482      	add	sl, r0
 801b9dc:	449a      	add	sl, r3
 801b9de:	44d0      	add	r8, sl
 801b9e0:	fa0f f888 	sxth.w	r8, r8
                if(child_tmp == child_rc) break;
 801b9e4:	42ac      	cmp	r4, r5
 801b9e6:	f000 80a2 	beq.w	801bb2e <lv_cont_refr_layout+0x61e>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
 801b9ea:	4621      	mov	r1, r4
 801b9ec:	9803      	ldr	r0, [sp, #12]
 801b9ee:	f7f7 ff3c 	bl	801386a <_lv_ll_get_prev>
 801b9f2:	4604      	mov	r4, r0
            while(child_tmp != NULL) {
 801b9f4:	2c00      	cmp	r4, #0
 801b9f6:	d1bb      	bne.n	801b970 <lv_cont_refr_layout+0x460>
 801b9f8:	e767      	b.n	801b8ca <lv_cont_refr_layout+0x3ba>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f7ec f978 	bl	8007cf0 <lv_obj_get_height>
 801ba00:	9a02      	ldr	r2, [sp, #8]
                                         inv * (act_x + mleft),
 801ba02:	eb08 030a 	add.w	r3, r8, sl
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801ba06:	1a10      	subs	r0, r2, r0
 801ba08:	2202      	movs	r2, #2
                            lv_obj_align(child_tmp, cont, align,
 801ba0a:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801ba0e:	fb90 f0f2 	sdiv	r0, r0, r2
 801ba12:	e7d3      	b.n	801b9bc <lv_cont_refr_layout+0x4ac>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801ba14:	4620      	mov	r0, r4
 801ba16:	f7ec f96b 	bl	8007cf0 <lv_obj_get_height>
 801ba1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801ba1c:	2216      	movs	r2, #22
 801ba1e:	4639      	mov	r1, r7
 801ba20:	1a18      	subs	r0, r3, r0
 801ba22:	b283      	uxth	r3, r0
 801ba24:	4620      	mov	r0, r4
 801ba26:	930a      	str	r3, [sp, #40]	; 0x28
 801ba28:	f7ed f840 	bl	8008aac <_lv_obj_get_style_int>
                                         inv * (act_x + mleft),
 801ba2c:	eb08 030a 	add.w	r3, r8, sl
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801ba30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                            lv_obj_align(child_tmp, cont, align,
 801ba32:	fb13 f309 	smulbb	r3, r3, r9
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801ba36:	1a10      	subs	r0, r2, r0
 801ba38:	e7c1      	b.n	801b9be <lv_cont_refr_layout+0x4ae>
                align = LV_ALIGN_IN_TOP_RIGHT;
 801ba3a:	2303      	movs	r3, #3
                inv = -1;
 801ba3c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                align = LV_ALIGN_IN_TOP_RIGHT;
 801ba40:	9304      	str	r3, [sp, #16]
 801ba42:	e78e      	b.n	801b962 <lv_cont_refr_layout+0x452>
    else if(type == LV_LAYOUT_GRID) {
 801ba44:	2d0b      	cmp	r5, #11
 801ba46:	f040 8085 	bne.w	801bb54 <lv_cont_refr_layout+0x644>
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 801ba4a:	4658      	mov	r0, fp
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801ba4c:	f10b 0804 	add.w	r8, fp, #4
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 801ba50:	f7ed f8f6 	bl	8008c40 <lv_obj_get_width_fit>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801ba54:	2214      	movs	r2, #20
 801ba56:	4621      	mov	r1, r4
 801ba58:	4682      	mov	sl, r0
 801ba5a:	4658      	mov	r0, fp
 801ba5c:	f7ed f826 	bl	8008aac <_lv_obj_get_style_int>
 801ba60:	4607      	mov	r7, r0
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801ba62:	4621      	mov	r1, r4
 801ba64:	4658      	mov	r0, fp
 801ba66:	b2bf      	uxth	r7, r7
 801ba68:	f7ec f8d6 	bl	8007c18 <lv_obj_get_child>
 801ba6c:	f7ec f940 	bl	8007cf0 <lv_obj_get_height>
 801ba70:	4438      	add	r0, r7
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801ba72:	2101      	movs	r1, #1
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801ba74:	b283      	uxth	r3, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801ba76:	4658      	mov	r0, fp
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801ba78:	9302      	str	r3, [sp, #8]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801ba7a:	f7eb ff93 	bl	80079a4 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801ba7e:	4621      	mov	r1, r4
 801ba80:	2212      	movs	r2, #18
 801ba82:	4658      	mov	r0, fp
 801ba84:	f7ed f812 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ba88:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801ba8a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ba8c:	2210      	movs	r2, #16
 801ba8e:	4658      	mov	r0, fp
 801ba90:	f7ed f80c 	bl	8008aac <_lv_obj_get_style_int>
 801ba94:	4606      	mov	r6, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801ba96:	4640      	mov	r0, r8
    lv_coord_t act_x = left;
 801ba98:	464d      	mov	r5, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801ba9a:	f7f7 fede 	bl	801385a <_lv_ll_get_tail>
        if(act_x + obj_w > w_fit + left) {
 801ba9e:	44ca      	add	sl, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801baa0:	4604      	mov	r4, r0
 801baa2:	2c00      	cmp	r4, #0
 801baa4:	f43f ad73 	beq.w	801b58e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801baa8:	4620      	mov	r0, r4
 801baaa:	f7ec f9ef 	bl	8007e8c <lv_obj_get_hidden>
 801baae:	b9c8      	cbnz	r0, 801bae4 <lv_cont_refr_layout+0x5d4>
 801bab0:	2104      	movs	r1, #4
 801bab2:	4620      	mov	r0, r4
 801bab4:	f7ec ff92 	bl	80089dc <lv_obj_is_protected>
 801bab8:	b9a0      	cbnz	r0, 801bae4 <lv_cont_refr_layout+0x5d4>
        lv_coord_t obj_w = lv_obj_get_width(child);
 801baba:	4620      	mov	r0, r4
 801babc:	f7ec f90a 	bl	8007cd4 <lv_obj_get_width>
        if(act_x + obj_w > w_fit + left) {
 801bac0:	182a      	adds	r2, r5, r0
 801bac2:	9003      	str	r0, [sp, #12]
        lv_obj_set_pos(child, act_x, act_y);
 801bac4:	4620      	mov	r0, r4
        if(act_x + obj_w > w_fit + left) {
 801bac6:	4552      	cmp	r2, sl
            act_y += y_ofs;
 801bac8:	bfc2      	ittt	gt
 801baca:	9a02      	ldrgt	r2, [sp, #8]
            act_x = left;
 801bacc:	464d      	movgt	r5, r9
            act_y += y_ofs;
 801bace:	18b6      	addgt	r6, r6, r2
        lv_obj_set_pos(child, act_x, act_y);
 801bad0:	4629      	mov	r1, r5
            act_y += y_ofs;
 801bad2:	bfc8      	it	gt
 801bad4:	b236      	sxthgt	r6, r6
        lv_obj_set_pos(child, act_x, act_y);
 801bad6:	4632      	mov	r2, r6
 801bad8:	f7ec fac4 	bl	8008064 <lv_obj_set_pos>
        act_x += inner + obj_w;
 801badc:	9b03      	ldr	r3, [sp, #12]
 801bade:	443b      	add	r3, r7
 801bae0:	441d      	add	r5, r3
 801bae2:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801bae4:	4621      	mov	r1, r4
 801bae6:	4640      	mov	r0, r8
 801bae8:	f7f7 febf 	bl	801386a <_lv_ll_get_prev>
 801baec:	4604      	mov	r4, r0
 801baee:	e7d8      	b.n	801baa2 <lv_cont_refr_layout+0x592>
        if(obj_num == 0) {
 801baf0:	2f00      	cmp	r7, #0
 801baf2:	f47f aeda 	bne.w	801b8aa <lv_cont_refr_layout+0x39a>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int)
 801baf6:	2215      	movs	r2, #21
 801baf8:	2100      	movs	r1, #0
 801bafa:	4628      	mov	r0, r5
 801bafc:	f7ec ffd6 	bl	8008aac <_lv_obj_get_style_int>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
 801bb00:	2202      	movs	r2, #2
 801bb02:	b284      	uxth	r4, r0
 801bb04:	4659      	mov	r1, fp
 801bb06:	4628      	mov	r0, r5
 801bb08:	19a3      	adds	r3, r4, r6
 801bb0a:	b21b      	sxth	r3, r3
 801bb0c:	9300      	str	r3, [sp, #0]
 801bb0e:	2300      	movs	r3, #0
 801bb10:	f7ec fb60 	bl	80081d4 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 801bb14:	4628      	mov	r0, r5
 801bb16:	f7ec f8eb 	bl	8007cf0 <lv_obj_get_height>
                h_row += mtop;
 801bb1a:	4404      	add	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int)
 801bb1c:	2216      	movs	r2, #22
 801bb1e:	2100      	movs	r1, #0
 801bb20:	b2a4      	uxth	r4, r4
 801bb22:	4628      	mov	r0, r5
 801bb24:	f7ec ffc2 	bl	8008aac <_lv_obj_get_style_int>
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 801bb28:	4420      	add	r0, r4
 801bb2a:	b203      	sxth	r3, r0
 801bb2c:	9302      	str	r3, [sp, #8]
        act_y += pinner + h_row;           /*y increment*/
 801bb2e:	9b06      	ldr	r3, [sp, #24]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801bb30:	4629      	mov	r1, r5
 801bb32:	9803      	ldr	r0, [sp, #12]
        act_y += pinner + h_row;           /*y increment*/
 801bb34:	441e      	add	r6, r3
 801bb36:	9b02      	ldr	r3, [sp, #8]
 801bb38:	441e      	add	r6, r3
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801bb3a:	f7f7 fe96 	bl	801386a <_lv_ll_get_prev>
    while(child_rs != NULL) {
 801bb3e:	4605      	mov	r5, r0
        act_y += pinner + h_row;           /*y increment*/
 801bb40:	b236      	sxth	r6, r6
    while(child_rs != NULL) {
 801bb42:	2800      	cmp	r0, #0
 801bb44:	f47f ae80 	bne.w	801b848 <lv_cont_refr_layout+0x338>
 801bb48:	e521      	b.n	801b58e <lv_cont_refr_layout+0x7e>
        } while(child_rc != NULL);
 801bb4a:	2800      	cmp	r0, #0
 801bb4c:	f43f ad1f 	beq.w	801b58e <lv_cont_refr_layout+0x7e>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801bb50:	462c      	mov	r4, r5
 801bb52:	e67e      	b.n	801b852 <lv_cont_refr_layout+0x342>
}
 801bb54:	b00f      	add	sp, #60	; 0x3c
 801bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bb5c <lv_cont_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801bb5c:	2908      	cmp	r1, #8
{
 801bb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb62:	4605      	mov	r5, r0
 801bb64:	460f      	mov	r7, r1
 801bb66:	4614      	mov	r4, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801bb68:	d114      	bne.n	801bb94 <lv_cont_signal+0x38>
    switch(type) {
 801bb6a:	7813      	ldrb	r3, [r2, #0]
 801bb6c:	b14b      	cbz	r3, 801bb82 <lv_cont_signal+0x26>
        info->result = lv_cont_get_style(cont, info->part);
 801bb6e:	2300      	movs	r3, #0
 801bb70:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(cont, sign, param);
 801bb72:	4b22      	ldr	r3, [pc, #136]	; (801bbfc <lv_cont_signal+0xa0>)
 801bb74:	4622      	mov	r2, r4
 801bb76:	4628      	mov	r0, r5
 801bb78:	2108      	movs	r1, #8
 801bb7a:	685b      	ldr	r3, [r3, #4]
}
 801bb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(cont, sign, param);
 801bb80:	4718      	bx	r3
            style_dsc_p = &cont->style_list;
 801bb82:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_cont_get_style(cont, info->part);
 801bb86:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d0f2      	beq.n	801bb72 <lv_cont_signal+0x16>
 801bb8c:	2601      	movs	r6, #1
}
 801bb8e:	4630      	mov	r0, r6
 801bb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(cont, sign, param);
 801bb94:	4b19      	ldr	r3, [pc, #100]	; (801bbfc <lv_cont_signal+0xa0>)
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801bb9a:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 801bb9c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801bb9e:	d1f6      	bne.n	801bb8e <lv_cont_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801bba0:	2f07      	cmp	r7, #7
 801bba2:	d105      	bne.n	801bbb0 <lv_cont_signal+0x54>
 801bba4:	4620      	mov	r0, r4
 801bba6:	4916      	ldr	r1, [pc, #88]	; (801bc00 <lv_cont_signal+0xa4>)
}
 801bba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801bbac:	f7ed be30 	b.w	8009810 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 801bbb0:	2f04      	cmp	r7, #4
 801bbb2:	d106      	bne.n	801bbc2 <lv_cont_signal+0x66>
        lv_cont_refr_layout(cont);
 801bbb4:	4628      	mov	r0, r5
 801bbb6:	f7ff fcab 	bl	801b510 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801bbba:	4628      	mov	r0, r5
 801bbbc:	f7ff fa02 	bl	801afc4 <lv_cont_refr_autofit>
 801bbc0:	e7e5      	b.n	801bb8e <lv_cont_signal+0x32>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
 801bbc2:	2f01      	cmp	r7, #1
 801bbc4:	d0f6      	beq.n	801bbb4 <lv_cont_signal+0x58>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 801bbc6:	2f02      	cmp	r7, #2
 801bbc8:	d114      	bne.n	801bbf4 <lv_cont_signal+0x98>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 801bbca:	4628      	mov	r0, r5
 801bbcc:	f7ec f882 	bl	8007cd4 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801bbd0:	88a3      	ldrh	r3, [r4, #4]
 801bbd2:	8822      	ldrh	r2, [r4, #0]
 801bbd4:	3301      	adds	r3, #1
 801bbd6:	1a9b      	subs	r3, r3, r2
 801bbd8:	b21b      	sxth	r3, r3
 801bbda:	4298      	cmp	r0, r3
 801bbdc:	d1ea      	bne.n	801bbb4 <lv_cont_signal+0x58>
 801bbde:	4628      	mov	r0, r5
 801bbe0:	f7ec f886 	bl	8007cf0 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801bbe4:	88e3      	ldrh	r3, [r4, #6]
 801bbe6:	8862      	ldrh	r2, [r4, #2]
 801bbe8:	3301      	adds	r3, #1
 801bbea:	1a9b      	subs	r3, r3, r2
 801bbec:	b21b      	sxth	r3, r3
 801bbee:	4298      	cmp	r0, r3
 801bbf0:	d1e0      	bne.n	801bbb4 <lv_cont_signal+0x58>
 801bbf2:	e7cb      	b.n	801bb8c <lv_cont_signal+0x30>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 801bbf4:	2f03      	cmp	r7, #3
 801bbf6:	d1c9      	bne.n	801bb8c <lv_cont_signal+0x30>
 801bbf8:	e7df      	b.n	801bbba <lv_cont_signal+0x5e>
 801bbfa:	bf00      	nop
 801bbfc:	2002891c 	.word	0x2002891c
 801bc00:	0802c434 	.word	0x0802c434

0801bc04 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_img_design(lv_obj_t * img, const lv_area_t * clip_area, lv_design_mode_t mode)
{
 801bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc08:	4615      	mov	r5, r2
 801bc0a:	b0ad      	sub	sp, #180	; 0xb4
 801bc0c:	4604      	mov	r4, r0
 801bc0e:	4688      	mov	r8, r1
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 801bc10:	f7ed fcf4 	bl	80095fc <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 801bc14:	2d02      	cmp	r5, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 801bc16:	4606      	mov	r6, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 801bc18:	d176      	bne.n	801bd08 <lv_img_design+0x104>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 801bc1a:	462a      	mov	r2, r5
 801bc1c:	2100      	movs	r1, #0
 801bc1e:	4620      	mov	r0, r4
 801bc20:	f7ec ff44 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 801bc24:	2800      	cmp	r0, #0
 801bc26:	f040 82a0 	bne.w	801c16a <lv_img_design+0x566>

        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
 801bc2a:	7d33      	ldrb	r3, [r6, #20]
 801bc2c:	f003 0203 	and.w	r2, r3, #3
 801bc30:	3a02      	subs	r2, #2
 801bc32:	2a01      	cmp	r2, #1
 801bc34:	d803      	bhi.n	801bc3e <lv_img_design+0x3a>
            a.x1 += img->coords.x1;
            a.y1 += img->coords.y1;
            a.x2 += img->coords.x1;
            a.y2 += img->coords.y1;

            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
 801bc36:	2002      	movs	r0, #2
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
        }
    }

    return LV_DESIGN_RES_OK;
}
 801bc38:	b02d      	add	sp, #180	; 0xb4
 801bc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
 801bc3e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801bc42:	2b20      	cmp	r3, #32
 801bc44:	d001      	beq.n	801bc4a <lv_img_design+0x46>
 801bc46:	2b08      	cmp	r3, #8
 801bc48:	d1f5      	bne.n	801bc36 <lv_img_design+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa)
 801bc4a:	f248 02ac 	movw	r2, #32940	; 0x80ac
 801bc4e:	2100      	movs	r1, #0
 801bc50:	4620      	mov	r0, r4
 801bc52:	f7ed f9cd 	bl	8008ff0 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
 801bc56:	28ff      	cmp	r0, #255	; 0xff
 801bc58:	d1ed      	bne.n	801bc36 <lv_img_design+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801bc5a:	2206      	movs	r2, #6
 801bc5c:	2100      	movs	r1, #0
 801bc5e:	4620      	mov	r0, r4
 801bc60:	f7ec ff24 	bl	8008aac <_lv_obj_get_style_int>
        angle_final += ext->angle;
 801bc64:	89b7      	ldrh	r7, [r6, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
 801bc66:	183f      	adds	r7, r7, r0
 801bc68:	d1e5      	bne.n	801bc36 <lv_img_design+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801bc6a:	2207      	movs	r2, #7
 801bc6c:	4639      	mov	r1, r7
 801bc6e:	4620      	mov	r0, r4
 801bc70:	f7ec ff1c 	bl	8008aac <_lv_obj_get_style_int>
        zoom_final = (zoom_final * ext->zoom) >> 8;
 801bc74:	8a75      	ldrh	r5, [r6, #18]
 801bc76:	4345      	muls	r5, r0
 801bc78:	122d      	asrs	r5, r5, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
 801bc7a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801bc7e:	d119      	bne.n	801bcb4 <lv_img_design+0xb0>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
 801bc80:	463a      	mov	r2, r7
 801bc82:	f104 0110 	add.w	r1, r4, #16
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
 801bc86:	4640      	mov	r0, r8
 801bc88:	f7f7 fb2f 	bl	80132ea <_lv_area_is_in>
 801bc8c:	2800      	cmp	r0, #0
 801bc8e:	d0d2      	beq.n	801bc36 <lv_img_design+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int)
 801bc90:	2100      	movs	r1, #0
 801bc92:	2220      	movs	r2, #32
 801bc94:	4620      	mov	r0, r4
 801bc96:	f7ec ff09 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 801bc9a:	b2c1      	uxtb	r1, r0
 801bc9c:	2900      	cmp	r1, #0
 801bc9e:	d1ca      	bne.n	801bc36 <lv_img_design+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int)
 801bca0:	f248 02a0 	movw	r2, #32928	; 0x80a0
 801bca4:	4620      	mov	r0, r4
 801bca6:	f7ec ff01 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 801bcaa:	f010 0fff 	tst.w	r0, #255	; 0xff
 801bcae:	d1c2      	bne.n	801bc36 <lv_img_design+0x32>
        if(ext->h == 0 || ext->w == 0) return true;
 801bcb0:	2001      	movs	r0, #1
 801bcb2:	e7c1      	b.n	801bc38 <lv_img_design+0x34>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
 801bcb4:	4620      	mov	r0, r4
 801bcb6:	360e      	adds	r6, #14
 801bcb8:	f7ec f80c 	bl	8007cd4 <lv_obj_get_width>
 801bcbc:	4681      	mov	r9, r0
 801bcbe:	b2ad      	uxth	r5, r5
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f7ec f815 	bl	8007cf0 <lv_obj_get_height>
 801bcc6:	463b      	mov	r3, r7
 801bcc8:	4602      	mov	r2, r0
 801bcca:	4649      	mov	r1, r9
 801bccc:	9601      	str	r6, [sp, #4]
 801bcce:	a817      	add	r0, sp, #92	; 0x5c
 801bcd0:	9500      	str	r5, [sp, #0]
 801bcd2:	f7f5 fc2a 	bl	801152a <_lv_img_buf_get_transformed_area>
            a.x1 += img->coords.x1;
 801bcd6:	8a22      	ldrh	r2, [r4, #16]
 801bcd8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
            a.y1 += img->coords.y1;
 801bcdc:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
            a.x1 += img->coords.x1;
 801bce0:	4413      	add	r3, r2
 801bce2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            a.y1 += img->coords.y1;
 801bce6:	8a63      	ldrh	r3, [r4, #18]
 801bce8:	4419      	add	r1, r3
 801bcea:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
            a.x2 += img->coords.x1;
 801bcee:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801bcf2:	440a      	add	r2, r1
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
 801bcf4:	a917      	add	r1, sp, #92	; 0x5c
            a.x2 += img->coords.x1;
 801bcf6:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            a.y2 += img->coords.y1;
 801bcfa:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 801bcfe:	4413      	add	r3, r2
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
 801bd00:	463a      	mov	r2, r7
            a.y2 += img->coords.y1;
 801bd02:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
 801bd06:	e7be      	b.n	801bc86 <lv_img_design+0x82>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801bd08:	2d00      	cmp	r5, #0
 801bd0a:	f040 81a3 	bne.w	801c054 <lv_img_design+0x450>
        if(ext->h == 0 || ext->w == 0) return true;
 801bd0e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d0cc      	beq.n	801bcb0 <lv_img_design+0xac>
 801bd16:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d0c8      	beq.n	801bcb0 <lv_img_design+0xac>
        lv_draw_rect_dsc_init(&bg_dsc);
 801bd1e:	a817      	add	r0, sp, #92	; 0x5c
 801bd20:	f7f3 fdc2 	bl	800f8a8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
 801bd24:	aa17      	add	r2, sp, #92	; 0x5c
 801bd26:	4629      	mov	r1, r5
 801bd28:	4620      	mov	r0, r4
 801bd2a:	f7ed fd7f 	bl	800982c <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 801bd2e:	2233      	movs	r2, #51	; 0x33
 801bd30:	4629      	mov	r1, r5
 801bd32:	4620      	mov	r0, r4
 801bd34:	f7ec feba 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
 801bd38:	b108      	cbz	r0, 801bd3e <lv_img_design+0x13a>
            bg_dsc.border_opa = LV_OPA_TRANSP;
 801bd3a:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801bd3e:	2207      	movs	r2, #7
 801bd40:	2100      	movs	r1, #0
 801bd42:	4620      	mov	r0, r4
 801bd44:	f7ec feb2 	bl	8008aac <_lv_obj_get_style_int>
        zoom_final = (zoom_final * ext->zoom) >> 8;
 801bd48:	8a75      	ldrh	r5, [r6, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801bd4a:	2206      	movs	r2, #6
 801bd4c:	2100      	movs	r1, #0
 801bd4e:	4345      	muls	r5, r0
 801bd50:	4620      	mov	r0, r4
 801bd52:	f7ec feab 	bl	8008aac <_lv_obj_get_style_int>
        angle_final += ext->angle;
 801bd56:	f8b6 900c 	ldrh.w	r9, [r6, #12]
        zoom_final = (zoom_final * ext->zoom) >> 8;
 801bd5a:	122d      	asrs	r5, r5, #8
        angle_final += ext->angle;
 801bd5c:	4481      	add	r9, r0
        lv_coord_t obj_w = lv_obj_get_width(img);
 801bd5e:	4620      	mov	r0, r4
 801bd60:	f7eb ffb8 	bl	8007cd4 <lv_obj_get_width>
 801bd64:	4607      	mov	r7, r0
        lv_coord_t obj_h = lv_obj_get_height(img);
 801bd66:	4620      	mov	r0, r4
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801bd68:	fa1f fb85 	uxth.w	fp, r5
        lv_coord_t obj_h = lv_obj_get_height(img);
 801bd6c:	f7eb ffc0 	bl	8007cf0 <lv_obj_get_height>
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801bd70:	4639      	mov	r1, r7
 801bd72:	fa0f f389 	sxth.w	r3, r9
 801bd76:	4602      	mov	r2, r0
        lv_coord_t obj_h = lv_obj_get_height(img);
 801bd78:	9005      	str	r0, [sp, #20]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801bd7a:	a806      	add	r0, sp, #24
 801bd7c:	9303      	str	r3, [sp, #12]
                                         angle_final, zoom_final, &ext->pivot);
 801bd7e:	f106 030e 	add.w	r3, r6, #14
 801bd82:	9304      	str	r3, [sp, #16]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801bd84:	e9cd b300 	strd	fp, r3, [sp]
 801bd88:	9b03      	ldr	r3, [sp, #12]
 801bd8a:	f7f5 fbce 	bl	801152a <_lv_img_buf_get_transformed_area>
        bg_coords.x1 += img->coords.x1;
 801bd8e:	8a22      	ldrh	r2, [r4, #16]
 801bd90:	f8bd 3018 	ldrh.w	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801bd94:	4620      	mov	r0, r4
        bg_coords.y1 += img->coords.y1;
 801bd96:	f8bd 101a 	ldrh.w	r1, [sp, #26]
        bg_coords.x1 += img->coords.x1;
 801bd9a:	4413      	add	r3, r2
 801bd9c:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.y1 += img->coords.y1;
 801bda0:	8a63      	ldrh	r3, [r4, #18]
 801bda2:	4419      	add	r1, r3
 801bda4:	f8ad 101a 	strh.w	r1, [sp, #26]
        bg_coords.x2 += img->coords.x1;
 801bda8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bdac:	440a      	add	r2, r1
 801bdae:	2100      	movs	r1, #0
 801bdb0:	f8ad 201c 	strh.w	r2, [sp, #28]
        bg_coords.y2 += img->coords.y1;
 801bdb4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bdb8:	4413      	add	r3, r2
 801bdba:	2212      	movs	r2, #18
 801bdbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bdc0:	f7ec fe74 	bl	8008aac <_lv_obj_get_style_int>
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
 801bdc4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801bdc8:	2213      	movs	r2, #19
 801bdca:	2100      	movs	r1, #0
 801bdcc:	1a18      	subs	r0, r3, r0
 801bdce:	f8ad 0018 	strh.w	r0, [sp, #24]
 801bdd2:	4620      	mov	r0, r4
 801bdd4:	f7ec fe6a 	bl	8008aac <_lv_obj_get_style_int>
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
 801bdd8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801bddc:	2210      	movs	r2, #16
 801bdde:	2100      	movs	r1, #0
 801bde0:	4418      	add	r0, r3
 801bde2:	f8ad 001c 	strh.w	r0, [sp, #28]
 801bde6:	4620      	mov	r0, r4
 801bde8:	f7ec fe60 	bl	8008aac <_lv_obj_get_style_int>
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
 801bdec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801bdf0:	2211      	movs	r2, #17
 801bdf2:	2100      	movs	r1, #0
 801bdf4:	1a18      	subs	r0, r3, r0
 801bdf6:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bdfa:	4620      	mov	r0, r4
 801bdfc:	f7ec fe56 	bl	8008aac <_lv_obj_get_style_int>
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
 801be00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
 801be04:	aa17      	add	r2, sp, #92	; 0x5c
 801be06:	4641      	mov	r1, r8
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
 801be08:	4418      	add	r0, r3
 801be0a:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
 801be0e:	a806      	add	r0, sp, #24
 801be10:	f7f3 fd6e 	bl	800f8f0 <lv_draw_rect>
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
 801be14:	2d00      	cmp	r5, #0
 801be16:	f000 80cb 	beq.w	801bfb0 <lv_img_design+0x3ac>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 801be1a:	2202      	movs	r2, #2
 801be1c:	2100      	movs	r1, #0
 801be1e:	4620      	mov	r0, r4
 801be20:	f7ec fe44 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
 801be24:	b198      	cbz	r0, 801be4e <lv_img_design+0x24a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 801be26:	201c      	movs	r0, #28
 801be28:	f7f8 f884 	bl	8013f34 <_lv_mem_buf_get>
 801be2c:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int)
 801be2e:	2201      	movs	r2, #1
 801be30:	2100      	movs	r1, #0
 801be32:	4620      	mov	r0, r4
 801be34:	f7ec fe3a 	bl	8008aac <_lv_obj_get_style_int>
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
 801be38:	a906      	add	r1, sp, #24
 801be3a:	4602      	mov	r2, r0
 801be3c:	2300      	movs	r3, #0
 801be3e:	4650      	mov	r0, sl
 801be40:	f7f3 f9aa 	bl	800f198 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, img + 8);
 801be44:	f504 7118 	add.w	r1, r4, #608	; 0x260
 801be48:	4650      	mov	r0, sl
 801be4a:	f7f3 f8ad 	bl	800efa8 <lv_draw_mask_add>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 801be4e:	7d33      	ldrb	r3, [r6, #20]
 801be50:	f003 0303 	and.w	r3, r3, #3
 801be54:	2b01      	cmp	r3, #1
 801be56:	f200 80d9 	bhi.w	801c00c <lv_img_design+0x408>
            lv_draw_img_dsc_init(&img_dsc);
 801be5a:	a80e      	add	r0, sp, #56	; 0x38
 801be5c:	f7f1 f8ea 	bl	800d034 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
 801be60:	aa0e      	add	r2, sp, #56	; 0x38
 801be62:	2100      	movs	r1, #0
 801be64:	4620      	mov	r0, r4
 801be66:	f7ed fffd 	bl	8009e64 <lv_obj_init_draw_img_dsc>
            img_dsc.zoom = zoom_final;
 801be6a:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
 801be6e:	f1bb 0f00 	cmp.w	fp, #0
 801be72:	f000 809d 	beq.w	801bfb0 <lv_img_design+0x3ac>
            img_dsc.pivot.x = ext->pivot.x;
 801be76:	89f3      	ldrh	r3, [r6, #14]
            img_dsc.antialias = ext->antialias;
 801be78:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
            img_dsc.pivot.x = ext->pivot.x;
 801be7c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            img_dsc.pivot.y = ext->pivot.y;
 801be80:	8a33      	ldrh	r3, [r6, #16]
            img_dsc.angle = angle_final;
 801be82:	f8ad 903a 	strh.w	r9, [sp, #58]	; 0x3a
            img_dsc.pivot.y = ext->pivot.y;
 801be86:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            img_dsc.antialias = ext->antialias;
 801be8a:	7d73      	ldrb	r3, [r6, #21]
 801be8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801be90:	f363 0200 	bfi	r2, r3, #0, #1
 801be94:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
 801be98:	f9b6 9008 	ldrsh.w	r9, [r6, #8]
 801be9c:	fb05 f909 	mul.w	r9, r5, r9
 801bea0:	ea4f 2929 	mov.w	r9, r9, asr #8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
 801bea4:	fa0f f389 	sxth.w	r3, r9
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	f340 8081 	ble.w	801bfb0 <lv_img_design+0x3ac>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
 801beae:	f9b6 a00a 	ldrsh.w	sl, [r6, #10]
 801beb2:	fb05 fa0a 	mul.w	sl, r5, sl
 801beb6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
 801beba:	fa0f f38a 	sxth.w	r3, sl
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	dd76      	ble.n	801bfb0 <lv_img_design+0x3ac>
            lv_obj_get_coords(img, &zoomed_coords);
 801bec2:	a908      	add	r1, sp, #32
 801bec4:	4620      	mov	r0, r4
 801bec6:	f7eb febb 	bl	8007c40 <lv_obj_get_coords>
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801beca:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
 801bece:	9805      	ldr	r0, [sp, #20]
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
 801bed0:	3f01      	subs	r7, #1
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801bed2:	fb05 f302 	mul.w	r3, r5, r2
 801bed6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
 801beda:	3801      	subs	r0, #1
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
 801bedc:	436f      	muls	r7, r5
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801bede:	eb02 2223 	add.w	r2, r2, r3, asr #8
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bee2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801bee6:	b292      	uxth	r2, r2
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bee8:	fb05 f103 	mul.w	r1, r5, r3
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
 801beec:	4345      	muls	r5, r0
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
 801beee:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801bef2:	fa0f fc82 	sxth.w	ip, r2
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bef6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
 801befa:	eb02 2727 	add.w	r7, r2, r7, asr #8
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
 801befe:	4560      	cmp	r0, ip
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bf00:	eb03 2321 	add.w	r3, r3, r1, asr #8
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
 801bf04:	f8ad c020 	strh.w	ip, [sp, #32]
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
 801bf08:	bfb8      	it	lt
 801bf0a:	8930      	ldrhlt	r0, [r6, #8]
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bf0c:	b29b      	uxth	r3, r3
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
 801bf0e:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
 801bf12:	bfb8      	it	lt
 801bf14:	1a12      	sublt	r2, r2, r0
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bf16:	b219      	sxth	r1, r3
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
 801bf18:	eb03 2525 	add.w	r5, r3, r5, asr #8
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
 801bf1c:	4620      	mov	r0, r4
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
 801bf1e:	bfb8      	it	lt
 801bf20:	f8ad 2020 	strhlt.w	r2, [sp, #32]
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
 801bf24:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
 801bf28:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
 801bf2c:	428a      	cmp	r2, r1
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
 801bf2e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
 801bf32:	bfbe      	ittt	lt
 801bf34:	8972      	ldrhlt	r2, [r6, #10]
 801bf36:	1a9b      	sublt	r3, r3, r2
 801bf38:	f8ad 3022 	strhlt.w	r3, [sp, #34]	; 0x22
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
 801bf3c:	f7eb feca 	bl	8007cd4 <lv_obj_get_width>
 801bf40:	4605      	mov	r5, r0
 801bf42:	4620      	mov	r0, r4
 801bf44:	f7eb fed4 	bl	8007cf0 <lv_obj_get_height>
 801bf48:	9b04      	ldr	r3, [sp, #16]
 801bf4a:	4602      	mov	r2, r0
 801bf4c:	4629      	mov	r1, r5
 801bf4e:	a80a      	add	r0, sp, #40	; 0x28
 801bf50:	e9cd b300 	strd	fp, r3, [sp]
 801bf54:	9b03      	ldr	r3, [sp, #12]
 801bf56:	f7f5 fae8 	bl	801152a <_lv_img_buf_get_transformed_area>
            clip_real.x1 += img->coords.x1;
 801bf5a:	8a23      	ldrh	r3, [r4, #16]
 801bf5c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
 801bf60:	a90a      	add	r1, sp, #40	; 0x28
            clip_real.x1 += img->coords.x1;
 801bf62:	441a      	add	r2, r3
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
 801bf64:	4608      	mov	r0, r1
            clip_real.x1 += img->coords.x1;
 801bf66:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            clip_real.x2 += img->coords.x1;
 801bf6a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801bf6e:	4413      	add	r3, r2
            clip_real.y1 += img->coords.y1;
 801bf70:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
            clip_real.x2 += img->coords.x1;
 801bf74:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            clip_real.y1 += img->coords.y1;
 801bf78:	8a63      	ldrh	r3, [r4, #18]
 801bf7a:	441a      	add	r2, r3
 801bf7c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            clip_real.y2 += img->coords.y1;
 801bf80:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801bf84:	4413      	add	r3, r2
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
 801bf86:	4642      	mov	r2, r8
            clip_real.y2 += img->coords.y1;
 801bf88:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
 801bf8c:	f7f7 f8b1 	bl	80130f2 <_lv_area_intersect>
 801bf90:	b170      	cbz	r0, 801bfb0 <lv_img_design+0x3ac>
            coords_tmp.y1 = zoomed_coords.y1;
 801bf92:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
 801bf96:	8972      	ldrh	r2, [r6, #10]
            coords_tmp.y1 = zoomed_coords.y1;
 801bf98:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
 801bf9c:	3b01      	subs	r3, #1
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
 801bf9e:	4413      	add	r3, r2
 801bfa0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bfa4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801bfa8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801bfac:	429a      	cmp	r2, r3
 801bfae:	db01      	blt.n	801bfb4 <lv_img_design+0x3b0>
    return LV_DESIGN_RES_OK;
 801bfb0:	2000      	movs	r0, #0
 801bfb2:	e641      	b.n	801bc38 <lv_img_design+0x34>
                coords_tmp.x1 = zoomed_coords.x1;
 801bfb4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
 801bfb8:	fa1f f489 	uxth.w	r4, r9
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
 801bfbc:	8932      	ldrh	r2, [r6, #8]
                coords_tmp.x1 = zoomed_coords.x1;
 801bfbe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
 801bfc2:	3b01      	subs	r3, #1
 801bfc4:	4413      	add	r3, r2
 801bfc6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
 801bfca:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801bfce:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801bfd2:	429a      	cmp	r2, r3
 801bfd4:	db09      	blt.n	801bfea <lv_img_design+0x3e6>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
 801bfd6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801bfda:	fa1f f38a 	uxth.w	r3, sl
 801bfde:	441a      	add	r2, r3
 801bfe0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801bfe4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801bfe8:	e7d9      	b.n	801bf9e <lv_img_design+0x39a>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
 801bfea:	ab0e      	add	r3, sp, #56	; 0x38
 801bfec:	6832      	ldr	r2, [r6, #0]
 801bfee:	a90a      	add	r1, sp, #40	; 0x28
 801bff0:	a80c      	add	r0, sp, #48	; 0x30
 801bff2:	f7f1 f859 	bl	800d0a8 <lv_draw_img>
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
 801bff6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801bffa:	4423      	add	r3, r4
 801bffc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c000:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c004:	4423      	add	r3, r4
 801c006:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c00a:	e7de      	b.n	801bfca <lv_img_design+0x3c6>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c00c:	2b02      	cmp	r3, #2
 801c00e:	f104 0510 	add.w	r5, r4, #16
 801c012:	d118      	bne.n	801c046 <lv_img_design+0x442>
            lv_draw_label_dsc_init(&label_dsc);
 801c014:	a80e      	add	r0, sp, #56	; 0x38
 801c016:	f7f1 f93f 	bl	800d298 <lv_draw_label_dsc_init>
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
 801c01a:	aa0e      	add	r2, sp, #56	; 0x38
 801c01c:	4620      	mov	r0, r4
 801c01e:	2100      	movs	r1, #0
 801c020:	f7ed fec1 	bl	8009da6 <lv_obj_init_draw_label_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color)
 801c024:	f248 02a9 	movw	r2, #32937	; 0x80a9
 801c028:	2100      	movs	r1, #0
 801c02a:	4620      	mov	r0, r4
 801c02c:	f7ec fd08 	bl	8008a40 <_lv_obj_get_style_color>
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
 801c030:	2300      	movs	r3, #0
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
 801c032:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
 801c036:	aa0e      	add	r2, sp, #56	; 0x38
 801c038:	9300      	str	r3, [sp, #0]
 801c03a:	4641      	mov	r1, r8
 801c03c:	6833      	ldr	r3, [r6, #0]
 801c03e:	4628      	mov	r0, r5
 801c040:	f7f1 f940 	bl	800d2c4 <lv_draw_label>
 801c044:	e7b4      	b.n	801bfb0 <lv_img_design+0x3ac>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
 801c046:	2300      	movs	r3, #0
 801c048:	4641      	mov	r1, r8
 801c04a:	4628      	mov	r0, r5
 801c04c:	461a      	mov	r2, r3
 801c04e:	f7f1 f82b 	bl	800d0a8 <lv_draw_img>
 801c052:	e7ad      	b.n	801bfb0 <lv_img_design+0x3ac>
    else if(mode == LV_DESIGN_DRAW_POST) {
 801c054:	2d01      	cmp	r5, #1
 801c056:	d1ab      	bne.n	801bfb0 <lv_img_design+0x3ac>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int)
 801c058:	2202      	movs	r2, #2
 801c05a:	2100      	movs	r1, #0
 801c05c:	4620      	mov	r0, r4
 801c05e:	f7ec fd25 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
 801c062:	b128      	cbz	r0, 801c070 <lv_img_design+0x46c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
 801c064:	f504 7018 	add.w	r0, r4, #608	; 0x260
 801c068:	f7f2 ffee 	bl	800f048 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 801c06c:	f7f7 fdf8 	bl	8013c60 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int)
 801c070:	2233      	movs	r2, #51	; 0x33
 801c072:	2100      	movs	r1, #0
 801c074:	4620      	mov	r0, r4
 801c076:	f7ec fd19 	bl	8008aac <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
 801c07a:	2800      	cmp	r0, #0
 801c07c:	d098      	beq.n	801bfb0 <lv_img_design+0x3ac>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 801c07e:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 801c080:	a817      	add	r0, sp, #92	; 0x5c
 801c082:	f7f3 fc11 	bl	800f8a8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
 801c086:	aa17      	add	r2, sp, #92	; 0x5c
 801c088:	4629      	mov	r1, r5
 801c08a:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 801c08c:	f88d 5068 	strb.w	r5, [sp, #104]	; 0x68
                                             angle_final, zoom_final, &ext->pivot);
 801c090:	360e      	adds	r6, #14
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 801c092:	f88d 5092 	strb.w	r5, [sp, #146]	; 0x92
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 801c096:	f88d 5086 	strb.w	r5, [sp, #134]	; 0x86
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
 801c09a:	f7ed fbc7 	bl	800982c <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801c09e:	4629      	mov	r1, r5
 801c0a0:	2207      	movs	r2, #7
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	f7ec fd02 	bl	8008aac <_lv_obj_get_style_int>
            zoom_final = (zoom_final * ext->zoom) >> 8;
 801c0a8:	88b7      	ldrh	r7, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801c0aa:	4629      	mov	r1, r5
 801c0ac:	2206      	movs	r2, #6
 801c0ae:	4347      	muls	r7, r0
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7ec fcfb 	bl	8008aac <_lv_obj_get_style_int>
 801c0b6:	8ae2      	ldrh	r2, [r4, #22]
 801c0b8:	8a61      	ldrh	r1, [r4, #18]
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
 801c0ba:	f3c7 270f 	ubfx	r7, r7, #8, #16
 801c0be:	3201      	adds	r2, #1
            angle_final += ext->angle;
 801c0c0:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 801c0c4:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c0c6:	8aa1      	ldrh	r1, [r4, #20]
 801c0c8:	4403      	add	r3, r0
 801c0ca:	8a20      	ldrh	r0, [r4, #16]
 801c0cc:	3101      	adds	r1, #1
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
 801c0ce:	9601      	str	r6, [sp, #4]
 801c0d0:	9700      	str	r7, [sp, #0]
 801c0d2:	b21b      	sxth	r3, r3
 801c0d4:	1a09      	subs	r1, r1, r0
 801c0d6:	b212      	sxth	r2, r2
 801c0d8:	a80e      	add	r0, sp, #56	; 0x38
 801c0da:	b209      	sxth	r1, r1
 801c0dc:	f7f5 fa25 	bl	801152a <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += img->coords.x1;
 801c0e0:	8a22      	ldrh	r2, [r4, #16]
 801c0e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c0e6:	4620      	mov	r0, r4
            bg_coords.y1 += img->coords.y1;
 801c0e8:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
            bg_coords.x1 += img->coords.x1;
 801c0ec:	4413      	add	r3, r2
 801c0ee:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            bg_coords.y1 += img->coords.y1;
 801c0f2:	8a63      	ldrh	r3, [r4, #18]
 801c0f4:	4419      	add	r1, r3
 801c0f6:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
            bg_coords.x2 += img->coords.x1;
 801c0fa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c0fe:	440a      	add	r2, r1
 801c100:	4629      	mov	r1, r5
 801c102:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
            bg_coords.y2 += img->coords.y1;
 801c106:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801c10a:	4413      	add	r3, r2
 801c10c:	2212      	movs	r2, #18
 801c10e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c112:	f7ec fccb 	bl	8008aac <_lv_obj_get_style_int>
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
 801c116:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c11a:	4629      	mov	r1, r5
 801c11c:	2213      	movs	r2, #19
 801c11e:	1a18      	subs	r0, r3, r0
 801c120:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801c124:	4620      	mov	r0, r4
 801c126:	f7ec fcc1 	bl	8008aac <_lv_obj_get_style_int>
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
 801c12a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c12e:	4629      	mov	r1, r5
 801c130:	2210      	movs	r2, #16
 801c132:	4418      	add	r0, r3
 801c134:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 801c138:	4620      	mov	r0, r4
 801c13a:	f7ec fcb7 	bl	8008aac <_lv_obj_get_style_int>
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
 801c13e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801c142:	4629      	mov	r1, r5
 801c144:	2211      	movs	r2, #17
 801c146:	1a18      	subs	r0, r3, r0
 801c148:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 801c14c:	4620      	mov	r0, r4
 801c14e:	f7ec fcad 	bl	8008aac <_lv_obj_get_style_int>
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
 801c152:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
 801c156:	aa17      	add	r2, sp, #92	; 0x5c
 801c158:	4641      	mov	r1, r8
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
 801c15a:	4418      	add	r0, r3
 801c15c:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
 801c160:	f104 0010 	add.w	r0, r4, #16
 801c164:	f7f3 fbc4 	bl	800f8f0 <lv_draw_rect>
 801c168:	e722      	b.n	801bfb0 <lv_img_design+0x3ac>
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 801c16a:	2003      	movs	r0, #3
 801c16c:	e564      	b.n	801bc38 <lv_img_design+0x34>
	...

0801c170 <lv_img_get_auto_size>:
{
 801c170:	b510      	push	{r4, lr}
 801c172:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
 801c174:	f7f7 fa40 	bl	80135f8 <lv_debug_check_null>
 801c178:	4603      	mov	r3, r0
 801c17a:	b920      	cbnz	r0, 801c186 <lv_img_get_auto_size+0x16>
 801c17c:	4622      	mov	r2, r4
 801c17e:	4805      	ldr	r0, [pc, #20]	; (801c194 <lv_img_get_auto_size+0x24>)
 801c180:	f7f7 fa3e 	bl	8013600 <lv_debug_log_error>
 801c184:	e7fe      	b.n	801c184 <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801c186:	4620      	mov	r0, r4
 801c188:	f7ed fa38 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 801c18c:	7d00      	ldrb	r0, [r0, #20]
}
 801c18e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801c192:	bd10      	pop	{r4, pc}
 801c194:	0802c354 	.word	0x0802c354

0801c198 <lv_img_set_src>:
{
 801c198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c19c:	b087      	sub	sp, #28
 801c19e:	4605      	mov	r5, r0
 801c1a0:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
 801c1a2:	f7f7 fa29 	bl	80135f8 <lv_debug_check_null>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	b920      	cbnz	r0, 801c1b4 <lv_img_set_src+0x1c>
 801c1aa:	462a      	mov	r2, r5
 801c1ac:	485f      	ldr	r0, [pc, #380]	; (801c32c <lv_img_set_src+0x194>)
 801c1ae:	f7f7 fa27 	bl	8013600 <lv_debug_log_error>
 801c1b2:	e7fe      	b.n	801c1b2 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 801c1b4:	4630      	mov	r0, r6
 801c1b6:	f7f1 f84b 	bl	800d250 <lv_img_src_get_type>
 801c1ba:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 801c1bc:	4628      	mov	r0, r5
 801c1be:	f7ed fa1d 	bl	80095fc <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801c1c2:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 801c1c4:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801c1c6:	d111      	bne.n	801c1ec <lv_img_set_src+0x54>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 801c1c8:	7d03      	ldrb	r3, [r0, #20]
 801c1ca:	f003 0303 	and.w	r3, r3, #3
 801c1ce:	3b01      	subs	r3, #1
 801c1d0:	2b01      	cmp	r3, #1
 801c1d2:	d802      	bhi.n	801c1da <lv_img_set_src+0x42>
            lv_mem_free(ext->src);
 801c1d4:	6800      	ldr	r0, [r0, #0]
 801c1d6:	f7f7 fd05 	bl	8013be4 <lv_mem_free>
        ext->src      = NULL;
 801c1da:	2300      	movs	r3, #0
 801c1dc:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 801c1de:	7d23      	ldrb	r3, [r4, #20]
 801c1e0:	f043 0303 	orr.w	r3, r3, #3
 801c1e4:	7523      	strb	r3, [r4, #20]
}
 801c1e6:	b007      	add	sp, #28
 801c1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_img_decoder_get_info(src_img, &header);
 801c1ec:	a904      	add	r1, sp, #16
 801c1ee:	4630      	mov	r0, r6
 801c1f0:	f7f5 fff0 	bl	80121d4 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801c1f4:	2f00      	cmp	r7, #0
 801c1f6:	d138      	bne.n	801c26a <lv_img_set_src+0xd2>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c1f8:	7d23      	ldrb	r3, [r4, #20]
 801c1fa:	f003 0303 	and.w	r3, r3, #3
 801c1fe:	3b01      	subs	r3, #1
 801c200:	2b01      	cmp	r3, #1
 801c202:	d802      	bhi.n	801c20a <lv_img_set_src+0x72>
            lv_mem_free(ext->src);
 801c204:	6820      	ldr	r0, [r4, #0]
 801c206:	f7f7 fced 	bl	8013be4 <lv_mem_free>
        ext->src = src_img;
 801c20a:	6026      	str	r6, [r4, #0]
    ext->src_type = src_type;
 801c20c:	7d21      	ldrb	r1, [r4, #20]
    ext->w        = header.w;
 801c20e:	9a04      	ldr	r2, [sp, #16]
    ext->h        = header.h;
 801c210:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ext->src_type = src_type;
 801c214:	f367 0101 	bfi	r1, r7, #0, #2
    ext->cf       = header.cf;
 801c218:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ext->w        = header.w;
 801c21c:	f3c2 228a 	ubfx	r2, r2, #10, #11
    ext->h        = header.h;
 801c220:	f3c3 134a 	ubfx	r3, r3, #5, #11
    ext->cf       = header.cf;
 801c224:	f3c0 0004 	ubfx	r0, r0, #0, #5
    ext->w        = header.w;
 801c228:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 801c22a:	8163      	strh	r3, [r4, #10]
    ext->pivot.x = header.w / 2;
 801c22c:	0852      	lsrs	r2, r2, #1
    ext->cf       = header.cf;
 801c22e:	f360 01c7 	bfi	r1, r0, #3, #5
    ext->pivot.y = header.h / 2;
 801c232:	085b      	lsrs	r3, r3, #1
    ext->pivot.x = header.w / 2;
 801c234:	81e2      	strh	r2, [r4, #14]
    if(lv_img_get_auto_size(img) != false) {
 801c236:	4628      	mov	r0, r5
    ext->cf       = header.cf;
 801c238:	7521      	strb	r1, [r4, #20]
    ext->pivot.y = header.h / 2;
 801c23a:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
 801c23c:	f7ff ff98 	bl	801c170 <lv_img_get_auto_size>
 801c240:	b130      	cbz	r0, 801c250 <lv_img_set_src+0xb8>
        lv_obj_set_size(img, ext->w, ext->h);
 801c242:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801c246:	4628      	mov	r0, r5
 801c248:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801c24c:	f7ec fb38 	bl	80088c0 <lv_obj_set_size>
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
 801c250:	89a3      	ldrh	r3, [r4, #12]
 801c252:	b91b      	cbnz	r3, 801c25c <lv_img_set_src+0xc4>
 801c254:	8a63      	ldrh	r3, [r4, #18]
 801c256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c25a:	d002      	beq.n	801c262 <lv_img_set_src+0xca>
 801c25c:	4628      	mov	r0, r5
 801c25e:	f7eb fc85 	bl	8007b6c <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(img);
 801c262:	4628      	mov	r0, r5
 801c264:	f7eb fea2 	bl	8007fac <lv_obj_invalidate>
 801c268:	e7bd      	b.n	801c1e6 <lv_img_set_src+0x4e>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 801c26a:	1e7b      	subs	r3, r7, #1
 801c26c:	b2db      	uxtb	r3, r3
 801c26e:	2b01      	cmp	r3, #1
 801c270:	d82a      	bhi.n	801c2c8 <lv_img_set_src+0x130>
        if(ext->src != src_img) {
 801c272:	f8d4 8000 	ldr.w	r8, [r4]
 801c276:	45b0      	cmp	r8, r6
 801c278:	d026      	beq.n	801c2c8 <lv_img_set_src+0x130>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c27a:	7d23      	ldrb	r3, [r4, #20]
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 801c27c:	4630      	mov	r0, r6
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c27e:	f003 0303 	and.w	r3, r3, #3
 801c282:	3b01      	subs	r3, #1
            const void * old_src = NULL;
 801c284:	2b01      	cmp	r3, #1
 801c286:	bf88      	it	hi
 801c288:	f04f 0800 	movhi.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 801c28c:	f7e3 ffca 	bl	8000224 <strlen>
 801c290:	3001      	adds	r0, #1
 801c292:	f7f7 fc59 	bl	8013b48 <lv_mem_alloc>
 801c296:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
 801c298:	f7f7 f9ae 	bl	80135f8 <lv_debug_check_null>
 801c29c:	4603      	mov	r3, r0
 801c29e:	b920      	cbnz	r0, 801c2aa <lv_img_set_src+0x112>
 801c2a0:	464a      	mov	r2, r9
 801c2a2:	4823      	ldr	r0, [pc, #140]	; (801c330 <lv_img_set_src+0x198>)
 801c2a4:	f7f7 f9ac 	bl	8013600 <lv_debug_log_error>
 801c2a8:	e7fe      	b.n	801c2a8 <lv_img_set_src+0x110>
            if(new_str == NULL) return;
 801c2aa:	f1b9 0f00 	cmp.w	r9, #0
 801c2ae:	d09a      	beq.n	801c1e6 <lv_img_set_src+0x4e>
            strcpy(new_str, src_img);
 801c2b0:	4631      	mov	r1, r6
 801c2b2:	4648      	mov	r0, r9
 801c2b4:	f002 fc38 	bl	801eb28 <strcpy>
            ext->src = new_str;
 801c2b8:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
 801c2bc:	f1b8 0f00 	cmp.w	r8, #0
 801c2c0:	d002      	beq.n	801c2c8 <lv_img_set_src+0x130>
 801c2c2:	4640      	mov	r0, r8
 801c2c4:	f7f7 fc8e 	bl	8013be4 <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801c2c8:	2f02      	cmp	r7, #2
 801c2ca:	d19f      	bne.n	801c20c <lv_img_set_src+0x74>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801c2cc:	f248 028e 	movw	r2, #32910	; 0x808e
 801c2d0:	2100      	movs	r1, #0
 801c2d2:	4628      	mov	r0, r5
 801c2d4:	f7ec fef2 	bl	80090bc <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801c2d8:	f248 0280 	movw	r2, #32896	; 0x8080
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801c2dc:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801c2de:	2100      	movs	r1, #0
 801c2e0:	4628      	mov	r0, r5
 801c2e2:	f7ec fbe3 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801c2e6:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801c2ea:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801c2ec:	2100      	movs	r1, #0
 801c2ee:	4628      	mov	r0, r5
 801c2f0:	f7ec fbdc 	bl	8008aac <_lv_obj_get_style_int>
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
 801c2f4:	f647 4318 	movw	r3, #31768	; 0x7c18
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	9000      	str	r0, [sp, #0]
 801c2fc:	4631      	mov	r1, r6
 801c2fe:	a805      	add	r0, sp, #20
 801c300:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c304:	464b      	mov	r3, r9
 801c306:	4642      	mov	r2, r8
 801c308:	f7f8 fe8e 	bl	8015028 <_lv_txt_get_size>
        header.w = size.x;
 801c30c:	9b04      	ldr	r3, [sp, #16]
 801c30e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c312:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 801c316:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 801c31a:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 801c31c:	f3c3 430f 	ubfx	r3, r3, #16, #16
 801c320:	f362 134f 	bfi	r3, r2, #5, #11
 801c324:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c328:	e770      	b.n	801c20c <lv_img_set_src+0x74>
 801c32a:	bf00      	nop
 801c32c:	0802c354 	.word	0x0802c354
 801c330:	0802c346 	.word	0x0802c346

0801c334 <lv_img_create>:
{
 801c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	4688      	mov	r8, r1
 801c33a:	4607      	mov	r7, r0
    lv_obj_t * img = lv_obj_create(par, copy);
 801c33c:	f7ec f8fc 	bl	8008538 <lv_obj_create>
 801c340:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
 801c342:	f7f7 f959 	bl	80135f8 <lv_debug_check_null>
 801c346:	4603      	mov	r3, r0
 801c348:	b920      	cbnz	r0, 801c354 <lv_img_create+0x20>
 801c34a:	462a      	mov	r2, r5
 801c34c:	4843      	ldr	r0, [pc, #268]	; (801c45c <lv_img_create+0x128>)
 801c34e:	f7f7 f957 	bl	8013600 <lv_debug_log_error>
 801c352:	e7fe      	b.n	801c352 <lv_img_create+0x1e>
    if(img == NULL) return NULL;
 801c354:	b1d5      	cbz	r5, 801c38c <lv_img_create+0x58>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
 801c356:	4c42      	ldr	r4, [pc, #264]	; (801c460 <lv_img_create+0x12c>)
 801c358:	6823      	ldr	r3, [r4, #0]
 801c35a:	b91b      	cbnz	r3, 801c364 <lv_img_create+0x30>
 801c35c:	4628      	mov	r0, r5
 801c35e:	f7ed f92d 	bl	80095bc <lv_obj_get_signal_cb>
 801c362:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
 801c364:	2118      	movs	r1, #24
 801c366:	4628      	mov	r0, r5
 801c368:	f7eb fbea 	bl	8007b40 <lv_obj_allocate_ext_attr>
 801c36c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
 801c36e:	f7f7 f943 	bl	80135f8 <lv_debug_check_null>
 801c372:	4603      	mov	r3, r0
 801c374:	b920      	cbnz	r0, 801c380 <lv_img_create+0x4c>
 801c376:	4622      	mov	r2, r4
 801c378:	4838      	ldr	r0, [pc, #224]	; (801c45c <lv_img_create+0x128>)
 801c37a:	f7f7 f941 	bl	8013600 <lv_debug_log_error>
 801c37e:	e7fe      	b.n	801c37e <lv_img_create+0x4a>
 801c380:	2600      	movs	r6, #0
    if(ext == NULL) {
 801c382:	b934      	cbnz	r4, 801c392 <lv_img_create+0x5e>
        lv_obj_del(img);
 801c384:	4628      	mov	r0, r5
        return NULL;
 801c386:	4625      	mov	r5, r4
        lv_obj_del(img);
 801c388:	f7ed f9bc 	bl	8009704 <lv_obj_del>
}
 801c38c:	4628      	mov	r0, r5
 801c38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 801c392:	7d23      	ldrb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
 801c394:	4628      	mov	r0, r5
    ext->src       = NULL;
 801c396:	6026      	str	r6, [r4, #0]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 801c398:	f043 0303 	orr.w	r3, r3, #3
 801c39c:	f366 03c7 	bfi	r3, r6, #3, #5
 801c3a0:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
 801c3a2:	f7eb fc97 	bl	8007cd4 <lv_obj_get_width>
 801c3a6:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
 801c3a8:	4628      	mov	r0, r5
 801c3aa:	f7eb fca1 	bl	8007cf0 <lv_obj_get_height>
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
 801c3ae:	7d63      	ldrb	r3, [r4, #21]
    ext->h         = lv_obj_get_height(img);
 801c3b0:	8160      	strh	r0, [r4, #10]
    lv_obj_set_signal_cb(img, lv_img_signal);
 801c3b2:	4628      	mov	r0, r5
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
 801c3b4:	f043 0301 	orr.w	r3, r3, #1
    lv_obj_set_signal_cb(img, lv_img_signal);
 801c3b8:	492a      	ldr	r1, [pc, #168]	; (801c464 <lv_img_create+0x130>)
    ext->offset.x  = 0;
 801c3ba:	6066      	str	r6, [r4, #4]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
 801c3bc:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
 801c3be:	7d23      	ldrb	r3, [r4, #20]
    ext->angle = 0;
 801c3c0:	60e6      	str	r6, [r4, #12]
    ext->auto_size = 1;
 801c3c2:	f043 0304 	orr.w	r3, r3, #4
 801c3c6:	7523      	strb	r3, [r4, #20]
    ext->pivot.x = 0;
 801c3c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c3cc:	6123      	str	r3, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
 801c3ce:	f7eb fb91 	bl	8007af4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(img, lv_img_design);
 801c3d2:	4925      	ldr	r1, [pc, #148]	; (801c468 <lv_img_create+0x134>)
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	f7eb fba3 	bl	8007b20 <lv_obj_set_design_cb>
    if(copy == NULL) {
 801c3da:	f1b8 0f00 	cmp.w	r8, #0
 801c3de:	d114      	bne.n	801c40a <lv_img_create+0xd6>
        lv_theme_apply(img, LV_THEME_IMAGE);
 801c3e0:	210f      	movs	r1, #15
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	f7f8 fee6 	bl	80151b4 <lv_theme_apply>
        lv_obj_set_click(img, false);
 801c3e8:	4641      	mov	r1, r8
 801c3ea:	4628      	mov	r0, r5
 801c3ec:	f7eb faca 	bl	8007984 <lv_obj_set_click>
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
 801c3f0:	2101      	movs	r1, #1
 801c3f2:	4628      	mov	r0, r5
 801c3f4:	f7eb fab0 	bl	8007958 <lv_obj_set_adv_hittest>
 801c3f8:	7d23      	ldrb	r3, [r4, #20]
        if(par != NULL) {
 801c3fa:	b11f      	cbz	r7, 801c404 <lv_img_create+0xd0>
            ext->auto_size = 1;
 801c3fc:	f043 0304 	orr.w	r3, r3, #4
            ext->auto_size = 0;
 801c400:	7523      	strb	r3, [r4, #20]
 801c402:	e7c3      	b.n	801c38c <lv_img_create+0x58>
 801c404:	f367 0382 	bfi	r3, r7, #2, #1
 801c408:	e7fa      	b.n	801c400 <lv_img_create+0xcc>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801c40a:	4640      	mov	r0, r8
 801c40c:	f7ed f8f6 	bl	80095fc <lv_obj_get_ext_attr>
        ext->auto_size     = copy_ext->auto_size;
 801c410:	7d03      	ldrb	r3, [r0, #20]
 801c412:	7d22      	ldrb	r2, [r4, #20]
 801c414:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c418:	f363 0282 	bfi	r2, r3, #2, #1
 801c41c:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
 801c41e:	8a43      	ldrh	r3, [r0, #18]
        ext->antialias     = copy_ext->antialias;
 801c420:	7d42      	ldrb	r2, [r0, #21]
        ext->zoom          = copy_ext->zoom;
 801c422:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
 801c424:	8983      	ldrh	r3, [r0, #12]
 801c426:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
 801c428:	7d63      	ldrb	r3, [r4, #21]
 801c42a:	f362 0300 	bfi	r3, r2, #0, #1
 801c42e:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
 801c430:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        lv_img_set_src(img, copy_ext->src);
 801c434:	6801      	ldr	r1, [r0, #0]
        ext->offset.x     = copy_ext->offset.x;
 801c436:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
 801c438:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c43c:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
 801c43e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801c442:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
 801c444:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
        lv_img_set_src(img, copy_ext->src);
 801c448:	4628      	mov	r0, r5
        ext->pivot.y     = copy_ext->pivot.y;
 801c44a:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
 801c44c:	f7ff fea4 	bl	801c198 <lv_img_set_src>
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801c450:	22ff      	movs	r2, #255	; 0xff
 801c452:	4628      	mov	r0, r5
 801c454:	4611      	mov	r1, r2
 801c456:	f7ec ff5b 	bl	8009310 <lv_obj_refresh_style>
 801c45a:	e797      	b.n	801c38c <lv_img_create+0x58>
 801c45c:	0802c346 	.word	0x0802c346
 801c460:	20028928 	.word	0x20028928
 801c464:	0801c46d 	.word	0x0801c46d
 801c468:	0801bc05 	.word	0x0801bc05

0801c46c <lv_img_signal>:
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;
    if(sign == LV_SIGNAL_GET_STYLE) {
 801c46c:	2908      	cmp	r1, #8
{
 801c46e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c472:	4604      	mov	r4, r0
 801c474:	b087      	sub	sp, #28
 801c476:	4688      	mov	r8, r1
 801c478:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801c47a:	d115      	bne.n	801c4a8 <lv_img_signal+0x3c>
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
 801c47c:	7813      	ldrb	r3, [r2, #0]
 801c47e:	b14b      	cbz	r3, 801c494 <lv_img_signal+0x28>
        info->result = lv_img_get_style(img, info->part);
 801c480:	2300      	movs	r3, #0
 801c482:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(img, sign, param);
 801c484:	4b9d      	ldr	r3, [pc, #628]	; (801c6fc <lv_img_signal+0x290>)
 801c486:	463a      	mov	r2, r7
 801c488:	2108      	movs	r1, #8
 801c48a:	4620      	mov	r0, r4
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801c490:	4606      	mov	r6, r0
 801c492:	e005      	b.n	801c4a0 <lv_img_signal+0x34>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
 801c494:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_img_get_style(img, info->part);
 801c498:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d0f2      	beq.n	801c484 <lv_img_signal+0x18>
 801c49e:	2601      	movs	r6, #1
}
 801c4a0:	4630      	mov	r0, r6
 801c4a2:	b007      	add	sp, #28
 801c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res = ancestor_signal(img, sign, param);
 801c4a8:	4b94      	ldr	r3, [pc, #592]	; (801c6fc <lv_img_signal+0x290>)
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801c4ae:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 801c4b0:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801c4b2:	d1f5      	bne.n	801c4a0 <lv_img_signal+0x34>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801c4b4:	f1b8 0f07 	cmp.w	r8, #7
 801c4b8:	d104      	bne.n	801c4c4 <lv_img_signal+0x58>
 801c4ba:	4991      	ldr	r1, [pc, #580]	; (801c700 <lv_img_signal+0x294>)
 801c4bc:	4638      	mov	r0, r7
 801c4be:	f7ed f9a7 	bl	8009810 <lv_obj_handle_get_type_signal>
 801c4c2:	e7e5      	b.n	801c490 <lv_img_signal+0x24>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 801c4c4:	4620      	mov	r0, r4
 801c4c6:	f7ed f899 	bl	80095fc <lv_obj_get_ext_attr>
 801c4ca:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801c4cc:	f1b8 0f00 	cmp.w	r8, #0
 801c4d0:	d10f      	bne.n	801c4f2 <lv_img_signal+0x86>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c4d2:	7d03      	ldrb	r3, [r0, #20]
 801c4d4:	f003 0303 	and.w	r3, r3, #3
 801c4d8:	3b01      	subs	r3, #1
 801c4da:	2b01      	cmp	r3, #1
 801c4dc:	d8df      	bhi.n	801c49e <lv_img_signal+0x32>
            lv_mem_free(ext->src);
 801c4de:	6800      	ldr	r0, [r0, #0]
 801c4e0:	f7f7 fb80 	bl	8013be4 <lv_mem_free>
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801c4e4:	7d2b      	ldrb	r3, [r5, #20]
            ext->src      = NULL;
 801c4e6:	f8c5 8000 	str.w	r8, [r5]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 801c4ea:	f043 0303 	orr.w	r3, r3, #3
 801c4ee:	752b      	strb	r3, [r5, #20]
 801c4f0:	e7d6      	b.n	801c4a0 <lv_img_signal+0x34>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 801c4f2:	f1b8 0f04 	cmp.w	r8, #4
 801c4f6:	d109      	bne.n	801c50c <lv_img_signal+0xa0>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 801c4f8:	7d03      	ldrb	r3, [r0, #20]
 801c4fa:	f003 0303 	and.w	r3, r3, #3
 801c4fe:	2b02      	cmp	r3, #2
 801c500:	d1cd      	bne.n	801c49e <lv_img_signal+0x32>
            lv_img_set_src(img, ext->src);
 801c502:	6801      	ldr	r1, [r0, #0]
 801c504:	4620      	mov	r0, r4
 801c506:	f7ff fe47 	bl	801c198 <lv_img_set_src>
 801c50a:	e7c9      	b.n	801c4a0 <lv_img_signal+0x34>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801c50c:	f1b8 0f06 	cmp.w	r8, #6
 801c510:	d179      	bne.n	801c606 <lv_img_signal+0x19a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801c512:	2207      	movs	r2, #7
 801c514:	2100      	movs	r1, #0
 801c516:	4620      	mov	r0, r4
 801c518:	f7ec fac8 	bl	8008aac <_lv_obj_get_style_int>
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
 801c51c:	f8b5 9012 	ldrh.w	r9, [r5, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801c520:	4642      	mov	r2, r8
 801c522:	2100      	movs	r1, #0
 801c524:	fb00 f909 	mul.w	r9, r0, r9
 801c528:	4620      	mov	r0, r4
 801c52a:	f7ec fabf 	bl	8008aac <_lv_obj_get_style_int>
        transf_angle += ext->angle;
 801c52e:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
 801c532:	ea4f 2929 	mov.w	r9, r9, asr #8
        transf_angle += ext->angle;
 801c536:	4482      	add	sl, r0
 801c538:	fa0f fa8a 	sxth.w	sl, sl
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
 801c53c:	f1ba 0f00 	cmp.w	sl, #0
 801c540:	d104      	bne.n	801c54c <lv_img_signal+0xe0>
 801c542:	fa0f f389 	sxth.w	r3, r9
 801c546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c54a:	d033      	beq.n	801c5b4 <lv_img_signal+0x148>
            lv_coord_t w = lv_obj_get_width(img);
 801c54c:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
 801c54e:	350e      	adds	r5, #14
            lv_coord_t w = lv_obj_get_width(img);
 801c550:	f7eb fbc0 	bl	8007cd4 <lv_obj_get_width>
 801c554:	4680      	mov	r8, r0
            lv_coord_t h = lv_obj_get_height(img);
 801c556:	4620      	mov	r0, r4
 801c558:	f7eb fbca 	bl	8007cf0 <lv_obj_get_height>
 801c55c:	4607      	mov	r7, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
 801c55e:	fa1f f089 	uxth.w	r0, r9
 801c562:	4653      	mov	r3, sl
 801c564:	463a      	mov	r2, r7
 801c566:	4641      	mov	r1, r8
 801c568:	9000      	str	r0, [sp, #0]
 801c56a:	a804      	add	r0, sp, #16
 801c56c:	9501      	str	r5, [sp, #4]
 801c56e:	f7f4 ffdc 	bl	801152a <_lv_img_buf_get_transformed_area>
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
 801c572:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 801c576:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
 801c57a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
 801c57e:	1a10      	subs	r0, r2, r0
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
 801c580:	1ad3      	subs	r3, r2, r3
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
 801c582:	4290      	cmp	r0, r2
 801c584:	bfb8      	it	lt
 801c586:	4610      	movlt	r0, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
 801c588:	b200      	sxth	r0, r0
 801c58a:	4298      	cmp	r0, r3
 801c58c:	bfb8      	it	lt
 801c58e:	4618      	movlt	r0, r3
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
 801c590:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c594:	4413      	add	r3, r2
 801c596:	b200      	sxth	r0, r0
 801c598:	eba3 0808 	sub.w	r8, r3, r8
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
 801c59c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
 801c5a0:	4540      	cmp	r0, r8
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
 801c5a2:	4413      	add	r3, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
 801c5a4:	bfb8      	it	lt
 801c5a6:	4640      	movlt	r0, r8
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
 801c5a8:	1bdf      	subs	r7, r3, r7
 801c5aa:	b200      	sxth	r0, r0
 801c5ac:	42b8      	cmp	r0, r7
 801c5ae:	bfb8      	it	lt
 801c5b0:	4638      	movlt	r0, r7
 801c5b2:	8660      	strh	r0, [r4, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c5b4:	2212      	movs	r2, #18
 801c5b6:	2100      	movs	r1, #0
 801c5b8:	4620      	mov	r0, r4
 801c5ba:	f7ec fa77 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c5be:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c5c0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c5c2:	2100      	movs	r1, #0
 801c5c4:	4620      	mov	r0, r4
 801c5c6:	f7ec fa71 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c5ca:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c5cc:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c5ce:	2100      	movs	r1, #0
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	f7ec fa6b 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801c5d6:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c5d8:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801c5da:	2100      	movs	r1, #0
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7ec fa65 	bl	8008aac <_lv_obj_get_style_int>
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
 801c5e2:	4545      	cmp	r5, r8
 801c5e4:	bfb8      	it	lt
 801c5e6:	4645      	movlt	r5, r8
 801c5e8:	b22b      	sxth	r3, r5
 801c5ea:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
 801c5ee:	42ab      	cmp	r3, r5
 801c5f0:	bfb8      	it	lt
 801c5f2:	462b      	movlt	r3, r5
 801c5f4:	42bb      	cmp	r3, r7
 801c5f6:	bfb8      	it	lt
 801c5f8:	463b      	movlt	r3, r7
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
 801c5fa:	b21b      	sxth	r3, r3
 801c5fc:	4298      	cmp	r0, r3
 801c5fe:	bfb8      	it	lt
 801c600:	4618      	movlt	r0, r3
 801c602:	8660      	strh	r0, [r4, #50]	; 0x32
 801c604:	e74c      	b.n	801c4a0 <lv_img_signal+0x34>
    else if(sign == LV_SIGNAL_HIT_TEST) {
 801c606:	f1b8 0f0a 	cmp.w	r8, #10
 801c60a:	f47f af48 	bne.w	801c49e <lv_img_signal+0x32>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801c60e:	2207      	movs	r2, #7
 801c610:	2100      	movs	r1, #0
 801c612:	4620      	mov	r0, r4
 801c614:	f7ec fa4a 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801c618:	2206      	movs	r2, #6
 801c61a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int)
 801c61c:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int)
 801c61e:	4620      	mov	r0, r4
        zoom = (zoom * ext->zoom) >> 8;
 801c620:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 801c624:	f7ec fa42 	bl	8008aac <_lv_obj_get_style_int>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
 801c628:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801c62c:	4682      	mov	sl, r0
 801c62e:	4620      	mov	r0, r4
 801c630:	9303      	str	r3, [sp, #12]
        angle += ext->angle;
 801c632:	f8b5 900c 	ldrh.w	r9, [r5, #12]
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
 801c636:	f7eb fb4d 	bl	8007cd4 <lv_obj_get_width>
 801c63a:	9b03      	ldr	r3, [sp, #12]
 801c63c:	4283      	cmp	r3, r0
 801c63e:	d157      	bne.n	801c6f0 <lv_img_signal+0x284>
 801c640:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801c644:	4620      	mov	r0, r4
 801c646:	9303      	str	r3, [sp, #12]
 801c648:	f7eb fb52 	bl	8007cf0 <lv_obj_get_height>
 801c64c:	9b03      	ldr	r3, [sp, #12]
 801c64e:	4283      	cmp	r3, r0
 801c650:	d14e      	bne.n	801c6f0 <lv_img_signal+0x284>
        zoom = (zoom * ext->zoom) >> 8;
 801c652:	fb08 f80b 	mul.w	r8, r8, fp
        angle += ext->angle;
 801c656:	44d1      	add	r9, sl
        zoom = (zoom * ext->zoom) >> 8;
 801c658:	ea4f 2828 	mov.w	r8, r8, asr #8
        angle += ext->angle;
 801c65c:	fa0f f989 	sxth.w	r9, r9
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
 801c660:	fa0f f388 	sxth.w	r3, r8
 801c664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c668:	d113      	bne.n	801c692 <lv_img_signal+0x226>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
 801c66a:	f1b9 0f00 	cmp.w	r9, #0
 801c66e:	d110      	bne.n	801c692 <lv_img_signal+0x226>
 801c670:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c674:	2102      	movs	r1, #2
 801c676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c67a:	fb92 f2f1 	sdiv	r2, r2, r1
 801c67e:	4293      	cmp	r3, r2
 801c680:	d107      	bne.n	801c692 <lv_img_signal+0x226>
 801c682:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801c686:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 801c68a:	fb93 f3f1 	sdiv	r3, r3, r1
 801c68e:	429a      	cmp	r2, r3
 801c690:	d02e      	beq.n	801c6f0 <lv_img_signal+0x284>
            lv_coord_t w = lv_obj_get_width(img);
 801c692:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
 801c694:	350e      	adds	r5, #14
            lv_coord_t w = lv_obj_get_width(img);
 801c696:	f7eb fb1d 	bl	8007cd4 <lv_obj_get_width>
 801c69a:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
 801c69c:	4620      	mov	r0, r4
 801c69e:	f7eb fb27 	bl	8007cf0 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
 801c6a2:	464b      	mov	r3, r9
 801c6a4:	fa1f f288 	uxth.w	r2, r8
 801c6a8:	4651      	mov	r1, sl
 801c6aa:	9501      	str	r5, [sp, #4]
 801c6ac:	9200      	str	r2, [sp, #0]
 801c6ae:	4602      	mov	r2, r0
 801c6b0:	a804      	add	r0, sp, #16
 801c6b2:	f7f4 ff3a 	bl	801152a <_lv_img_buf_get_transformed_area>
            coords.x1 += img->coords.x1;
 801c6b6:	8a22      	ldrh	r2, [r4, #16]
 801c6b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
 801c6bc:	a804      	add	r0, sp, #16
            coords.y1 += img->coords.y1;
 801c6be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
            coords.x1 += img->coords.x1;
 801c6c2:	4413      	add	r3, r2
 801c6c4:	f8ad 3010 	strh.w	r3, [sp, #16]
            coords.y1 += img->coords.y1;
 801c6c8:	8a63      	ldrh	r3, [r4, #18]
 801c6ca:	4419      	add	r1, r3
 801c6cc:	f8ad 1012 	strh.w	r1, [sp, #18]
            coords.x2 += img->coords.x1;
 801c6d0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c6d4:	440a      	add	r2, r1
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
 801c6d6:	6839      	ldr	r1, [r7, #0]
            coords.x2 += img->coords.x1;
 801c6d8:	f8ad 2014 	strh.w	r2, [sp, #20]
            coords.y2 += img->coords.y1;
 801c6dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c6e0:	4413      	add	r3, r2
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
 801c6e2:	2200      	movs	r2, #0
            coords.y2 += img->coords.y1;
 801c6e4:	f8ad 3016 	strh.w	r3, [sp, #22]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
 801c6e8:	f7f6 fd4f 	bl	801318a <_lv_area_is_point_on>
            info->result = lv_obj_is_point_on_coords(img, info->point);
 801c6ec:	7138      	strb	r0, [r7, #4]
 801c6ee:	e6d7      	b.n	801c4a0 <lv_img_signal+0x34>
 801c6f0:	6839      	ldr	r1, [r7, #0]
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	f7ed f85c 	bl	80097b0 <lv_obj_is_point_on_coords>
 801c6f8:	e7f8      	b.n	801c6ec <lv_img_signal+0x280>
 801c6fa:	bf00      	nop
 801c6fc:	20028928 	.word	0x20028928
 801c700:	0802c43c 	.word	0x0802c43c

0801c704 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 801c704:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c706:	f7ec ff79 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801c70a:	7cc3      	ldrb	r3, [r0, #19]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c70c:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 801c70e:	07db      	lsls	r3, r3, #31
 801c710:	d503      	bpl.n	801c71a <lv_label_dot_tmp_free+0x16>
 801c712:	6840      	ldr	r0, [r0, #4]
 801c714:	b108      	cbz	r0, 801c71a <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 801c716:	f7f7 fa65 	bl	8013be4 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 801c71a:	7ce3      	ldrb	r3, [r4, #19]
 801c71c:	f36f 0300 	bfc	r3, #0, #1
 801c720:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
 801c722:	2300      	movs	r3, #0
 801c724:	6063      	str	r3, [r4, #4]
}
 801c726:	bd10      	pop	{r4, pc}

0801c728 <lv_label_revert_dots>:
{
 801c728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c72c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c72e:	f7ec ff65 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801c732:	7c83      	ldrb	r3, [r0, #18]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c734:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801c736:	f003 0307 	and.w	r3, r3, #7
 801c73a:	2b02      	cmp	r3, #2
 801c73c:	d126      	bne.n	801c78c <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 801c73e:	6881      	ldr	r1, [r0, #8]
 801c740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c744:	4299      	cmp	r1, r3
 801c746:	d021      	beq.n	801c78c <lv_label_revert_dots+0x64>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
 801c748:	4b12      	ldr	r3, [pc, #72]	; (801c794 <lv_label_revert_dots+0x6c>)
 801c74a:	3903      	subs	r1, #3
 801c74c:	6800      	ldr	r0, [r0, #0]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	4798      	blx	r3
 801c752:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c754:	4628      	mov	r0, r5
 801c756:	f7ec ff51 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 801c75a:	7cc3      	ldrb	r3, [r0, #19]
    while(ext->text[byte_i + i] != '\0') {
 801c75c:	2100      	movs	r1, #0
    if(ext->dot_tmp_alloc) {
 801c75e:	07db      	lsls	r3, r3, #31
        return ext->dot.tmp_ptr;
 801c760:	bf4c      	ite	mi
 801c762:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 801c764:	3004      	addpl	r0, #4
 801c766:	b2ce      	uxtb	r6, r1
    while(ext->text[byte_i + i] != '\0') {
 801c768:	6822      	ldr	r2, [r4, #0]
 801c76a:	3101      	adds	r1, #1
 801c76c:	eb08 0306 	add.w	r3, r8, r6
 801c770:	5d86      	ldrb	r6, [r0, r6]
 801c772:	f812 c003 	ldrb.w	ip, [r2, r3]
 801c776:	18d7      	adds	r7, r2, r3
 801c778:	f1bc 0f00 	cmp.w	ip, #0
 801c77c:	d108      	bne.n	801c790 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 801c77e:	703e      	strb	r6, [r7, #0]
    lv_label_dot_tmp_free(label);
 801c780:	4628      	mov	r0, r5
 801c782:	f7ff ffbf 	bl	801c704 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 801c786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c78a:	60a3      	str	r3, [r4, #8]
}
 801c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 801c790:	54d6      	strb	r6, [r2, r3]
 801c792:	e7e8      	b.n	801c766 <lv_label_revert_dots+0x3e>
 801c794:	200000ac 	.word	0x200000ac

0801c798 <lv_label_set_dot_tmp>:
{
 801c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c79a:	4607      	mov	r7, r0
 801c79c:	4615      	mov	r5, r2
 801c79e:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c7a0:	f7ec ff2c 	bl	80095fc <lv_obj_get_ext_attr>
 801c7a4:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801c7a6:	4638      	mov	r0, r7
 801c7a8:	f7ff ffac 	bl	801c704 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801c7ac:	2d04      	cmp	r5, #4
 801c7ae:	d911      	bls.n	801c7d4 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801c7b0:	1c68      	adds	r0, r5, #1
 801c7b2:	f7f7 f9c9 	bl	8013b48 <lv_mem_alloc>
 801c7b6:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 801c7b8:	b158      	cbz	r0, 801c7d2 <lv_label_set_dot_tmp+0x3a>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
 801c7ba:	462a      	mov	r2, r5
 801c7bc:	4631      	mov	r1, r6
 801c7be:	f7f7 fa9b 	bl	8013cf8 <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 801c7c2:	6863      	ldr	r3, [r4, #4]
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 801c7c8:	7ce3      	ldrb	r3, [r4, #19]
 801c7ca:	f043 0301 	orr.w	r3, r3, #1
 801c7ce:	74e3      	strb	r3, [r4, #19]
    return true;
 801c7d0:	2001      	movs	r0, #1
}
 801c7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 801c7d4:	7ce3      	ldrb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
 801c7d6:	462a      	mov	r2, r5
 801c7d8:	4631      	mov	r1, r6
 801c7da:	1d20      	adds	r0, r4, #4
        ext->dot_tmp_alloc = false;
 801c7dc:	f36f 0300 	bfc	r3, #0, #1
 801c7e0:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
 801c7e2:	f7f7 fa89 	bl	8013cf8 <_lv_memcpy>
 801c7e6:	e7f3      	b.n	801c7d0 <lv_label_set_dot_tmp+0x38>

0801c7e8 <lv_label_set_offset_y>:
{
 801c7e8:	b538      	push	{r3, r4, r5, lr}
 801c7ea:	4604      	mov	r4, r0
 801c7ec:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c7ee:	f7ec ff05 	bl	80095fc <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 801c7f2:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
 801c7f4:	4620      	mov	r0, r4
}
 801c7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801c7fa:	f7eb bbd7 	b.w	8007fac <lv_obj_invalidate>

0801c7fe <lv_label_set_offset_x>:
{
 801c7fe:	b538      	push	{r3, r4, r5, lr}
 801c800:	4604      	mov	r4, r0
 801c802:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c804:	f7ec fefa 	bl	80095fc <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 801c808:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
 801c80a:	4620      	mov	r0, r4
}
 801c80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 801c810:	f7eb bbcc 	b.w	8007fac <lv_obj_invalidate>

0801c814 <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
 801c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c818:	4605      	mov	r5, r0
 801c81a:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
 801c81c:	f7eb fa10 	bl	8007c40 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c820:	2212      	movs	r2, #18
 801c822:	2100      	movs	r1, #0
 801c824:	4628      	mov	r0, r5
 801c826:	f7ec f941 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c82a:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c82c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c82e:	2100      	movs	r1, #0
 801c830:	4628      	mov	r0, r5
 801c832:	f7ec f93b 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c836:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801c838:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c83a:	2100      	movs	r1, #0
 801c83c:	4628      	mov	r0, r5
 801c83e:	f7ec f935 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801c842:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c844:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801c846:	2100      	movs	r1, #0
 801c848:	4628      	mov	r0, r5
 801c84a:	f7ec f92f 	bl	8008aac <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
 801c84e:	8823      	ldrh	r3, [r4, #0]
 801c850:	441f      	add	r7, r3
    area->x2 -= right;
 801c852:	88a3      	ldrh	r3, [r4, #4]
 801c854:	eba3 0308 	sub.w	r3, r3, r8
    area->x1 += left;
 801c858:	8027      	strh	r7, [r4, #0]
    area->x2 -= right;
 801c85a:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
 801c85c:	8863      	ldrh	r3, [r4, #2]
 801c85e:	441e      	add	r6, r3
    area->y2 -= bottom;
 801c860:	88e3      	ldrh	r3, [r4, #6]
 801c862:	1a18      	subs	r0, r3, r0
    area->y1 += top;
 801c864:	8066      	strh	r6, [r4, #2]
    area->y2 -= bottom;
 801c866:	80e0      	strh	r0, [r4, #6]
}
 801c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c86c <lv_label_set_align>:
{
 801c86c:	b538      	push	{r3, r4, r5, lr}
 801c86e:	4604      	mov	r4, r0
 801c870:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c872:	f7f6 fec1 	bl	80135f8 <lv_debug_check_null>
 801c876:	4603      	mov	r3, r0
 801c878:	b920      	cbnz	r0, 801c884 <lv_label_set_align+0x18>
 801c87a:	4622      	mov	r2, r4
 801c87c:	480a      	ldr	r0, [pc, #40]	; (801c8a8 <lv_label_set_align+0x3c>)
 801c87e:	f7f6 febf 	bl	8013600 <lv_debug_log_error>
 801c882:	e7fe      	b.n	801c882 <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c884:	4620      	mov	r0, r4
 801c886:	f7ec feb9 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 801c88a:	7c83      	ldrb	r3, [r0, #18]
 801c88c:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801c890:	42aa      	cmp	r2, r5
 801c892:	d007      	beq.n	801c8a4 <lv_label_set_align+0x38>
    ext->align = align;
 801c894:	f365 1305 	bfi	r3, r5, #4, #2
 801c898:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 801c89a:	4620      	mov	r0, r4
}
 801c89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 801c8a0:	f7eb bb84 	b.w	8007fac <lv_obj_invalidate>
}
 801c8a4:	bd38      	pop	{r3, r4, r5, pc}
 801c8a6:	bf00      	nop
 801c8a8:	0802c354 	.word	0x0802c354

0801c8ac <lv_label_get_text>:
{
 801c8ac:	b510      	push	{r4, lr}
 801c8ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c8b0:	f7f6 fea2 	bl	80135f8 <lv_debug_check_null>
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	b920      	cbnz	r0, 801c8c2 <lv_label_get_text+0x16>
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4804      	ldr	r0, [pc, #16]	; (801c8cc <lv_label_get_text+0x20>)
 801c8bc:	f7f6 fea0 	bl	8013600 <lv_debug_log_error>
 801c8c0:	e7fe      	b.n	801c8c0 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c8c2:	4620      	mov	r0, r4
 801c8c4:	f7ec fe9a 	bl	80095fc <lv_obj_get_ext_attr>
}
 801c8c8:	6800      	ldr	r0, [r0, #0]
 801c8ca:	bd10      	pop	{r4, pc}
 801c8cc:	0802c354 	.word	0x0802c354

0801c8d0 <lv_label_get_long_mode>:
{
 801c8d0:	b510      	push	{r4, lr}
 801c8d2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c8d4:	f7f6 fe90 	bl	80135f8 <lv_debug_check_null>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	b920      	cbnz	r0, 801c8e6 <lv_label_get_long_mode+0x16>
 801c8dc:	4622      	mov	r2, r4
 801c8de:	4805      	ldr	r0, [pc, #20]	; (801c8f4 <lv_label_get_long_mode+0x24>)
 801c8e0:	f7f6 fe8e 	bl	8013600 <lv_debug_log_error>
 801c8e4:	e7fe      	b.n	801c8e4 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	f7ec fe88 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->long_mode;
 801c8ec:	7c80      	ldrb	r0, [r0, #18]
}
 801c8ee:	f000 0007 	and.w	r0, r0, #7
 801c8f2:	bd10      	pop	{r4, pc}
 801c8f4:	0802c354 	.word	0x0802c354

0801c8f8 <lv_label_get_align>:
{
 801c8f8:	b510      	push	{r4, lr}
 801c8fa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c8fc:	f7f6 fe7c 	bl	80135f8 <lv_debug_check_null>
 801c900:	4603      	mov	r3, r0
 801c902:	b920      	cbnz	r0, 801c90e <lv_label_get_align+0x16>
 801c904:	4622      	mov	r2, r4
 801c906:	4807      	ldr	r0, [pc, #28]	; (801c924 <lv_label_get_align+0x2c>)
 801c908:	f7f6 fe7a 	bl	8013600 <lv_debug_log_error>
 801c90c:	e7fe      	b.n	801c90c <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c90e:	4620      	mov	r0, r4
 801c910:	f7ec fe74 	bl	80095fc <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
 801c914:	7c80      	ldrb	r0, [r0, #18]
 801c916:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
 801c91a:	2803      	cmp	r0, #3
}
 801c91c:	bf08      	it	eq
 801c91e:	2000      	moveq	r0, #0
 801c920:	bd10      	pop	{r4, pc}
 801c922:	bf00      	nop
 801c924:	0802c354 	.word	0x0802c354

0801c928 <lv_label_get_recolor>:
{
 801c928:	b510      	push	{r4, lr}
 801c92a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c92c:	f7f6 fe64 	bl	80135f8 <lv_debug_check_null>
 801c930:	4603      	mov	r3, r0
 801c932:	b920      	cbnz	r0, 801c93e <lv_label_get_recolor+0x16>
 801c934:	4622      	mov	r2, r4
 801c936:	4805      	ldr	r0, [pc, #20]	; (801c94c <lv_label_get_recolor+0x24>)
 801c938:	f7f6 fe62 	bl	8013600 <lv_debug_log_error>
 801c93c:	e7fe      	b.n	801c93c <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801c93e:	4620      	mov	r0, r4
 801c940:	f7ec fe5c 	bl	80095fc <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 801c944:	7c80      	ldrb	r0, [r0, #18]
}
 801c946:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801c94a:	bd10      	pop	{r4, pc}
 801c94c:	0802c354 	.word	0x0802c354

0801c950 <lv_label_get_letter_on>:
{
 801c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c954:	b08d      	sub	sp, #52	; 0x34
 801c956:	4605      	mov	r5, r0
 801c958:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801c95a:	f7f6 fe4d 	bl	80135f8 <lv_debug_check_null>
 801c95e:	4603      	mov	r3, r0
 801c960:	b920      	cbnz	r0, 801c96c <lv_label_get_letter_on+0x1c>
 801c962:	462a      	mov	r2, r5
 801c964:	4888      	ldr	r0, [pc, #544]	; (801cb88 <lv_label_get_letter_on+0x238>)
 801c966:	f7f6 fe4b 	bl	8013600 <lv_debug_log_error>
 801c96a:	e7fe      	b.n	801c96a <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
 801c96c:	4620      	mov	r0, r4
 801c96e:	f7f6 fe43 	bl	80135f8 <lv_debug_check_null>
 801c972:	4603      	mov	r3, r0
 801c974:	b920      	cbnz	r0, 801c980 <lv_label_get_letter_on+0x30>
 801c976:	4622      	mov	r2, r4
 801c978:	4883      	ldr	r0, [pc, #524]	; (801cb88 <lv_label_get_letter_on+0x238>)
 801c97a:	f7f6 fe41 	bl	8013600 <lv_debug_log_error>
 801c97e:	e7fe      	b.n	801c97e <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 801c980:	8826      	ldrh	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801c982:	2212      	movs	r2, #18
 801c984:	2100      	movs	r1, #0
 801c986:	4628      	mov	r0, r5
 801c988:	f7ec f890 	bl	8008aac <_lv_obj_get_style_int>
 801c98c:	1a30      	subs	r0, r6, r0
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801c98e:	8864      	ldrh	r4, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801c990:	2210      	movs	r2, #16
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 801c992:	b203      	sxth	r3, r0
 801c994:	2100      	movs	r1, #0
 801c996:	4628      	mov	r0, r5
 801c998:	9304      	str	r3, [sp, #16]
 801c99a:	f7ec f887 	bl	8008aac <_lv_obj_get_style_int>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801c99e:	1a20      	subs	r0, r4, r0
    get_txt_coords(label, &txt_coords);
 801c9a0:	a90a      	add	r1, sp, #40	; 0x28
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801c9a2:	b203      	sxth	r3, r0
    get_txt_coords(label, &txt_coords);
 801c9a4:	4628      	mov	r0, r5
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801c9a6:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
 801c9a8:	f7ff ff34 	bl	801c814 <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
 801c9ac:	4628      	mov	r0, r5
 801c9ae:	f7ff ff7d 	bl	801c8ac <lv_label_get_text>
 801c9b2:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	f7ec fe21 	bl	80095fc <lv_obj_get_ext_attr>
 801c9ba:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801c9be:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c9c2:	4604      	mov	r4, r0
 801c9c4:	3301      	adds	r3, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801c9c6:	2100      	movs	r1, #0
 801c9c8:	4628      	mov	r0, r5
 801c9ca:	1a9b      	subs	r3, r3, r2
 801c9cc:	f248 028e 	movw	r2, #32910	; 0x808e
 801c9d0:	b21b      	sxth	r3, r3
 801c9d2:	9306      	str	r3, [sp, #24]
 801c9d4:	f7ec fb72 	bl	80090bc <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801c9d8:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801c9dc:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801c9de:	2100      	movs	r1, #0
 801c9e0:	4628      	mov	r0, r5
 801c9e2:	f7ec f863 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801c9e6:	f248 0280 	movw	r2, #32896	; 0x8080
 801c9ea:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801c9ec:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801c9ee:	4628      	mov	r0, r5
 801c9f0:	f7ec f85c 	bl	8008aac <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801c9f4:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 801c9f8:	9002      	str	r0, [sp, #8]
    lv_label_align_t align = lv_label_get_align(label);
 801c9fa:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801c9fc:	9303      	str	r3, [sp, #12]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801c9fe:	7ca3      	ldrb	r3, [r4, #18]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 801ca00:	f3c3 1480 	ubfx	r4, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801ca04:	061a      	lsls	r2, r3, #24
 801ca06:	bf48      	it	mi
 801ca08:	f044 0402 	orrmi.w	r4, r4, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 801ca0c:	075b      	lsls	r3, r3, #29
 801ca0e:	bf08      	it	eq
 801ca10:	f044 0410 	orreq.w	r4, r4, #16
    lv_label_align_t align = lv_label_get_align(label);
 801ca14:	f7ff ff70 	bl	801c8f8 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801ca18:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
 801ca1a:	4683      	mov	fp, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801ca1c:	d108      	bne.n	801ca30 <lv_label_get_letter_on+0xe0>
 801ca1e:	f044 0404 	orr.w	r4, r4, #4
        y += letter_height + line_space;
 801ca22:	9b03      	ldr	r3, [sp, #12]
{
 801ca24:	f04f 0900 	mov.w	r9, #0
        y += letter_height + line_space;
 801ca28:	4433      	add	r3, r6
{
 801ca2a:	464d      	mov	r5, r9
        y += letter_height + line_space;
 801ca2c:	9307      	str	r3, [sp, #28]
 801ca2e:	e050      	b.n	801cad2 <lv_label_get_letter_on+0x182>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 801ca30:	2802      	cmp	r0, #2
 801ca32:	d1f6      	bne.n	801ca22 <lv_label_get_letter_on+0xd2>
 801ca34:	f044 0408 	orr.w	r4, r4, #8
 801ca38:	e7f3      	b.n	801ca22 <lv_label_get_letter_on+0xd2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801ca3a:	9b06      	ldr	r3, [sp, #24]
 801ca3c:	4651      	mov	r1, sl
 801ca3e:	9a02      	ldr	r2, [sp, #8]
 801ca40:	4638      	mov	r0, r7
 801ca42:	9400      	str	r4, [sp, #0]
 801ca44:	f7f8 fa08 	bl	8014e58 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 801ca48:	9b03      	ldr	r3, [sp, #12]
 801ca4a:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801ca4c:	182e      	adds	r6, r5, r0
        if(pos.y <= y + letter_height) {
 801ca4e:	444b      	add	r3, r9
 801ca50:	429a      	cmp	r2, r3
 801ca52:	dc39      	bgt.n	801cac8 <lv_label_get_letter_on+0x178>
            uint32_t tmp = new_line_start;
 801ca54:	a90c      	add	r1, sp, #48	; 0x30
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801ca56:	4b4d      	ldr	r3, [pc, #308]	; (801cb8c <lv_label_get_letter_on+0x23c>)
 801ca58:	4640      	mov	r0, r8
            uint32_t tmp = new_line_start;
 801ca5a:	f841 6d0c 	str.w	r6, [r1, #-12]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 801ca62:	280a      	cmp	r0, #10
 801ca64:	d003      	beq.n	801ca6e <lv_label_get_letter_on+0x11e>
 801ca66:	f818 3006 	ldrb.w	r3, [r8, r6]
 801ca6a:	b903      	cbnz	r3, 801ca6e <lv_label_get_letter_on+0x11e>
 801ca6c:	3601      	adds	r6, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
 801ca6e:	f1bb 0f01 	cmp.w	fp, #1
 801ca72:	d136      	bne.n	801cae2 <lv_label_get_letter_on+0x192>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801ca74:	9b02      	ldr	r3, [sp, #8]
 801ca76:	4652      	mov	r2, sl
 801ca78:	9400      	str	r4, [sp, #0]
 801ca7a:	1b71      	subs	r1, r6, r5
 801ca7c:	4638      	mov	r0, r7
 801ca7e:	f7f8 f999 	bl	8014db4 <_lv_txt_get_width>
 801ca82:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801ca86:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ca8a:	3301      	adds	r3, #1
 801ca8c:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801ca8e:	2202      	movs	r2, #2
 801ca90:	b21b      	sxth	r3, r3
 801ca92:	fb90 f0f2 	sdiv	r0, r0, r2
 801ca96:	fb93 f3f2 	sdiv	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 801ca9a:	1a1b      	subs	r3, r3, r0
 801ca9c:	fa0f f983 	sxth.w	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801caa0:	2200      	movs	r2, #0
 801caa2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    uint32_t i = 0;
 801caa6:	9209      	str	r2, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801caa8:	2e00      	cmp	r6, #0
 801caaa:	d167      	bne.n	801cb7c <lv_label_get_letter_on+0x22c>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801caac:	4c38      	ldr	r4, [pc, #224]	; (801cb90 <lv_label_get_letter_on+0x240>)
 801caae:	4638      	mov	r0, r7
 801cab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cab2:	6823      	ldr	r3, [r4, #0]
 801cab4:	4798      	blx	r3
 801cab6:	4606      	mov	r6, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801cab8:	6823      	ldr	r3, [r4, #0]
 801caba:	4629      	mov	r1, r5
 801cabc:	4640      	mov	r0, r8
 801cabe:	4798      	blx	r3
}
 801cac0:	4430      	add	r0, r6
 801cac2:	b00d      	add	sp, #52	; 0x34
 801cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac8:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801caca:	4635      	mov	r5, r6
 801cacc:	4499      	add	r9, r3
 801cace:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
 801cad2:	f818 3005 	ldrb.w	r3, [r8, r5]
 801cad6:	eb08 0705 	add.w	r7, r8, r5
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d1ad      	bne.n	801ca3a <lv_label_get_letter_on+0xea>
 801cade:	462e      	mov	r6, r5
 801cae0:	e7c5      	b.n	801ca6e <lv_label_get_letter_on+0x11e>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
 801cae2:	f1bb 0f02 	cmp.w	fp, #2
 801cae6:	d10d      	bne.n	801cb04 <lv_label_get_letter_on+0x1b4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801cae8:	9b02      	ldr	r3, [sp, #8]
 801caea:	4652      	mov	r2, sl
 801caec:	9400      	str	r4, [sp, #0]
 801caee:	1b71      	subs	r1, r6, r5
 801caf0:	4638      	mov	r0, r7
 801caf2:	f7f8 f95f 	bl	8014db4 <_lv_txt_get_width>
 801caf6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801cafa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cafe:	3301      	adds	r3, #1
 801cb00:	1a9b      	subs	r3, r3, r2
 801cb02:	e7ca      	b.n	801ca9a <lv_label_get_letter_on+0x14a>
    lv_coord_t x = 0;
 801cb04:	f04f 0900 	mov.w	r9, #0
 801cb08:	e7ca      	b.n	801caa0 <lv_label_get_letter_on+0x150>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801cb0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb0c:	9006      	str	r0, [sp, #24]
 801cb0e:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801cb12:	5c79      	ldrb	r1, [r7, r1]
 801cb14:	f7f8 f930 	bl	8014d78 <_lv_txt_is_cmd>
 801cb18:	9a06      	ldr	r2, [sp, #24]
 801cb1a:	b190      	cbz	r0, 801cb42 <lv_label_get_letter_on+0x1f2>
        while(i + line_start < new_line_start) {
 801cb1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb1e:	442a      	add	r2, r5
 801cb20:	42b2      	cmp	r2, r6
 801cb22:	d2c3      	bcs.n	801caac <lv_label_get_letter_on+0x15c>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 801cb24:	f8db 2000 	ldr.w	r2, [fp]
 801cb28:	a909      	add	r1, sp, #36	; 0x24
 801cb2a:	4638      	mov	r0, r7
 801cb2c:	4790      	blx	r2
 801cb2e:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 801cb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb32:	2100      	movs	r1, #0
 801cb34:	f8db 2000 	ldr.w	r2, [fp]
 801cb38:	4438      	add	r0, r7
 801cb3a:	4790      	blx	r2
 801cb3c:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801cb3e:	2c00      	cmp	r4, #0
 801cb40:	d1e3      	bne.n	801cb0a <lv_label_get_letter_on+0x1ba>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801cb42:	9905      	ldr	r1, [sp, #20]
 801cb44:	4650      	mov	r0, sl
 801cb46:	f7f5 fc1f 	bl	8012388 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
 801cb4a:	9b04      	ldr	r3, [sp, #16]
 801cb4c:	fa09 f280 	sxtah	r2, r9, r0
 801cb50:	4293      	cmp	r3, r2
 801cb52:	da02      	bge.n	801cb5a <lv_label_get_letter_on+0x20a>
                i = i_act;
 801cb54:	9b03      	ldr	r3, [sp, #12]
 801cb56:	9309      	str	r3, [sp, #36]	; 0x24
                break;
 801cb58:	e7a8      	b.n	801caac <lv_label_get_letter_on+0x15c>
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
 801cb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb5c:	1951      	adds	r1, r2, r5
 801cb5e:	42b1      	cmp	r1, r6
 801cb60:	d0f8      	beq.n	801cb54 <lv_label_get_letter_on+0x204>
 801cb62:	eb08 0105 	add.w	r1, r8, r5
 801cb66:	9b03      	ldr	r3, [sp, #12]
 801cb68:	5cc9      	ldrb	r1, [r1, r3]
 801cb6a:	2900      	cmp	r1, #0
 801cb6c:	d0f2      	beq.n	801cb54 <lv_label_get_letter_on+0x204>
            x += letter_space;
 801cb6e:	9b02      	ldr	r3, [sp, #8]
            i_act = i;
 801cb70:	9203      	str	r2, [sp, #12]
            x += letter_space;
 801cb72:	444b      	add	r3, r9
 801cb74:	4418      	add	r0, r3
 801cb76:	fa0f f980 	sxth.w	r9, r0
 801cb7a:	e7cf      	b.n	801cb1c <lv_label_get_letter_on+0x1cc>
    uint32_t i_act = i;
 801cb7c:	9203      	str	r2, [sp, #12]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801cb7e:	f004 0401 	and.w	r4, r4, #1
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 801cb82:	f8df b010 	ldr.w	fp, [pc, #16]	; 801cb94 <lv_label_get_letter_on+0x244>
 801cb86:	e7c9      	b.n	801cb1c <lv_label_get_letter_on+0x1cc>
 801cb88:	0802c354 	.word	0x0802c354
 801cb8c:	200000b8 	.word	0x200000b8
 801cb90:	200000b4 	.word	0x200000b4
 801cb94:	200000a8 	.word	0x200000a8

0801cb98 <lv_label_get_text_sel_start>:
{
 801cb98:	b510      	push	{r4, lr}
 801cb9a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801cb9c:	f7f6 fd2c 	bl	80135f8 <lv_debug_check_null>
 801cba0:	4603      	mov	r3, r0
 801cba2:	b920      	cbnz	r0, 801cbae <lv_label_get_text_sel_start+0x16>
 801cba4:	4622      	mov	r2, r4
 801cba6:	4803      	ldr	r0, [pc, #12]	; (801cbb4 <lv_label_get_text_sel_start+0x1c>)
 801cba8:	f7f6 fd2a 	bl	8013600 <lv_debug_log_error>
 801cbac:	e7fe      	b.n	801cbac <lv_label_get_text_sel_start+0x14>
}
 801cbae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cbb2:	bd10      	pop	{r4, pc}
 801cbb4:	0802c354 	.word	0x0802c354

0801cbb8 <lv_label_get_text_sel_end>:
{
 801cbb8:	b510      	push	{r4, lr}
 801cbba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801cbbc:	f7f6 fd1c 	bl	80135f8 <lv_debug_check_null>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	b920      	cbnz	r0, 801cbce <lv_label_get_text_sel_end+0x16>
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801cbc4:	4622      	mov	r2, r4
 801cbc6:	4803      	ldr	r0, [pc, #12]	; (801cbd4 <lv_label_get_text_sel_end+0x1c>)
 801cbc8:	f7f6 fd1a 	bl	8013600 <lv_debug_log_error>
 801cbcc:	e7fe      	b.n	801cbcc <lv_label_get_text_sel_end+0x14>
}
 801cbce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cbd2:	bd10      	pop	{r4, pc}
 801cbd4:	0802c354 	.word	0x0802c354

0801cbd8 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
 801cbd8:	2a02      	cmp	r2, #2
{
 801cbda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbde:	4606      	mov	r6, r0
 801cbe0:	b0ab      	sub	sp, #172	; 0xac
 801cbe2:	460f      	mov	r7, r1
 801cbe4:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK)
 801cbe6:	f000 8101 	beq.w	801cdec <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801cbea:	2a00      	cmp	r2, #0
 801cbec:	d145      	bne.n	801cc7a <lv_label_design+0xa2>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cbee:	f7ec fd05 	bl	80095fc <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 801cbf2:	2204      	movs	r2, #4
 801cbf4:	4621      	mov	r1, r4
 801cbf6:	4605      	mov	r5, r0
 801cbf8:	4630      	mov	r0, r6
        *d8 = *s8;
 801cbfa:	f10d 0818 	add.w	r8, sp, #24
 801cbfe:	f7eb ff55 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 801cc02:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int)
 801cc04:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int)
 801cc06:	4621      	mov	r1, r4
 801cc08:	4630      	mov	r0, r6
 801cc0a:	f7eb ff4f 	bl	8008aac <_lv_obj_get_style_int>
        lv_area_copy(&bg_coords, &label->coords);
 801cc0e:	f106 0210 	add.w	r2, r6, #16
 801cc12:	5d13      	ldrb	r3, [r2, r4]
 801cc14:	f804 3008 	strb.w	r3, [r4, r8]
 801cc18:	3401      	adds	r4, #1
    while(len) {
 801cc1a:	2c08      	cmp	r4, #8
 801cc1c:	d1f9      	bne.n	801cc12 <lv_label_design+0x3a>
        bg_coords.x1 -= w;
 801cc1e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801cc22:	fa1f f389 	uxth.w	r3, r9
        bg_coords.y1 -= h;
 801cc26:	b280      	uxth	r0, r0
        bg_coords.x1 -= w;
 801cc28:	1ad2      	subs	r2, r2, r3
 801cc2a:	f8ad 2018 	strh.w	r2, [sp, #24]
        bg_coords.x2 += w;
 801cc2e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801cc32:	4413      	add	r3, r2
 801cc34:	f8ad 301c 	strh.w	r3, [sp, #28]
        bg_coords.y1 -= h;
 801cc38:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801cc3c:	1a1b      	subs	r3, r3, r0
 801cc3e:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
 801cc42:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cc46:	4418      	add	r0, r3
 801cc48:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
 801cc4c:	a815      	add	r0, sp, #84	; 0x54
 801cc4e:	f7f2 fe2b 	bl	800f8a8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
 801cc52:	aa15      	add	r2, sp, #84	; 0x54
 801cc54:	2100      	movs	r1, #0
 801cc56:	4630      	mov	r0, r6
 801cc58:	f7ec fde8 	bl	800982c <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
 801cc5c:	aa15      	add	r2, sp, #84	; 0x54
 801cc5e:	4639      	mov	r1, r7
 801cc60:	4640      	mov	r0, r8
 801cc62:	f7f2 fe45 	bl	800f8f0 <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
 801cc66:	a908      	add	r1, sp, #32
 801cc68:	4630      	mov	r0, r6
 801cc6a:	f7ff fdd3 	bl	801c814 <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
 801cc6e:	aa08      	add	r2, sp, #32
 801cc70:	4639      	mov	r1, r7
 801cc72:	a80a      	add	r0, sp, #40	; 0x28
 801cc74:	f7f6 fa3d 	bl	80130f2 <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
 801cc78:	b908      	cbnz	r0, 801cc7e <lv_label_design+0xa6>
    return LV_DESIGN_RES_OK;
 801cc7a:	2000      	movs	r0, #0
 801cc7c:	e0b7      	b.n	801cdee <lv_label_design+0x216>
        lv_label_align_t align = lv_label_get_align(label);
 801cc7e:	4630      	mov	r0, r6
 801cc80:	f7ff fe3a 	bl	801c8f8 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801cc84:	7cab      	ldrb	r3, [r5, #18]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801cc86:	f3c3 1480 	ubfx	r4, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801cc8a:	061a      	lsls	r2, r3, #24
 801cc8c:	bf48      	it	mi
 801cc8e:	f044 0402 	orrmi.w	r4, r4, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 801cc92:	075b      	lsls	r3, r3, #29
 801cc94:	bf08      	it	eq
 801cc96:	f044 0410 	orreq.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 801cc9a:	2801      	cmp	r0, #1
 801cc9c:	f040 80a1 	bne.w	801cde2 <lv_label_design+0x20a>
 801cca0:	f044 0404 	orr.w	r4, r4, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
 801cca4:	a80c      	add	r0, sp, #48	; 0x30
 801cca6:	f7f0 faf7 	bl	800d298 <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
 801ccaa:	4630      	mov	r0, r6
 801ccac:	f7ff ff74 	bl	801cb98 <lv_label_get_text_sel_start>
 801ccb0:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	f7ff ff80 	bl	801cbb8 <lv_label_get_text_sel_end>
        label_draw_dsc.ofs_x = ext->offset.x;
 801ccb8:	89eb      	ldrh	r3, [r5, #14]
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
 801ccba:	9012      	str	r0, [sp, #72]	; 0x48
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 801ccbc:	aa0c      	add	r2, sp, #48	; 0x30
        label_draw_dsc.ofs_x = ext->offset.x;
 801ccbe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 801ccc2:	2100      	movs	r1, #0
        label_draw_dsc.ofs_y = ext->offset.y;
 801ccc4:	8a2b      	ldrh	r3, [r5, #16]
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 801ccc6:	4630      	mov	r0, r6
        label_draw_dsc.flag = flag;
 801ccc8:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        label_draw_dsc.ofs_y = ext->offset.y;
 801cccc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 801ccd0:	f7ed f869 	bl	8009da6 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801ccd4:	7cab      	ldrb	r3, [r5, #18]
 801ccd6:	f003 0207 	and.w	r2, r3, #7
 801ccda:	3a03      	subs	r2, #3
 801ccdc:	2a01      	cmp	r2, #1
 801ccde:	d824      	bhi.n	801cd2a <lv_label_design+0x152>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801cce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801cce4:	2b10      	cmp	r3, #16
 801cce6:	d001      	beq.n	801ccec <lv_label_design+0x114>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801cce8:	2b20      	cmp	r3, #32
 801ccea:	d11e      	bne.n	801cd2a <lv_label_design+0x152>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801ccec:	f647 4218 	movw	r2, #31768	; 0x7c18
 801ccf0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801ccf4:	9402      	str	r4, [sp, #8]
 801ccf6:	a805      	add	r0, sp, #20
 801ccf8:	9201      	str	r2, [sp, #4]
 801ccfa:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 801ccfe:	9200      	str	r2, [sp, #0]
 801cd00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd02:	6829      	ldr	r1, [r5, #0]
 801cd04:	f7f8 f990 	bl	8015028 <_lv_txt_get_size>
 801cd08:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cd0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cd10:	3301      	adds	r3, #1
 801cd12:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
 801cd14:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801cd18:	b21b      	sxth	r3, r3
 801cd1a:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
 801cd1c:	bfc2      	ittt	gt
 801cd1e:	f89d 3051 	ldrbgt.w	r3, [sp, #81]	; 0x51
 801cd22:	f023 030c 	bicgt.w	r3, r3, #12
 801cd26:	f88d 3051 	strbgt.w	r3, [sp, #81]	; 0x51
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cd2a:	2600      	movs	r6, #0
 801cd2c:	aa0c      	add	r2, sp, #48	; 0x30
 801cd2e:	a90a      	add	r1, sp, #40	; 0x28
 801cd30:	a808      	add	r0, sp, #32
 801cd32:	9600      	str	r6, [sp, #0]
 801cd34:	682b      	ldr	r3, [r5, #0]
 801cd36:	f7f0 fac5 	bl	800d2c4 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801cd3a:	7cab      	ldrb	r3, [r5, #18]
 801cd3c:	f003 0307 	and.w	r3, r3, #7
 801cd40:	2b04      	cmp	r3, #4
 801cd42:	d19a      	bne.n	801cc7a <lv_label_design+0xa2>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801cd44:	f647 4218 	movw	r2, #31768	; 0x7c18
 801cd48:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801cd4c:	9402      	str	r4, [sp, #8]
 801cd4e:	a805      	add	r0, sp, #20
 801cd50:	9201      	str	r2, [sp, #4]
 801cd52:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 801cd56:	9200      	str	r2, [sp, #0]
 801cd58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd5a:	6829      	ldr	r1, [r5, #0]
 801cd5c:	f7f8 f964 	bl	8015028 <_lv_txt_get_size>
 801cd60:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cd64:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cd68:	3201      	adds	r2, #1
            if(size.x > lv_area_get_width(&txt_coords)) {
 801cd6a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cd6e:	1a52      	subs	r2, r2, r1
 801cd70:	b212      	sxth	r2, r2
 801cd72:	4293      	cmp	r3, r2
 801cd74:	dd16      	ble.n	801cda4 <lv_label_design+0x1cc>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd76:	89ec      	ldrh	r4, [r5, #14]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cd78:	2220      	movs	r2, #32
 801cd7a:	980e      	ldr	r0, [sp, #56]	; 0x38
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd7c:	4423      	add	r3, r4
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cd7e:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd80:	b29c      	uxth	r4, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cd82:	f7f5 fb01 	bl	8012388 <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
 801cd86:	8a2b      	ldrh	r3, [r5, #16]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cd8c:	9600      	str	r6, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y;
 801cd8e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cd92:	aa0c      	add	r2, sp, #48	; 0x30
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd94:	4404      	add	r4, r0
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cd96:	682b      	ldr	r3, [r5, #0]
 801cd98:	a90a      	add	r1, sp, #40	; 0x28
 801cd9a:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 801cd9c:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cda0:	f7f0 fa90 	bl	800d2c4 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cda4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cda8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cdac:	3301      	adds	r3, #1
            if(size.y > lv_area_get_height(&txt_coords)) {
 801cdae:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801cdb2:	1a5b      	subs	r3, r3, r1
 801cdb4:	b21b      	sxth	r3, r3
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	f77f af5f 	ble.w	801cc7a <lv_label_design+0xa2>
                label_draw_dsc.ofs_x = ext->offset.x;
 801cdbc:	89eb      	ldrh	r3, [r5, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cdbe:	a90a      	add	r1, sp, #40	; 0x28
 801cdc0:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_x = ext->offset.x;
 801cdc2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdc8:	891b      	ldrh	r3, [r3, #8]
 801cdca:	441a      	add	r2, r3
 801cdcc:	8a2b      	ldrh	r3, [r5, #16]
 801cdce:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cdd0:	2300      	movs	r3, #0
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801cdd2:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 801cdd6:	aa0c      	add	r2, sp, #48	; 0x30
 801cdd8:	9300      	str	r3, [sp, #0]
 801cdda:	682b      	ldr	r3, [r5, #0]
 801cddc:	f7f0 fa72 	bl	800d2c4 <lv_draw_label>
 801cde0:	e74b      	b.n	801cc7a <lv_label_design+0xa2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 801cde2:	2802      	cmp	r0, #2
 801cde4:	bf08      	it	eq
 801cde6:	f044 0408 	orreq.w	r4, r4, #8
 801cdea:	e75b      	b.n	801cca4 <lv_label_design+0xcc>
        return LV_DESIGN_RES_NOT_COVER;
 801cdec:	4610      	mov	r0, r2
}
 801cdee:	b02b      	add	sp, #172	; 0xac
 801cdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801cdf4 <lv_label_refr_text>:
{
 801cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdf8:	b09d      	sub	sp, #116	; 0x74
 801cdfa:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801cdfc:	f7ec fbfe 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 801ce00:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801ce02:	4605      	mov	r5, r0
    if(ext->text == NULL) return;
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d066      	beq.n	801ced6 <lv_label_refr_text+0xe2>
    get_txt_coords(label, &txt_coords);
 801ce08:	a909      	add	r1, sp, #36	; 0x24
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	f7ff fd02 	bl	801c814 <get_txt_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ce10:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 801ce14:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801ce18:	f248 028e 	movw	r2, #32910	; 0x808e
 801ce1c:	f108 0801 	add.w	r8, r8, #1
 801ce20:	2100      	movs	r1, #0
 801ce22:	4620      	mov	r0, r4
 801ce24:	eba8 0803 	sub.w	r8, r8, r3
 801ce28:	f7ec f948 	bl	80090bc <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801ce2c:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801ce30:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801ce32:	2100      	movs	r1, #0
 801ce34:	4620      	mov	r0, r4
 801ce36:	f7eb fe39 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801ce3a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int)
 801ce3c:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int)
 801ce3e:	f248 0280 	movw	r2, #32896	; 0x8080
 801ce42:	4620      	mov	r0, r4
 801ce44:	fa0f f888 	sxth.w	r8, r8
 801ce48:	f7eb fe30 	bl	8008aac <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801ce4c:	7caa      	ldrb	r2, [r5, #18]
 801ce4e:	4681      	mov	r9, r0
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
 801ce50:	9600      	str	r6, [sp, #0]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 801ce52:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 801ce56:	0611      	lsls	r1, r2, #24
 801ce58:	bf48      	it	mi
 801ce5a:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 801ce5e:	0752      	lsls	r2, r2, #29
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
 801ce60:	463a      	mov	r2, r7
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 801ce62:	bf08      	it	eq
 801ce64:	f043 0310 	orreq.w	r3, r3, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
 801ce68:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801ce6c:	4603      	mov	r3, r0
 801ce6e:	6829      	ldr	r1, [r5, #0]
 801ce70:	a807      	add	r0, sp, #28
 801ce72:	f7f8 f8d9 	bl	8015028 <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801ce76:	f895 8012 	ldrb.w	r8, [r5, #18]
 801ce7a:	f018 0807 	ands.w	r8, r8, #7
 801ce7e:	d12d      	bne.n	801cedc <lv_label_refr_text+0xe8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801ce80:	2212      	movs	r2, #18
 801ce82:	4641      	mov	r1, r8
 801ce84:	4620      	mov	r0, r4
 801ce86:	f7eb fe11 	bl	8008aac <_lv_obj_get_style_int>
 801ce8a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801ce8c:	2213      	movs	r2, #19
 801ce8e:	4641      	mov	r1, r8
 801ce90:	4620      	mov	r0, r4
 801ce92:	f7eb fe0b 	bl	8008aac <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
 801ce96:	4428      	add	r0, r5
 801ce98:	f8bd 501c 	ldrh.w	r5, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ce9c:	2210      	movs	r2, #16
 801ce9e:	4641      	mov	r1, r8
 801cea0:	4428      	add	r0, r5
 801cea2:	f8ad 001c 	strh.w	r0, [sp, #28]
 801cea6:	4620      	mov	r0, r4
 801cea8:	f7eb fe00 	bl	8008aac <_lv_obj_get_style_int>
 801ceac:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801ceae:	2211      	movs	r2, #17
 801ceb0:	4641      	mov	r1, r8
 801ceb2:	4620      	mov	r0, r4
 801ceb4:	f7eb fdfa 	bl	8008aac <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 801ceb8:	182a      	adds	r2, r5, r0
 801ceba:	f8bd 001e 	ldrh.w	r0, [sp, #30]
        lv_obj_set_size(label, size.x, size.y);
 801cebe:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 801cec2:	4402      	add	r2, r0
        lv_obj_set_size(label, size.x, size.y);
 801cec4:	4620      	mov	r0, r4
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 801cec6:	b212      	sxth	r2, r2
 801cec8:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_obj_set_size(label, size.x, size.y);
 801cecc:	f7eb fcf8 	bl	80088c0 <lv_obj_set_size>
    lv_obj_invalidate(label);
 801ced0:	4620      	mov	r0, r4
 801ced2:	f7eb f86b 	bl	8007fac <lv_obj_invalidate>
}
 801ced6:	b01d      	add	sp, #116	; 0x74
 801ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 801cedc:	f1b8 0f03 	cmp.w	r8, #3
 801cee0:	f040 80a6 	bne.w	801d030 <lv_label_refr_text+0x23c>
        lv_anim_init(&a);
 801cee4:	a80b      	add	r0, sp, #44	; 0x2c
 801cee6:	2600      	movs	r6, #0
 801cee8:	f7f6 f820 	bl	8012f2c <lv_anim_init>
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
 801ceec:	2220      	movs	r2, #32
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
 801ceee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cef2:	4638      	mov	r0, r7
 801cef4:	4611      	mov	r1, r2
    a->var     = var;
 801cef6:	940b      	str	r4, [sp, #44]	; 0x2c
    a->repeat_cnt       = cnt;
 801cef8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 801cefc:	f7f5 fa44 	bl	8012388 <lv_font_get_glyph_width>
 801cf00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cf04:	4448      	add	r0, r9
                                        ext->anim_speed) *
 801cf06:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
 801cf0a:	4343      	muls	r3, r0
 801cf0c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cf10:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801cf14:	3201      	adds	r2, #1
 801cf16:	fb93 f3fc 	sdiv	r3, r3, ip
 801cf1a:	1a52      	subs	r2, r2, r1
 801cf1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf20:	b292      	uxth	r2, r2
    a->playback_delay = delay;
 801cf22:	b29b      	uxth	r3, r3
        if(size.x > lv_area_get_width(&txt_coords)) {
 801cf24:	b211      	sxth	r1, r2
 801cf26:	9316      	str	r3, [sp, #88]	; 0x58
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
 801cf28:	9318      	str	r3, [sp, #96]	; 0x60
 801cf2a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cf2e:	428b      	cmp	r3, r1
 801cf30:	dd76      	ble.n	801d020 <lv_label_refr_text+0x22c>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 801cf32:	1ad2      	subs	r2, r2, r3
    a->exec_cb = exec_cb;
 801cf34:	f8df 835c 	ldr.w	r8, [pc, #860]	; 801d294 <lv_label_refr_text+0x4a0>
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cf38:	4631      	mov	r1, r6
 801cf3a:	4660      	mov	r0, ip
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 801cf3c:	b212      	sxth	r2, r2
 801cf3e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    a->current = start;
 801cf42:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 801cf46:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cf48:	f7f6 f88a 	bl	8013060 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801cf4c:	4641      	mov	r1, r8
    a->time     = duration;
 801cf4e:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cf50:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801cf52:	4620      	mov	r0, r4
 801cf54:	f7f6 f86e 	bl	8013034 <lv_anim_get>
            if(anim_cur) {
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	d05f      	beq.n	801d01c <lv_label_refr_text+0x228>
                act_time = anim_cur->act_time;
 801cf5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
 801cf5e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 801cf62:	f000 0001 	and.w	r0, r0, #1
            if(act_time < a.time) {
 801cf66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cf68:	429a      	cmp	r2, r3
 801cf6a:	dd11      	ble.n	801cf90 <lv_label_refr_text+0x19c>
                a.act_time = act_time;      /*To keep the old position*/
 801cf6c:	9315      	str	r3, [sp, #84]	; 0x54
                a.early_apply = 0;
 801cf6e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 801cf72:	f36f 0300 	bfc	r3, #0, #1
 801cf76:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                if(playback_now) {
 801cf7a:	b148      	cbz	r0, 801cf90 <lv_label_refr_text+0x19c>
                    a.playback_now = 1;
 801cf7c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
                    a.start = a.end;
 801cf80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 801cf82:	f043 0301 	orr.w	r3, r3, #1
 801cf86:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
                    tmp      = a.start;
 801cf8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    a.start = a.end;
 801cf8c:	9211      	str	r2, [sp, #68]	; 0x44
                    a.end   = tmp;
 801cf8e:	9313      	str	r3, [sp, #76]	; 0x4c
            hor_anim = true;
 801cf90:	2601      	movs	r6, #1
            lv_anim_start(&a);
 801cf92:	a80b      	add	r0, sp, #44	; 0x2c
 801cf94:	f7f6 f812 	bl	8012fbc <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cf98:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801cf9c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801cfa0:	3201      	adds	r2, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801cfa2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801cfa6:	1a52      	subs	r2, r2, r1
 801cfa8:	b292      	uxth	r2, r2
 801cfaa:	b211      	sxth	r1, r2
 801cfac:	428b      	cmp	r3, r1
 801cfae:	f340 80b3 	ble.w	801d118 <lv_label_refr_text+0x324>
 801cfb2:	2e00      	cmp	r6, #0
 801cfb4:	f040 80b0 	bne.w	801d118 <lv_label_refr_text+0x324>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801cfb8:	1ad2      	subs	r2, r2, r3
 801cfba:	893b      	ldrh	r3, [r7, #8]
    a->exec_cb = exec_cb;
 801cfbc:	4fb4      	ldr	r7, [pc, #720]	; (801d290 <lv_label_refr_text+0x49c>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cfbe:	4631      	mov	r1, r6
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801cfc0:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cfc2:	89a8      	ldrh	r0, [r5, #12]
 801cfc4:	970c      	str	r7, [sp, #48]	; 0x30
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801cfc6:	b212      	sxth	r2, r2
    a->current = start;
 801cfc8:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 801cfcc:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cfce:	f7f6 f847 	bl	8013060 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801cfd2:	4639      	mov	r1, r7
    a->time     = duration;
 801cfd4:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801cfd6:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801cfd8:	4620      	mov	r0, r4
 801cfda:	f7f6 f82b 	bl	8013034 <lv_anim_get>
            if(anim_cur) {
 801cfde:	b328      	cbz	r0, 801d02c <lv_label_refr_text+0x238>
                playback_now = anim_cur->playback_now;
 801cfe0:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
                act_time = anim_cur->act_time;
 801cfe4:	6a83      	ldr	r3, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
 801cfe6:	f006 0601 	and.w	r6, r6, #1
            if(act_time < a.time) {
 801cfea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cfec:	429a      	cmp	r2, r3
 801cfee:	dd11      	ble.n	801d014 <lv_label_refr_text+0x220>
                a.act_time = act_time;      /*To keep the old position*/
 801cff0:	9315      	str	r3, [sp, #84]	; 0x54
                a.early_apply = 0;
 801cff2:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 801cff6:	f36f 0300 	bfc	r3, #0, #1
 801cffa:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                if(playback_now) {
 801cffe:	b14e      	cbz	r6, 801d014 <lv_label_refr_text+0x220>
                    a.playback_now = 1;
 801d000:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
                    a.start = a.end;
 801d004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 801d006:	f043 0301 	orr.w	r3, r3, #1
 801d00a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
                    tmp      = a.start;
 801d00e:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    a.start = a.end;
 801d010:	9211      	str	r2, [sp, #68]	; 0x44
                    a.end   = tmp;
 801d012:	9313      	str	r3, [sp, #76]	; 0x4c
            lv_anim_start(&a);
 801d014:	a80b      	add	r0, sp, #44	; 0x2c
 801d016:	f7f5 ffd1 	bl	8012fbc <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801d01a:	e759      	b.n	801ced0 <lv_label_refr_text+0xdc>
            int32_t act_time = 0;
 801d01c:	4603      	mov	r3, r0
 801d01e:	e7a2      	b.n	801cf66 <lv_label_refr_text+0x172>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d020:	499c      	ldr	r1, [pc, #624]	; (801d294 <lv_label_refr_text+0x4a0>)
 801d022:	4620      	mov	r0, r4
 801d024:	f7f5 ffa2 	bl	8012f6c <lv_anim_del>
            ext->offset.x = 0;
 801d028:	81ee      	strh	r6, [r5, #14]
 801d02a:	e7b5      	b.n	801cf98 <lv_label_refr_text+0x1a4>
            int32_t act_time = 0;
 801d02c:	4633      	mov	r3, r6
 801d02e:	e7dc      	b.n	801cfea <lv_label_refr_text+0x1f6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 801d030:	f1b8 0f04 	cmp.w	r8, #4
 801d034:	d177      	bne.n	801d126 <lv_label_refr_text+0x332>
        lv_anim_init(&a);
 801d036:	a80b      	add	r0, sp, #44	; 0x2c
 801d038:	f7f5 ff78 	bl	8012f2c <lv_anim_init>
    a->repeat_cnt       = cnt;
 801d03c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d040:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d044:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 801d048:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var     = var;
 801d04c:	940b      	str	r4, [sp, #44]	; 0x2c
 801d04e:	3301      	adds	r3, #1
 801d050:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801d052:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d056:	b21b      	sxth	r3, r3
 801d058:	429a      	cmp	r2, r3
 801d05a:	dd56      	ble.n	801d10a <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801d05c:	2220      	movs	r2, #32
 801d05e:	4638      	mov	r0, r7
    a->exec_cb = exec_cb;
 801d060:	4e8c      	ldr	r6, [pc, #560]	; (801d294 <lv_label_refr_text+0x4a0>)
 801d062:	4611      	mov	r1, r2
 801d064:	f7f5 f990 	bl	8012388 <lv_font_get_glyph_width>
    a->start = start;
 801d068:	2100      	movs	r1, #0
 801d06a:	ebc0 3280 	rsb	r2, r0, r0, lsl #14
    a->exec_cb = exec_cb;
 801d06e:	960c      	str	r6, [sp, #48]	; 0x30
 801d070:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d074:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801d078:	1a12      	subs	r2, r2, r0
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801d07a:	89a8      	ldrh	r0, [r5, #12]
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801d07c:	b212      	sxth	r2, r2
    a->current = start;
 801d07e:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    a->end   = end;
 801d082:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801d084:	f7f5 ffec 	bl	8013060 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d088:	4631      	mov	r1, r6
    a->time     = duration;
 801d08a:	9014      	str	r0, [sp, #80]	; 0x50
 801d08c:	4620      	mov	r0, r4
 801d08e:	f7f5 ffd1 	bl	8013034 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801d092:	b100      	cbz	r0, 801d096 <lv_label_refr_text+0x2a2>
 801d094:	6a80      	ldr	r0, [r0, #40]	; 0x28
            if(act_time < a.time) {
 801d096:	9b14      	ldr	r3, [sp, #80]	; 0x50
            hor_anim = true;
 801d098:	2601      	movs	r6, #1
            if(act_time < a.time) {
 801d09a:	4283      	cmp	r3, r0
                a.early_apply = 0;
 801d09c:	bfc4      	itt	gt
 801d09e:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 801d0a2:	9015      	strgt	r0, [sp, #84]	; 0x54
            lv_anim_start(&a);
 801d0a4:	a80b      	add	r0, sp, #44	; 0x2c
                a.early_apply = 0;
 801d0a6:	bfc4      	itt	gt
 801d0a8:	f36f 0300 	bfcgt	r3, #0, #1
 801d0ac:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
            lv_anim_start(&a);
 801d0b0:	f7f5 ff84 	bl	8012fbc <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d0b4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d0b8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801d0bc:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801d0be:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d0c2:	1a5b      	subs	r3, r3, r1
 801d0c4:	b21b      	sxth	r3, r3
 801d0c6:	429a      	cmp	r2, r3
 801d0c8:	dd26      	ble.n	801d118 <lv_label_refr_text+0x324>
 801d0ca:	bb2e      	cbnz	r6, 801d118 <lv_label_refr_text+0x324>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801d0cc:	893b      	ldrh	r3, [r7, #8]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801d0ce:	4631      	mov	r1, r6
    a->exec_cb = exec_cb;
 801d0d0:	4f6f      	ldr	r7, [pc, #444]	; (801d290 <lv_label_refr_text+0x49c>)
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801d0d2:	441a      	add	r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801d0d4:	89a8      	ldrh	r0, [r5, #12]
 801d0d6:	970c      	str	r7, [sp, #48]	; 0x30
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801d0d8:	4252      	negs	r2, r2
 801d0da:	b212      	sxth	r2, r2
    a->current = start;
 801d0dc:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 801d0e0:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 801d0e2:	f7f5 ffbd 	bl	8013060 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801d0e6:	4639      	mov	r1, r7
    a->time     = duration;
 801d0e8:	9014      	str	r0, [sp, #80]	; 0x50
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	f7f5 ffa2 	bl	8013034 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801d0f0:	b100      	cbz	r0, 801d0f4 <lv_label_refr_text+0x300>
 801d0f2:	6a86      	ldr	r6, [r0, #40]	; 0x28
            if(act_time < a.time) {
 801d0f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d0f6:	42b3      	cmp	r3, r6
                a.early_apply = 0;
 801d0f8:	bfc1      	itttt	gt
 801d0fa:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 801d0fe:	9615      	strgt	r6, [sp, #84]	; 0x54
                a.early_apply = 0;
 801d100:	f36f 0300 	bfcgt	r3, #0, #1
 801d104:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 801d108:	e784      	b.n	801d014 <lv_label_refr_text+0x220>
            ext->offset.x = 0;
 801d10a:	2600      	movs	r6, #0
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d10c:	4961      	ldr	r1, [pc, #388]	; (801d294 <lv_label_refr_text+0x4a0>)
 801d10e:	4620      	mov	r0, r4
 801d110:	f7f5 ff2c 	bl	8012f6c <lv_anim_del>
            ext->offset.x = 0;
 801d114:	81ee      	strh	r6, [r5, #14]
 801d116:	e7cd      	b.n	801d0b4 <lv_label_refr_text+0x2c0>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801d118:	495d      	ldr	r1, [pc, #372]	; (801d290 <lv_label_refr_text+0x49c>)
 801d11a:	4620      	mov	r0, r4
 801d11c:	f7f5 ff26 	bl	8012f6c <lv_anim_del>
            ext->offset.y = 0;
 801d120:	2300      	movs	r3, #0
 801d122:	822b      	strh	r3, [r5, #16]
 801d124:	e6d4      	b.n	801ced0 <lv_label_refr_text+0xdc>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 801d126:	f1b8 0f02 	cmp.w	r8, #2
 801d12a:	f040 8096 	bne.w	801d25a <lv_label_refr_text+0x466>
 801d12e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d132:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801d136:	3301      	adds	r3, #1
 801d138:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 801d13a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d13e:	b21b      	sxth	r3, r3
 801d140:	429a      	cmp	r2, r3
 801d142:	dc03      	bgt.n	801d14c <lv_label_refr_text+0x358>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 801d144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d148:	60ab      	str	r3, [r5, #8]
 801d14a:	e6c1      	b.n	801ced0 <lv_label_refr_text+0xdc>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 801d14c:	4b52      	ldr	r3, [pc, #328]	; (801d298 <lv_label_refr_text+0x4a4>)
 801d14e:	6828      	ldr	r0, [r5, #0]
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	4798      	blx	r3
 801d154:	2803      	cmp	r0, #3
 801d156:	d9f5      	bls.n	801d144 <lv_label_refr_text+0x350>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d158:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 801d15c:	222e      	movs	r2, #46	; 0x2e
 801d15e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d162:	4638      	mov	r0, r7
 801d164:	f108 0801 	add.w	r8, r8, #1
 801d168:	4611      	mov	r1, r2
                _lv_txt_encoded_prev(ext->text, &byte_id);
 801d16a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801d2a8 <lv_label_refr_text+0x4b4>
 801d16e:	eba8 0803 	sub.w	r8, r8, r3
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 801d172:	f7f5 f909 	bl	8012388 <lv_font_get_glyph_width>
 801d176:	4448      	add	r0, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d178:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d17c:	fa1f f888 	uxth.w	r8, r8
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801d180:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
            p.x = lv_area_get_width(&txt_coords) -
 801d184:	ebc0 3980 	rsb	r9, r0, r0, lsl #14
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801d188:	1997      	adds	r7, r2, r6
            p.x = lv_area_get_width(&txt_coords) -
 801d18a:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801d18e:	4480      	add	r8, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d190:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 801d194:	3001      	adds	r0, #1
 801d196:	f8ad 8020 	strh.w	r8, [sp, #32]
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801d19a:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 801d19e:	1ac0      	subs	r0, r0, r3
 801d1a0:	b280      	uxth	r0, r0
 801d1a2:	b201      	sxth	r1, r0
            y_overed = p.y %
 801d1a4:	fb91 f3f7 	sdiv	r3, r1, r7
 801d1a8:	fb07 1313 	mls	r3, r7, r3, r1
            p.y = lv_area_get_height(&txt_coords);
 801d1ac:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_overed >= lv_font_get_line_height(font)) {
 801d1b0:	b219      	sxth	r1, r3
 801d1b2:	4291      	cmp	r1, r2
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801d1b4:	a908      	add	r1, sp, #32
                p.y -= y_overed;
 801d1b6:	bfb5      	itete	lt
 801d1b8:	1ac0      	sublt	r0, r0, r3
                p.y += lv_font_get_line_height(font);
 801d1ba:	1880      	addge	r0, r0, r2
                p.y -= line_space;
 801d1bc:	1b80      	sublt	r0, r0, r6
                p.y += lv_font_get_line_height(font);
 801d1be:	1ac0      	subge	r0, r0, r3
                p.y -= line_space;
 801d1c0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	f7ff fbc3 	bl	801c950 <lv_label_get_letter_on>
            size_t txt_len = strlen(ext->text);
 801d1ca:	682f      	ldr	r7, [r5, #0]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 801d1cc:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
 801d1ce:	4638      	mov	r0, r7
 801d1d0:	f7e3 f828 	bl	8000224 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801d1d4:	4b31      	ldr	r3, [pc, #196]	; (801d29c <lv_label_refr_text+0x4a8>)
            size_t txt_len = strlen(ext->text);
 801d1d6:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 801d1d8:	4631      	mov	r1, r6
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	4638      	mov	r0, r7
 801d1de:	4798      	blx	r3
 801d1e0:	f848 0d44 	str.w	r0, [r8, #-68]!
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 801d1e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d1e6:	6828      	ldr	r0, [r5, #0]
 801d1e8:	f107 0b03 	add.w	fp, r7, #3
 801d1ec:	45cb      	cmp	fp, r9
 801d1ee:	d82e      	bhi.n	801d24e <lv_label_refr_text+0x45a>
 801d1f0:	f04f 0a04 	mov.w	sl, #4
            uint8_t len          = 0;
 801d1f4:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 801d1f8:	4b29      	ldr	r3, [pc, #164]	; (801d2a0 <lv_label_refr_text+0x4ac>)
 801d1fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d1fc:	6828      	ldr	r0, [r5, #0]
 801d1fe:	681a      	ldr	r2, [r3, #0]
 801d200:	4408      	add	r0, r1
 801d202:	9305      	str	r3, [sp, #20]
 801d204:	4790      	blx	r2
                _lv_txt_encoded_next(ext->text, &byte_id);
 801d206:	4b27      	ldr	r3, [pc, #156]	; (801d2a4 <lv_label_refr_text+0x4b0>)
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 801d208:	4481      	add	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
 801d20a:	4641      	mov	r1, r8
 801d20c:	681a      	ldr	r2, [r3, #0]
 801d20e:	6828      	ldr	r0, [r5, #0]
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 801d210:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
 801d214:	4790      	blx	r2
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801d216:	f1ba 0a01 	subs.w	sl, sl, #1
 801d21a:	9b05      	ldr	r3, [sp, #20]
 801d21c:	d1ed      	bne.n	801d1fa <lv_label_refr_text+0x406>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 801d21e:	6829      	ldr	r1, [r5, #0]
 801d220:	464a      	mov	r2, r9
 801d222:	4620      	mov	r0, r4
 801d224:	4439      	add	r1, r7
 801d226:	f7ff fab7 	bl	801c798 <lv_label_set_dot_tmp>
 801d22a:	2800      	cmp	r0, #0
 801d22c:	f43f ae50 	beq.w	801ced0 <lv_label_refr_text+0xdc>
                    ext->text[byte_id_ori + i] = '.';
 801d230:	682b      	ldr	r3, [r5, #0]
 801d232:	222e      	movs	r2, #46	; 0x2e
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801d234:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
 801d236:	55da      	strb	r2, [r3, r7]
 801d238:	682b      	ldr	r3, [r5, #0]
 801d23a:	443b      	add	r3, r7
 801d23c:	705a      	strb	r2, [r3, #1]
 801d23e:	682b      	ldr	r3, [r5, #0]
 801d240:	441f      	add	r7, r3
 801d242:	70ba      	strb	r2, [r7, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801d244:	682b      	ldr	r3, [r5, #0]
 801d246:	f803 a00b 	strb.w	sl, [r3, fp]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801d24a:	60ae      	str	r6, [r5, #8]
 801d24c:	e640      	b.n	801ced0 <lv_label_refr_text+0xdc>
                _lv_txt_encoded_prev(ext->text, &byte_id);
 801d24e:	f8da 3000 	ldr.w	r3, [sl]
 801d252:	4641      	mov	r1, r8
 801d254:	4798      	blx	r3
                letter_id--;
 801d256:	3e01      	subs	r6, #1
 801d258:	e7c4      	b.n	801d1e4 <lv_label_refr_text+0x3f0>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 801d25a:	f1b8 0f01 	cmp.w	r8, #1
 801d25e:	f47f ae37 	bne.w	801ced0 <lv_label_refr_text+0xdc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d262:	2210      	movs	r2, #16
 801d264:	2100      	movs	r1, #0
 801d266:	4620      	mov	r0, r4
 801d268:	f7eb fc20 	bl	8008aac <_lv_obj_get_style_int>
 801d26c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d26e:	2211      	movs	r2, #17
 801d270:	2100      	movs	r1, #0
 801d272:	4620      	mov	r0, r4
 801d274:	f7eb fc1a 	bl	8008aac <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 801d278:	1829      	adds	r1, r5, r0
 801d27a:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801d27e:	4401      	add	r1, r0
        lv_obj_set_height(label, size.y);
 801d280:	4620      	mov	r0, r4
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 801d282:	b209      	sxth	r1, r1
 801d284:	f8ad 101e 	strh.w	r1, [sp, #30]
        lv_obj_set_height(label, size.y);
 801d288:	f7eb fb90 	bl	80089ac <lv_obj_set_height>
 801d28c:	e620      	b.n	801ced0 <lv_label_refr_text+0xdc>
 801d28e:	bf00      	nop
 801d290:	0801c7e9 	.word	0x0801c7e9
 801d294:	0801c7ff 	.word	0x0801c7ff
 801d298:	200000b0 	.word	0x200000b0
 801d29c:	200000ac 	.word	0x200000ac
 801d2a0:	200000a4 	.word	0x200000a4
 801d2a4:	200000a8 	.word	0x200000a8
 801d2a8:	200000b8 	.word	0x200000b8

0801d2ac <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801d2ac:	2908      	cmp	r1, #8
{
 801d2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	460f      	mov	r7, r1
 801d2b6:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801d2b8:	d114      	bne.n	801d2e4 <lv_label_signal+0x38>
    switch(type) {
 801d2ba:	7813      	ldrb	r3, [r2, #0]
 801d2bc:	b14b      	cbz	r3, 801d2d2 <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
 801d2be:	2300      	movs	r3, #0
 801d2c0:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
 801d2c2:	4b2a      	ldr	r3, [pc, #168]	; (801d36c <lv_label_signal+0xc0>)
 801d2c4:	462a      	mov	r2, r5
 801d2c6:	4620      	mov	r0, r4
 801d2c8:	2108      	movs	r1, #8
 801d2ca:	681b      	ldr	r3, [r3, #0]
}
 801d2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
 801d2d0:	4718      	bx	r3
            style_dsc_p = &label->style_list;
 801d2d2:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
 801d2d6:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d0f2      	beq.n	801d2c2 <lv_label_signal+0x16>
 801d2dc:	2601      	movs	r6, #1
}
 801d2de:	4630      	mov	r0, r6
 801d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
 801d2e4:	4b21      	ldr	r3, [pc, #132]	; (801d36c <lv_label_signal+0xc0>)
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801d2ea:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 801d2ec:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801d2ee:	d1f6      	bne.n	801d2de <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801d2f0:	2f07      	cmp	r7, #7
 801d2f2:	d105      	bne.n	801d300 <lv_label_signal+0x54>
 801d2f4:	4628      	mov	r0, r5
 801d2f6:	491e      	ldr	r1, [pc, #120]	; (801d370 <lv_label_signal+0xc4>)
}
 801d2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801d2fc:	f7ec ba88 	b.w	8009810 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d300:	4620      	mov	r0, r4
 801d302:	f7ec f97b 	bl	80095fc <lv_obj_get_ext_attr>
 801d306:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 801d308:	b967      	cbnz	r7, 801d324 <lv_label_signal+0x78>
        if(ext->static_txt == 0) {
 801d30a:	7c83      	ldrb	r3, [r0, #18]
 801d30c:	f013 0508 	ands.w	r5, r3, #8
 801d310:	d104      	bne.n	801d31c <lv_label_signal+0x70>
            lv_mem_free(ext->text);
 801d312:	6800      	ldr	r0, [r0, #0]
 801d314:	f7f6 fc66 	bl	8013be4 <lv_mem_free>
            ext->text = NULL;
 801d318:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
 801d31c:	4620      	mov	r0, r4
 801d31e:	f7ff f9f1 	bl	801c704 <lv_label_dot_tmp_free>
 801d322:	e7dc      	b.n	801d2de <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 801d324:	2f04      	cmp	r7, #4
 801d326:	d106      	bne.n	801d336 <lv_label_signal+0x8a>
        lv_label_revert_dots(label);
 801d328:	4620      	mov	r0, r4
 801d32a:	f7ff f9fd 	bl	801c728 <lv_label_revert_dots>
        lv_label_refr_text(label);
 801d32e:	4620      	mov	r0, r4
 801d330:	f7ff fd60 	bl	801cdf4 <lv_label_refr_text>
 801d334:	e7d3      	b.n	801d2de <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 801d336:	2f02      	cmp	r7, #2
 801d338:	d1d0      	bne.n	801d2dc <lv_label_signal+0x30>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d33a:	8aa2      	ldrh	r2, [r4, #20]
 801d33c:	8a23      	ldrh	r3, [r4, #16]
 801d33e:	3201      	adds	r2, #1
 801d340:	8829      	ldrh	r1, [r5, #0]
 801d342:	1ad2      	subs	r2, r2, r3
 801d344:	88ab      	ldrh	r3, [r5, #4]
 801d346:	3301      	adds	r3, #1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801d348:	b292      	uxth	r2, r2
 801d34a:	1a5b      	subs	r3, r3, r1
 801d34c:	b29b      	uxth	r3, r3
 801d34e:	429a      	cmp	r2, r3
 801d350:	d1ea      	bne.n	801d328 <lv_label_signal+0x7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d352:	8ae2      	ldrh	r2, [r4, #22]
 801d354:	8a63      	ldrh	r3, [r4, #18]
 801d356:	3201      	adds	r2, #1
 801d358:	8869      	ldrh	r1, [r5, #2]
 801d35a:	1ad2      	subs	r2, r2, r3
 801d35c:	88eb      	ldrh	r3, [r5, #6]
 801d35e:	3301      	adds	r3, #1
 801d360:	b292      	uxth	r2, r2
 801d362:	1a5b      	subs	r3, r3, r1
 801d364:	b29b      	uxth	r3, r3
 801d366:	429a      	cmp	r2, r3
 801d368:	d1de      	bne.n	801d328 <lv_label_signal+0x7c>
 801d36a:	e7b7      	b.n	801d2dc <lv_label_signal+0x30>
 801d36c:	2002892c 	.word	0x2002892c
 801d370:	0802c443 	.word	0x0802c443

0801d374 <lv_label_set_text>:
{
 801d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d376:	4606      	mov	r6, r0
 801d378:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801d37a:	f7f6 f93d 	bl	80135f8 <lv_debug_check_null>
 801d37e:	4603      	mov	r3, r0
 801d380:	b920      	cbnz	r0, 801d38c <lv_label_set_text+0x18>
 801d382:	4632      	mov	r2, r6
 801d384:	482b      	ldr	r0, [pc, #172]	; (801d434 <lv_label_set_text+0xc0>)
 801d386:	f7f6 f93b 	bl	8013600 <lv_debug_log_error>
 801d38a:	e7fe      	b.n	801d38a <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
 801d38c:	4630      	mov	r0, r6
 801d38e:	f7ea fe0d 	bl	8007fac <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d392:	4630      	mov	r0, r6
 801d394:	f7ec f932 	bl	80095fc <lv_obj_get_ext_attr>
 801d398:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
 801d39a:	b905      	cbnz	r5, 801d39e <lv_label_set_text+0x2a>
 801d39c:	6805      	ldr	r5, [r0, #0]
    LV_ASSERT_STR(text);
 801d39e:	4628      	mov	r0, r5
 801d3a0:	f7f6 f92a 	bl	80135f8 <lv_debug_check_null>
 801d3a4:	4603      	mov	r3, r0
 801d3a6:	b920      	cbnz	r0, 801d3b2 <lv_label_set_text+0x3e>
 801d3a8:	462a      	mov	r2, r5
 801d3aa:	4822      	ldr	r0, [pc, #136]	; (801d434 <lv_label_set_text+0xc0>)
 801d3ac:	f7f6 f928 	bl	8013600 <lv_debug_log_error>
 801d3b0:	e7fe      	b.n	801d3b0 <lv_label_set_text+0x3c>
    if(ext->text == text && ext->static_txt == 0) {
 801d3b2:	6820      	ldr	r0, [r4, #0]
 801d3b4:	42a8      	cmp	r0, r5
 801d3b6:	d115      	bne.n	801d3e4 <lv_label_set_text+0x70>
 801d3b8:	4628      	mov	r0, r5
 801d3ba:	f7e2 ff33 	bl	8000224 <strlen>
 801d3be:	7ca3      	ldrb	r3, [r4, #18]
 801d3c0:	1c41      	adds	r1, r0, #1
 801d3c2:	071b      	lsls	r3, r3, #28
 801d3c4:	d416      	bmi.n	801d3f4 <lv_label_set_text+0x80>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 801d3c6:	4628      	mov	r0, r5
 801d3c8:	f7f6 fd86 	bl	8013ed8 <lv_mem_realloc>
 801d3cc:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
 801d3ce:	f7f6 f913 	bl	80135f8 <lv_debug_check_null>
 801d3d2:	6822      	ldr	r2, [r4, #0]
 801d3d4:	4603      	mov	r3, r0
 801d3d6:	b918      	cbnz	r0, 801d3e0 <lv_label_set_text+0x6c>
 801d3d8:	4817      	ldr	r0, [pc, #92]	; (801d438 <lv_label_set_text+0xc4>)
 801d3da:	f7f6 f911 	bl	8013600 <lv_debug_log_error>
 801d3de:	e7fe      	b.n	801d3de <lv_label_set_text+0x6a>
        if(ext->text == NULL) return;
 801d3e0:	bb12      	cbnz	r2, 801d428 <lv_label_set_text+0xb4>
}
 801d3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
 801d3e4:	b130      	cbz	r0, 801d3f4 <lv_label_set_text+0x80>
 801d3e6:	7ca3      	ldrb	r3, [r4, #18]
 801d3e8:	f013 0708 	ands.w	r7, r3, #8
 801d3ec:	d102      	bne.n	801d3f4 <lv_label_set_text+0x80>
            lv_mem_free(ext->text);
 801d3ee:	f7f6 fbf9 	bl	8013be4 <lv_mem_free>
            ext->text = NULL;
 801d3f2:	6027      	str	r7, [r4, #0]
        size_t len = strlen(text) + 1;
 801d3f4:	4628      	mov	r0, r5
 801d3f6:	f7e2 ff15 	bl	8000224 <strlen>
        ext->text = lv_mem_alloc(len);
 801d3fa:	3001      	adds	r0, #1
 801d3fc:	f7f6 fba4 	bl	8013b48 <lv_mem_alloc>
 801d400:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
 801d402:	f7f6 f8f9 	bl	80135f8 <lv_debug_check_null>
 801d406:	6822      	ldr	r2, [r4, #0]
 801d408:	4603      	mov	r3, r0
 801d40a:	b918      	cbnz	r0, 801d414 <lv_label_set_text+0xa0>
 801d40c:	480a      	ldr	r0, [pc, #40]	; (801d438 <lv_label_set_text+0xc4>)
 801d40e:	f7f6 f8f7 	bl	8013600 <lv_debug_log_error>
 801d412:	e7fe      	b.n	801d412 <lv_label_set_text+0x9e>
        if(ext->text == NULL) return;
 801d414:	2a00      	cmp	r2, #0
 801d416:	d0e4      	beq.n	801d3e2 <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
 801d418:	4629      	mov	r1, r5
 801d41a:	4610      	mov	r0, r2
 801d41c:	f001 fb84 	bl	801eb28 <strcpy>
        ext->static_txt = 0;
 801d420:	7ca3      	ldrb	r3, [r4, #18]
 801d422:	f36f 03c3 	bfc	r3, #3, #1
 801d426:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
 801d428:	4630      	mov	r0, r6
}
 801d42a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 801d42e:	f7ff bce1 	b.w	801cdf4 <lv_label_refr_text>
 801d432:	bf00      	nop
 801d434:	0802c354 	.word	0x0802c354
 801d438:	0802c346 	.word	0x0802c346

0801d43c <lv_label_set_text_static>:
{
 801d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d43e:	4606      	mov	r6, r0
 801d440:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801d442:	f7f6 f8d9 	bl	80135f8 <lv_debug_check_null>
 801d446:	4603      	mov	r3, r0
 801d448:	b920      	cbnz	r0, 801d454 <lv_label_set_text_static+0x18>
 801d44a:	4632      	mov	r2, r6
 801d44c:	480d      	ldr	r0, [pc, #52]	; (801d484 <lv_label_set_text_static+0x48>)
 801d44e:	f7f6 f8d7 	bl	8013600 <lv_debug_log_error>
 801d452:	e7fe      	b.n	801d452 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d454:	4630      	mov	r0, r6
 801d456:	f7ec f8d1 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 801d45a:	7c83      	ldrb	r3, [r0, #18]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d45c:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 801d45e:	f013 0508 	ands.w	r5, r3, #8
 801d462:	d104      	bne.n	801d46e <lv_label_set_text_static+0x32>
 801d464:	6800      	ldr	r0, [r0, #0]
 801d466:	b110      	cbz	r0, 801d46e <lv_label_set_text_static+0x32>
        lv_mem_free(ext->text);
 801d468:	f7f6 fbbc 	bl	8013be4 <lv_mem_free>
        ext->text = NULL;
 801d46c:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 801d46e:	b127      	cbz	r7, 801d47a <lv_label_set_text_static+0x3e>
        ext->static_txt = 1;
 801d470:	7ca3      	ldrb	r3, [r4, #18]
        ext->text       = (char *)text;
 801d472:	6027      	str	r7, [r4, #0]
        ext->static_txt = 1;
 801d474:	f043 0308 	orr.w	r3, r3, #8
 801d478:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
 801d47a:	4630      	mov	r0, r6
}
 801d47c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 801d480:	f7ff bcb8 	b.w	801cdf4 <lv_label_refr_text>
 801d484:	0802c354 	.word	0x0802c354

0801d488 <lv_label_set_long_mode>:
{
 801d488:	b570      	push	{r4, r5, r6, lr}
 801d48a:	4605      	mov	r5, r0
 801d48c:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801d48e:	f7f6 f8b3 	bl	80135f8 <lv_debug_check_null>
 801d492:	4603      	mov	r3, r0
 801d494:	b920      	cbnz	r0, 801d4a0 <lv_label_set_long_mode+0x18>
 801d496:	462a      	mov	r2, r5
 801d498:	481c      	ldr	r0, [pc, #112]	; (801d50c <lv_label_set_long_mode+0x84>)
 801d49a:	f7f6 f8b1 	bl	8013600 <lv_debug_log_error>
 801d49e:	e7fe      	b.n	801d49e <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d4a0:	4628      	mov	r0, r5
 801d4a2:	f7ec f8ab 	bl	80095fc <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801d4a6:	491a      	ldr	r1, [pc, #104]	; (801d510 <lv_label_set_long_mode+0x88>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d4a8:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801d4aa:	4628      	mov	r0, r5
 801d4ac:	f7f5 fd5e 	bl	8012f6c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 801d4b0:	4918      	ldr	r1, [pc, #96]	; (801d514 <lv_label_set_long_mode+0x8c>)
 801d4b2:	4628      	mov	r0, r5
 801d4b4:	f7f5 fd5a 	bl	8012f6c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801d4b8:	4917      	ldr	r1, [pc, #92]	; (801d518 <lv_label_set_long_mode+0x90>)
 801d4ba:	4628      	mov	r0, r5
 801d4bc:	f7f5 fd56 	bl	8012f6c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 801d4c0:	4916      	ldr	r1, [pc, #88]	; (801d51c <lv_label_set_long_mode+0x94>)
 801d4c2:	4628      	mov	r0, r5
 801d4c4:	f7f5 fd52 	bl	8012f6c <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 801d4c8:	1ef3      	subs	r3, r6, #3
    ext->offset.x = 0;
 801d4ca:	2200      	movs	r2, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 801d4cc:	2b02      	cmp	r3, #2
 801d4ce:	7ca3      	ldrb	r3, [r4, #18]
    ext->offset.x = 0;
 801d4d0:	81e2      	strh	r2, [r4, #14]
        ext->expand = 1;
 801d4d2:	bf94      	ite	ls
 801d4d4:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 801d4d8:	f362 13c7 	bfihi	r3, r2, #7, #1
    ext->offset.y = 0;
 801d4dc:	8222      	strh	r2, [r4, #16]
        ext->expand = 0;
 801d4de:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801d4e0:	7ca3      	ldrb	r3, [r4, #18]
 801d4e2:	f003 0307 	and.w	r3, r3, #7
 801d4e6:	2b02      	cmp	r3, #2
 801d4e8:	d107      	bne.n	801d4fa <lv_label_set_long_mode+0x72>
 801d4ea:	68a2      	ldr	r2, [r4, #8]
 801d4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	d002      	beq.n	801d4fa <lv_label_set_long_mode+0x72>
        lv_label_revert_dots(label);
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	f7ff f917 	bl	801c728 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 801d4fa:	7ca3      	ldrb	r3, [r4, #18]
    lv_label_refr_text(label);
 801d4fc:	4628      	mov	r0, r5
    ext->long_mode = long_mode;
 801d4fe:	f366 0302 	bfi	r3, r6, #0, #3
 801d502:	74a3      	strb	r3, [r4, #18]
}
 801d504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 801d508:	f7ff bc74 	b.w	801cdf4 <lv_label_refr_text>
 801d50c:	0802c354 	.word	0x0802c354
 801d510:	08008109 	.word	0x08008109
 801d514:	08008139 	.word	0x08008139
 801d518:	0801c7ff 	.word	0x0801c7ff
 801d51c:	0801c7e9 	.word	0x0801c7e9

0801d520 <lv_label_set_recolor>:
{
 801d520:	b538      	push	{r3, r4, r5, lr}
 801d522:	4604      	mov	r4, r0
 801d524:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801d526:	f7f6 f867 	bl	80135f8 <lv_debug_check_null>
 801d52a:	4603      	mov	r3, r0
 801d52c:	b920      	cbnz	r0, 801d538 <lv_label_set_recolor+0x18>
 801d52e:	4622      	mov	r2, r4
 801d530:	480a      	ldr	r0, [pc, #40]	; (801d55c <lv_label_set_recolor+0x3c>)
 801d532:	f7f6 f865 	bl	8013600 <lv_debug_log_error>
 801d536:	e7fe      	b.n	801d536 <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801d538:	4620      	mov	r0, r4
 801d53a:	f7ec f85f 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 801d53e:	7c83      	ldrb	r3, [r0, #18]
 801d540:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801d544:	42aa      	cmp	r2, r5
 801d546:	d007      	beq.n	801d558 <lv_label_set_recolor+0x38>
    ext->recolor = en == false ? 0 : 1;
 801d548:	f365 1386 	bfi	r3, r5, #6, #1
 801d54c:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
 801d54e:	4620      	mov	r0, r4
}
 801d550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
 801d554:	f7ff bc4e 	b.w	801cdf4 <lv_label_refr_text>
}
 801d558:	bd38      	pop	{r3, r4, r5, pc}
 801d55a:	bf00      	nop
 801d55c:	0802c354 	.word	0x0802c354

0801d560 <lv_label_create>:
{
 801d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d564:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801d566:	f7ea ffe7 	bl	8008538 <lv_obj_create>
 801d56a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
 801d56c:	f7f6 f844 	bl	80135f8 <lv_debug_check_null>
 801d570:	4603      	mov	r3, r0
 801d572:	b920      	cbnz	r0, 801d57e <lv_label_create+0x1e>
 801d574:	4622      	mov	r2, r4
 801d576:	4862      	ldr	r0, [pc, #392]	; (801d700 <lv_label_create+0x1a0>)
 801d578:	f7f6 f842 	bl	8013600 <lv_debug_log_error>
 801d57c:	e7fe      	b.n	801d57c <lv_label_create+0x1c>
    if(new_label == NULL) return NULL;
 801d57e:	b91c      	cbnz	r4, 801d588 <lv_label_create+0x28>
 801d580:	2400      	movs	r4, #0
}
 801d582:	4620      	mov	r0, r4
 801d584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 801d588:	4d5e      	ldr	r5, [pc, #376]	; (801d704 <lv_label_create+0x1a4>)
 801d58a:	682b      	ldr	r3, [r5, #0]
 801d58c:	b91b      	cbnz	r3, 801d596 <lv_label_create+0x36>
 801d58e:	4620      	mov	r0, r4
 801d590:	f7ec f814 	bl	80095bc <lv_obj_get_signal_cb>
 801d594:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801d596:	2114      	movs	r1, #20
 801d598:	4620      	mov	r0, r4
 801d59a:	f7ea fad1 	bl	8007b40 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 801d59e:	4620      	mov	r0, r4
 801d5a0:	f7ec f82c 	bl	80095fc <lv_obj_get_ext_attr>
 801d5a4:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801d5a6:	f7f6 f827 	bl	80135f8 <lv_debug_check_null>
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	b920      	cbnz	r0, 801d5b8 <lv_label_create+0x58>
 801d5ae:	462a      	mov	r2, r5
 801d5b0:	4853      	ldr	r0, [pc, #332]	; (801d700 <lv_label_create+0x1a0>)
 801d5b2:	f7f6 f825 	bl	8013600 <lv_debug_log_error>
 801d5b6:	e7fe      	b.n	801d5b6 <lv_label_create+0x56>
 801d5b8:	2300      	movs	r3, #0
    if(ext == NULL) {
 801d5ba:	b91d      	cbnz	r5, 801d5c4 <lv_label_create+0x64>
        lv_obj_del(new_label);
 801d5bc:	4620      	mov	r0, r4
 801d5be:	f7ec f8a1 	bl	8009704 <lv_obj_del>
 801d5c2:	e7dd      	b.n	801d580 <lv_label_create+0x20>
    ext->static_txt = 0;
 801d5c4:	7caa      	ldrb	r2, [r5, #18]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801d5c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    lv_obj_set_design_cb(new_label, lv_label_design);
 801d5ca:	4620      	mov	r0, r4
    ext->text       = NULL;
 801d5cc:	602b      	str	r3, [r5, #0]
    ext->align      = LV_LABEL_ALIGN_AUTO;
 801d5ce:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801d5d2:	60a9      	str	r1, [r5, #8]
    ext->offset.x = 0;
 801d5d4:	81eb      	strh	r3, [r5, #14]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801d5d6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    lv_obj_set_design_cb(new_label, lv_label_design);
 801d5da:	494b      	ldr	r1, [pc, #300]	; (801d708 <lv_label_create+0x1a8>)
    ext->offset.y = 0;
 801d5dc:	822b      	strh	r3, [r5, #16]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801d5de:	f363 0202 	bfi	r2, r3, #0, #3
    ext->dot.tmp_ptr   = NULL;
 801d5e2:	606b      	str	r3, [r5, #4]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 801d5e4:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801d5e6:	2219      	movs	r2, #25
 801d5e8:	81aa      	strh	r2, [r5, #12]
    ext->dot_tmp_alloc = 0;
 801d5ea:	7cea      	ldrb	r2, [r5, #19]
 801d5ec:	f363 0200 	bfi	r2, r3, #0, #1
 801d5f0:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
 801d5f2:	f7ea fa95 	bl	8007b20 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 801d5f6:	4945      	ldr	r1, [pc, #276]	; (801d70c <lv_label_create+0x1ac>)
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	f7ea fa7b 	bl	8007af4 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 801d5fe:	b987      	cbnz	r7, 801d622 <lv_label_create+0xc2>
        lv_theme_apply(new_label, LV_THEME_LABEL);
 801d600:	4620      	mov	r0, r4
 801d602:	2112      	movs	r1, #18
 801d604:	f7f7 fdd6 	bl	80151b4 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
 801d608:	4639      	mov	r1, r7
 801d60a:	4620      	mov	r0, r4
 801d60c:	f7ea f9ba 	bl	8007984 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 801d610:	4639      	mov	r1, r7
 801d612:	4620      	mov	r0, r4
 801d614:	f7ff ff38 	bl	801d488 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 801d618:	493d      	ldr	r1, [pc, #244]	; (801d710 <lv_label_create+0x1b0>)
 801d61a:	4620      	mov	r0, r4
 801d61c:	f7ff feaa 	bl	801d374 <lv_label_set_text>
 801d620:	e7af      	b.n	801d582 <lv_label_create+0x22>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801d622:	4638      	mov	r0, r7
 801d624:	f7eb ffea 	bl	80095fc <lv_obj_get_ext_attr>
 801d628:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 801d62a:	4638      	mov	r0, r7
 801d62c:	f7ff f950 	bl	801c8d0 <lv_label_get_long_mode>
 801d630:	4601      	mov	r1, r0
 801d632:	4620      	mov	r0, r4
 801d634:	f7ff ff28 	bl	801d488 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 801d638:	4638      	mov	r0, r7
 801d63a:	f7ff f975 	bl	801c928 <lv_label_get_recolor>
 801d63e:	4601      	mov	r1, r0
 801d640:	4620      	mov	r0, r4
 801d642:	f7ff ff6d 	bl	801d520 <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 801d646:	4638      	mov	r0, r7
 801d648:	f7ff f956 	bl	801c8f8 <lv_label_get_align>
 801d64c:	4601      	mov	r1, r0
 801d64e:	4620      	mov	r0, r4
 801d650:	f7ff f90c 	bl	801c86c <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 801d654:	7cb3      	ldrb	r3, [r6, #18]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801d656:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
 801d658:	071a      	lsls	r2, r3, #28
 801d65a:	d41d      	bmi.n	801d698 <lv_label_create+0x138>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 801d65c:	f7ff f926 	bl	801c8ac <lv_label_get_text>
 801d660:	4601      	mov	r1, r0
 801d662:	4620      	mov	r0, r4
 801d664:	f7ff fe86 	bl	801d374 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 801d668:	7cb3      	ldrb	r3, [r6, #18]
 801d66a:	f003 0307 	and.w	r3, r3, #7
 801d66e:	2b02      	cmp	r3, #2
 801d670:	d126      	bne.n	801d6c0 <lv_label_create+0x160>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
 801d672:	682f      	ldr	r7, [r5, #0]
 801d674:	6830      	ldr	r0, [r6, #0]
 801d676:	f7f6 fae5 	bl	8013c44 <_lv_mem_get_size>
 801d67a:	4601      	mov	r1, r0
 801d67c:	4638      	mov	r0, r7
 801d67e:	f7f6 fc2b 	bl	8013ed8 <lv_mem_realloc>
 801d682:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
 801d684:	f7f5 ffb8 	bl	80135f8 <lv_debug_check_null>
 801d688:	682f      	ldr	r7, [r5, #0]
 801d68a:	4603      	mov	r3, r0
 801d68c:	b958      	cbnz	r0, 801d6a6 <lv_label_create+0x146>
 801d68e:	463a      	mov	r2, r7
 801d690:	481b      	ldr	r0, [pc, #108]	; (801d700 <lv_label_create+0x1a0>)
 801d692:	f7f5 ffb5 	bl	8013600 <lv_debug_log_error>
 801d696:	e7fe      	b.n	801d696 <lv_label_create+0x136>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
 801d698:	f7ff f908 	bl	801c8ac <lv_label_get_text>
 801d69c:	4601      	mov	r1, r0
 801d69e:	4620      	mov	r0, r4
 801d6a0:	f7ff fecc 	bl	801d43c <lv_label_set_text_static>
 801d6a4:	e7e0      	b.n	801d668 <lv_label_create+0x108>
            if(ext->text == NULL) return NULL;
 801d6a6:	2f00      	cmp	r7, #0
 801d6a8:	f43f af6a 	beq.w	801d580 <lv_label_create+0x20>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
 801d6ac:	f8d6 8000 	ldr.w	r8, [r6]
 801d6b0:	4640      	mov	r0, r8
 801d6b2:	f7f6 fac7 	bl	8013c44 <_lv_mem_get_size>
 801d6b6:	4641      	mov	r1, r8
 801d6b8:	4602      	mov	r2, r0
 801d6ba:	4638      	mov	r0, r7
 801d6bc:	f7f6 fb1c 	bl	8013cf8 <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801d6c0:	7cf3      	ldrb	r3, [r6, #19]
 801d6c2:	07db      	lsls	r3, r3, #31
 801d6c4:	d515      	bpl.n	801d6f2 <lv_label_create+0x192>
 801d6c6:	6870      	ldr	r0, [r6, #4]
 801d6c8:	b198      	cbz	r0, 801d6f2 <lv_label_create+0x192>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
 801d6ca:	f7e2 fdab 	bl	8000224 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 801d6ce:	6869      	ldr	r1, [r5, #4]
 801d6d0:	4602      	mov	r2, r0
 801d6d2:	4620      	mov	r0, r4
 801d6d4:	f7ff f860 	bl	801c798 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801d6d8:	7cf2      	ldrb	r2, [r6, #19]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801d6da:	4620      	mov	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801d6dc:	7ceb      	ldrb	r3, [r5, #19]
 801d6de:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801d6e2:	22ff      	movs	r2, #255	; 0xff
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801d6e4:	74eb      	strb	r3, [r5, #19]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801d6e6:	4611      	mov	r1, r2
        ext->dot_end       = copy_ext->dot_end;
 801d6e8:	68b3      	ldr	r3, [r6, #8]
 801d6ea:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801d6ec:	f7eb fe10 	bl	8009310 <lv_obj_refresh_style>
 801d6f0:	e747      	b.n	801d582 <lv_label_create+0x22>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 801d6f2:	2204      	movs	r2, #4
 801d6f4:	18b1      	adds	r1, r6, r2
 801d6f6:	18a8      	adds	r0, r5, r2
 801d6f8:	f7f6 fafe 	bl	8013cf8 <_lv_memcpy>
 801d6fc:	e7ec      	b.n	801d6d8 <lv_label_create+0x178>
 801d6fe:	bf00      	nop
 801d700:	0802c346 	.word	0x0802c346
 801d704:	2002892c 	.word	0x2002892c
 801d708:	0801cbd9 	.word	0x0801cbd9
 801d70c:	0801d2ad 	.word	0x0801d2ad
 801d710:	0802c44c 	.word	0x0802c44c

0801d714 <lv_msgbox_close_ready_cb>:
}

#if LV_USE_ANIMATION
static void lv_msgbox_close_ready_cb(lv_anim_t * a)
{
    lv_obj_del(a->var);
 801d714:	6800      	ldr	r0, [r0, #0]
 801d716:	f7eb bff5 	b.w	8009704 <lv_obj_del>

0801d71a <lv_msgbox_btnm_event_cb>:

    lv_msgbox_start_auto_close(mbox, 0);
}

static void lv_msgbox_btnm_event_cb(lv_obj_t * btnm, lv_event_t event)
{
 801d71a:	b538      	push	{r3, r4, r5, lr}
 801d71c:	460c      	mov	r4, r1
    lv_obj_t * mbox = lv_obj_get_parent(btnm);
 801d71e:	f7ea fa35 	bl	8007b8c <lv_obj_get_parent>
 801d722:	4605      	mov	r5, r0

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 801d724:	2c07      	cmp	r4, #7
 801d726:	d901      	bls.n	801d72c <lv_msgbox_btnm_event_cb+0x12>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
 801d728:	2c10      	cmp	r4, #16
 801d72a:	d108      	bne.n	801d73e <lv_msgbox_btnm_event_cb+0x24>
       event == LV_EVENT_VALUE_CHANGED) {
        lv_event_send(mbox, event, lv_event_get_data());
 801d72c:	f7ea f9dc 	bl	8007ae8 <lv_event_get_data>
 801d730:	4621      	mov	r1, r4
 801d732:	4602      	mov	r2, r0
 801d734:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
 801d736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(mbox, event, lv_event_get_data());
 801d73a:	f7ea b9bb 	b.w	8007ab4 <lv_event_send>
}
 801d73e:	bd38      	pop	{r3, r4, r5, pc}

0801d740 <mbox_realign>:
{
 801d740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d744:	4682      	mov	sl, r0
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801d746:	f7eb ff59 	bl	80095fc <lv_obj_get_ext_attr>
 801d74a:	4605      	mov	r5, r0
    lv_coord_t w = lv_obj_get_width_fit(mbox);
 801d74c:	4650      	mov	r0, sl
 801d74e:	f7eb fa77 	bl	8008c40 <lv_obj_get_width_fit>
 801d752:	4606      	mov	r6, r0
    if(ext->text) {
 801d754:	6868      	ldr	r0, [r5, #4]
 801d756:	b110      	cbz	r0, 801d75e <mbox_realign+0x1e>
        lv_obj_set_width(ext->text, w);
 801d758:	4631      	mov	r1, r6
 801d75a:	f7eb f90f 	bl	800897c <lv_obj_set_width>
    if(ext->btnm) {
 801d75e:	68ab      	ldr	r3, [r5, #8]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d047      	beq.n	801d7f4 <mbox_realign+0xb4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d764:	2210      	movs	r2, #16
 801d766:	2140      	movs	r1, #64	; 0x40
 801d768:	4650      	mov	r0, sl
 801d76a:	f7eb f99f 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d76e:	2211      	movs	r2, #17
 801d770:	2140      	movs	r1, #64	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d772:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d774:	4650      	mov	r0, sl
 801d776:	f7eb f999 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801d77a:	2214      	movs	r2, #20
 801d77c:	2140      	movs	r1, #64	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d77e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801d780:	4650      	mov	r0, sl
 801d782:	f7eb f993 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d786:	2210      	movs	r2, #16
 801d788:	2141      	movs	r1, #65	; 0x41
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int)
 801d78a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d78c:	4650      	mov	r0, sl
 801d78e:	f7eb f98d 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d792:	2211      	movs	r2, #17
 801d794:	2141      	movs	r1, #65	; 0x41
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801d796:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d798:	4650      	mov	r0, sl
 801d79a:	f7eb f987 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801d79e:	2141      	movs	r1, #65	; 0x41
 801d7a0:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801d7a4:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr)
 801d7a6:	4650      	mov	r0, sl
 801d7a8:	f7eb fc88 	bl	80090bc <_lv_obj_get_style_ptr>
 801d7ac:	4682      	mov	sl, r0
        const char ** btnm_map = lv_btnmatrix_get_map_array(ext->btnm);
 801d7ae:	68a8      	ldr	r0, [r5, #8]
 801d7b0:	f7fc ff48 	bl	801a644 <lv_btnmatrix_get_map_array>
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
 801d7b4:	2100      	movs	r1, #0
        uint16_t btnm_lines = 1;
 801d7b6:	2301      	movs	r3, #1
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
 801d7b8:	b28a      	uxth	r2, r1
 801d7ba:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801d7be:	7812      	ldrb	r2, [r2, #0]
 801d7c0:	b98a      	cbnz	r2, 801d7e6 <mbox_realign+0xa6>
        lv_coord_t btn_h = font_h + btn_top + btn_bottom;
 801d7c2:	eb04 020b 	add.w	r2, r4, fp
 801d7c6:	f8ba 4008 	ldrh.w	r4, [sl, #8]
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
 801d7ca:	44c8      	add	r8, r9
 801d7cc:	4631      	mov	r1, r6
        lv_coord_t btn_h = font_h + btn_top + btn_bottom;
 801d7ce:	4422      	add	r2, r4
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
 801d7d0:	68a8      	ldr	r0, [r5, #8]
 801d7d2:	fb12 8203 	smlabb	r2, r2, r3, r8
 801d7d6:	3b01      	subs	r3, #1
 801d7d8:	fb13 2207 	smlabb	r2, r3, r7, r2
}
 801d7dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
 801d7e0:	b212      	sxth	r2, r2
 801d7e2:	f7eb b86d 	b.w	80088c0 <lv_obj_set_size>
            if(btnm_map[i][0] == '\n') btnm_lines++;
 801d7e6:	2a0a      	cmp	r2, #10
 801d7e8:	f101 0101 	add.w	r1, r1, #1
 801d7ec:	bf04      	itt	eq
 801d7ee:	3301      	addeq	r3, #1
 801d7f0:	b29b      	uxtheq	r3, r3
 801d7f2:	e7e1      	b.n	801d7b8 <mbox_realign+0x78>
}
 801d7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7f8 <lv_msgbox_signal>:
{
 801d7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(sign == LV_SIGNAL_CONTROL) {
 801d7fc:	2918      	cmp	r1, #24
    char c_trans = 0;
 801d7fe:	f04f 0700 	mov.w	r7, #0
{
 801d802:	4606      	mov	r6, r0
 801d804:	460d      	mov	r5, r1
 801d806:	4614      	mov	r4, r2
    char c_trans = 0;
 801d808:	f88d 7003 	strb.w	r7, [sp, #3]
    if(sign == LV_SIGNAL_CONTROL) {
 801d80c:	d11e      	bne.n	801d84c <lv_msgbox_signal+0x54>
        c_trans = *((char *)param);
 801d80e:	7813      	ldrb	r3, [r2, #0]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
 801d810:	2b12      	cmp	r3, #18
 801d812:	bf08      	it	eq
 801d814:	2314      	moveq	r3, #20
 801d816:	f88d 3003 	strb.w	r3, [sp, #3]
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
 801d81a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801d81e:	2b11      	cmp	r3, #17
 801d820:	d102      	bne.n	801d828 <lv_msgbox_signal+0x30>
 801d822:	2313      	movs	r3, #19
 801d824:	f88d 3003 	strb.w	r3, [sp, #3]
{
 801d828:	f10d 0403 	add.w	r4, sp, #3
    res = ancestor_signal(mbox, sign, param);
 801d82c:	4b63      	ldr	r3, [pc, #396]	; (801d9bc <lv_msgbox_signal+0x1c4>)
 801d82e:	4622      	mov	r2, r4
 801d830:	4629      	mov	r1, r5
 801d832:	4630      	mov	r0, r6
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801d838:	2801      	cmp	r0, #1
    res = ancestor_signal(mbox, sign, param);
 801d83a:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 801d83c:	d12a      	bne.n	801d894 <lv_msgbox_signal+0x9c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801d83e:	2d07      	cmp	r5, #7
 801d840:	d14d      	bne.n	801d8de <lv_msgbox_signal+0xe6>
 801d842:	495f      	ldr	r1, [pc, #380]	; (801d9c0 <lv_msgbox_signal+0x1c8>)
 801d844:	4620      	mov	r0, r4
 801d846:	f7eb ffe3 	bl	8009810 <lv_obj_handle_get_type_signal>
 801d84a:	e01a      	b.n	801d882 <lv_msgbox_signal+0x8a>
    if(sign == LV_SIGNAL_GET_STYLE) {
 801d84c:	2908      	cmp	r1, #8
 801d84e:	d133      	bne.n	801d8b8 <lv_msgbox_signal+0xc0>
        info->result = lv_msgbox_get_style(mbox, info->part);
 801d850:	7815      	ldrb	r5, [r2, #0]
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801d852:	f7f5 fed1 	bl	80135f8 <lv_debug_check_null>
 801d856:	4603      	mov	r3, r0
 801d858:	b920      	cbnz	r0, 801d864 <lv_msgbox_signal+0x6c>
 801d85a:	4632      	mov	r2, r6
 801d85c:	4859      	ldr	r0, [pc, #356]	; (801d9c4 <lv_msgbox_signal+0x1cc>)
 801d85e:	f7f5 fecf 	bl	8013600 <lv_debug_log_error>
 801d862:	e7fe      	b.n	801d862 <lv_msgbox_signal+0x6a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801d864:	4630      	mov	r0, r6
 801d866:	f7eb fec9 	bl	80095fc <lv_obj_get_ext_attr>
    switch(part) {
 801d86a:	2d40      	cmp	r5, #64	; 0x40
 801d86c:	d016      	beq.n	801d89c <lv_msgbox_signal+0xa4>
 801d86e:	2d41      	cmp	r5, #65	; 0x41
 801d870:	d01d      	beq.n	801d8ae <lv_msgbox_signal+0xb6>
 801d872:	b145      	cbz	r5, 801d886 <lv_msgbox_signal+0x8e>
        info->result = lv_msgbox_get_style(mbox, info->part);
 801d874:	6067      	str	r7, [r4, #4]
        else return ancestor_signal(mbox, sign, param);
 801d876:	4b51      	ldr	r3, [pc, #324]	; (801d9bc <lv_msgbox_signal+0x1c4>)
 801d878:	4622      	mov	r2, r4
 801d87a:	2108      	movs	r1, #8
 801d87c:	4630      	mov	r0, r6
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801d882:	4680      	mov	r8, r0
 801d884:	e006      	b.n	801d894 <lv_msgbox_signal+0x9c>
            style_dsc_p = &mbox->style_list;
 801d886:	f106 0028 	add.w	r0, r6, #40	; 0x28
        info->result = lv_msgbox_get_style(mbox, info->part);
 801d88a:	6060      	str	r0, [r4, #4]
        if(info->result != NULL) return LV_RES_OK;
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d0f2      	beq.n	801d876 <lv_msgbox_signal+0x7e>
        return LV_RES_OK;
 801d890:	f04f 0801 	mov.w	r8, #1
}
 801d894:	4640      	mov	r0, r8
 801d896:	b003      	add	sp, #12
 801d898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
 801d89c:	6880      	ldr	r0, [r0, #8]
 801d89e:	b910      	cbnz	r0, 801d8a6 <lv_msgbox_signal+0xae>
        info->result = lv_msgbox_get_style(mbox, info->part);
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	6063      	str	r3, [r4, #4]
 801d8a4:	e7e7      	b.n	801d876 <lv_msgbox_signal+0x7e>
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
 801d8a6:	4639      	mov	r1, r7
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
 801d8a8:	f7ea fa42 	bl	8007d30 <lv_obj_get_style_list>
 801d8ac:	e7ed      	b.n	801d88a <lv_msgbox_signal+0x92>
 801d8ae:	6880      	ldr	r0, [r0, #8]
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d0f5      	beq.n	801d8a0 <lv_msgbox_signal+0xa8>
 801d8b4:	2101      	movs	r1, #1
 801d8b6:	e7f7      	b.n	801d8a8 <lv_msgbox_signal+0xb0>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
 801d8b8:	2909      	cmp	r1, #9
 801d8ba:	d1b7      	bne.n	801d82c <lv_msgbox_signal+0x34>
        lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801d8bc:	f7eb fe9e 	bl	80095fc <lv_obj_get_ext_attr>
        if(ext->btnm && info->part == LV_MSGBOX_PART_BTN_BG) {
 801d8c0:	6880      	ldr	r0, [r0, #8]
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	d0e4      	beq.n	801d890 <lv_msgbox_signal+0x98>
 801d8c6:	7823      	ldrb	r3, [r4, #0]
 801d8c8:	2b40      	cmp	r3, #64	; 0x40
 801d8ca:	d104      	bne.n	801d8d6 <lv_msgbox_signal+0xde>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
 801d8cc:	4639      	mov	r1, r7
 801d8ce:	f7eb f895 	bl	80089fc <lv_obj_get_state>
 801d8d2:	7060      	strb	r0, [r4, #1]
 801d8d4:	e7dc      	b.n	801d890 <lv_msgbox_signal+0x98>
        else if(ext->btnm && info->part == LV_MSGBOX_PART_BTN) {
 801d8d6:	2b41      	cmp	r3, #65	; 0x41
 801d8d8:	d1da      	bne.n	801d890 <lv_msgbox_signal+0x98>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BTN);
 801d8da:	2101      	movs	r1, #1
 801d8dc:	e7f7      	b.n	801d8ce <lv_msgbox_signal+0xd6>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801d8de:	4630      	mov	r0, r6
 801d8e0:	f7eb fe8c 	bl	80095fc <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_COORD_CHG) {
 801d8e4:	2d02      	cmp	r5, #2
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801d8e6:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
 801d8e8:	d10d      	bne.n	801d906 <lv_msgbox_signal+0x10e>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
 801d8ea:	4630      	mov	r0, r6
 801d8ec:	f7ea f9f2 	bl	8007cd4 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d8f0:	88a3      	ldrh	r3, [r4, #4]
 801d8f2:	8822      	ldrh	r2, [r4, #0]
 801d8f4:	3301      	adds	r3, #1
 801d8f6:	1a9b      	subs	r3, r3, r2
 801d8f8:	b21b      	sxth	r3, r3
 801d8fa:	4298      	cmp	r0, r3
 801d8fc:	d0c8      	beq.n	801d890 <lv_msgbox_signal+0x98>
            mbox_realign(mbox);
 801d8fe:	4630      	mov	r0, r6
 801d900:	f7ff ff1e 	bl	801d740 <mbox_realign>
 801d904:	e7c6      	b.n	801d894 <lv_msgbox_signal+0x9c>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 801d906:	2d04      	cmp	r5, #4
 801d908:	d0f9      	beq.n	801d8fe <lv_msgbox_signal+0x106>
    else if(sign == LV_SIGNAL_RELEASED) {
 801d90a:	2d0e      	cmp	r5, #14
 801d90c:	d10f      	bne.n	801d92e <lv_msgbox_signal+0x136>
        if(ext->btnm) {
 801d90e:	6880      	ldr	r0, [r0, #8]
 801d910:	2800      	cmp	r0, #0
 801d912:	d0bd      	beq.n	801d890 <lv_msgbox_signal+0x98>
            uint32_t btn_id = lv_btnmatrix_get_focused_btn(ext->btnm);
 801d914:	f7fc feba 	bl	801a68c <lv_btnmatrix_get_focused_btn>
            if(btn_id != LV_BTNMATRIX_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801d918:	f64f 73ff 	movw	r3, #65535	; 0xffff
            uint32_t btn_id = lv_btnmatrix_get_focused_btn(ext->btnm);
 801d91c:	9001      	str	r0, [sp, #4]
            if(btn_id != LV_BTNMATRIX_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
 801d91e:	4298      	cmp	r0, r3
 801d920:	d0b8      	beq.n	801d894 <lv_msgbox_signal+0x9c>
 801d922:	aa01      	add	r2, sp, #4
 801d924:	2110      	movs	r1, #16
 801d926:	4630      	mov	r0, r6
 801d928:	f7ea f8c4 	bl	8007ab4 <lv_event_send>
 801d92c:	e7b2      	b.n	801d894 <lv_msgbox_signal+0x9c>
        sign == LV_SIGNAL_CONTROL || sign == LV_SIGNAL_GET_EDITABLE ||
 801d92e:	f1a5 0916 	sub.w	r9, r5, #22
 801d932:	fa5f f989 	uxtb.w	r9, r9
 801d936:	f1b9 0f03 	cmp.w	r9, #3
 801d93a:	d8a9      	bhi.n	801d890 <lv_msgbox_signal+0x98>
        if(ext->btnm) {
 801d93c:	6880      	ldr	r0, [r0, #8]
 801d93e:	2800      	cmp	r0, #0
 801d940:	d037      	beq.n	801d9b2 <lv_msgbox_signal+0x1ba>
            ext->btnm->signal_cb(ext->btnm, sign, param);
 801d942:	69c3      	ldr	r3, [r0, #28]
 801d944:	4622      	mov	r2, r4
 801d946:	4629      	mov	r1, r5
 801d948:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
 801d94a:	2d16      	cmp	r5, #22
 801d94c:	d10f      	bne.n	801d96e <lv_msgbox_signal+0x176>
            lv_indev_t * indev         = lv_indev_get_act();
 801d94e:	f7e8 ff33 	bl	80067b8 <lv_indev_get_act>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801d952:	f7e8 ff37 	bl	80067c4 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801d956:	2804      	cmp	r0, #4
 801d958:	d109      	bne.n	801d96e <lv_msgbox_signal+0x176>
                if(lv_group_get_editing(lv_obj_get_group(mbox))) lv_btnmatrix_set_focused_btn(ext->btnm, 0);
 801d95a:	4630      	mov	r0, r6
 801d95c:	f7eb fe5e 	bl	800961c <lv_obj_get_group>
 801d960:	f7e8 fd60 	bl	8006424 <lv_group_get_editing>
 801d964:	b1e0      	cbz	r0, 801d9a0 <lv_msgbox_signal+0x1a8>
 801d966:	2100      	movs	r1, #0
                else lv_btnmatrix_set_focused_btn(ext->btnm, LV_BTNMATRIX_BTN_NONE);
 801d968:	68b8      	ldr	r0, [r7, #8]
 801d96a:	f7fc fdb5 	bl	801a4d8 <lv_btnmatrix_set_focused_btn>
        if(ext->btnm && (sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS)) {
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d08d      	beq.n	801d890 <lv_msgbox_signal+0x98>
 801d974:	f1b9 0f01 	cmp.w	r9, #1
 801d978:	d88a      	bhi.n	801d890 <lv_msgbox_signal+0x98>
            lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
 801d97a:	2100      	movs	r1, #0
 801d97c:	4630      	mov	r0, r6
 801d97e:	f7eb f83d 	bl	80089fc <lv_obj_get_state>
 801d982:	4604      	mov	r4, r0
                lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
 801d984:	2102      	movs	r1, #2
 801d986:	68b8      	ldr	r0, [r7, #8]
            if(state & LV_STATE_FOCUSED) {
 801d988:	07a2      	lsls	r2, r4, #30
 801d98a:	d50c      	bpl.n	801d9a6 <lv_msgbox_signal+0x1ae>
                lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
 801d98c:	f7ec fec6 	bl	800a71c <lv_obj_set_state>
            if(state & LV_STATE_EDITED) {
 801d990:	0763      	lsls	r3, r4, #29
 801d992:	68b8      	ldr	r0, [r7, #8]
                lv_obj_set_state(ext->btnm, LV_STATE_EDITED);
 801d994:	f04f 0104 	mov.w	r1, #4
            if(state & LV_STATE_EDITED) {
 801d998:	d508      	bpl.n	801d9ac <lv_msgbox_signal+0x1b4>
                lv_obj_set_state(ext->btnm, LV_STATE_EDITED);
 801d99a:	f7ec febf 	bl	800a71c <lv_obj_set_state>
 801d99e:	e779      	b.n	801d894 <lv_msgbox_signal+0x9c>
                else lv_btnmatrix_set_focused_btn(ext->btnm, LV_BTNMATRIX_BTN_NONE);
 801d9a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d9a4:	e7e0      	b.n	801d968 <lv_msgbox_signal+0x170>
                lv_obj_clear_state(ext->btnm, LV_STATE_FOCUSED);
 801d9a6:	f7ec fee8 	bl	800a77a <lv_obj_clear_state>
 801d9aa:	e7f1      	b.n	801d990 <lv_msgbox_signal+0x198>
                lv_obj_clear_state(ext->btnm, LV_STATE_EDITED);
 801d9ac:	f7ec fee5 	bl	800a77a <lv_obj_clear_state>
 801d9b0:	e770      	b.n	801d894 <lv_msgbox_signal+0x9c>
        if(sign == LV_SIGNAL_FOCUS) {
 801d9b2:	2d16      	cmp	r5, #22
 801d9b4:	f47f af6c 	bne.w	801d890 <lv_msgbox_signal+0x98>
 801d9b8:	e7c9      	b.n	801d94e <lv_msgbox_signal+0x156>
 801d9ba:	bf00      	nop
 801d9bc:	20028930 	.word	0x20028930
 801d9c0:	0802c451 	.word	0x0802c451
 801d9c4:	0802c354 	.word	0x0802c354

0801d9c8 <lv_msgbox_create>:
{
 801d9c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d9cc:	460e      	mov	r6, r1
 801d9ce:	4680      	mov	r8, r0
    lv_obj_t * mbox = lv_cont_create(par, copy);
 801d9d0:	f7fd fcae 	bl	801b330 <lv_cont_create>
 801d9d4:	4604      	mov	r4, r0
    LV_ASSERT_MEM(mbox);
 801d9d6:	f7f5 fe0f 	bl	80135f8 <lv_debug_check_null>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	b920      	cbnz	r0, 801d9e8 <lv_msgbox_create+0x20>
 801d9de:	4622      	mov	r2, r4
 801d9e0:	4851      	ldr	r0, [pc, #324]	; (801db28 <lv_msgbox_create+0x160>)
 801d9e2:	f7f5 fe0d 	bl	8013600 <lv_debug_log_error>
 801d9e6:	e7fe      	b.n	801d9e6 <lv_msgbox_create+0x1e>
    if(mbox == NULL) return NULL;
 801d9e8:	b1d4      	cbz	r4, 801da20 <lv_msgbox_create+0x58>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
 801d9ea:	4d50      	ldr	r5, [pc, #320]	; (801db2c <lv_msgbox_create+0x164>)
 801d9ec:	682b      	ldr	r3, [r5, #0]
 801d9ee:	b91b      	cbnz	r3, 801d9f8 <lv_msgbox_create+0x30>
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f7eb fde3 	bl	80095bc <lv_obj_get_signal_cb>
 801d9f6:	6028      	str	r0, [r5, #0]
    lv_msgbox_ext_t * ext = lv_obj_allocate_ext_attr(mbox, sizeof(lv_msgbox_ext_t));
 801d9f8:	2110      	movs	r1, #16
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f7ea f8a0 	bl	8007b40 <lv_obj_allocate_ext_attr>
 801da00:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801da02:	f7f5 fdf9 	bl	80135f8 <lv_debug_check_null>
 801da06:	4603      	mov	r3, r0
 801da08:	b920      	cbnz	r0, 801da14 <lv_msgbox_create+0x4c>
 801da0a:	462a      	mov	r2, r5
 801da0c:	4846      	ldr	r0, [pc, #280]	; (801db28 <lv_msgbox_create+0x160>)
 801da0e:	f7f5 fdf7 	bl	8013600 <lv_debug_log_error>
 801da12:	e7fe      	b.n	801da12 <lv_msgbox_create+0x4a>
 801da14:	2300      	movs	r3, #0
    if(ext == NULL) {
 801da16:	b93d      	cbnz	r5, 801da28 <lv_msgbox_create+0x60>
        lv_obj_del(mbox);
 801da18:	4620      	mov	r0, r4
        return NULL;
 801da1a:	462c      	mov	r4, r5
        lv_obj_del(mbox);
 801da1c:	f7eb fe72 	bl	8009704 <lv_obj_del>
}
 801da20:	4620      	mov	r0, r4
 801da22:	b002      	add	sp, #8
 801da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->btnm = NULL;
 801da28:	e9c5 3301 	strd	r3, r3, [r5, #4]
    ext->anim_time = LV_MSGBOX_CLOSE_ANIM_TIME;
 801da2c:	23c8      	movs	r3, #200	; 0xc8
    lv_obj_set_signal_cb(mbox, lv_msgbox_signal);
 801da2e:	4940      	ldr	r1, [pc, #256]	; (801db30 <lv_msgbox_create+0x168>)
 801da30:	4620      	mov	r0, r4
    ext->anim_time = LV_MSGBOX_CLOSE_ANIM_TIME;
 801da32:	81ab      	strh	r3, [r5, #12]
    lv_obj_set_signal_cb(mbox, lv_msgbox_signal);
 801da34:	f7ea f85e 	bl	8007af4 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 801da38:	2e00      	cmp	r6, #0
 801da3a:	d160      	bne.n	801dafe <lv_msgbox_create+0x136>
        ext->text = lv_label_create(mbox, NULL);
 801da3c:	4631      	mov	r1, r6
 801da3e:	4620      	mov	r0, r4
 801da40:	f7ff fd8e 	bl	801d560 <lv_label_create>
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801da44:	2101      	movs	r1, #1
        ext->text = lv_label_create(mbox, NULL);
 801da46:	6068      	str	r0, [r5, #4]
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 801da48:	2701      	movs	r7, #1
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
 801da4a:	f7fe ff0f 	bl	801c86c <lv_label_set_align>
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
 801da4e:	6868      	ldr	r0, [r5, #4]
 801da50:	2101      	movs	r1, #1
 801da52:	f7ff fd19 	bl	801d488 <lv_label_set_long_mode>
        lv_label_set_text(ext->text, "Message");
 801da56:	6868      	ldr	r0, [r5, #4]
 801da58:	4936      	ldr	r1, [pc, #216]	; (801db34 <lv_msgbox_create+0x16c>)
 801da5a:	f7ff fc8b 	bl	801d374 <lv_label_set_text>
        lv_cont_set_layout(mbox, LV_LAYOUT_COLUMN_MID);
 801da5e:	2103      	movs	r1, #3
 801da60:	4620      	mov	r0, r4
 801da62:	f7fd fcdf 	bl	801b424 <lv_cont_set_layout>
 801da66:	463b      	mov	r3, r7
 801da68:	4632      	mov	r2, r6
 801da6a:	4631      	mov	r1, r6
 801da6c:	4620      	mov	r0, r4
 801da6e:	9700      	str	r7, [sp, #0]
 801da70:	f7fd fcfa 	bl	801b468 <lv_cont_set_fit4>
        lv_coord_t fit_w = lv_obj_get_width_fit(par);
 801da74:	4640      	mov	r0, r8
 801da76:	f7eb f8e3 	bl	8008c40 <lv_obj_get_width_fit>
 801da7a:	4605      	mov	r5, r0
        if(lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_SMALL) {
 801da7c:	4630      	mov	r0, r6
 801da7e:	f7f4 fff9 	bl	8012a74 <lv_disp_get_size_category>
 801da82:	b998      	cbnz	r0, 801daac <lv_msgbox_create+0xe4>
            lv_obj_set_width(mbox, LV_MATH_MIN(fit_w, LV_DPX(400)));
 801da84:	4629      	mov	r1, r5
 801da86:	4620      	mov	r0, r4
 801da88:	f7ea ff78 	bl	800897c <lv_obj_set_width>
        lv_obj_align(mbox, NULL, LV_ALIGN_CENTER, 0, 0);
 801da8c:	2300      	movs	r3, #0
 801da8e:	4620      	mov	r0, r4
 801da90:	4619      	mov	r1, r3
 801da92:	9300      	str	r3, [sp, #0]
 801da94:	461a      	mov	r2, r3
 801da96:	f7ea fb9d 	bl	80081d4 <lv_obj_align>
        lv_obj_set_event_cb(mbox, lv_msgbox_default_event_cb);
 801da9a:	4620      	mov	r0, r4
 801da9c:	4926      	ldr	r1, [pc, #152]	; (801db38 <lv_msgbox_create+0x170>)
 801da9e:	f7e9 ffab 	bl	80079f8 <lv_obj_set_event_cb>
        lv_theme_apply(mbox, LV_THEME_MSGBOX);
 801daa2:	2118      	movs	r1, #24
 801daa4:	4620      	mov	r0, r4
 801daa6:	f7f7 fb85 	bl	80151b4 <lv_theme_apply>
 801daaa:	e7b9      	b.n	801da20 <lv_msgbox_create+0x58>
            lv_obj_set_width(mbox, LV_MATH_MIN(fit_w, LV_DPX(400)));
 801daac:	f44f 78c8 	mov.w	r8, #400	; 0x190
 801dab0:	4630      	mov	r0, r6
 801dab2:	f7f4 ffd3 	bl	8012a5c <lv_disp_get_dpi>
 801dab6:	fb00 f008 	mul.w	r0, r0, r8
 801daba:	28ef      	cmp	r0, #239	; 0xef
 801dabc:	dd08      	ble.n	801dad0 <lv_msgbox_create+0x108>
 801dabe:	2750      	movs	r7, #80	; 0x50
 801dac0:	4630      	mov	r0, r6
 801dac2:	f7f4 ffcb 	bl	8012a5c <lv_disp_get_dpi>
 801dac6:	fb00 7008 	mla	r0, r0, r8, r7
 801daca:	27a0      	movs	r7, #160	; 0xa0
 801dacc:	fb90 f7f7 	sdiv	r7, r0, r7
 801dad0:	42bd      	cmp	r5, r7
 801dad2:	dbd7      	blt.n	801da84 <lv_msgbox_create+0xbc>
 801dad4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801dad8:	2000      	movs	r0, #0
 801dada:	f7f4 ffbf 	bl	8012a5c <lv_disp_get_dpi>
 801dade:	4368      	muls	r0, r5
 801dae0:	28ef      	cmp	r0, #239	; 0xef
 801dae2:	dd0a      	ble.n	801dafa <lv_msgbox_create+0x132>
 801dae4:	2000      	movs	r0, #0
 801dae6:	f7f4 ffb9 	bl	8012a5c <lv_disp_get_dpi>
 801daea:	2150      	movs	r1, #80	; 0x50
 801daec:	fb00 1505 	mla	r5, r0, r5, r1
 801daf0:	20a0      	movs	r0, #160	; 0xa0
 801daf2:	fb95 f5f0 	sdiv	r5, r5, r0
 801daf6:	b22d      	sxth	r5, r5
 801daf8:	e7c4      	b.n	801da84 <lv_msgbox_create+0xbc>
 801dafa:	2501      	movs	r5, #1
 801dafc:	e7c2      	b.n	801da84 <lv_msgbox_create+0xbc>
        lv_msgbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801dafe:	4630      	mov	r0, r6
 801db00:	f7eb fd7c 	bl	80095fc <lv_obj_get_ext_attr>
 801db04:	4606      	mov	r6, r0
        ext->text = lv_label_create(mbox, copy_ext->text);
 801db06:	6841      	ldr	r1, [r0, #4]
 801db08:	4620      	mov	r0, r4
 801db0a:	f7ff fd29 	bl	801d560 <lv_label_create>
        if(copy_ext->btnm) ext->btnm = lv_btnmatrix_create(mbox, copy_ext->btnm);
 801db0e:	68b1      	ldr	r1, [r6, #8]
        ext->text = lv_label_create(mbox, copy_ext->text);
 801db10:	6068      	str	r0, [r5, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnmatrix_create(mbox, copy_ext->btnm);
 801db12:	b119      	cbz	r1, 801db1c <lv_msgbox_create+0x154>
 801db14:	4620      	mov	r0, r4
 801db16:	f7fc fc5f 	bl	801a3d8 <lv_btnmatrix_create>
 801db1a:	60a8      	str	r0, [r5, #8]
        lv_obj_refresh_style(mbox, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801db1c:	22ff      	movs	r2, #255	; 0xff
 801db1e:	4620      	mov	r0, r4
 801db20:	4611      	mov	r1, r2
 801db22:	f7eb fbf5 	bl	8009310 <lv_obj_refresh_style>
 801db26:	e77b      	b.n	801da20 <lv_msgbox_create+0x58>
 801db28:	0802c346 	.word	0x0802c346
 801db2c:	20028930 	.word	0x20028930
 801db30:	0801d7f9 	.word	0x0801d7f9
 801db34:	0802c45b 	.word	0x0802c45b
 801db38:	0801dd6d 	.word	0x0801dd6d

0801db3c <lv_msgbox_add_btns>:
{
 801db3c:	b570      	push	{r4, r5, r6, lr}
 801db3e:	4605      	mov	r5, r0
 801db40:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801db42:	f7f5 fd59 	bl	80135f8 <lv_debug_check_null>
 801db46:	4603      	mov	r3, r0
 801db48:	b920      	cbnz	r0, 801db54 <lv_msgbox_add_btns+0x18>
 801db4a:	462a      	mov	r2, r5
 801db4c:	4820      	ldr	r0, [pc, #128]	; (801dbd0 <lv_msgbox_add_btns+0x94>)
 801db4e:	f7f5 fd57 	bl	8013600 <lv_debug_log_error>
 801db52:	e7fe      	b.n	801db52 <lv_msgbox_add_btns+0x16>
    LV_ASSERT_NULL(btn_map);
 801db54:	4630      	mov	r0, r6
 801db56:	f7f5 fd4f 	bl	80135f8 <lv_debug_check_null>
 801db5a:	4603      	mov	r3, r0
 801db5c:	b920      	cbnz	r0, 801db68 <lv_msgbox_add_btns+0x2c>
 801db5e:	4632      	mov	r2, r6
 801db60:	481b      	ldr	r0, [pc, #108]	; (801dbd0 <lv_msgbox_add_btns+0x94>)
 801db62:	f7f5 fd4d 	bl	8013600 <lv_debug_log_error>
 801db66:	e7fe      	b.n	801db66 <lv_msgbox_add_btns+0x2a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801db68:	4628      	mov	r0, r5
 801db6a:	f7eb fd47 	bl	80095fc <lv_obj_get_ext_attr>
    if(ext->btnm == NULL) {
 801db6e:	6881      	ldr	r1, [r0, #8]
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801db70:	4604      	mov	r4, r0
    if(ext->btnm == NULL) {
 801db72:	b939      	cbnz	r1, 801db84 <lv_msgbox_add_btns+0x48>
        ext->btnm = lv_btnmatrix_create(mbox, NULL);
 801db74:	4628      	mov	r0, r5
 801db76:	f7fc fc2f 	bl	801a3d8 <lv_btnmatrix_create>
        lv_theme_apply(mbox, LV_THEME_MSGBOX_BTNS);
 801db7a:	2119      	movs	r1, #25
        ext->btnm = lv_btnmatrix_create(mbox, NULL);
 801db7c:	60a0      	str	r0, [r4, #8]
        lv_theme_apply(mbox, LV_THEME_MSGBOX_BTNS);
 801db7e:	4628      	mov	r0, r5
 801db80:	f7f7 fb18 	bl	80151b4 <lv_theme_apply>
    lv_btnmatrix_set_map(ext->btnm, btn_map);
 801db84:	4631      	mov	r1, r6
 801db86:	68a0      	ldr	r0, [r4, #8]
 801db88:	f7fc fa60 	bl	801a04c <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(ext->btnm, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 801db8c:	f44f 7188 	mov.w	r1, #272	; 0x110
 801db90:	68a0      	ldr	r0, [r4, #8]
 801db92:	f7fc fd39 	bl	801a608 <lv_btnmatrix_set_btn_ctrl_all>
    lv_obj_set_event_cb(ext->btnm, lv_msgbox_btnm_event_cb);
 801db96:	68a0      	ldr	r0, [r4, #8]
 801db98:	490e      	ldr	r1, [pc, #56]	; (801dbd4 <lv_msgbox_add_btns+0x98>)
 801db9a:	f7e9 ff2d 	bl	80079f8 <lv_obj_set_event_cb>
    if(lv_obj_is_focused(mbox)) {
 801db9e:	4628      	mov	r0, r5
 801dba0:	f7eb fdf6 	bl	8009790 <lv_obj_is_focused>
 801dba4:	b170      	cbz	r0, 801dbc4 <lv_msgbox_add_btns+0x88>
        lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
 801dba6:	2100      	movs	r1, #0
 801dba8:	4628      	mov	r0, r5
 801dbaa:	f7ea ff27 	bl	80089fc <lv_obj_get_state>
        if(state & LV_STATE_EDITED) {
 801dbae:	0743      	lsls	r3, r0, #29
            lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
 801dbb0:	68a0      	ldr	r0, [r4, #8]
            lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED | LV_STATE_EDITED);
 801dbb2:	bf4c      	ite	mi
 801dbb4:	2106      	movmi	r1, #6
            lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
 801dbb6:	2102      	movpl	r1, #2
 801dbb8:	f7ec fdb0 	bl	800a71c <lv_obj_set_state>
        lv_btnmatrix_set_focused_btn(ext->btnm, 0);
 801dbbc:	2100      	movs	r1, #0
 801dbbe:	68a0      	ldr	r0, [r4, #8]
 801dbc0:	f7fc fc8a 	bl	801a4d8 <lv_btnmatrix_set_focused_btn>
    mbox_realign(mbox);
 801dbc4:	4628      	mov	r0, r5
}
 801dbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbox_realign(mbox);
 801dbca:	f7ff bdb9 	b.w	801d740 <mbox_realign>
 801dbce:	bf00      	nop
 801dbd0:	0802c354 	.word	0x0802c354
 801dbd4:	0801d71b 	.word	0x0801d71b

0801dbd8 <lv_msgbox_set_text_fmt>:
{
 801dbd8:	b40e      	push	{r1, r2, r3}
 801dbda:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801dbdc:	9c07      	ldr	r4, [sp, #28]
 801dbde:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801dbe0:	f7f5 fd0a 	bl	80135f8 <lv_debug_check_null>
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	b920      	cbnz	r0, 801dbf2 <lv_msgbox_set_text_fmt+0x1a>
 801dbe8:	462a      	mov	r2, r5
 801dbea:	4819      	ldr	r0, [pc, #100]	; (801dc50 <lv_msgbox_set_text_fmt+0x78>)
 801dbec:	f7f5 fd08 	bl	8013600 <lv_debug_log_error>
 801dbf0:	e7fe      	b.n	801dbf0 <lv_msgbox_set_text_fmt+0x18>
    LV_ASSERT_STR(fmt);
 801dbf2:	4620      	mov	r0, r4
 801dbf4:	f7f5 fd00 	bl	80135f8 <lv_debug_check_null>
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	b920      	cbnz	r0, 801dc06 <lv_msgbox_set_text_fmt+0x2e>
 801dbfc:	4622      	mov	r2, r4
 801dbfe:	4814      	ldr	r0, [pc, #80]	; (801dc50 <lv_msgbox_set_text_fmt+0x78>)
 801dc00:	f7f5 fcfe 	bl	8013600 <lv_debug_log_error>
 801dc04:	e7fe      	b.n	801dc04 <lv_msgbox_set_text_fmt+0x2c>
    lv_msgbox_ext_t * msgbox_ext = lv_obj_get_ext_attr(mbox);
 801dc06:	4628      	mov	r0, r5
 801dc08:	f7eb fcf8 	bl	80095fc <lv_obj_get_ext_attr>
 801dc0c:	4606      	mov	r6, r0
    lv_label_ext_t * label_ext = lv_obj_get_ext_attr(msgbox_ext->text);
 801dc0e:	6840      	ldr	r0, [r0, #4]
 801dc10:	f7eb fcf4 	bl	80095fc <lv_obj_get_ext_attr>
 801dc14:	4607      	mov	r7, r0
    if(fmt == NULL) {
 801dc16:	b93c      	cbnz	r4, 801dc28 <lv_msgbox_set_text_fmt+0x50>
        lv_label_refr_text(msgbox_ext->text);
 801dc18:	6870      	ldr	r0, [r6, #4]
 801dc1a:	f7ff f8eb 	bl	801cdf4 <lv_label_refr_text>
}
 801dc1e:	b002      	add	sp, #8
 801dc20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dc24:	b003      	add	sp, #12
 801dc26:	4770      	bx	lr
    if(label_ext->text != NULL) {
 801dc28:	6800      	ldr	r0, [r0, #0]
 801dc2a:	b118      	cbz	r0, 801dc34 <lv_msgbox_set_text_fmt+0x5c>
        lv_mem_free(label_ext->text);
 801dc2c:	f7f5 ffda 	bl	8013be4 <lv_mem_free>
        label_ext->text = NULL;
 801dc30:	2300      	movs	r3, #0
 801dc32:	603b      	str	r3, [r7, #0]
    va_start(args, fmt);
 801dc34:	a908      	add	r1, sp, #32
    label_ext->text = _lv_txt_set_text_vfmt(fmt, args);
 801dc36:	4620      	mov	r0, r4
    va_start(args, fmt);
 801dc38:	9101      	str	r1, [sp, #4]
    label_ext->text = _lv_txt_set_text_vfmt(fmt, args);
 801dc3a:	f7f7 fa51 	bl	80150e0 <_lv_txt_set_text_vfmt>
 801dc3e:	6038      	str	r0, [r7, #0]
    lv_label_refr_text(msgbox_ext->text);
 801dc40:	6870      	ldr	r0, [r6, #4]
 801dc42:	f7ff f8d7 	bl	801cdf4 <lv_label_refr_text>
    mbox_realign(mbox);
 801dc46:	4628      	mov	r0, r5
 801dc48:	f7ff fd7a 	bl	801d740 <mbox_realign>
 801dc4c:	e7e7      	b.n	801dc1e <lv_msgbox_set_text_fmt+0x46>
 801dc4e:	bf00      	nop
 801dc50:	0802c354 	.word	0x0802c354

0801dc54 <lv_msgbox_get_active_btn>:
{
 801dc54:	b510      	push	{r4, lr}
 801dc56:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801dc58:	f7f5 fcce 	bl	80135f8 <lv_debug_check_null>
 801dc5c:	4603      	mov	r3, r0
 801dc5e:	b920      	cbnz	r0, 801dc6a <lv_msgbox_get_active_btn+0x16>
 801dc60:	4622      	mov	r2, r4
 801dc62:	480c      	ldr	r0, [pc, #48]	; (801dc94 <lv_msgbox_get_active_btn+0x40>)
 801dc64:	f7f5 fccc 	bl	8013600 <lv_debug_log_error>
 801dc68:	e7fe      	b.n	801dc68 <lv_msgbox_get_active_btn+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f7eb fcc6 	bl	80095fc <lv_obj_get_ext_attr>
 801dc70:	4604      	mov	r4, r0
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
 801dc72:	6880      	ldr	r0, [r0, #8]
 801dc74:	b150      	cbz	r0, 801dc8c <lv_msgbox_get_active_btn+0x38>
    uint16_t id = lv_btnmatrix_get_active_btn(ext->btnm);
 801dc76:	f7fc fcf7 	bl	801a668 <lv_btnmatrix_get_active_btn>
    if(id == LV_BTNMATRIX_BTN_NONE) {
 801dc7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dc7e:	4298      	cmp	r0, r3
 801dc80:	d106      	bne.n	801dc90 <lv_msgbox_get_active_btn+0x3c>
        id = lv_btnmatrix_get_focused_btn(ext->btnm);
 801dc82:	68a0      	ldr	r0, [r4, #8]
}
 801dc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        id = lv_btnmatrix_get_focused_btn(ext->btnm);
 801dc88:	f7fc bd00 	b.w	801a68c <lv_btnmatrix_get_focused_btn>
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
 801dc8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801dc90:	bd10      	pop	{r4, pc}
 801dc92:	bf00      	nop
 801dc94:	0802c354 	.word	0x0802c354

0801dc98 <lv_msgbox_get_anim_time>:
{
 801dc98:	b510      	push	{r4, lr}
 801dc9a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801dc9c:	f7f5 fcac 	bl	80135f8 <lv_debug_check_null>
 801dca0:	4603      	mov	r3, r0
 801dca2:	b920      	cbnz	r0, 801dcae <lv_msgbox_get_anim_time+0x16>
 801dca4:	4622      	mov	r2, r4
 801dca6:	4804      	ldr	r0, [pc, #16]	; (801dcb8 <lv_msgbox_get_anim_time+0x20>)
 801dca8:	f7f5 fcaa 	bl	8013600 <lv_debug_log_error>
 801dcac:	e7fe      	b.n	801dcac <lv_msgbox_get_anim_time+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f7eb fca4 	bl	80095fc <lv_obj_get_ext_attr>
}
 801dcb4:	8980      	ldrh	r0, [r0, #12]
 801dcb6:	bd10      	pop	{r4, pc}
 801dcb8:	0802c354 	.word	0x0802c354

0801dcbc <lv_msgbox_start_auto_close>:
{
 801dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcbe:	b095      	sub	sp, #84	; 0x54
 801dcc0:	4604      	mov	r4, r0
 801dcc2:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
 801dcc4:	f7f5 fc98 	bl	80135f8 <lv_debug_check_null>
 801dcc8:	4603      	mov	r3, r0
 801dcca:	b920      	cbnz	r0, 801dcd6 <lv_msgbox_start_auto_close+0x1a>
 801dccc:	4622      	mov	r2, r4
 801dcce:	4823      	ldr	r0, [pc, #140]	; (801dd5c <lv_msgbox_start_auto_close+0xa0>)
 801dcd0:	f7f5 fc96 	bl	8013600 <lv_debug_log_error>
 801dcd4:	e7fe      	b.n	801dcd4 <lv_msgbox_start_auto_close+0x18>
    if(lv_msgbox_get_anim_time(mbox) != 0) {
 801dcd6:	4620      	mov	r0, r4
 801dcd8:	426d      	negs	r5, r5
 801dcda:	f7ff ffdd 	bl	801dc98 <lv_msgbox_get_anim_time>
 801dcde:	4606      	mov	r6, r0
 801dce0:	4f1f      	ldr	r7, [pc, #124]	; (801dd60 <lv_msgbox_start_auto_close+0xa4>)
        lv_anim_init(&a);
 801dce2:	a803      	add	r0, sp, #12
    if(lv_msgbox_get_anim_time(mbox) != 0) {
 801dce4:	b346      	cbz	r6, 801dd38 <lv_msgbox_start_auto_close+0x7c>
        lv_anim_init(&a);
 801dce6:	f7f5 f921 	bl	8012f2c <lv_anim_init>
    a->exec_cb = exec_cb;
 801dcea:	4b1e      	ldr	r3, [pc, #120]	; (801dd64 <lv_msgbox_start_auto_close+0xa8>)
    a->end   = end;
 801dcec:	2600      	movs	r6, #0
        lv_anim_set_values(&a, lv_obj_get_height(mbox), 0);
 801dcee:	4620      	mov	r0, r4
    a->exec_cb = exec_cb;
 801dcf0:	9304      	str	r3, [sp, #16]
    a->var     = var;
 801dcf2:	9403      	str	r4, [sp, #12]
 801dcf4:	f7e9 fffc 	bl	8007cf0 <lv_obj_get_height>
    a->end   = end;
 801dcf8:	960b      	str	r6, [sp, #44]	; 0x2c
    a->current = start;
 801dcfa:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
 801dcfe:	4620      	mov	r0, r4
 801dd00:	f7ff ffca 	bl	801dc98 <lv_msgbox_get_anim_time>
    a->act_time = -(int32_t)(delay);
 801dd04:	e9cd 050c 	strd	r0, r5, [sp, #48]	; 0x30
        lv_anim_start(&a);
 801dd08:	a803      	add	r0, sp, #12
 801dd0a:	f7f5 f957 	bl	8012fbc <lv_anim_start>
    a->exec_cb = exec_cb;
 801dd0e:	4b16      	ldr	r3, [pc, #88]	; (801dd68 <lv_msgbox_start_auto_close+0xac>)
        lv_anim_set_values(&a, lv_obj_get_width(mbox), 0);
 801dd10:	4620      	mov	r0, r4
 801dd12:	9304      	str	r3, [sp, #16]
 801dd14:	f7e9 ffde 	bl	8007cd4 <lv_obj_get_width>
    a->end   = end;
 801dd18:	960b      	str	r6, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 801dd1a:	9706      	str	r7, [sp, #24]
    a->current = start;
 801dd1c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
        lv_anim_start(&a);
 801dd20:	a803      	add	r0, sp, #12
 801dd22:	f7f5 f94b 	bl	8012fbc <lv_anim_start>
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 801dd26:	9600      	str	r6, [sp, #0]
 801dd28:	4633      	mov	r3, r6
 801dd2a:	4632      	mov	r2, r6
 801dd2c:	4631      	mov	r1, r6
 801dd2e:	4620      	mov	r0, r4
 801dd30:	f7fd fb9a 	bl	801b468 <lv_cont_set_fit4>
}
 801dd34:	b015      	add	sp, #84	; 0x54
 801dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_init(&a);
 801dd38:	f7f5 f8f8 	bl	8012f2c <lv_anim_init>
    a->end   = end;
 801dd3c:	2301      	movs	r3, #1
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
 801dd3e:	4620      	mov	r0, r4
    a->ready_cb = ready_cb;
 801dd40:	9706      	str	r7, [sp, #24]
    a->end   = end;
 801dd42:	930b      	str	r3, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 801dd44:	e9cd 4603 	strd	r4, r6, [sp, #12]
    a->current = start;
 801dd48:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 801dd4c:	f7ff ffa4 	bl	801dc98 <lv_msgbox_get_anim_time>
    a->act_time = -(int32_t)(delay);
 801dd50:	e9cd 050c 	strd	r0, r5, [sp, #48]	; 0x30
        lv_anim_start(&a);
 801dd54:	a803      	add	r0, sp, #12
 801dd56:	f7f5 f931 	bl	8012fbc <lv_anim_start>
}
 801dd5a:	e7eb      	b.n	801dd34 <lv_msgbox_start_auto_close+0x78>
 801dd5c:	0802c354 	.word	0x0802c354
 801dd60:	0801d715 	.word	0x0801d715
 801dd64:	080089ad 	.word	0x080089ad
 801dd68:	0800897d 	.word	0x0800897d

0801dd6c <lv_msgbox_default_event_cb>:
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801dd6c:	2910      	cmp	r1, #16
{
 801dd6e:	b510      	push	{r4, lr}
 801dd70:	4604      	mov	r4, r0
    if(event != LV_EVENT_VALUE_CHANGED) return;
 801dd72:	d10b      	bne.n	801dd8c <lv_msgbox_default_event_cb+0x20>
    uint32_t btn_id = lv_msgbox_get_active_btn(mbox);
 801dd74:	f7ff ff6e 	bl	801dc54 <lv_msgbox_get_active_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 801dd78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dd7c:	4298      	cmp	r0, r3
 801dd7e:	d005      	beq.n	801dd8c <lv_msgbox_default_event_cb+0x20>
    lv_msgbox_start_auto_close(mbox, 0);
 801dd80:	4620      	mov	r0, r4
 801dd82:	2100      	movs	r1, #0
}
 801dd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_msgbox_start_auto_close(mbox, 0);
 801dd88:	f7ff bf98 	b.w	801dcbc <lv_msgbox_start_auto_close>
}
 801dd8c:	bd10      	pop	{r4, pc}

0801dd8e <lv_slider_get_type>:
 * Get whether the slider is symmetric or not.
 * @param slider pointer to a bar object
 * @return true: symmetric is enabled; false: disable
 */
static inline lv_slider_type_t lv_slider_get_type(lv_obj_t * slider)
{
 801dd8e:	b508      	push	{r3, lr}
    lv_bar_type_t type = lv_bar_get_type(slider);
 801dd90:	f7fb ff28 	bl	8019be4 <lv_bar_get_type>
    if(type == LV_BAR_TYPE_SYMMETRICAL)
 801dd94:	2801      	cmp	r0, #1
 801dd96:	d003      	beq.n	801dda0 <lv_slider_get_type+0x12>
        return LV_SLIDER_TYPE_SYMMETRICAL;
    else if(type == LV_BAR_TYPE_CUSTOM)
 801dd98:	2802      	cmp	r0, #2
        return LV_SLIDER_TYPE_RANGE;
    else
        return LV_SLIDER_TYPE_NORMAL;
 801dd9a:	bf0c      	ite	eq
 801dd9c:	2002      	moveq	r0, #2
 801dd9e:	2000      	movne	r0, #0
}
 801dda0:	bd08      	pop	{r3, pc}

0801dda2 <lv_area_copy>:
{
 801dda2:	3901      	subs	r1, #1
 801dda4:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 801dda8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ddac:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 801ddb0:	4298      	cmp	r0, r3
 801ddb2:	d1f9      	bne.n	801dda8 <lv_area_copy+0x6>
}
 801ddb4:	4770      	bx	lr

0801ddb6 <lv_slider_position_knob>:

    return style_dsc_p;
}

static void lv_slider_position_knob(lv_obj_t * slider, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)
{
 801ddb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddba:	460c      	mov	r4, r1
 801ddbc:	f3c2 014f 	ubfx	r1, r2, #1, #16
 801ddc0:	3a01      	subs	r2, #1
 801ddc2:	4605      	mov	r5, r0
 801ddc4:	b292      	uxth	r2, r2

    if(hor) {
 801ddc6:	b38b      	cbz	r3, 801de2c <lv_slider_position_knob+0x76>
        knob_area->x1 -= (knob_size >> 1);
 801ddc8:	8823      	ldrh	r3, [r4, #0]
 801ddca:	1a5b      	subs	r3, r3, r1
 801ddcc:	b29b      	uxth	r3, r3
 801ddce:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801ddd0:	4413      	add	r3, r2
 801ddd2:	80a3      	strh	r3, [r4, #4]
        knob_area->y1 = slider->coords.y1;
 801ddd4:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 801ddd8:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = slider->coords.y2;
 801ddda:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801ddde:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801dde0:	2212      	movs	r2, #18
 801dde2:	2102      	movs	r1, #2
 801dde4:	4628      	mov	r0, r5
 801dde6:	f7ea fe61 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801ddea:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801ddec:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801ddee:	2102      	movs	r1, #2
 801ddf0:	4628      	mov	r0, r5
 801ddf2:	f7ea fe5b 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ddf6:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801ddf8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801ddfa:	2102      	movs	r1, #2
 801ddfc:	4628      	mov	r0, r5
 801ddfe:	f7ea fe55 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801de02:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801de04:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801de06:	2102      	movs	r1, #2
 801de08:	4628      	mov	r0, r5
 801de0a:	f7ea fe4f 	bl	8008aac <_lv_obj_get_style_int>
    lv_style_int_t knob_top = lv_obj_get_style_pad_top(slider,    LV_SLIDER_PART_KNOB);
    lv_style_int_t knob_bottom = lv_obj_get_style_pad_bottom(slider, LV_SLIDER_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left;
    knob_area->x2 += knob_right;
 801de0e:	88a3      	ldrh	r3, [r4, #4]
    knob_area->x1 -= knob_left;
 801de10:	8822      	ldrh	r2, [r4, #0]
    knob_area->x2 += knob_right;
 801de12:	441e      	add	r6, r3
    knob_area->y1 -= knob_top;
 801de14:	8863      	ldrh	r3, [r4, #2]
    knob_area->x1 -= knob_left;
 801de16:	eba2 0208 	sub.w	r2, r2, r8
    knob_area->y1 -= knob_top;
 801de1a:	1bdb      	subs	r3, r3, r7
    knob_area->x2 += knob_right;
 801de1c:	80a6      	strh	r6, [r4, #4]
    knob_area->x1 -= knob_left;
 801de1e:	8022      	strh	r2, [r4, #0]
    knob_area->y1 -= knob_top;
 801de20:	8063      	strh	r3, [r4, #2]
    knob_area->y2 += knob_bottom;
 801de22:	88e3      	ldrh	r3, [r4, #6]
 801de24:	4418      	add	r0, r3
 801de26:	80e0      	strh	r0, [r4, #6]
}
 801de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        knob_area->y1 -= (knob_size >> 1);
 801de2c:	8863      	ldrh	r3, [r4, #2]
 801de2e:	1a5b      	subs	r3, r3, r1
 801de30:	b29b      	uxth	r3, r3
 801de32:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801de34:	4413      	add	r3, r2
 801de36:	80e3      	strh	r3, [r4, #6]
        knob_area->x1 = slider->coords.x1;
 801de38:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 801de3c:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = slider->coords.x2;
 801de3e:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801de42:	80a3      	strh	r3, [r4, #4]
 801de44:	e7cc      	b.n	801dde0 <lv_slider_position_knob+0x2a>
	...

0801de48 <lv_slider_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 801de48:	2a02      	cmp	r2, #2
{
 801de4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de4e:	4605      	mov	r5, r0
 801de50:	b099      	sub	sp, #100	; 0x64
 801de52:	468a      	mov	sl, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 801de54:	f000 8093 	beq.w	801df7e <lv_slider_design+0x136>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801de58:	2a00      	cmp	r2, #0
 801de5a:	f040 8088 	bne.w	801df6e <lv_slider_design+0x126>
        ancestor_design_f(slider, clip_area, mode);
 801de5e:	4b4d      	ldr	r3, [pc, #308]	; (801df94 <lv_slider_design+0x14c>)
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	4798      	blx	r3
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801de64:	4628      	mov	r0, r5
 801de66:	f7eb fbc9 	bl	80095fc <lv_obj_get_ext_attr>
 801de6a:	4604      	mov	r4, r0
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 801de6c:	4628      	mov	r0, r5
 801de6e:	f7ea fb59 	bl	8008524 <lv_obj_get_base_dir>
 801de72:	4680      	mov	r8, r0
        lv_coord_t objw = lv_obj_get_width(slider);
 801de74:	4628      	mov	r0, r5
 801de76:	f7e9 ff2d 	bl	8007cd4 <lv_obj_get_width>
 801de7a:	4606      	mov	r6, r0
        lv_coord_t objh = lv_obj_get_height(slider);
 801de7c:	4628      	mov	r0, r5
 801de7e:	f7e9 ff37 	bl	8007cf0 <lv_obj_get_height>
        if(ext->bar.type == LV_BAR_TYPE_SYMMETRICAL && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
 801de82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        bool hor = objw >= objh ? true : false;
 801de86:	4286      	cmp	r6, r0
 801de88:	46b1      	mov	r9, r6
        if(ext->bar.type == LV_BAR_TYPE_SYMMETRICAL && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
 801de8a:	f003 0303 	and.w	r3, r3, #3
        lv_coord_t objh = lv_obj_get_height(slider);
 801de8e:	4607      	mov	r7, r0
        bool hor = objw >= objh ? true : false;
 801de90:	bfb4      	ite	lt
 801de92:	f04f 0b00 	movlt.w	fp, #0
 801de96:	f04f 0b01 	movge.w	fp, #1
 801de9a:	4286      	cmp	r6, r0
 801de9c:	bfa8      	it	ge
 801de9e:	4681      	movge	r9, r0
        if(ext->bar.type == LV_BAR_TYPE_SYMMETRICAL && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
 801dea0:	2b01      	cmp	r3, #1
 801dea2:	fa0f f989 	sxth.w	r9, r9
 801dea6:	d107      	bne.n	801deb8 <lv_slider_design+0x70>
 801dea8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801deac:	2b00      	cmp	r3, #0
 801deae:	da03      	bge.n	801deb8 <lv_slider_design+0x70>
 801deb0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	dc64      	bgt.n	801df82 <lv_slider_design+0x13a>
        if(hor) {
 801deb8:	42be      	cmp	r6, r7
 801deba:	da05      	bge.n	801dec8 <lv_slider_design+0x80>
                    knob_area.y1 = ext->bar.indic_area.y1;
 801debc:	8963      	ldrh	r3, [r4, #10]
                    knob_area.y1 = ext->bar.indic_area.y2;
 801debe:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dec2:	e008      	b.n	801ded6 <lv_slider_design+0x8e>
                if(ext->bar.cur_value >= 0) {
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	db48      	blt.n	801df5a <lv_slider_design+0x112>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir == LV_BIDI_DIR_RTL, ext->bar.indic_area);
 801dec8:	f1b8 0f01 	cmp.w	r8, #1
 801decc:	d148      	bne.n	801df60 <lv_slider_design+0x118>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 801dece:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801ded2:	f8ad 3004 	strh.w	r3, [sp, #4]
        lv_slider_position_knob(slider, &knob_area, knob_size, hor);
 801ded6:	465b      	mov	r3, fp
 801ded8:	464a      	mov	r2, r9
 801deda:	a901      	add	r1, sp, #4
 801dedc:	4628      	mov	r0, r5
 801dede:	f7ff ff6a 	bl	801ddb6 <lv_slider_position_knob>
        lv_area_copy(&ext->right_knob_area, &knob_area);
 801dee2:	a901      	add	r1, sp, #4
 801dee4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801dee8:	f7ff ff5b 	bl	801dda2 <lv_area_copy>

static void lv_slider_draw_knob(lv_obj_t * slider, const lv_area_t * knob_area, const lv_area_t * clip_area)
{
    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801deec:	a803      	add	r0, sp, #12
 801deee:	f7f1 fcdb 	bl	800f8a8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(slider, LV_SLIDER_PART_KNOB, &knob_rect_dsc);
 801def2:	aa03      	add	r2, sp, #12
 801def4:	2102      	movs	r1, #2
 801def6:	4628      	mov	r0, r5
 801def8:	f7eb fc98 	bl	800982c <lv_obj_init_draw_rect_dsc>

    lv_draw_rect(knob_area, clip_area, &knob_rect_dsc);
 801defc:	aa03      	add	r2, sp, #12
 801defe:	4651      	mov	r1, sl
 801df00:	a801      	add	r0, sp, #4
 801df02:	f7f1 fcf5 	bl	800f8f0 <lv_draw_rect>
        if(lv_slider_get_type(slider) == LV_SLIDER_TYPE_RANGE) {
 801df06:	4628      	mov	r0, r5
 801df08:	f7ff ff41 	bl	801dd8e <lv_slider_get_type>
 801df0c:	2802      	cmp	r0, #2
 801df0e:	d122      	bne.n	801df56 <lv_slider_design+0x10e>
            if(hor) {
 801df10:	42be      	cmp	r6, r7
 801df12:	db28      	blt.n	801df66 <lv_slider_design+0x11e>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 801df14:	f1b8 0f01 	cmp.w	r8, #1
 801df18:	bf14      	ite	ne
 801df1a:	f9b4 3008 	ldrshne.w	r3, [r4, #8]
 801df1e:	f9b4 300c 	ldrsheq.w	r3, [r4, #12]
 801df22:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_slider_position_knob(slider, &knob_area, knob_size, hor);
 801df26:	465b      	mov	r3, fp
 801df28:	464a      	mov	r2, r9
 801df2a:	a901      	add	r1, sp, #4
 801df2c:	4628      	mov	r0, r5
 801df2e:	f7ff ff42 	bl	801ddb6 <lv_slider_position_knob>
            lv_area_copy(&ext->left_knob_area, &knob_area);
 801df32:	a901      	add	r1, sp, #4
 801df34:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801df38:	f7ff ff33 	bl	801dda2 <lv_area_copy>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801df3c:	a803      	add	r0, sp, #12
 801df3e:	f7f1 fcb3 	bl	800f8a8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(slider, LV_SLIDER_PART_KNOB, &knob_rect_dsc);
 801df42:	aa03      	add	r2, sp, #12
 801df44:	2102      	movs	r1, #2
 801df46:	4628      	mov	r0, r5
 801df48:	f7eb fc70 	bl	800982c <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(knob_area, clip_area, &knob_rect_dsc);
 801df4c:	aa03      	add	r2, sp, #12
 801df4e:	4651      	mov	r1, sl
 801df50:	a801      	add	r0, sp, #4
 801df52:	f7f1 fccd 	bl	800f8f0 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 801df56:	2000      	movs	r0, #0
 801df58:	e00e      	b.n	801df78 <lv_slider_design+0x130>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 801df5a:	f1b8 0f01 	cmp.w	r8, #1
 801df5e:	d1b6      	bne.n	801dece <lv_slider_design+0x86>
 801df60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df64:	e7b5      	b.n	801ded2 <lv_slider_design+0x8a>
                knob_area.y1 = ext->bar.indic_area.y2;
 801df66:	89e3      	ldrh	r3, [r4, #14]
 801df68:	f8ad 3006 	strh.w	r3, [sp, #6]
 801df6c:	e7db      	b.n	801df26 <lv_slider_design+0xde>
    else if(mode == LV_DESIGN_DRAW_POST) {
 801df6e:	2a01      	cmp	r2, #1
 801df70:	d1f1      	bne.n	801df56 <lv_slider_design+0x10e>
        return ancestor_design_f(slider, clip_area, mode);
 801df72:	4b08      	ldr	r3, [pc, #32]	; (801df94 <lv_slider_design+0x14c>)
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	4798      	blx	r3
}
 801df78:	b019      	add	sp, #100	; 0x64
 801df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LV_DESIGN_RES_NOT_COVER;
 801df7e:	4610      	mov	r0, r2
 801df80:	e7fa      	b.n	801df78 <lv_slider_design+0x130>
        if(hor) {
 801df82:	4286      	cmp	r6, r0
 801df84:	f9b4 3000 	ldrsh.w	r3, [r4]
 801df88:	da9c      	bge.n	801dec4 <lv_slider_design+0x7c>
                if(ext->bar.cur_value >= 0) {
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	da96      	bge.n	801debc <lv_slider_design+0x74>
                    knob_area.y1 = ext->bar.indic_area.y2;
 801df8e:	89e3      	ldrh	r3, [r4, #14]
 801df90:	e795      	b.n	801debe <lv_slider_design+0x76>
 801df92:	bf00      	nop
 801df94:	20028934 	.word	0x20028934

0801df98 <lv_slider_create>:
{
 801df98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df9a:	460e      	mov	r6, r1
    lv_obj_t * slider = lv_bar_create(par, copy);
 801df9c:	f7fb fd1c 	bl	80199d8 <lv_bar_create>
 801dfa0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(slider);
 801dfa2:	f7f5 fb29 	bl	80135f8 <lv_debug_check_null>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	b920      	cbnz	r0, 801dfb4 <lv_slider_create+0x1c>
 801dfaa:	4622      	mov	r2, r4
 801dfac:	4839      	ldr	r0, [pc, #228]	; (801e094 <lv_slider_create+0xfc>)
 801dfae:	f7f5 fb27 	bl	8013600 <lv_debug_log_error>
 801dfb2:	e7fe      	b.n	801dfb2 <lv_slider_create+0x1a>
    if(slider == NULL) return NULL;
 801dfb4:	b304      	cbz	r4, 801dff8 <lv_slider_create+0x60>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(slider);
 801dfb6:	4d38      	ldr	r5, [pc, #224]	; (801e098 <lv_slider_create+0x100>)
 801dfb8:	682b      	ldr	r3, [r5, #0]
 801dfba:	b91b      	cbnz	r3, 801dfc4 <lv_slider_create+0x2c>
 801dfbc:	4620      	mov	r0, r4
 801dfbe:	f7eb fb0d 	bl	80095dc <lv_obj_get_design_cb>
 801dfc2:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(slider);
 801dfc4:	686b      	ldr	r3, [r5, #4]
 801dfc6:	b91b      	cbnz	r3, 801dfd0 <lv_slider_create+0x38>
 801dfc8:	4620      	mov	r0, r4
 801dfca:	f7eb faf7 	bl	80095bc <lv_obj_get_signal_cb>
 801dfce:	6068      	str	r0, [r5, #4]
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(slider, sizeof(lv_slider_ext_t));
 801dfd0:	2158      	movs	r1, #88	; 0x58
 801dfd2:	4620      	mov	r0, r4
 801dfd4:	f7e9 fdb4 	bl	8007b40 <lv_obj_allocate_ext_attr>
 801dfd8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801dfda:	f7f5 fb0d 	bl	80135f8 <lv_debug_check_null>
 801dfde:	4603      	mov	r3, r0
 801dfe0:	b920      	cbnz	r0, 801dfec <lv_slider_create+0x54>
 801dfe2:	462a      	mov	r2, r5
 801dfe4:	482b      	ldr	r0, [pc, #172]	; (801e094 <lv_slider_create+0xfc>)
 801dfe6:	f7f5 fb0b 	bl	8013600 <lv_debug_log_error>
 801dfea:	e7fe      	b.n	801dfea <lv_slider_create+0x52>
 801dfec:	2200      	movs	r2, #0
    if(ext == NULL) {
 801dfee:	b935      	cbnz	r5, 801dffe <lv_slider_create+0x66>
        lv_obj_del(slider);
 801dff0:	4620      	mov	r0, r4
        return NULL;
 801dff2:	462c      	mov	r4, r5
        lv_obj_del(slider);
 801dff4:	f7eb fb86 	bl	8009704 <lv_obj_del>
}
 801dff8:	4620      	mov	r0, r4
 801dffa:	b003      	add	sp, #12
 801dffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ext->dragging = 0;
 801dffe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
    lv_style_list_init(&ext->style_knob);
 801e002:	f105 0738 	add.w	r7, r5, #56	; 0x38
    ext->value_to_set = NULL;
 801e006:	652a      	str	r2, [r5, #80]	; 0x50
    ext->left_knob_focus = 0;
 801e008:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    lv_style_list_init(&ext->style_knob);
 801e00c:	4638      	mov	r0, r7
    ext->left_knob_focus = 0;
 801e00e:	f362 0341 	bfi	r3, r2, #1, #1
 801e012:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    lv_style_list_init(&ext->style_knob);
 801e016:	f7ed f9ce 	bl	800b3b6 <lv_style_list_init>
    lv_obj_set_signal_cb(slider, lv_slider_signal);
 801e01a:	4920      	ldr	r1, [pc, #128]	; (801e09c <lv_slider_create+0x104>)
 801e01c:	4620      	mov	r0, r4
 801e01e:	f7e9 fd69 	bl	8007af4 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(slider, lv_slider_design);
 801e022:	491f      	ldr	r1, [pc, #124]	; (801e0a0 <lv_slider_create+0x108>)
 801e024:	4620      	mov	r0, r4
 801e026:	f7e9 fd7b 	bl	8007b20 <lv_obj_set_design_cb>
    if(copy == NULL) {
 801e02a:	b9be      	cbnz	r6, 801e05c <lv_slider_create+0xc4>
        lv_obj_set_click(slider, true);
 801e02c:	4620      	mov	r0, r4
 801e02e:	2101      	movs	r1, #1
 801e030:	f7e9 fca8 	bl	8007984 <lv_obj_set_click>
        lv_obj_add_protect(slider, LV_PROTECT_PRESS_LOST);
 801e034:	4620      	mov	r0, r4
 801e036:	2110      	movs	r1, #16
 801e038:	f7e9 fcb4 	bl	80079a4 <lv_obj_add_protect>
        lv_obj_set_ext_click_area(slider, 0, 0, LV_DPI / 10, LV_DPI / 10);
 801e03c:	230d      	movs	r3, #13
 801e03e:	4632      	mov	r2, r6
 801e040:	4631      	mov	r1, r6
 801e042:	9300      	str	r3, [sp, #0]
 801e044:	4620      	mov	r0, r4
 801e046:	f7e9 fc69 	bl	800791c <lv_obj_set_ext_click_area>
        lv_theme_apply(slider, LV_THEME_SLIDER);
 801e04a:	4620      	mov	r0, r4
 801e04c:	211d      	movs	r1, #29
 801e04e:	f7f7 f8b1 	bl	80151b4 <lv_theme_apply>
        lv_obj_set_height(slider, LV_DPI / 15);
 801e052:	2108      	movs	r1, #8
 801e054:	4620      	mov	r0, r4
 801e056:	f7ea fca9 	bl	80089ac <lv_obj_set_height>
 801e05a:	e7cd      	b.n	801dff8 <lv_slider_create+0x60>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801e05c:	4630      	mov	r0, r6
 801e05e:	f7eb facd 	bl	80095fc <lv_obj_get_ext_attr>
 801e062:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_knob, &copy_ext->style_knob);
 801e064:	f100 0138 	add.w	r1, r0, #56	; 0x38
 801e068:	4638      	mov	r0, r7
 801e06a:	f7ed fc90 	bl	800b98e <lv_style_list_copy>
        lv_area_copy(&ext->left_knob_area, &copy_ext->left_knob_area);
 801e06e:	f106 0140 	add.w	r1, r6, #64	; 0x40
 801e072:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801e076:	f7ff fe94 	bl	801dda2 <lv_area_copy>
        lv_area_copy(&ext->right_knob_area, &copy_ext->right_knob_area);
 801e07a:	f106 0148 	add.w	r1, r6, #72	; 0x48
 801e07e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 801e082:	f7ff fe8e 	bl	801dda2 <lv_area_copy>
        lv_obj_refresh_style(slider, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801e086:	22ff      	movs	r2, #255	; 0xff
 801e088:	4620      	mov	r0, r4
 801e08a:	4611      	mov	r1, r2
 801e08c:	f7eb f940 	bl	8009310 <lv_obj_refresh_style>
 801e090:	e7b2      	b.n	801dff8 <lv_slider_create+0x60>
 801e092:	bf00      	nop
 801e094:	0802c346 	.word	0x0802c346
 801e098:	20028934 	.word	0x20028934
 801e09c:	0801e0c9 	.word	0x0801e0c9
 801e0a0:	0801de49 	.word	0x0801de49

0801e0a4 <lv_slider_get_value>:
{
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
 801e0a8:	f7f5 faa6 	bl	80135f8 <lv_debug_check_null>
 801e0ac:	4603      	mov	r3, r0
 801e0ae:	b920      	cbnz	r0, 801e0ba <lv_slider_get_value+0x16>
 801e0b0:	4622      	mov	r2, r4
 801e0b2:	4804      	ldr	r0, [pc, #16]	; (801e0c4 <lv_slider_get_value+0x20>)
 801e0b4:	f7f5 faa4 	bl	8013600 <lv_debug_log_error>
 801e0b8:	e7fe      	b.n	801e0b8 <lv_slider_get_value+0x14>
    return lv_bar_get_value(slider);
 801e0ba:	4620      	mov	r0, r4
}
 801e0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return lv_bar_get_value(slider);
 801e0c0:	f7fb bd54 	b.w	8019b6c <lv_bar_get_value>
 801e0c4:	0802c354 	.word	0x0802c354

0801e0c8 <lv_slider_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801e0c8:	2908      	cmp	r1, #8
{
 801e0ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0ce:	4605      	mov	r5, r0
 801e0d0:	b085      	sub	sp, #20
 801e0d2:	4688      	mov	r8, r1
 801e0d4:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801e0d6:	d129      	bne.n	801e12c <lv_slider_signal+0x64>
        info->result = lv_slider_get_style(slider, info->part);
 801e0d8:	7814      	ldrb	r4, [r2, #0]
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
 801e0da:	f7f5 fa8d 	bl	80135f8 <lv_debug_check_null>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	b920      	cbnz	r0, 801e0ec <lv_slider_signal+0x24>
 801e0e2:	462a      	mov	r2, r5
 801e0e4:	48cb      	ldr	r0, [pc, #812]	; (801e414 <lv_slider_signal+0x34c>)
 801e0e6:	f7f5 fa8b 	bl	8013600 <lv_debug_log_error>
 801e0ea:	e7fe      	b.n	801e0ea <lv_slider_signal+0x22>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801e0ec:	4628      	mov	r0, r5
 801e0ee:	f7eb fa85 	bl	80095fc <lv_obj_get_ext_attr>
    switch(part) {
 801e0f2:	2c01      	cmp	r4, #1
 801e0f4:	d016      	beq.n	801e124 <lv_slider_signal+0x5c>
 801e0f6:	d30e      	bcc.n	801e116 <lv_slider_signal+0x4e>
 801e0f8:	2c02      	cmp	r4, #2
 801e0fa:	d015      	beq.n	801e128 <lv_slider_signal+0x60>
        info->result = lv_slider_get_style(slider, info->part);
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(slider, sign, param);
 801e100:	4bc5      	ldr	r3, [pc, #788]	; (801e418 <lv_slider_signal+0x350>)
 801e102:	463a      	mov	r2, r7
 801e104:	2108      	movs	r1, #8
 801e106:	4628      	mov	r0, r5
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801e10c:	4606      	mov	r6, r0
}
 801e10e:	4630      	mov	r0, r6
 801e110:	b005      	add	sp, #20
 801e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            style_dsc_p = &slider->style_list;
 801e116:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_slider_get_style(slider, info->part);
 801e11a:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
 801e11c:	2800      	cmp	r0, #0
 801e11e:	d0ef      	beq.n	801e100 <lv_slider_signal+0x38>
 801e120:	2601      	movs	r6, #1
 801e122:	e7f4      	b.n	801e10e <lv_slider_signal+0x46>
            style_dsc_p = &ext->bar.style_indic;
 801e124:	3030      	adds	r0, #48	; 0x30
 801e126:	e7f8      	b.n	801e11a <lv_slider_signal+0x52>
            style_dsc_p = &ext->style_knob;
 801e128:	3038      	adds	r0, #56	; 0x38
 801e12a:	e7f6      	b.n	801e11a <lv_slider_signal+0x52>
    res = ancestor_signal(slider, sign, param);
 801e12c:	4bba      	ldr	r3, [pc, #744]	; (801e418 <lv_slider_signal+0x350>)
 801e12e:	685b      	ldr	r3, [r3, #4]
 801e130:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801e132:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 801e134:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801e136:	d1ea      	bne.n	801e10e <lv_slider_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801e138:	f1b8 0f07 	cmp.w	r8, #7
 801e13c:	d104      	bne.n	801e148 <lv_slider_signal+0x80>
 801e13e:	49b7      	ldr	r1, [pc, #732]	; (801e41c <lv_slider_signal+0x354>)
 801e140:	4638      	mov	r0, r7
 801e142:	f7eb fb65 	bl	8009810 <lv_obj_handle_get_type_signal>
 801e146:	e7e1      	b.n	801e10c <lv_slider_signal+0x44>
    lv_slider_type_t type = lv_slider_get_type(slider);
 801e148:	4628      	mov	r0, r5
 801e14a:	f7ff fe20 	bl	801dd8e <lv_slider_get_type>
 801e14e:	4681      	mov	r9, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801e150:	4628      	mov	r0, r5
 801e152:	f7eb fa53 	bl	80095fc <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_HIT_TEST) {
 801e156:	f1b8 0f0a 	cmp.w	r8, #10
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801e15a:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_HIT_TEST) {
 801e15c:	d13d      	bne.n	801e1da <lv_slider_signal+0x112>
        info->result = _lv_area_is_point_on(&ext->right_knob_area, info->point, 0);
 801e15e:	2200      	movs	r2, #0
 801e160:	6839      	ldr	r1, [r7, #0]
 801e162:	3048      	adds	r0, #72	; 0x48
 801e164:	f7f5 f811 	bl	801318a <_lv_area_is_point_on>
 801e168:	4602      	mov	r2, r0
 801e16a:	7138      	strb	r0, [r7, #4]
        if((info->result == false) && (type == LV_SLIDER_TYPE_RANGE)) {
 801e16c:	b940      	cbnz	r0, 801e180 <lv_slider_signal+0xb8>
 801e16e:	f1b9 0f02 	cmp.w	r9, #2
 801e172:	d105      	bne.n	801e180 <lv_slider_signal+0xb8>
            info->result = _lv_area_is_point_on(&ext->left_knob_area, info->point, 0);
 801e174:	6839      	ldr	r1, [r7, #0]
 801e176:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801e17a:	f7f5 f806 	bl	801318a <_lv_area_is_point_on>
 801e17e:	7138      	strb	r0, [r7, #4]
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 801e180:	f1a8 030d 	sub.w	r3, r8, #13
 801e184:	2b01      	cmp	r3, #1
 801e186:	f200 813d 	bhi.w	801e404 <lv_slider_signal+0x33c>
        ext->dragging = false;
 801e18a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
        ext->value_to_set = NULL;
 801e18e:	2700      	movs	r7, #0
        lv_group_t * g             = lv_obj_get_group(slider);
 801e190:	4628      	mov	r0, r5
        ext->dragging = false;
 801e192:	f36f 0300 	bfc	r3, #0, #1
        ext->value_to_set = NULL;
 801e196:	6527      	str	r7, [r4, #80]	; 0x50
        ext->dragging = false;
 801e198:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_group_t * g             = lv_obj_get_group(slider);
 801e19c:	f7eb fa3e 	bl	800961c <lv_obj_get_group>
 801e1a0:	4680      	mov	r8, r0
        bool editing               = lv_group_get_editing(g);
 801e1a2:	f7e8 f93f 	bl	8006424 <lv_group_get_editing>
 801e1a6:	4681      	mov	r9, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e1a8:	f7e8 fb06 	bl	80067b8 <lv_indev_get_act>
 801e1ac:	f7e8 fb0a 	bl	80067c4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e1b0:	2804      	cmp	r0, #4
 801e1b2:	d1ac      	bne.n	801e10e <lv_slider_signal+0x46>
            if(editing) {
 801e1b4:	f1b9 0f00 	cmp.w	r9, #0
 801e1b8:	d0a9      	beq.n	801e10e <lv_slider_signal+0x46>
                if(lv_slider_get_type(slider) == LV_SLIDER_TYPE_RANGE) {
 801e1ba:	4628      	mov	r0, r5
 801e1bc:	f7ff fde7 	bl	801dd8e <lv_slider_get_type>
 801e1c0:	2802      	cmp	r0, #2
 801e1c2:	f040 811a 	bne.w	801e3fa <lv_slider_signal+0x332>
                    if(ext->left_knob_focus == 0) ext->left_knob_focus = 1;
 801e1c6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e1ca:	0799      	lsls	r1, r3, #30
 801e1cc:	f100 8111 	bmi.w	801e3f2 <lv_slider_signal+0x32a>
 801e1d0:	f043 0302 	orr.w	r3, r3, #2
        ext->left_knob_focus = 0;
 801e1d4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e1d8:	e799      	b.n	801e10e <lv_slider_signal+0x46>
    if(sign == LV_SIGNAL_PRESSED) {
 801e1da:	f1b8 0f0b 	cmp.w	r8, #11
 801e1de:	d178      	bne.n	801e2d2 <lv_slider_signal+0x20a>
        ext->dragging = true;
 801e1e0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
        if(type == LV_SLIDER_TYPE_NORMAL || type == LV_SLIDER_TYPE_SYMMETRICAL) {
 801e1e4:	f1b9 0f01 	cmp.w	r9, #1
        ext->dragging = true;
 801e1e8:	f043 0301 	orr.w	r3, r3, #1
 801e1ec:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
        if(type == LV_SLIDER_TYPE_NORMAL || type == LV_SLIDER_TYPE_SYMMETRICAL) {
 801e1f0:	d801      	bhi.n	801e1f6 <lv_slider_signal+0x12e>
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e1f2:	6524      	str	r4, [r4, #80]	; 0x50
 801e1f4:	e78b      	b.n	801e10e <lv_slider_signal+0x46>
        else if(type == LV_SLIDER_TYPE_RANGE) {
 801e1f6:	f1b9 0f02 	cmp.w	r9, #2
 801e1fa:	d188      	bne.n	801e10e <lv_slider_signal+0x46>
            lv_indev_get_point(param, &p);
 801e1fc:	a903      	add	r1, sp, #12
 801e1fe:	4638      	mov	r0, r7
 801e200:	f7e8 fb1b 	bl	800683a <lv_indev_get_point>
            bool hor = lv_obj_get_width(slider) >= lv_obj_get_height(slider);
 801e204:	4628      	mov	r0, r5
 801e206:	f7e9 fd65 	bl	8007cd4 <lv_obj_get_width>
 801e20a:	4680      	mov	r8, r0
 801e20c:	4628      	mov	r0, r5
 801e20e:	f7e9 fd6f 	bl	8007cf0 <lv_obj_get_height>
 801e212:	4607      	mov	r7, r0
            lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 801e214:	4628      	mov	r0, r5
 801e216:	f7ea f985 	bl	8008524 <lv_obj_get_base_dir>
            if(hor) {
 801e21a:	45b8      	cmp	r8, r7
 801e21c:	db35      	blt.n	801e28a <lv_slider_signal+0x1c2>
                if((base_dir != LV_BIDI_DIR_RTL && p.x > ext->right_knob_area.x2) || (base_dir == LV_BIDI_DIR_RTL &&
 801e21e:	2801      	cmp	r0, #1
 801e220:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801e224:	d00a      	beq.n	801e23c <lv_slider_signal+0x174>
 801e226:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 801e22a:	428b      	cmp	r3, r1
 801e22c:	dbe1      	blt.n	801e1f2 <lv_slider_signal+0x12a>
                else if((base_dir != LV_BIDI_DIR_RTL && p.x < ext->left_knob_area.x1) || (base_dir == LV_BIDI_DIR_RTL &&
 801e22e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801e232:	428b      	cmp	r3, r1
 801e234:	dd0a      	ble.n	801e24c <lv_slider_signal+0x184>
                    else ext->value_to_set = &ext->bar.start_value;
 801e236:	1da3      	adds	r3, r4, #6
 801e238:	6523      	str	r3, [r4, #80]	; 0x50
 801e23a:	e768      	b.n	801e10e <lv_slider_signal+0x46>
                if((base_dir != LV_BIDI_DIR_RTL && p.x > ext->right_knob_area.x2) || (base_dir == LV_BIDI_DIR_RTL &&
 801e23c:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 801e240:	428b      	cmp	r3, r1
 801e242:	dcd6      	bgt.n	801e1f2 <lv_slider_signal+0x12a>
                else if((base_dir != LV_BIDI_DIR_RTL && p.x < ext->left_knob_area.x1) || (base_dir == LV_BIDI_DIR_RTL &&
 801e244:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 801e248:	428b      	cmp	r3, r1
 801e24a:	dbf4      	blt.n	801e236 <lv_slider_signal+0x16e>
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 801e24c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801e250:	2502      	movs	r5, #2
 801e252:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e256:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	; 0x48
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 801e25a:	1ad2      	subs	r2, r2, r3
 801e25c:	fb92 f2f5 	sdiv	r2, r2, r5
 801e260:	441a      	add	r2, r3
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e262:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 801e266:	1a1b      	subs	r3, r3, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 801e268:	1a52      	subs	r2, r2, r1
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e26a:	fb93 f3f5 	sdiv	r3, r3, r5
 801e26e:	4403      	add	r3, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 801e270:	2a00      	cmp	r2, #0
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e272:	eba3 0301 	sub.w	r3, r3, r1
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 801e276:	bfb8      	it	lt
 801e278:	4252      	neglt	r2, r2
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e27a:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e27c:	b212      	sxth	r2, r2
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 801e27e:	bfb8      	it	lt
 801e280:	425b      	neglt	r3, r3
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e282:	b21b      	sxth	r3, r3
 801e284:	429a      	cmp	r2, r3
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e286:	ddd6      	ble.n	801e236 <lv_slider_signal+0x16e>
 801e288:	e7b3      	b.n	801e1f2 <lv_slider_signal+0x12a>
                if(p.y < ext->right_knob_area.y1) {
 801e28a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801e28e:	f9b4 004a 	ldrsh.w	r0, [r4, #74]	; 0x4a
 801e292:	4281      	cmp	r1, r0
 801e294:	dbad      	blt.n	801e1f2 <lv_slider_signal+0x12a>
                else if(p.y > ext->left_knob_area.y2) {
 801e296:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 801e29a:	4299      	cmp	r1, r3
 801e29c:	dccb      	bgt.n	801e236 <lv_slider_signal+0x16e>
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 801e29e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 801e2a2:	2502      	movs	r5, #2
 801e2a4:	1a9b      	subs	r3, r3, r2
 801e2a6:	fb93 f3f5 	sdiv	r3, r3, r5
 801e2aa:	4413      	add	r3, r2
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 801e2ac:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
 801e2b0:	1a12      	subs	r2, r2, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 801e2b2:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 801e2b4:	fb92 f2f5 	sdiv	r2, r2, r5
 801e2b8:	4402      	add	r2, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 801e2ba:	2b00      	cmp	r3, #0
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 801e2bc:	eba2 0201 	sub.w	r2, r2, r1
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 801e2c0:	bfb8      	it	lt
 801e2c2:	425b      	neglt	r3, r3
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 801e2c4:	2a00      	cmp	r2, #0
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e2c6:	b21b      	sxth	r3, r3
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 801e2c8:	bfb8      	it	lt
 801e2ca:	4252      	neglt	r2, r2
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 801e2cc:	b212      	sxth	r2, r2
 801e2ce:	4293      	cmp	r3, r2
 801e2d0:	e7d9      	b.n	801e286 <lv_slider_signal+0x1be>
    else if(sign == LV_SIGNAL_PRESSING && ext->value_to_set != NULL) {
 801e2d2:	f1b8 0f0c 	cmp.w	r8, #12
 801e2d6:	f47f af53 	bne.w	801e180 <lv_slider_signal+0xb8>
 801e2da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	f43f af4f 	beq.w	801e180 <lv_slider_signal+0xb8>
        if(lv_indev_get_type(param) != LV_INDEV_TYPE_POINTER) return res;
 801e2e2:	4638      	mov	r0, r7
 801e2e4:	f7e8 fa6e 	bl	80067c4 <lv_indev_get_type>
 801e2e8:	2801      	cmp	r0, #1
 801e2ea:	f47f af10 	bne.w	801e10e <lv_slider_signal+0x46>
        lv_indev_get_point(param, &p);
 801e2ee:	a903      	add	r1, sp, #12
 801e2f0:	4638      	mov	r0, r7
 801e2f2:	f7e8 faa2 	bl	800683a <lv_indev_get_point>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	f7ea f914 	bl	8008524 <lv_obj_get_base_dir>
 801e2fc:	4683      	mov	fp, r0
        lv_coord_t w = lv_obj_get_width(slider);
 801e2fe:	4628      	mov	r0, r5
 801e300:	f7e9 fce8 	bl	8007cd4 <lv_obj_get_width>
 801e304:	4680      	mov	r8, r0
        lv_coord_t h = lv_obj_get_height(slider);
 801e306:	4628      	mov	r0, r5
 801e308:	f7e9 fcf2 	bl	8007cf0 <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801e30c:	2212      	movs	r2, #18
 801e30e:	4607      	mov	r7, r0
 801e310:	2100      	movs	r1, #0
 801e312:	4628      	mov	r0, r5
 801e314:	f7ea fbca 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e318:	2213      	movs	r2, #19
 801e31a:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801e31c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e31e:	4628      	mov	r0, r5
 801e320:	f7ea fbc4 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e324:	2210      	movs	r2, #16
 801e326:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e328:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e32a:	4628      	mov	r0, r5
 801e32c:	f7ea fbbe 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801e330:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e332:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801e334:	2100      	movs	r1, #0
 801e336:	4628      	mov	r0, r5
 801e338:	f7ea fbb8 	bl	8008aac <_lv_obj_get_style_int>
        int32_t range = ext->bar.max_value - ext->bar.min_value;
 801e33c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e340:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        if(w >= h) {
 801e344:	45b8      	cmp	r8, r7
 801e346:	9b01      	ldr	r3, [sp, #4]
        int32_t range = ext->bar.max_value - ext->bar.min_value;
 801e348:	eba1 0c02 	sub.w	ip, r1, r2
        if(w >= h) {
 801e34c:	db3c      	blt.n	801e3c8 <lv_slider_signal+0x300>
            if(base_dir == LV_BIDI_DIR_RTL) {
 801e34e:	f1bb 0f01 	cmp.w	fp, #1
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e352:	fa1f fa8a 	uxth.w	sl, sl
 801e356:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e35a:	fa1f f989 	uxth.w	r9, r9
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801e35e:	bf0c      	ite	eq
 801e360:	8aa8      	ldrheq	r0, [r5, #20]
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e362:	8a28      	ldrhne	r0, [r5, #16]
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e364:	eba8 0809 	sub.w	r8, r8, r9
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801e368:	bf0c      	ite	eq
 801e36a:	eba0 000a 	subeq.w	r0, r0, sl
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e36e:	1a18      	subne	r0, r3, r0
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e370:	eba8 080a 	sub.w	r8, r8, sl
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801e374:	bf0c      	ite	eq
 801e376:	1ac0      	subeq	r0, r0, r3
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e378:	eba0 0009 	subne.w	r0, r0, r9
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e37c:	fa0f f888 	sxth.w	r8, r8
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e380:	b200      	sxth	r0, r0
            new_value = (new_value * range) / indic_w;
 801e382:	fb0c f000 	mul.w	r0, ip, r0
 801e386:	fb90 f0f8 	sdiv	r0, r0, r8
        if(ext->value_to_set == &ext->bar.start_value) {
 801e38a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e38c:	1da7      	adds	r7, r4, #6
            new_value += ext->bar.min_value;
 801e38e:	4410      	add	r0, r2
        if(ext->value_to_set == &ext->bar.start_value) {
 801e390:	42bb      	cmp	r3, r7
            new_value += ext->bar.min_value;
 801e392:	b200      	sxth	r0, r0
            real_min_value = ext->bar.start_value;
 801e394:	bf14      	ite	ne
 801e396:	f9b4 2006 	ldrshne.w	r2, [r4, #6]
            real_max_value = ext->bar.cur_value;
 801e39a:	f9b4 1000 	ldrsheq.w	r1, [r4]
        if(new_value < real_min_value) new_value = real_min_value;
 801e39e:	4290      	cmp	r0, r2
 801e3a0:	db03      	blt.n	801e3aa <lv_slider_signal+0x2e2>
 801e3a2:	4288      	cmp	r0, r1
 801e3a4:	4602      	mov	r2, r0
 801e3a6:	bfa8      	it	ge
 801e3a8:	460a      	movge	r2, r1
        if(*ext->value_to_set != new_value) {
 801e3aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e3ae:	4291      	cmp	r1, r2
 801e3b0:	f43f aead 	beq.w	801e10e <lv_slider_signal+0x46>
            *ext->value_to_set = new_value;
 801e3b4:	801a      	strh	r2, [r3, #0]
            lv_obj_invalidate(slider);
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f7e9 fdf8 	bl	8007fac <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801e3bc:	2200      	movs	r2, #0
 801e3be:	2110      	movs	r1, #16
 801e3c0:	4628      	mov	r0, r5
 801e3c2:	f7e9 fb77 	bl	8007ab4 <lv_event_send>
 801e3c6:	e6a1      	b.n	801e10c <lv_slider_signal+0x44>
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e3c8:	fa1f fe80 	uxth.w	lr, r0
            new_value = p.y - (slider->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801e3cc:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 801e3d0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e3d4:	eba7 070e 	sub.w	r7, r7, lr
            new_value = p.y - (slider->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801e3d8:	eba0 0008 	sub.w	r0, r0, r8
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e3dc:	1afb      	subs	r3, r7, r3
            new_value = p.y - (slider->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801e3de:	eba0 000e 	sub.w	r0, r0, lr
            new_value = (-new_value * range) / indic_h;
 801e3e2:	b21b      	sxth	r3, r3
 801e3e4:	b200      	sxth	r0, r0
 801e3e6:	4240      	negs	r0, r0
 801e3e8:	fb0c f000 	mul.w	r0, ip, r0
 801e3ec:	fb90 f0f3 	sdiv	r0, r0, r3
 801e3f0:	e7cb      	b.n	801e38a <lv_slider_signal+0x2c2>
                        ext->left_knob_focus = 0;
 801e3f2:	f367 0341 	bfi	r3, r7, #1, #1
 801e3f6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
                    lv_group_set_editing(g, false);
 801e3fa:	4639      	mov	r1, r7
 801e3fc:	4640      	mov	r0, r8
 801e3fe:	f7e7 ffa2 	bl	8006346 <lv_group_set_editing>
 801e402:	e684      	b.n	801e10e <lv_slider_signal+0x46>
    else if(sign == LV_SIGNAL_FOCUS) {
 801e404:	f1b8 0f16 	cmp.w	r8, #22
 801e408:	d10a      	bne.n	801e420 <lv_slider_signal+0x358>
        ext->left_knob_focus = 0;
 801e40a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e40e:	f36f 0341 	bfc	r3, #1, #1
 801e412:	e6df      	b.n	801e1d4 <lv_slider_signal+0x10c>
 801e414:	0802c354 	.word	0x0802c354
 801e418:	20028934 	.word	0x20028934
 801e41c:	0802c463 	.word	0x0802c463
    else if(sign == LV_SIGNAL_COORD_CHG) {
 801e420:	f1b8 0f02 	cmp.w	r8, #2
 801e424:	d11a      	bne.n	801e45c <lv_slider_signal+0x394>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e426:	4628      	mov	r0, r5
 801e428:	f7e9 fc54 	bl	8007cd4 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e42c:	88bb      	ldrh	r3, [r7, #4]
 801e42e:	883a      	ldrh	r2, [r7, #0]
 801e430:	3301      	adds	r3, #1
 801e432:	1a9b      	subs	r3, r3, r2
 801e434:	b21b      	sxth	r3, r3
 801e436:	4298      	cmp	r0, r3
 801e438:	d005      	beq.n	801e446 <lv_slider_signal+0x37e>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 801e43a:	69eb      	ldr	r3, [r5, #28]
 801e43c:	2200      	movs	r2, #0
 801e43e:	2106      	movs	r1, #6
 801e440:	4628      	mov	r0, r5
 801e442:	4798      	blx	r3
 801e444:	e663      	b.n	801e10e <lv_slider_signal+0x46>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 801e446:	4628      	mov	r0, r5
 801e448:	f7e9 fc52 	bl	8007cf0 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801e44c:	88fb      	ldrh	r3, [r7, #6]
 801e44e:	887a      	ldrh	r2, [r7, #2]
 801e450:	3301      	adds	r3, #1
 801e452:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 801e454:	b21b      	sxth	r3, r3
 801e456:	4298      	cmp	r0, r3
 801e458:	d1ef      	bne.n	801e43a <lv_slider_signal+0x372>
 801e45a:	e658      	b.n	801e10e <lv_slider_signal+0x46>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801e45c:	f1b8 0f06 	cmp.w	r8, #6
 801e460:	d145      	bne.n	801e4ee <lv_slider_signal+0x426>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801e462:	2212      	movs	r2, #18
 801e464:	2102      	movs	r1, #2
 801e466:	4628      	mov	r0, r5
 801e468:	f7ea fb20 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e46c:	2213      	movs	r2, #19
 801e46e:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int)
 801e470:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e472:	4628      	mov	r0, r5
 801e474:	f7ea fb1a 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e478:	2210      	movs	r2, #16
 801e47a:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int)
 801e47c:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e47e:	4628      	mov	r0, r5
 801e480:	f7ea fb14 	bl	8008aac <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801e484:	2211      	movs	r2, #17
 801e486:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int)
 801e488:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int)
 801e48a:	4628      	mov	r0, r5
 801e48c:	f7ea fb0e 	bl	8008aac <_lv_obj_get_style_int>
 801e490:	4607      	mov	r7, r0
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 801e492:	4628      	mov	r0, r5
 801e494:	f7e9 fc1e 	bl	8007cd4 <lv_obj_get_width>
 801e498:	4682      	mov	sl, r0
 801e49a:	4628      	mov	r0, r5
 801e49c:	f7e9 fc28 	bl	8007cf0 <lv_obj_get_height>
 801e4a0:	4582      	cmp	sl, r0
 801e4a2:	4628      	mov	r0, r5
 801e4a4:	da20      	bge.n	801e4e8 <lv_slider_signal+0x420>
 801e4a6:	f7e9 fc15 	bl	8007cd4 <lv_obj_get_width>
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 801e4aa:	454c      	cmp	r4, r9
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 801e4ac:	f340 034f 	sbfx	r3, r0, #1, #16
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 801e4b0:	4620      	mov	r0, r4
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 801e4b2:	f04f 0102 	mov.w	r1, #2
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 801e4b6:	bfb8      	it	lt
 801e4b8:	4648      	movlt	r0, r9
 801e4ba:	b200      	sxth	r0, r0
 801e4bc:	4540      	cmp	r0, r8
 801e4be:	bfb8      	it	lt
 801e4c0:	4640      	movlt	r0, r8
 801e4c2:	b204      	sxth	r4, r0
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 801e4c4:	4628      	mov	r0, r5
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 801e4c6:	42bc      	cmp	r4, r7
 801e4c8:	bfb8      	it	lt
 801e4ca:	463c      	movlt	r4, r7
        knob_size += 2;         /*For rounding error*/
 801e4cc:	3402      	adds	r4, #2
 801e4ce:	441c      	add	r4, r3
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 801e4d0:	f7ec f968 	bl	800a7a4 <lv_obj_get_draw_rect_ext_pad_size>
        knob_size += 2;         /*For rounding error*/
 801e4d4:	b2a4      	uxth	r4, r4
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 801e4d6:	4420      	add	r0, r4
        slider->ext_draw_pad = LV_MATH_MAX(slider->ext_draw_pad, knob_size);
 801e4d8:	f9b5 4032 	ldrsh.w	r4, [r5, #50]	; 0x32
 801e4dc:	b200      	sxth	r0, r0
 801e4de:	42a0      	cmp	r0, r4
 801e4e0:	bfb8      	it	lt
 801e4e2:	4620      	movlt	r0, r4
 801e4e4:	8668      	strh	r0, [r5, #50]	; 0x32
 801e4e6:	e612      	b.n	801e10e <lv_slider_signal+0x46>
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 801e4e8:	f7e9 fc02 	bl	8007cf0 <lv_obj_get_height>
 801e4ec:	e7dd      	b.n	801e4aa <lv_slider_signal+0x3e2>
    else if(sign == LV_SIGNAL_CONTROL) {
 801e4ee:	f1b8 0f18 	cmp.w	r8, #24
 801e4f2:	d12d      	bne.n	801e550 <lv_slider_signal+0x488>
        char c = *((char *)param);
 801e4f4:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801e4f6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801e4fa:	2a11      	cmp	r2, #17
 801e4fc:	d116      	bne.n	801e52c <lv_slider_signal+0x464>
            if(!ext->left_knob_focus) lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, LV_ANIM_ON);
 801e4fe:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e502:	4628      	mov	r0, r5
 801e504:	079a      	lsls	r2, r3, #30
 801e506:	d408      	bmi.n	801e51a <lv_slider_signal+0x452>
 801e508:	f7ff fdcc 	bl	801e0a4 <lv_slider_get_value>
 801e50c:	1c41      	adds	r1, r0, #1
    lv_bar_set_value(slider, value, anim);
 801e50e:	2201      	movs	r2, #1
 801e510:	b209      	sxth	r1, r1
 801e512:	4628      	mov	r0, r5
 801e514:	f7fb fa30 	bl	8019978 <lv_bar_set_value>
 801e518:	e750      	b.n	801e3bc <lv_slider_signal+0x2f4>
    return lv_bar_get_start_value(slider);
 801e51a:	f7fb fb41 	bl	8019ba0 <lv_bar_get_start_value>
            else lv_slider_set_left_value(slider, lv_slider_get_left_value(slider) + 1, LV_ANIM_ON);
 801e51e:	1c41      	adds	r1, r0, #1
    lv_bar_set_start_value(slider, left_value, anim);
 801e520:	2201      	movs	r2, #1
 801e522:	b209      	sxth	r1, r1
 801e524:	4628      	mov	r0, r5
 801e526:	f7fb faf1 	bl	8019b0c <lv_bar_set_start_value>
 801e52a:	e747      	b.n	801e3bc <lv_slider_signal+0x2f4>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801e52c:	2b14      	cmp	r3, #20
 801e52e:	d002      	beq.n	801e536 <lv_slider_signal+0x46e>
 801e530:	2b12      	cmp	r3, #18
 801e532:	f47f adec 	bne.w	801e10e <lv_slider_signal+0x46>
            if(!ext->left_knob_focus) lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, LV_ANIM_ON);
 801e536:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e53a:	4628      	mov	r0, r5
 801e53c:	079b      	lsls	r3, r3, #30
 801e53e:	d403      	bmi.n	801e548 <lv_slider_signal+0x480>
 801e540:	f7ff fdb0 	bl	801e0a4 <lv_slider_get_value>
 801e544:	1e41      	subs	r1, r0, #1
 801e546:	e7e2      	b.n	801e50e <lv_slider_signal+0x446>
    return lv_bar_get_start_value(slider);
 801e548:	f7fb fb2a 	bl	8019ba0 <lv_bar_get_start_value>
            else lv_slider_set_left_value(slider, lv_slider_get_left_value(slider) - 1, LV_ANIM_ON);
 801e54c:	1e41      	subs	r1, r0, #1
 801e54e:	e7e7      	b.n	801e520 <lv_slider_signal+0x458>
    else if(sign == LV_SIGNAL_CLEANUP) {
 801e550:	f1b8 0f00 	cmp.w	r8, #0
 801e554:	d104      	bne.n	801e560 <lv_slider_signal+0x498>
        lv_obj_clean_style_list(slider, LV_SLIDER_PART_KNOB);
 801e556:	2102      	movs	r1, #2
 801e558:	4628      	mov	r0, r5
 801e55a:	f7e9 fc33 	bl	8007dc4 <lv_obj_clean_style_list>
 801e55e:	e5d6      	b.n	801e10e <lv_slider_signal+0x46>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801e560:	f1b8 0f19 	cmp.w	r8, #25
 801e564:	f47f add3 	bne.w	801e10e <lv_slider_signal+0x46>
        *editable       = true;
 801e568:	2301      	movs	r3, #1
 801e56a:	703b      	strb	r3, [r7, #0]
 801e56c:	e5cf      	b.n	801e10e <lv_slider_signal+0x46>
 801e56e:	bf00      	nop

0801e570 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 801e570:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801e574:	4905      	ldr	r1, [pc, #20]	; (801e58c <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801e576:	4b06      	ldr	r3, [pc, #24]	; (801e590 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801e578:	68ca      	ldr	r2, [r1, #12]
 801e57a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801e57e:	4313      	orrs	r3, r2
 801e580:	60cb      	str	r3, [r1, #12]
 801e582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801e586:	bf00      	nop
 801e588:	e7fd      	b.n	801e586 <NVIC_SystemReset+0x16>
 801e58a:	bf00      	nop
 801e58c:	e000ed00 	.word	0xe000ed00
 801e590:	05fa0004 	.word	0x05fa0004

0801e594 <msgbox_event_cb>:
	/* Redemarrage de la carte */
	NVIC_SystemReset();
}

LV_EVENT_CB_DECLARE(msgbox_event_cb)
{
 801e594:	b508      	push	{r3, lr}
	NVIC_SystemReset();
 801e596:	f7ff ffeb 	bl	801e570 <NVIC_SystemReset>
	...

0801e59c <PANIC_Display>:
	switch (IT_Source)
 801e59c:	4b13      	ldr	r3, [pc, #76]	; (801e5ec <PANIC_Display+0x50>)
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	2b05      	cmp	r3, #5
void PANIC_Display(void) {
 801e5a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e5a4:	bf96      	itet	ls
 801e5a6:	4a12      	ldrls	r2, [pc, #72]	; (801e5f0 <PANIC_Display+0x54>)
	switch (IT_Source)
 801e5a8:	4d12      	ldrhi	r5, [pc, #72]	; (801e5f4 <PANIC_Display+0x58>)
 801e5aa:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
 801e5ae:	f7f4 fa2b 	bl	8012a08 <lv_disp_get_default>
 801e5b2:	f7e7 fd61 	bl	8006078 <lv_disp_get_scr_act>
	lv_obj_t * mbox1 = lv_msgbox_create(lv_scr_act(),NULL);
 801e5b6:	2100      	movs	r1, #0
 801e5b8:	f7ff fa06 	bl	801d9c8 <lv_msgbox_create>
 801e5bc:	4604      	mov	r4, r0
	lv_msgbox_add_btns(mbox1, btns);
 801e5be:	490e      	ldr	r1, [pc, #56]	; (801e5f8 <PANIC_Display+0x5c>)
 801e5c0:	f7ff fabc 	bl	801db3c <lv_msgbox_add_btns>
	lv_msgbox_set_text_fmt(mbox1, "%s\n%s",title,"An unrecoverable error occurred");
 801e5c4:	462a      	mov	r2, r5
 801e5c6:	4b0d      	ldr	r3, [pc, #52]	; (801e5fc <PANIC_Display+0x60>)
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	490d      	ldr	r1, [pc, #52]	; (801e600 <PANIC_Display+0x64>)
 801e5cc:	f7ff fb04 	bl	801dbd8 <lv_msgbox_set_text_fmt>
	lv_obj_set_event_cb(mbox1, msgbox_event_cb);
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	490c      	ldr	r1, [pc, #48]	; (801e604 <PANIC_Display+0x68>)
 801e5d4:	f7e9 fa10 	bl	80079f8 <lv_obj_set_event_cb>
	lv_obj_align(mbox1, NULL, LV_ALIGN_CENTER, 0, 0);
 801e5d8:	2300      	movs	r3, #0
 801e5da:	4620      	mov	r0, r4
 801e5dc:	461a      	mov	r2, r3
 801e5de:	4619      	mov	r1, r3
 801e5e0:	9300      	str	r3, [sp, #0]
 801e5e2:	f7e9 fdf7 	bl	80081d4 <lv_obj_align>
}
 801e5e6:	b003      	add	sp, #12
 801e5e8:	bd30      	pop	{r4, r5, pc}
 801e5ea:	bf00      	nop
 801e5ec:	2002893c 	.word	0x2002893c
 801e5f0:	0802c31c 	.word	0x0802c31c
 801e5f4:	0802c46d 	.word	0x0802c46d
 801e5f8:	200000e0 	.word	0x200000e0
 801e5fc:	0802c47b 	.word	0x0802c47b
 801e600:	0802c49b 	.word	0x0802c49b
 801e604:	0801e595 	.word	0x0801e595

0801e608 <PANIC_ReadStack>:
	if ( (sp >= (uint32_t*)0x20000000) && (sp <= (uint32_t*)(0x20001400)))
 801e608:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
	IT_Source = it_source;
 801e60c:	4b11      	ldr	r3, [pc, #68]	; (801e654 <PANIC_ReadStack+0x4c>)
	if ( (sp >= (uint32_t*)0x20000000) && (sp <= (uint32_t*)(0x20001400)))
 801e60e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
	IT_Source = it_source;
 801e612:	6018      	str	r0, [r3, #0]
	if ( (sp >= (uint32_t*)0x20000000) && (sp <= (uint32_t*)(0x20001400)))
 801e614:	d811      	bhi.n	801e63a <PANIC_ReadStack+0x32>
		R0 = sp[0];
 801e616:	680a      	ldr	r2, [r1, #0]
 801e618:	605a      	str	r2, [r3, #4]
		R1 = sp[1];
 801e61a:	684a      	ldr	r2, [r1, #4]
 801e61c:	609a      	str	r2, [r3, #8]
		R2 = sp[2];
 801e61e:	688a      	ldr	r2, [r1, #8]
 801e620:	60da      	str	r2, [r3, #12]
		R3 = sp[3];
 801e622:	68ca      	ldr	r2, [r1, #12]
 801e624:	611a      	str	r2, [r3, #16]
		R12 = sp[4];
 801e626:	690a      	ldr	r2, [r1, #16]
 801e628:	615a      	str	r2, [r3, #20]
		LR = sp[5];
 801e62a:	694a      	ldr	r2, [r1, #20]
 801e62c:	619a      	str	r2, [r3, #24]
		PC = sp[6];
 801e62e:	698a      	ldr	r2, [r1, #24]
 801e630:	61da      	str	r2, [r3, #28]
		XPSR = sp[7];
 801e632:	69ca      	ldr	r2, [r1, #28]
 801e634:	621a      	str	r2, [r3, #32]
	PANIC_Display();
 801e636:	f7ff bfb1 	b.w	801e59c <PANIC_Display>
		IT_Source = 5;
 801e63a:	2205      	movs	r2, #5
 801e63c:	601a      	str	r2, [r3, #0]
		R0=R1=R2=R3=R12=LR=PC=XPSR=0x0;
 801e63e:	2200      	movs	r2, #0
 801e640:	621a      	str	r2, [r3, #32]
 801e642:	61da      	str	r2, [r3, #28]
 801e644:	619a      	str	r2, [r3, #24]
 801e646:	615a      	str	r2, [r3, #20]
 801e648:	611a      	str	r2, [r3, #16]
 801e64a:	60da      	str	r2, [r3, #12]
 801e64c:	609a      	str	r2, [r3, #8]
 801e64e:	605a      	str	r2, [r3, #4]
		SP = (uint32_t)sp;
 801e650:	6259      	str	r1, [r3, #36]	; 0x24
 801e652:	e7f0      	b.n	801e636 <PANIC_ReadStack+0x2e>
 801e654:	2002893c 	.word	0x2002893c

0801e658 <WRAPPER_Init>:
}

/**
 * Init function for legacy wrapper, in charge of initializing Timer 7, for example
 */
void WRAPPER_Init (void) {
 801e658:	b510      	push	{r4, lr}
	uint32_t              uwPrescalerValue = 0U;
	uint32_t              pFLatency;
	//uint8_t  			  status = 0;

	/* Configure the TIM7 IRQ priority */
	HAL_NVIC_SetPriority(TIM7_IRQn, 0xFU ,0U);
 801e65a:	2200      	movs	r2, #0
void WRAPPER_Init (void) {
 801e65c:	b088      	sub	sp, #32
	HAL_NVIC_SetPriority(TIM7_IRQn, 0xFU ,0U);
 801e65e:	210f      	movs	r1, #15
 801e660:	2037      	movs	r0, #55	; 0x37
 801e662:	f7e3 fded 	bl	8002240 <HAL_NVIC_SetPriority>

	/* Enable the TIM7 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801e666:	2037      	movs	r0, #55	; 0x37
 801e668:	f7e3 fe1c 	bl	80022a4 <HAL_NVIC_EnableIRQ>

	/* Enable TIM7 clock */
	__HAL_RCC_TIM7_CLK_ENABLE();
 801e66c:	4b19      	ldr	r3, [pc, #100]	; (801e6d4 <WRAPPER_Init+0x7c>)

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801e66e:	a901      	add	r1, sp, #4
 801e670:	a803      	add	r0, sp, #12
	__HAL_RCC_TIM7_CLK_ENABLE();
 801e672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e674:	f042 0220 	orr.w	r2, r2, #32
 801e678:	641a      	str	r2, [r3, #64]	; 0x40
 801e67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e67c:	f003 0320 	and.w	r3, r3, #32
 801e680:	9302      	str	r3, [sp, #8]
 801e682:	9b02      	ldr	r3, [sp, #8]
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801e684:	f7e5 fb64 	bl	8003d50 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;

	/* Compute TIM7 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801e688:	9b06      	ldr	r3, [sp, #24]
 801e68a:	b9f3      	cbnz	r3, 801e6ca <WRAPPER_Init+0x72>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 801e68c:	f7e5 fb40 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>

	/* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

	/* Initialize TIM7 */
	LegacyTimHandle.Instance = TIM7;
 801e690:	4c11      	ldr	r4, [pc, #68]	; (801e6d8 <WRAPPER_Init+0x80>)
 801e692:	4b12      	ldr	r3, [pc, #72]	; (801e6dc <WRAPPER_Init+0x84>)
 801e694:	6023      	str	r3, [r4, #0]
	  + Period = [(TIM7CLK/100) - 1]. to have a (1/100) s time base.
	  + Prescaler = (uwTimclock/100000 - 1) to have a 0.1MHz counter clock.
	  + ClockDivision = 0
	  + Counter direction = Up
	 */
	LegacyTimHandle.Init.Period = (1000000U / 100U) - 1U;
 801e696:	f242 730f 	movw	r3, #9999	; 0x270f
 801e69a:	60e3      	str	r3, [r4, #12]
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801e69c:	4b10      	ldr	r3, [pc, #64]	; (801e6e0 <WRAPPER_Init+0x88>)
 801e69e:	fbb0 f0f3 	udiv	r0, r0, r3
	LegacyTimHandle.Init.Prescaler = uwPrescalerValue*10;
 801e6a2:	230a      	movs	r3, #10
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801e6a4:	3801      	subs	r0, #1
	LegacyTimHandle.Init.Prescaler = uwPrescalerValue*10;
 801e6a6:	4358      	muls	r0, r3
	LegacyTimHandle.Init.ClockDivision = 0;
 801e6a8:	2300      	movs	r3, #0
	LegacyTimHandle.Init.Prescaler = uwPrescalerValue*10;
 801e6aa:	6060      	str	r0, [r4, #4]
	LegacyTimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
	LegacyTimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

	if(HAL_TIM_Base_Init(&LegacyTimHandle) == HAL_OK)
 801e6ac:	4620      	mov	r0, r4
	LegacyTimHandle.Init.ClockDivision = 0;
 801e6ae:	6123      	str	r3, [r4, #16]
	LegacyTimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e6b0:	60a3      	str	r3, [r4, #8]
	LegacyTimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e6b2:	61a3      	str	r3, [r4, #24]
	if(HAL_TIM_Base_Init(&LegacyTimHandle) == HAL_OK)
 801e6b4:	f7e6 fb02 	bl	8004cbc <HAL_TIM_Base_Init>
 801e6b8:	b910      	cbnz	r0, 801e6c0 <WRAPPER_Init+0x68>
	{
		/* Start the TIM time Base generation with interrupt disabled  */
		HAL_TIM_Base_Start(&LegacyTimHandle);
 801e6ba:	4620      	mov	r0, r4
 801e6bc:	f7e6 f9cb 	bl	8004a56 <HAL_TIM_Base_Start>
	AUDIO_Init();*/

	/* Init Melody timer */
	//MELODY_Init();

	POT_LastVal=1;
 801e6c0:	4b08      	ldr	r3, [pc, #32]	; (801e6e4 <WRAPPER_Init+0x8c>)
 801e6c2:	2201      	movs	r2, #1
 801e6c4:	701a      	strb	r2, [r3, #0]
}
 801e6c6:	b008      	add	sp, #32
 801e6c8:	bd10      	pop	{r4, pc}
		uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801e6ca:	f7e5 fb21 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 801e6ce:	0040      	lsls	r0, r0, #1
 801e6d0:	e7de      	b.n	801e690 <WRAPPER_Init+0x38>
 801e6d2:	bf00      	nop
 801e6d4:	40023800 	.word	0x40023800
 801e6d8:	20028d84 	.word	0x20028d84
 801e6dc:	40001400 	.word	0x40001400
 801e6e0:	000f4240 	.word	0x000f4240
 801e6e4:	20028d74 	.word	0x20028d74

0801e6e8 <TIM7_IRQHandler>:
/**
 * @brief  This function handles TIM7 interrupt request.
 * @retval None
 */
void TIM7_IRQHandler (void)
{
 801e6e8:	b510      	push	{r4, lr}
	HAL_TIM_IRQHandler(&LegacyTimHandle);
 801e6ea:	4805      	ldr	r0, [pc, #20]	; (801e700 <TIM7_IRQHandler+0x18>)
 801e6ec:	f7e6 f9cf 	bl	8004a8e <HAL_TIM_IRQHandler>

	if (LegacyTimerCallback != 0x0) LegacyTimerCallback();
 801e6f0:	4b04      	ldr	r3, [pc, #16]	; (801e704 <TIM7_IRQHandler+0x1c>)
 801e6f2:	68db      	ldr	r3, [r3, #12]
 801e6f4:	b113      	cbz	r3, 801e6fc <TIM7_IRQHandler+0x14>
}
 801e6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (LegacyTimerCallback != 0x0) LegacyTimerCallback();
 801e6fa:	4718      	bx	r3
}
 801e6fc:	bd10      	pop	{r4, pc}
 801e6fe:	bf00      	nop
 801e700:	20028d84 	.word	0x20028d84
 801e704:	20028964 	.word	0x20028964

0801e708 <button_event_cb>:
	}
}

LV_EVENT_CB_DECLARE(button_event_cb)
{
	if (e == LV_EVENT_CLICKED)
 801e708:	2906      	cmp	r1, #6
 801e70a:	d102      	bne.n	801e712 <button_event_cb+0xa>
	{
		__IO uint32_t *p=0x30000001;
		*p=0x1;
 801e70c:	4b01      	ldr	r3, [pc, #4]	; (801e714 <button_event_cb+0xc>)
 801e70e:	2201      	movs	r2, #1
 801e710:	601a      	str	r2, [r3, #0]
	}
}
 801e712:	4770      	bx	lr
 801e714:	30000001 	.word	0x30000001

0801e718 <lv_scr_act>:
{
 801e718:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
 801e71a:	f7f4 f975 	bl	8012a08 <lv_disp_get_default>
}
 801e71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
 801e722:	f7e7 bca9 	b.w	8006078 <lv_disp_get_scr_act>
	...

0801e728 <slider_2_event_cb>:
	if (e == LV_EVENT_VALUE_CHANGED)
 801e728:	2910      	cmp	r1, #16
{
 801e72a:	b530      	push	{r4, r5, lr}
 801e72c:	4605      	mov	r5, r0
 801e72e:	b085      	sub	sp, #20
	if (e == LV_EVENT_VALUE_CHANGED)
 801e730:	d115      	bne.n	801e75e <slider_2_event_cb+0x36>
		lv_snprintf(buf, sizeof(buf), "%d%%", lv_slider_get_value(slider));
 801e732:	f7ff fcb7 	bl	801e0a4 <lv_slider_get_value>
 801e736:	2108      	movs	r1, #8
		lv_label_set_text(slider_label_2, buf);
 801e738:	4c0a      	ldr	r4, [pc, #40]	; (801e764 <slider_2_event_cb+0x3c>)
		lv_snprintf(buf, sizeof(buf), "%d%%", lv_slider_get_value(slider));
 801e73a:	4603      	mov	r3, r0
 801e73c:	4a0a      	ldr	r2, [pc, #40]	; (801e768 <slider_2_event_cb+0x40>)
 801e73e:	eb0d 0001 	add.w	r0, sp, r1
 801e742:	f7f6 f83d 	bl	80147c0 <lv_snprintf>
		lv_label_set_text(slider_label_2, buf);
 801e746:	a902      	add	r1, sp, #8
 801e748:	6820      	ldr	r0, [r4, #0]
 801e74a:	f7fe fe13 	bl	801d374 <lv_label_set_text>
		lv_obj_align(slider_label_2, slider, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
 801e74e:	230a      	movs	r3, #10
 801e750:	220d      	movs	r2, #13
 801e752:	4629      	mov	r1, r5
 801e754:	9300      	str	r3, [sp, #0]
 801e756:	2300      	movs	r3, #0
 801e758:	6820      	ldr	r0, [r4, #0]
 801e75a:	f7e9 fd3b 	bl	80081d4 <lv_obj_align>
}
 801e75e:	b005      	add	sp, #20
 801e760:	bd30      	pop	{r4, r5, pc}
 801e762:	bf00      	nop
 801e764:	20028974 	.word	0x20028974
 801e768:	0802c501 	.word	0x0802c501

0801e76c <slider_1_event_cb>:
	if (e == LV_EVENT_VALUE_CHANGED)
 801e76c:	2910      	cmp	r1, #16
{
 801e76e:	b530      	push	{r4, r5, lr}
 801e770:	4605      	mov	r5, r0
 801e772:	b085      	sub	sp, #20
	if (e == LV_EVENT_VALUE_CHANGED)
 801e774:	d115      	bne.n	801e7a2 <slider_1_event_cb+0x36>
		lv_snprintf(buf, sizeof(buf), "%d%%", lv_slider_get_value(slider));
 801e776:	f7ff fc95 	bl	801e0a4 <lv_slider_get_value>
 801e77a:	2108      	movs	r1, #8
		lv_label_set_text(slider_label_1, buf);
 801e77c:	4c0a      	ldr	r4, [pc, #40]	; (801e7a8 <slider_1_event_cb+0x3c>)
		lv_snprintf(buf, sizeof(buf), "%d%%", lv_slider_get_value(slider));
 801e77e:	4603      	mov	r3, r0
 801e780:	4a0a      	ldr	r2, [pc, #40]	; (801e7ac <slider_1_event_cb+0x40>)
 801e782:	eb0d 0001 	add.w	r0, sp, r1
 801e786:	f7f6 f81b 	bl	80147c0 <lv_snprintf>
		lv_label_set_text(slider_label_1, buf);
 801e78a:	a902      	add	r1, sp, #8
 801e78c:	6860      	ldr	r0, [r4, #4]
 801e78e:	f7fe fdf1 	bl	801d374 <lv_label_set_text>
		lv_obj_align(slider_label_1, slider, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
 801e792:	230a      	movs	r3, #10
 801e794:	220d      	movs	r2, #13
 801e796:	4629      	mov	r1, r5
 801e798:	9300      	str	r3, [sp, #0]
 801e79a:	2300      	movs	r3, #0
 801e79c:	6860      	ldr	r0, [r4, #4]
 801e79e:	f7e9 fd19 	bl	80081d4 <lv_obj_align>
}
 801e7a2:	b005      	add	sp, #20
 801e7a4:	bd30      	pop	{r4, r5, pc}
 801e7a6:	bf00      	nop
 801e7a8:	20028974 	.word	0x20028974
 801e7ac:	0802c501 	.word	0x0802c501

0801e7b0 <test_ui>:
{
 801e7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lv_obj_t * slider_1 = lv_slider_create(lv_scr_act(),NULL);
 801e7b2:	f7ff ffb1 	bl	801e718 <lv_scr_act>
 801e7b6:	2100      	movs	r1, #0
 801e7b8:	f7ff fbee 	bl	801df98 <lv_slider_create>
	lv_obj_align(slider_1, NULL, LV_ALIGN_CENTER, 0, -70);
 801e7bc:	f06f 0345 	mvn.w	r3, #69	; 0x45
	lv_obj_t * slider_1 = lv_slider_create(lv_scr_act(),NULL);
 801e7c0:	4606      	mov	r6, r0
	lv_label_set_text(slider_label_1, "0%");
 801e7c2:	4f2f      	ldr	r7, [pc, #188]	; (801e880 <test_ui+0xd0>)
	lv_obj_align(slider_1, NULL, LV_ALIGN_CENTER, 0, -70);
 801e7c4:	9300      	str	r3, [sp, #0]
 801e7c6:	2300      	movs	r3, #0
	slider_label_1 = lv_label_create(lv_scr_act(),NULL);
 801e7c8:	4c2e      	ldr	r4, [pc, #184]	; (801e884 <test_ui+0xd4>)
	lv_obj_align(slider_label_1, slider_1, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
 801e7ca:	250a      	movs	r5, #10
	lv_obj_align(slider_1, NULL, LV_ALIGN_CENTER, 0, -70);
 801e7cc:	461a      	mov	r2, r3
 801e7ce:	4619      	mov	r1, r3
 801e7d0:	f7e9 fd00 	bl	80081d4 <lv_obj_align>
	lv_obj_set_event_cb(slider_1, slider_1_event_cb);
 801e7d4:	492c      	ldr	r1, [pc, #176]	; (801e888 <test_ui+0xd8>)
 801e7d6:	4630      	mov	r0, r6
 801e7d8:	f7e9 f90e 	bl	80079f8 <lv_obj_set_event_cb>
	slider_label_1 = lv_label_create(lv_scr_act(),NULL);
 801e7dc:	f7ff ff9c 	bl	801e718 <lv_scr_act>
 801e7e0:	2100      	movs	r1, #0
 801e7e2:	f7fe febd 	bl	801d560 <lv_label_create>
	lv_label_set_text(slider_label_1, "0%");
 801e7e6:	4639      	mov	r1, r7
	slider_label_1 = lv_label_create(lv_scr_act(),NULL);
 801e7e8:	6060      	str	r0, [r4, #4]
	lv_label_set_text(slider_label_1, "0%");
 801e7ea:	f7fe fdc3 	bl	801d374 <lv_label_set_text>
	lv_obj_align(slider_label_1, slider_1, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	220d      	movs	r2, #13
 801e7f2:	4631      	mov	r1, r6
 801e7f4:	9500      	str	r5, [sp, #0]
 801e7f6:	6860      	ldr	r0, [r4, #4]
 801e7f8:	f7e9 fcec 	bl	80081d4 <lv_obj_align>
	lv_obj_t * slider_2 = lv_slider_create(lv_scr_act(),NULL);
 801e7fc:	f7ff ff8c 	bl	801e718 <lv_scr_act>
 801e800:	2100      	movs	r1, #0
 801e802:	f7ff fbc9 	bl	801df98 <lv_slider_create>
	lv_obj_align(slider_2, NULL, LV_ALIGN_CENTER, 0, +10);
 801e806:	2300      	movs	r3, #0
	lv_obj_t * slider_2 = lv_slider_create(lv_scr_act(),NULL);
 801e808:	4606      	mov	r6, r0
	lv_obj_align(slider_2, NULL, LV_ALIGN_CENTER, 0, +10);
 801e80a:	9500      	str	r5, [sp, #0]
 801e80c:	461a      	mov	r2, r3
 801e80e:	4619      	mov	r1, r3
 801e810:	f7e9 fce0 	bl	80081d4 <lv_obj_align>
	lv_obj_set_event_cb(slider_2, slider_2_event_cb);
 801e814:	491d      	ldr	r1, [pc, #116]	; (801e88c <test_ui+0xdc>)
 801e816:	4630      	mov	r0, r6
 801e818:	f7e9 f8ee 	bl	80079f8 <lv_obj_set_event_cb>
	slider_label_2 = lv_label_create(lv_scr_act(),NULL);
 801e81c:	f7ff ff7c 	bl	801e718 <lv_scr_act>
 801e820:	2100      	movs	r1, #0
 801e822:	f7fe fe9d 	bl	801d560 <lv_label_create>
	lv_label_set_text(slider_label_2, "0%");
 801e826:	4639      	mov	r1, r7
	slider_label_2 = lv_label_create(lv_scr_act(),NULL);
 801e828:	6020      	str	r0, [r4, #0]
	lv_label_set_text(slider_label_2, "0%");
 801e82a:	f7fe fda3 	bl	801d374 <lv_label_set_text>
	lv_obj_align(slider_label_2, slider_2, LV_ALIGN_OUT_BOTTOM_MID, 0, 10);
 801e82e:	2300      	movs	r3, #0
 801e830:	220d      	movs	r2, #13
 801e832:	4631      	mov	r1, r6
 801e834:	9500      	str	r5, [sp, #0]
 801e836:	6820      	ldr	r0, [r4, #0]
 801e838:	f7e9 fccc 	bl	80081d4 <lv_obj_align>
	lv_obj_t *button= lv_btn_create(lv_scr_act(),NULL);
 801e83c:	f7ff ff6c 	bl	801e718 <lv_scr_act>
 801e840:	2100      	movs	r1, #0
 801e842:	f7fb f9f9 	bl	8019c38 <lv_btn_create>
	lv_obj_set_event_cb(button, button_event_cb);
 801e846:	4912      	ldr	r1, [pc, #72]	; (801e890 <test_ui+0xe0>)
	lv_obj_t *button= lv_btn_create(lv_scr_act(),NULL);
 801e848:	4604      	mov	r4, r0
	lv_obj_set_event_cb(button, button_event_cb);
 801e84a:	f7e9 f8d5 	bl	80079f8 <lv_obj_set_event_cb>
	lv_obj_align(button, NULL, LV_ALIGN_CENTER, 0, 70);
 801e84e:	2346      	movs	r3, #70	; 0x46
 801e850:	4620      	mov	r0, r4
 801e852:	9300      	str	r3, [sp, #0]
 801e854:	2300      	movs	r3, #0
 801e856:	461a      	mov	r2, r3
 801e858:	4619      	mov	r1, r3
 801e85a:	f7e9 fcbb 	bl	80081d4 <lv_obj_align>
	lv_obj_t *label = lv_label_create(button, NULL);
 801e85e:	2100      	movs	r1, #0
 801e860:	4620      	mov	r0, r4
 801e862:	f7fe fe7d 	bl	801d560 <lv_label_create>
    lv_label_set_text(label, "Button");
 801e866:	490b      	ldr	r1, [pc, #44]	; (801e894 <test_ui+0xe4>)
	lv_obj_t *label = lv_label_create(button, NULL);
 801e868:	4604      	mov	r4, r0
    lv_label_set_text(label, "Button");
 801e86a:	f7fe fd83 	bl	801d374 <lv_label_set_text>
    lv_obj_align(label, NULL, LV_ALIGN_CENTER, 0, 0);
 801e86e:	2300      	movs	r3, #0
 801e870:	4620      	mov	r0, r4
 801e872:	461a      	mov	r2, r3
 801e874:	4619      	mov	r1, r3
 801e876:	9300      	str	r3, [sp, #0]
 801e878:	f7e9 fcac 	bl	80081d4 <lv_obj_align>
}
 801e87c:	b003      	add	sp, #12
 801e87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e880:	0802c506 	.word	0x0802c506
 801e884:	20028974 	.word	0x20028974
 801e888:	0801e76d 	.word	0x0801e76d
 801e88c:	0801e729 	.word	0x0801e729
 801e890:	0801e709 	.word	0x0801e709
 801e894:	0802c509 	.word	0x0802c509

0801e898 <main>:
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 801e898:	4b21      	ldr	r3, [pc, #132]	; (801e920 <main+0x88>)
 801e89a:	2200      	movs	r2, #0
{
 801e89c:	b580      	push	{r7, lr}
 801e89e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801e8a2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 801e8a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801e8aa:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801e8ae:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801e8b2:	f3c2 324e 	ubfx	r2, r2, #13, #15
 801e8b6:	07a5      	lsls	r5, r4, #30
 801e8b8:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801e8ba:	ea02 0c06 	and.w	ip, r2, r6
 801e8be:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801e8c0:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801e8c2:	ea4c 0700 	orr.w	r7, ip, r0
      } while (ways--);
 801e8c6:	3901      	subs	r1, #1
 801e8c8:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801e8cc:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 801e8d0:	1c4f      	adds	r7, r1, #1
 801e8d2:	d1f6      	bne.n	801e8c2 <main+0x2a>
 801e8d4:	3a20      	subs	r2, #32
    } while(sets--);
 801e8d6:	f112 0f20 	cmn.w	r2, #32
 801e8da:	d1ee      	bne.n	801e8ba <main+0x22>
 801e8dc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801e8e0:	695a      	ldr	r2, [r3, #20]
 801e8e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801e8e6:	615a      	str	r2, [r3, #20]
 801e8e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801e8ec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 801e8f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801e8f4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801e8fe:	695a      	ldr	r2, [r3, #20]
 801e900:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801e904:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801e906:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801e90a:	f3bf 8f6f 	isb	sy
	init_bsp();
 801e90e:	f7e7 fa3f 	bl	8005d90 <init_bsp>
	test_ui();
 801e912:	f7ff ff4d 	bl	801e7b0 <test_ui>
		HAL_Delay(5);
 801e916:	2005      	movs	r0, #5
 801e918:	f7e3 fc6e 	bl	80021f8 <HAL_Delay>
 801e91c:	e7fb      	b.n	801e916 <main+0x7e>
 801e91e:	bf00      	nop
 801e920:	e000ed00 	.word	0xe000ed00

0801e924 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 801e924:	2001      	movs	r0, #1
 801e926:	4770      	bx	lr

0801e928 <_kill>:

int _kill(int pid, int sig)
{
 801e928:	b508      	push	{r3, lr}
	errno = EINVAL;
 801e92a:	f000 f855 	bl	801e9d8 <__errno>
 801e92e:	2316      	movs	r3, #22
 801e930:	6003      	str	r3, [r0, #0]
	return -1;
}
 801e932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e936:	bd08      	pop	{r3, pc}

0801e938 <_exit>:

void _exit (int status)
{
 801e938:	b508      	push	{r3, lr}
	errno = EINVAL;
 801e93a:	f000 f84d 	bl	801e9d8 <__errno>
 801e93e:	2316      	movs	r3, #22
 801e940:	6003      	str	r3, [r0, #0]
 801e942:	e7fe      	b.n	801e942 <_exit+0xa>

0801e944 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 801e944:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801e946:	4b0a      	ldr	r3, [pc, #40]	; (801e970 <_sbrk+0x2c>)
{
 801e948:	4602      	mov	r2, r0
	if (heap_end == 0)
 801e94a:	6819      	ldr	r1, [r3, #0]
 801e94c:	b909      	cbnz	r1, 801e952 <_sbrk+0xe>
		heap_end = &end;
 801e94e:	4909      	ldr	r1, [pc, #36]	; (801e974 <_sbrk+0x30>)
 801e950:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 801e952:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801e954:	4669      	mov	r1, sp
 801e956:	4402      	add	r2, r0
 801e958:	428a      	cmp	r2, r1
 801e95a:	d906      	bls.n	801e96a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801e95c:	f000 f83c 	bl	801e9d8 <__errno>
 801e960:	230c      	movs	r3, #12
 801e962:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801e964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 801e968:	bd08      	pop	{r3, pc}
	heap_end += incr;
 801e96a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 801e96c:	e7fc      	b.n	801e968 <_sbrk+0x24>
 801e96e:	bf00      	nop
 801e970:	2002897c 	.word	0x2002897c
 801e974:	20028dd8 	.word	0x20028dd8

0801e978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801e978:	f8df d034 	ldr.w	sp, [pc, #52]	; 801e9b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801e97c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801e97e:	e003      	b.n	801e988 <LoopCopyDataInit>

0801e980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801e980:	4b0c      	ldr	r3, [pc, #48]	; (801e9b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801e982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801e984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801e986:	3104      	adds	r1, #4

0801e988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801e988:	480b      	ldr	r0, [pc, #44]	; (801e9b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801e98a:	4b0c      	ldr	r3, [pc, #48]	; (801e9bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801e98c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801e98e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801e990:	d3f6      	bcc.n	801e980 <CopyDataInit>
  ldr  r2, =_sbss
 801e992:	4a0b      	ldr	r2, [pc, #44]	; (801e9c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801e994:	e002      	b.n	801e99c <LoopFillZerobss>

0801e996 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801e996:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801e998:	f842 3b04 	str.w	r3, [r2], #4

0801e99c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801e99c:	4b09      	ldr	r3, [pc, #36]	; (801e9c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801e99e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801e9a0:	d3f9      	bcc.n	801e996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801e9a2:	f7e7 fa6f 	bl	8005e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801e9a6:	f000 f81d 	bl	801e9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801e9aa:	f7ff ff75 	bl	801e898 <main>
  bx  lr    
 801e9ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801e9b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 801e9b4:	0802c5b4 	.word	0x0802c5b4
  ldr  r0, =_sdata
 801e9b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801e9bc:	2000014c 	.word	0x2000014c
  ldr  r2, =_sbss
 801e9c0:	2001ff4c 	.word	0x2001ff4c
  ldr  r3, = _ebss
 801e9c4:	20028dd4 	.word	0x20028dd4

0801e9c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801e9c8:	e7fe      	b.n	801e9c8 <ADC_IRQHandler>

0801e9ca <abort>:
 801e9ca:	b508      	push	{r3, lr}
 801e9cc:	2006      	movs	r0, #6
 801e9ce:	f000 f86f 	bl	801eab0 <raise>
 801e9d2:	2001      	movs	r0, #1
 801e9d4:	f7ff ffb0 	bl	801e938 <_exit>

0801e9d8 <__errno>:
 801e9d8:	4b01      	ldr	r3, [pc, #4]	; (801e9e0 <__errno+0x8>)
 801e9da:	6818      	ldr	r0, [r3, #0]
 801e9dc:	4770      	bx	lr
 801e9de:	bf00      	nop
 801e9e0:	200000e8 	.word	0x200000e8

0801e9e4 <__libc_init_array>:
 801e9e4:	b570      	push	{r4, r5, r6, lr}
 801e9e6:	4e0d      	ldr	r6, [pc, #52]	; (801ea1c <__libc_init_array+0x38>)
 801e9e8:	4c0d      	ldr	r4, [pc, #52]	; (801ea20 <__libc_init_array+0x3c>)
 801e9ea:	1ba4      	subs	r4, r4, r6
 801e9ec:	10a4      	asrs	r4, r4, #2
 801e9ee:	2500      	movs	r5, #0
 801e9f0:	42a5      	cmp	r5, r4
 801e9f2:	d109      	bne.n	801ea08 <__libc_init_array+0x24>
 801e9f4:	4e0b      	ldr	r6, [pc, #44]	; (801ea24 <__libc_init_array+0x40>)
 801e9f6:	4c0c      	ldr	r4, [pc, #48]	; (801ea28 <__libc_init_array+0x44>)
 801e9f8:	f000 fc7a 	bl	801f2f0 <_init>
 801e9fc:	1ba4      	subs	r4, r4, r6
 801e9fe:	10a4      	asrs	r4, r4, #2
 801ea00:	2500      	movs	r5, #0
 801ea02:	42a5      	cmp	r5, r4
 801ea04:	d105      	bne.n	801ea12 <__libc_init_array+0x2e>
 801ea06:	bd70      	pop	{r4, r5, r6, pc}
 801ea08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ea0c:	4798      	blx	r3
 801ea0e:	3501      	adds	r5, #1
 801ea10:	e7ee      	b.n	801e9f0 <__libc_init_array+0xc>
 801ea12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ea16:	4798      	blx	r3
 801ea18:	3501      	adds	r5, #1
 801ea1a:	e7f2      	b.n	801ea02 <__libc_init_array+0x1e>
 801ea1c:	0802c5ac 	.word	0x0802c5ac
 801ea20:	0802c5ac 	.word	0x0802c5ac
 801ea24:	0802c5ac 	.word	0x0802c5ac
 801ea28:	0802c5b0 	.word	0x0802c5b0

0801ea2c <memcmp>:
 801ea2c:	b530      	push	{r4, r5, lr}
 801ea2e:	2400      	movs	r4, #0
 801ea30:	42a2      	cmp	r2, r4
 801ea32:	d101      	bne.n	801ea38 <memcmp+0xc>
 801ea34:	2000      	movs	r0, #0
 801ea36:	e007      	b.n	801ea48 <memcmp+0x1c>
 801ea38:	5d03      	ldrb	r3, [r0, r4]
 801ea3a:	3401      	adds	r4, #1
 801ea3c:	190d      	adds	r5, r1, r4
 801ea3e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ea42:	42ab      	cmp	r3, r5
 801ea44:	d0f4      	beq.n	801ea30 <memcmp+0x4>
 801ea46:	1b58      	subs	r0, r3, r5
 801ea48:	bd30      	pop	{r4, r5, pc}

0801ea4a <memcpy>:
 801ea4a:	b510      	push	{r4, lr}
 801ea4c:	1e43      	subs	r3, r0, #1
 801ea4e:	440a      	add	r2, r1
 801ea50:	4291      	cmp	r1, r2
 801ea52:	d100      	bne.n	801ea56 <memcpy+0xc>
 801ea54:	bd10      	pop	{r4, pc}
 801ea56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ea5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ea5e:	e7f7      	b.n	801ea50 <memcpy+0x6>

0801ea60 <_raise_r>:
 801ea60:	291f      	cmp	r1, #31
 801ea62:	b538      	push	{r3, r4, r5, lr}
 801ea64:	4604      	mov	r4, r0
 801ea66:	460d      	mov	r5, r1
 801ea68:	d904      	bls.n	801ea74 <_raise_r+0x14>
 801ea6a:	2316      	movs	r3, #22
 801ea6c:	6003      	str	r3, [r0, #0]
 801ea6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ea72:	bd38      	pop	{r3, r4, r5, pc}
 801ea74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ea76:	b112      	cbz	r2, 801ea7e <_raise_r+0x1e>
 801ea78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea7c:	b94b      	cbnz	r3, 801ea92 <_raise_r+0x32>
 801ea7e:	4620      	mov	r0, r4
 801ea80:	f000 f830 	bl	801eae4 <_getpid_r>
 801ea84:	462a      	mov	r2, r5
 801ea86:	4601      	mov	r1, r0
 801ea88:	4620      	mov	r0, r4
 801ea8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea8e:	f000 b817 	b.w	801eac0 <_kill_r>
 801ea92:	2b01      	cmp	r3, #1
 801ea94:	d00a      	beq.n	801eaac <_raise_r+0x4c>
 801ea96:	1c59      	adds	r1, r3, #1
 801ea98:	d103      	bne.n	801eaa2 <_raise_r+0x42>
 801ea9a:	2316      	movs	r3, #22
 801ea9c:	6003      	str	r3, [r0, #0]
 801ea9e:	2001      	movs	r0, #1
 801eaa0:	e7e7      	b.n	801ea72 <_raise_r+0x12>
 801eaa2:	2400      	movs	r4, #0
 801eaa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eaa8:	4628      	mov	r0, r5
 801eaaa:	4798      	blx	r3
 801eaac:	2000      	movs	r0, #0
 801eaae:	e7e0      	b.n	801ea72 <_raise_r+0x12>

0801eab0 <raise>:
 801eab0:	4b02      	ldr	r3, [pc, #8]	; (801eabc <raise+0xc>)
 801eab2:	4601      	mov	r1, r0
 801eab4:	6818      	ldr	r0, [r3, #0]
 801eab6:	f7ff bfd3 	b.w	801ea60 <_raise_r>
 801eaba:	bf00      	nop
 801eabc:	200000e8 	.word	0x200000e8

0801eac0 <_kill_r>:
 801eac0:	b538      	push	{r3, r4, r5, lr}
 801eac2:	4c07      	ldr	r4, [pc, #28]	; (801eae0 <_kill_r+0x20>)
 801eac4:	2300      	movs	r3, #0
 801eac6:	4605      	mov	r5, r0
 801eac8:	4608      	mov	r0, r1
 801eaca:	4611      	mov	r1, r2
 801eacc:	6023      	str	r3, [r4, #0]
 801eace:	f7ff ff2b 	bl	801e928 <_kill>
 801ead2:	1c43      	adds	r3, r0, #1
 801ead4:	d102      	bne.n	801eadc <_kill_r+0x1c>
 801ead6:	6823      	ldr	r3, [r4, #0]
 801ead8:	b103      	cbz	r3, 801eadc <_kill_r+0x1c>
 801eada:	602b      	str	r3, [r5, #0]
 801eadc:	bd38      	pop	{r3, r4, r5, pc}
 801eade:	bf00      	nop
 801eae0:	20028dd0 	.word	0x20028dd0

0801eae4 <_getpid_r>:
 801eae4:	f7ff bf1e 	b.w	801e924 <_getpid>

0801eae8 <siprintf>:
 801eae8:	b40e      	push	{r1, r2, r3}
 801eaea:	b500      	push	{lr}
 801eaec:	b09c      	sub	sp, #112	; 0x70
 801eaee:	ab1d      	add	r3, sp, #116	; 0x74
 801eaf0:	9002      	str	r0, [sp, #8]
 801eaf2:	9006      	str	r0, [sp, #24]
 801eaf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eaf8:	4809      	ldr	r0, [pc, #36]	; (801eb20 <siprintf+0x38>)
 801eafa:	9107      	str	r1, [sp, #28]
 801eafc:	9104      	str	r1, [sp, #16]
 801eafe:	4909      	ldr	r1, [pc, #36]	; (801eb24 <siprintf+0x3c>)
 801eb00:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb04:	9105      	str	r1, [sp, #20]
 801eb06:	6800      	ldr	r0, [r0, #0]
 801eb08:	9301      	str	r3, [sp, #4]
 801eb0a:	a902      	add	r1, sp, #8
 801eb0c:	f000 f8c8 	bl	801eca0 <_svfiprintf_r>
 801eb10:	9b02      	ldr	r3, [sp, #8]
 801eb12:	2200      	movs	r2, #0
 801eb14:	701a      	strb	r2, [r3, #0]
 801eb16:	b01c      	add	sp, #112	; 0x70
 801eb18:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb1c:	b003      	add	sp, #12
 801eb1e:	4770      	bx	lr
 801eb20:	200000e8 	.word	0x200000e8
 801eb24:	ffff0208 	.word	0xffff0208

0801eb28 <strcpy>:
 801eb28:	4603      	mov	r3, r0
 801eb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eb2e:	f803 2b01 	strb.w	r2, [r3], #1
 801eb32:	2a00      	cmp	r2, #0
 801eb34:	d1f9      	bne.n	801eb2a <strcpy+0x2>
 801eb36:	4770      	bx	lr

0801eb38 <_malloc_r>:
 801eb38:	b570      	push	{r4, r5, r6, lr}
 801eb3a:	1ccd      	adds	r5, r1, #3
 801eb3c:	f025 0503 	bic.w	r5, r5, #3
 801eb40:	3508      	adds	r5, #8
 801eb42:	2d0c      	cmp	r5, #12
 801eb44:	bf38      	it	cc
 801eb46:	250c      	movcc	r5, #12
 801eb48:	2d00      	cmp	r5, #0
 801eb4a:	4606      	mov	r6, r0
 801eb4c:	db01      	blt.n	801eb52 <_malloc_r+0x1a>
 801eb4e:	42a9      	cmp	r1, r5
 801eb50:	d903      	bls.n	801eb5a <_malloc_r+0x22>
 801eb52:	230c      	movs	r3, #12
 801eb54:	6033      	str	r3, [r6, #0]
 801eb56:	2000      	movs	r0, #0
 801eb58:	bd70      	pop	{r4, r5, r6, pc}
 801eb5a:	f000 fb4a 	bl	801f1f2 <__malloc_lock>
 801eb5e:	4a21      	ldr	r2, [pc, #132]	; (801ebe4 <_malloc_r+0xac>)
 801eb60:	6814      	ldr	r4, [r2, #0]
 801eb62:	4621      	mov	r1, r4
 801eb64:	b991      	cbnz	r1, 801eb8c <_malloc_r+0x54>
 801eb66:	4c20      	ldr	r4, [pc, #128]	; (801ebe8 <_malloc_r+0xb0>)
 801eb68:	6823      	ldr	r3, [r4, #0]
 801eb6a:	b91b      	cbnz	r3, 801eb74 <_malloc_r+0x3c>
 801eb6c:	4630      	mov	r0, r6
 801eb6e:	f000 fb17 	bl	801f1a0 <_sbrk_r>
 801eb72:	6020      	str	r0, [r4, #0]
 801eb74:	4629      	mov	r1, r5
 801eb76:	4630      	mov	r0, r6
 801eb78:	f000 fb12 	bl	801f1a0 <_sbrk_r>
 801eb7c:	1c43      	adds	r3, r0, #1
 801eb7e:	d124      	bne.n	801ebca <_malloc_r+0x92>
 801eb80:	230c      	movs	r3, #12
 801eb82:	6033      	str	r3, [r6, #0]
 801eb84:	4630      	mov	r0, r6
 801eb86:	f000 fb35 	bl	801f1f4 <__malloc_unlock>
 801eb8a:	e7e4      	b.n	801eb56 <_malloc_r+0x1e>
 801eb8c:	680b      	ldr	r3, [r1, #0]
 801eb8e:	1b5b      	subs	r3, r3, r5
 801eb90:	d418      	bmi.n	801ebc4 <_malloc_r+0x8c>
 801eb92:	2b0b      	cmp	r3, #11
 801eb94:	d90f      	bls.n	801ebb6 <_malloc_r+0x7e>
 801eb96:	600b      	str	r3, [r1, #0]
 801eb98:	50cd      	str	r5, [r1, r3]
 801eb9a:	18cc      	adds	r4, r1, r3
 801eb9c:	4630      	mov	r0, r6
 801eb9e:	f000 fb29 	bl	801f1f4 <__malloc_unlock>
 801eba2:	f104 000b 	add.w	r0, r4, #11
 801eba6:	1d23      	adds	r3, r4, #4
 801eba8:	f020 0007 	bic.w	r0, r0, #7
 801ebac:	1ac3      	subs	r3, r0, r3
 801ebae:	d0d3      	beq.n	801eb58 <_malloc_r+0x20>
 801ebb0:	425a      	negs	r2, r3
 801ebb2:	50e2      	str	r2, [r4, r3]
 801ebb4:	e7d0      	b.n	801eb58 <_malloc_r+0x20>
 801ebb6:	428c      	cmp	r4, r1
 801ebb8:	684b      	ldr	r3, [r1, #4]
 801ebba:	bf16      	itet	ne
 801ebbc:	6063      	strne	r3, [r4, #4]
 801ebbe:	6013      	streq	r3, [r2, #0]
 801ebc0:	460c      	movne	r4, r1
 801ebc2:	e7eb      	b.n	801eb9c <_malloc_r+0x64>
 801ebc4:	460c      	mov	r4, r1
 801ebc6:	6849      	ldr	r1, [r1, #4]
 801ebc8:	e7cc      	b.n	801eb64 <_malloc_r+0x2c>
 801ebca:	1cc4      	adds	r4, r0, #3
 801ebcc:	f024 0403 	bic.w	r4, r4, #3
 801ebd0:	42a0      	cmp	r0, r4
 801ebd2:	d005      	beq.n	801ebe0 <_malloc_r+0xa8>
 801ebd4:	1a21      	subs	r1, r4, r0
 801ebd6:	4630      	mov	r0, r6
 801ebd8:	f000 fae2 	bl	801f1a0 <_sbrk_r>
 801ebdc:	3001      	adds	r0, #1
 801ebde:	d0cf      	beq.n	801eb80 <_malloc_r+0x48>
 801ebe0:	6025      	str	r5, [r4, #0]
 801ebe2:	e7db      	b.n	801eb9c <_malloc_r+0x64>
 801ebe4:	20028984 	.word	0x20028984
 801ebe8:	20028988 	.word	0x20028988

0801ebec <__ssputs_r>:
 801ebec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ebf0:	688e      	ldr	r6, [r1, #8]
 801ebf2:	429e      	cmp	r6, r3
 801ebf4:	4682      	mov	sl, r0
 801ebf6:	460c      	mov	r4, r1
 801ebf8:	4690      	mov	r8, r2
 801ebfa:	4699      	mov	r9, r3
 801ebfc:	d837      	bhi.n	801ec6e <__ssputs_r+0x82>
 801ebfe:	898a      	ldrh	r2, [r1, #12]
 801ec00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ec04:	d031      	beq.n	801ec6a <__ssputs_r+0x7e>
 801ec06:	6825      	ldr	r5, [r4, #0]
 801ec08:	6909      	ldr	r1, [r1, #16]
 801ec0a:	1a6f      	subs	r7, r5, r1
 801ec0c:	6965      	ldr	r5, [r4, #20]
 801ec0e:	2302      	movs	r3, #2
 801ec10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec14:	fb95 f5f3 	sdiv	r5, r5, r3
 801ec18:	f109 0301 	add.w	r3, r9, #1
 801ec1c:	443b      	add	r3, r7
 801ec1e:	429d      	cmp	r5, r3
 801ec20:	bf38      	it	cc
 801ec22:	461d      	movcc	r5, r3
 801ec24:	0553      	lsls	r3, r2, #21
 801ec26:	d530      	bpl.n	801ec8a <__ssputs_r+0x9e>
 801ec28:	4629      	mov	r1, r5
 801ec2a:	f7ff ff85 	bl	801eb38 <_malloc_r>
 801ec2e:	4606      	mov	r6, r0
 801ec30:	b950      	cbnz	r0, 801ec48 <__ssputs_r+0x5c>
 801ec32:	230c      	movs	r3, #12
 801ec34:	f8ca 3000 	str.w	r3, [sl]
 801ec38:	89a3      	ldrh	r3, [r4, #12]
 801ec3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec3e:	81a3      	strh	r3, [r4, #12]
 801ec40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ec44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec48:	463a      	mov	r2, r7
 801ec4a:	6921      	ldr	r1, [r4, #16]
 801ec4c:	f7ff fefd 	bl	801ea4a <memcpy>
 801ec50:	89a3      	ldrh	r3, [r4, #12]
 801ec52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ec56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec5a:	81a3      	strh	r3, [r4, #12]
 801ec5c:	6126      	str	r6, [r4, #16]
 801ec5e:	6165      	str	r5, [r4, #20]
 801ec60:	443e      	add	r6, r7
 801ec62:	1bed      	subs	r5, r5, r7
 801ec64:	6026      	str	r6, [r4, #0]
 801ec66:	60a5      	str	r5, [r4, #8]
 801ec68:	464e      	mov	r6, r9
 801ec6a:	454e      	cmp	r6, r9
 801ec6c:	d900      	bls.n	801ec70 <__ssputs_r+0x84>
 801ec6e:	464e      	mov	r6, r9
 801ec70:	4632      	mov	r2, r6
 801ec72:	4641      	mov	r1, r8
 801ec74:	6820      	ldr	r0, [r4, #0]
 801ec76:	f000 faa3 	bl	801f1c0 <memmove>
 801ec7a:	68a3      	ldr	r3, [r4, #8]
 801ec7c:	1b9b      	subs	r3, r3, r6
 801ec7e:	60a3      	str	r3, [r4, #8]
 801ec80:	6823      	ldr	r3, [r4, #0]
 801ec82:	441e      	add	r6, r3
 801ec84:	6026      	str	r6, [r4, #0]
 801ec86:	2000      	movs	r0, #0
 801ec88:	e7dc      	b.n	801ec44 <__ssputs_r+0x58>
 801ec8a:	462a      	mov	r2, r5
 801ec8c:	f000 fb02 	bl	801f294 <_realloc_r>
 801ec90:	4606      	mov	r6, r0
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d1e2      	bne.n	801ec5c <__ssputs_r+0x70>
 801ec96:	6921      	ldr	r1, [r4, #16]
 801ec98:	4650      	mov	r0, sl
 801ec9a:	f000 faad 	bl	801f1f8 <_free_r>
 801ec9e:	e7c8      	b.n	801ec32 <__ssputs_r+0x46>

0801eca0 <_svfiprintf_r>:
 801eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca4:	461d      	mov	r5, r3
 801eca6:	898b      	ldrh	r3, [r1, #12]
 801eca8:	061f      	lsls	r7, r3, #24
 801ecaa:	b09d      	sub	sp, #116	; 0x74
 801ecac:	4680      	mov	r8, r0
 801ecae:	460c      	mov	r4, r1
 801ecb0:	4616      	mov	r6, r2
 801ecb2:	d50f      	bpl.n	801ecd4 <_svfiprintf_r+0x34>
 801ecb4:	690b      	ldr	r3, [r1, #16]
 801ecb6:	b96b      	cbnz	r3, 801ecd4 <_svfiprintf_r+0x34>
 801ecb8:	2140      	movs	r1, #64	; 0x40
 801ecba:	f7ff ff3d 	bl	801eb38 <_malloc_r>
 801ecbe:	6020      	str	r0, [r4, #0]
 801ecc0:	6120      	str	r0, [r4, #16]
 801ecc2:	b928      	cbnz	r0, 801ecd0 <_svfiprintf_r+0x30>
 801ecc4:	230c      	movs	r3, #12
 801ecc6:	f8c8 3000 	str.w	r3, [r8]
 801ecca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ecce:	e0c8      	b.n	801ee62 <_svfiprintf_r+0x1c2>
 801ecd0:	2340      	movs	r3, #64	; 0x40
 801ecd2:	6163      	str	r3, [r4, #20]
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	9309      	str	r3, [sp, #36]	; 0x24
 801ecd8:	2320      	movs	r3, #32
 801ecda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ecde:	2330      	movs	r3, #48	; 0x30
 801ece0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ece4:	9503      	str	r5, [sp, #12]
 801ece6:	f04f 0b01 	mov.w	fp, #1
 801ecea:	4637      	mov	r7, r6
 801ecec:	463d      	mov	r5, r7
 801ecee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ecf2:	b10b      	cbz	r3, 801ecf8 <_svfiprintf_r+0x58>
 801ecf4:	2b25      	cmp	r3, #37	; 0x25
 801ecf6:	d13e      	bne.n	801ed76 <_svfiprintf_r+0xd6>
 801ecf8:	ebb7 0a06 	subs.w	sl, r7, r6
 801ecfc:	d00b      	beq.n	801ed16 <_svfiprintf_r+0x76>
 801ecfe:	4653      	mov	r3, sl
 801ed00:	4632      	mov	r2, r6
 801ed02:	4621      	mov	r1, r4
 801ed04:	4640      	mov	r0, r8
 801ed06:	f7ff ff71 	bl	801ebec <__ssputs_r>
 801ed0a:	3001      	adds	r0, #1
 801ed0c:	f000 80a4 	beq.w	801ee58 <_svfiprintf_r+0x1b8>
 801ed10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed12:	4453      	add	r3, sl
 801ed14:	9309      	str	r3, [sp, #36]	; 0x24
 801ed16:	783b      	ldrb	r3, [r7, #0]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	f000 809d 	beq.w	801ee58 <_svfiprintf_r+0x1b8>
 801ed1e:	2300      	movs	r3, #0
 801ed20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ed24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed28:	9304      	str	r3, [sp, #16]
 801ed2a:	9307      	str	r3, [sp, #28]
 801ed2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed30:	931a      	str	r3, [sp, #104]	; 0x68
 801ed32:	462f      	mov	r7, r5
 801ed34:	2205      	movs	r2, #5
 801ed36:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ed3a:	4850      	ldr	r0, [pc, #320]	; (801ee7c <_svfiprintf_r+0x1dc>)
 801ed3c:	f7e1 fa80 	bl	8000240 <memchr>
 801ed40:	9b04      	ldr	r3, [sp, #16]
 801ed42:	b9d0      	cbnz	r0, 801ed7a <_svfiprintf_r+0xda>
 801ed44:	06d9      	lsls	r1, r3, #27
 801ed46:	bf44      	itt	mi
 801ed48:	2220      	movmi	r2, #32
 801ed4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed4e:	071a      	lsls	r2, r3, #28
 801ed50:	bf44      	itt	mi
 801ed52:	222b      	movmi	r2, #43	; 0x2b
 801ed54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed58:	782a      	ldrb	r2, [r5, #0]
 801ed5a:	2a2a      	cmp	r2, #42	; 0x2a
 801ed5c:	d015      	beq.n	801ed8a <_svfiprintf_r+0xea>
 801ed5e:	9a07      	ldr	r2, [sp, #28]
 801ed60:	462f      	mov	r7, r5
 801ed62:	2000      	movs	r0, #0
 801ed64:	250a      	movs	r5, #10
 801ed66:	4639      	mov	r1, r7
 801ed68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed6c:	3b30      	subs	r3, #48	; 0x30
 801ed6e:	2b09      	cmp	r3, #9
 801ed70:	d94d      	bls.n	801ee0e <_svfiprintf_r+0x16e>
 801ed72:	b1b8      	cbz	r0, 801eda4 <_svfiprintf_r+0x104>
 801ed74:	e00f      	b.n	801ed96 <_svfiprintf_r+0xf6>
 801ed76:	462f      	mov	r7, r5
 801ed78:	e7b8      	b.n	801ecec <_svfiprintf_r+0x4c>
 801ed7a:	4a40      	ldr	r2, [pc, #256]	; (801ee7c <_svfiprintf_r+0x1dc>)
 801ed7c:	1a80      	subs	r0, r0, r2
 801ed7e:	fa0b f000 	lsl.w	r0, fp, r0
 801ed82:	4318      	orrs	r0, r3
 801ed84:	9004      	str	r0, [sp, #16]
 801ed86:	463d      	mov	r5, r7
 801ed88:	e7d3      	b.n	801ed32 <_svfiprintf_r+0x92>
 801ed8a:	9a03      	ldr	r2, [sp, #12]
 801ed8c:	1d11      	adds	r1, r2, #4
 801ed8e:	6812      	ldr	r2, [r2, #0]
 801ed90:	9103      	str	r1, [sp, #12]
 801ed92:	2a00      	cmp	r2, #0
 801ed94:	db01      	blt.n	801ed9a <_svfiprintf_r+0xfa>
 801ed96:	9207      	str	r2, [sp, #28]
 801ed98:	e004      	b.n	801eda4 <_svfiprintf_r+0x104>
 801ed9a:	4252      	negs	r2, r2
 801ed9c:	f043 0302 	orr.w	r3, r3, #2
 801eda0:	9207      	str	r2, [sp, #28]
 801eda2:	9304      	str	r3, [sp, #16]
 801eda4:	783b      	ldrb	r3, [r7, #0]
 801eda6:	2b2e      	cmp	r3, #46	; 0x2e
 801eda8:	d10c      	bne.n	801edc4 <_svfiprintf_r+0x124>
 801edaa:	787b      	ldrb	r3, [r7, #1]
 801edac:	2b2a      	cmp	r3, #42	; 0x2a
 801edae:	d133      	bne.n	801ee18 <_svfiprintf_r+0x178>
 801edb0:	9b03      	ldr	r3, [sp, #12]
 801edb2:	1d1a      	adds	r2, r3, #4
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	9203      	str	r2, [sp, #12]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	bfb8      	it	lt
 801edbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801edc0:	3702      	adds	r7, #2
 801edc2:	9305      	str	r3, [sp, #20]
 801edc4:	4d2e      	ldr	r5, [pc, #184]	; (801ee80 <_svfiprintf_r+0x1e0>)
 801edc6:	7839      	ldrb	r1, [r7, #0]
 801edc8:	2203      	movs	r2, #3
 801edca:	4628      	mov	r0, r5
 801edcc:	f7e1 fa38 	bl	8000240 <memchr>
 801edd0:	b138      	cbz	r0, 801ede2 <_svfiprintf_r+0x142>
 801edd2:	2340      	movs	r3, #64	; 0x40
 801edd4:	1b40      	subs	r0, r0, r5
 801edd6:	fa03 f000 	lsl.w	r0, r3, r0
 801edda:	9b04      	ldr	r3, [sp, #16]
 801eddc:	4303      	orrs	r3, r0
 801edde:	3701      	adds	r7, #1
 801ede0:	9304      	str	r3, [sp, #16]
 801ede2:	7839      	ldrb	r1, [r7, #0]
 801ede4:	4827      	ldr	r0, [pc, #156]	; (801ee84 <_svfiprintf_r+0x1e4>)
 801ede6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801edea:	2206      	movs	r2, #6
 801edec:	1c7e      	adds	r6, r7, #1
 801edee:	f7e1 fa27 	bl	8000240 <memchr>
 801edf2:	2800      	cmp	r0, #0
 801edf4:	d038      	beq.n	801ee68 <_svfiprintf_r+0x1c8>
 801edf6:	4b24      	ldr	r3, [pc, #144]	; (801ee88 <_svfiprintf_r+0x1e8>)
 801edf8:	bb13      	cbnz	r3, 801ee40 <_svfiprintf_r+0x1a0>
 801edfa:	9b03      	ldr	r3, [sp, #12]
 801edfc:	3307      	adds	r3, #7
 801edfe:	f023 0307 	bic.w	r3, r3, #7
 801ee02:	3308      	adds	r3, #8
 801ee04:	9303      	str	r3, [sp, #12]
 801ee06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee08:	444b      	add	r3, r9
 801ee0a:	9309      	str	r3, [sp, #36]	; 0x24
 801ee0c:	e76d      	b.n	801ecea <_svfiprintf_r+0x4a>
 801ee0e:	fb05 3202 	mla	r2, r5, r2, r3
 801ee12:	2001      	movs	r0, #1
 801ee14:	460f      	mov	r7, r1
 801ee16:	e7a6      	b.n	801ed66 <_svfiprintf_r+0xc6>
 801ee18:	2300      	movs	r3, #0
 801ee1a:	3701      	adds	r7, #1
 801ee1c:	9305      	str	r3, [sp, #20]
 801ee1e:	4619      	mov	r1, r3
 801ee20:	250a      	movs	r5, #10
 801ee22:	4638      	mov	r0, r7
 801ee24:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee28:	3a30      	subs	r2, #48	; 0x30
 801ee2a:	2a09      	cmp	r2, #9
 801ee2c:	d903      	bls.n	801ee36 <_svfiprintf_r+0x196>
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d0c8      	beq.n	801edc4 <_svfiprintf_r+0x124>
 801ee32:	9105      	str	r1, [sp, #20]
 801ee34:	e7c6      	b.n	801edc4 <_svfiprintf_r+0x124>
 801ee36:	fb05 2101 	mla	r1, r5, r1, r2
 801ee3a:	2301      	movs	r3, #1
 801ee3c:	4607      	mov	r7, r0
 801ee3e:	e7f0      	b.n	801ee22 <_svfiprintf_r+0x182>
 801ee40:	ab03      	add	r3, sp, #12
 801ee42:	9300      	str	r3, [sp, #0]
 801ee44:	4622      	mov	r2, r4
 801ee46:	4b11      	ldr	r3, [pc, #68]	; (801ee8c <_svfiprintf_r+0x1ec>)
 801ee48:	a904      	add	r1, sp, #16
 801ee4a:	4640      	mov	r0, r8
 801ee4c:	f3af 8000 	nop.w
 801ee50:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801ee54:	4681      	mov	r9, r0
 801ee56:	d1d6      	bne.n	801ee06 <_svfiprintf_r+0x166>
 801ee58:	89a3      	ldrh	r3, [r4, #12]
 801ee5a:	065b      	lsls	r3, r3, #25
 801ee5c:	f53f af35 	bmi.w	801ecca <_svfiprintf_r+0x2a>
 801ee60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee62:	b01d      	add	sp, #116	; 0x74
 801ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee68:	ab03      	add	r3, sp, #12
 801ee6a:	9300      	str	r3, [sp, #0]
 801ee6c:	4622      	mov	r2, r4
 801ee6e:	4b07      	ldr	r3, [pc, #28]	; (801ee8c <_svfiprintf_r+0x1ec>)
 801ee70:	a904      	add	r1, sp, #16
 801ee72:	4640      	mov	r0, r8
 801ee74:	f000 f882 	bl	801ef7c <_printf_i>
 801ee78:	e7ea      	b.n	801ee50 <_svfiprintf_r+0x1b0>
 801ee7a:	bf00      	nop
 801ee7c:	0802c570 	.word	0x0802c570
 801ee80:	0802c576 	.word	0x0802c576
 801ee84:	0802c57a 	.word	0x0802c57a
 801ee88:	00000000 	.word	0x00000000
 801ee8c:	0801ebed 	.word	0x0801ebed

0801ee90 <_printf_common>:
 801ee90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee94:	4691      	mov	r9, r2
 801ee96:	461f      	mov	r7, r3
 801ee98:	688a      	ldr	r2, [r1, #8]
 801ee9a:	690b      	ldr	r3, [r1, #16]
 801ee9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eea0:	4293      	cmp	r3, r2
 801eea2:	bfb8      	it	lt
 801eea4:	4613      	movlt	r3, r2
 801eea6:	f8c9 3000 	str.w	r3, [r9]
 801eeaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eeae:	4606      	mov	r6, r0
 801eeb0:	460c      	mov	r4, r1
 801eeb2:	b112      	cbz	r2, 801eeba <_printf_common+0x2a>
 801eeb4:	3301      	adds	r3, #1
 801eeb6:	f8c9 3000 	str.w	r3, [r9]
 801eeba:	6823      	ldr	r3, [r4, #0]
 801eebc:	0699      	lsls	r1, r3, #26
 801eebe:	bf42      	ittt	mi
 801eec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801eec4:	3302      	addmi	r3, #2
 801eec6:	f8c9 3000 	strmi.w	r3, [r9]
 801eeca:	6825      	ldr	r5, [r4, #0]
 801eecc:	f015 0506 	ands.w	r5, r5, #6
 801eed0:	d107      	bne.n	801eee2 <_printf_common+0x52>
 801eed2:	f104 0a19 	add.w	sl, r4, #25
 801eed6:	68e3      	ldr	r3, [r4, #12]
 801eed8:	f8d9 2000 	ldr.w	r2, [r9]
 801eedc:	1a9b      	subs	r3, r3, r2
 801eede:	42ab      	cmp	r3, r5
 801eee0:	dc28      	bgt.n	801ef34 <_printf_common+0xa4>
 801eee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801eee6:	6822      	ldr	r2, [r4, #0]
 801eee8:	3300      	adds	r3, #0
 801eeea:	bf18      	it	ne
 801eeec:	2301      	movne	r3, #1
 801eeee:	0692      	lsls	r2, r2, #26
 801eef0:	d42d      	bmi.n	801ef4e <_printf_common+0xbe>
 801eef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eef6:	4639      	mov	r1, r7
 801eef8:	4630      	mov	r0, r6
 801eefa:	47c0      	blx	r8
 801eefc:	3001      	adds	r0, #1
 801eefe:	d020      	beq.n	801ef42 <_printf_common+0xb2>
 801ef00:	6823      	ldr	r3, [r4, #0]
 801ef02:	68e5      	ldr	r5, [r4, #12]
 801ef04:	f8d9 2000 	ldr.w	r2, [r9]
 801ef08:	f003 0306 	and.w	r3, r3, #6
 801ef0c:	2b04      	cmp	r3, #4
 801ef0e:	bf08      	it	eq
 801ef10:	1aad      	subeq	r5, r5, r2
 801ef12:	68a3      	ldr	r3, [r4, #8]
 801ef14:	6922      	ldr	r2, [r4, #16]
 801ef16:	bf0c      	ite	eq
 801ef18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef1c:	2500      	movne	r5, #0
 801ef1e:	4293      	cmp	r3, r2
 801ef20:	bfc4      	itt	gt
 801ef22:	1a9b      	subgt	r3, r3, r2
 801ef24:	18ed      	addgt	r5, r5, r3
 801ef26:	f04f 0900 	mov.w	r9, #0
 801ef2a:	341a      	adds	r4, #26
 801ef2c:	454d      	cmp	r5, r9
 801ef2e:	d11a      	bne.n	801ef66 <_printf_common+0xd6>
 801ef30:	2000      	movs	r0, #0
 801ef32:	e008      	b.n	801ef46 <_printf_common+0xb6>
 801ef34:	2301      	movs	r3, #1
 801ef36:	4652      	mov	r2, sl
 801ef38:	4639      	mov	r1, r7
 801ef3a:	4630      	mov	r0, r6
 801ef3c:	47c0      	blx	r8
 801ef3e:	3001      	adds	r0, #1
 801ef40:	d103      	bne.n	801ef4a <_printf_common+0xba>
 801ef42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef4a:	3501      	adds	r5, #1
 801ef4c:	e7c3      	b.n	801eed6 <_printf_common+0x46>
 801ef4e:	18e1      	adds	r1, r4, r3
 801ef50:	1c5a      	adds	r2, r3, #1
 801ef52:	2030      	movs	r0, #48	; 0x30
 801ef54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef58:	4422      	add	r2, r4
 801ef5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ef5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ef62:	3302      	adds	r3, #2
 801ef64:	e7c5      	b.n	801eef2 <_printf_common+0x62>
 801ef66:	2301      	movs	r3, #1
 801ef68:	4622      	mov	r2, r4
 801ef6a:	4639      	mov	r1, r7
 801ef6c:	4630      	mov	r0, r6
 801ef6e:	47c0      	blx	r8
 801ef70:	3001      	adds	r0, #1
 801ef72:	d0e6      	beq.n	801ef42 <_printf_common+0xb2>
 801ef74:	f109 0901 	add.w	r9, r9, #1
 801ef78:	e7d8      	b.n	801ef2c <_printf_common+0x9c>
	...

0801ef7c <_printf_i>:
 801ef7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ef84:	460c      	mov	r4, r1
 801ef86:	7e09      	ldrb	r1, [r1, #24]
 801ef88:	b085      	sub	sp, #20
 801ef8a:	296e      	cmp	r1, #110	; 0x6e
 801ef8c:	4617      	mov	r7, r2
 801ef8e:	4606      	mov	r6, r0
 801ef90:	4698      	mov	r8, r3
 801ef92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef94:	f000 80b3 	beq.w	801f0fe <_printf_i+0x182>
 801ef98:	d822      	bhi.n	801efe0 <_printf_i+0x64>
 801ef9a:	2963      	cmp	r1, #99	; 0x63
 801ef9c:	d036      	beq.n	801f00c <_printf_i+0x90>
 801ef9e:	d80a      	bhi.n	801efb6 <_printf_i+0x3a>
 801efa0:	2900      	cmp	r1, #0
 801efa2:	f000 80b9 	beq.w	801f118 <_printf_i+0x19c>
 801efa6:	2958      	cmp	r1, #88	; 0x58
 801efa8:	f000 8083 	beq.w	801f0b2 <_printf_i+0x136>
 801efac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801efb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801efb4:	e032      	b.n	801f01c <_printf_i+0xa0>
 801efb6:	2964      	cmp	r1, #100	; 0x64
 801efb8:	d001      	beq.n	801efbe <_printf_i+0x42>
 801efba:	2969      	cmp	r1, #105	; 0x69
 801efbc:	d1f6      	bne.n	801efac <_printf_i+0x30>
 801efbe:	6820      	ldr	r0, [r4, #0]
 801efc0:	6813      	ldr	r3, [r2, #0]
 801efc2:	0605      	lsls	r5, r0, #24
 801efc4:	f103 0104 	add.w	r1, r3, #4
 801efc8:	d52a      	bpl.n	801f020 <_printf_i+0xa4>
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	6011      	str	r1, [r2, #0]
 801efce:	2b00      	cmp	r3, #0
 801efd0:	da03      	bge.n	801efda <_printf_i+0x5e>
 801efd2:	222d      	movs	r2, #45	; 0x2d
 801efd4:	425b      	negs	r3, r3
 801efd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801efda:	486f      	ldr	r0, [pc, #444]	; (801f198 <_printf_i+0x21c>)
 801efdc:	220a      	movs	r2, #10
 801efde:	e039      	b.n	801f054 <_printf_i+0xd8>
 801efe0:	2973      	cmp	r1, #115	; 0x73
 801efe2:	f000 809d 	beq.w	801f120 <_printf_i+0x1a4>
 801efe6:	d808      	bhi.n	801effa <_printf_i+0x7e>
 801efe8:	296f      	cmp	r1, #111	; 0x6f
 801efea:	d020      	beq.n	801f02e <_printf_i+0xb2>
 801efec:	2970      	cmp	r1, #112	; 0x70
 801efee:	d1dd      	bne.n	801efac <_printf_i+0x30>
 801eff0:	6823      	ldr	r3, [r4, #0]
 801eff2:	f043 0320 	orr.w	r3, r3, #32
 801eff6:	6023      	str	r3, [r4, #0]
 801eff8:	e003      	b.n	801f002 <_printf_i+0x86>
 801effa:	2975      	cmp	r1, #117	; 0x75
 801effc:	d017      	beq.n	801f02e <_printf_i+0xb2>
 801effe:	2978      	cmp	r1, #120	; 0x78
 801f000:	d1d4      	bne.n	801efac <_printf_i+0x30>
 801f002:	2378      	movs	r3, #120	; 0x78
 801f004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f008:	4864      	ldr	r0, [pc, #400]	; (801f19c <_printf_i+0x220>)
 801f00a:	e055      	b.n	801f0b8 <_printf_i+0x13c>
 801f00c:	6813      	ldr	r3, [r2, #0]
 801f00e:	1d19      	adds	r1, r3, #4
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	6011      	str	r1, [r2, #0]
 801f014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f01c:	2301      	movs	r3, #1
 801f01e:	e08c      	b.n	801f13a <_printf_i+0x1be>
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	6011      	str	r1, [r2, #0]
 801f024:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f028:	bf18      	it	ne
 801f02a:	b21b      	sxthne	r3, r3
 801f02c:	e7cf      	b.n	801efce <_printf_i+0x52>
 801f02e:	6813      	ldr	r3, [r2, #0]
 801f030:	6825      	ldr	r5, [r4, #0]
 801f032:	1d18      	adds	r0, r3, #4
 801f034:	6010      	str	r0, [r2, #0]
 801f036:	0628      	lsls	r0, r5, #24
 801f038:	d501      	bpl.n	801f03e <_printf_i+0xc2>
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	e002      	b.n	801f044 <_printf_i+0xc8>
 801f03e:	0668      	lsls	r0, r5, #25
 801f040:	d5fb      	bpl.n	801f03a <_printf_i+0xbe>
 801f042:	881b      	ldrh	r3, [r3, #0]
 801f044:	4854      	ldr	r0, [pc, #336]	; (801f198 <_printf_i+0x21c>)
 801f046:	296f      	cmp	r1, #111	; 0x6f
 801f048:	bf14      	ite	ne
 801f04a:	220a      	movne	r2, #10
 801f04c:	2208      	moveq	r2, #8
 801f04e:	2100      	movs	r1, #0
 801f050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f054:	6865      	ldr	r5, [r4, #4]
 801f056:	60a5      	str	r5, [r4, #8]
 801f058:	2d00      	cmp	r5, #0
 801f05a:	f2c0 8095 	blt.w	801f188 <_printf_i+0x20c>
 801f05e:	6821      	ldr	r1, [r4, #0]
 801f060:	f021 0104 	bic.w	r1, r1, #4
 801f064:	6021      	str	r1, [r4, #0]
 801f066:	2b00      	cmp	r3, #0
 801f068:	d13d      	bne.n	801f0e6 <_printf_i+0x16a>
 801f06a:	2d00      	cmp	r5, #0
 801f06c:	f040 808e 	bne.w	801f18c <_printf_i+0x210>
 801f070:	4665      	mov	r5, ip
 801f072:	2a08      	cmp	r2, #8
 801f074:	d10b      	bne.n	801f08e <_printf_i+0x112>
 801f076:	6823      	ldr	r3, [r4, #0]
 801f078:	07db      	lsls	r3, r3, #31
 801f07a:	d508      	bpl.n	801f08e <_printf_i+0x112>
 801f07c:	6923      	ldr	r3, [r4, #16]
 801f07e:	6862      	ldr	r2, [r4, #4]
 801f080:	429a      	cmp	r2, r3
 801f082:	bfde      	ittt	le
 801f084:	2330      	movle	r3, #48	; 0x30
 801f086:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f08a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f08e:	ebac 0305 	sub.w	r3, ip, r5
 801f092:	6123      	str	r3, [r4, #16]
 801f094:	f8cd 8000 	str.w	r8, [sp]
 801f098:	463b      	mov	r3, r7
 801f09a:	aa03      	add	r2, sp, #12
 801f09c:	4621      	mov	r1, r4
 801f09e:	4630      	mov	r0, r6
 801f0a0:	f7ff fef6 	bl	801ee90 <_printf_common>
 801f0a4:	3001      	adds	r0, #1
 801f0a6:	d14d      	bne.n	801f144 <_printf_i+0x1c8>
 801f0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f0ac:	b005      	add	sp, #20
 801f0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0b2:	4839      	ldr	r0, [pc, #228]	; (801f198 <_printf_i+0x21c>)
 801f0b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801f0b8:	6813      	ldr	r3, [r2, #0]
 801f0ba:	6821      	ldr	r1, [r4, #0]
 801f0bc:	1d1d      	adds	r5, r3, #4
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	6015      	str	r5, [r2, #0]
 801f0c2:	060a      	lsls	r2, r1, #24
 801f0c4:	d50b      	bpl.n	801f0de <_printf_i+0x162>
 801f0c6:	07ca      	lsls	r2, r1, #31
 801f0c8:	bf44      	itt	mi
 801f0ca:	f041 0120 	orrmi.w	r1, r1, #32
 801f0ce:	6021      	strmi	r1, [r4, #0]
 801f0d0:	b91b      	cbnz	r3, 801f0da <_printf_i+0x15e>
 801f0d2:	6822      	ldr	r2, [r4, #0]
 801f0d4:	f022 0220 	bic.w	r2, r2, #32
 801f0d8:	6022      	str	r2, [r4, #0]
 801f0da:	2210      	movs	r2, #16
 801f0dc:	e7b7      	b.n	801f04e <_printf_i+0xd2>
 801f0de:	064d      	lsls	r5, r1, #25
 801f0e0:	bf48      	it	mi
 801f0e2:	b29b      	uxthmi	r3, r3
 801f0e4:	e7ef      	b.n	801f0c6 <_printf_i+0x14a>
 801f0e6:	4665      	mov	r5, ip
 801f0e8:	fbb3 f1f2 	udiv	r1, r3, r2
 801f0ec:	fb02 3311 	mls	r3, r2, r1, r3
 801f0f0:	5cc3      	ldrb	r3, [r0, r3]
 801f0f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f0f6:	460b      	mov	r3, r1
 801f0f8:	2900      	cmp	r1, #0
 801f0fa:	d1f5      	bne.n	801f0e8 <_printf_i+0x16c>
 801f0fc:	e7b9      	b.n	801f072 <_printf_i+0xf6>
 801f0fe:	6813      	ldr	r3, [r2, #0]
 801f100:	6825      	ldr	r5, [r4, #0]
 801f102:	6961      	ldr	r1, [r4, #20]
 801f104:	1d18      	adds	r0, r3, #4
 801f106:	6010      	str	r0, [r2, #0]
 801f108:	0628      	lsls	r0, r5, #24
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	d501      	bpl.n	801f112 <_printf_i+0x196>
 801f10e:	6019      	str	r1, [r3, #0]
 801f110:	e002      	b.n	801f118 <_printf_i+0x19c>
 801f112:	066a      	lsls	r2, r5, #25
 801f114:	d5fb      	bpl.n	801f10e <_printf_i+0x192>
 801f116:	8019      	strh	r1, [r3, #0]
 801f118:	2300      	movs	r3, #0
 801f11a:	6123      	str	r3, [r4, #16]
 801f11c:	4665      	mov	r5, ip
 801f11e:	e7b9      	b.n	801f094 <_printf_i+0x118>
 801f120:	6813      	ldr	r3, [r2, #0]
 801f122:	1d19      	adds	r1, r3, #4
 801f124:	6011      	str	r1, [r2, #0]
 801f126:	681d      	ldr	r5, [r3, #0]
 801f128:	6862      	ldr	r2, [r4, #4]
 801f12a:	2100      	movs	r1, #0
 801f12c:	4628      	mov	r0, r5
 801f12e:	f7e1 f887 	bl	8000240 <memchr>
 801f132:	b108      	cbz	r0, 801f138 <_printf_i+0x1bc>
 801f134:	1b40      	subs	r0, r0, r5
 801f136:	6060      	str	r0, [r4, #4]
 801f138:	6863      	ldr	r3, [r4, #4]
 801f13a:	6123      	str	r3, [r4, #16]
 801f13c:	2300      	movs	r3, #0
 801f13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f142:	e7a7      	b.n	801f094 <_printf_i+0x118>
 801f144:	6923      	ldr	r3, [r4, #16]
 801f146:	462a      	mov	r2, r5
 801f148:	4639      	mov	r1, r7
 801f14a:	4630      	mov	r0, r6
 801f14c:	47c0      	blx	r8
 801f14e:	3001      	adds	r0, #1
 801f150:	d0aa      	beq.n	801f0a8 <_printf_i+0x12c>
 801f152:	6823      	ldr	r3, [r4, #0]
 801f154:	079b      	lsls	r3, r3, #30
 801f156:	d413      	bmi.n	801f180 <_printf_i+0x204>
 801f158:	68e0      	ldr	r0, [r4, #12]
 801f15a:	9b03      	ldr	r3, [sp, #12]
 801f15c:	4298      	cmp	r0, r3
 801f15e:	bfb8      	it	lt
 801f160:	4618      	movlt	r0, r3
 801f162:	e7a3      	b.n	801f0ac <_printf_i+0x130>
 801f164:	2301      	movs	r3, #1
 801f166:	464a      	mov	r2, r9
 801f168:	4639      	mov	r1, r7
 801f16a:	4630      	mov	r0, r6
 801f16c:	47c0      	blx	r8
 801f16e:	3001      	adds	r0, #1
 801f170:	d09a      	beq.n	801f0a8 <_printf_i+0x12c>
 801f172:	3501      	adds	r5, #1
 801f174:	68e3      	ldr	r3, [r4, #12]
 801f176:	9a03      	ldr	r2, [sp, #12]
 801f178:	1a9b      	subs	r3, r3, r2
 801f17a:	42ab      	cmp	r3, r5
 801f17c:	dcf2      	bgt.n	801f164 <_printf_i+0x1e8>
 801f17e:	e7eb      	b.n	801f158 <_printf_i+0x1dc>
 801f180:	2500      	movs	r5, #0
 801f182:	f104 0919 	add.w	r9, r4, #25
 801f186:	e7f5      	b.n	801f174 <_printf_i+0x1f8>
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d1ac      	bne.n	801f0e6 <_printf_i+0x16a>
 801f18c:	7803      	ldrb	r3, [r0, #0]
 801f18e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f192:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f196:	e76c      	b.n	801f072 <_printf_i+0xf6>
 801f198:	0802c581 	.word	0x0802c581
 801f19c:	0802c592 	.word	0x0802c592

0801f1a0 <_sbrk_r>:
 801f1a0:	b538      	push	{r3, r4, r5, lr}
 801f1a2:	4c06      	ldr	r4, [pc, #24]	; (801f1bc <_sbrk_r+0x1c>)
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	4605      	mov	r5, r0
 801f1a8:	4608      	mov	r0, r1
 801f1aa:	6023      	str	r3, [r4, #0]
 801f1ac:	f7ff fbca 	bl	801e944 <_sbrk>
 801f1b0:	1c43      	adds	r3, r0, #1
 801f1b2:	d102      	bne.n	801f1ba <_sbrk_r+0x1a>
 801f1b4:	6823      	ldr	r3, [r4, #0]
 801f1b6:	b103      	cbz	r3, 801f1ba <_sbrk_r+0x1a>
 801f1b8:	602b      	str	r3, [r5, #0]
 801f1ba:	bd38      	pop	{r3, r4, r5, pc}
 801f1bc:	20028dd0 	.word	0x20028dd0

0801f1c0 <memmove>:
 801f1c0:	4288      	cmp	r0, r1
 801f1c2:	b510      	push	{r4, lr}
 801f1c4:	eb01 0302 	add.w	r3, r1, r2
 801f1c8:	d807      	bhi.n	801f1da <memmove+0x1a>
 801f1ca:	1e42      	subs	r2, r0, #1
 801f1cc:	4299      	cmp	r1, r3
 801f1ce:	d00a      	beq.n	801f1e6 <memmove+0x26>
 801f1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f1d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f1d8:	e7f8      	b.n	801f1cc <memmove+0xc>
 801f1da:	4283      	cmp	r3, r0
 801f1dc:	d9f5      	bls.n	801f1ca <memmove+0xa>
 801f1de:	1881      	adds	r1, r0, r2
 801f1e0:	1ad2      	subs	r2, r2, r3
 801f1e2:	42d3      	cmn	r3, r2
 801f1e4:	d100      	bne.n	801f1e8 <memmove+0x28>
 801f1e6:	bd10      	pop	{r4, pc}
 801f1e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f1ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f1f0:	e7f7      	b.n	801f1e2 <memmove+0x22>

0801f1f2 <__malloc_lock>:
 801f1f2:	4770      	bx	lr

0801f1f4 <__malloc_unlock>:
 801f1f4:	4770      	bx	lr
	...

0801f1f8 <_free_r>:
 801f1f8:	b538      	push	{r3, r4, r5, lr}
 801f1fa:	4605      	mov	r5, r0
 801f1fc:	2900      	cmp	r1, #0
 801f1fe:	d045      	beq.n	801f28c <_free_r+0x94>
 801f200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f204:	1f0c      	subs	r4, r1, #4
 801f206:	2b00      	cmp	r3, #0
 801f208:	bfb8      	it	lt
 801f20a:	18e4      	addlt	r4, r4, r3
 801f20c:	f7ff fff1 	bl	801f1f2 <__malloc_lock>
 801f210:	4a1f      	ldr	r2, [pc, #124]	; (801f290 <_free_r+0x98>)
 801f212:	6813      	ldr	r3, [r2, #0]
 801f214:	4610      	mov	r0, r2
 801f216:	b933      	cbnz	r3, 801f226 <_free_r+0x2e>
 801f218:	6063      	str	r3, [r4, #4]
 801f21a:	6014      	str	r4, [r2, #0]
 801f21c:	4628      	mov	r0, r5
 801f21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f222:	f7ff bfe7 	b.w	801f1f4 <__malloc_unlock>
 801f226:	42a3      	cmp	r3, r4
 801f228:	d90c      	bls.n	801f244 <_free_r+0x4c>
 801f22a:	6821      	ldr	r1, [r4, #0]
 801f22c:	1862      	adds	r2, r4, r1
 801f22e:	4293      	cmp	r3, r2
 801f230:	bf04      	itt	eq
 801f232:	681a      	ldreq	r2, [r3, #0]
 801f234:	685b      	ldreq	r3, [r3, #4]
 801f236:	6063      	str	r3, [r4, #4]
 801f238:	bf04      	itt	eq
 801f23a:	1852      	addeq	r2, r2, r1
 801f23c:	6022      	streq	r2, [r4, #0]
 801f23e:	6004      	str	r4, [r0, #0]
 801f240:	e7ec      	b.n	801f21c <_free_r+0x24>
 801f242:	4613      	mov	r3, r2
 801f244:	685a      	ldr	r2, [r3, #4]
 801f246:	b10a      	cbz	r2, 801f24c <_free_r+0x54>
 801f248:	42a2      	cmp	r2, r4
 801f24a:	d9fa      	bls.n	801f242 <_free_r+0x4a>
 801f24c:	6819      	ldr	r1, [r3, #0]
 801f24e:	1858      	adds	r0, r3, r1
 801f250:	42a0      	cmp	r0, r4
 801f252:	d10b      	bne.n	801f26c <_free_r+0x74>
 801f254:	6820      	ldr	r0, [r4, #0]
 801f256:	4401      	add	r1, r0
 801f258:	1858      	adds	r0, r3, r1
 801f25a:	4282      	cmp	r2, r0
 801f25c:	6019      	str	r1, [r3, #0]
 801f25e:	d1dd      	bne.n	801f21c <_free_r+0x24>
 801f260:	6810      	ldr	r0, [r2, #0]
 801f262:	6852      	ldr	r2, [r2, #4]
 801f264:	605a      	str	r2, [r3, #4]
 801f266:	4401      	add	r1, r0
 801f268:	6019      	str	r1, [r3, #0]
 801f26a:	e7d7      	b.n	801f21c <_free_r+0x24>
 801f26c:	d902      	bls.n	801f274 <_free_r+0x7c>
 801f26e:	230c      	movs	r3, #12
 801f270:	602b      	str	r3, [r5, #0]
 801f272:	e7d3      	b.n	801f21c <_free_r+0x24>
 801f274:	6820      	ldr	r0, [r4, #0]
 801f276:	1821      	adds	r1, r4, r0
 801f278:	428a      	cmp	r2, r1
 801f27a:	bf04      	itt	eq
 801f27c:	6811      	ldreq	r1, [r2, #0]
 801f27e:	6852      	ldreq	r2, [r2, #4]
 801f280:	6062      	str	r2, [r4, #4]
 801f282:	bf04      	itt	eq
 801f284:	1809      	addeq	r1, r1, r0
 801f286:	6021      	streq	r1, [r4, #0]
 801f288:	605c      	str	r4, [r3, #4]
 801f28a:	e7c7      	b.n	801f21c <_free_r+0x24>
 801f28c:	bd38      	pop	{r3, r4, r5, pc}
 801f28e:	bf00      	nop
 801f290:	20028984 	.word	0x20028984

0801f294 <_realloc_r>:
 801f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f296:	4607      	mov	r7, r0
 801f298:	4614      	mov	r4, r2
 801f29a:	460e      	mov	r6, r1
 801f29c:	b921      	cbnz	r1, 801f2a8 <_realloc_r+0x14>
 801f29e:	4611      	mov	r1, r2
 801f2a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f2a4:	f7ff bc48 	b.w	801eb38 <_malloc_r>
 801f2a8:	b922      	cbnz	r2, 801f2b4 <_realloc_r+0x20>
 801f2aa:	f7ff ffa5 	bl	801f1f8 <_free_r>
 801f2ae:	4625      	mov	r5, r4
 801f2b0:	4628      	mov	r0, r5
 801f2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2b4:	f000 f814 	bl	801f2e0 <_malloc_usable_size_r>
 801f2b8:	42a0      	cmp	r0, r4
 801f2ba:	d20f      	bcs.n	801f2dc <_realloc_r+0x48>
 801f2bc:	4621      	mov	r1, r4
 801f2be:	4638      	mov	r0, r7
 801f2c0:	f7ff fc3a 	bl	801eb38 <_malloc_r>
 801f2c4:	4605      	mov	r5, r0
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	d0f2      	beq.n	801f2b0 <_realloc_r+0x1c>
 801f2ca:	4631      	mov	r1, r6
 801f2cc:	4622      	mov	r2, r4
 801f2ce:	f7ff fbbc 	bl	801ea4a <memcpy>
 801f2d2:	4631      	mov	r1, r6
 801f2d4:	4638      	mov	r0, r7
 801f2d6:	f7ff ff8f 	bl	801f1f8 <_free_r>
 801f2da:	e7e9      	b.n	801f2b0 <_realloc_r+0x1c>
 801f2dc:	4635      	mov	r5, r6
 801f2de:	e7e7      	b.n	801f2b0 <_realloc_r+0x1c>

0801f2e0 <_malloc_usable_size_r>:
 801f2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f2e4:	1f18      	subs	r0, r3, #4
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	bfbc      	itt	lt
 801f2ea:	580b      	ldrlt	r3, [r1, r0]
 801f2ec:	18c0      	addlt	r0, r0, r3
 801f2ee:	4770      	bx	lr

0801f2f0 <_init>:
 801f2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2f2:	bf00      	nop
 801f2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2f6:	bc08      	pop	{r3}
 801f2f8:	469e      	mov	lr, r3
 801f2fa:	4770      	bx	lr

0801f2fc <_fini>:
 801f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2fe:	bf00      	nop
 801f300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f302:	bc08      	pop	{r3}
 801f304:	469e      	mov	lr, r3
 801f306:	4770      	bx	lr
