
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .legacy_isr_vector 00000008  08080000  08080000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001de9c  08080010  08080010  00020010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007870  0809dec0  0809dec0  0003dec0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080a5730  080a5730  00045730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080a5738  080a5738  00045738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080a573c  080a573c  0004573c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000548  2000b000  080a5740  0004b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00024138  2000b560  080a5c88  0004b560  2**5
                  ALLOC
  9 ._user_heap_stack 00000500  2002f698  080a5c88  0004f698  2**0
                  ALLOC
 10 .memory_sram_text 00000000  c007f800  c007f800  0004b548  2**0
                  CONTENTS
 11 ._lcd_framebuffer_background 00000000  c003fc00  c003fc00  0004b548  2**0
                  CONTENTS
 12 ._lcd_framebuffer_foreground 00000000  c0000000  c0000000  0004b548  2**0
                  CONTENTS
 13 .bss_vector   00000000  20001400  20001400  0004b548  2**0
                  CONTENTS
 14 ._legacy_sram 00000000  c007f800  c007f800  0004b548  2**0
                  CONTENTS
 15 ._dynamic_sram 00000000  c0300000  c0300000  0004b548  2**0
                  CONTENTS
 16 ._shared_data_area 00000000  20001600  20001600  0004b548  2**0
                  CONTENTS
 17 .ARM.attributes 00000030  00000000  00000000  0004b548  2**0
                  CONTENTS, READONLY
 18 .debug_info   00061f87  00000000  00000000  0004b578  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000aee2  00000000  00000000  000ad4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000038e0  00000000  00000000  000b83e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 000033d8  00000000  00000000  000bbcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0003b672  00000000  00000000  000bf0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0003f036  00000000  00000000  000fa712  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0011cbc1  00000000  00000000  00139748  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007b  00000000  00000000  00256309  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000f2dc  00000000  00000000  00256384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080010 <__do_global_dtors_aux>:
 8080010:	b510      	push	{r4, lr}
 8080012:	4c05      	ldr	r4, [pc, #20]	; (8080028 <__do_global_dtors_aux+0x18>)
 8080014:	7823      	ldrb	r3, [r4, #0]
 8080016:	b933      	cbnz	r3, 8080026 <__do_global_dtors_aux+0x16>
 8080018:	4b04      	ldr	r3, [pc, #16]	; (808002c <__do_global_dtors_aux+0x1c>)
 808001a:	b113      	cbz	r3, 8080022 <__do_global_dtors_aux+0x12>
 808001c:	4804      	ldr	r0, [pc, #16]	; (8080030 <__do_global_dtors_aux+0x20>)
 808001e:	f3af 8000 	nop.w
 8080022:	2301      	movs	r3, #1
 8080024:	7023      	strb	r3, [r4, #0]
 8080026:	bd10      	pop	{r4, pc}
 8080028:	2000b560 	.word	0x2000b560
 808002c:	00000000 	.word	0x00000000
 8080030:	0809de94 	.word	0x0809de94

08080034 <frame_dummy>:
 8080034:	b508      	push	{r3, lr}
 8080036:	4b03      	ldr	r3, [pc, #12]	; (8080044 <frame_dummy+0x10>)
 8080038:	b11b      	cbz	r3, 8080042 <frame_dummy+0xe>
 808003a:	4903      	ldr	r1, [pc, #12]	; (8080048 <frame_dummy+0x14>)
 808003c:	4803      	ldr	r0, [pc, #12]	; (808004c <frame_dummy+0x18>)
 808003e:	f3af 8000 	nop.w
 8080042:	bd08      	pop	{r3, pc}
 8080044:	00000000 	.word	0x00000000
 8080048:	2000b564 	.word	0x2000b564
 808004c:	0809de94 	.word	0x0809de94

08080050 <strlen>:
 8080050:	4603      	mov	r3, r0
 8080052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8080056:	2a00      	cmp	r2, #0
 8080058:	d1fb      	bne.n	8080052 <strlen+0x2>
 808005a:	1a18      	subs	r0, r3, r0
 808005c:	3801      	subs	r0, #1
 808005e:	4770      	bx	lr

08080060 <memchr>:
 8080060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8080064:	2a10      	cmp	r2, #16
 8080066:	db2b      	blt.n	80800c0 <memchr+0x60>
 8080068:	f010 0f07 	tst.w	r0, #7
 808006c:	d008      	beq.n	8080080 <memchr+0x20>
 808006e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8080072:	3a01      	subs	r2, #1
 8080074:	428b      	cmp	r3, r1
 8080076:	d02d      	beq.n	80800d4 <memchr+0x74>
 8080078:	f010 0f07 	tst.w	r0, #7
 808007c:	b342      	cbz	r2, 80800d0 <memchr+0x70>
 808007e:	d1f6      	bne.n	808006e <memchr+0xe>
 8080080:	b4f0      	push	{r4, r5, r6, r7}
 8080082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8080086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 808008a:	f022 0407 	bic.w	r4, r2, #7
 808008e:	f07f 0700 	mvns.w	r7, #0
 8080092:	2300      	movs	r3, #0
 8080094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8080098:	3c08      	subs	r4, #8
 808009a:	ea85 0501 	eor.w	r5, r5, r1
 808009e:	ea86 0601 	eor.w	r6, r6, r1
 80800a2:	fa85 f547 	uadd8	r5, r5, r7
 80800a6:	faa3 f587 	sel	r5, r3, r7
 80800aa:	fa86 f647 	uadd8	r6, r6, r7
 80800ae:	faa5 f687 	sel	r6, r5, r7
 80800b2:	b98e      	cbnz	r6, 80800d8 <memchr+0x78>
 80800b4:	d1ee      	bne.n	8080094 <memchr+0x34>
 80800b6:	bcf0      	pop	{r4, r5, r6, r7}
 80800b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80800bc:	f002 0207 	and.w	r2, r2, #7
 80800c0:	b132      	cbz	r2, 80800d0 <memchr+0x70>
 80800c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80800c6:	3a01      	subs	r2, #1
 80800c8:	ea83 0301 	eor.w	r3, r3, r1
 80800cc:	b113      	cbz	r3, 80800d4 <memchr+0x74>
 80800ce:	d1f8      	bne.n	80800c2 <memchr+0x62>
 80800d0:	2000      	movs	r0, #0
 80800d2:	4770      	bx	lr
 80800d4:	3801      	subs	r0, #1
 80800d6:	4770      	bx	lr
 80800d8:	2d00      	cmp	r5, #0
 80800da:	bf06      	itte	eq
 80800dc:	4635      	moveq	r5, r6
 80800de:	3803      	subeq	r0, #3
 80800e0:	3807      	subne	r0, #7
 80800e2:	f015 0f01 	tst.w	r5, #1
 80800e6:	d107      	bne.n	80800f8 <memchr+0x98>
 80800e8:	3001      	adds	r0, #1
 80800ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80800ee:	bf02      	ittt	eq
 80800f0:	3001      	addeq	r0, #1
 80800f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80800f6:	3001      	addeq	r0, #1
 80800f8:	bcf0      	pop	{r4, r5, r6, r7}
 80800fa:	3801      	subs	r0, #1
 80800fc:	4770      	bx	lr
 80800fe:	bf00      	nop

08080100 <__aeabi_drsub>:
 8080100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8080104:	e002      	b.n	808010c <__adddf3>
 8080106:	bf00      	nop

08080108 <__aeabi_dsub>:
 8080108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808010c <__adddf3>:
 808010c:	b530      	push	{r4, r5, lr}
 808010e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8080112:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8080116:	ea94 0f05 	teq	r4, r5
 808011a:	bf08      	it	eq
 808011c:	ea90 0f02 	teqeq	r0, r2
 8080120:	bf1f      	itttt	ne
 8080122:	ea54 0c00 	orrsne.w	ip, r4, r0
 8080126:	ea55 0c02 	orrsne.w	ip, r5, r2
 808012a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808012e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8080132:	f000 80e2 	beq.w	80802fa <__adddf3+0x1ee>
 8080136:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808013a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808013e:	bfb8      	it	lt
 8080140:	426d      	neglt	r5, r5
 8080142:	dd0c      	ble.n	808015e <__adddf3+0x52>
 8080144:	442c      	add	r4, r5
 8080146:	ea80 0202 	eor.w	r2, r0, r2
 808014a:	ea81 0303 	eor.w	r3, r1, r3
 808014e:	ea82 0000 	eor.w	r0, r2, r0
 8080152:	ea83 0101 	eor.w	r1, r3, r1
 8080156:	ea80 0202 	eor.w	r2, r0, r2
 808015a:	ea81 0303 	eor.w	r3, r1, r3
 808015e:	2d36      	cmp	r5, #54	; 0x36
 8080160:	bf88      	it	hi
 8080162:	bd30      	pophi	{r4, r5, pc}
 8080164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8080168:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808016c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8080170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8080174:	d002      	beq.n	808017c <__adddf3+0x70>
 8080176:	4240      	negs	r0, r0
 8080178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808017c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8080180:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8080188:	d002      	beq.n	8080190 <__adddf3+0x84>
 808018a:	4252      	negs	r2, r2
 808018c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080190:	ea94 0f05 	teq	r4, r5
 8080194:	f000 80a7 	beq.w	80802e6 <__adddf3+0x1da>
 8080198:	f1a4 0401 	sub.w	r4, r4, #1
 808019c:	f1d5 0e20 	rsbs	lr, r5, #32
 80801a0:	db0d      	blt.n	80801be <__adddf3+0xb2>
 80801a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80801a6:	fa22 f205 	lsr.w	r2, r2, r5
 80801aa:	1880      	adds	r0, r0, r2
 80801ac:	f141 0100 	adc.w	r1, r1, #0
 80801b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80801b4:	1880      	adds	r0, r0, r2
 80801b6:	fa43 f305 	asr.w	r3, r3, r5
 80801ba:	4159      	adcs	r1, r3
 80801bc:	e00e      	b.n	80801dc <__adddf3+0xd0>
 80801be:	f1a5 0520 	sub.w	r5, r5, #32
 80801c2:	f10e 0e20 	add.w	lr, lr, #32
 80801c6:	2a01      	cmp	r2, #1
 80801c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80801cc:	bf28      	it	cs
 80801ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80801d2:	fa43 f305 	asr.w	r3, r3, r5
 80801d6:	18c0      	adds	r0, r0, r3
 80801d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80801dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80801e0:	d507      	bpl.n	80801f2 <__adddf3+0xe6>
 80801e2:	f04f 0e00 	mov.w	lr, #0
 80801e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80801ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80801ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80801f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80801f6:	d31b      	bcc.n	8080230 <__adddf3+0x124>
 80801f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80801fc:	d30c      	bcc.n	8080218 <__adddf3+0x10c>
 80801fe:	0849      	lsrs	r1, r1, #1
 8080200:	ea5f 0030 	movs.w	r0, r0, rrx
 8080204:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8080208:	f104 0401 	add.w	r4, r4, #1
 808020c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8080210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8080214:	f080 809a 	bcs.w	808034c <__adddf3+0x240>
 8080218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808021c:	bf08      	it	eq
 808021e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8080222:	f150 0000 	adcs.w	r0, r0, #0
 8080226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808022a:	ea41 0105 	orr.w	r1, r1, r5
 808022e:	bd30      	pop	{r4, r5, pc}
 8080230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8080234:	4140      	adcs	r0, r0
 8080236:	eb41 0101 	adc.w	r1, r1, r1
 808023a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808023e:	f1a4 0401 	sub.w	r4, r4, #1
 8080242:	d1e9      	bne.n	8080218 <__adddf3+0x10c>
 8080244:	f091 0f00 	teq	r1, #0
 8080248:	bf04      	itt	eq
 808024a:	4601      	moveq	r1, r0
 808024c:	2000      	moveq	r0, #0
 808024e:	fab1 f381 	clz	r3, r1
 8080252:	bf08      	it	eq
 8080254:	3320      	addeq	r3, #32
 8080256:	f1a3 030b 	sub.w	r3, r3, #11
 808025a:	f1b3 0220 	subs.w	r2, r3, #32
 808025e:	da0c      	bge.n	808027a <__adddf3+0x16e>
 8080260:	320c      	adds	r2, #12
 8080262:	dd08      	ble.n	8080276 <__adddf3+0x16a>
 8080264:	f102 0c14 	add.w	ip, r2, #20
 8080268:	f1c2 020c 	rsb	r2, r2, #12
 808026c:	fa01 f00c 	lsl.w	r0, r1, ip
 8080270:	fa21 f102 	lsr.w	r1, r1, r2
 8080274:	e00c      	b.n	8080290 <__adddf3+0x184>
 8080276:	f102 0214 	add.w	r2, r2, #20
 808027a:	bfd8      	it	le
 808027c:	f1c2 0c20 	rsble	ip, r2, #32
 8080280:	fa01 f102 	lsl.w	r1, r1, r2
 8080284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8080288:	bfdc      	itt	le
 808028a:	ea41 010c 	orrle.w	r1, r1, ip
 808028e:	4090      	lslle	r0, r2
 8080290:	1ae4      	subs	r4, r4, r3
 8080292:	bfa2      	ittt	ge
 8080294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8080298:	4329      	orrge	r1, r5
 808029a:	bd30      	popge	{r4, r5, pc}
 808029c:	ea6f 0404 	mvn.w	r4, r4
 80802a0:	3c1f      	subs	r4, #31
 80802a2:	da1c      	bge.n	80802de <__adddf3+0x1d2>
 80802a4:	340c      	adds	r4, #12
 80802a6:	dc0e      	bgt.n	80802c6 <__adddf3+0x1ba>
 80802a8:	f104 0414 	add.w	r4, r4, #20
 80802ac:	f1c4 0220 	rsb	r2, r4, #32
 80802b0:	fa20 f004 	lsr.w	r0, r0, r4
 80802b4:	fa01 f302 	lsl.w	r3, r1, r2
 80802b8:	ea40 0003 	orr.w	r0, r0, r3
 80802bc:	fa21 f304 	lsr.w	r3, r1, r4
 80802c0:	ea45 0103 	orr.w	r1, r5, r3
 80802c4:	bd30      	pop	{r4, r5, pc}
 80802c6:	f1c4 040c 	rsb	r4, r4, #12
 80802ca:	f1c4 0220 	rsb	r2, r4, #32
 80802ce:	fa20 f002 	lsr.w	r0, r0, r2
 80802d2:	fa01 f304 	lsl.w	r3, r1, r4
 80802d6:	ea40 0003 	orr.w	r0, r0, r3
 80802da:	4629      	mov	r1, r5
 80802dc:	bd30      	pop	{r4, r5, pc}
 80802de:	fa21 f004 	lsr.w	r0, r1, r4
 80802e2:	4629      	mov	r1, r5
 80802e4:	bd30      	pop	{r4, r5, pc}
 80802e6:	f094 0f00 	teq	r4, #0
 80802ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80802ee:	bf06      	itte	eq
 80802f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80802f4:	3401      	addeq	r4, #1
 80802f6:	3d01      	subne	r5, #1
 80802f8:	e74e      	b.n	8080198 <__adddf3+0x8c>
 80802fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80802fe:	bf18      	it	ne
 8080300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8080304:	d029      	beq.n	808035a <__adddf3+0x24e>
 8080306:	ea94 0f05 	teq	r4, r5
 808030a:	bf08      	it	eq
 808030c:	ea90 0f02 	teqeq	r0, r2
 8080310:	d005      	beq.n	808031e <__adddf3+0x212>
 8080312:	ea54 0c00 	orrs.w	ip, r4, r0
 8080316:	bf04      	itt	eq
 8080318:	4619      	moveq	r1, r3
 808031a:	4610      	moveq	r0, r2
 808031c:	bd30      	pop	{r4, r5, pc}
 808031e:	ea91 0f03 	teq	r1, r3
 8080322:	bf1e      	ittt	ne
 8080324:	2100      	movne	r1, #0
 8080326:	2000      	movne	r0, #0
 8080328:	bd30      	popne	{r4, r5, pc}
 808032a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808032e:	d105      	bne.n	808033c <__adddf3+0x230>
 8080330:	0040      	lsls	r0, r0, #1
 8080332:	4149      	adcs	r1, r1
 8080334:	bf28      	it	cs
 8080336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808033a:	bd30      	pop	{r4, r5, pc}
 808033c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8080340:	bf3c      	itt	cc
 8080342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8080346:	bd30      	popcc	{r4, r5, pc}
 8080348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808034c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8080350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8080354:	f04f 0000 	mov.w	r0, #0
 8080358:	bd30      	pop	{r4, r5, pc}
 808035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808035e:	bf1a      	itte	ne
 8080360:	4619      	movne	r1, r3
 8080362:	4610      	movne	r0, r2
 8080364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8080368:	bf1c      	itt	ne
 808036a:	460b      	movne	r3, r1
 808036c:	4602      	movne	r2, r0
 808036e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8080372:	bf06      	itte	eq
 8080374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8080378:	ea91 0f03 	teqeq	r1, r3
 808037c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8080380:	bd30      	pop	{r4, r5, pc}
 8080382:	bf00      	nop

08080384 <__aeabi_ui2d>:
 8080384:	f090 0f00 	teq	r0, #0
 8080388:	bf04      	itt	eq
 808038a:	2100      	moveq	r1, #0
 808038c:	4770      	bxeq	lr
 808038e:	b530      	push	{r4, r5, lr}
 8080390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8080398:	f04f 0500 	mov.w	r5, #0
 808039c:	f04f 0100 	mov.w	r1, #0
 80803a0:	e750      	b.n	8080244 <__adddf3+0x138>
 80803a2:	bf00      	nop

080803a4 <__aeabi_i2d>:
 80803a4:	f090 0f00 	teq	r0, #0
 80803a8:	bf04      	itt	eq
 80803aa:	2100      	moveq	r1, #0
 80803ac:	4770      	bxeq	lr
 80803ae:	b530      	push	{r4, r5, lr}
 80803b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80803b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80803b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80803bc:	bf48      	it	mi
 80803be:	4240      	negmi	r0, r0
 80803c0:	f04f 0100 	mov.w	r1, #0
 80803c4:	e73e      	b.n	8080244 <__adddf3+0x138>
 80803c6:	bf00      	nop

080803c8 <__aeabi_f2d>:
 80803c8:	0042      	lsls	r2, r0, #1
 80803ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80803ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80803d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80803d6:	bf1f      	itttt	ne
 80803d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80803dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80803e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80803e4:	4770      	bxne	lr
 80803e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80803ea:	bf08      	it	eq
 80803ec:	4770      	bxeq	lr
 80803ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80803f2:	bf04      	itt	eq
 80803f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80803f8:	4770      	bxeq	lr
 80803fa:	b530      	push	{r4, r5, lr}
 80803fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8080400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8080404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080408:	e71c      	b.n	8080244 <__adddf3+0x138>
 808040a:	bf00      	nop

0808040c <__aeabi_ul2d>:
 808040c:	ea50 0201 	orrs.w	r2, r0, r1
 8080410:	bf08      	it	eq
 8080412:	4770      	bxeq	lr
 8080414:	b530      	push	{r4, r5, lr}
 8080416:	f04f 0500 	mov.w	r5, #0
 808041a:	e00a      	b.n	8080432 <__aeabi_l2d+0x16>

0808041c <__aeabi_l2d>:
 808041c:	ea50 0201 	orrs.w	r2, r0, r1
 8080420:	bf08      	it	eq
 8080422:	4770      	bxeq	lr
 8080424:	b530      	push	{r4, r5, lr}
 8080426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808042a:	d502      	bpl.n	8080432 <__aeabi_l2d+0x16>
 808042c:	4240      	negs	r0, r0
 808042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8080432:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080436:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808043a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808043e:	f43f aed8 	beq.w	80801f2 <__adddf3+0xe6>
 8080442:	f04f 0203 	mov.w	r2, #3
 8080446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808044a:	bf18      	it	ne
 808044c:	3203      	addne	r2, #3
 808044e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8080452:	bf18      	it	ne
 8080454:	3203      	addne	r2, #3
 8080456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808045a:	f1c2 0320 	rsb	r3, r2, #32
 808045e:	fa00 fc03 	lsl.w	ip, r0, r3
 8080462:	fa20 f002 	lsr.w	r0, r0, r2
 8080466:	fa01 fe03 	lsl.w	lr, r1, r3
 808046a:	ea40 000e 	orr.w	r0, r0, lr
 808046e:	fa21 f102 	lsr.w	r1, r1, r2
 8080472:	4414      	add	r4, r2
 8080474:	e6bd      	b.n	80801f2 <__adddf3+0xe6>
 8080476:	bf00      	nop

08080478 <__aeabi_dmul>:
 8080478:	b570      	push	{r4, r5, r6, lr}
 808047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8080482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8080486:	bf1d      	ittte	ne
 8080488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808048c:	ea94 0f0c 	teqne	r4, ip
 8080490:	ea95 0f0c 	teqne	r5, ip
 8080494:	f000 f8de 	bleq	8080654 <__aeabi_dmul+0x1dc>
 8080498:	442c      	add	r4, r5
 808049a:	ea81 0603 	eor.w	r6, r1, r3
 808049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80804a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80804a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80804aa:	bf18      	it	ne
 80804ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80804b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80804b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80804b8:	d038      	beq.n	808052c <__aeabi_dmul+0xb4>
 80804ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80804be:	f04f 0500 	mov.w	r5, #0
 80804c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80804c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80804ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80804ce:	f04f 0600 	mov.w	r6, #0
 80804d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80804d6:	f09c 0f00 	teq	ip, #0
 80804da:	bf18      	it	ne
 80804dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80804e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80804e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80804e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80804ec:	d204      	bcs.n	80804f8 <__aeabi_dmul+0x80>
 80804ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80804f2:	416d      	adcs	r5, r5
 80804f4:	eb46 0606 	adc.w	r6, r6, r6
 80804f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80804fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8080500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8080504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8080508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8080510:	bf88      	it	hi
 8080512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8080516:	d81e      	bhi.n	8080556 <__aeabi_dmul+0xde>
 8080518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808051c:	bf08      	it	eq
 808051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8080522:	f150 0000 	adcs.w	r0, r0, #0
 8080526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808052a:	bd70      	pop	{r4, r5, r6, pc}
 808052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8080530:	ea46 0101 	orr.w	r1, r6, r1
 8080534:	ea40 0002 	orr.w	r0, r0, r2
 8080538:	ea81 0103 	eor.w	r1, r1, r3
 808053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8080540:	bfc2      	ittt	gt
 8080542:	ebd4 050c 	rsbsgt	r5, r4, ip
 8080546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808054a:	bd70      	popgt	{r4, r5, r6, pc}
 808054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8080550:	f04f 0e00 	mov.w	lr, #0
 8080554:	3c01      	subs	r4, #1
 8080556:	f300 80ab 	bgt.w	80806b0 <__aeabi_dmul+0x238>
 808055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808055e:	bfde      	ittt	le
 8080560:	2000      	movle	r0, #0
 8080562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8080566:	bd70      	pople	{r4, r5, r6, pc}
 8080568:	f1c4 0400 	rsb	r4, r4, #0
 808056c:	3c20      	subs	r4, #32
 808056e:	da35      	bge.n	80805dc <__aeabi_dmul+0x164>
 8080570:	340c      	adds	r4, #12
 8080572:	dc1b      	bgt.n	80805ac <__aeabi_dmul+0x134>
 8080574:	f104 0414 	add.w	r4, r4, #20
 8080578:	f1c4 0520 	rsb	r5, r4, #32
 808057c:	fa00 f305 	lsl.w	r3, r0, r5
 8080580:	fa20 f004 	lsr.w	r0, r0, r4
 8080584:	fa01 f205 	lsl.w	r2, r1, r5
 8080588:	ea40 0002 	orr.w	r0, r0, r2
 808058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8080590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8080598:	fa21 f604 	lsr.w	r6, r1, r4
 808059c:	eb42 0106 	adc.w	r1, r2, r6
 80805a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80805a4:	bf08      	it	eq
 80805a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80805aa:	bd70      	pop	{r4, r5, r6, pc}
 80805ac:	f1c4 040c 	rsb	r4, r4, #12
 80805b0:	f1c4 0520 	rsb	r5, r4, #32
 80805b4:	fa00 f304 	lsl.w	r3, r0, r4
 80805b8:	fa20 f005 	lsr.w	r0, r0, r5
 80805bc:	fa01 f204 	lsl.w	r2, r1, r4
 80805c0:	ea40 0002 	orr.w	r0, r0, r2
 80805c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80805c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80805cc:	f141 0100 	adc.w	r1, r1, #0
 80805d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80805d4:	bf08      	it	eq
 80805d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80805da:	bd70      	pop	{r4, r5, r6, pc}
 80805dc:	f1c4 0520 	rsb	r5, r4, #32
 80805e0:	fa00 f205 	lsl.w	r2, r0, r5
 80805e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80805e8:	fa20 f304 	lsr.w	r3, r0, r4
 80805ec:	fa01 f205 	lsl.w	r2, r1, r5
 80805f0:	ea43 0302 	orr.w	r3, r3, r2
 80805f4:	fa21 f004 	lsr.w	r0, r1, r4
 80805f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80805fc:	fa21 f204 	lsr.w	r2, r1, r4
 8080600:	ea20 0002 	bic.w	r0, r0, r2
 8080604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8080608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808060c:	bf08      	it	eq
 808060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8080612:	bd70      	pop	{r4, r5, r6, pc}
 8080614:	f094 0f00 	teq	r4, #0
 8080618:	d10f      	bne.n	808063a <__aeabi_dmul+0x1c2>
 808061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808061e:	0040      	lsls	r0, r0, #1
 8080620:	eb41 0101 	adc.w	r1, r1, r1
 8080624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8080628:	bf08      	it	eq
 808062a:	3c01      	subeq	r4, #1
 808062c:	d0f7      	beq.n	808061e <__aeabi_dmul+0x1a6>
 808062e:	ea41 0106 	orr.w	r1, r1, r6
 8080632:	f095 0f00 	teq	r5, #0
 8080636:	bf18      	it	ne
 8080638:	4770      	bxne	lr
 808063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808063e:	0052      	lsls	r2, r2, #1
 8080640:	eb43 0303 	adc.w	r3, r3, r3
 8080644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8080648:	bf08      	it	eq
 808064a:	3d01      	subeq	r5, #1
 808064c:	d0f7      	beq.n	808063e <__aeabi_dmul+0x1c6>
 808064e:	ea43 0306 	orr.w	r3, r3, r6
 8080652:	4770      	bx	lr
 8080654:	ea94 0f0c 	teq	r4, ip
 8080658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808065c:	bf18      	it	ne
 808065e:	ea95 0f0c 	teqne	r5, ip
 8080662:	d00c      	beq.n	808067e <__aeabi_dmul+0x206>
 8080664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080668:	bf18      	it	ne
 808066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808066e:	d1d1      	bne.n	8080614 <__aeabi_dmul+0x19c>
 8080670:	ea81 0103 	eor.w	r1, r1, r3
 8080674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8080678:	f04f 0000 	mov.w	r0, #0
 808067c:	bd70      	pop	{r4, r5, r6, pc}
 808067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080682:	bf06      	itte	eq
 8080684:	4610      	moveq	r0, r2
 8080686:	4619      	moveq	r1, r3
 8080688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808068c:	d019      	beq.n	80806c2 <__aeabi_dmul+0x24a>
 808068e:	ea94 0f0c 	teq	r4, ip
 8080692:	d102      	bne.n	808069a <__aeabi_dmul+0x222>
 8080694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8080698:	d113      	bne.n	80806c2 <__aeabi_dmul+0x24a>
 808069a:	ea95 0f0c 	teq	r5, ip
 808069e:	d105      	bne.n	80806ac <__aeabi_dmul+0x234>
 80806a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80806a4:	bf1c      	itt	ne
 80806a6:	4610      	movne	r0, r2
 80806a8:	4619      	movne	r1, r3
 80806aa:	d10a      	bne.n	80806c2 <__aeabi_dmul+0x24a>
 80806ac:	ea81 0103 	eor.w	r1, r1, r3
 80806b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80806b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80806b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80806bc:	f04f 0000 	mov.w	r0, #0
 80806c0:	bd70      	pop	{r4, r5, r6, pc}
 80806c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80806c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80806ca:	bd70      	pop	{r4, r5, r6, pc}

080806cc <__aeabi_ddiv>:
 80806cc:	b570      	push	{r4, r5, r6, lr}
 80806ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80806d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80806d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80806da:	bf1d      	ittte	ne
 80806dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80806e0:	ea94 0f0c 	teqne	r4, ip
 80806e4:	ea95 0f0c 	teqne	r5, ip
 80806e8:	f000 f8a7 	bleq	808083a <__aeabi_ddiv+0x16e>
 80806ec:	eba4 0405 	sub.w	r4, r4, r5
 80806f0:	ea81 0e03 	eor.w	lr, r1, r3
 80806f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80806f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80806fc:	f000 8088 	beq.w	8080810 <__aeabi_ddiv+0x144>
 8080700:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8080708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808070c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8080710:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8080714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8080718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808071c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8080720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8080724:	429d      	cmp	r5, r3
 8080726:	bf08      	it	eq
 8080728:	4296      	cmpeq	r6, r2
 808072a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808072e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8080732:	d202      	bcs.n	808073a <__aeabi_ddiv+0x6e>
 8080734:	085b      	lsrs	r3, r3, #1
 8080736:	ea4f 0232 	mov.w	r2, r2, rrx
 808073a:	1ab6      	subs	r6, r6, r2
 808073c:	eb65 0503 	sbc.w	r5, r5, r3
 8080740:	085b      	lsrs	r3, r3, #1
 8080742:	ea4f 0232 	mov.w	r2, r2, rrx
 8080746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808074a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808074e:	ebb6 0e02 	subs.w	lr, r6, r2
 8080752:	eb75 0e03 	sbcs.w	lr, r5, r3
 8080756:	bf22      	ittt	cs
 8080758:	1ab6      	subcs	r6, r6, r2
 808075a:	4675      	movcs	r5, lr
 808075c:	ea40 000c 	orrcs.w	r0, r0, ip
 8080760:	085b      	lsrs	r3, r3, #1
 8080762:	ea4f 0232 	mov.w	r2, r2, rrx
 8080766:	ebb6 0e02 	subs.w	lr, r6, r2
 808076a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808076e:	bf22      	ittt	cs
 8080770:	1ab6      	subcs	r6, r6, r2
 8080772:	4675      	movcs	r5, lr
 8080774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8080778:	085b      	lsrs	r3, r3, #1
 808077a:	ea4f 0232 	mov.w	r2, r2, rrx
 808077e:	ebb6 0e02 	subs.w	lr, r6, r2
 8080782:	eb75 0e03 	sbcs.w	lr, r5, r3
 8080786:	bf22      	ittt	cs
 8080788:	1ab6      	subcs	r6, r6, r2
 808078a:	4675      	movcs	r5, lr
 808078c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8080790:	085b      	lsrs	r3, r3, #1
 8080792:	ea4f 0232 	mov.w	r2, r2, rrx
 8080796:	ebb6 0e02 	subs.w	lr, r6, r2
 808079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808079e:	bf22      	ittt	cs
 80807a0:	1ab6      	subcs	r6, r6, r2
 80807a2:	4675      	movcs	r5, lr
 80807a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80807a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80807ac:	d018      	beq.n	80807e0 <__aeabi_ddiv+0x114>
 80807ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80807b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80807b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80807ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80807be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80807c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80807c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80807ca:	d1c0      	bne.n	808074e <__aeabi_ddiv+0x82>
 80807cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80807d0:	d10b      	bne.n	80807ea <__aeabi_ddiv+0x11e>
 80807d2:	ea41 0100 	orr.w	r1, r1, r0
 80807d6:	f04f 0000 	mov.w	r0, #0
 80807da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80807de:	e7b6      	b.n	808074e <__aeabi_ddiv+0x82>
 80807e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80807e4:	bf04      	itt	eq
 80807e6:	4301      	orreq	r1, r0
 80807e8:	2000      	moveq	r0, #0
 80807ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80807ee:	bf88      	it	hi
 80807f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80807f4:	f63f aeaf 	bhi.w	8080556 <__aeabi_dmul+0xde>
 80807f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80807fc:	bf04      	itt	eq
 80807fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8080802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8080806:	f150 0000 	adcs.w	r0, r0, #0
 808080a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808080e:	bd70      	pop	{r4, r5, r6, pc}
 8080810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8080814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8080818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808081c:	bfc2      	ittt	gt
 808081e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8080822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8080826:	bd70      	popgt	{r4, r5, r6, pc}
 8080828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808082c:	f04f 0e00 	mov.w	lr, #0
 8080830:	3c01      	subs	r4, #1
 8080832:	e690      	b.n	8080556 <__aeabi_dmul+0xde>
 8080834:	ea45 0e06 	orr.w	lr, r5, r6
 8080838:	e68d      	b.n	8080556 <__aeabi_dmul+0xde>
 808083a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808083e:	ea94 0f0c 	teq	r4, ip
 8080842:	bf08      	it	eq
 8080844:	ea95 0f0c 	teqeq	r5, ip
 8080848:	f43f af3b 	beq.w	80806c2 <__aeabi_dmul+0x24a>
 808084c:	ea94 0f0c 	teq	r4, ip
 8080850:	d10a      	bne.n	8080868 <__aeabi_ddiv+0x19c>
 8080852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8080856:	f47f af34 	bne.w	80806c2 <__aeabi_dmul+0x24a>
 808085a:	ea95 0f0c 	teq	r5, ip
 808085e:	f47f af25 	bne.w	80806ac <__aeabi_dmul+0x234>
 8080862:	4610      	mov	r0, r2
 8080864:	4619      	mov	r1, r3
 8080866:	e72c      	b.n	80806c2 <__aeabi_dmul+0x24a>
 8080868:	ea95 0f0c 	teq	r5, ip
 808086c:	d106      	bne.n	808087c <__aeabi_ddiv+0x1b0>
 808086e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8080872:	f43f aefd 	beq.w	8080670 <__aeabi_dmul+0x1f8>
 8080876:	4610      	mov	r0, r2
 8080878:	4619      	mov	r1, r3
 808087a:	e722      	b.n	80806c2 <__aeabi_dmul+0x24a>
 808087c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080880:	bf18      	it	ne
 8080882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8080886:	f47f aec5 	bne.w	8080614 <__aeabi_dmul+0x19c>
 808088a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808088e:	f47f af0d 	bne.w	80806ac <__aeabi_dmul+0x234>
 8080892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8080896:	f47f aeeb 	bne.w	8080670 <__aeabi_dmul+0x1f8>
 808089a:	e712      	b.n	80806c2 <__aeabi_dmul+0x24a>

0808089c <__gedf2>:
 808089c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80808a0:	e006      	b.n	80808b0 <__cmpdf2+0x4>
 80808a2:	bf00      	nop

080808a4 <__ledf2>:
 80808a4:	f04f 0c01 	mov.w	ip, #1
 80808a8:	e002      	b.n	80808b0 <__cmpdf2+0x4>
 80808aa:	bf00      	nop

080808ac <__cmpdf2>:
 80808ac:	f04f 0c01 	mov.w	ip, #1
 80808b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80808b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80808b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80808bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80808c0:	bf18      	it	ne
 80808c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80808c6:	d01b      	beq.n	8080900 <__cmpdf2+0x54>
 80808c8:	b001      	add	sp, #4
 80808ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80808ce:	bf0c      	ite	eq
 80808d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80808d4:	ea91 0f03 	teqne	r1, r3
 80808d8:	bf02      	ittt	eq
 80808da:	ea90 0f02 	teqeq	r0, r2
 80808de:	2000      	moveq	r0, #0
 80808e0:	4770      	bxeq	lr
 80808e2:	f110 0f00 	cmn.w	r0, #0
 80808e6:	ea91 0f03 	teq	r1, r3
 80808ea:	bf58      	it	pl
 80808ec:	4299      	cmppl	r1, r3
 80808ee:	bf08      	it	eq
 80808f0:	4290      	cmpeq	r0, r2
 80808f2:	bf2c      	ite	cs
 80808f4:	17d8      	asrcs	r0, r3, #31
 80808f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80808fa:	f040 0001 	orr.w	r0, r0, #1
 80808fe:	4770      	bx	lr
 8080900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080908:	d102      	bne.n	8080910 <__cmpdf2+0x64>
 808090a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808090e:	d107      	bne.n	8080920 <__cmpdf2+0x74>
 8080910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080918:	d1d6      	bne.n	80808c8 <__cmpdf2+0x1c>
 808091a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808091e:	d0d3      	beq.n	80808c8 <__cmpdf2+0x1c>
 8080920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8080924:	4770      	bx	lr
 8080926:	bf00      	nop

08080928 <__aeabi_cdrcmple>:
 8080928:	4684      	mov	ip, r0
 808092a:	4610      	mov	r0, r2
 808092c:	4662      	mov	r2, ip
 808092e:	468c      	mov	ip, r1
 8080930:	4619      	mov	r1, r3
 8080932:	4663      	mov	r3, ip
 8080934:	e000      	b.n	8080938 <__aeabi_cdcmpeq>
 8080936:	bf00      	nop

08080938 <__aeabi_cdcmpeq>:
 8080938:	b501      	push	{r0, lr}
 808093a:	f7ff ffb7 	bl	80808ac <__cmpdf2>
 808093e:	2800      	cmp	r0, #0
 8080940:	bf48      	it	mi
 8080942:	f110 0f00 	cmnmi.w	r0, #0
 8080946:	bd01      	pop	{r0, pc}

08080948 <__aeabi_dcmpeq>:
 8080948:	f84d ed08 	str.w	lr, [sp, #-8]!
 808094c:	f7ff fff4 	bl	8080938 <__aeabi_cdcmpeq>
 8080950:	bf0c      	ite	eq
 8080952:	2001      	moveq	r0, #1
 8080954:	2000      	movne	r0, #0
 8080956:	f85d fb08 	ldr.w	pc, [sp], #8
 808095a:	bf00      	nop

0808095c <__aeabi_dcmplt>:
 808095c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080960:	f7ff ffea 	bl	8080938 <__aeabi_cdcmpeq>
 8080964:	bf34      	ite	cc
 8080966:	2001      	movcc	r0, #1
 8080968:	2000      	movcs	r0, #0
 808096a:	f85d fb08 	ldr.w	pc, [sp], #8
 808096e:	bf00      	nop

08080970 <__aeabi_dcmple>:
 8080970:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080974:	f7ff ffe0 	bl	8080938 <__aeabi_cdcmpeq>
 8080978:	bf94      	ite	ls
 808097a:	2001      	movls	r0, #1
 808097c:	2000      	movhi	r0, #0
 808097e:	f85d fb08 	ldr.w	pc, [sp], #8
 8080982:	bf00      	nop

08080984 <__aeabi_dcmpge>:
 8080984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080988:	f7ff ffce 	bl	8080928 <__aeabi_cdrcmple>
 808098c:	bf94      	ite	ls
 808098e:	2001      	movls	r0, #1
 8080990:	2000      	movhi	r0, #0
 8080992:	f85d fb08 	ldr.w	pc, [sp], #8
 8080996:	bf00      	nop

08080998 <__aeabi_dcmpgt>:
 8080998:	f84d ed08 	str.w	lr, [sp, #-8]!
 808099c:	f7ff ffc4 	bl	8080928 <__aeabi_cdrcmple>
 80809a0:	bf34      	ite	cc
 80809a2:	2001      	movcc	r0, #1
 80809a4:	2000      	movcs	r0, #0
 80809a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80809aa:	bf00      	nop

080809ac <__aeabi_dcmpun>:
 80809ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80809b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80809b4:	d102      	bne.n	80809bc <__aeabi_dcmpun+0x10>
 80809b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80809ba:	d10a      	bne.n	80809d2 <__aeabi_dcmpun+0x26>
 80809bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80809c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80809c4:	d102      	bne.n	80809cc <__aeabi_dcmpun+0x20>
 80809c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80809ca:	d102      	bne.n	80809d2 <__aeabi_dcmpun+0x26>
 80809cc:	f04f 0000 	mov.w	r0, #0
 80809d0:	4770      	bx	lr
 80809d2:	f04f 0001 	mov.w	r0, #1
 80809d6:	4770      	bx	lr

080809d8 <__aeabi_d2iz>:
 80809d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80809dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80809e0:	d215      	bcs.n	8080a0e <__aeabi_d2iz+0x36>
 80809e2:	d511      	bpl.n	8080a08 <__aeabi_d2iz+0x30>
 80809e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80809e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80809ec:	d912      	bls.n	8080a14 <__aeabi_d2iz+0x3c>
 80809ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80809f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80809f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80809fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80809fe:	fa23 f002 	lsr.w	r0, r3, r2
 8080a02:	bf18      	it	ne
 8080a04:	4240      	negne	r0, r0
 8080a06:	4770      	bx	lr
 8080a08:	f04f 0000 	mov.w	r0, #0
 8080a0c:	4770      	bx	lr
 8080a0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8080a12:	d105      	bne.n	8080a20 <__aeabi_d2iz+0x48>
 8080a14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8080a18:	bf08      	it	eq
 8080a1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8080a1e:	4770      	bx	lr
 8080a20:	f04f 0000 	mov.w	r0, #0
 8080a24:	4770      	bx	lr
 8080a26:	bf00      	nop

08080a28 <__aeabi_ldivmod>:
 8080a28:	b97b      	cbnz	r3, 8080a4a <__aeabi_ldivmod+0x22>
 8080a2a:	b972      	cbnz	r2, 8080a4a <__aeabi_ldivmod+0x22>
 8080a2c:	2900      	cmp	r1, #0
 8080a2e:	bfbe      	ittt	lt
 8080a30:	2000      	movlt	r0, #0
 8080a32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8080a36:	e006      	blt.n	8080a46 <__aeabi_ldivmod+0x1e>
 8080a38:	bf08      	it	eq
 8080a3a:	2800      	cmpeq	r0, #0
 8080a3c:	bf1c      	itt	ne
 8080a3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8080a42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8080a46:	f000 b9bd 	b.w	8080dc4 <__aeabi_idiv0>
 8080a4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8080a4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080a52:	2900      	cmp	r1, #0
 8080a54:	db09      	blt.n	8080a6a <__aeabi_ldivmod+0x42>
 8080a56:	2b00      	cmp	r3, #0
 8080a58:	db1a      	blt.n	8080a90 <__aeabi_ldivmod+0x68>
 8080a5a:	f000 f84d 	bl	8080af8 <__udivmoddi4>
 8080a5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080a62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080a66:	b004      	add	sp, #16
 8080a68:	4770      	bx	lr
 8080a6a:	4240      	negs	r0, r0
 8080a6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8080a70:	2b00      	cmp	r3, #0
 8080a72:	db1b      	blt.n	8080aac <__aeabi_ldivmod+0x84>
 8080a74:	f000 f840 	bl	8080af8 <__udivmoddi4>
 8080a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080a80:	b004      	add	sp, #16
 8080a82:	4240      	negs	r0, r0
 8080a84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8080a88:	4252      	negs	r2, r2
 8080a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080a8e:	4770      	bx	lr
 8080a90:	4252      	negs	r2, r2
 8080a92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080a96:	f000 f82f 	bl	8080af8 <__udivmoddi4>
 8080a9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080aa2:	b004      	add	sp, #16
 8080aa4:	4240      	negs	r0, r0
 8080aa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8080aaa:	4770      	bx	lr
 8080aac:	4252      	negs	r2, r2
 8080aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080ab2:	f000 f821 	bl	8080af8 <__udivmoddi4>
 8080ab6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080abe:	b004      	add	sp, #16
 8080ac0:	4252      	negs	r2, r2
 8080ac2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080ac6:	4770      	bx	lr

08080ac8 <__aeabi_uldivmod>:
 8080ac8:	b953      	cbnz	r3, 8080ae0 <__aeabi_uldivmod+0x18>
 8080aca:	b94a      	cbnz	r2, 8080ae0 <__aeabi_uldivmod+0x18>
 8080acc:	2900      	cmp	r1, #0
 8080ace:	bf08      	it	eq
 8080ad0:	2800      	cmpeq	r0, #0
 8080ad2:	bf1c      	itt	ne
 8080ad4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8080ad8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8080adc:	f000 b972 	b.w	8080dc4 <__aeabi_idiv0>
 8080ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8080ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080ae8:	f000 f806 	bl	8080af8 <__udivmoddi4>
 8080aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080af4:	b004      	add	sp, #16
 8080af6:	4770      	bx	lr

08080af8 <__udivmoddi4>:
 8080af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080afc:	9e08      	ldr	r6, [sp, #32]
 8080afe:	4604      	mov	r4, r0
 8080b00:	4688      	mov	r8, r1
 8080b02:	2b00      	cmp	r3, #0
 8080b04:	d14b      	bne.n	8080b9e <__udivmoddi4+0xa6>
 8080b06:	428a      	cmp	r2, r1
 8080b08:	4615      	mov	r5, r2
 8080b0a:	d967      	bls.n	8080bdc <__udivmoddi4+0xe4>
 8080b0c:	fab2 f282 	clz	r2, r2
 8080b10:	b14a      	cbz	r2, 8080b26 <__udivmoddi4+0x2e>
 8080b12:	f1c2 0720 	rsb	r7, r2, #32
 8080b16:	fa01 f302 	lsl.w	r3, r1, r2
 8080b1a:	fa20 f707 	lsr.w	r7, r0, r7
 8080b1e:	4095      	lsls	r5, r2
 8080b20:	ea47 0803 	orr.w	r8, r7, r3
 8080b24:	4094      	lsls	r4, r2
 8080b26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8080b2a:	0c23      	lsrs	r3, r4, #16
 8080b2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8080b30:	fa1f fc85 	uxth.w	ip, r5
 8080b34:	fb0e 8817 	mls	r8, lr, r7, r8
 8080b38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8080b3c:	fb07 f10c 	mul.w	r1, r7, ip
 8080b40:	4299      	cmp	r1, r3
 8080b42:	d909      	bls.n	8080b58 <__udivmoddi4+0x60>
 8080b44:	18eb      	adds	r3, r5, r3
 8080b46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8080b4a:	f080 811b 	bcs.w	8080d84 <__udivmoddi4+0x28c>
 8080b4e:	4299      	cmp	r1, r3
 8080b50:	f240 8118 	bls.w	8080d84 <__udivmoddi4+0x28c>
 8080b54:	3f02      	subs	r7, #2
 8080b56:	442b      	add	r3, r5
 8080b58:	1a5b      	subs	r3, r3, r1
 8080b5a:	b2a4      	uxth	r4, r4
 8080b5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8080b60:	fb0e 3310 	mls	r3, lr, r0, r3
 8080b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8080b68:	fb00 fc0c 	mul.w	ip, r0, ip
 8080b6c:	45a4      	cmp	ip, r4
 8080b6e:	d909      	bls.n	8080b84 <__udivmoddi4+0x8c>
 8080b70:	192c      	adds	r4, r5, r4
 8080b72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8080b76:	f080 8107 	bcs.w	8080d88 <__udivmoddi4+0x290>
 8080b7a:	45a4      	cmp	ip, r4
 8080b7c:	f240 8104 	bls.w	8080d88 <__udivmoddi4+0x290>
 8080b80:	3802      	subs	r0, #2
 8080b82:	442c      	add	r4, r5
 8080b84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8080b88:	eba4 040c 	sub.w	r4, r4, ip
 8080b8c:	2700      	movs	r7, #0
 8080b8e:	b11e      	cbz	r6, 8080b98 <__udivmoddi4+0xa0>
 8080b90:	40d4      	lsrs	r4, r2
 8080b92:	2300      	movs	r3, #0
 8080b94:	e9c6 4300 	strd	r4, r3, [r6]
 8080b98:	4639      	mov	r1, r7
 8080b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080b9e:	428b      	cmp	r3, r1
 8080ba0:	d909      	bls.n	8080bb6 <__udivmoddi4+0xbe>
 8080ba2:	2e00      	cmp	r6, #0
 8080ba4:	f000 80eb 	beq.w	8080d7e <__udivmoddi4+0x286>
 8080ba8:	2700      	movs	r7, #0
 8080baa:	e9c6 0100 	strd	r0, r1, [r6]
 8080bae:	4638      	mov	r0, r7
 8080bb0:	4639      	mov	r1, r7
 8080bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080bb6:	fab3 f783 	clz	r7, r3
 8080bba:	2f00      	cmp	r7, #0
 8080bbc:	d147      	bne.n	8080c4e <__udivmoddi4+0x156>
 8080bbe:	428b      	cmp	r3, r1
 8080bc0:	d302      	bcc.n	8080bc8 <__udivmoddi4+0xd0>
 8080bc2:	4282      	cmp	r2, r0
 8080bc4:	f200 80fa 	bhi.w	8080dbc <__udivmoddi4+0x2c4>
 8080bc8:	1a84      	subs	r4, r0, r2
 8080bca:	eb61 0303 	sbc.w	r3, r1, r3
 8080bce:	2001      	movs	r0, #1
 8080bd0:	4698      	mov	r8, r3
 8080bd2:	2e00      	cmp	r6, #0
 8080bd4:	d0e0      	beq.n	8080b98 <__udivmoddi4+0xa0>
 8080bd6:	e9c6 4800 	strd	r4, r8, [r6]
 8080bda:	e7dd      	b.n	8080b98 <__udivmoddi4+0xa0>
 8080bdc:	b902      	cbnz	r2, 8080be0 <__udivmoddi4+0xe8>
 8080bde:	deff      	udf	#255	; 0xff
 8080be0:	fab2 f282 	clz	r2, r2
 8080be4:	2a00      	cmp	r2, #0
 8080be6:	f040 808f 	bne.w	8080d08 <__udivmoddi4+0x210>
 8080bea:	1b49      	subs	r1, r1, r5
 8080bec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8080bf0:	fa1f f885 	uxth.w	r8, r5
 8080bf4:	2701      	movs	r7, #1
 8080bf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8080bfa:	0c23      	lsrs	r3, r4, #16
 8080bfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8080c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8080c04:	fb08 f10c 	mul.w	r1, r8, ip
 8080c08:	4299      	cmp	r1, r3
 8080c0a:	d907      	bls.n	8080c1c <__udivmoddi4+0x124>
 8080c0c:	18eb      	adds	r3, r5, r3
 8080c0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8080c12:	d202      	bcs.n	8080c1a <__udivmoddi4+0x122>
 8080c14:	4299      	cmp	r1, r3
 8080c16:	f200 80cd 	bhi.w	8080db4 <__udivmoddi4+0x2bc>
 8080c1a:	4684      	mov	ip, r0
 8080c1c:	1a59      	subs	r1, r3, r1
 8080c1e:	b2a3      	uxth	r3, r4
 8080c20:	fbb1 f0fe 	udiv	r0, r1, lr
 8080c24:	fb0e 1410 	mls	r4, lr, r0, r1
 8080c28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8080c2c:	fb08 f800 	mul.w	r8, r8, r0
 8080c30:	45a0      	cmp	r8, r4
 8080c32:	d907      	bls.n	8080c44 <__udivmoddi4+0x14c>
 8080c34:	192c      	adds	r4, r5, r4
 8080c36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8080c3a:	d202      	bcs.n	8080c42 <__udivmoddi4+0x14a>
 8080c3c:	45a0      	cmp	r8, r4
 8080c3e:	f200 80b6 	bhi.w	8080dae <__udivmoddi4+0x2b6>
 8080c42:	4618      	mov	r0, r3
 8080c44:	eba4 0408 	sub.w	r4, r4, r8
 8080c48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8080c4c:	e79f      	b.n	8080b8e <__udivmoddi4+0x96>
 8080c4e:	f1c7 0c20 	rsb	ip, r7, #32
 8080c52:	40bb      	lsls	r3, r7
 8080c54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8080c58:	ea4e 0e03 	orr.w	lr, lr, r3
 8080c5c:	fa01 f407 	lsl.w	r4, r1, r7
 8080c60:	fa20 f50c 	lsr.w	r5, r0, ip
 8080c64:	fa21 f30c 	lsr.w	r3, r1, ip
 8080c68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8080c6c:	4325      	orrs	r5, r4
 8080c6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8080c72:	0c2c      	lsrs	r4, r5, #16
 8080c74:	fb08 3319 	mls	r3, r8, r9, r3
 8080c78:	fa1f fa8e 	uxth.w	sl, lr
 8080c7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8080c80:	fb09 f40a 	mul.w	r4, r9, sl
 8080c84:	429c      	cmp	r4, r3
 8080c86:	fa02 f207 	lsl.w	r2, r2, r7
 8080c8a:	fa00 f107 	lsl.w	r1, r0, r7
 8080c8e:	d90b      	bls.n	8080ca8 <__udivmoddi4+0x1b0>
 8080c90:	eb1e 0303 	adds.w	r3, lr, r3
 8080c94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8080c98:	f080 8087 	bcs.w	8080daa <__udivmoddi4+0x2b2>
 8080c9c:	429c      	cmp	r4, r3
 8080c9e:	f240 8084 	bls.w	8080daa <__udivmoddi4+0x2b2>
 8080ca2:	f1a9 0902 	sub.w	r9, r9, #2
 8080ca6:	4473      	add	r3, lr
 8080ca8:	1b1b      	subs	r3, r3, r4
 8080caa:	b2ad      	uxth	r5, r5
 8080cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8080cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8080cb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8080cb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8080cbc:	45a2      	cmp	sl, r4
 8080cbe:	d908      	bls.n	8080cd2 <__udivmoddi4+0x1da>
 8080cc0:	eb1e 0404 	adds.w	r4, lr, r4
 8080cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8080cc8:	d26b      	bcs.n	8080da2 <__udivmoddi4+0x2aa>
 8080cca:	45a2      	cmp	sl, r4
 8080ccc:	d969      	bls.n	8080da2 <__udivmoddi4+0x2aa>
 8080cce:	3802      	subs	r0, #2
 8080cd0:	4474      	add	r4, lr
 8080cd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8080cd6:	fba0 8902 	umull	r8, r9, r0, r2
 8080cda:	eba4 040a 	sub.w	r4, r4, sl
 8080cde:	454c      	cmp	r4, r9
 8080ce0:	46c2      	mov	sl, r8
 8080ce2:	464b      	mov	r3, r9
 8080ce4:	d354      	bcc.n	8080d90 <__udivmoddi4+0x298>
 8080ce6:	d051      	beq.n	8080d8c <__udivmoddi4+0x294>
 8080ce8:	2e00      	cmp	r6, #0
 8080cea:	d069      	beq.n	8080dc0 <__udivmoddi4+0x2c8>
 8080cec:	ebb1 050a 	subs.w	r5, r1, sl
 8080cf0:	eb64 0403 	sbc.w	r4, r4, r3
 8080cf4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8080cf8:	40fd      	lsrs	r5, r7
 8080cfa:	40fc      	lsrs	r4, r7
 8080cfc:	ea4c 0505 	orr.w	r5, ip, r5
 8080d00:	e9c6 5400 	strd	r5, r4, [r6]
 8080d04:	2700      	movs	r7, #0
 8080d06:	e747      	b.n	8080b98 <__udivmoddi4+0xa0>
 8080d08:	f1c2 0320 	rsb	r3, r2, #32
 8080d0c:	fa20 f703 	lsr.w	r7, r0, r3
 8080d10:	4095      	lsls	r5, r2
 8080d12:	fa01 f002 	lsl.w	r0, r1, r2
 8080d16:	fa21 f303 	lsr.w	r3, r1, r3
 8080d1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8080d1e:	4338      	orrs	r0, r7
 8080d20:	0c01      	lsrs	r1, r0, #16
 8080d22:	fbb3 f7fe 	udiv	r7, r3, lr
 8080d26:	fa1f f885 	uxth.w	r8, r5
 8080d2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8080d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8080d32:	fb07 f308 	mul.w	r3, r7, r8
 8080d36:	428b      	cmp	r3, r1
 8080d38:	fa04 f402 	lsl.w	r4, r4, r2
 8080d3c:	d907      	bls.n	8080d4e <__udivmoddi4+0x256>
 8080d3e:	1869      	adds	r1, r5, r1
 8080d40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8080d44:	d22f      	bcs.n	8080da6 <__udivmoddi4+0x2ae>
 8080d46:	428b      	cmp	r3, r1
 8080d48:	d92d      	bls.n	8080da6 <__udivmoddi4+0x2ae>
 8080d4a:	3f02      	subs	r7, #2
 8080d4c:	4429      	add	r1, r5
 8080d4e:	1acb      	subs	r3, r1, r3
 8080d50:	b281      	uxth	r1, r0
 8080d52:	fbb3 f0fe 	udiv	r0, r3, lr
 8080d56:	fb0e 3310 	mls	r3, lr, r0, r3
 8080d5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8080d5e:	fb00 f308 	mul.w	r3, r0, r8
 8080d62:	428b      	cmp	r3, r1
 8080d64:	d907      	bls.n	8080d76 <__udivmoddi4+0x27e>
 8080d66:	1869      	adds	r1, r5, r1
 8080d68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8080d6c:	d217      	bcs.n	8080d9e <__udivmoddi4+0x2a6>
 8080d6e:	428b      	cmp	r3, r1
 8080d70:	d915      	bls.n	8080d9e <__udivmoddi4+0x2a6>
 8080d72:	3802      	subs	r0, #2
 8080d74:	4429      	add	r1, r5
 8080d76:	1ac9      	subs	r1, r1, r3
 8080d78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8080d7c:	e73b      	b.n	8080bf6 <__udivmoddi4+0xfe>
 8080d7e:	4637      	mov	r7, r6
 8080d80:	4630      	mov	r0, r6
 8080d82:	e709      	b.n	8080b98 <__udivmoddi4+0xa0>
 8080d84:	4607      	mov	r7, r0
 8080d86:	e6e7      	b.n	8080b58 <__udivmoddi4+0x60>
 8080d88:	4618      	mov	r0, r3
 8080d8a:	e6fb      	b.n	8080b84 <__udivmoddi4+0x8c>
 8080d8c:	4541      	cmp	r1, r8
 8080d8e:	d2ab      	bcs.n	8080ce8 <__udivmoddi4+0x1f0>
 8080d90:	ebb8 0a02 	subs.w	sl, r8, r2
 8080d94:	eb69 020e 	sbc.w	r2, r9, lr
 8080d98:	3801      	subs	r0, #1
 8080d9a:	4613      	mov	r3, r2
 8080d9c:	e7a4      	b.n	8080ce8 <__udivmoddi4+0x1f0>
 8080d9e:	4660      	mov	r0, ip
 8080da0:	e7e9      	b.n	8080d76 <__udivmoddi4+0x27e>
 8080da2:	4618      	mov	r0, r3
 8080da4:	e795      	b.n	8080cd2 <__udivmoddi4+0x1da>
 8080da6:	4667      	mov	r7, ip
 8080da8:	e7d1      	b.n	8080d4e <__udivmoddi4+0x256>
 8080daa:	4681      	mov	r9, r0
 8080dac:	e77c      	b.n	8080ca8 <__udivmoddi4+0x1b0>
 8080dae:	3802      	subs	r0, #2
 8080db0:	442c      	add	r4, r5
 8080db2:	e747      	b.n	8080c44 <__udivmoddi4+0x14c>
 8080db4:	f1ac 0c02 	sub.w	ip, ip, #2
 8080db8:	442b      	add	r3, r5
 8080dba:	e72f      	b.n	8080c1c <__udivmoddi4+0x124>
 8080dbc:	4638      	mov	r0, r7
 8080dbe:	e708      	b.n	8080bd2 <__udivmoddi4+0xda>
 8080dc0:	4637      	mov	r7, r6
 8080dc2:	e6e9      	b.n	8080b98 <__udivmoddi4+0xa0>

08080dc4 <__aeabi_idiv0>:
 8080dc4:	4770      	bx	lr
 8080dc6:	bf00      	nop

08080dc8 <bmp280_init_default_params>:
#define BMP280_REG_CALIB       0x88
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6

void bmp280_init_default_params(bmp280_params_t *params) {
 8080dc8:	b480      	push	{r7}
 8080dca:	b083      	sub	sp, #12
 8080dcc:	af00      	add	r7, sp, #0
 8080dce:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8080dd0:	687b      	ldr	r3, [r7, #4]
 8080dd2:	2203      	movs	r2, #3
 8080dd4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8080dd6:	687b      	ldr	r3, [r7, #4]
 8080dd8:	2200      	movs	r2, #0
 8080dda:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8080ddc:	687b      	ldr	r3, [r7, #4]
 8080dde:	2203      	movs	r2, #3
 8080de0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8080de2:	687b      	ldr	r3, [r7, #4]
 8080de4:	2203      	movs	r2, #3
 8080de6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8080de8:	687b      	ldr	r3, [r7, #4]
 8080dea:	2203      	movs	r2, #3
 8080dec:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8080dee:	687b      	ldr	r3, [r7, #4]
 8080df0:	2203      	movs	r2, #3
 8080df2:	715a      	strb	r2, [r3, #5]
}
 8080df4:	bf00      	nop
 8080df6:	370c      	adds	r7, #12
 8080df8:	46bd      	mov	sp, r7
 8080dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080dfe:	4770      	bx	lr

08080e00 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8080e00:	b580      	push	{r7, lr}
 8080e02:	b088      	sub	sp, #32
 8080e04:	af02      	add	r7, sp, #8
 8080e06:	60f8      	str	r0, [r7, #12]
 8080e08:	460b      	mov	r3, r1
 8080e0a:	607a      	str	r2, [r7, #4]
 8080e0c:	72fb      	strb	r3, [r7, #11]
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
		return true;
	} else
		return false;
#else
	uint8_t tx_buff[3]={addr | 0x80,0,0};
 8080e0e:	7afb      	ldrb	r3, [r7, #11]
 8080e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080e14:	b2db      	uxtb	r3, r3
 8080e16:	753b      	strb	r3, [r7, #20]
 8080e18:	2300      	movs	r3, #0
 8080e1a:	757b      	strb	r3, [r7, #21]
 8080e1c:	2300      	movs	r3, #0
 8080e1e:	75bb      	strb	r3, [r7, #22]
	uint8_t rx_buff[3];
	uint8_t status;

	//HAL_GPIO_WritePin(dev->cs_gpio, dev->cs_pin, GPIO_PIN_RESET );
	BMP280_CS_ENABLE(dev);
 8080e20:	68fb      	ldr	r3, [r7, #12]
 8080e22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8080e24:	68fb      	ldr	r3, [r7, #12]
 8080e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8080e28:	2200      	movs	r2, #0
 8080e2a:	4619      	mov	r1, r3
 8080e2c:	f009 fc98 	bl	808a760 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(dev->hspi, tx_buff, rx_buff, 3, 1000);
 8080e30:	68fb      	ldr	r3, [r7, #12]
 8080e32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8080e34:	f107 0210 	add.w	r2, r7, #16
 8080e38:	f107 0114 	add.w	r1, r7, #20
 8080e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080e40:	9300      	str	r3, [sp, #0]
 8080e42:	2303      	movs	r3, #3
 8080e44:	f00f fad4 	bl	80903f0 <HAL_SPI_TransmitReceive>
 8080e48:	4603      	mov	r3, r0
 8080e4a:	75fb      	strb	r3, [r7, #23]

	BMP280_CS_DISABLE(dev);
 8080e4c:	68fb      	ldr	r3, [r7, #12]
 8080e4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8080e50:	68fb      	ldr	r3, [r7, #12]
 8080e52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8080e54:	2201      	movs	r2, #1
 8080e56:	4619      	mov	r1, r3
 8080e58:	f009 fc82 	bl	808a760 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
 8080e5c:	7dfb      	ldrb	r3, [r7, #23]
 8080e5e:	2b00      	cmp	r3, #0
 8080e60:	d001      	beq.n	8080e66 <read_register16+0x66>
 8080e62:	2300      	movs	r3, #0
 8080e64:	e00a      	b.n	8080e7c <read_register16+0x7c>
	else
	{
		*value = (((uint16_t)rx_buff[2])<<8) + (uint16_t)rx_buff[1];
 8080e66:	7cbb      	ldrb	r3, [r7, #18]
 8080e68:	b29b      	uxth	r3, r3
 8080e6a:	021b      	lsls	r3, r3, #8
 8080e6c:	b29a      	uxth	r2, r3
 8080e6e:	7c7b      	ldrb	r3, [r7, #17]
 8080e70:	b29b      	uxth	r3, r3
 8080e72:	4413      	add	r3, r2
 8080e74:	b29a      	uxth	r2, r3
 8080e76:	687b      	ldr	r3, [r7, #4]
 8080e78:	801a      	strh	r2, [r3, #0]

		return true;
 8080e7a:	2301      	movs	r3, #1
	}
#endif /* BMP280_SPI */

}
 8080e7c:	4618      	mov	r0, r3
 8080e7e:	3718      	adds	r7, #24
 8080e80:	46bd      	mov	sp, r7
 8080e82:	bd80      	pop	{r7, pc}

08080e84 <read_data>:

static int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value, uint8_t len) {
 8080e84:	b5b0      	push	{r4, r5, r7, lr}
 8080e86:	b08c      	sub	sp, #48	; 0x30
 8080e88:	af02      	add	r7, sp, #8
 8080e8a:	60f8      	str	r0, [r7, #12]
 8080e8c:	607a      	str	r2, [r7, #4]
 8080e8e:	461a      	mov	r2, r3
 8080e90:	460b      	mov	r3, r1
 8080e92:	72fb      	strb	r3, [r7, #11]
 8080e94:	4613      	mov	r3, r2
 8080e96:	72bb      	strb	r3, [r7, #10]
 8080e98:	466b      	mov	r3, sp
 8080e9a:	461d      	mov	r5, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
		return 0;
	else
		return 1;
#else
	uint8_t tx_buff[len+1];
 8080e9c:	7abb      	ldrb	r3, [r7, #10]
 8080e9e:	1c58      	adds	r0, r3, #1
 8080ea0:	1e43      	subs	r3, r0, #1
 8080ea2:	623b      	str	r3, [r7, #32]
 8080ea4:	4603      	mov	r3, r0
 8080ea6:	4619      	mov	r1, r3
 8080ea8:	f04f 0200 	mov.w	r2, #0
 8080eac:	f04f 0300 	mov.w	r3, #0
 8080eb0:	f04f 0400 	mov.w	r4, #0
 8080eb4:	00d4      	lsls	r4, r2, #3
 8080eb6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8080eba:	00cb      	lsls	r3, r1, #3
 8080ebc:	4603      	mov	r3, r0
 8080ebe:	4619      	mov	r1, r3
 8080ec0:	f04f 0200 	mov.w	r2, #0
 8080ec4:	f04f 0300 	mov.w	r3, #0
 8080ec8:	f04f 0400 	mov.w	r4, #0
 8080ecc:	00d4      	lsls	r4, r2, #3
 8080ece:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8080ed2:	00cb      	lsls	r3, r1, #3
 8080ed4:	4603      	mov	r3, r0
 8080ed6:	3307      	adds	r3, #7
 8080ed8:	08db      	lsrs	r3, r3, #3
 8080eda:	00db      	lsls	r3, r3, #3
 8080edc:	ebad 0d03 	sub.w	sp, sp, r3
 8080ee0:	ab02      	add	r3, sp, #8
 8080ee2:	3300      	adds	r3, #0
 8080ee4:	61fb      	str	r3, [r7, #28]
	uint8_t rx_buff[len+1];
 8080ee6:	7abb      	ldrb	r3, [r7, #10]
 8080ee8:	1c58      	adds	r0, r3, #1
 8080eea:	1e43      	subs	r3, r0, #1
 8080eec:	61bb      	str	r3, [r7, #24]
 8080eee:	4603      	mov	r3, r0
 8080ef0:	4619      	mov	r1, r3
 8080ef2:	f04f 0200 	mov.w	r2, #0
 8080ef6:	f04f 0300 	mov.w	r3, #0
 8080efa:	f04f 0400 	mov.w	r4, #0
 8080efe:	00d4      	lsls	r4, r2, #3
 8080f00:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8080f04:	00cb      	lsls	r3, r1, #3
 8080f06:	4603      	mov	r3, r0
 8080f08:	4619      	mov	r1, r3
 8080f0a:	f04f 0200 	mov.w	r2, #0
 8080f0e:	f04f 0300 	mov.w	r3, #0
 8080f12:	f04f 0400 	mov.w	r4, #0
 8080f16:	00d4      	lsls	r4, r2, #3
 8080f18:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8080f1c:	00cb      	lsls	r3, r1, #3
 8080f1e:	4603      	mov	r3, r0
 8080f20:	3307      	adds	r3, #7
 8080f22:	08db      	lsrs	r3, r3, #3
 8080f24:	00db      	lsls	r3, r3, #3
 8080f26:	ebad 0d03 	sub.w	sp, sp, r3
 8080f2a:	ab02      	add	r3, sp, #8
 8080f2c:	3300      	adds	r3, #0
 8080f2e:	617b      	str	r3, [r7, #20]
	uint8_t status;
	uint8_t i;

	tx_buff[0]=addr | 0x80;
 8080f30:	7afb      	ldrb	r3, [r7, #11]
 8080f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080f36:	b2da      	uxtb	r2, r3
 8080f38:	69fb      	ldr	r3, [r7, #28]
 8080f3a:	701a      	strb	r2, [r3, #0]
	for (i=1; i<len+1; i++)
 8080f3c:	2301      	movs	r3, #1
 8080f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8080f42:	e009      	b.n	8080f58 <read_data+0xd4>
	{
		tx_buff[i]=0;
 8080f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8080f48:	69fa      	ldr	r2, [r7, #28]
 8080f4a:	2100      	movs	r1, #0
 8080f4c:	54d1      	strb	r1, [r2, r3]
	for (i=1; i<len+1; i++)
 8080f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8080f52:	3301      	adds	r3, #1
 8080f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8080f58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8080f5c:	7abb      	ldrb	r3, [r7, #10]
 8080f5e:	3301      	adds	r3, #1
 8080f60:	429a      	cmp	r2, r3
 8080f62:	dbef      	blt.n	8080f44 <read_data+0xc0>
	}

	BMP280_CS_ENABLE(dev);
 8080f64:	68fb      	ldr	r3, [r7, #12]
 8080f66:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8080f68:	68fb      	ldr	r3, [r7, #12]
 8080f6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8080f6c:	2200      	movs	r2, #0
 8080f6e:	4619      	mov	r1, r3
 8080f70:	f009 fbf6 	bl	808a760 <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(dev->hspi, tx_buff, rx_buff, len+1, 1000);
 8080f74:	68fb      	ldr	r3, [r7, #12]
 8080f76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8080f78:	69f9      	ldr	r1, [r7, #28]
 8080f7a:	697a      	ldr	r2, [r7, #20]
 8080f7c:	7abb      	ldrb	r3, [r7, #10]
 8080f7e:	b29b      	uxth	r3, r3
 8080f80:	3301      	adds	r3, #1
 8080f82:	b29c      	uxth	r4, r3
 8080f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f88:	9300      	str	r3, [sp, #0]
 8080f8a:	4623      	mov	r3, r4
 8080f8c:	f00f fa30 	bl	80903f0 <HAL_SPI_TransmitReceive>
 8080f90:	4603      	mov	r3, r0
 8080f92:	74fb      	strb	r3, [r7, #19]

	BMP280_CS_DISABLE(dev);
 8080f94:	68fb      	ldr	r3, [r7, #12]
 8080f96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8080f98:	68fb      	ldr	r3, [r7, #12]
 8080f9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8080f9c:	2201      	movs	r2, #1
 8080f9e:	4619      	mov	r1, r3
 8080fa0:	f009 fbde 	bl	808a760 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
 8080fa4:	7cfb      	ldrb	r3, [r7, #19]
 8080fa6:	2b00      	cmp	r3, #0
 8080fa8:	d001      	beq.n	8080fae <read_data+0x12a>
 8080faa:	2300      	movs	r3, #0
 8080fac:	e019      	b.n	8080fe2 <read_data+0x15e>
	else
	{
		for (i=1; i<len+1; i++)
 8080fae:	2301      	movs	r3, #1
 8080fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8080fb4:	e00e      	b.n	8080fd4 <read_data+0x150>
		{
			value[i-1]=rx_buff[i];
 8080fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8080fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8080fbe:	3b01      	subs	r3, #1
 8080fc0:	6879      	ldr	r1, [r7, #4]
 8080fc2:	440b      	add	r3, r1
 8080fc4:	6979      	ldr	r1, [r7, #20]
 8080fc6:	5c8a      	ldrb	r2, [r1, r2]
 8080fc8:	701a      	strb	r2, [r3, #0]
		for (i=1; i<len+1; i++)
 8080fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8080fce:	3301      	adds	r3, #1
 8080fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8080fd4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8080fd8:	7abb      	ldrb	r3, [r7, #10]
 8080fda:	3301      	adds	r3, #1
 8080fdc:	429a      	cmp	r2, r3
 8080fde:	dbea      	blt.n	8080fb6 <read_data+0x132>
		}

		return true;
 8080fe0:	2301      	movs	r3, #1
 8080fe2:	46ad      	mov	sp, r5
	}
#endif /* BMP280_SPI */

}
 8080fe4:	4618      	mov	r0, r3
 8080fe6:	3728      	adds	r7, #40	; 0x28
 8080fe8:	46bd      	mov	sp, r7
 8080fea:	bdb0      	pop	{r4, r5, r7, pc}

08080fec <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8080fec:	b580      	push	{r7, lr}
 8080fee:	b084      	sub	sp, #16
 8080ff0:	af00      	add	r7, sp, #0
 8080ff2:	6078      	str	r0, [r7, #4]
 8080ff4:	460b      	mov	r3, r1
 8080ff6:	70fb      	strb	r3, [r7, #3]
 8080ff8:	4613      	mov	r3, r2
 8080ffa:	70bb      	strb	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
		return false;
	else
		return true;
#else
	uint8_t tx_buff[2]={addr & 0x7F,value};
 8080ffc:	78fb      	ldrb	r3, [r7, #3]
 8080ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081002:	b2db      	uxtb	r3, r3
 8081004:	733b      	strb	r3, [r7, #12]
 8081006:	78bb      	ldrb	r3, [r7, #2]
 8081008:	737b      	strb	r3, [r7, #13]
	uint8_t status;

	BMP280_CS_ENABLE(dev);
 808100a:	687b      	ldr	r3, [r7, #4]
 808100c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 808100e:	687b      	ldr	r3, [r7, #4]
 8081010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8081012:	2200      	movs	r2, #0
 8081014:	4619      	mov	r1, r3
 8081016:	f009 fba3 	bl	808a760 <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(dev->hspi, tx_buff, 2, 1000);
 808101a:	687b      	ldr	r3, [r7, #4]
 808101c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 808101e:	f107 010c 	add.w	r1, r7, #12
 8081022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081026:	2202      	movs	r2, #2
 8081028:	f00e fede 	bl	808fde8 <HAL_SPI_Transmit>
 808102c:	4603      	mov	r3, r0
 808102e:	73fb      	strb	r3, [r7, #15]

	BMP280_CS_DISABLE(dev);
 8081030:	687b      	ldr	r3, [r7, #4]
 8081032:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8081034:	687b      	ldr	r3, [r7, #4]
 8081036:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8081038:	2201      	movs	r2, #1
 808103a:	4619      	mov	r1, r3
 808103c:	f009 fb90 	bl	808a760 <HAL_GPIO_WritePin>

	if (status != HAL_OK) return false;
 8081040:	7bfb      	ldrb	r3, [r7, #15]
 8081042:	2b00      	cmp	r3, #0
 8081044:	d001      	beq.n	808104a <write_register8+0x5e>
 8081046:	2300      	movs	r3, #0
 8081048:	e000      	b.n	808104c <write_register8+0x60>
	else return true;
 808104a:	2301      	movs	r3, #1
#endif /* BMP280_SPI */
}
 808104c:	4618      	mov	r0, r3
 808104e:	3710      	adds	r7, #16
 8081050:	46bd      	mov	sp, r7
 8081052:	bd80      	pop	{r7, pc}

08081054 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8081054:	b580      	push	{r7, lr}
 8081056:	b082      	sub	sp, #8
 8081058:	af00      	add	r7, sp, #0
 808105a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 808105c:	687b      	ldr	r3, [r7, #4]
 808105e:	461a      	mov	r2, r3
 8081060:	2188      	movs	r1, #136	; 0x88
 8081062:	6878      	ldr	r0, [r7, #4]
 8081064:	f7ff fecc 	bl	8080e00 <read_register16>
 8081068:	4603      	mov	r3, r0
 808106a:	2b00      	cmp	r3, #0
 808106c:	d06f      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 808106e:	687b      	ldr	r3, [r7, #4]
 8081070:	3302      	adds	r3, #2
 8081072:	461a      	mov	r2, r3
 8081074:	218a      	movs	r1, #138	; 0x8a
 8081076:	6878      	ldr	r0, [r7, #4]
 8081078:	f7ff fec2 	bl	8080e00 <read_register16>
 808107c:	4603      	mov	r3, r0
 808107e:	2b00      	cmp	r3, #0
 8081080:	d065      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8081082:	687b      	ldr	r3, [r7, #4]
 8081084:	3304      	adds	r3, #4
 8081086:	461a      	mov	r2, r3
 8081088:	218c      	movs	r1, #140	; 0x8c
 808108a:	6878      	ldr	r0, [r7, #4]
 808108c:	f7ff feb8 	bl	8080e00 <read_register16>
 8081090:	4603      	mov	r3, r0
 8081092:	2b00      	cmp	r3, #0
 8081094:	d05b      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8081096:	687b      	ldr	r3, [r7, #4]
 8081098:	3306      	adds	r3, #6
 808109a:	461a      	mov	r2, r3
 808109c:	218e      	movs	r1, #142	; 0x8e
 808109e:	6878      	ldr	r0, [r7, #4]
 80810a0:	f7ff feae 	bl	8080e00 <read_register16>
 80810a4:	4603      	mov	r3, r0
 80810a6:	2b00      	cmp	r3, #0
 80810a8:	d051      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80810aa:	687b      	ldr	r3, [r7, #4]
 80810ac:	3308      	adds	r3, #8
 80810ae:	461a      	mov	r2, r3
 80810b0:	2190      	movs	r1, #144	; 0x90
 80810b2:	6878      	ldr	r0, [r7, #4]
 80810b4:	f7ff fea4 	bl	8080e00 <read_register16>
 80810b8:	4603      	mov	r3, r0
 80810ba:	2b00      	cmp	r3, #0
 80810bc:	d047      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80810be:	687b      	ldr	r3, [r7, #4]
 80810c0:	330a      	adds	r3, #10
 80810c2:	461a      	mov	r2, r3
 80810c4:	2192      	movs	r1, #146	; 0x92
 80810c6:	6878      	ldr	r0, [r7, #4]
 80810c8:	f7ff fe9a 	bl	8080e00 <read_register16>
 80810cc:	4603      	mov	r3, r0
 80810ce:	2b00      	cmp	r3, #0
 80810d0:	d03d      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80810d2:	687b      	ldr	r3, [r7, #4]
 80810d4:	330c      	adds	r3, #12
 80810d6:	461a      	mov	r2, r3
 80810d8:	2194      	movs	r1, #148	; 0x94
 80810da:	6878      	ldr	r0, [r7, #4]
 80810dc:	f7ff fe90 	bl	8080e00 <read_register16>
 80810e0:	4603      	mov	r3, r0
 80810e2:	2b00      	cmp	r3, #0
 80810e4:	d033      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80810e6:	687b      	ldr	r3, [r7, #4]
 80810e8:	330e      	adds	r3, #14
 80810ea:	461a      	mov	r2, r3
 80810ec:	2196      	movs	r1, #150	; 0x96
 80810ee:	6878      	ldr	r0, [r7, #4]
 80810f0:	f7ff fe86 	bl	8080e00 <read_register16>
 80810f4:	4603      	mov	r3, r0
 80810f6:	2b00      	cmp	r3, #0
 80810f8:	d029      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80810fa:	687b      	ldr	r3, [r7, #4]
 80810fc:	3310      	adds	r3, #16
 80810fe:	461a      	mov	r2, r3
 8081100:	2198      	movs	r1, #152	; 0x98
 8081102:	6878      	ldr	r0, [r7, #4]
 8081104:	f7ff fe7c 	bl	8080e00 <read_register16>
 8081108:	4603      	mov	r3, r0
 808110a:	2b00      	cmp	r3, #0
 808110c:	d01f      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 808110e:	687b      	ldr	r3, [r7, #4]
 8081110:	3312      	adds	r3, #18
 8081112:	461a      	mov	r2, r3
 8081114:	219a      	movs	r1, #154	; 0x9a
 8081116:	6878      	ldr	r0, [r7, #4]
 8081118:	f7ff fe72 	bl	8080e00 <read_register16>
 808111c:	4603      	mov	r3, r0
 808111e:	2b00      	cmp	r3, #0
 8081120:	d015      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8081122:	687b      	ldr	r3, [r7, #4]
 8081124:	3314      	adds	r3, #20
 8081126:	461a      	mov	r2, r3
 8081128:	219c      	movs	r1, #156	; 0x9c
 808112a:	6878      	ldr	r0, [r7, #4]
 808112c:	f7ff fe68 	bl	8080e00 <read_register16>
 8081130:	4603      	mov	r3, r0
 8081132:	2b00      	cmp	r3, #0
 8081134:	d00b      	beq.n	808114e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8081136:	687b      	ldr	r3, [r7, #4]
 8081138:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 808113a:	461a      	mov	r2, r3
 808113c:	219e      	movs	r1, #158	; 0x9e
 808113e:	6878      	ldr	r0, [r7, #4]
 8081140:	f7ff fe5e 	bl	8080e00 <read_register16>
 8081144:	4603      	mov	r3, r0
 8081146:	2b00      	cmp	r3, #0
 8081148:	d001      	beq.n	808114e <read_calibration_data+0xfa>

		return true;
 808114a:	2301      	movs	r3, #1
 808114c:	e000      	b.n	8081150 <read_calibration_data+0xfc>
	}

	return false;
 808114e:	2300      	movs	r3, #0
}
 8081150:	4618      	mov	r0, r3
 8081152:	3708      	adds	r7, #8
 8081154:	46bd      	mov	sp, r7
 8081156:	bd80      	pop	{r7, pc}

08081158 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8081158:	b580      	push	{r7, lr}
 808115a:	b084      	sub	sp, #16
 808115c:	af00      	add	r7, sp, #0
 808115e:	6078      	str	r0, [r7, #4]
	uint16_t h4=0, h5=0;
 8081160:	2300      	movs	r3, #0
 8081162:	81fb      	strh	r3, [r7, #14]
 8081164:	2300      	movs	r3, #0
 8081166:	81bb      	strh	r3, [r7, #12]

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8081168:	687b      	ldr	r3, [r7, #4]
 808116a:	f103 0218 	add.w	r2, r3, #24
 808116e:	2301      	movs	r3, #1
 8081170:	21a1      	movs	r1, #161	; 0xa1
 8081172:	6878      	ldr	r0, [r7, #4]
 8081174:	f7ff fe86 	bl	8080e84 <read_data>
 8081178:	4603      	mov	r3, r0
 808117a:	2b00      	cmp	r3, #0
 808117c:	d14b      	bne.n	8081216 <read_hum_calibration_data+0xbe>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 808117e:	687b      	ldr	r3, [r7, #4]
 8081180:	331a      	adds	r3, #26
 8081182:	461a      	mov	r2, r3
 8081184:	21e1      	movs	r1, #225	; 0xe1
 8081186:	6878      	ldr	r0, [r7, #4]
 8081188:	f7ff fe3a 	bl	8080e00 <read_register16>
 808118c:	4603      	mov	r3, r0
 808118e:	2b00      	cmp	r3, #0
 8081190:	d041      	beq.n	8081216 <read_hum_calibration_data+0xbe>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8081192:	687b      	ldr	r3, [r7, #4]
 8081194:	f103 021c 	add.w	r2, r3, #28
 8081198:	2301      	movs	r3, #1
 808119a:	21e3      	movs	r1, #227	; 0xe3
 808119c:	6878      	ldr	r0, [r7, #4]
 808119e:	f7ff fe71 	bl	8080e84 <read_data>
 80811a2:	4603      	mov	r3, r0
 80811a4:	2b00      	cmp	r3, #0
 80811a6:	d136      	bne.n	8081216 <read_hum_calibration_data+0xbe>
			&& read_register16(dev, 0xe4, &h4)
 80811a8:	f107 030e 	add.w	r3, r7, #14
 80811ac:	461a      	mov	r2, r3
 80811ae:	21e4      	movs	r1, #228	; 0xe4
 80811b0:	6878      	ldr	r0, [r7, #4]
 80811b2:	f7ff fe25 	bl	8080e00 <read_register16>
 80811b6:	4603      	mov	r3, r0
 80811b8:	2b00      	cmp	r3, #0
 80811ba:	d02c      	beq.n	8081216 <read_hum_calibration_data+0xbe>
			&& read_register16(dev, 0xe5, &h5)
 80811bc:	f107 030c 	add.w	r3, r7, #12
 80811c0:	461a      	mov	r2, r3
 80811c2:	21e5      	movs	r1, #229	; 0xe5
 80811c4:	6878      	ldr	r0, [r7, #4]
 80811c6:	f7ff fe1b 	bl	8080e00 <read_register16>
 80811ca:	4603      	mov	r3, r0
 80811cc:	2b00      	cmp	r3, #0
 80811ce:	d022      	beq.n	8081216 <read_hum_calibration_data+0xbe>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80811d0:	687b      	ldr	r3, [r7, #4]
 80811d2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80811d6:	2301      	movs	r3, #1
 80811d8:	21e7      	movs	r1, #231	; 0xe7
 80811da:	6878      	ldr	r0, [r7, #4]
 80811dc:	f7ff fe52 	bl	8080e84 <read_data>
 80811e0:	4603      	mov	r3, r0
 80811e2:	2b00      	cmp	r3, #0
 80811e4:	d117      	bne.n	8081216 <read_hum_calibration_data+0xbe>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80811e6:	89fb      	ldrh	r3, [r7, #14]
 80811e8:	011b      	lsls	r3, r3, #4
 80811ea:	b21b      	sxth	r3, r3
 80811ec:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80811f0:	b21a      	sxth	r2, r3
 80811f2:	89fb      	ldrh	r3, [r7, #14]
 80811f4:	121b      	asrs	r3, r3, #8
 80811f6:	b21b      	sxth	r3, r3
 80811f8:	f003 030f 	and.w	r3, r3, #15
 80811fc:	b21b      	sxth	r3, r3
 80811fe:	4313      	orrs	r3, r2
 8081200:	b21a      	sxth	r2, r3
 8081202:	687b      	ldr	r3, [r7, #4]
 8081204:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8081206:	89bb      	ldrh	r3, [r7, #12]
 8081208:	091b      	lsrs	r3, r3, #4
 808120a:	b29b      	uxth	r3, r3
 808120c:	b21a      	sxth	r2, r3
 808120e:	687b      	ldr	r3, [r7, #4]
 8081210:	841a      	strh	r2, [r3, #32]

		return true;
 8081212:	2301      	movs	r3, #1
 8081214:	e000      	b.n	8081218 <read_hum_calibration_data+0xc0>
	}

	return false;
 8081216:	2300      	movs	r3, #0
}
 8081218:	4618      	mov	r0, r3
 808121a:	3710      	adds	r7, #16
 808121c:	46bd      	mov	sp, r7
 808121e:	bd80      	pop	{r7, pc}

08081220 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8081220:	b580      	push	{r7, lr}
 8081222:	b084      	sub	sp, #16
 8081224:	af00      	add	r7, sp, #0
 8081226:	6078      	str	r0, [r7, #4]
 8081228:	6039      	str	r1, [r7, #0]

		return false;
	}
#endif /*BMP280_SPI */

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)==false) {
 808122a:	687b      	ldr	r3, [r7, #4]
 808122c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8081230:	2301      	movs	r3, #1
 8081232:	21d0      	movs	r1, #208	; 0xd0
 8081234:	6878      	ldr	r0, [r7, #4]
 8081236:	f7ff fe25 	bl	8080e84 <read_data>
 808123a:	4603      	mov	r3, r0
 808123c:	2b00      	cmp	r3, #0
 808123e:	d101      	bne.n	8081244 <bmp280_init+0x24>
		return false;
 8081240:	2300      	movs	r3, #0
 8081242:	e08e      	b.n	8081362 <bmp280_init+0x142>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8081244:	687b      	ldr	r3, [r7, #4]
 8081246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808124a:	2b58      	cmp	r3, #88	; 0x58
 808124c:	d006      	beq.n	808125c <bmp280_init+0x3c>
 808124e:	687b      	ldr	r3, [r7, #4]
 8081250:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8081254:	2b60      	cmp	r3, #96	; 0x60
 8081256:	d001      	beq.n	808125c <bmp280_init+0x3c>

		return false;
 8081258:	2300      	movs	r3, #0
 808125a:	e082      	b.n	8081362 <bmp280_init+0x142>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)==false) {
 808125c:	22b6      	movs	r2, #182	; 0xb6
 808125e:	21e0      	movs	r1, #224	; 0xe0
 8081260:	6878      	ldr	r0, [r7, #4]
 8081262:	f7ff fec3 	bl	8080fec <write_register8>
 8081266:	4603      	mov	r3, r0
 8081268:	2b00      	cmp	r3, #0
 808126a:	d101      	bne.n	8081270 <bmp280_init+0x50>
		return false;
 808126c:	2300      	movs	r3, #0
 808126e:	e078      	b.n	8081362 <bmp280_init+0x142>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status=0;
 8081270:	2300      	movs	r3, #0
 8081272:	733b      	strb	r3, [r7, #12]
		if ((read_data(dev, BMP280_REG_STATUS, &status, 1)!=false)
 8081274:	f107 020c 	add.w	r2, r7, #12
 8081278:	2301      	movs	r3, #1
 808127a:	21f3      	movs	r1, #243	; 0xf3
 808127c:	6878      	ldr	r0, [r7, #4]
 808127e:	f7ff fe01 	bl	8080e84 <read_data>
 8081282:	4603      	mov	r3, r0
 8081284:	2b00      	cmp	r3, #0
 8081286:	d0f3      	beq.n	8081270 <bmp280_init+0x50>
				&& (status & 1) == 0)
 8081288:	7b3b      	ldrb	r3, [r7, #12]
 808128a:	f003 0301 	and.w	r3, r3, #1
 808128e:	2b00      	cmp	r3, #0
 8081290:	d1ee      	bne.n	8081270 <bmp280_init+0x50>
			break;
	}

	if (!read_calibration_data(dev)) {
 8081292:	6878      	ldr	r0, [r7, #4]
 8081294:	f7ff fede 	bl	8081054 <read_calibration_data>
 8081298:	4603      	mov	r3, r0
 808129a:	f083 0301 	eor.w	r3, r3, #1
 808129e:	b2db      	uxtb	r3, r3
 80812a0:	2b00      	cmp	r3, #0
 80812a2:	d100      	bne.n	80812a6 <bmp280_init+0x86>
 80812a4:	e001      	b.n	80812aa <bmp280_init+0x8a>
		return false;
 80812a6:	2300      	movs	r3, #0
 80812a8:	e05b      	b.n	8081362 <bmp280_init+0x142>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80812aa:	687b      	ldr	r3, [r7, #4]
 80812ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80812b0:	2b60      	cmp	r3, #96	; 0x60
 80812b2:	d10a      	bne.n	80812ca <bmp280_init+0xaa>
 80812b4:	6878      	ldr	r0, [r7, #4]
 80812b6:	f7ff ff4f 	bl	8081158 <read_hum_calibration_data>
 80812ba:	4603      	mov	r3, r0
 80812bc:	f083 0301 	eor.w	r3, r3, #1
 80812c0:	b2db      	uxtb	r3, r3
 80812c2:	2b00      	cmp	r3, #0
 80812c4:	d001      	beq.n	80812ca <bmp280_init+0xaa>
		return false;
 80812c6:	2300      	movs	r3, #0
 80812c8:	e04b      	b.n	8081362 <bmp280_init+0x142>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80812ca:	683b      	ldr	r3, [r7, #0]
 80812cc:	795b      	ldrb	r3, [r3, #5]
 80812ce:	015b      	lsls	r3, r3, #5
 80812d0:	b25a      	sxtb	r2, r3
 80812d2:	683b      	ldr	r3, [r7, #0]
 80812d4:	785b      	ldrb	r3, [r3, #1]
 80812d6:	009b      	lsls	r3, r3, #2
 80812d8:	b25b      	sxtb	r3, r3
 80812da:	4313      	orrs	r3, r2
 80812dc:	b25b      	sxtb	r3, r3
 80812de:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)==false) {
 80812e0:	7bfb      	ldrb	r3, [r7, #15]
 80812e2:	461a      	mov	r2, r3
 80812e4:	21f5      	movs	r1, #245	; 0xf5
 80812e6:	6878      	ldr	r0, [r7, #4]
 80812e8:	f7ff fe80 	bl	8080fec <write_register8>
 80812ec:	4603      	mov	r3, r0
 80812ee:	2b00      	cmp	r3, #0
 80812f0:	d101      	bne.n	80812f6 <bmp280_init+0xd6>
		return false;
 80812f2:	2300      	movs	r3, #0
 80812f4:	e035      	b.n	8081362 <bmp280_init+0x142>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80812f6:	683b      	ldr	r3, [r7, #0]
 80812f8:	781b      	ldrb	r3, [r3, #0]
 80812fa:	2b01      	cmp	r3, #1
 80812fc:	d102      	bne.n	8081304 <bmp280_init+0xe4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80812fe:	683b      	ldr	r3, [r7, #0]
 8081300:	2200      	movs	r2, #0
 8081302:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8081304:	683b      	ldr	r3, [r7, #0]
 8081306:	78db      	ldrb	r3, [r3, #3]
 8081308:	015b      	lsls	r3, r3, #5
													| (params->oversampling_pressure << 2) | (params->mode);
 808130a:	b25a      	sxtb	r2, r3
 808130c:	683b      	ldr	r3, [r7, #0]
 808130e:	789b      	ldrb	r3, [r3, #2]
 8081310:	009b      	lsls	r3, r3, #2
 8081312:	b25b      	sxtb	r3, r3
 8081314:	4313      	orrs	r3, r2
 8081316:	b25a      	sxtb	r2, r3
 8081318:	683b      	ldr	r3, [r7, #0]
 808131a:	781b      	ldrb	r3, [r3, #0]
 808131c:	b25b      	sxtb	r3, r3
 808131e:	4313      	orrs	r3, r2
 8081320:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8081322:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8081324:	687b      	ldr	r3, [r7, #4]
 8081326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808132a:	2b60      	cmp	r3, #96	; 0x60
 808132c:	d10d      	bne.n	808134a <bmp280_init+0x12a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 808132e:	683b      	ldr	r3, [r7, #0]
 8081330:	791b      	ldrb	r3, [r3, #4]
 8081332:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)==false) {
 8081334:	7b7b      	ldrb	r3, [r7, #13]
 8081336:	461a      	mov	r2, r3
 8081338:	21f2      	movs	r1, #242	; 0xf2
 808133a:	6878      	ldr	r0, [r7, #4]
 808133c:	f7ff fe56 	bl	8080fec <write_register8>
 8081340:	4603      	mov	r3, r0
 8081342:	2b00      	cmp	r3, #0
 8081344:	d101      	bne.n	808134a <bmp280_init+0x12a>
			return false;
 8081346:	2300      	movs	r3, #0
 8081348:	e00b      	b.n	8081362 <bmp280_init+0x142>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)==false) {
 808134a:	7bbb      	ldrb	r3, [r7, #14]
 808134c:	461a      	mov	r2, r3
 808134e:	21f4      	movs	r1, #244	; 0xf4
 8081350:	6878      	ldr	r0, [r7, #4]
 8081352:	f7ff fe4b 	bl	8080fec <write_register8>
 8081356:	4603      	mov	r3, r0
 8081358:	2b00      	cmp	r3, #0
 808135a:	d101      	bne.n	8081360 <bmp280_init+0x140>
		return false;
 808135c:	2300      	movs	r3, #0
 808135e:	e000      	b.n	8081362 <bmp280_init+0x142>
	}

	return true;
 8081360:	2301      	movs	r3, #1
}
 8081362:	4618      	mov	r0, r3
 8081364:	3710      	adds	r7, #16
 8081366:	46bd      	mov	sp, r7
 8081368:	bd80      	pop	{r7, pc}

0808136a <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 808136a:	b580      	push	{r7, lr}
 808136c:	b084      	sub	sp, #16
 808136e:	af00      	add	r7, sp, #0
 8081370:	6078      	str	r0, [r7, #4]
	uint8_t status=0;
 8081372:	2300      	movs	r3, #0
 8081374:	73fb      	strb	r3, [r7, #15]
	if (read_data(dev, BMP280_REG_STATUS, &status, 1)==false)
 8081376:	f107 020f 	add.w	r2, r7, #15
 808137a:	2301      	movs	r3, #1
 808137c:	21f3      	movs	r1, #243	; 0xf3
 808137e:	6878      	ldr	r0, [r7, #4]
 8081380:	f7ff fd80 	bl	8080e84 <read_data>
 8081384:	4603      	mov	r3, r0
 8081386:	2b00      	cmp	r3, #0
 8081388:	d101      	bne.n	808138e <bmp280_is_measuring+0x24>
		return false;
 808138a:	2300      	movs	r3, #0
 808138c:	e007      	b.n	808139e <bmp280_is_measuring+0x34>
	if (status & (1 << 3)) {
 808138e:	7bfb      	ldrb	r3, [r7, #15]
 8081390:	f003 0308 	and.w	r3, r3, #8
 8081394:	2b00      	cmp	r3, #0
 8081396:	d001      	beq.n	808139c <bmp280_is_measuring+0x32>
		return true;
 8081398:	2301      	movs	r3, #1
 808139a:	e000      	b.n	808139e <bmp280_is_measuring+0x34>
	}
	return false;
 808139c:	2300      	movs	r3, #0
}
 808139e:	4618      	mov	r0, r3
 80813a0:	3710      	adds	r7, #16
 80813a2:	46bd      	mov	sp, r7
 80813a4:	bd80      	pop	{r7, pc}

080813a6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80813a6:	b480      	push	{r7}
 80813a8:	b087      	sub	sp, #28
 80813aa:	af00      	add	r7, sp, #0
 80813ac:	60f8      	str	r0, [r7, #12]
 80813ae:	60b9      	str	r1, [r7, #8]
 80813b0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80813b2:	68bb      	ldr	r3, [r7, #8]
 80813b4:	10da      	asrs	r2, r3, #3
 80813b6:	68fb      	ldr	r3, [r7, #12]
 80813b8:	881b      	ldrh	r3, [r3, #0]
 80813ba:	005b      	lsls	r3, r3, #1
 80813bc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80813be:	68fa      	ldr	r2, [r7, #12]
 80813c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80813c4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80813c8:	12db      	asrs	r3, r3, #11
 80813ca:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80813cc:	68bb      	ldr	r3, [r7, #8]
 80813ce:	111b      	asrs	r3, r3, #4
 80813d0:	68fa      	ldr	r2, [r7, #12]
 80813d2:	8812      	ldrh	r2, [r2, #0]
 80813d4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80813d6:	68ba      	ldr	r2, [r7, #8]
 80813d8:	1112      	asrs	r2, r2, #4
 80813da:	68f9      	ldr	r1, [r7, #12]
 80813dc:	8809      	ldrh	r1, [r1, #0]
 80813de:	1a52      	subs	r2, r2, r1
 80813e0:	fb02 f303 	mul.w	r3, r2, r3
 80813e4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80813e6:	68fa      	ldr	r2, [r7, #12]
 80813e8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80813ec:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80813f0:	139b      	asrs	r3, r3, #14
 80813f2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80813f4:	697a      	ldr	r2, [r7, #20]
 80813f6:	693b      	ldr	r3, [r7, #16]
 80813f8:	441a      	add	r2, r3
 80813fa:	687b      	ldr	r3, [r7, #4]
 80813fc:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80813fe:	687b      	ldr	r3, [r7, #4]
 8081400:	681a      	ldr	r2, [r3, #0]
 8081402:	4613      	mov	r3, r2
 8081404:	009b      	lsls	r3, r3, #2
 8081406:	4413      	add	r3, r2
 8081408:	3380      	adds	r3, #128	; 0x80
 808140a:	121b      	asrs	r3, r3, #8
}
 808140c:	4618      	mov	r0, r3
 808140e:	371c      	adds	r7, #28
 8081410:	46bd      	mov	sp, r7
 8081412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081416:	4770      	bx	lr

08081418 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8081418:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 808141c:	b08a      	sub	sp, #40	; 0x28
 808141e:	af00      	add	r7, sp, #0
 8081420:	60f8      	str	r0, [r7, #12]
 8081422:	60b9      	str	r1, [r7, #8]
 8081424:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8081426:	687b      	ldr	r3, [r7, #4]
 8081428:	4619      	mov	r1, r3
 808142a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 808142e:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8081432:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 8081436:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 808143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808143c:	6a3a      	ldr	r2, [r7, #32]
 808143e:	fb02 f203 	mul.w	r2, r2, r3
 8081442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081444:	6a39      	ldr	r1, [r7, #32]
 8081446:	fb01 f303 	mul.w	r3, r1, r3
 808144a:	441a      	add	r2, r3
 808144c:	6a39      	ldr	r1, [r7, #32]
 808144e:	6a3b      	ldr	r3, [r7, #32]
 8081450:	fba1 3403 	umull	r3, r4, r1, r3
 8081454:	4422      	add	r2, r4
 8081456:	4614      	mov	r4, r2
 8081458:	68fa      	ldr	r2, [r7, #12]
 808145a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 808145e:	b211      	sxth	r1, r2
 8081460:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8081464:	fb01 f504 	mul.w	r5, r1, r4
 8081468:	fb03 f002 	mul.w	r0, r3, r2
 808146c:	4428      	add	r0, r5
 808146e:	fba3 3401 	umull	r3, r4, r3, r1
 8081472:	1902      	adds	r2, r0, r4
 8081474:	4614      	mov	r4, r2
 8081476:	e9c7 3406 	strd	r3, r4, [r7, #24]
 808147a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 808147e:	68fb      	ldr	r3, [r7, #12]
 8081480:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8081484:	b21b      	sxth	r3, r3
 8081486:	ea4f 74e3 	mov.w	r4, r3, asr #31
 808148a:	6a3a      	ldr	r2, [r7, #32]
 808148c:	fb04 f102 	mul.w	r1, r4, r2
 8081490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8081492:	fb03 f202 	mul.w	r2, r3, r2
 8081496:	1888      	adds	r0, r1, r2
 8081498:	6a3a      	ldr	r2, [r7, #32]
 808149a:	fba2 1203 	umull	r1, r2, r2, r3
 808149e:	1883      	adds	r3, r0, r2
 80814a0:	461a      	mov	r2, r3
 80814a2:	f04f 0500 	mov.w	r5, #0
 80814a6:	f04f 0600 	mov.w	r6, #0
 80814aa:	0456      	lsls	r6, r2, #17
 80814ac:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80814b0:	044d      	lsls	r5, r1, #17
 80814b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80814b6:	186b      	adds	r3, r5, r1
 80814b8:	eb46 0402 	adc.w	r4, r6, r2
 80814bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80814c0:	68fb      	ldr	r3, [r7, #12]
 80814c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80814c6:	b219      	sxth	r1, r3
 80814c8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80814cc:	f04f 0500 	mov.w	r5, #0
 80814d0:	f04f 0600 	mov.w	r6, #0
 80814d4:	00ce      	lsls	r6, r1, #3
 80814d6:	2500      	movs	r5, #0
 80814d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80814dc:	186b      	adds	r3, r5, r1
 80814de:	eb46 0402 	adc.w	r4, r6, r2
 80814e2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80814e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80814e8:	6a3a      	ldr	r2, [r7, #32]
 80814ea:	fb02 f203 	mul.w	r2, r2, r3
 80814ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80814f0:	6a39      	ldr	r1, [r7, #32]
 80814f2:	fb01 f303 	mul.w	r3, r1, r3
 80814f6:	441a      	add	r2, r3
 80814f8:	6a39      	ldr	r1, [r7, #32]
 80814fa:	6a3b      	ldr	r3, [r7, #32]
 80814fc:	fba1 3403 	umull	r3, r4, r1, r3
 8081500:	4422      	add	r2, r4
 8081502:	4614      	mov	r4, r2
 8081504:	68fa      	ldr	r2, [r7, #12]
 8081506:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 808150a:	b211      	sxth	r1, r2
 808150c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8081510:	fb01 f504 	mul.w	r5, r1, r4
 8081514:	fb03 f002 	mul.w	r0, r3, r2
 8081518:	4428      	add	r0, r5
 808151a:	fba3 3401 	umull	r3, r4, r3, r1
 808151e:	1902      	adds	r2, r0, r4
 8081520:	4614      	mov	r4, r2
 8081522:	f04f 0100 	mov.w	r1, #0
 8081526:	f04f 0200 	mov.w	r2, #0
 808152a:	0a19      	lsrs	r1, r3, #8
 808152c:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8081530:	1222      	asrs	r2, r4, #8
													+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8081532:	68fb      	ldr	r3, [r7, #12]
 8081534:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8081538:	b21b      	sxth	r3, r3
 808153a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 808153e:	6a38      	ldr	r0, [r7, #32]
 8081540:	fb04 f500 	mul.w	r5, r4, r0
 8081544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8081546:	fb03 f000 	mul.w	r0, r3, r0
 808154a:	4428      	add	r0, r5
 808154c:	6a3d      	ldr	r5, [r7, #32]
 808154e:	fba5 5603 	umull	r5, r6, r5, r3
 8081552:	1983      	adds	r3, r0, r6
 8081554:	461e      	mov	r6, r3
 8081556:	f04f 0b00 	mov.w	fp, #0
 808155a:	f04f 0c00 	mov.w	ip, #0
 808155e:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8081562:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8081566:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 808156a:	eb1b 0301 	adds.w	r3, fp, r1
 808156e:	eb4c 0402 	adc.w	r4, ip, r2
 8081572:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8081576:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 808157a:	1c19      	adds	r1, r3, #0
 808157c:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8081580:	68fb      	ldr	r3, [r7, #12]
 8081582:	88db      	ldrh	r3, [r3, #6]
 8081584:	b29b      	uxth	r3, r3
 8081586:	f04f 0400 	mov.w	r4, #0
 808158a:	fb03 f502 	mul.w	r5, r3, r2
 808158e:	fb01 f004 	mul.w	r0, r1, r4
 8081592:	4428      	add	r0, r5
 8081594:	fba1 3403 	umull	r3, r4, r1, r3
 8081598:	1902      	adds	r2, r0, r4
 808159a:	4614      	mov	r4, r2
 808159c:	f04f 0100 	mov.w	r1, #0
 80815a0:	f04f 0200 	mov.w	r2, #0
 80815a4:	1061      	asrs	r1, r4, #1
 80815a6:	17e2      	asrs	r2, r4, #31
 80815a8:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80815ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80815b0:	4323      	orrs	r3, r4
 80815b2:	d101      	bne.n	80815b8 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80815b4:	2300      	movs	r3, #0
 80815b6:	e0d4      	b.n	8081762 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80815b8:	68bb      	ldr	r3, [r7, #8]
 80815ba:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80815be:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80815c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80815c6:	693b      	ldr	r3, [r7, #16]
 80815c8:	ea4f 0963 	mov.w	r9, r3, asr #1
 80815cc:	693b      	ldr	r3, [r7, #16]
 80815ce:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80815d2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80815d6:	4645      	mov	r5, r8
 80815d8:	464e      	mov	r6, r9
 80815da:	1aed      	subs	r5, r5, r3
 80815dc:	eb66 0604 	sbc.w	r6, r6, r4
 80815e0:	46a8      	mov	r8, r5
 80815e2:	46b1      	mov	r9, r6
 80815e4:	eb18 0308 	adds.w	r3, r8, r8
 80815e8:	eb49 0409 	adc.w	r4, r9, r9
 80815ec:	4698      	mov	r8, r3
 80815ee:	46a1      	mov	r9, r4
 80815f0:	eb18 0805 	adds.w	r8, r8, r5
 80815f4:	eb49 0906 	adc.w	r9, r9, r6
 80815f8:	f04f 0100 	mov.w	r1, #0
 80815fc:	f04f 0200 	mov.w	r2, #0
 8081600:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8081604:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8081608:	ea4f 1188 	mov.w	r1, r8, lsl #6
 808160c:	eb18 0801 	adds.w	r8, r8, r1
 8081610:	eb49 0902 	adc.w	r9, r9, r2
 8081614:	f04f 0100 	mov.w	r1, #0
 8081618:	f04f 0200 	mov.w	r2, #0
 808161c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8081620:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8081624:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8081628:	4688      	mov	r8, r1
 808162a:	4691      	mov	r9, r2
 808162c:	eb18 0805 	adds.w	r8, r8, r5
 8081630:	eb49 0906 	adc.w	r9, r9, r6
 8081634:	f04f 0100 	mov.w	r1, #0
 8081638:	f04f 0200 	mov.w	r2, #0
 808163c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8081640:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8081644:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8081648:	4688      	mov	r8, r1
 808164a:	4691      	mov	r9, r2
 808164c:	eb18 0005 	adds.w	r0, r8, r5
 8081650:	eb49 0106 	adc.w	r1, r9, r6
 8081654:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8081658:	f7ff f9e6 	bl	8080a28 <__aeabi_ldivmod>
 808165c:	4603      	mov	r3, r0
 808165e:	460c      	mov	r4, r1
 8081660:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8081664:	68fb      	ldr	r3, [r7, #12]
 8081666:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 808166a:	b219      	sxth	r1, r3
 808166c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8081670:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8081674:	f04f 0300 	mov.w	r3, #0
 8081678:	f04f 0400 	mov.w	r4, #0
 808167c:	0b6b      	lsrs	r3, r5, #13
 808167e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8081682:	1374      	asrs	r4, r6, #13
 8081684:	fb03 f502 	mul.w	r5, r3, r2
 8081688:	fb01 f004 	mul.w	r0, r1, r4
 808168c:	4428      	add	r0, r5
 808168e:	fba1 1203 	umull	r1, r2, r1, r3
 8081692:	1883      	adds	r3, r0, r2
 8081694:	461a      	mov	r2, r3
 8081696:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 808169a:	f04f 0300 	mov.w	r3, #0
 808169e:	f04f 0400 	mov.w	r4, #0
 80816a2:	0b6b      	lsrs	r3, r5, #13
 80816a4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80816a8:	1374      	asrs	r4, r6, #13
 80816aa:	fb03 f502 	mul.w	r5, r3, r2
 80816ae:	fb01 f004 	mul.w	r0, r1, r4
 80816b2:	4428      	add	r0, r5
 80816b4:	fba1 1203 	umull	r1, r2, r1, r3
 80816b8:	1883      	adds	r3, r0, r2
 80816ba:	461a      	mov	r2, r3
 80816bc:	f04f 0300 	mov.w	r3, #0
 80816c0:	f04f 0400 	mov.w	r4, #0
 80816c4:	0e4b      	lsrs	r3, r1, #25
 80816c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80816ca:	1654      	asrs	r4, r2, #25
 80816cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80816d0:	68fb      	ldr	r3, [r7, #12]
 80816d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80816d6:	b21b      	sxth	r3, r3
 80816d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80816dc:	693a      	ldr	r2, [r7, #16]
 80816de:	fb04 f102 	mul.w	r1, r4, r2
 80816e2:	697a      	ldr	r2, [r7, #20]
 80816e4:	fb03 f202 	mul.w	r2, r3, r2
 80816e8:	1888      	adds	r0, r1, r2
 80816ea:	693a      	ldr	r2, [r7, #16]
 80816ec:	fba2 1203 	umull	r1, r2, r2, r3
 80816f0:	1883      	adds	r3, r0, r2
 80816f2:	461a      	mov	r2, r3
 80816f4:	f04f 0300 	mov.w	r3, #0
 80816f8:	f04f 0400 	mov.w	r4, #0
 80816fc:	0ccb      	lsrs	r3, r1, #19
 80816fe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8081702:	14d4      	asrs	r4, r2, #19
 8081704:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8081708:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 808170c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8081710:	eb11 0803 	adds.w	r8, r1, r3
 8081714:	eb42 0904 	adc.w	r9, r2, r4
 8081718:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 808171c:	eb13 0508 	adds.w	r5, r3, r8
 8081720:	eb44 0609 	adc.w	r6, r4, r9
 8081724:	f04f 0100 	mov.w	r1, #0
 8081728:	f04f 0200 	mov.w	r2, #0
 808172c:	0a29      	lsrs	r1, r5, #8
 808172e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8081732:	1232      	asrs	r2, r6, #8
 8081734:	68fb      	ldr	r3, [r7, #12]
 8081736:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 808173a:	b21d      	sxth	r5, r3
 808173c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8081740:	f04f 0800 	mov.w	r8, #0
 8081744:	f04f 0900 	mov.w	r9, #0
 8081748:	ea4f 1906 	mov.w	r9, r6, lsl #4
 808174c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8081750:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8081754:	eb18 0301 	adds.w	r3, r8, r1
 8081758:	eb49 0402 	adc.w	r4, r9, r2
 808175c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8081760:	693b      	ldr	r3, [r7, #16]
}
 8081762:	4618      	mov	r0, r3
 8081764:	3728      	adds	r7, #40	; 0x28
 8081766:	46bd      	mov	sp, r7
 8081768:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0808176c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 808176c:	b480      	push	{r7}
 808176e:	b087      	sub	sp, #28
 8081770:	af00      	add	r7, sp, #0
 8081772:	60f8      	str	r0, [r7, #12]
 8081774:	60b9      	str	r1, [r7, #8]
 8081776:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8081778:	687b      	ldr	r3, [r7, #4]
 808177a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 808177e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8081780:	68bb      	ldr	r3, [r7, #8]
 8081782:	039a      	lsls	r2, r3, #14
 8081784:	68fb      	ldr	r3, [r7, #12]
 8081786:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 808178a:	051b      	lsls	r3, r3, #20
 808178c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 808178e:	68fb      	ldr	r3, [r7, #12]
 8081790:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8081794:	4619      	mov	r1, r3
 8081796:	697b      	ldr	r3, [r7, #20]
 8081798:	fb03 f301 	mul.w	r3, r3, r1
 808179c:	1ad3      	subs	r3, r2, r3
 808179e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80817a2:	13db      	asrs	r3, r3, #15
													* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80817a4:	68fa      	ldr	r2, [r7, #12]
 80817a6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80817aa:	4611      	mov	r1, r2
 80817ac:	697a      	ldr	r2, [r7, #20]
 80817ae:	fb02 f201 	mul.w	r2, r2, r1
 80817b2:	1292      	asrs	r2, r2, #10
															* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80817b4:	68f9      	ldr	r1, [r7, #12]
 80817b6:	7f09      	ldrb	r1, [r1, #28]
 80817b8:	4608      	mov	r0, r1
 80817ba:	6979      	ldr	r1, [r7, #20]
 80817bc:	fb01 f100 	mul.w	r1, r1, r0
 80817c0:	12c9      	asrs	r1, r1, #11
																	+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80817c2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
															* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80817c6:	fb01 f202 	mul.w	r2, r1, r2
																	+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80817ca:	1292      	asrs	r2, r2, #10
 80817cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
															* (int32_t) dev->dig_H2 + 8192) >> 14);
 80817d0:	68f9      	ldr	r1, [r7, #12]
 80817d2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80817d6:	fb01 f202 	mul.w	r2, r1, r2
 80817da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80817de:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80817e0:	fb02 f303 	mul.w	r3, r2, r3
 80817e4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80817e6:	697b      	ldr	r3, [r7, #20]
 80817e8:	13db      	asrs	r3, r3, #15
 80817ea:	697a      	ldr	r2, [r7, #20]
 80817ec:	13d2      	asrs	r2, r2, #15
 80817ee:	fb02 f303 	mul.w	r3, r2, r3
 80817f2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80817f4:	68fa      	ldr	r2, [r7, #12]
 80817f6:	7e12      	ldrb	r2, [r2, #24]
 80817f8:	fb02 f303 	mul.w	r3, r2, r3
 80817fc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80817fe:	697a      	ldr	r2, [r7, #20]
 8081800:	1ad3      	subs	r3, r2, r3
 8081802:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8081804:	697b      	ldr	r3, [r7, #20]
 8081806:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808180a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 808180c:	697b      	ldr	r3, [r7, #20]
 808180e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8081812:	bfa8      	it	ge
 8081814:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8081818:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 808181a:	697b      	ldr	r3, [r7, #20]
 808181c:	131b      	asrs	r3, r3, #12
}
 808181e:	4618      	mov	r0, r3
 8081820:	371c      	adds	r7, #28
 8081822:	46bd      	mov	sp, r7
 8081824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081828:	4770      	bx	lr

0808182a <bmp280_read_raw>:

bool bmp280_read_raw(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,	uint32_t *humidity) {
 808182a:	b580      	push	{r7, lr}
 808182c:	b08a      	sub	sp, #40	; 0x28
 808182e:	af00      	add	r7, sp, #0
 8081830:	60f8      	str	r0, [r7, #12]
 8081832:	60b9      	str	r1, [r7, #8]
 8081834:	607a      	str	r2, [r7, #4]
 8081836:	603b      	str	r3, [r7, #0]
	uint32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8081838:	68fb      	ldr	r3, [r7, #12]
 808183a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808183e:	2b60      	cmp	r3, #96	; 0x60
 8081840:	d005      	beq.n	808184e <bmp280_read_raw+0x24>
		if (humidity)
 8081842:	683b      	ldr	r3, [r7, #0]
 8081844:	2b00      	cmp	r3, #0
 8081846:	d002      	beq.n	808184e <bmp280_read_raw+0x24>
			*humidity = 0;
 8081848:	683b      	ldr	r3, [r7, #0]
 808184a:	2200      	movs	r2, #0
 808184c:	601a      	str	r2, [r3, #0]
		//humidity = NULL;
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 808184e:	683b      	ldr	r3, [r7, #0]
 8081850:	2b00      	cmp	r3, #0
 8081852:	d001      	beq.n	8081858 <bmp280_read_raw+0x2e>
 8081854:	2308      	movs	r3, #8
 8081856:	e000      	b.n	808185a <bmp280_read_raw+0x30>
 8081858:	2306      	movs	r3, #6
 808185a:	627b      	str	r3, [r7, #36]	; 0x24
	if (dev->id != BME280_CHIP_ID) size =6;
 808185c:	68fb      	ldr	r3, [r7, #12]
 808185e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8081862:	2b60      	cmp	r3, #96	; 0x60
 8081864:	d002      	beq.n	808186c <bmp280_read_raw+0x42>
 8081866:	2306      	movs	r3, #6
 8081868:	627b      	str	r3, [r7, #36]	; 0x24
 808186a:	e001      	b.n	8081870 <bmp280_read_raw+0x46>
	else size=8;
 808186c:	2308      	movs	r3, #8
 808186e:	627b      	str	r3, [r7, #36]	; 0x24

	if (read_data(dev, 0xf7, data, size)==false) {
 8081870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081872:	b2db      	uxtb	r3, r3
 8081874:	f107 0210 	add.w	r2, r7, #16
 8081878:	21f7      	movs	r1, #247	; 0xf7
 808187a:	68f8      	ldr	r0, [r7, #12]
 808187c:	f7ff fb02 	bl	8080e84 <read_data>
 8081880:	4603      	mov	r3, r0
 8081882:	2b00      	cmp	r3, #0
 8081884:	d101      	bne.n	808188a <bmp280_read_raw+0x60>
		return false;
 8081886:	2300      	movs	r3, #0
 8081888:	e027      	b.n	80818da <bmp280_read_raw+0xb0>
	}

	adc_pressure = (((uint32_t)data[0]) << 12) | (((uint32_t)data[1]) << 4) | (((uint32_t)data[2]) >> 4);
 808188a:	7c3b      	ldrb	r3, [r7, #16]
 808188c:	031a      	lsls	r2, r3, #12
 808188e:	7c7b      	ldrb	r3, [r7, #17]
 8081890:	011b      	lsls	r3, r3, #4
 8081892:	4313      	orrs	r3, r2
 8081894:	7cba      	ldrb	r2, [r7, #18]
 8081896:	0912      	lsrs	r2, r2, #4
 8081898:	b2d2      	uxtb	r2, r2
 808189a:	4313      	orrs	r3, r2
 808189c:	623b      	str	r3, [r7, #32]
	adc_temp = (((int32_t)data[3]) << 12) | (((int32_t)data[4]) << 4) | (((int32_t)data[5]) >> 4);
 808189e:	7cfb      	ldrb	r3, [r7, #19]
 80818a0:	031a      	lsls	r2, r3, #12
 80818a2:	7d3b      	ldrb	r3, [r7, #20]
 80818a4:	011b      	lsls	r3, r3, #4
 80818a6:	4313      	orrs	r3, r2
 80818a8:	7d7a      	ldrb	r2, [r7, #21]
 80818aa:	0912      	lsrs	r2, r2, #4
 80818ac:	b2d2      	uxtb	r2, r2
 80818ae:	4313      	orrs	r3, r2
 80818b0:	61fb      	str	r3, [r7, #28]

	*temperature = (int32_t)adc_temp;
 80818b2:	68bb      	ldr	r3, [r7, #8]
 80818b4:	69fa      	ldr	r2, [r7, #28]
 80818b6:	601a      	str	r2, [r3, #0]
	*pressure = (uint32_t)adc_pressure;
 80818b8:	687b      	ldr	r3, [r7, #4]
 80818ba:	6a3a      	ldr	r2, [r7, #32]
 80818bc:	601a      	str	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 80818be:	68fb      	ldr	r3, [r7, #12]
 80818c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80818c4:	2b60      	cmp	r3, #96	; 0x60
 80818c6:	d107      	bne.n	80818d8 <bmp280_read_raw+0xae>
		uint32_t adc_humidity = (((uint32_t)data[6]) << 8) | ((uint32_t)data[7]);
 80818c8:	7dbb      	ldrb	r3, [r7, #22]
 80818ca:	021b      	lsls	r3, r3, #8
 80818cc:	7dfa      	ldrb	r2, [r7, #23]
 80818ce:	4313      	orrs	r3, r2
 80818d0:	61bb      	str	r3, [r7, #24]
		*humidity = (uint32_t)adc_humidity;
 80818d2:	683b      	ldr	r3, [r7, #0]
 80818d4:	69ba      	ldr	r2, [r7, #24]
 80818d6:	601a      	str	r2, [r3, #0]
	}

	return true;
 80818d8:	2301      	movs	r3, #1
}
 80818da:	4618      	mov	r0, r3
 80818dc:	3728      	adds	r7, #40	; 0x28
 80818de:	46bd      	mov	sp, r7
 80818e0:	bd80      	pop	{r7, pc}

080818e2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,	uint32_t *humidity) {
 80818e2:	b580      	push	{r7, lr}
 80818e4:	b088      	sub	sp, #32
 80818e6:	af00      	add	r7, sp, #0
 80818e8:	60f8      	str	r0, [r7, #12]
 80818ea:	60b9      	str	r1, [r7, #8]
 80818ec:	607a      	str	r2, [r7, #4]
 80818ee:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	int32_t adc_humidity;
	int32_t fine_temp;

	if (bmp280_read_raw(dev,(int32_t*)&adc_temp, (uint32_t*)&adc_pressure, (uint32_t*)&adc_humidity)==false)
 80818f0:	f107 0314 	add.w	r3, r7, #20
 80818f4:	f107 021c 	add.w	r2, r7, #28
 80818f8:	f107 0118 	add.w	r1, r7, #24
 80818fc:	68f8      	ldr	r0, [r7, #12]
 80818fe:	f7ff ff94 	bl	808182a <bmp280_read_raw>
 8081902:	4603      	mov	r3, r0
 8081904:	f083 0301 	eor.w	r3, r3, #1
 8081908:	b2db      	uxtb	r3, r3
 808190a:	2b00      	cmp	r3, #0
 808190c:	d001      	beq.n	8081912 <bmp280_read_fixed+0x30>
		return false;
 808190e:	2300      	movs	r3, #0
 8081910:	e025      	b.n	808195e <bmp280_read_fixed+0x7c>

	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8081912:	69bb      	ldr	r3, [r7, #24]
 8081914:	f107 0210 	add.w	r2, r7, #16
 8081918:	4619      	mov	r1, r3
 808191a:	68f8      	ldr	r0, [r7, #12]
 808191c:	f7ff fd43 	bl	80813a6 <compensate_temperature>
 8081920:	4602      	mov	r2, r0
 8081922:	68bb      	ldr	r3, [r7, #8]
 8081924:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8081926:	69fb      	ldr	r3, [r7, #28]
 8081928:	693a      	ldr	r2, [r7, #16]
 808192a:	4619      	mov	r1, r3
 808192c:	68f8      	ldr	r0, [r7, #12]
 808192e:	f7ff fd73 	bl	8081418 <compensate_pressure>
 8081932:	4602      	mov	r2, r0
 8081934:	687b      	ldr	r3, [r7, #4]
 8081936:	601a      	str	r2, [r3, #0]

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8081938:	68fb      	ldr	r3, [r7, #12]
 808193a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808193e:	2b60      	cmp	r3, #96	; 0x60
 8081940:	d003      	beq.n	808194a <bmp280_read_fixed+0x68>
		*humidity = 0;
 8081942:	683b      	ldr	r3, [r7, #0]
 8081944:	2200      	movs	r2, #0
 8081946:	601a      	str	r2, [r3, #0]
 8081948:	e008      	b.n	808195c <bmp280_read_fixed+0x7a>
	}
	else
	{
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 808194a:	697b      	ldr	r3, [r7, #20]
 808194c:	693a      	ldr	r2, [r7, #16]
 808194e:	4619      	mov	r1, r3
 8081950:	68f8      	ldr	r0, [r7, #12]
 8081952:	f7ff ff0b 	bl	808176c <compensate_humidity>
 8081956:	4602      	mov	r2, r0
 8081958:	683b      	ldr	r3, [r7, #0]
 808195a:	601a      	str	r2, [r3, #0]
	}

	return true;
 808195c:	2301      	movs	r3, #1
}
 808195e:	4618      	mov	r0, r3
 8081960:	3720      	adds	r7, #32
 8081962:	46bd      	mov	sp, r7
 8081964:	bd80      	pop	{r7, pc}
	...

08081968 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8081968:	b580      	push	{r7, lr}
 808196a:	b088      	sub	sp, #32
 808196c:	af00      	add	r7, sp, #0
 808196e:	60f8      	str	r0, [r7, #12]
 8081970:	60b9      	str	r1, [r7, #8]
 8081972:	607a      	str	r2, [r7, #4]
 8081974:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8081976:	683b      	ldr	r3, [r7, #0]
 8081978:	2b00      	cmp	r3, #0
 808197a:	d002      	beq.n	8081982 <bmp280_read_float+0x1a>
 808197c:	f107 0314 	add.w	r3, r7, #20
 8081980:	e000      	b.n	8081984 <bmp280_read_float+0x1c>
 8081982:	2300      	movs	r3, #0
 8081984:	f107 0218 	add.w	r2, r7, #24
 8081988:	f107 011c 	add.w	r1, r7, #28
 808198c:	68f8      	ldr	r0, [r7, #12]
 808198e:	f7ff ffa8 	bl	80818e2 <bmp280_read_fixed>
 8081992:	4603      	mov	r3, r0
 8081994:	2b00      	cmp	r3, #0
 8081996:	d028      	beq.n	80819ea <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8081998:	69fb      	ldr	r3, [r7, #28]
 808199a:	ee07 3a90 	vmov	s15, r3
 808199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80819a2:	eddf 6a14 	vldr	s13, [pc, #80]	; 80819f4 <bmp280_read_float+0x8c>
 80819a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80819aa:	68bb      	ldr	r3, [r7, #8]
 80819ac:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80819b0:	69bb      	ldr	r3, [r7, #24]
 80819b2:	ee07 3a90 	vmov	s15, r3
 80819b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80819ba:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80819f8 <bmp280_read_float+0x90>
 80819be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80819c2:	687b      	ldr	r3, [r7, #4]
 80819c4:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80819c8:	683b      	ldr	r3, [r7, #0]
 80819ca:	2b00      	cmp	r3, #0
 80819cc:	d00b      	beq.n	80819e6 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80819ce:	697b      	ldr	r3, [r7, #20]
 80819d0:	ee07 3a90 	vmov	s15, r3
 80819d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80819d8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80819fc <bmp280_read_float+0x94>
 80819dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80819e0:	683b      	ldr	r3, [r7, #0]
 80819e2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80819e6:	2301      	movs	r3, #1
 80819e8:	e000      	b.n	80819ec <bmp280_read_float+0x84>
	}

	return false;
 80819ea:	2300      	movs	r3, #0
}
 80819ec:	4618      	mov	r0, r3
 80819ee:	3720      	adds	r7, #32
 80819f0:	46bd      	mov	sp, r7
 80819f2:	bd80      	pop	{r7, pc}
 80819f4:	42c80000 	.word	0x42c80000
 80819f8:	43800000 	.word	0x43800000
 80819fc:	44800000 	.word	0x44800000

08081a00 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8081a00:	b580      	push	{r7, lr}
 8081a02:	b082      	sub	sp, #8
 8081a04:	af00      	add	r7, sp, #0
 8081a06:	4603      	mov	r3, r0
 8081a08:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8081a0a:	20c8      	movs	r0, #200	; 0xc8
 8081a0c:	f002 fd24 	bl	8084458 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8081a10:	f000 fa7a 	bl	8081f08 <ft5336_I2C_InitializeIfRequired>
}
 8081a14:	bf00      	nop
 8081a16:	3708      	adds	r7, #8
 8081a18:	46bd      	mov	sp, r7
 8081a1a:	bd80      	pop	{r7, pc}

08081a1c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8081a1c:	b480      	push	{r7}
 8081a1e:	b083      	sub	sp, #12
 8081a20:	af00      	add	r7, sp, #0
 8081a22:	4603      	mov	r3, r0
 8081a24:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8081a26:	bf00      	nop
 8081a28:	370c      	adds	r7, #12
 8081a2a:	46bd      	mov	sp, r7
 8081a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081a30:	4770      	bx	lr

08081a32 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8081a32:	b580      	push	{r7, lr}
 8081a34:	b084      	sub	sp, #16
 8081a36:	af00      	add	r7, sp, #0
 8081a38:	4603      	mov	r3, r0
 8081a3a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8081a3c:	2300      	movs	r3, #0
 8081a3e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8081a40:	2300      	movs	r3, #0
 8081a42:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8081a44:	2300      	movs	r3, #0
 8081a46:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8081a48:	f000 fa5e 	bl	8081f08 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8081a4c:	2300      	movs	r3, #0
 8081a4e:	73fb      	strb	r3, [r7, #15]
 8081a50:	e010      	b.n	8081a74 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8081a52:	88fb      	ldrh	r3, [r7, #6]
 8081a54:	b2db      	uxtb	r3, r3
 8081a56:	21a8      	movs	r1, #168	; 0xa8
 8081a58:	4618      	mov	r0, r3
 8081a5a:	f002 fcdf 	bl	808441c <TS_IO_Read>
 8081a5e:	4603      	mov	r3, r0
 8081a60:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8081a62:	7b7b      	ldrb	r3, [r7, #13]
 8081a64:	b2db      	uxtb	r3, r3
 8081a66:	2b51      	cmp	r3, #81	; 0x51
 8081a68:	d101      	bne.n	8081a6e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8081a6a:	2301      	movs	r3, #1
 8081a6c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8081a6e:	7bfb      	ldrb	r3, [r7, #15]
 8081a70:	3301      	adds	r3, #1
 8081a72:	73fb      	strb	r3, [r7, #15]
 8081a74:	7bfb      	ldrb	r3, [r7, #15]
 8081a76:	2b02      	cmp	r3, #2
 8081a78:	d802      	bhi.n	8081a80 <ft5336_ReadID+0x4e>
 8081a7a:	7bbb      	ldrb	r3, [r7, #14]
 8081a7c:	2b00      	cmp	r3, #0
 8081a7e:	d0e8      	beq.n	8081a52 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8081a80:	7b7b      	ldrb	r3, [r7, #13]
 8081a82:	b2db      	uxtb	r3, r3
 8081a84:	b29b      	uxth	r3, r3
}
 8081a86:	4618      	mov	r0, r3
 8081a88:	3710      	adds	r7, #16
 8081a8a:	46bd      	mov	sp, r7
 8081a8c:	bd80      	pop	{r7, pc}

08081a8e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8081a8e:	b580      	push	{r7, lr}
 8081a90:	b082      	sub	sp, #8
 8081a92:	af00      	add	r7, sp, #0
 8081a94:	4603      	mov	r3, r0
 8081a96:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8081a98:	88fb      	ldrh	r3, [r7, #6]
 8081a9a:	4618      	mov	r0, r3
 8081a9c:	f000 fa44 	bl	8081f28 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8081aa0:	88fb      	ldrh	r3, [r7, #6]
 8081aa2:	4618      	mov	r0, r3
 8081aa4:	f000 f932 	bl	8081d0c <ft5336_TS_DisableIT>
}
 8081aa8:	bf00      	nop
 8081aaa:	3708      	adds	r7, #8
 8081aac:	46bd      	mov	sp, r7
 8081aae:	bd80      	pop	{r7, pc}

08081ab0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8081ab0:	b580      	push	{r7, lr}
 8081ab2:	b084      	sub	sp, #16
 8081ab4:	af00      	add	r7, sp, #0
 8081ab6:	4603      	mov	r3, r0
 8081ab8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8081aba:	2300      	movs	r3, #0
 8081abc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8081abe:	88fb      	ldrh	r3, [r7, #6]
 8081ac0:	b2db      	uxtb	r3, r3
 8081ac2:	2102      	movs	r1, #2
 8081ac4:	4618      	mov	r0, r3
 8081ac6:	f002 fca9 	bl	808441c <TS_IO_Read>
 8081aca:	4603      	mov	r3, r0
 8081acc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8081ace:	7bfb      	ldrb	r3, [r7, #15]
 8081ad0:	b2db      	uxtb	r3, r3
 8081ad2:	f003 030f 	and.w	r3, r3, #15
 8081ad6:	b2db      	uxtb	r3, r3
 8081ad8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8081ada:	7bfb      	ldrb	r3, [r7, #15]
 8081adc:	b2db      	uxtb	r3, r3
 8081ade:	2b05      	cmp	r3, #5
 8081ae0:	d901      	bls.n	8081ae6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8081ae2:	2300      	movs	r3, #0
 8081ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8081ae6:	7bfb      	ldrb	r3, [r7, #15]
 8081ae8:	b2da      	uxtb	r2, r3
 8081aea:	4b05      	ldr	r3, [pc, #20]	; (8081b00 <ft5336_TS_DetectTouch+0x50>)
 8081aec:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8081aee:	4b04      	ldr	r3, [pc, #16]	; (8081b00 <ft5336_TS_DetectTouch+0x50>)
 8081af0:	2200      	movs	r2, #0
 8081af2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8081af4:	7bfb      	ldrb	r3, [r7, #15]
 8081af6:	b2db      	uxtb	r3, r3
}
 8081af8:	4618      	mov	r0, r3
 8081afa:	3710      	adds	r7, #16
 8081afc:	46bd      	mov	sp, r7
 8081afe:	bd80      	pop	{r7, pc}
 8081b00:	2000b57c 	.word	0x2000b57c

08081b04 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8081b04:	b580      	push	{r7, lr}
 8081b06:	b086      	sub	sp, #24
 8081b08:	af00      	add	r7, sp, #0
 8081b0a:	4603      	mov	r3, r0
 8081b0c:	60b9      	str	r1, [r7, #8]
 8081b0e:	607a      	str	r2, [r7, #4]
 8081b10:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8081b12:	2300      	movs	r3, #0
 8081b14:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8081b16:	2300      	movs	r3, #0
 8081b18:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8081b1a:	2300      	movs	r3, #0
 8081b1c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8081b1e:	2300      	movs	r3, #0
 8081b20:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8081b22:	2300      	movs	r3, #0
 8081b24:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8081b26:	4b6d      	ldr	r3, [pc, #436]	; (8081cdc <ft5336_TS_GetXY+0x1d8>)
 8081b28:	789a      	ldrb	r2, [r3, #2]
 8081b2a:	4b6c      	ldr	r3, [pc, #432]	; (8081cdc <ft5336_TS_GetXY+0x1d8>)
 8081b2c:	785b      	ldrb	r3, [r3, #1]
 8081b2e:	429a      	cmp	r2, r3
 8081b30:	f080 80cf 	bcs.w	8081cd2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8081b34:	4b69      	ldr	r3, [pc, #420]	; (8081cdc <ft5336_TS_GetXY+0x1d8>)
 8081b36:	789b      	ldrb	r3, [r3, #2]
 8081b38:	2b09      	cmp	r3, #9
 8081b3a:	d871      	bhi.n	8081c20 <ft5336_TS_GetXY+0x11c>
 8081b3c:	a201      	add	r2, pc, #4	; (adr r2, 8081b44 <ft5336_TS_GetXY+0x40>)
 8081b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081b42:	bf00      	nop
 8081b44:	08081b6d 	.word	0x08081b6d
 8081b48:	08081b7f 	.word	0x08081b7f
 8081b4c:	08081b91 	.word	0x08081b91
 8081b50:	08081ba3 	.word	0x08081ba3
 8081b54:	08081bb5 	.word	0x08081bb5
 8081b58:	08081bc7 	.word	0x08081bc7
 8081b5c:	08081bd9 	.word	0x08081bd9
 8081b60:	08081beb 	.word	0x08081beb
 8081b64:	08081bfd 	.word	0x08081bfd
 8081b68:	08081c0f 	.word	0x08081c0f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8081b6c:	2304      	movs	r3, #4
 8081b6e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8081b70:	2303      	movs	r3, #3
 8081b72:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8081b74:	2306      	movs	r3, #6
 8081b76:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8081b78:	2305      	movs	r3, #5
 8081b7a:	753b      	strb	r3, [r7, #20]
      break;
 8081b7c:	e051      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8081b7e:	230a      	movs	r3, #10
 8081b80:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8081b82:	2309      	movs	r3, #9
 8081b84:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8081b86:	230c      	movs	r3, #12
 8081b88:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8081b8a:	230b      	movs	r3, #11
 8081b8c:	753b      	strb	r3, [r7, #20]
      break;
 8081b8e:	e048      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8081b90:	2310      	movs	r3, #16
 8081b92:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8081b94:	230f      	movs	r3, #15
 8081b96:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8081b98:	2312      	movs	r3, #18
 8081b9a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8081b9c:	2311      	movs	r3, #17
 8081b9e:	753b      	strb	r3, [r7, #20]
      break;
 8081ba0:	e03f      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8081ba2:	2316      	movs	r3, #22
 8081ba4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8081ba6:	2315      	movs	r3, #21
 8081ba8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8081baa:	2318      	movs	r3, #24
 8081bac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8081bae:	2317      	movs	r3, #23
 8081bb0:	753b      	strb	r3, [r7, #20]
      break;
 8081bb2:	e036      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8081bb4:	231c      	movs	r3, #28
 8081bb6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8081bb8:	231b      	movs	r3, #27
 8081bba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8081bbc:	231e      	movs	r3, #30
 8081bbe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8081bc0:	231d      	movs	r3, #29
 8081bc2:	753b      	strb	r3, [r7, #20]
      break;
 8081bc4:	e02d      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8081bc6:	2322      	movs	r3, #34	; 0x22
 8081bc8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8081bca:	2321      	movs	r3, #33	; 0x21
 8081bcc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8081bce:	2324      	movs	r3, #36	; 0x24
 8081bd0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8081bd2:	2323      	movs	r3, #35	; 0x23
 8081bd4:	753b      	strb	r3, [r7, #20]
      break;
 8081bd6:	e024      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8081bd8:	2328      	movs	r3, #40	; 0x28
 8081bda:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8081bdc:	2327      	movs	r3, #39	; 0x27
 8081bde:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8081be0:	232a      	movs	r3, #42	; 0x2a
 8081be2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8081be4:	2329      	movs	r3, #41	; 0x29
 8081be6:	753b      	strb	r3, [r7, #20]
      break;
 8081be8:	e01b      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8081bea:	232e      	movs	r3, #46	; 0x2e
 8081bec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8081bee:	232d      	movs	r3, #45	; 0x2d
 8081bf0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8081bf2:	2330      	movs	r3, #48	; 0x30
 8081bf4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8081bf6:	232f      	movs	r3, #47	; 0x2f
 8081bf8:	753b      	strb	r3, [r7, #20]
      break;
 8081bfa:	e012      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8081bfc:	2334      	movs	r3, #52	; 0x34
 8081bfe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8081c00:	2333      	movs	r3, #51	; 0x33
 8081c02:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8081c04:	2336      	movs	r3, #54	; 0x36
 8081c06:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8081c08:	2335      	movs	r3, #53	; 0x35
 8081c0a:	753b      	strb	r3, [r7, #20]
      break;
 8081c0c:	e009      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8081c0e:	233a      	movs	r3, #58	; 0x3a
 8081c10:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8081c12:	2339      	movs	r3, #57	; 0x39
 8081c14:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8081c16:	233c      	movs	r3, #60	; 0x3c
 8081c18:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8081c1a:	233b      	movs	r3, #59	; 0x3b
 8081c1c:	753b      	strb	r3, [r7, #20]
      break;
 8081c1e:	e000      	b.n	8081c22 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8081c20:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8081c22:	89fb      	ldrh	r3, [r7, #14]
 8081c24:	b2db      	uxtb	r3, r3
 8081c26:	7dfa      	ldrb	r2, [r7, #23]
 8081c28:	4611      	mov	r1, r2
 8081c2a:	4618      	mov	r0, r3
 8081c2c:	f002 fbf6 	bl	808441c <TS_IO_Read>
 8081c30:	4603      	mov	r3, r0
 8081c32:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8081c34:	7cfb      	ldrb	r3, [r7, #19]
 8081c36:	b2db      	uxtb	r3, r3
 8081c38:	b29a      	uxth	r2, r3
 8081c3a:	4b29      	ldr	r3, [pc, #164]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081c3c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8081c3e:	89fb      	ldrh	r3, [r7, #14]
 8081c40:	b2db      	uxtb	r3, r3
 8081c42:	7dba      	ldrb	r2, [r7, #22]
 8081c44:	4611      	mov	r1, r2
 8081c46:	4618      	mov	r0, r3
 8081c48:	f002 fbe8 	bl	808441c <TS_IO_Read>
 8081c4c:	4603      	mov	r3, r0
 8081c4e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8081c50:	7cfb      	ldrb	r3, [r7, #19]
 8081c52:	b2db      	uxtb	r3, r3
 8081c54:	021b      	lsls	r3, r3, #8
 8081c56:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8081c5a:	b21a      	sxth	r2, r3
 8081c5c:	4b20      	ldr	r3, [pc, #128]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081c5e:	881b      	ldrh	r3, [r3, #0]
 8081c60:	b21b      	sxth	r3, r3
 8081c62:	4313      	orrs	r3, r2
 8081c64:	b21b      	sxth	r3, r3
 8081c66:	b29a      	uxth	r2, r3
 8081c68:	4b1d      	ldr	r3, [pc, #116]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081c6a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8081c6c:	4b1c      	ldr	r3, [pc, #112]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081c6e:	881a      	ldrh	r2, [r3, #0]
 8081c70:	68bb      	ldr	r3, [r7, #8]
 8081c72:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8081c74:	89fb      	ldrh	r3, [r7, #14]
 8081c76:	b2db      	uxtb	r3, r3
 8081c78:	7d7a      	ldrb	r2, [r7, #21]
 8081c7a:	4611      	mov	r1, r2
 8081c7c:	4618      	mov	r0, r3
 8081c7e:	f002 fbcd 	bl	808441c <TS_IO_Read>
 8081c82:	4603      	mov	r3, r0
 8081c84:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8081c86:	7cfb      	ldrb	r3, [r7, #19]
 8081c88:	b2db      	uxtb	r3, r3
 8081c8a:	b29a      	uxth	r2, r3
 8081c8c:	4b14      	ldr	r3, [pc, #80]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081c8e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8081c90:	89fb      	ldrh	r3, [r7, #14]
 8081c92:	b2db      	uxtb	r3, r3
 8081c94:	7d3a      	ldrb	r2, [r7, #20]
 8081c96:	4611      	mov	r1, r2
 8081c98:	4618      	mov	r0, r3
 8081c9a:	f002 fbbf 	bl	808441c <TS_IO_Read>
 8081c9e:	4603      	mov	r3, r0
 8081ca0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8081ca2:	7cfb      	ldrb	r3, [r7, #19]
 8081ca4:	b2db      	uxtb	r3, r3
 8081ca6:	021b      	lsls	r3, r3, #8
 8081ca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8081cac:	b21a      	sxth	r2, r3
 8081cae:	4b0c      	ldr	r3, [pc, #48]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081cb0:	881b      	ldrh	r3, [r3, #0]
 8081cb2:	b21b      	sxth	r3, r3
 8081cb4:	4313      	orrs	r3, r2
 8081cb6:	b21b      	sxth	r3, r3
 8081cb8:	b29a      	uxth	r2, r3
 8081cba:	4b09      	ldr	r3, [pc, #36]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081cbc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8081cbe:	4b08      	ldr	r3, [pc, #32]	; (8081ce0 <ft5336_TS_GetXY+0x1dc>)
 8081cc0:	881a      	ldrh	r2, [r3, #0]
 8081cc2:	687b      	ldr	r3, [r7, #4]
 8081cc4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8081cc6:	4b05      	ldr	r3, [pc, #20]	; (8081cdc <ft5336_TS_GetXY+0x1d8>)
 8081cc8:	789b      	ldrb	r3, [r3, #2]
 8081cca:	3301      	adds	r3, #1
 8081ccc:	b2da      	uxtb	r2, r3
 8081cce:	4b03      	ldr	r3, [pc, #12]	; (8081cdc <ft5336_TS_GetXY+0x1d8>)
 8081cd0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8081cd2:	bf00      	nop
 8081cd4:	3718      	adds	r7, #24
 8081cd6:	46bd      	mov	sp, r7
 8081cd8:	bd80      	pop	{r7, pc}
 8081cda:	bf00      	nop
 8081cdc:	2000b57c 	.word	0x2000b57c
 8081ce0:	2000b580 	.word	0x2000b580

08081ce4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8081ce4:	b580      	push	{r7, lr}
 8081ce6:	b084      	sub	sp, #16
 8081ce8:	af00      	add	r7, sp, #0
 8081cea:	4603      	mov	r3, r0
 8081cec:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8081cee:	2300      	movs	r3, #0
 8081cf0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8081cf2:	2301      	movs	r3, #1
 8081cf4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8081cf6:	88fb      	ldrh	r3, [r7, #6]
 8081cf8:	b2db      	uxtb	r3, r3
 8081cfa:	7bfa      	ldrb	r2, [r7, #15]
 8081cfc:	21a4      	movs	r1, #164	; 0xa4
 8081cfe:	4618      	mov	r0, r3
 8081d00:	f002 fb72 	bl	80843e8 <TS_IO_Write>
}
 8081d04:	bf00      	nop
 8081d06:	3710      	adds	r7, #16
 8081d08:	46bd      	mov	sp, r7
 8081d0a:	bd80      	pop	{r7, pc}

08081d0c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8081d0c:	b580      	push	{r7, lr}
 8081d0e:	b084      	sub	sp, #16
 8081d10:	af00      	add	r7, sp, #0
 8081d12:	4603      	mov	r3, r0
 8081d14:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8081d16:	2300      	movs	r3, #0
 8081d18:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8081d1a:	2300      	movs	r3, #0
 8081d1c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8081d1e:	88fb      	ldrh	r3, [r7, #6]
 8081d20:	b2db      	uxtb	r3, r3
 8081d22:	7bfa      	ldrb	r2, [r7, #15]
 8081d24:	21a4      	movs	r1, #164	; 0xa4
 8081d26:	4618      	mov	r0, r3
 8081d28:	f002 fb5e 	bl	80843e8 <TS_IO_Write>
}
 8081d2c:	bf00      	nop
 8081d2e:	3710      	adds	r7, #16
 8081d30:	46bd      	mov	sp, r7
 8081d32:	bd80      	pop	{r7, pc}

08081d34 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8081d34:	b480      	push	{r7}
 8081d36:	b083      	sub	sp, #12
 8081d38:	af00      	add	r7, sp, #0
 8081d3a:	4603      	mov	r3, r0
 8081d3c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8081d3e:	2300      	movs	r3, #0
}
 8081d40:	4618      	mov	r0, r3
 8081d42:	370c      	adds	r7, #12
 8081d44:	46bd      	mov	sp, r7
 8081d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081d4a:	4770      	bx	lr

08081d4c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8081d4c:	b480      	push	{r7}
 8081d4e:	b083      	sub	sp, #12
 8081d50:	af00      	add	r7, sp, #0
 8081d52:	4603      	mov	r3, r0
 8081d54:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8081d56:	bf00      	nop
 8081d58:	370c      	adds	r7, #12
 8081d5a:	46bd      	mov	sp, r7
 8081d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081d60:	4770      	bx	lr

08081d62 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8081d62:	b580      	push	{r7, lr}
 8081d64:	b084      	sub	sp, #16
 8081d66:	af00      	add	r7, sp, #0
 8081d68:	4603      	mov	r3, r0
 8081d6a:	6039      	str	r1, [r7, #0]
 8081d6c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8081d6e:	2300      	movs	r3, #0
 8081d70:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8081d72:	88fb      	ldrh	r3, [r7, #6]
 8081d74:	b2db      	uxtb	r3, r3
 8081d76:	2101      	movs	r1, #1
 8081d78:	4618      	mov	r0, r3
 8081d7a:	f002 fb4f 	bl	808441c <TS_IO_Read>
 8081d7e:	4603      	mov	r3, r0
 8081d80:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8081d82:	7bfb      	ldrb	r3, [r7, #15]
 8081d84:	b2db      	uxtb	r3, r3
 8081d86:	461a      	mov	r2, r3
 8081d88:	683b      	ldr	r3, [r7, #0]
 8081d8a:	601a      	str	r2, [r3, #0]
}
 8081d8c:	bf00      	nop
 8081d8e:	3710      	adds	r7, #16
 8081d90:	46bd      	mov	sp, r7
 8081d92:	bd80      	pop	{r7, pc}

08081d94 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8081d94:	b580      	push	{r7, lr}
 8081d96:	b086      	sub	sp, #24
 8081d98:	af00      	add	r7, sp, #0
 8081d9a:	60b9      	str	r1, [r7, #8]
 8081d9c:	607a      	str	r2, [r7, #4]
 8081d9e:	603b      	str	r3, [r7, #0]
 8081da0:	4603      	mov	r3, r0
 8081da2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8081da4:	2300      	movs	r3, #0
 8081da6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8081da8:	2300      	movs	r3, #0
 8081daa:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8081dac:	2300      	movs	r3, #0
 8081dae:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8081db0:	2300      	movs	r3, #0
 8081db2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8081db4:	4b4d      	ldr	r3, [pc, #308]	; (8081eec <ft5336_TS_GetTouchInfo+0x158>)
 8081db6:	785b      	ldrb	r3, [r3, #1]
 8081db8:	461a      	mov	r2, r3
 8081dba:	68bb      	ldr	r3, [r7, #8]
 8081dbc:	4293      	cmp	r3, r2
 8081dbe:	f080 8090 	bcs.w	8081ee2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8081dc2:	68bb      	ldr	r3, [r7, #8]
 8081dc4:	2b09      	cmp	r3, #9
 8081dc6:	d85d      	bhi.n	8081e84 <ft5336_TS_GetTouchInfo+0xf0>
 8081dc8:	a201      	add	r2, pc, #4	; (adr r2, 8081dd0 <ft5336_TS_GetTouchInfo+0x3c>)
 8081dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081dce:	bf00      	nop
 8081dd0:	08081df9 	.word	0x08081df9
 8081dd4:	08081e07 	.word	0x08081e07
 8081dd8:	08081e15 	.word	0x08081e15
 8081ddc:	08081e23 	.word	0x08081e23
 8081de0:	08081e31 	.word	0x08081e31
 8081de4:	08081e3f 	.word	0x08081e3f
 8081de8:	08081e4d 	.word	0x08081e4d
 8081dec:	08081e5b 	.word	0x08081e5b
 8081df0:	08081e69 	.word	0x08081e69
 8081df4:	08081e77 	.word	0x08081e77
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8081df8:	2303      	movs	r3, #3
 8081dfa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8081dfc:	2307      	movs	r3, #7
 8081dfe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8081e00:	2308      	movs	r3, #8
 8081e02:	757b      	strb	r3, [r7, #21]
      break;
 8081e04:	e03f      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8081e06:	2309      	movs	r3, #9
 8081e08:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8081e0a:	230d      	movs	r3, #13
 8081e0c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8081e0e:	230e      	movs	r3, #14
 8081e10:	757b      	strb	r3, [r7, #21]
      break;
 8081e12:	e038      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8081e14:	230f      	movs	r3, #15
 8081e16:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8081e18:	2313      	movs	r3, #19
 8081e1a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8081e1c:	2314      	movs	r3, #20
 8081e1e:	757b      	strb	r3, [r7, #21]
      break;
 8081e20:	e031      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8081e22:	2315      	movs	r3, #21
 8081e24:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8081e26:	2319      	movs	r3, #25
 8081e28:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8081e2a:	231a      	movs	r3, #26
 8081e2c:	757b      	strb	r3, [r7, #21]
      break;
 8081e2e:	e02a      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8081e30:	231b      	movs	r3, #27
 8081e32:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8081e34:	231f      	movs	r3, #31
 8081e36:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8081e38:	2320      	movs	r3, #32
 8081e3a:	757b      	strb	r3, [r7, #21]
      break;
 8081e3c:	e023      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8081e3e:	2321      	movs	r3, #33	; 0x21
 8081e40:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8081e42:	2325      	movs	r3, #37	; 0x25
 8081e44:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8081e46:	2326      	movs	r3, #38	; 0x26
 8081e48:	757b      	strb	r3, [r7, #21]
      break;
 8081e4a:	e01c      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8081e4c:	2327      	movs	r3, #39	; 0x27
 8081e4e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8081e50:	232b      	movs	r3, #43	; 0x2b
 8081e52:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8081e54:	232c      	movs	r3, #44	; 0x2c
 8081e56:	757b      	strb	r3, [r7, #21]
      break;
 8081e58:	e015      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8081e5a:	232d      	movs	r3, #45	; 0x2d
 8081e5c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8081e5e:	2331      	movs	r3, #49	; 0x31
 8081e60:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8081e62:	2332      	movs	r3, #50	; 0x32
 8081e64:	757b      	strb	r3, [r7, #21]
      break;
 8081e66:	e00e      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8081e68:	2333      	movs	r3, #51	; 0x33
 8081e6a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8081e6c:	2337      	movs	r3, #55	; 0x37
 8081e6e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8081e70:	2338      	movs	r3, #56	; 0x38
 8081e72:	757b      	strb	r3, [r7, #21]
      break;
 8081e74:	e007      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8081e76:	2339      	movs	r3, #57	; 0x39
 8081e78:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8081e7a:	233d      	movs	r3, #61	; 0x3d
 8081e7c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8081e7e:	233e      	movs	r3, #62	; 0x3e
 8081e80:	757b      	strb	r3, [r7, #21]
      break;
 8081e82:	e000      	b.n	8081e86 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8081e84:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8081e86:	89fb      	ldrh	r3, [r7, #14]
 8081e88:	b2db      	uxtb	r3, r3
 8081e8a:	7dfa      	ldrb	r2, [r7, #23]
 8081e8c:	4611      	mov	r1, r2
 8081e8e:	4618      	mov	r0, r3
 8081e90:	f002 fac4 	bl	808441c <TS_IO_Read>
 8081e94:	4603      	mov	r3, r0
 8081e96:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8081e98:	7d3b      	ldrb	r3, [r7, #20]
 8081e9a:	b2db      	uxtb	r3, r3
 8081e9c:	119b      	asrs	r3, r3, #6
 8081e9e:	f003 0203 	and.w	r2, r3, #3
 8081ea2:	6a3b      	ldr	r3, [r7, #32]
 8081ea4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8081ea6:	89fb      	ldrh	r3, [r7, #14]
 8081ea8:	b2db      	uxtb	r3, r3
 8081eaa:	7dba      	ldrb	r2, [r7, #22]
 8081eac:	4611      	mov	r1, r2
 8081eae:	4618      	mov	r0, r3
 8081eb0:	f002 fab4 	bl	808441c <TS_IO_Read>
 8081eb4:	4603      	mov	r3, r0
 8081eb6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8081eb8:	7d3b      	ldrb	r3, [r7, #20]
 8081eba:	b2db      	uxtb	r3, r3
 8081ebc:	461a      	mov	r2, r3
 8081ebe:	687b      	ldr	r3, [r7, #4]
 8081ec0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8081ec2:	89fb      	ldrh	r3, [r7, #14]
 8081ec4:	b2db      	uxtb	r3, r3
 8081ec6:	7d7a      	ldrb	r2, [r7, #21]
 8081ec8:	4611      	mov	r1, r2
 8081eca:	4618      	mov	r0, r3
 8081ecc:	f002 faa6 	bl	808441c <TS_IO_Read>
 8081ed0:	4603      	mov	r3, r0
 8081ed2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8081ed4:	7d3b      	ldrb	r3, [r7, #20]
 8081ed6:	b2db      	uxtb	r3, r3
 8081ed8:	111b      	asrs	r3, r3, #4
 8081eda:	f003 0204 	and.w	r2, r3, #4
 8081ede:	683b      	ldr	r3, [r7, #0]
 8081ee0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8081ee2:	bf00      	nop
 8081ee4:	3718      	adds	r7, #24
 8081ee6:	46bd      	mov	sp, r7
 8081ee8:	bd80      	pop	{r7, pc}
 8081eea:	bf00      	nop
 8081eec:	2000b57c 	.word	0x2000b57c

08081ef0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8081ef0:	b480      	push	{r7}
 8081ef2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8081ef4:	4b03      	ldr	r3, [pc, #12]	; (8081f04 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8081ef6:	781b      	ldrb	r3, [r3, #0]
}
 8081ef8:	4618      	mov	r0, r3
 8081efa:	46bd      	mov	sp, r7
 8081efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081f00:	4770      	bx	lr
 8081f02:	bf00      	nop
 8081f04:	2000b57c 	.word	0x2000b57c

08081f08 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8081f08:	b580      	push	{r7, lr}
 8081f0a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8081f0c:	f7ff fff0 	bl	8081ef0 <ft5336_Get_I2C_InitializedStatus>
 8081f10:	4603      	mov	r3, r0
 8081f12:	2b00      	cmp	r3, #0
 8081f14:	d104      	bne.n	8081f20 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8081f16:	f002 fa5d 	bl	80843d4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8081f1a:	4b02      	ldr	r3, [pc, #8]	; (8081f24 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8081f1c:	2201      	movs	r2, #1
 8081f1e:	701a      	strb	r2, [r3, #0]
  }
}
 8081f20:	bf00      	nop
 8081f22:	bd80      	pop	{r7, pc}
 8081f24:	2000b57c 	.word	0x2000b57c

08081f28 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8081f28:	b480      	push	{r7}
 8081f2a:	b085      	sub	sp, #20
 8081f2c:	af00      	add	r7, sp, #0
 8081f2e:	4603      	mov	r3, r0
 8081f30:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8081f32:	2300      	movs	r3, #0
 8081f34:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8081f36:	68fb      	ldr	r3, [r7, #12]
}
 8081f38:	4618      	mov	r0, r3
 8081f3a:	3714      	adds	r7, #20
 8081f3c:	46bd      	mov	sp, r7
 8081f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081f42:	4770      	bx	lr

08081f44 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8081f44:	b590      	push	{r4, r7, lr}
 8081f46:	b087      	sub	sp, #28
 8081f48:	af00      	add	r7, sp, #0
 8081f4a:	60f8      	str	r0, [r7, #12]
 8081f4c:	607a      	str	r2, [r7, #4]
 8081f4e:	461a      	mov	r2, r3
 8081f50:	460b      	mov	r3, r1
 8081f52:	72fb      	strb	r3, [r7, #11]
 8081f54:	4613      	mov	r3, r2
 8081f56:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8081f58:	68fb      	ldr	r3, [r7, #12]
 8081f5a:	685c      	ldr	r4, [r3, #4]
 8081f5c:	68fb      	ldr	r3, [r7, #12]
 8081f5e:	6898      	ldr	r0, [r3, #8]
 8081f60:	893b      	ldrh	r3, [r7, #8]
 8081f62:	7af9      	ldrb	r1, [r7, #11]
 8081f64:	687a      	ldr	r2, [r7, #4]
 8081f66:	47a0      	blx	r4
 8081f68:	6178      	str	r0, [r7, #20]
  return ret;
 8081f6a:	697b      	ldr	r3, [r7, #20]
}
 8081f6c:	4618      	mov	r0, r3
 8081f6e:	371c      	adds	r7, #28
 8081f70:	46bd      	mov	sp, r7
 8081f72:	bd90      	pop	{r4, r7, pc}

08081f74 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8081f74:	b590      	push	{r4, r7, lr}
 8081f76:	b087      	sub	sp, #28
 8081f78:	af00      	add	r7, sp, #0
 8081f7a:	60f8      	str	r0, [r7, #12]
 8081f7c:	607a      	str	r2, [r7, #4]
 8081f7e:	461a      	mov	r2, r3
 8081f80:	460b      	mov	r3, r1
 8081f82:	72fb      	strb	r3, [r7, #11]
 8081f84:	4613      	mov	r3, r2
 8081f86:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8081f88:	68fb      	ldr	r3, [r7, #12]
 8081f8a:	681c      	ldr	r4, [r3, #0]
 8081f8c:	68fb      	ldr	r3, [r7, #12]
 8081f8e:	6898      	ldr	r0, [r3, #8]
 8081f90:	893b      	ldrh	r3, [r7, #8]
 8081f92:	7af9      	ldrb	r1, [r7, #11]
 8081f94:	687a      	ldr	r2, [r7, #4]
 8081f96:	47a0      	blx	r4
 8081f98:	6178      	str	r0, [r7, #20]
  return ret;
 8081f9a:	697b      	ldr	r3, [r7, #20]
}
 8081f9c:	4618      	mov	r0, r3
 8081f9e:	371c      	adds	r7, #28
 8081fa0:	46bd      	mov	sp, r7
 8081fa2:	bd90      	pop	{r4, r7, pc}

08081fa4 <lis2mdl_from_lsb_to_mgauss>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8081fa4:	b480      	push	{r7}
 8081fa6:	b083      	sub	sp, #12
 8081fa8:	af00      	add	r7, sp, #0
 8081faa:	4603      	mov	r3, r0
 8081fac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8081fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8081fb2:	ee07 3a90 	vmov	s15, r3
 8081fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8081fba:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8081fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8081fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8081fc6:	370c      	adds	r7, #12
 8081fc8:	46bd      	mov	sp, r7
 8081fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081fce:	4770      	bx	lr

08081fd0 <lis2mdl_from_lsb_to_celsius>:

float_t lis2mdl_from_lsb_to_celsius(int16_t lsb)
{
 8081fd0:	b480      	push	{r7}
 8081fd2:	b083      	sub	sp, #12
 8081fd4:	af00      	add	r7, sp, #0
 8081fd6:	4603      	mov	r3, r0
 8081fd8:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 8.0f) + 25.0f);
 8081fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8081fde:	ee07 3a90 	vmov	s15, r3
 8081fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8081fe6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8081fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8081fee:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8081ff2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8081ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8081ffa:	370c      	adds	r7, #12
 8081ffc:	46bd      	mov	sp, r7
 8081ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082002:	4770      	bx	lr

08082004 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_md_t val)
{
 8082004:	b580      	push	{r7, lr}
 8082006:	b084      	sub	sp, #16
 8082008:	af00      	add	r7, sp, #0
 808200a:	6078      	str	r0, [r7, #4]
 808200c:	460b      	mov	r3, r1
 808200e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8082010:	f107 0208 	add.w	r2, r7, #8
 8082014:	2301      	movs	r3, #1
 8082016:	2160      	movs	r1, #96	; 0x60
 8082018:	6878      	ldr	r0, [r7, #4]
 808201a:	f7ff ff93 	bl	8081f44 <lis2mdl_read_reg>
 808201e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8082020:	68fb      	ldr	r3, [r7, #12]
 8082022:	2b00      	cmp	r3, #0
 8082024:	d10f      	bne.n	8082046 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8082026:	78fb      	ldrb	r3, [r7, #3]
 8082028:	f003 0303 	and.w	r3, r3, #3
 808202c:	b2da      	uxtb	r2, r3
 808202e:	7a3b      	ldrb	r3, [r7, #8]
 8082030:	f362 0301 	bfi	r3, r2, #0, #2
 8082034:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8082036:	f107 0208 	add.w	r2, r7, #8
 808203a:	2301      	movs	r3, #1
 808203c:	2160      	movs	r1, #96	; 0x60
 808203e:	6878      	ldr	r0, [r7, #4]
 8082040:	f7ff ff98 	bl	8081f74 <lis2mdl_write_reg>
 8082044:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8082046:	68fb      	ldr	r3, [r7, #12]
}
 8082048:	4618      	mov	r0, r3
 808204a:	3710      	adds	r7, #16
 808204c:	46bd      	mov	sp, r7
 808204e:	bd80      	pop	{r7, pc}

08082050 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(lis2mdl_ctx_t *ctx, lis2mdl_odr_t val)
{
 8082050:	b580      	push	{r7, lr}
 8082052:	b084      	sub	sp, #16
 8082054:	af00      	add	r7, sp, #0
 8082056:	6078      	str	r0, [r7, #4]
 8082058:	460b      	mov	r3, r1
 808205a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 808205c:	f107 0208 	add.w	r2, r7, #8
 8082060:	2301      	movs	r3, #1
 8082062:	2160      	movs	r1, #96	; 0x60
 8082064:	6878      	ldr	r0, [r7, #4]
 8082066:	f7ff ff6d 	bl	8081f44 <lis2mdl_read_reg>
 808206a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 808206c:	68fb      	ldr	r3, [r7, #12]
 808206e:	2b00      	cmp	r3, #0
 8082070:	d10f      	bne.n	8082092 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8082072:	78fb      	ldrb	r3, [r7, #3]
 8082074:	f003 0303 	and.w	r3, r3, #3
 8082078:	b2da      	uxtb	r2, r3
 808207a:	7a3b      	ldrb	r3, [r7, #8]
 808207c:	f362 0383 	bfi	r3, r2, #2, #2
 8082080:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8082082:	f107 0208 	add.w	r2, r7, #8
 8082086:	2301      	movs	r3, #1
 8082088:	2160      	movs	r1, #96	; 0x60
 808208a:	6878      	ldr	r0, [r7, #4]
 808208c:	f7ff ff72 	bl	8081f74 <lis2mdl_write_reg>
 8082090:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8082092:	68fb      	ldr	r3, [r7, #12]
}
 8082094:	4618      	mov	r0, r3
 8082096:	3710      	adds	r7, #16
 8082098:	46bd      	mov	sp, r7
 808209a:	bd80      	pop	{r7, pc}

0808209c <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 808209c:	b580      	push	{r7, lr}
 808209e:	b084      	sub	sp, #16
 80820a0:	af00      	add	r7, sp, #0
 80820a2:	6078      	str	r0, [r7, #4]
 80820a4:	460b      	mov	r3, r1
 80820a6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80820a8:	f107 0208 	add.w	r2, r7, #8
 80820ac:	2301      	movs	r3, #1
 80820ae:	2160      	movs	r1, #96	; 0x60
 80820b0:	6878      	ldr	r0, [r7, #4]
 80820b2:	f7ff ff47 	bl	8081f44 <lis2mdl_read_reg>
 80820b6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 80820b8:	68fb      	ldr	r3, [r7, #12]
 80820ba:	2b00      	cmp	r3, #0
 80820bc:	d10f      	bne.n	80820de <lis2mdl_offset_temp_comp_set+0x42>
    reg.comp_temp_en = val;
 80820be:	78fb      	ldrb	r3, [r7, #3]
 80820c0:	f003 0301 	and.w	r3, r3, #1
 80820c4:	b2da      	uxtb	r2, r3
 80820c6:	7a3b      	ldrb	r3, [r7, #8]
 80820c8:	f362 13c7 	bfi	r3, r2, #7, #1
 80820cc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80820ce:	f107 0208 	add.w	r2, r7, #8
 80820d2:	2301      	movs	r3, #1
 80820d4:	2160      	movs	r1, #96	; 0x60
 80820d6:	6878      	ldr	r0, [r7, #4]
 80820d8:	f7ff ff4c 	bl	8081f74 <lis2mdl_write_reg>
 80820dc:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80820de:	68fb      	ldr	r3, [r7, #12]
}
 80820e0:	4618      	mov	r0, r3
 80820e2:	3710      	adds	r7, #16
 80820e4:	46bd      	mov	sp, r7
 80820e6:	bd80      	pop	{r7, pc}

080820e8 <lis2mdl_low_pass_bandwidth_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_low_pass_bandwidth_set(lis2mdl_ctx_t *ctx,
                                       lis2mdl_lpf_t val)
{
 80820e8:	b580      	push	{r7, lr}
 80820ea:	b084      	sub	sp, #16
 80820ec:	af00      	add	r7, sp, #0
 80820ee:	6078      	str	r0, [r7, #4]
 80820f0:	460b      	mov	r3, r1
 80820f2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 80820f4:	f107 0208 	add.w	r2, r7, #8
 80820f8:	2301      	movs	r3, #1
 80820fa:	2161      	movs	r1, #97	; 0x61
 80820fc:	6878      	ldr	r0, [r7, #4]
 80820fe:	f7ff ff21 	bl	8081f44 <lis2mdl_read_reg>
 8082102:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8082104:	68fb      	ldr	r3, [r7, #12]
 8082106:	2b00      	cmp	r3, #0
 8082108:	d10f      	bne.n	808212a <lis2mdl_low_pass_bandwidth_set+0x42>
    reg.lpf = (uint8_t)val;
 808210a:	78fb      	ldrb	r3, [r7, #3]
 808210c:	f003 0301 	and.w	r3, r3, #1
 8082110:	b2da      	uxtb	r2, r3
 8082112:	7a3b      	ldrb	r3, [r7, #8]
 8082114:	f362 0300 	bfi	r3, r2, #0, #1
 8082118:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 808211a:	f107 0208 	add.w	r2, r7, #8
 808211e:	2301      	movs	r3, #1
 8082120:	2161      	movs	r1, #97	; 0x61
 8082122:	6878      	ldr	r0, [r7, #4]
 8082124:	f7ff ff26 	bl	8081f74 <lis2mdl_write_reg>
 8082128:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 808212a:	68fb      	ldr	r3, [r7, #12]
}
 808212c:	4618      	mov	r0, r3
 808212e:	3710      	adds	r7, #16
 8082130:	46bd      	mov	sp, r7
 8082132:	bd80      	pop	{r7, pc}

08082134 <lis2mdl_set_rst_mode_set>:
  * @param  val   change the values of set_rst in reg CFG_REG_B
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_set_rst_t val)
{
 8082134:	b580      	push	{r7, lr}
 8082136:	b084      	sub	sp, #16
 8082138:	af00      	add	r7, sp, #0
 808213a:	6078      	str	r0, [r7, #4]
 808213c:	460b      	mov	r3, r1
 808213e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8082140:	f107 0208 	add.w	r2, r7, #8
 8082144:	2301      	movs	r3, #1
 8082146:	2161      	movs	r1, #97	; 0x61
 8082148:	6878      	ldr	r0, [r7, #4]
 808214a:	f7ff fefb 	bl	8081f44 <lis2mdl_read_reg>
 808214e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8082150:	68fb      	ldr	r3, [r7, #12]
 8082152:	2b00      	cmp	r3, #0
 8082154:	d10f      	bne.n	8082176 <lis2mdl_set_rst_mode_set+0x42>
    reg.set_rst = (uint8_t)val;
 8082156:	78fb      	ldrb	r3, [r7, #3]
 8082158:	f003 0303 	and.w	r3, r3, #3
 808215c:	b2da      	uxtb	r2, r3
 808215e:	7a3b      	ldrb	r3, [r7, #8]
 8082160:	f362 0342 	bfi	r3, r2, #1, #2
 8082164:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
 8082166:	f107 0208 	add.w	r2, r7, #8
 808216a:	2301      	movs	r3, #1
 808216c:	2161      	movs	r1, #97	; 0x61
 808216e:	6878      	ldr	r0, [r7, #4]
 8082170:	f7ff ff00 	bl	8081f74 <lis2mdl_write_reg>
 8082174:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8082176:	68fb      	ldr	r3, [r7, #12]
}
 8082178:	4618      	mov	r0, r3
 808217a:	3710      	adds	r7, #16
 808217c:	46bd      	mov	sp, r7
 808217e:	bd80      	pop	{r7, pc}

08082180 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8082180:	b580      	push	{r7, lr}
 8082182:	b084      	sub	sp, #16
 8082184:	af00      	add	r7, sp, #0
 8082186:	6078      	str	r0, [r7, #4]
 8082188:	460b      	mov	r3, r1
 808218a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 808218c:	f107 0208 	add.w	r2, r7, #8
 8082190:	2301      	movs	r3, #1
 8082192:	2162      	movs	r1, #98	; 0x62
 8082194:	6878      	ldr	r0, [r7, #4]
 8082196:	f7ff fed5 	bl	8081f44 <lis2mdl_read_reg>
 808219a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 808219c:	68fb      	ldr	r3, [r7, #12]
 808219e:	2b00      	cmp	r3, #0
 80821a0:	d10f      	bne.n	80821c2 <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 80821a2:	78fb      	ldrb	r3, [r7, #3]
 80821a4:	f003 0301 	and.w	r3, r3, #1
 80821a8:	b2da      	uxtb	r2, r3
 80821aa:	7a3b      	ldrb	r3, [r7, #8]
 80821ac:	f362 1304 	bfi	r3, r2, #4, #1
 80821b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80821b2:	f107 0208 	add.w	r2, r7, #8
 80821b6:	2301      	movs	r3, #1
 80821b8:	2162      	movs	r1, #98	; 0x62
 80821ba:	6878      	ldr	r0, [r7, #4]
 80821bc:	f7ff feda 	bl	8081f74 <lis2mdl_write_reg>
 80821c0:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80821c2:	68fb      	ldr	r3, [r7, #12]
}
 80821c4:	4618      	mov	r0, r3
 80821c6:	3710      	adds	r7, #16
 80821c8:	46bd      	mov	sp, r7
 80821ca:	bd80      	pop	{r7, pc}

080821cc <lis2mdl_mag_data_ready_get>:
  * @param  val   change the values of zyxda in reg STATUS_REG.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_data_ready_get(lis2mdl_ctx_t *ctx, uint8_t *val)
{
 80821cc:	b580      	push	{r7, lr}
 80821ce:	b084      	sub	sp, #16
 80821d0:	af00      	add	r7, sp, #0
 80821d2:	6078      	str	r0, [r7, #4]
 80821d4:	6039      	str	r1, [r7, #0]
  lis2mdl_status_reg_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_STATUS_REG, (uint8_t*)&reg, 1);
 80821d6:	f107 0208 	add.w	r2, r7, #8
 80821da:	2301      	movs	r3, #1
 80821dc:	2167      	movs	r1, #103	; 0x67
 80821de:	6878      	ldr	r0, [r7, #4]
 80821e0:	f7ff feb0 	bl	8081f44 <lis2mdl_read_reg>
 80821e4:	60f8      	str	r0, [r7, #12]
  *val = reg.zyxda;
 80821e6:	7a3b      	ldrb	r3, [r7, #8]
 80821e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80821ec:	b2db      	uxtb	r3, r3
 80821ee:	461a      	mov	r2, r3
 80821f0:	683b      	ldr	r3, [r7, #0]
 80821f2:	701a      	strb	r2, [r3, #0]

  return ret;
 80821f4:	68fb      	ldr	r3, [r7, #12]
}
 80821f6:	4618      	mov	r0, r3
 80821f8:	3710      	adds	r7, #16
 80821fa:	46bd      	mov	sp, r7
 80821fc:	bd80      	pop	{r7, pc}

080821fe <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 80821fe:	b580      	push	{r7, lr}
 8082200:	b084      	sub	sp, #16
 8082202:	af00      	add	r7, sp, #0
 8082204:	6078      	str	r0, [r7, #4]
 8082206:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8082208:	2306      	movs	r3, #6
 808220a:	683a      	ldr	r2, [r7, #0]
 808220c:	2168      	movs	r1, #104	; 0x68
 808220e:	6878      	ldr	r0, [r7, #4]
 8082210:	f7ff fe98 	bl	8081f44 <lis2mdl_read_reg>
 8082214:	60f8      	str	r0, [r7, #12]
  return ret;
 8082216:	68fb      	ldr	r3, [r7, #12]
}
 8082218:	4618      	mov	r0, r3
 808221a:	3710      	adds	r7, #16
 808221c:	46bd      	mov	sp, r7
 808221e:	bd80      	pop	{r7, pc}

08082220 <lis2mdl_temperature_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_temperature_raw_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 8082220:	b580      	push	{r7, lr}
 8082222:	b084      	sub	sp, #16
 8082224:	af00      	add	r7, sp, #0
 8082226:	6078      	str	r0, [r7, #4]
 8082228:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
 808222a:	2302      	movs	r3, #2
 808222c:	683a      	ldr	r2, [r7, #0]
 808222e:	216e      	movs	r1, #110	; 0x6e
 8082230:	6878      	ldr	r0, [r7, #4]
 8082232:	f7ff fe87 	bl	8081f44 <lis2mdl_read_reg>
 8082236:	60f8      	str	r0, [r7, #12]
  return ret;
 8082238:	68fb      	ldr	r3, [r7, #12]
}
 808223a:	4618      	mov	r0, r3
 808223c:	3710      	adds	r7, #16
 808223e:	46bd      	mov	sp, r7
 8082240:	bd80      	pop	{r7, pc}

08082242 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 8082242:	b580      	push	{r7, lr}
 8082244:	b084      	sub	sp, #16
 8082246:	af00      	add	r7, sp, #0
 8082248:	6078      	str	r0, [r7, #4]
 808224a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 808224c:	2301      	movs	r3, #1
 808224e:	683a      	ldr	r2, [r7, #0]
 8082250:	214f      	movs	r1, #79	; 0x4f
 8082252:	6878      	ldr	r0, [r7, #4]
 8082254:	f7ff fe76 	bl	8081f44 <lis2mdl_read_reg>
 8082258:	60f8      	str	r0, [r7, #12]
  return ret;
 808225a:	68fb      	ldr	r3, [r7, #12]
}
 808225c:	4618      	mov	r0, r3
 808225e:	3710      	adds	r7, #16
 8082260:	46bd      	mov	sp, r7
 8082262:	bd80      	pop	{r7, pc}

08082264 <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8082264:	b580      	push	{r7, lr}
 8082266:	b084      	sub	sp, #16
 8082268:	af00      	add	r7, sp, #0
 808226a:	6078      	str	r0, [r7, #4]
 808226c:	460b      	mov	r3, r1
 808226e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8082270:	f107 0208 	add.w	r2, r7, #8
 8082274:	2301      	movs	r3, #1
 8082276:	2160      	movs	r1, #96	; 0x60
 8082278:	6878      	ldr	r0, [r7, #4]
 808227a:	f7ff fe63 	bl	8081f44 <lis2mdl_read_reg>
 808227e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 8082280:	68fb      	ldr	r3, [r7, #12]
 8082282:	2b00      	cmp	r3, #0
 8082284:	d10f      	bne.n	80822a6 <lis2mdl_reset_set+0x42>
    reg.soft_rst = val;
 8082286:	78fb      	ldrb	r3, [r7, #3]
 8082288:	f003 0301 	and.w	r3, r3, #1
 808228c:	b2da      	uxtb	r2, r3
 808228e:	7a3b      	ldrb	r3, [r7, #8]
 8082290:	f362 1345 	bfi	r3, r2, #5, #1
 8082294:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8082296:	f107 0208 	add.w	r2, r7, #8
 808229a:	2301      	movs	r3, #1
 808229c:	2160      	movs	r1, #96	; 0x60
 808229e:	6878      	ldr	r0, [r7, #4]
 80822a0:	f7ff fe68 	bl	8081f74 <lis2mdl_write_reg>
 80822a4:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80822a6:	68fb      	ldr	r3, [r7, #12]
}
 80822a8:	4618      	mov	r0, r3
 80822aa:	3710      	adds	r7, #16
 80822ac:	46bd      	mov	sp, r7
 80822ae:	bd80      	pop	{r7, pc}

080822b0 <lis2mdl_reset_get>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_get(lis2mdl_ctx_t *ctx, uint8_t *val)
{
 80822b0:	b580      	push	{r7, lr}
 80822b2:	b084      	sub	sp, #16
 80822b4:	af00      	add	r7, sp, #0
 80822b6:	6078      	str	r0, [r7, #4]
 80822b8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 80822ba:	f107 0208 	add.w	r2, r7, #8
 80822be:	2301      	movs	r3, #1
 80822c0:	2160      	movs	r1, #96	; 0x60
 80822c2:	6878      	ldr	r0, [r7, #4]
 80822c4:	f7ff fe3e 	bl	8081f44 <lis2mdl_read_reg>
 80822c8:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_rst;
 80822ca:	7a3b      	ldrb	r3, [r7, #8]
 80822cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80822d0:	b2db      	uxtb	r3, r3
 80822d2:	461a      	mov	r2, r3
 80822d4:	683b      	ldr	r3, [r7, #0]
 80822d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80822d8:	68fb      	ldr	r3, [r7, #12]
}
 80822da:	4618      	mov	r0, r3
 80822dc:	3710      	adds	r7, #16
 80822de:	46bd      	mov	sp, r7
 80822e0:	bd80      	pop	{r7, pc}

080822e2 <lis2mdl_drdy_on_pin_set>:
  * @param  val   change the values of drdy_on_pin in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_drdy_on_pin_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 80822e2:	b580      	push	{r7, lr}
 80822e4:	b084      	sub	sp, #16
 80822e6:	af00      	add	r7, sp, #0
 80822e8:	6078      	str	r0, [r7, #4]
 80822ea:	460b      	mov	r3, r1
 80822ec:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80822ee:	f107 0208 	add.w	r2, r7, #8
 80822f2:	2301      	movs	r3, #1
 80822f4:	2162      	movs	r1, #98	; 0x62
 80822f6:	6878      	ldr	r0, [r7, #4]
 80822f8:	f7ff fe24 	bl	8081f44 <lis2mdl_read_reg>
 80822fc:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0){
 80822fe:	68fb      	ldr	r3, [r7, #12]
 8082300:	2b00      	cmp	r3, #0
 8082302:	d10f      	bne.n	8082324 <lis2mdl_drdy_on_pin_set+0x42>
    reg.drdy_on_pin = val;
 8082304:	78fb      	ldrb	r3, [r7, #3]
 8082306:	f003 0301 	and.w	r3, r3, #1
 808230a:	b2da      	uxtb	r2, r3
 808230c:	7a3b      	ldrb	r3, [r7, #8]
 808230e:	f362 0300 	bfi	r3, r2, #0, #1
 8082312:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8082314:	f107 0208 	add.w	r2, r7, #8
 8082318:	2301      	movs	r3, #1
 808231a:	2162      	movs	r1, #98	; 0x62
 808231c:	6878      	ldr	r0, [r7, #4]
 808231e:	f7ff fe29 	bl	8081f74 <lis2mdl_write_reg>
 8082322:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8082324:	68fb      	ldr	r3, [r7, #12]
}
 8082326:	4618      	mov	r0, r3
 8082328:	3710      	adds	r7, #16
 808232a:	46bd      	mov	sp, r7
 808232c:	bd80      	pop	{r7, pc}

0808232e <lsm6ds3_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_read_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 808232e:	b590      	push	{r4, r7, lr}
 8082330:	b087      	sub	sp, #28
 8082332:	af00      	add	r7, sp, #0
 8082334:	60f8      	str	r0, [r7, #12]
 8082336:	607a      	str	r2, [r7, #4]
 8082338:	461a      	mov	r2, r3
 808233a:	460b      	mov	r3, r1
 808233c:	72fb      	strb	r3, [r7, #11]
 808233e:	4613      	mov	r3, r2
 8082340:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8082342:	68fb      	ldr	r3, [r7, #12]
 8082344:	685c      	ldr	r4, [r3, #4]
 8082346:	68fb      	ldr	r3, [r7, #12]
 8082348:	6898      	ldr	r0, [r3, #8]
 808234a:	893b      	ldrh	r3, [r7, #8]
 808234c:	7af9      	ldrb	r1, [r7, #11]
 808234e:	687a      	ldr	r2, [r7, #4]
 8082350:	47a0      	blx	r4
 8082352:	6178      	str	r0, [r7, #20]
  return ret;
 8082354:	697b      	ldr	r3, [r7, #20]
}
 8082356:	4618      	mov	r0, r3
 8082358:	371c      	adds	r7, #28
 808235a:	46bd      	mov	sp, r7
 808235c:	bd90      	pop	{r4, r7, pc}

0808235e <lsm6ds3_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_write_reg(lsm6ds3_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 808235e:	b590      	push	{r4, r7, lr}
 8082360:	b087      	sub	sp, #28
 8082362:	af00      	add	r7, sp, #0
 8082364:	60f8      	str	r0, [r7, #12]
 8082366:	607a      	str	r2, [r7, #4]
 8082368:	461a      	mov	r2, r3
 808236a:	460b      	mov	r3, r1
 808236c:	72fb      	strb	r3, [r7, #11]
 808236e:	4613      	mov	r3, r2
 8082370:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8082372:	68fb      	ldr	r3, [r7, #12]
 8082374:	681c      	ldr	r4, [r3, #0]
 8082376:	68fb      	ldr	r3, [r7, #12]
 8082378:	6898      	ldr	r0, [r3, #8]
 808237a:	893b      	ldrh	r3, [r7, #8]
 808237c:	7af9      	ldrb	r1, [r7, #11]
 808237e:	687a      	ldr	r2, [r7, #4]
 8082380:	47a0      	blx	r4
 8082382:	6178      	str	r0, [r7, #20]
  return ret;
 8082384:	697b      	ldr	r3, [r7, #20]
}
 8082386:	4618      	mov	r0, r3
 8082388:	371c      	adds	r7, #28
 808238a:	46bd      	mov	sp, r7
 808238c:	bd90      	pop	{r4, r7, pc}
	...

08082390 <lsm6ds3_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3_from_fs2g_to_mg(int16_t lsb)
{
 8082390:	b480      	push	{r7}
 8082392:	b083      	sub	sp, #12
 8082394:	af00      	add	r7, sp, #0
 8082396:	4603      	mov	r3, r0
 8082398:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 61.0f / 1000.0f);
 808239a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 808239e:	ee07 3a90 	vmov	s15, r3
 80823a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80823a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80823c8 <lsm6ds3_from_fs2g_to_mg+0x38>
 80823aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80823ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80823cc <lsm6ds3_from_fs2g_to_mg+0x3c>
 80823b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80823b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80823ba:	eeb0 0a67 	vmov.f32	s0, s15
 80823be:	370c      	adds	r7, #12
 80823c0:	46bd      	mov	sp, r7
 80823c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80823c6:	4770      	bx	lr
 80823c8:	42740000 	.word	0x42740000
 80823cc:	447a0000 	.word	0x447a0000

080823d0 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 80823d0:	b480      	push	{r7}
 80823d2:	b083      	sub	sp, #12
 80823d4:	af00      	add	r7, sp, #0
 80823d6:	4603      	mov	r3, r0
 80823d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80823da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80823de:	ee07 3a90 	vmov	s15, r3
 80823e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80823e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80823fc <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 80823ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80823ee:	eeb0 0a67 	vmov.f32	s0, s15
 80823f2:	370c      	adds	r7, #12
 80823f4:	46bd      	mov	sp, r7
 80823f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80823fa:	4770      	bx	lr
 80823fc:	428c0000 	.word	0x428c0000

08082400 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 8082400:	b480      	push	{r7}
 8082402:	b083      	sub	sp, #12
 8082404:	af00      	add	r7, sp, #0
 8082406:	4603      	mov	r3, r0
 8082408:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f );
 808240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 808240e:	ee07 3a90 	vmov	s15, r3
 8082412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8082416:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 808241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 808241e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8082422:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8082426:	eeb0 0a67 	vmov.f32	s0, s15
 808242a:	370c      	adds	r7, #12
 808242c:	46bd      	mov	sp, r7
 808242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082432:	4770      	bx	lr

08082434 <lsm6ds3_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_xl_fs_t val)
{
 8082434:	b580      	push	{r7, lr}
 8082436:	b084      	sub	sp, #16
 8082438:	af00      	add	r7, sp, #0
 808243a:	6078      	str	r0, [r7, #4]
 808243c:	460b      	mov	r3, r1
 808243e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8082440:	f107 0208 	add.w	r2, r7, #8
 8082444:	2301      	movs	r3, #1
 8082446:	2110      	movs	r1, #16
 8082448:	6878      	ldr	r0, [r7, #4]
 808244a:	f7ff ff70 	bl	808232e <lsm6ds3_read_reg>
 808244e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8082450:	68fb      	ldr	r3, [r7, #12]
 8082452:	2b00      	cmp	r3, #0
 8082454:	d10f      	bne.n	8082476 <lsm6ds3_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8082456:	78fb      	ldrb	r3, [r7, #3]
 8082458:	f003 0303 	and.w	r3, r3, #3
 808245c:	b2da      	uxtb	r2, r3
 808245e:	7a3b      	ldrb	r3, [r7, #8]
 8082460:	f362 0383 	bfi	r3, r2, #2, #2
 8082464:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8082466:	f107 0208 	add.w	r2, r7, #8
 808246a:	2301      	movs	r3, #1
 808246c:	2110      	movs	r1, #16
 808246e:	6878      	ldr	r0, [r7, #4]
 8082470:	f7ff ff75 	bl	808235e <lsm6ds3_write_reg>
 8082474:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8082476:	68fb      	ldr	r3, [r7, #12]
}
 8082478:	4618      	mov	r0, r3
 808247a:	3710      	adds	r7, #16
 808247c:	46bd      	mov	sp, r7
 808247e:	bd80      	pop	{r7, pc}

08082480 <lsm6ds3_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_xl_t val)
{
 8082480:	b580      	push	{r7, lr}
 8082482:	b084      	sub	sp, #16
 8082484:	af00      	add	r7, sp, #0
 8082486:	6078      	str	r0, [r7, #4]
 8082488:	460b      	mov	r3, r1
 808248a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 808248c:	f107 0208 	add.w	r2, r7, #8
 8082490:	2301      	movs	r3, #1
 8082492:	2110      	movs	r1, #16
 8082494:	6878      	ldr	r0, [r7, #4]
 8082496:	f7ff ff4a 	bl	808232e <lsm6ds3_read_reg>
 808249a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 808249c:	68fb      	ldr	r3, [r7, #12]
 808249e:	2b00      	cmp	r3, #0
 80824a0:	d10f      	bne.n	80824c2 <lsm6ds3_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t)val;
 80824a2:	78fb      	ldrb	r3, [r7, #3]
 80824a4:	f003 030f 	and.w	r3, r3, #15
 80824a8:	b2da      	uxtb	r2, r3
 80824aa:	7a3b      	ldrb	r3, [r7, #8]
 80824ac:	f362 1307 	bfi	r3, r2, #4, #4
 80824b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80824b2:	f107 0208 	add.w	r2, r7, #8
 80824b6:	2301      	movs	r3, #1
 80824b8:	2110      	movs	r1, #16
 80824ba:	6878      	ldr	r0, [r7, #4]
 80824bc:	f7ff ff4f 	bl	808235e <lsm6ds3_write_reg>
 80824c0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80824c2:	68fb      	ldr	r3, [r7, #12]
}
 80824c4:	4618      	mov	r0, r3
 80824c6:	3710      	adds	r7, #16
 80824c8:	46bd      	mov	sp, r7
 80824ca:	bd80      	pop	{r7, pc}

080824cc <lsm6ds3_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(lsm6ds3_ctx_t *ctx, lsm6ds3_fs_g_t val)
{
 80824cc:	b580      	push	{r7, lr}
 80824ce:	b084      	sub	sp, #16
 80824d0:	af00      	add	r7, sp, #0
 80824d2:	6078      	str	r0, [r7, #4]
 80824d4:	460b      	mov	r3, r1
 80824d6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80824d8:	f107 0208 	add.w	r2, r7, #8
 80824dc:	2301      	movs	r3, #1
 80824de:	2111      	movs	r1, #17
 80824e0:	6878      	ldr	r0, [r7, #4]
 80824e2:	f7ff ff24 	bl	808232e <lsm6ds3_read_reg>
 80824e6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80824e8:	68fb      	ldr	r3, [r7, #12]
 80824ea:	2b00      	cmp	r3, #0
 80824ec:	d10f      	bne.n	808250e <lsm6ds3_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80824ee:	78fb      	ldrb	r3, [r7, #3]
 80824f0:	f003 0307 	and.w	r3, r3, #7
 80824f4:	b2da      	uxtb	r2, r3
 80824f6:	7a3b      	ldrb	r3, [r7, #8]
 80824f8:	f362 0343 	bfi	r3, r2, #1, #3
 80824fc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80824fe:	f107 0208 	add.w	r2, r7, #8
 8082502:	2301      	movs	r3, #1
 8082504:	2111      	movs	r1, #17
 8082506:	6878      	ldr	r0, [r7, #4]
 8082508:	f7ff ff29 	bl	808235e <lsm6ds3_write_reg>
 808250c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 808250e:	68fb      	ldr	r3, [r7, #12]
}
 8082510:	4618      	mov	r0, r3
 8082512:	3710      	adds	r7, #16
 8082514:	46bd      	mov	sp, r7
 8082516:	bd80      	pop	{r7, pc}

08082518 <lsm6ds3_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg  LSM6DS3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(lsm6ds3_ctx_t *ctx, lsm6ds3_odr_g_t val)
{
 8082518:	b580      	push	{r7, lr}
 808251a:	b084      	sub	sp, #16
 808251c:	af00      	add	r7, sp, #0
 808251e:	6078      	str	r0, [r7, #4]
 8082520:	460b      	mov	r3, r1
 8082522:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8082524:	f107 0208 	add.w	r2, r7, #8
 8082528:	2301      	movs	r3, #1
 808252a:	2111      	movs	r1, #17
 808252c:	6878      	ldr	r0, [r7, #4]
 808252e:	f7ff fefe 	bl	808232e <lsm6ds3_read_reg>
 8082532:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8082534:	68fb      	ldr	r3, [r7, #12]
 8082536:	2b00      	cmp	r3, #0
 8082538:	d10f      	bne.n	808255a <lsm6ds3_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t)val;
 808253a:	78fb      	ldrb	r3, [r7, #3]
 808253c:	f003 030f 	and.w	r3, r3, #15
 8082540:	b2da      	uxtb	r2, r3
 8082542:	7a3b      	ldrb	r3, [r7, #8]
 8082544:	f362 1307 	bfi	r3, r2, #4, #4
 8082548:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 808254a:	f107 0208 	add.w	r2, r7, #8
 808254e:	2301      	movs	r3, #1
 8082550:	2111      	movs	r1, #17
 8082552:	6878      	ldr	r0, [r7, #4]
 8082554:	f7ff ff03 	bl	808235e <lsm6ds3_write_reg>
 8082558:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 808255a:	68fb      	ldr	r3, [r7, #12]
}
 808255c:	4618      	mov	r0, r3
 808255e:	3710      	adds	r7, #16
 8082560:	46bd      	mov	sp, r7
 8082562:	bd80      	pop	{r7, pc}

08082564 <lsm6ds3_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_block_data_update_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 8082564:	b580      	push	{r7, lr}
 8082566:	b084      	sub	sp, #16
 8082568:	af00      	add	r7, sp, #0
 808256a:	6078      	str	r0, [r7, #4]
 808256c:	460b      	mov	r3, r1
 808256e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8082570:	f107 0208 	add.w	r2, r7, #8
 8082574:	2301      	movs	r3, #1
 8082576:	2112      	movs	r1, #18
 8082578:	6878      	ldr	r0, [r7, #4]
 808257a:	f7ff fed8 	bl	808232e <lsm6ds3_read_reg>
 808257e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8082580:	68fb      	ldr	r3, [r7, #12]
 8082582:	2b00      	cmp	r3, #0
 8082584:	d10f      	bne.n	80825a6 <lsm6ds3_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8082586:	78fb      	ldrb	r3, [r7, #3]
 8082588:	f003 0301 	and.w	r3, r3, #1
 808258c:	b2da      	uxtb	r2, r3
 808258e:	7a3b      	ldrb	r3, [r7, #8]
 8082590:	f362 1386 	bfi	r3, r2, #6, #1
 8082594:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8082596:	f107 0208 	add.w	r2, r7, #8
 808259a:	2301      	movs	r3, #1
 808259c:	2112      	movs	r1, #18
 808259e:	6878      	ldr	r0, [r7, #4]
 80825a0:	f7ff fedd 	bl	808235e <lsm6ds3_write_reg>
 80825a4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80825a6:	68fb      	ldr	r3, [r7, #12]
}
 80825a8:	4618      	mov	r0, r3
 80825aa:	3710      	adds	r7, #16
 80825ac:	46bd      	mov	sp, r7
 80825ae:	bd80      	pop	{r7, pc}

080825b0 <lsm6ds3_xl_flag_data_ready_get>:
  * @param  val      get the values of xlda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 80825b0:	b580      	push	{r7, lr}
 80825b2:	b084      	sub	sp, #16
 80825b4:	af00      	add	r7, sp, #0
 80825b6:	6078      	str	r0, [r7, #4]
 80825b8:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 80825ba:	f107 0208 	add.w	r2, r7, #8
 80825be:	2301      	movs	r3, #1
 80825c0:	211e      	movs	r1, #30
 80825c2:	6878      	ldr	r0, [r7, #4]
 80825c4:	f7ff feb3 	bl	808232e <lsm6ds3_read_reg>
 80825c8:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.xlda;
 80825ca:	7a3b      	ldrb	r3, [r7, #8]
 80825cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80825d0:	b2db      	uxtb	r3, r3
 80825d2:	461a      	mov	r2, r3
 80825d4:	683b      	ldr	r3, [r7, #0]
 80825d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80825d8:	68fb      	ldr	r3, [r7, #12]
}
 80825da:	4618      	mov	r0, r3
 80825dc:	3710      	adds	r7, #16
 80825de:	46bd      	mov	sp, r7
 80825e0:	bd80      	pop	{r7, pc}

080825e2 <lsm6ds3_gy_flag_data_ready_get>:
  * @param  val      get the values of gda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 80825e2:	b580      	push	{r7, lr}
 80825e4:	b084      	sub	sp, #16
 80825e6:	af00      	add	r7, sp, #0
 80825e8:	6078      	str	r0, [r7, #4]
 80825ea:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 80825ec:	f107 0208 	add.w	r2, r7, #8
 80825f0:	2301      	movs	r3, #1
 80825f2:	211e      	movs	r1, #30
 80825f4:	6878      	ldr	r0, [r7, #4]
 80825f6:	f7ff fe9a 	bl	808232e <lsm6ds3_read_reg>
 80825fa:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.gda;
 80825fc:	7a3b      	ldrb	r3, [r7, #8]
 80825fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8082602:	b2db      	uxtb	r3, r3
 8082604:	461a      	mov	r2, r3
 8082606:	683b      	ldr	r3, [r7, #0]
 8082608:	701a      	strb	r2, [r3, #0]

  return ret;
 808260a:	68fb      	ldr	r3, [r7, #12]
}
 808260c:	4618      	mov	r0, r3
 808260e:	3710      	adds	r7, #16
 8082610:	46bd      	mov	sp, r7
 8082612:	bd80      	pop	{r7, pc}

08082614 <lsm6ds3_temp_flag_data_ready_get>:
  * @param  val      get the values of tda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temp_flag_data_ready_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 8082614:	b580      	push	{r7, lr}
 8082616:	b084      	sub	sp, #16
 8082618:	af00      	add	r7, sp, #0
 808261a:	6078      	str	r0, [r7, #4]
 808261c:	6039      	str	r1, [r7, #0]
  lsm6ds3_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
 808261e:	f107 0208 	add.w	r2, r7, #8
 8082622:	2301      	movs	r3, #1
 8082624:	211e      	movs	r1, #30
 8082626:	6878      	ldr	r0, [r7, #4]
 8082628:	f7ff fe81 	bl	808232e <lsm6ds3_read_reg>
 808262c:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)status_reg.tda;
 808262e:	7a3b      	ldrb	r3, [r7, #8]
 8082630:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8082634:	b2db      	uxtb	r3, r3
 8082636:	461a      	mov	r2, r3
 8082638:	683b      	ldr	r3, [r7, #0]
 808263a:	701a      	strb	r2, [r3, #0]

  return ret;
 808263c:	68fb      	ldr	r3, [r7, #12]
}
 808263e:	4618      	mov	r0, r3
 8082640:	3710      	adds	r7, #16
 8082642:	46bd      	mov	sp, r7
 8082644:	bd80      	pop	{r7, pc}

08082646 <lsm6ds3_temperature_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_temperature_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8082646:	b580      	push	{r7, lr}
 8082648:	b084      	sub	sp, #16
 808264a:	af00      	add	r7, sp, #0
 808264c:	6078      	str	r0, [r7, #4]
 808264e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8082650:	2302      	movs	r3, #2
 8082652:	683a      	ldr	r2, [r7, #0]
 8082654:	2120      	movs	r1, #32
 8082656:	6878      	ldr	r0, [r7, #4]
 8082658:	f7ff fe69 	bl	808232e <lsm6ds3_read_reg>
 808265c:	60f8      	str	r0, [r7, #12]
  return ret;
 808265e:	68fb      	ldr	r3, [r7, #12]
}
 8082660:	4618      	mov	r0, r3
 8082662:	3710      	adds	r7, #16
 8082664:	46bd      	mov	sp, r7
 8082666:	bd80      	pop	{r7, pc}

08082668 <lsm6ds3_angular_rate_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 8082668:	b580      	push	{r7, lr}
 808266a:	b084      	sub	sp, #16
 808266c:	af00      	add	r7, sp, #0
 808266e:	6078      	str	r0, [r7, #4]
 8082670:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8082672:	2306      	movs	r3, #6
 8082674:	683a      	ldr	r2, [r7, #0]
 8082676:	2122      	movs	r1, #34	; 0x22
 8082678:	6878      	ldr	r0, [r7, #4]
 808267a:	f7ff fe58 	bl	808232e <lsm6ds3_read_reg>
 808267e:	60f8      	str	r0, [r7, #12]
  return ret;
 8082680:	68fb      	ldr	r3, [r7, #12]
}
 8082682:	4618      	mov	r0, r3
 8082684:	3710      	adds	r7, #16
 8082686:	46bd      	mov	sp, r7
 8082688:	bd80      	pop	{r7, pc}

0808268a <lsm6ds3_acceleration_raw_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_acceleration_raw_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 808268a:	b580      	push	{r7, lr}
 808268c:	b084      	sub	sp, #16
 808268e:	af00      	add	r7, sp, #0
 8082690:	6078      	str	r0, [r7, #4]
 8082692:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8082694:	2306      	movs	r3, #6
 8082696:	683a      	ldr	r2, [r7, #0]
 8082698:	2128      	movs	r1, #40	; 0x28
 808269a:	6878      	ldr	r0, [r7, #4]
 808269c:	f7ff fe47 	bl	808232e <lsm6ds3_read_reg>
 80826a0:	60f8      	str	r0, [r7, #12]
  return ret;
 80826a2:	68fb      	ldr	r3, [r7, #12]
}
 80826a4:	4618      	mov	r0, r3
 80826a6:	3710      	adds	r7, #16
 80826a8:	46bd      	mov	sp, r7
 80826aa:	bd80      	pop	{r7, pc}

080826ac <lsm6ds3_device_id_get>:
  * @param  ctx         read / write interface definitions(ptr)
  * @param  buff        buffer that stores data read
  *
  */
int32_t lsm6ds3_device_id_get(lsm6ds3_ctx_t *ctx, uint8_t *buff)
{
 80826ac:	b580      	push	{r7, lr}
 80826ae:	b084      	sub	sp, #16
 80826b0:	af00      	add	r7, sp, #0
 80826b2:	6078      	str	r0, [r7, #4]
 80826b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 80826b6:	2301      	movs	r3, #1
 80826b8:	683a      	ldr	r2, [r7, #0]
 80826ba:	210f      	movs	r1, #15
 80826bc:	6878      	ldr	r0, [r7, #4]
 80826be:	f7ff fe36 	bl	808232e <lsm6ds3_read_reg>
 80826c2:	60f8      	str	r0, [r7, #12]
  return ret;
 80826c4:	68fb      	ldr	r3, [r7, #12]
}
 80826c6:	4618      	mov	r0, r3
 80826c8:	3710      	adds	r7, #16
 80826ca:	46bd      	mov	sp, r7
 80826cc:	bd80      	pop	{r7, pc}

080826ce <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(lsm6ds3_ctx_t *ctx, uint8_t val)
{
 80826ce:	b580      	push	{r7, lr}
 80826d0:	b084      	sub	sp, #16
 80826d2:	af00      	add	r7, sp, #0
 80826d4:	6078      	str	r0, [r7, #4]
 80826d6:	460b      	mov	r3, r1
 80826d8:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80826da:	f107 0208 	add.w	r2, r7, #8
 80826de:	2301      	movs	r3, #1
 80826e0:	2112      	movs	r1, #18
 80826e2:	6878      	ldr	r0, [r7, #4]
 80826e4:	f7ff fe23 	bl	808232e <lsm6ds3_read_reg>
 80826e8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80826ea:	68fb      	ldr	r3, [r7, #12]
 80826ec:	2b00      	cmp	r3, #0
 80826ee:	d10f      	bne.n	8082710 <lsm6ds3_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 80826f0:	78fb      	ldrb	r3, [r7, #3]
 80826f2:	f003 0301 	and.w	r3, r3, #1
 80826f6:	b2da      	uxtb	r2, r3
 80826f8:	7a3b      	ldrb	r3, [r7, #8]
 80826fa:	f362 0300 	bfi	r3, r2, #0, #1
 80826fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8082700:	f107 0208 	add.w	r2, r7, #8
 8082704:	2301      	movs	r3, #1
 8082706:	2112      	movs	r1, #18
 8082708:	6878      	ldr	r0, [r7, #4]
 808270a:	f7ff fe28 	bl	808235e <lsm6ds3_write_reg>
 808270e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8082710:	68fb      	ldr	r3, [r7, #12]
}
 8082712:	4618      	mov	r0, r3
 8082714:	3710      	adds	r7, #16
 8082716:	46bd      	mov	sp, r7
 8082718:	bd80      	pop	{r7, pc}

0808271a <lsm6ds3_reset_get>:
  * @param  val      get the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_get(lsm6ds3_ctx_t *ctx, uint8_t *val)
{
 808271a:	b580      	push	{r7, lr}
 808271c:	b084      	sub	sp, #16
 808271e:	af00      	add	r7, sp, #0
 8082720:	6078      	str	r0, [r7, #4]
 8082722:	6039      	str	r1, [r7, #0]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8082724:	f107 0208 	add.w	r2, r7, #8
 8082728:	2301      	movs	r3, #1
 808272a:	2112      	movs	r1, #18
 808272c:	6878      	ldr	r0, [r7, #4]
 808272e:	f7ff fdfe 	bl	808232e <lsm6ds3_read_reg>
 8082732:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl3_c.sw_reset;
 8082734:	7a3b      	ldrb	r3, [r7, #8]
 8082736:	f3c3 0300 	ubfx	r3, r3, #0, #1
 808273a:	b2db      	uxtb	r3, r3
 808273c:	461a      	mov	r2, r3
 808273e:	683b      	ldr	r3, [r7, #0]
 8082740:	701a      	strb	r2, [r3, #0]

  return ret;
 8082742:	68fb      	ldr	r3, [r7, #12]
}
 8082744:	4618      	mov	r0, r3
 8082746:	3710      	adds	r7, #16
 8082748:	46bd      	mov	sp, r7
 808274a:	bd80      	pop	{r7, pc}

0808274c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 808274c:	b580      	push	{r7, lr}
 808274e:	b088      	sub	sp, #32
 8082750:	af00      	add	r7, sp, #0
 8082752:	607b      	str	r3, [r7, #4]
 8082754:	4603      	mov	r3, r0
 8082756:	81fb      	strh	r3, [r7, #14]
 8082758:	460b      	mov	r3, r1
 808275a:	81bb      	strh	r3, [r7, #12]
 808275c:	4613      	mov	r3, r2
 808275e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8082760:	2300      	movs	r3, #0
 8082762:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8082764:	89bb      	ldrh	r3, [r7, #12]
 8082766:	b2db      	uxtb	r3, r3
 8082768:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 808276a:	89bb      	ldrh	r3, [r7, #12]
 808276c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8082770:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8082772:	2300      	movs	r3, #0
 8082774:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8082776:	f001 fdb9 	bl	80842ec <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 808277a:	89fb      	ldrh	r3, [r7, #14]
 808277c:	b2db      	uxtb	r3, r3
 808277e:	2203      	movs	r2, #3
 8082780:	f44f 7181 	mov.w	r1, #258	; 0x102
 8082784:	4618      	mov	r0, r3
 8082786:	f001 fab3 	bl	8083cf0 <CODEC_IO_Write>
 808278a:	4603      	mov	r3, r0
 808278c:	461a      	mov	r2, r3
 808278e:	69fb      	ldr	r3, [r7, #28]
 8082790:	4413      	add	r3, r2
 8082792:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8082794:	89fb      	ldrh	r3, [r7, #14]
 8082796:	b2db      	uxtb	r3, r3
 8082798:	2200      	movs	r2, #0
 808279a:	f640 0117 	movw	r1, #2071	; 0x817
 808279e:	4618      	mov	r0, r3
 80827a0:	f001 faa6 	bl	8083cf0 <CODEC_IO_Write>
 80827a4:	4603      	mov	r3, r0
 80827a6:	461a      	mov	r2, r3
 80827a8:	69fb      	ldr	r3, [r7, #28]
 80827aa:	4413      	add	r3, r2
 80827ac:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80827ae:	89fb      	ldrh	r3, [r7, #14]
 80827b0:	b2db      	uxtb	r3, r3
 80827b2:	2200      	movs	r2, #0
 80827b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80827b8:	4618      	mov	r0, r3
 80827ba:	f001 fa99 	bl	8083cf0 <CODEC_IO_Write>
 80827be:	4603      	mov	r3, r0
 80827c0:	461a      	mov	r2, r3
 80827c2:	69fb      	ldr	r3, [r7, #28]
 80827c4:	4413      	add	r3, r2
 80827c6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80827c8:	89fb      	ldrh	r3, [r7, #14]
 80827ca:	b2db      	uxtb	r3, r3
 80827cc:	226c      	movs	r2, #108	; 0x6c
 80827ce:	2139      	movs	r1, #57	; 0x39
 80827d0:	4618      	mov	r0, r3
 80827d2:	f001 fa8d 	bl	8083cf0 <CODEC_IO_Write>
 80827d6:	4603      	mov	r3, r0
 80827d8:	461a      	mov	r2, r3
 80827da:	69fb      	ldr	r3, [r7, #28]
 80827dc:	4413      	add	r3, r2
 80827de:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80827e0:	8afb      	ldrh	r3, [r7, #22]
 80827e2:	2b00      	cmp	r3, #0
 80827e4:	d00c      	beq.n	8082800 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80827e6:	89fb      	ldrh	r3, [r7, #14]
 80827e8:	b2db      	uxtb	r3, r3
 80827ea:	2213      	movs	r2, #19
 80827ec:	2101      	movs	r1, #1
 80827ee:	4618      	mov	r0, r3
 80827f0:	f001 fa7e 	bl	8083cf0 <CODEC_IO_Write>
 80827f4:	4603      	mov	r3, r0
 80827f6:	461a      	mov	r2, r3
 80827f8:	69fb      	ldr	r3, [r7, #28]
 80827fa:	4413      	add	r3, r2
 80827fc:	61fb      	str	r3, [r7, #28]
 80827fe:	e00b      	b.n	8082818 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8082800:	89fb      	ldrh	r3, [r7, #14]
 8082802:	b2db      	uxtb	r3, r3
 8082804:	2203      	movs	r2, #3
 8082806:	2101      	movs	r1, #1
 8082808:	4618      	mov	r0, r3
 808280a:	f001 fa71 	bl	8083cf0 <CODEC_IO_Write>
 808280e:	4603      	mov	r3, r0
 8082810:	461a      	mov	r2, r3
 8082812:	69fb      	ldr	r3, [r7, #28]
 8082814:	4413      	add	r3, r2
 8082816:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8082818:	2032      	movs	r0, #50	; 0x32
 808281a:	f001 fdcf 	bl	80843bc <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 808281e:	8b3b      	ldrh	r3, [r7, #24]
 8082820:	2b00      	cmp	r3, #0
 8082822:	f000 815b 	beq.w	8082adc <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8082826:	4bbc      	ldr	r3, [pc, #752]	; (8082b18 <wm8994_Init+0x3cc>)
 8082828:	2201      	movs	r2, #1
 808282a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 808282c:	8b3b      	ldrh	r3, [r7, #24]
 808282e:	2b02      	cmp	r3, #2
 8082830:	d047      	beq.n	80828c2 <wm8994_Init+0x176>
 8082832:	2b03      	cmp	r3, #3
 8082834:	f000 8087 	beq.w	8082946 <wm8994_Init+0x1fa>
 8082838:	2b01      	cmp	r3, #1
 808283a:	f040 810c 	bne.w	8082a56 <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 808283e:	89fb      	ldrh	r3, [r7, #14]
 8082840:	b2db      	uxtb	r3, r3
 8082842:	f640 420c 	movw	r2, #3084	; 0xc0c
 8082846:	2105      	movs	r1, #5
 8082848:	4618      	mov	r0, r3
 808284a:	f001 fa51 	bl	8083cf0 <CODEC_IO_Write>
 808284e:	4603      	mov	r3, r0
 8082850:	461a      	mov	r2, r3
 8082852:	69fb      	ldr	r3, [r7, #28]
 8082854:	4413      	add	r3, r2
 8082856:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8082858:	89fb      	ldrh	r3, [r7, #14]
 808285a:	b2db      	uxtb	r3, r3
 808285c:	2200      	movs	r2, #0
 808285e:	f240 6101 	movw	r1, #1537	; 0x601
 8082862:	4618      	mov	r0, r3
 8082864:	f001 fa44 	bl	8083cf0 <CODEC_IO_Write>
 8082868:	4603      	mov	r3, r0
 808286a:	461a      	mov	r2, r3
 808286c:	69fb      	ldr	r3, [r7, #28]
 808286e:	4413      	add	r3, r2
 8082870:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8082872:	89fb      	ldrh	r3, [r7, #14]
 8082874:	b2db      	uxtb	r3, r3
 8082876:	2200      	movs	r2, #0
 8082878:	f240 6102 	movw	r1, #1538	; 0x602
 808287c:	4618      	mov	r0, r3
 808287e:	f001 fa37 	bl	8083cf0 <CODEC_IO_Write>
 8082882:	4603      	mov	r3, r0
 8082884:	461a      	mov	r2, r3
 8082886:	69fb      	ldr	r3, [r7, #28]
 8082888:	4413      	add	r3, r2
 808288a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 808288c:	89fb      	ldrh	r3, [r7, #14]
 808288e:	b2db      	uxtb	r3, r3
 8082890:	2202      	movs	r2, #2
 8082892:	f240 6104 	movw	r1, #1540	; 0x604
 8082896:	4618      	mov	r0, r3
 8082898:	f001 fa2a 	bl	8083cf0 <CODEC_IO_Write>
 808289c:	4603      	mov	r3, r0
 808289e:	461a      	mov	r2, r3
 80828a0:	69fb      	ldr	r3, [r7, #28]
 80828a2:	4413      	add	r3, r2
 80828a4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80828a6:	89fb      	ldrh	r3, [r7, #14]
 80828a8:	b2db      	uxtb	r3, r3
 80828aa:	2202      	movs	r2, #2
 80828ac:	f240 6105 	movw	r1, #1541	; 0x605
 80828b0:	4618      	mov	r0, r3
 80828b2:	f001 fa1d 	bl	8083cf0 <CODEC_IO_Write>
 80828b6:	4603      	mov	r3, r0
 80828b8:	461a      	mov	r2, r3
 80828ba:	69fb      	ldr	r3, [r7, #28]
 80828bc:	4413      	add	r3, r2
 80828be:	61fb      	str	r3, [r7, #28]
      break;
 80828c0:	e10f      	b.n	8082ae2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80828c2:	89fb      	ldrh	r3, [r7, #14]
 80828c4:	b2db      	uxtb	r3, r3
 80828c6:	f240 3203 	movw	r2, #771	; 0x303
 80828ca:	2105      	movs	r1, #5
 80828cc:	4618      	mov	r0, r3
 80828ce:	f001 fa0f 	bl	8083cf0 <CODEC_IO_Write>
 80828d2:	4603      	mov	r3, r0
 80828d4:	461a      	mov	r2, r3
 80828d6:	69fb      	ldr	r3, [r7, #28]
 80828d8:	4413      	add	r3, r2
 80828da:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80828dc:	89fb      	ldrh	r3, [r7, #14]
 80828de:	b2db      	uxtb	r3, r3
 80828e0:	2201      	movs	r2, #1
 80828e2:	f240 6101 	movw	r1, #1537	; 0x601
 80828e6:	4618      	mov	r0, r3
 80828e8:	f001 fa02 	bl	8083cf0 <CODEC_IO_Write>
 80828ec:	4603      	mov	r3, r0
 80828ee:	461a      	mov	r2, r3
 80828f0:	69fb      	ldr	r3, [r7, #28]
 80828f2:	4413      	add	r3, r2
 80828f4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80828f6:	89fb      	ldrh	r3, [r7, #14]
 80828f8:	b2db      	uxtb	r3, r3
 80828fa:	2201      	movs	r2, #1
 80828fc:	f240 6102 	movw	r1, #1538	; 0x602
 8082900:	4618      	mov	r0, r3
 8082902:	f001 f9f5 	bl	8083cf0 <CODEC_IO_Write>
 8082906:	4603      	mov	r3, r0
 8082908:	461a      	mov	r2, r3
 808290a:	69fb      	ldr	r3, [r7, #28]
 808290c:	4413      	add	r3, r2
 808290e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8082910:	89fb      	ldrh	r3, [r7, #14]
 8082912:	b2db      	uxtb	r3, r3
 8082914:	2200      	movs	r2, #0
 8082916:	f240 6104 	movw	r1, #1540	; 0x604
 808291a:	4618      	mov	r0, r3
 808291c:	f001 f9e8 	bl	8083cf0 <CODEC_IO_Write>
 8082920:	4603      	mov	r3, r0
 8082922:	461a      	mov	r2, r3
 8082924:	69fb      	ldr	r3, [r7, #28]
 8082926:	4413      	add	r3, r2
 8082928:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 808292a:	89fb      	ldrh	r3, [r7, #14]
 808292c:	b2db      	uxtb	r3, r3
 808292e:	2200      	movs	r2, #0
 8082930:	f240 6105 	movw	r1, #1541	; 0x605
 8082934:	4618      	mov	r0, r3
 8082936:	f001 f9db 	bl	8083cf0 <CODEC_IO_Write>
 808293a:	4603      	mov	r3, r0
 808293c:	461a      	mov	r2, r3
 808293e:	69fb      	ldr	r3, [r7, #28]
 8082940:	4413      	add	r3, r2
 8082942:	61fb      	str	r3, [r7, #28]
      break;
 8082944:	e0cd      	b.n	8082ae2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8082946:	8afb      	ldrh	r3, [r7, #22]
 8082948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808294c:	d141      	bne.n	80829d2 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 808294e:	89fb      	ldrh	r3, [r7, #14]
 8082950:	b2db      	uxtb	r3, r3
 8082952:	f640 720f 	movw	r2, #3855	; 0xf0f
 8082956:	2105      	movs	r1, #5
 8082958:	4618      	mov	r0, r3
 808295a:	f001 f9c9 	bl	8083cf0 <CODEC_IO_Write>
 808295e:	4603      	mov	r3, r0
 8082960:	461a      	mov	r2, r3
 8082962:	69fb      	ldr	r3, [r7, #28]
 8082964:	4413      	add	r3, r2
 8082966:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8082968:	89fb      	ldrh	r3, [r7, #14]
 808296a:	b2db      	uxtb	r3, r3
 808296c:	2203      	movs	r2, #3
 808296e:	f240 6101 	movw	r1, #1537	; 0x601
 8082972:	4618      	mov	r0, r3
 8082974:	f001 f9bc 	bl	8083cf0 <CODEC_IO_Write>
 8082978:	4603      	mov	r3, r0
 808297a:	461a      	mov	r2, r3
 808297c:	69fb      	ldr	r3, [r7, #28]
 808297e:	4413      	add	r3, r2
 8082980:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8082982:	89fb      	ldrh	r3, [r7, #14]
 8082984:	b2db      	uxtb	r3, r3
 8082986:	2203      	movs	r2, #3
 8082988:	f240 6102 	movw	r1, #1538	; 0x602
 808298c:	4618      	mov	r0, r3
 808298e:	f001 f9af 	bl	8083cf0 <CODEC_IO_Write>
 8082992:	4603      	mov	r3, r0
 8082994:	461a      	mov	r2, r3
 8082996:	69fb      	ldr	r3, [r7, #28]
 8082998:	4413      	add	r3, r2
 808299a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 808299c:	89fb      	ldrh	r3, [r7, #14]
 808299e:	b2db      	uxtb	r3, r3
 80829a0:	2203      	movs	r2, #3
 80829a2:	f240 6104 	movw	r1, #1540	; 0x604
 80829a6:	4618      	mov	r0, r3
 80829a8:	f001 f9a2 	bl	8083cf0 <CODEC_IO_Write>
 80829ac:	4603      	mov	r3, r0
 80829ae:	461a      	mov	r2, r3
 80829b0:	69fb      	ldr	r3, [r7, #28]
 80829b2:	4413      	add	r3, r2
 80829b4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80829b6:	89fb      	ldrh	r3, [r7, #14]
 80829b8:	b2db      	uxtb	r3, r3
 80829ba:	2203      	movs	r2, #3
 80829bc:	f240 6105 	movw	r1, #1541	; 0x605
 80829c0:	4618      	mov	r0, r3
 80829c2:	f001 f995 	bl	8083cf0 <CODEC_IO_Write>
 80829c6:	4603      	mov	r3, r0
 80829c8:	461a      	mov	r2, r3
 80829ca:	69fb      	ldr	r3, [r7, #28]
 80829cc:	4413      	add	r3, r2
 80829ce:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80829d0:	e087      	b.n	8082ae2 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80829d2:	89fb      	ldrh	r3, [r7, #14]
 80829d4:	b2db      	uxtb	r3, r3
 80829d6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80829da:	2105      	movs	r1, #5
 80829dc:	4618      	mov	r0, r3
 80829de:	f001 f987 	bl	8083cf0 <CODEC_IO_Write>
 80829e2:	4603      	mov	r3, r0
 80829e4:	461a      	mov	r2, r3
 80829e6:	69fb      	ldr	r3, [r7, #28]
 80829e8:	4413      	add	r3, r2
 80829ea:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80829ec:	89fb      	ldrh	r3, [r7, #14]
 80829ee:	b2db      	uxtb	r3, r3
 80829f0:	2201      	movs	r2, #1
 80829f2:	f240 6101 	movw	r1, #1537	; 0x601
 80829f6:	4618      	mov	r0, r3
 80829f8:	f001 f97a 	bl	8083cf0 <CODEC_IO_Write>
 80829fc:	4603      	mov	r3, r0
 80829fe:	461a      	mov	r2, r3
 8082a00:	69fb      	ldr	r3, [r7, #28]
 8082a02:	4413      	add	r3, r2
 8082a04:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8082a06:	89fb      	ldrh	r3, [r7, #14]
 8082a08:	b2db      	uxtb	r3, r3
 8082a0a:	2201      	movs	r2, #1
 8082a0c:	f240 6102 	movw	r1, #1538	; 0x602
 8082a10:	4618      	mov	r0, r3
 8082a12:	f001 f96d 	bl	8083cf0 <CODEC_IO_Write>
 8082a16:	4603      	mov	r3, r0
 8082a18:	461a      	mov	r2, r3
 8082a1a:	69fb      	ldr	r3, [r7, #28]
 8082a1c:	4413      	add	r3, r2
 8082a1e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8082a20:	89fb      	ldrh	r3, [r7, #14]
 8082a22:	b2db      	uxtb	r3, r3
 8082a24:	2202      	movs	r2, #2
 8082a26:	f240 6104 	movw	r1, #1540	; 0x604
 8082a2a:	4618      	mov	r0, r3
 8082a2c:	f001 f960 	bl	8083cf0 <CODEC_IO_Write>
 8082a30:	4603      	mov	r3, r0
 8082a32:	461a      	mov	r2, r3
 8082a34:	69fb      	ldr	r3, [r7, #28]
 8082a36:	4413      	add	r3, r2
 8082a38:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8082a3a:	89fb      	ldrh	r3, [r7, #14]
 8082a3c:	b2db      	uxtb	r3, r3
 8082a3e:	2202      	movs	r2, #2
 8082a40:	f240 6105 	movw	r1, #1541	; 0x605
 8082a44:	4618      	mov	r0, r3
 8082a46:	f001 f953 	bl	8083cf0 <CODEC_IO_Write>
 8082a4a:	4603      	mov	r3, r0
 8082a4c:	461a      	mov	r2, r3
 8082a4e:	69fb      	ldr	r3, [r7, #28]
 8082a50:	4413      	add	r3, r2
 8082a52:	61fb      	str	r3, [r7, #28]
      break;
 8082a54:	e045      	b.n	8082ae2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8082a56:	89fb      	ldrh	r3, [r7, #14]
 8082a58:	b2db      	uxtb	r3, r3
 8082a5a:	f240 3203 	movw	r2, #771	; 0x303
 8082a5e:	2105      	movs	r1, #5
 8082a60:	4618      	mov	r0, r3
 8082a62:	f001 f945 	bl	8083cf0 <CODEC_IO_Write>
 8082a66:	4603      	mov	r3, r0
 8082a68:	461a      	mov	r2, r3
 8082a6a:	69fb      	ldr	r3, [r7, #28]
 8082a6c:	4413      	add	r3, r2
 8082a6e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8082a70:	89fb      	ldrh	r3, [r7, #14]
 8082a72:	b2db      	uxtb	r3, r3
 8082a74:	2201      	movs	r2, #1
 8082a76:	f240 6101 	movw	r1, #1537	; 0x601
 8082a7a:	4618      	mov	r0, r3
 8082a7c:	f001 f938 	bl	8083cf0 <CODEC_IO_Write>
 8082a80:	4603      	mov	r3, r0
 8082a82:	461a      	mov	r2, r3
 8082a84:	69fb      	ldr	r3, [r7, #28]
 8082a86:	4413      	add	r3, r2
 8082a88:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8082a8a:	89fb      	ldrh	r3, [r7, #14]
 8082a8c:	b2db      	uxtb	r3, r3
 8082a8e:	2201      	movs	r2, #1
 8082a90:	f240 6102 	movw	r1, #1538	; 0x602
 8082a94:	4618      	mov	r0, r3
 8082a96:	f001 f92b 	bl	8083cf0 <CODEC_IO_Write>
 8082a9a:	4603      	mov	r3, r0
 8082a9c:	461a      	mov	r2, r3
 8082a9e:	69fb      	ldr	r3, [r7, #28]
 8082aa0:	4413      	add	r3, r2
 8082aa2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8082aa4:	89fb      	ldrh	r3, [r7, #14]
 8082aa6:	b2db      	uxtb	r3, r3
 8082aa8:	2200      	movs	r2, #0
 8082aaa:	f240 6104 	movw	r1, #1540	; 0x604
 8082aae:	4618      	mov	r0, r3
 8082ab0:	f001 f91e 	bl	8083cf0 <CODEC_IO_Write>
 8082ab4:	4603      	mov	r3, r0
 8082ab6:	461a      	mov	r2, r3
 8082ab8:	69fb      	ldr	r3, [r7, #28]
 8082aba:	4413      	add	r3, r2
 8082abc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8082abe:	89fb      	ldrh	r3, [r7, #14]
 8082ac0:	b2db      	uxtb	r3, r3
 8082ac2:	2200      	movs	r2, #0
 8082ac4:	f240 6105 	movw	r1, #1541	; 0x605
 8082ac8:	4618      	mov	r0, r3
 8082aca:	f001 f911 	bl	8083cf0 <CODEC_IO_Write>
 8082ace:	4603      	mov	r3, r0
 8082ad0:	461a      	mov	r2, r3
 8082ad2:	69fb      	ldr	r3, [r7, #28]
 8082ad4:	4413      	add	r3, r2
 8082ad6:	61fb      	str	r3, [r7, #28]
      break;
 8082ad8:	bf00      	nop
 8082ada:	e002      	b.n	8082ae2 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8082adc:	4b0e      	ldr	r3, [pc, #56]	; (8082b18 <wm8994_Init+0x3cc>)
 8082ade:	2200      	movs	r2, #0
 8082ae0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8082ae2:	8afb      	ldrh	r3, [r7, #22]
 8082ae4:	2b00      	cmp	r3, #0
 8082ae6:	f000 81a7 	beq.w	8082e38 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8082aea:	4b0c      	ldr	r3, [pc, #48]	; (8082b1c <wm8994_Init+0x3d0>)
 8082aec:	2201      	movs	r2, #1
 8082aee:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8082af0:	8afb      	ldrh	r3, [r7, #22]
 8082af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082af6:	d013      	beq.n	8082b20 <wm8994_Init+0x3d4>
 8082af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082afc:	dc04      	bgt.n	8082b08 <wm8994_Init+0x3bc>
 8082afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8082b02:	f000 80cf 	beq.w	8082ca4 <wm8994_Init+0x558>
 8082b06:	e192      	b.n	8082e2e <wm8994_Init+0x6e2>
 8082b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8082b0c:	d057      	beq.n	8082bbe <wm8994_Init+0x472>
 8082b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8082b12:	f000 8116 	beq.w	8082d42 <wm8994_Init+0x5f6>
 8082b16:	e18a      	b.n	8082e2e <wm8994_Init+0x6e2>
 8082b18:	2000b584 	.word	0x2000b584
 8082b1c:	2000b588 	.word	0x2000b588
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8082b20:	89fb      	ldrh	r3, [r7, #14]
 8082b22:	b2db      	uxtb	r3, r3
 8082b24:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8082b28:	2104      	movs	r1, #4
 8082b2a:	4618      	mov	r0, r3
 8082b2c:	f001 f8e0 	bl	8083cf0 <CODEC_IO_Write>
 8082b30:	4603      	mov	r3, r0
 8082b32:	461a      	mov	r2, r3
 8082b34:	69fb      	ldr	r3, [r7, #28]
 8082b36:	4413      	add	r3, r2
 8082b38:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8082b3a:	89fb      	ldrh	r3, [r7, #14]
 8082b3c:	b2db      	uxtb	r3, r3
 8082b3e:	22db      	movs	r2, #219	; 0xdb
 8082b40:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8082b44:	4618      	mov	r0, r3
 8082b46:	f001 f8d3 	bl	8083cf0 <CODEC_IO_Write>
 8082b4a:	4603      	mov	r3, r0
 8082b4c:	461a      	mov	r2, r3
 8082b4e:	69fb      	ldr	r3, [r7, #28]
 8082b50:	4413      	add	r3, r2
 8082b52:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8082b54:	89fb      	ldrh	r3, [r7, #14]
 8082b56:	b2db      	uxtb	r3, r3
 8082b58:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8082b5c:	2102      	movs	r1, #2
 8082b5e:	4618      	mov	r0, r3
 8082b60:	f001 f8c6 	bl	8083cf0 <CODEC_IO_Write>
 8082b64:	4603      	mov	r3, r0
 8082b66:	461a      	mov	r2, r3
 8082b68:	69fb      	ldr	r3, [r7, #28]
 8082b6a:	4413      	add	r3, r2
 8082b6c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8082b6e:	89fb      	ldrh	r3, [r7, #14]
 8082b70:	b2db      	uxtb	r3, r3
 8082b72:	2202      	movs	r2, #2
 8082b74:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8082b78:	4618      	mov	r0, r3
 8082b7a:	f001 f8b9 	bl	8083cf0 <CODEC_IO_Write>
 8082b7e:	4603      	mov	r3, r0
 8082b80:	461a      	mov	r2, r3
 8082b82:	69fb      	ldr	r3, [r7, #28]
 8082b84:	4413      	add	r3, r2
 8082b86:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8082b88:	89fb      	ldrh	r3, [r7, #14]
 8082b8a:	b2db      	uxtb	r3, r3
 8082b8c:	2202      	movs	r2, #2
 8082b8e:	f240 6109 	movw	r1, #1545	; 0x609
 8082b92:	4618      	mov	r0, r3
 8082b94:	f001 f8ac 	bl	8083cf0 <CODEC_IO_Write>
 8082b98:	4603      	mov	r3, r0
 8082b9a:	461a      	mov	r2, r3
 8082b9c:	69fb      	ldr	r3, [r7, #28]
 8082b9e:	4413      	add	r3, r2
 8082ba0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8082ba2:	89fb      	ldrh	r3, [r7, #14]
 8082ba4:	b2db      	uxtb	r3, r3
 8082ba6:	220e      	movs	r2, #14
 8082ba8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8082bac:	4618      	mov	r0, r3
 8082bae:	f001 f89f 	bl	8083cf0 <CODEC_IO_Write>
 8082bb2:	4603      	mov	r3, r0
 8082bb4:	461a      	mov	r2, r3
 8082bb6:	69fb      	ldr	r3, [r7, #28]
 8082bb8:	4413      	add	r3, r2
 8082bba:	61fb      	str	r3, [r7, #28]
      break;
 8082bbc:	e13f      	b.n	8082e3e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8082bbe:	89fb      	ldrh	r3, [r7, #14]
 8082bc0:	b2db      	uxtb	r3, r3
 8082bc2:	2211      	movs	r2, #17
 8082bc4:	2128      	movs	r1, #40	; 0x28
 8082bc6:	4618      	mov	r0, r3
 8082bc8:	f001 f892 	bl	8083cf0 <CODEC_IO_Write>
 8082bcc:	4603      	mov	r3, r0
 8082bce:	461a      	mov	r2, r3
 8082bd0:	69fb      	ldr	r3, [r7, #28]
 8082bd2:	4413      	add	r3, r2
 8082bd4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8082bd6:	89fb      	ldrh	r3, [r7, #14]
 8082bd8:	b2db      	uxtb	r3, r3
 8082bda:	2235      	movs	r2, #53	; 0x35
 8082bdc:	2129      	movs	r1, #41	; 0x29
 8082bde:	4618      	mov	r0, r3
 8082be0:	f001 f886 	bl	8083cf0 <CODEC_IO_Write>
 8082be4:	4603      	mov	r3, r0
 8082be6:	461a      	mov	r2, r3
 8082be8:	69fb      	ldr	r3, [r7, #28]
 8082bea:	4413      	add	r3, r2
 8082bec:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8082bee:	89fb      	ldrh	r3, [r7, #14]
 8082bf0:	b2db      	uxtb	r3, r3
 8082bf2:	2235      	movs	r2, #53	; 0x35
 8082bf4:	212a      	movs	r1, #42	; 0x2a
 8082bf6:	4618      	mov	r0, r3
 8082bf8:	f001 f87a 	bl	8083cf0 <CODEC_IO_Write>
 8082bfc:	4603      	mov	r3, r0
 8082bfe:	461a      	mov	r2, r3
 8082c00:	69fb      	ldr	r3, [r7, #28]
 8082c02:	4413      	add	r3, r2
 8082c04:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8082c06:	89fb      	ldrh	r3, [r7, #14]
 8082c08:	b2db      	uxtb	r3, r3
 8082c0a:	f240 3203 	movw	r2, #771	; 0x303
 8082c0e:	2104      	movs	r1, #4
 8082c10:	4618      	mov	r0, r3
 8082c12:	f001 f86d 	bl	8083cf0 <CODEC_IO_Write>
 8082c16:	4603      	mov	r3, r0
 8082c18:	461a      	mov	r2, r3
 8082c1a:	69fb      	ldr	r3, [r7, #28]
 8082c1c:	4413      	add	r3, r2
 8082c1e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8082c20:	89fb      	ldrh	r3, [r7, #14]
 8082c22:	b2db      	uxtb	r3, r3
 8082c24:	22db      	movs	r2, #219	; 0xdb
 8082c26:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8082c2a:	4618      	mov	r0, r3
 8082c2c:	f001 f860 	bl	8083cf0 <CODEC_IO_Write>
 8082c30:	4603      	mov	r3, r0
 8082c32:	461a      	mov	r2, r3
 8082c34:	69fb      	ldr	r3, [r7, #28]
 8082c36:	4413      	add	r3, r2
 8082c38:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8082c3a:	89fb      	ldrh	r3, [r7, #14]
 8082c3c:	b2db      	uxtb	r3, r3
 8082c3e:	f246 3250 	movw	r2, #25424	; 0x6350
 8082c42:	2102      	movs	r1, #2
 8082c44:	4618      	mov	r0, r3
 8082c46:	f001 f853 	bl	8083cf0 <CODEC_IO_Write>
 8082c4a:	4603      	mov	r3, r0
 8082c4c:	461a      	mov	r2, r3
 8082c4e:	69fb      	ldr	r3, [r7, #28]
 8082c50:	4413      	add	r3, r2
 8082c52:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8082c54:	89fb      	ldrh	r3, [r7, #14]
 8082c56:	b2db      	uxtb	r3, r3
 8082c58:	2202      	movs	r2, #2
 8082c5a:	f240 6106 	movw	r1, #1542	; 0x606
 8082c5e:	4618      	mov	r0, r3
 8082c60:	f001 f846 	bl	8083cf0 <CODEC_IO_Write>
 8082c64:	4603      	mov	r3, r0
 8082c66:	461a      	mov	r2, r3
 8082c68:	69fb      	ldr	r3, [r7, #28]
 8082c6a:	4413      	add	r3, r2
 8082c6c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8082c6e:	89fb      	ldrh	r3, [r7, #14]
 8082c70:	b2db      	uxtb	r3, r3
 8082c72:	2202      	movs	r2, #2
 8082c74:	f240 6107 	movw	r1, #1543	; 0x607
 8082c78:	4618      	mov	r0, r3
 8082c7a:	f001 f839 	bl	8083cf0 <CODEC_IO_Write>
 8082c7e:	4603      	mov	r3, r0
 8082c80:	461a      	mov	r2, r3
 8082c82:	69fb      	ldr	r3, [r7, #28]
 8082c84:	4413      	add	r3, r2
 8082c86:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8082c88:	89fb      	ldrh	r3, [r7, #14]
 8082c8a:	b2db      	uxtb	r3, r3
 8082c8c:	220d      	movs	r2, #13
 8082c8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8082c92:	4618      	mov	r0, r3
 8082c94:	f001 f82c 	bl	8083cf0 <CODEC_IO_Write>
 8082c98:	4603      	mov	r3, r0
 8082c9a:	461a      	mov	r2, r3
 8082c9c:	69fb      	ldr	r3, [r7, #28]
 8082c9e:	4413      	add	r3, r2
 8082ca0:	61fb      	str	r3, [r7, #28]
      break;
 8082ca2:	e0cc      	b.n	8082e3e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8082ca4:	89fb      	ldrh	r3, [r7, #14]
 8082ca6:	b2db      	uxtb	r3, r3
 8082ca8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8082cac:	2104      	movs	r1, #4
 8082cae:	4618      	mov	r0, r3
 8082cb0:	f001 f81e 	bl	8083cf0 <CODEC_IO_Write>
 8082cb4:	4603      	mov	r3, r0
 8082cb6:	461a      	mov	r2, r3
 8082cb8:	69fb      	ldr	r3, [r7, #28]
 8082cba:	4413      	add	r3, r2
 8082cbc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8082cbe:	89fb      	ldrh	r3, [r7, #14]
 8082cc0:	b2db      	uxtb	r3, r3
 8082cc2:	22db      	movs	r2, #219	; 0xdb
 8082cc4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8082cc8:	4618      	mov	r0, r3
 8082cca:	f001 f811 	bl	8083cf0 <CODEC_IO_Write>
 8082cce:	4603      	mov	r3, r0
 8082cd0:	461a      	mov	r2, r3
 8082cd2:	69fb      	ldr	r3, [r7, #28]
 8082cd4:	4413      	add	r3, r2
 8082cd6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8082cd8:	89fb      	ldrh	r3, [r7, #14]
 8082cda:	b2db      	uxtb	r3, r3
 8082cdc:	f246 3250 	movw	r2, #25424	; 0x6350
 8082ce0:	2102      	movs	r1, #2
 8082ce2:	4618      	mov	r0, r3
 8082ce4:	f001 f804 	bl	8083cf0 <CODEC_IO_Write>
 8082ce8:	4603      	mov	r3, r0
 8082cea:	461a      	mov	r2, r3
 8082cec:	69fb      	ldr	r3, [r7, #28]
 8082cee:	4413      	add	r3, r2
 8082cf0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8082cf2:	89fb      	ldrh	r3, [r7, #14]
 8082cf4:	b2db      	uxtb	r3, r3
 8082cf6:	2202      	movs	r2, #2
 8082cf8:	f240 6106 	movw	r1, #1542	; 0x606
 8082cfc:	4618      	mov	r0, r3
 8082cfe:	f000 fff7 	bl	8083cf0 <CODEC_IO_Write>
 8082d02:	4603      	mov	r3, r0
 8082d04:	461a      	mov	r2, r3
 8082d06:	69fb      	ldr	r3, [r7, #28]
 8082d08:	4413      	add	r3, r2
 8082d0a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8082d0c:	89fb      	ldrh	r3, [r7, #14]
 8082d0e:	b2db      	uxtb	r3, r3
 8082d10:	2202      	movs	r2, #2
 8082d12:	f240 6107 	movw	r1, #1543	; 0x607
 8082d16:	4618      	mov	r0, r3
 8082d18:	f000 ffea 	bl	8083cf0 <CODEC_IO_Write>
 8082d1c:	4603      	mov	r3, r0
 8082d1e:	461a      	mov	r2, r3
 8082d20:	69fb      	ldr	r3, [r7, #28]
 8082d22:	4413      	add	r3, r2
 8082d24:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8082d26:	89fb      	ldrh	r3, [r7, #14]
 8082d28:	b2db      	uxtb	r3, r3
 8082d2a:	220d      	movs	r2, #13
 8082d2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8082d30:	4618      	mov	r0, r3
 8082d32:	f000 ffdd 	bl	8083cf0 <CODEC_IO_Write>
 8082d36:	4603      	mov	r3, r0
 8082d38:	461a      	mov	r2, r3
 8082d3a:	69fb      	ldr	r3, [r7, #28]
 8082d3c:	4413      	add	r3, r2
 8082d3e:	61fb      	str	r3, [r7, #28]
      break; 
 8082d40:	e07d      	b.n	8082e3e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8082d42:	89fb      	ldrh	r3, [r7, #14]
 8082d44:	b2db      	uxtb	r3, r3
 8082d46:	f640 723c 	movw	r2, #3900	; 0xf3c
 8082d4a:	2104      	movs	r1, #4
 8082d4c:	4618      	mov	r0, r3
 8082d4e:	f000 ffcf 	bl	8083cf0 <CODEC_IO_Write>
 8082d52:	4603      	mov	r3, r0
 8082d54:	461a      	mov	r2, r3
 8082d56:	69fb      	ldr	r3, [r7, #28]
 8082d58:	4413      	add	r3, r2
 8082d5a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8082d5c:	89fb      	ldrh	r3, [r7, #14]
 8082d5e:	b2db      	uxtb	r3, r3
 8082d60:	22db      	movs	r2, #219	; 0xdb
 8082d62:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8082d66:	4618      	mov	r0, r3
 8082d68:	f000 ffc2 	bl	8083cf0 <CODEC_IO_Write>
 8082d6c:	4603      	mov	r3, r0
 8082d6e:	461a      	mov	r2, r3
 8082d70:	69fb      	ldr	r3, [r7, #28]
 8082d72:	4413      	add	r3, r2
 8082d74:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8082d76:	89fb      	ldrh	r3, [r7, #14]
 8082d78:	b2db      	uxtb	r3, r3
 8082d7a:	22db      	movs	r2, #219	; 0xdb
 8082d7c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8082d80:	4618      	mov	r0, r3
 8082d82:	f000 ffb5 	bl	8083cf0 <CODEC_IO_Write>
 8082d86:	4603      	mov	r3, r0
 8082d88:	461a      	mov	r2, r3
 8082d8a:	69fb      	ldr	r3, [r7, #28]
 8082d8c:	4413      	add	r3, r2
 8082d8e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8082d90:	89fb      	ldrh	r3, [r7, #14]
 8082d92:	b2db      	uxtb	r3, r3
 8082d94:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8082d98:	2102      	movs	r1, #2
 8082d9a:	4618      	mov	r0, r3
 8082d9c:	f000 ffa8 	bl	8083cf0 <CODEC_IO_Write>
 8082da0:	4603      	mov	r3, r0
 8082da2:	461a      	mov	r2, r3
 8082da4:	69fb      	ldr	r3, [r7, #28]
 8082da6:	4413      	add	r3, r2
 8082da8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8082daa:	89fb      	ldrh	r3, [r7, #14]
 8082dac:	b2db      	uxtb	r3, r3
 8082dae:	2202      	movs	r2, #2
 8082db0:	f240 6106 	movw	r1, #1542	; 0x606
 8082db4:	4618      	mov	r0, r3
 8082db6:	f000 ff9b 	bl	8083cf0 <CODEC_IO_Write>
 8082dba:	4603      	mov	r3, r0
 8082dbc:	461a      	mov	r2, r3
 8082dbe:	69fb      	ldr	r3, [r7, #28]
 8082dc0:	4413      	add	r3, r2
 8082dc2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8082dc4:	89fb      	ldrh	r3, [r7, #14]
 8082dc6:	b2db      	uxtb	r3, r3
 8082dc8:	2202      	movs	r2, #2
 8082dca:	f240 6107 	movw	r1, #1543	; 0x607
 8082dce:	4618      	mov	r0, r3
 8082dd0:	f000 ff8e 	bl	8083cf0 <CODEC_IO_Write>
 8082dd4:	4603      	mov	r3, r0
 8082dd6:	461a      	mov	r2, r3
 8082dd8:	69fb      	ldr	r3, [r7, #28]
 8082dda:	4413      	add	r3, r2
 8082ddc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8082dde:	89fb      	ldrh	r3, [r7, #14]
 8082de0:	b2db      	uxtb	r3, r3
 8082de2:	2202      	movs	r2, #2
 8082de4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8082de8:	4618      	mov	r0, r3
 8082dea:	f000 ff81 	bl	8083cf0 <CODEC_IO_Write>
 8082dee:	4603      	mov	r3, r0
 8082df0:	461a      	mov	r2, r3
 8082df2:	69fb      	ldr	r3, [r7, #28]
 8082df4:	4413      	add	r3, r2
 8082df6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8082df8:	89fb      	ldrh	r3, [r7, #14]
 8082dfa:	b2db      	uxtb	r3, r3
 8082dfc:	2202      	movs	r2, #2
 8082dfe:	f240 6109 	movw	r1, #1545	; 0x609
 8082e02:	4618      	mov	r0, r3
 8082e04:	f000 ff74 	bl	8083cf0 <CODEC_IO_Write>
 8082e08:	4603      	mov	r3, r0
 8082e0a:	461a      	mov	r2, r3
 8082e0c:	69fb      	ldr	r3, [r7, #28]
 8082e0e:	4413      	add	r3, r2
 8082e10:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8082e12:	89fb      	ldrh	r3, [r7, #14]
 8082e14:	b2db      	uxtb	r3, r3
 8082e16:	220d      	movs	r2, #13
 8082e18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8082e1c:	4618      	mov	r0, r3
 8082e1e:	f000 ff67 	bl	8083cf0 <CODEC_IO_Write>
 8082e22:	4603      	mov	r3, r0
 8082e24:	461a      	mov	r2, r3
 8082e26:	69fb      	ldr	r3, [r7, #28]
 8082e28:	4413      	add	r3, r2
 8082e2a:	61fb      	str	r3, [r7, #28]
      break;    
 8082e2c:	e007      	b.n	8082e3e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8082e2e:	69fb      	ldr	r3, [r7, #28]
 8082e30:	3301      	adds	r3, #1
 8082e32:	61fb      	str	r3, [r7, #28]
      break;
 8082e34:	bf00      	nop
 8082e36:	e002      	b.n	8082e3e <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8082e38:	4b95      	ldr	r3, [pc, #596]	; (8083090 <wm8994_Init+0x944>)
 8082e3a:	2200      	movs	r2, #0
 8082e3c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8082e3e:	687b      	ldr	r3, [r7, #4]
 8082e40:	f245 6222 	movw	r2, #22050	; 0x5622
 8082e44:	4293      	cmp	r3, r2
 8082e46:	d076      	beq.n	8082f36 <wm8994_Init+0x7ea>
 8082e48:	f245 6222 	movw	r2, #22050	; 0x5622
 8082e4c:	4293      	cmp	r3, r2
 8082e4e:	d80a      	bhi.n	8082e66 <wm8994_Init+0x71a>
 8082e50:	f642 3211 	movw	r2, #11025	; 0x2b11
 8082e54:	4293      	cmp	r3, r2
 8082e56:	d060      	beq.n	8082f1a <wm8994_Init+0x7ce>
 8082e58:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8082e5c:	d025      	beq.n	8082eaa <wm8994_Init+0x75e>
 8082e5e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8082e62:	d014      	beq.n	8082e8e <wm8994_Init+0x742>
 8082e64:	e083      	b.n	8082f6e <wm8994_Init+0x822>
 8082e66:	f64a 4244 	movw	r2, #44100	; 0xac44
 8082e6a:	4293      	cmp	r3, r2
 8082e6c:	d071      	beq.n	8082f52 <wm8994_Init+0x806>
 8082e6e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8082e72:	4293      	cmp	r3, r2
 8082e74:	d803      	bhi.n	8082e7e <wm8994_Init+0x732>
 8082e76:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8082e7a:	d024      	beq.n	8082ec6 <wm8994_Init+0x77a>
 8082e7c:	e077      	b.n	8082f6e <wm8994_Init+0x822>
 8082e7e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8082e82:	4293      	cmp	r3, r2
 8082e84:	d02d      	beq.n	8082ee2 <wm8994_Init+0x796>
 8082e86:	4a83      	ldr	r2, [pc, #524]	; (8083094 <wm8994_Init+0x948>)
 8082e88:	4293      	cmp	r3, r2
 8082e8a:	d038      	beq.n	8082efe <wm8994_Init+0x7b2>
 8082e8c:	e06f      	b.n	8082f6e <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8082e8e:	89fb      	ldrh	r3, [r7, #14]
 8082e90:	b2db      	uxtb	r3, r3
 8082e92:	2203      	movs	r2, #3
 8082e94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082e98:	4618      	mov	r0, r3
 8082e9a:	f000 ff29 	bl	8083cf0 <CODEC_IO_Write>
 8082e9e:	4603      	mov	r3, r0
 8082ea0:	461a      	mov	r2, r3
 8082ea2:	69fb      	ldr	r3, [r7, #28]
 8082ea4:	4413      	add	r3, r2
 8082ea6:	61fb      	str	r3, [r7, #28]
    break;
 8082ea8:	e06f      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8082eaa:	89fb      	ldrh	r3, [r7, #14]
 8082eac:	b2db      	uxtb	r3, r3
 8082eae:	2233      	movs	r2, #51	; 0x33
 8082eb0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082eb4:	4618      	mov	r0, r3
 8082eb6:	f000 ff1b 	bl	8083cf0 <CODEC_IO_Write>
 8082eba:	4603      	mov	r3, r0
 8082ebc:	461a      	mov	r2, r3
 8082ebe:	69fb      	ldr	r3, [r7, #28]
 8082ec0:	4413      	add	r3, r2
 8082ec2:	61fb      	str	r3, [r7, #28]
    break;
 8082ec4:	e061      	b.n	8082f8a <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8082ec6:	89fb      	ldrh	r3, [r7, #14]
 8082ec8:	b2db      	uxtb	r3, r3
 8082eca:	2263      	movs	r2, #99	; 0x63
 8082ecc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082ed0:	4618      	mov	r0, r3
 8082ed2:	f000 ff0d 	bl	8083cf0 <CODEC_IO_Write>
 8082ed6:	4603      	mov	r3, r0
 8082ed8:	461a      	mov	r2, r3
 8082eda:	69fb      	ldr	r3, [r7, #28]
 8082edc:	4413      	add	r3, r2
 8082ede:	61fb      	str	r3, [r7, #28]
    break;
 8082ee0:	e053      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8082ee2:	89fb      	ldrh	r3, [r7, #14]
 8082ee4:	b2db      	uxtb	r3, r3
 8082ee6:	2283      	movs	r2, #131	; 0x83
 8082ee8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082eec:	4618      	mov	r0, r3
 8082eee:	f000 feff 	bl	8083cf0 <CODEC_IO_Write>
 8082ef2:	4603      	mov	r3, r0
 8082ef4:	461a      	mov	r2, r3
 8082ef6:	69fb      	ldr	r3, [r7, #28]
 8082ef8:	4413      	add	r3, r2
 8082efa:	61fb      	str	r3, [r7, #28]
    break;
 8082efc:	e045      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8082efe:	89fb      	ldrh	r3, [r7, #14]
 8082f00:	b2db      	uxtb	r3, r3
 8082f02:	22a3      	movs	r2, #163	; 0xa3
 8082f04:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082f08:	4618      	mov	r0, r3
 8082f0a:	f000 fef1 	bl	8083cf0 <CODEC_IO_Write>
 8082f0e:	4603      	mov	r3, r0
 8082f10:	461a      	mov	r2, r3
 8082f12:	69fb      	ldr	r3, [r7, #28]
 8082f14:	4413      	add	r3, r2
 8082f16:	61fb      	str	r3, [r7, #28]
    break;
 8082f18:	e037      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8082f1a:	89fb      	ldrh	r3, [r7, #14]
 8082f1c:	b2db      	uxtb	r3, r3
 8082f1e:	2213      	movs	r2, #19
 8082f20:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082f24:	4618      	mov	r0, r3
 8082f26:	f000 fee3 	bl	8083cf0 <CODEC_IO_Write>
 8082f2a:	4603      	mov	r3, r0
 8082f2c:	461a      	mov	r2, r3
 8082f2e:	69fb      	ldr	r3, [r7, #28]
 8082f30:	4413      	add	r3, r2
 8082f32:	61fb      	str	r3, [r7, #28]
    break;
 8082f34:	e029      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8082f36:	89fb      	ldrh	r3, [r7, #14]
 8082f38:	b2db      	uxtb	r3, r3
 8082f3a:	2243      	movs	r2, #67	; 0x43
 8082f3c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082f40:	4618      	mov	r0, r3
 8082f42:	f000 fed5 	bl	8083cf0 <CODEC_IO_Write>
 8082f46:	4603      	mov	r3, r0
 8082f48:	461a      	mov	r2, r3
 8082f4a:	69fb      	ldr	r3, [r7, #28]
 8082f4c:	4413      	add	r3, r2
 8082f4e:	61fb      	str	r3, [r7, #28]
    break;
 8082f50:	e01b      	b.n	8082f8a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8082f52:	89fb      	ldrh	r3, [r7, #14]
 8082f54:	b2db      	uxtb	r3, r3
 8082f56:	2273      	movs	r2, #115	; 0x73
 8082f58:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082f5c:	4618      	mov	r0, r3
 8082f5e:	f000 fec7 	bl	8083cf0 <CODEC_IO_Write>
 8082f62:	4603      	mov	r3, r0
 8082f64:	461a      	mov	r2, r3
 8082f66:	69fb      	ldr	r3, [r7, #28]
 8082f68:	4413      	add	r3, r2
 8082f6a:	61fb      	str	r3, [r7, #28]
    break; 
 8082f6c:	e00d      	b.n	8082f8a <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8082f6e:	89fb      	ldrh	r3, [r7, #14]
 8082f70:	b2db      	uxtb	r3, r3
 8082f72:	2283      	movs	r2, #131	; 0x83
 8082f74:	f44f 7104 	mov.w	r1, #528	; 0x210
 8082f78:	4618      	mov	r0, r3
 8082f7a:	f000 feb9 	bl	8083cf0 <CODEC_IO_Write>
 8082f7e:	4603      	mov	r3, r0
 8082f80:	461a      	mov	r2, r3
 8082f82:	69fb      	ldr	r3, [r7, #28]
 8082f84:	4413      	add	r3, r2
 8082f86:	61fb      	str	r3, [r7, #28]
    break; 
 8082f88:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8082f8a:	8afb      	ldrh	r3, [r7, #22]
 8082f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8082f90:	d10e      	bne.n	8082fb0 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8082f92:	89fb      	ldrh	r3, [r7, #14]
 8082f94:	b2db      	uxtb	r3, r3
 8082f96:	f244 0218 	movw	r2, #16408	; 0x4018
 8082f9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8082f9e:	4618      	mov	r0, r3
 8082fa0:	f000 fea6 	bl	8083cf0 <CODEC_IO_Write>
 8082fa4:	4603      	mov	r3, r0
 8082fa6:	461a      	mov	r2, r3
 8082fa8:	69fb      	ldr	r3, [r7, #28]
 8082faa:	4413      	add	r3, r2
 8082fac:	61fb      	str	r3, [r7, #28]
 8082fae:	e00d      	b.n	8082fcc <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8082fb0:	89fb      	ldrh	r3, [r7, #14]
 8082fb2:	b2db      	uxtb	r3, r3
 8082fb4:	f244 0210 	movw	r2, #16400	; 0x4010
 8082fb8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8082fbc:	4618      	mov	r0, r3
 8082fbe:	f000 fe97 	bl	8083cf0 <CODEC_IO_Write>
 8082fc2:	4603      	mov	r3, r0
 8082fc4:	461a      	mov	r2, r3
 8082fc6:	69fb      	ldr	r3, [r7, #28]
 8082fc8:	4413      	add	r3, r2
 8082fca:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8082fcc:	89fb      	ldrh	r3, [r7, #14]
 8082fce:	b2db      	uxtb	r3, r3
 8082fd0:	2200      	movs	r2, #0
 8082fd2:	f240 3102 	movw	r1, #770	; 0x302
 8082fd6:	4618      	mov	r0, r3
 8082fd8:	f000 fe8a 	bl	8083cf0 <CODEC_IO_Write>
 8082fdc:	4603      	mov	r3, r0
 8082fde:	461a      	mov	r2, r3
 8082fe0:	69fb      	ldr	r3, [r7, #28]
 8082fe2:	4413      	add	r3, r2
 8082fe4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8082fe6:	89fb      	ldrh	r3, [r7, #14]
 8082fe8:	b2db      	uxtb	r3, r3
 8082fea:	220a      	movs	r2, #10
 8082fec:	f44f 7102 	mov.w	r1, #520	; 0x208
 8082ff0:	4618      	mov	r0, r3
 8082ff2:	f000 fe7d 	bl	8083cf0 <CODEC_IO_Write>
 8082ff6:	4603      	mov	r3, r0
 8082ff8:	461a      	mov	r2, r3
 8082ffa:	69fb      	ldr	r3, [r7, #28]
 8082ffc:	4413      	add	r3, r2
 8082ffe:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8083000:	89fb      	ldrh	r3, [r7, #14]
 8083002:	b2db      	uxtb	r3, r3
 8083004:	2201      	movs	r2, #1
 8083006:	f44f 7100 	mov.w	r1, #512	; 0x200
 808300a:	4618      	mov	r0, r3
 808300c:	f000 fe70 	bl	8083cf0 <CODEC_IO_Write>
 8083010:	4603      	mov	r3, r0
 8083012:	461a      	mov	r2, r3
 8083014:	69fb      	ldr	r3, [r7, #28]
 8083016:	4413      	add	r3, r2
 8083018:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 808301a:	8b3b      	ldrh	r3, [r7, #24]
 808301c:	2b00      	cmp	r3, #0
 808301e:	f000 817b 	beq.w	8083318 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8083022:	8b3b      	ldrh	r3, [r7, #24]
 8083024:	2b02      	cmp	r3, #2
 8083026:	d157      	bne.n	80830d8 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8083028:	89fb      	ldrh	r3, [r7, #14]
 808302a:	b2db      	uxtb	r3, r3
 808302c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8083030:	212d      	movs	r1, #45	; 0x2d
 8083032:	4618      	mov	r0, r3
 8083034:	f000 fe5c 	bl	8083cf0 <CODEC_IO_Write>
 8083038:	4603      	mov	r3, r0
 808303a:	461a      	mov	r2, r3
 808303c:	69fb      	ldr	r3, [r7, #28]
 808303e:	4413      	add	r3, r2
 8083040:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8083042:	89fb      	ldrh	r3, [r7, #14]
 8083044:	b2db      	uxtb	r3, r3
 8083046:	f44f 7280 	mov.w	r2, #256	; 0x100
 808304a:	212e      	movs	r1, #46	; 0x2e
 808304c:	4618      	mov	r0, r3
 808304e:	f000 fe4f 	bl	8083cf0 <CODEC_IO_Write>
 8083052:	4603      	mov	r3, r0
 8083054:	461a      	mov	r2, r3
 8083056:	69fb      	ldr	r3, [r7, #28]
 8083058:	4413      	add	r3, r2
 808305a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 808305c:	4b0e      	ldr	r3, [pc, #56]	; (8083098 <wm8994_Init+0x94c>)
 808305e:	781b      	ldrb	r3, [r3, #0]
 8083060:	2b00      	cmp	r3, #0
 8083062:	d01b      	beq.n	808309c <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8083064:	89fb      	ldrh	r3, [r7, #14]
 8083066:	b2db      	uxtb	r3, r3
 8083068:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 808306c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8083070:	4618      	mov	r0, r3
 8083072:	f000 fe3d 	bl	8083cf0 <CODEC_IO_Write>
 8083076:	4603      	mov	r3, r0
 8083078:	461a      	mov	r2, r3
 808307a:	69fb      	ldr	r3, [r7, #28]
 808307c:	4413      	add	r3, r2
 808307e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8083080:	4b05      	ldr	r3, [pc, #20]	; (8083098 <wm8994_Init+0x94c>)
 8083082:	2200      	movs	r2, #0
 8083084:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8083086:	f44f 7096 	mov.w	r0, #300	; 0x12c
 808308a:	f001 f997 	bl	80843bc <AUDIO_IO_Delay>
 808308e:	e016      	b.n	80830be <wm8994_Init+0x972>
 8083090:	2000b588 	.word	0x2000b588
 8083094:	00017700 	.word	0x00017700
 8083098:	2000b058 	.word	0x2000b058
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 808309c:	89fb      	ldrh	r3, [r7, #14]
 808309e:	b2db      	uxtb	r3, r3
 80830a0:	f248 1208 	movw	r2, #33032	; 0x8108
 80830a4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80830a8:	4618      	mov	r0, r3
 80830aa:	f000 fe21 	bl	8083cf0 <CODEC_IO_Write>
 80830ae:	4603      	mov	r3, r0
 80830b0:	461a      	mov	r2, r3
 80830b2:	69fb      	ldr	r3, [r7, #28]
 80830b4:	4413      	add	r3, r2
 80830b6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80830b8:	2032      	movs	r0, #50	; 0x32
 80830ba:	f001 f97f 	bl	80843bc <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80830be:	89fb      	ldrh	r3, [r7, #14]
 80830c0:	b2db      	uxtb	r3, r3
 80830c2:	2200      	movs	r2, #0
 80830c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80830c8:	4618      	mov	r0, r3
 80830ca:	f000 fe11 	bl	8083cf0 <CODEC_IO_Write>
 80830ce:	4603      	mov	r3, r0
 80830d0:	461a      	mov	r2, r3
 80830d2:	69fb      	ldr	r3, [r7, #28]
 80830d4:	4413      	add	r3, r2
 80830d6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80830d8:	89fb      	ldrh	r3, [r7, #14]
 80830da:	b2db      	uxtb	r3, r3
 80830dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80830e0:	2103      	movs	r1, #3
 80830e2:	4618      	mov	r0, r3
 80830e4:	f000 fe04 	bl	8083cf0 <CODEC_IO_Write>
 80830e8:	4603      	mov	r3, r0
 80830ea:	461a      	mov	r2, r3
 80830ec:	69fb      	ldr	r3, [r7, #28]
 80830ee:	4413      	add	r3, r2
 80830f0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80830f2:	89fb      	ldrh	r3, [r7, #14]
 80830f4:	b2db      	uxtb	r3, r3
 80830f6:	2200      	movs	r2, #0
 80830f8:	2122      	movs	r1, #34	; 0x22
 80830fa:	4618      	mov	r0, r3
 80830fc:	f000 fdf8 	bl	8083cf0 <CODEC_IO_Write>
 8083100:	4603      	mov	r3, r0
 8083102:	461a      	mov	r2, r3
 8083104:	69fb      	ldr	r3, [r7, #28]
 8083106:	4413      	add	r3, r2
 8083108:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 808310a:	89fb      	ldrh	r3, [r7, #14]
 808310c:	b2db      	uxtb	r3, r3
 808310e:	2200      	movs	r2, #0
 8083110:	2123      	movs	r1, #35	; 0x23
 8083112:	4618      	mov	r0, r3
 8083114:	f000 fdec 	bl	8083cf0 <CODEC_IO_Write>
 8083118:	4603      	mov	r3, r0
 808311a:	461a      	mov	r2, r3
 808311c:	69fb      	ldr	r3, [r7, #28]
 808311e:	4413      	add	r3, r2
 8083120:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8083122:	89fb      	ldrh	r3, [r7, #14]
 8083124:	b2db      	uxtb	r3, r3
 8083126:	f44f 7240 	mov.w	r2, #768	; 0x300
 808312a:	2136      	movs	r1, #54	; 0x36
 808312c:	4618      	mov	r0, r3
 808312e:	f000 fddf 	bl	8083cf0 <CODEC_IO_Write>
 8083132:	4603      	mov	r3, r0
 8083134:	461a      	mov	r2, r3
 8083136:	69fb      	ldr	r3, [r7, #28]
 8083138:	4413      	add	r3, r2
 808313a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 808313c:	89fb      	ldrh	r3, [r7, #14]
 808313e:	b2db      	uxtb	r3, r3
 8083140:	f243 0203 	movw	r2, #12291	; 0x3003
 8083144:	2101      	movs	r1, #1
 8083146:	4618      	mov	r0, r3
 8083148:	f000 fdd2 	bl	8083cf0 <CODEC_IO_Write>
 808314c:	4603      	mov	r3, r0
 808314e:	461a      	mov	r2, r3
 8083150:	69fb      	ldr	r3, [r7, #28]
 8083152:	4413      	add	r3, r2
 8083154:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8083156:	8afb      	ldrh	r3, [r7, #22]
 8083158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808315c:	d10d      	bne.n	808317a <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 808315e:	89fb      	ldrh	r3, [r7, #14]
 8083160:	b2db      	uxtb	r3, r3
 8083162:	f240 2205 	movw	r2, #517	; 0x205
 8083166:	2151      	movs	r1, #81	; 0x51
 8083168:	4618      	mov	r0, r3
 808316a:	f000 fdc1 	bl	8083cf0 <CODEC_IO_Write>
 808316e:	4603      	mov	r3, r0
 8083170:	461a      	mov	r2, r3
 8083172:	69fb      	ldr	r3, [r7, #28]
 8083174:	4413      	add	r3, r2
 8083176:	61fb      	str	r3, [r7, #28]
 8083178:	e00b      	b.n	8083192 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 808317a:	89fb      	ldrh	r3, [r7, #14]
 808317c:	b2db      	uxtb	r3, r3
 808317e:	2205      	movs	r2, #5
 8083180:	2151      	movs	r1, #81	; 0x51
 8083182:	4618      	mov	r0, r3
 8083184:	f000 fdb4 	bl	8083cf0 <CODEC_IO_Write>
 8083188:	4603      	mov	r3, r0
 808318a:	461a      	mov	r2, r3
 808318c:	69fb      	ldr	r3, [r7, #28]
 808318e:	4413      	add	r3, r2
 8083190:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8083192:	8b7b      	ldrh	r3, [r7, #26]
 8083194:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8083198:	f043 0303 	orr.w	r3, r3, #3
 808319c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 808319e:	89fb      	ldrh	r3, [r7, #14]
 80831a0:	b2db      	uxtb	r3, r3
 80831a2:	8b7a      	ldrh	r2, [r7, #26]
 80831a4:	2101      	movs	r1, #1
 80831a6:	4618      	mov	r0, r3
 80831a8:	f000 fda2 	bl	8083cf0 <CODEC_IO_Write>
 80831ac:	4603      	mov	r3, r0
 80831ae:	461a      	mov	r2, r3
 80831b0:	69fb      	ldr	r3, [r7, #28]
 80831b2:	4413      	add	r3, r2
 80831b4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80831b6:	89fb      	ldrh	r3, [r7, #14]
 80831b8:	b2db      	uxtb	r3, r3
 80831ba:	2222      	movs	r2, #34	; 0x22
 80831bc:	2160      	movs	r1, #96	; 0x60
 80831be:	4618      	mov	r0, r3
 80831c0:	f000 fd96 	bl	8083cf0 <CODEC_IO_Write>
 80831c4:	4603      	mov	r3, r0
 80831c6:	461a      	mov	r2, r3
 80831c8:	69fb      	ldr	r3, [r7, #28]
 80831ca:	4413      	add	r3, r2
 80831cc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80831ce:	89fb      	ldrh	r3, [r7, #14]
 80831d0:	b2db      	uxtb	r3, r3
 80831d2:	f649 7225 	movw	r2, #40741	; 0x9f25
 80831d6:	214c      	movs	r1, #76	; 0x4c
 80831d8:	4618      	mov	r0, r3
 80831da:	f000 fd89 	bl	8083cf0 <CODEC_IO_Write>
 80831de:	4603      	mov	r3, r0
 80831e0:	461a      	mov	r2, r3
 80831e2:	69fb      	ldr	r3, [r7, #28]
 80831e4:	4413      	add	r3, r2
 80831e6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80831e8:	200f      	movs	r0, #15
 80831ea:	f001 f8e7 	bl	80843bc <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80831ee:	89fb      	ldrh	r3, [r7, #14]
 80831f0:	b2db      	uxtb	r3, r3
 80831f2:	2201      	movs	r2, #1
 80831f4:	212d      	movs	r1, #45	; 0x2d
 80831f6:	4618      	mov	r0, r3
 80831f8:	f000 fd7a 	bl	8083cf0 <CODEC_IO_Write>
 80831fc:	4603      	mov	r3, r0
 80831fe:	461a      	mov	r2, r3
 8083200:	69fb      	ldr	r3, [r7, #28]
 8083202:	4413      	add	r3, r2
 8083204:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8083206:	89fb      	ldrh	r3, [r7, #14]
 8083208:	b2db      	uxtb	r3, r3
 808320a:	2201      	movs	r2, #1
 808320c:	212e      	movs	r1, #46	; 0x2e
 808320e:	4618      	mov	r0, r3
 8083210:	f000 fd6e 	bl	8083cf0 <CODEC_IO_Write>
 8083214:	4603      	mov	r3, r0
 8083216:	461a      	mov	r2, r3
 8083218:	69fb      	ldr	r3, [r7, #28]
 808321a:	4413      	add	r3, r2
 808321c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 808321e:	89fb      	ldrh	r3, [r7, #14]
 8083220:	b2db      	uxtb	r3, r3
 8083222:	f44f 724c 	mov.w	r2, #816	; 0x330
 8083226:	2103      	movs	r1, #3
 8083228:	4618      	mov	r0, r3
 808322a:	f000 fd61 	bl	8083cf0 <CODEC_IO_Write>
 808322e:	4603      	mov	r3, r0
 8083230:	461a      	mov	r2, r3
 8083232:	69fb      	ldr	r3, [r7, #28]
 8083234:	4413      	add	r3, r2
 8083236:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8083238:	89fb      	ldrh	r3, [r7, #14]
 808323a:	b2db      	uxtb	r3, r3
 808323c:	2233      	movs	r2, #51	; 0x33
 808323e:	2154      	movs	r1, #84	; 0x54
 8083240:	4618      	mov	r0, r3
 8083242:	f000 fd55 	bl	8083cf0 <CODEC_IO_Write>
 8083246:	4603      	mov	r3, r0
 8083248:	461a      	mov	r2, r3
 808324a:	69fb      	ldr	r3, [r7, #28]
 808324c:	4413      	add	r3, r2
 808324e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8083250:	f240 1001 	movw	r0, #257	; 0x101
 8083254:	f001 f8b2 	bl	80843bc <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8083258:	89fb      	ldrh	r3, [r7, #14]
 808325a:	b2db      	uxtb	r3, r3
 808325c:	22ee      	movs	r2, #238	; 0xee
 808325e:	2160      	movs	r1, #96	; 0x60
 8083260:	4618      	mov	r0, r3
 8083262:	f000 fd45 	bl	8083cf0 <CODEC_IO_Write>
 8083266:	4603      	mov	r3, r0
 8083268:	461a      	mov	r2, r3
 808326a:	69fb      	ldr	r3, [r7, #28]
 808326c:	4413      	add	r3, r2
 808326e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8083270:	89fb      	ldrh	r3, [r7, #14]
 8083272:	b2db      	uxtb	r3, r3
 8083274:	22c0      	movs	r2, #192	; 0xc0
 8083276:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 808327a:	4618      	mov	r0, r3
 808327c:	f000 fd38 	bl	8083cf0 <CODEC_IO_Write>
 8083280:	4603      	mov	r3, r0
 8083282:	461a      	mov	r2, r3
 8083284:	69fb      	ldr	r3, [r7, #28]
 8083286:	4413      	add	r3, r2
 8083288:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 808328a:	89fb      	ldrh	r3, [r7, #14]
 808328c:	b2db      	uxtb	r3, r3
 808328e:	22c0      	movs	r2, #192	; 0xc0
 8083290:	f240 6111 	movw	r1, #1553	; 0x611
 8083294:	4618      	mov	r0, r3
 8083296:	f000 fd2b 	bl	8083cf0 <CODEC_IO_Write>
 808329a:	4603      	mov	r3, r0
 808329c:	461a      	mov	r2, r3
 808329e:	69fb      	ldr	r3, [r7, #28]
 80832a0:	4413      	add	r3, r2
 80832a2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80832a4:	89fb      	ldrh	r3, [r7, #14]
 80832a6:	b2db      	uxtb	r3, r3
 80832a8:	2210      	movs	r2, #16
 80832aa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80832ae:	4618      	mov	r0, r3
 80832b0:	f000 fd1e 	bl	8083cf0 <CODEC_IO_Write>
 80832b4:	4603      	mov	r3, r0
 80832b6:	461a      	mov	r2, r3
 80832b8:	69fb      	ldr	r3, [r7, #28]
 80832ba:	4413      	add	r3, r2
 80832bc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80832be:	89fb      	ldrh	r3, [r7, #14]
 80832c0:	b2db      	uxtb	r3, r3
 80832c2:	22c0      	movs	r2, #192	; 0xc0
 80832c4:	f240 6112 	movw	r1, #1554	; 0x612
 80832c8:	4618      	mov	r0, r3
 80832ca:	f000 fd11 	bl	8083cf0 <CODEC_IO_Write>
 80832ce:	4603      	mov	r3, r0
 80832d0:	461a      	mov	r2, r3
 80832d2:	69fb      	ldr	r3, [r7, #28]
 80832d4:	4413      	add	r3, r2
 80832d6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80832d8:	89fb      	ldrh	r3, [r7, #14]
 80832da:	b2db      	uxtb	r3, r3
 80832dc:	22c0      	movs	r2, #192	; 0xc0
 80832de:	f240 6113 	movw	r1, #1555	; 0x613
 80832e2:	4618      	mov	r0, r3
 80832e4:	f000 fd04 	bl	8083cf0 <CODEC_IO_Write>
 80832e8:	4603      	mov	r3, r0
 80832ea:	461a      	mov	r2, r3
 80832ec:	69fb      	ldr	r3, [r7, #28]
 80832ee:	4413      	add	r3, r2
 80832f0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80832f2:	89fb      	ldrh	r3, [r7, #14]
 80832f4:	b2db      	uxtb	r3, r3
 80832f6:	2210      	movs	r2, #16
 80832f8:	f240 4122 	movw	r1, #1058	; 0x422
 80832fc:	4618      	mov	r0, r3
 80832fe:	f000 fcf7 	bl	8083cf0 <CODEC_IO_Write>
 8083302:	4603      	mov	r3, r0
 8083304:	461a      	mov	r2, r3
 8083306:	69fb      	ldr	r3, [r7, #28]
 8083308:	4413      	add	r3, r2
 808330a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 808330c:	7afa      	ldrb	r2, [r7, #11]
 808330e:	89fb      	ldrh	r3, [r7, #14]
 8083310:	4611      	mov	r1, r2
 8083312:	4618      	mov	r0, r3
 8083314:	f000 f984 	bl	8083620 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8083318:	8afb      	ldrh	r3, [r7, #22]
 808331a:	2b00      	cmp	r3, #0
 808331c:	f000 80a6 	beq.w	808346c <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8083320:	8afb      	ldrh	r3, [r7, #22]
 8083322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8083326:	d003      	beq.n	8083330 <wm8994_Init+0xbe4>
 8083328:	8afb      	ldrh	r3, [r7, #22]
 808332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808332e:	d12b      	bne.n	8083388 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8083330:	8b7b      	ldrh	r3, [r7, #26]
 8083332:	f043 0313 	orr.w	r3, r3, #19
 8083336:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8083338:	89fb      	ldrh	r3, [r7, #14]
 808333a:	b2db      	uxtb	r3, r3
 808333c:	8b7a      	ldrh	r2, [r7, #26]
 808333e:	2101      	movs	r1, #1
 8083340:	4618      	mov	r0, r3
 8083342:	f000 fcd5 	bl	8083cf0 <CODEC_IO_Write>
 8083346:	4603      	mov	r3, r0
 8083348:	461a      	mov	r2, r3
 808334a:	69fb      	ldr	r3, [r7, #28]
 808334c:	4413      	add	r3, r2
 808334e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8083350:	89fb      	ldrh	r3, [r7, #14]
 8083352:	b2db      	uxtb	r3, r3
 8083354:	2202      	movs	r2, #2
 8083356:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 808335a:	4618      	mov	r0, r3
 808335c:	f000 fcc8 	bl	8083cf0 <CODEC_IO_Write>
 8083360:	4603      	mov	r3, r0
 8083362:	461a      	mov	r2, r3
 8083364:	69fb      	ldr	r3, [r7, #28]
 8083366:	4413      	add	r3, r2
 8083368:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 808336a:	89fb      	ldrh	r3, [r7, #14]
 808336c:	b2db      	uxtb	r3, r3
 808336e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8083372:	f240 4111 	movw	r1, #1041	; 0x411
 8083376:	4618      	mov	r0, r3
 8083378:	f000 fcba 	bl	8083cf0 <CODEC_IO_Write>
 808337c:	4603      	mov	r3, r0
 808337e:	461a      	mov	r2, r3
 8083380:	69fb      	ldr	r3, [r7, #28]
 8083382:	4413      	add	r3, r2
 8083384:	61fb      	str	r3, [r7, #28]
 8083386:	e06b      	b.n	8083460 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8083388:	8afb      	ldrh	r3, [r7, #22]
 808338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808338e:	d139      	bne.n	8083404 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8083390:	8b7b      	ldrh	r3, [r7, #26]
 8083392:	f043 0313 	orr.w	r3, r3, #19
 8083396:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8083398:	89fb      	ldrh	r3, [r7, #14]
 808339a:	b2db      	uxtb	r3, r3
 808339c:	8b7a      	ldrh	r2, [r7, #26]
 808339e:	2101      	movs	r1, #1
 80833a0:	4618      	mov	r0, r3
 80833a2:	f000 fca5 	bl	8083cf0 <CODEC_IO_Write>
 80833a6:	4603      	mov	r3, r0
 80833a8:	461a      	mov	r2, r3
 80833aa:	69fb      	ldr	r3, [r7, #28]
 80833ac:	4413      	add	r3, r2
 80833ae:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80833b0:	89fb      	ldrh	r3, [r7, #14]
 80833b2:	b2db      	uxtb	r3, r3
 80833b4:	2202      	movs	r2, #2
 80833b6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80833ba:	4618      	mov	r0, r3
 80833bc:	f000 fc98 	bl	8083cf0 <CODEC_IO_Write>
 80833c0:	4603      	mov	r3, r0
 80833c2:	461a      	mov	r2, r3
 80833c4:	69fb      	ldr	r3, [r7, #28]
 80833c6:	4413      	add	r3, r2
 80833c8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80833ca:	89fb      	ldrh	r3, [r7, #14]
 80833cc:	b2db      	uxtb	r3, r3
 80833ce:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80833d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80833d6:	4618      	mov	r0, r3
 80833d8:	f000 fc8a 	bl	8083cf0 <CODEC_IO_Write>
 80833dc:	4603      	mov	r3, r0
 80833de:	461a      	mov	r2, r3
 80833e0:	69fb      	ldr	r3, [r7, #28]
 80833e2:	4413      	add	r3, r2
 80833e4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80833e6:	89fb      	ldrh	r3, [r7, #14]
 80833e8:	b2db      	uxtb	r3, r3
 80833ea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80833ee:	f240 4111 	movw	r1, #1041	; 0x411
 80833f2:	4618      	mov	r0, r3
 80833f4:	f000 fc7c 	bl	8083cf0 <CODEC_IO_Write>
 80833f8:	4603      	mov	r3, r0
 80833fa:	461a      	mov	r2, r3
 80833fc:	69fb      	ldr	r3, [r7, #28]
 80833fe:	4413      	add	r3, r2
 8083400:	61fb      	str	r3, [r7, #28]
 8083402:	e02d      	b.n	8083460 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8083404:	8afb      	ldrh	r3, [r7, #22]
 8083406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 808340a:	d003      	beq.n	8083414 <wm8994_Init+0xcc8>
 808340c:	8afb      	ldrh	r3, [r7, #22]
 808340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8083412:	d125      	bne.n	8083460 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8083414:	89fb      	ldrh	r3, [r7, #14]
 8083416:	b2db      	uxtb	r3, r3
 8083418:	220b      	movs	r2, #11
 808341a:	2118      	movs	r1, #24
 808341c:	4618      	mov	r0, r3
 808341e:	f000 fc67 	bl	8083cf0 <CODEC_IO_Write>
 8083422:	4603      	mov	r3, r0
 8083424:	461a      	mov	r2, r3
 8083426:	69fb      	ldr	r3, [r7, #28]
 8083428:	4413      	add	r3, r2
 808342a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 808342c:	89fb      	ldrh	r3, [r7, #14]
 808342e:	b2db      	uxtb	r3, r3
 8083430:	220b      	movs	r2, #11
 8083432:	211a      	movs	r1, #26
 8083434:	4618      	mov	r0, r3
 8083436:	f000 fc5b 	bl	8083cf0 <CODEC_IO_Write>
 808343a:	4603      	mov	r3, r0
 808343c:	461a      	mov	r2, r3
 808343e:	69fb      	ldr	r3, [r7, #28]
 8083440:	4413      	add	r3, r2
 8083442:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8083444:	89fb      	ldrh	r3, [r7, #14]
 8083446:	b2db      	uxtb	r3, r3
 8083448:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 808344c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8083450:	4618      	mov	r0, r3
 8083452:	f000 fc4d 	bl	8083cf0 <CODEC_IO_Write>
 8083456:	4603      	mov	r3, r0
 8083458:	461a      	mov	r2, r3
 808345a:	69fb      	ldr	r3, [r7, #28]
 808345c:	4413      	add	r3, r2
 808345e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8083460:	7afa      	ldrb	r2, [r7, #11]
 8083462:	89fb      	ldrh	r3, [r7, #14]
 8083464:	4611      	mov	r1, r2
 8083466:	4618      	mov	r0, r3
 8083468:	f000 f8da 	bl	8083620 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 808346c:	69fb      	ldr	r3, [r7, #28]
}
 808346e:	4618      	mov	r0, r3
 8083470:	3720      	adds	r7, #32
 8083472:	46bd      	mov	sp, r7
 8083474:	bd80      	pop	{r7, pc}
 8083476:	bf00      	nop

08083478 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8083478:	b580      	push	{r7, lr}
 808347a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 808347c:	f000 ff40 	bl	8084300 <AUDIO_IO_DeInit>
}
 8083480:	bf00      	nop
 8083482:	bd80      	pop	{r7, pc}

08083484 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8083484:	b580      	push	{r7, lr}
 8083486:	b082      	sub	sp, #8
 8083488:	af00      	add	r7, sp, #0
 808348a:	4603      	mov	r3, r0
 808348c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 808348e:	f000 ff2d 	bl	80842ec <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8083492:	88fb      	ldrh	r3, [r7, #6]
 8083494:	b2db      	uxtb	r3, r3
 8083496:	2100      	movs	r1, #0
 8083498:	4618      	mov	r0, r3
 808349a:	f000 ff63 	bl	8084364 <AUDIO_IO_Read>
 808349e:	4603      	mov	r3, r0
}
 80834a0:	4618      	mov	r0, r3
 80834a2:	3708      	adds	r7, #8
 80834a4:	46bd      	mov	sp, r7
 80834a6:	bd80      	pop	{r7, pc}

080834a8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80834a8:	b580      	push	{r7, lr}
 80834aa:	b084      	sub	sp, #16
 80834ac:	af00      	add	r7, sp, #0
 80834ae:	4603      	mov	r3, r0
 80834b0:	6039      	str	r1, [r7, #0]
 80834b2:	80fb      	strh	r3, [r7, #6]
 80834b4:	4613      	mov	r3, r2
 80834b6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80834b8:	2300      	movs	r3, #0
 80834ba:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80834bc:	88fb      	ldrh	r3, [r7, #6]
 80834be:	2100      	movs	r1, #0
 80834c0:	4618      	mov	r0, r3
 80834c2:	f000 f9d1 	bl	8083868 <wm8994_SetMute>
 80834c6:	4602      	mov	r2, r0
 80834c8:	68fb      	ldr	r3, [r7, #12]
 80834ca:	4413      	add	r3, r2
 80834cc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80834ce:	68fb      	ldr	r3, [r7, #12]
}
 80834d0:	4618      	mov	r0, r3
 80834d2:	3710      	adds	r7, #16
 80834d4:	46bd      	mov	sp, r7
 80834d6:	bd80      	pop	{r7, pc}

080834d8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80834d8:	b580      	push	{r7, lr}
 80834da:	b084      	sub	sp, #16
 80834dc:	af00      	add	r7, sp, #0
 80834de:	4603      	mov	r3, r0
 80834e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80834e2:	2300      	movs	r3, #0
 80834e4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80834e6:	88fb      	ldrh	r3, [r7, #6]
 80834e8:	2101      	movs	r1, #1
 80834ea:	4618      	mov	r0, r3
 80834ec:	f000 f9bc 	bl	8083868 <wm8994_SetMute>
 80834f0:	4602      	mov	r2, r0
 80834f2:	68fb      	ldr	r3, [r7, #12]
 80834f4:	4413      	add	r3, r2
 80834f6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80834f8:	88fb      	ldrh	r3, [r7, #6]
 80834fa:	b2db      	uxtb	r3, r3
 80834fc:	2201      	movs	r2, #1
 80834fe:	2102      	movs	r1, #2
 8083500:	4618      	mov	r0, r3
 8083502:	f000 fbf5 	bl	8083cf0 <CODEC_IO_Write>
 8083506:	4603      	mov	r3, r0
 8083508:	461a      	mov	r2, r3
 808350a:	68fb      	ldr	r3, [r7, #12]
 808350c:	4413      	add	r3, r2
 808350e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8083510:	68fb      	ldr	r3, [r7, #12]
}
 8083512:	4618      	mov	r0, r3
 8083514:	3710      	adds	r7, #16
 8083516:	46bd      	mov	sp, r7
 8083518:	bd80      	pop	{r7, pc}

0808351a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 808351a:	b580      	push	{r7, lr}
 808351c:	b084      	sub	sp, #16
 808351e:	af00      	add	r7, sp, #0
 8083520:	4603      	mov	r3, r0
 8083522:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8083524:	2300      	movs	r3, #0
 8083526:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8083528:	88fb      	ldrh	r3, [r7, #6]
 808352a:	2100      	movs	r1, #0
 808352c:	4618      	mov	r0, r3
 808352e:	f000 f99b 	bl	8083868 <wm8994_SetMute>
 8083532:	4602      	mov	r2, r0
 8083534:	68fb      	ldr	r3, [r7, #12]
 8083536:	4413      	add	r3, r2
 8083538:	60fb      	str	r3, [r7, #12]
  
  return counter;
 808353a:	68fb      	ldr	r3, [r7, #12]
}
 808353c:	4618      	mov	r0, r3
 808353e:	3710      	adds	r7, #16
 8083540:	46bd      	mov	sp, r7
 8083542:	bd80      	pop	{r7, pc}

08083544 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8083544:	b580      	push	{r7, lr}
 8083546:	b084      	sub	sp, #16
 8083548:	af00      	add	r7, sp, #0
 808354a:	4603      	mov	r3, r0
 808354c:	6039      	str	r1, [r7, #0]
 808354e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8083550:	2300      	movs	r3, #0
 8083552:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8083554:	4b31      	ldr	r3, [pc, #196]	; (808361c <wm8994_Stop+0xd8>)
 8083556:	681b      	ldr	r3, [r3, #0]
 8083558:	2b00      	cmp	r3, #0
 808355a:	d05a      	beq.n	8083612 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 808355c:	88fb      	ldrh	r3, [r7, #6]
 808355e:	2101      	movs	r1, #1
 8083560:	4618      	mov	r0, r3
 8083562:	f000 f981 	bl	8083868 <wm8994_SetMute>
 8083566:	4602      	mov	r2, r0
 8083568:	68fb      	ldr	r3, [r7, #12]
 808356a:	4413      	add	r3, r2
 808356c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 808356e:	683b      	ldr	r3, [r7, #0]
 8083570:	2b02      	cmp	r3, #2
 8083572:	d04e      	beq.n	8083612 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8083574:	88fb      	ldrh	r3, [r7, #6]
 8083576:	b2db      	uxtb	r3, r3
 8083578:	f44f 7200 	mov.w	r2, #512	; 0x200
 808357c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8083580:	4618      	mov	r0, r3
 8083582:	f000 fbb5 	bl	8083cf0 <CODEC_IO_Write>
 8083586:	4603      	mov	r3, r0
 8083588:	461a      	mov	r2, r3
 808358a:	68fb      	ldr	r3, [r7, #12]
 808358c:	4413      	add	r3, r2
 808358e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8083590:	88fb      	ldrh	r3, [r7, #6]
 8083592:	b2db      	uxtb	r3, r3
 8083594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083598:	f240 4122 	movw	r1, #1058	; 0x422
 808359c:	4618      	mov	r0, r3
 808359e:	f000 fba7 	bl	8083cf0 <CODEC_IO_Write>
 80835a2:	4603      	mov	r3, r0
 80835a4:	461a      	mov	r2, r3
 80835a6:	68fb      	ldr	r3, [r7, #12]
 80835a8:	4413      	add	r3, r2
 80835aa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80835ac:	88fb      	ldrh	r3, [r7, #6]
 80835ae:	b2db      	uxtb	r3, r3
 80835b0:	2200      	movs	r2, #0
 80835b2:	212d      	movs	r1, #45	; 0x2d
 80835b4:	4618      	mov	r0, r3
 80835b6:	f000 fb9b 	bl	8083cf0 <CODEC_IO_Write>
 80835ba:	4603      	mov	r3, r0
 80835bc:	461a      	mov	r2, r3
 80835be:	68fb      	ldr	r3, [r7, #12]
 80835c0:	4413      	add	r3, r2
 80835c2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80835c4:	88fb      	ldrh	r3, [r7, #6]
 80835c6:	b2db      	uxtb	r3, r3
 80835c8:	2200      	movs	r2, #0
 80835ca:	212e      	movs	r1, #46	; 0x2e
 80835cc:	4618      	mov	r0, r3
 80835ce:	f000 fb8f 	bl	8083cf0 <CODEC_IO_Write>
 80835d2:	4603      	mov	r3, r0
 80835d4:	461a      	mov	r2, r3
 80835d6:	68fb      	ldr	r3, [r7, #12]
 80835d8:	4413      	add	r3, r2
 80835da:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80835dc:	88fb      	ldrh	r3, [r7, #6]
 80835de:	b2db      	uxtb	r3, r3
 80835e0:	2200      	movs	r2, #0
 80835e2:	2105      	movs	r1, #5
 80835e4:	4618      	mov	r0, r3
 80835e6:	f000 fb83 	bl	8083cf0 <CODEC_IO_Write>
 80835ea:	4603      	mov	r3, r0
 80835ec:	461a      	mov	r2, r3
 80835ee:	68fb      	ldr	r3, [r7, #12]
 80835f0:	4413      	add	r3, r2
 80835f2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80835f4:	88fb      	ldrh	r3, [r7, #6]
 80835f6:	b2db      	uxtb	r3, r3
 80835f8:	2200      	movs	r2, #0
 80835fa:	2100      	movs	r1, #0
 80835fc:	4618      	mov	r0, r3
 80835fe:	f000 fb77 	bl	8083cf0 <CODEC_IO_Write>
 8083602:	4603      	mov	r3, r0
 8083604:	461a      	mov	r2, r3
 8083606:	68fb      	ldr	r3, [r7, #12]
 8083608:	4413      	add	r3, r2
 808360a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 808360c:	4b03      	ldr	r3, [pc, #12]	; (808361c <wm8994_Stop+0xd8>)
 808360e:	2200      	movs	r2, #0
 8083610:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8083612:	68fb      	ldr	r3, [r7, #12]
}
 8083614:	4618      	mov	r0, r3
 8083616:	3710      	adds	r7, #16
 8083618:	46bd      	mov	sp, r7
 808361a:	bd80      	pop	{r7, pc}
 808361c:	2000b584 	.word	0x2000b584

08083620 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8083620:	b580      	push	{r7, lr}
 8083622:	b084      	sub	sp, #16
 8083624:	af00      	add	r7, sp, #0
 8083626:	4603      	mov	r3, r0
 8083628:	460a      	mov	r2, r1
 808362a:	80fb      	strh	r3, [r7, #6]
 808362c:	4613      	mov	r3, r2
 808362e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8083630:	2300      	movs	r3, #0
 8083632:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8083634:	797b      	ldrb	r3, [r7, #5]
 8083636:	2b64      	cmp	r3, #100	; 0x64
 8083638:	d80b      	bhi.n	8083652 <wm8994_SetVolume+0x32>
 808363a:	797a      	ldrb	r2, [r7, #5]
 808363c:	4613      	mov	r3, r2
 808363e:	019b      	lsls	r3, r3, #6
 8083640:	1a9b      	subs	r3, r3, r2
 8083642:	4a86      	ldr	r2, [pc, #536]	; (808385c <wm8994_SetVolume+0x23c>)
 8083644:	fb82 1203 	smull	r1, r2, r2, r3
 8083648:	1152      	asrs	r2, r2, #5
 808364a:	17db      	asrs	r3, r3, #31
 808364c:	1ad3      	subs	r3, r2, r3
 808364e:	b2db      	uxtb	r3, r3
 8083650:	e000      	b.n	8083654 <wm8994_SetVolume+0x34>
 8083652:	2364      	movs	r3, #100	; 0x64
 8083654:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8083656:	4b82      	ldr	r3, [pc, #520]	; (8083860 <wm8994_SetVolume+0x240>)
 8083658:	681b      	ldr	r3, [r3, #0]
 808365a:	2b00      	cmp	r3, #0
 808365c:	f000 809b 	beq.w	8083796 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8083660:	7afb      	ldrb	r3, [r7, #11]
 8083662:	2b3e      	cmp	r3, #62	; 0x3e
 8083664:	d93d      	bls.n	80836e2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8083666:	88fb      	ldrh	r3, [r7, #6]
 8083668:	2100      	movs	r1, #0
 808366a:	4618      	mov	r0, r3
 808366c:	f000 f8fc 	bl	8083868 <wm8994_SetMute>
 8083670:	4602      	mov	r2, r0
 8083672:	68fb      	ldr	r3, [r7, #12]
 8083674:	4413      	add	r3, r2
 8083676:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8083678:	88fb      	ldrh	r3, [r7, #6]
 808367a:	b2db      	uxtb	r3, r3
 808367c:	f240 127f 	movw	r2, #383	; 0x17f
 8083680:	211c      	movs	r1, #28
 8083682:	4618      	mov	r0, r3
 8083684:	f000 fb34 	bl	8083cf0 <CODEC_IO_Write>
 8083688:	4603      	mov	r3, r0
 808368a:	461a      	mov	r2, r3
 808368c:	68fb      	ldr	r3, [r7, #12]
 808368e:	4413      	add	r3, r2
 8083690:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8083692:	88fb      	ldrh	r3, [r7, #6]
 8083694:	b2db      	uxtb	r3, r3
 8083696:	f240 127f 	movw	r2, #383	; 0x17f
 808369a:	211d      	movs	r1, #29
 808369c:	4618      	mov	r0, r3
 808369e:	f000 fb27 	bl	8083cf0 <CODEC_IO_Write>
 80836a2:	4603      	mov	r3, r0
 80836a4:	461a      	mov	r2, r3
 80836a6:	68fb      	ldr	r3, [r7, #12]
 80836a8:	4413      	add	r3, r2
 80836aa:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80836ac:	88fb      	ldrh	r3, [r7, #6]
 80836ae:	b2db      	uxtb	r3, r3
 80836b0:	f240 127f 	movw	r2, #383	; 0x17f
 80836b4:	2126      	movs	r1, #38	; 0x26
 80836b6:	4618      	mov	r0, r3
 80836b8:	f000 fb1a 	bl	8083cf0 <CODEC_IO_Write>
 80836bc:	4603      	mov	r3, r0
 80836be:	461a      	mov	r2, r3
 80836c0:	68fb      	ldr	r3, [r7, #12]
 80836c2:	4413      	add	r3, r2
 80836c4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80836c6:	88fb      	ldrh	r3, [r7, #6]
 80836c8:	b2db      	uxtb	r3, r3
 80836ca:	f240 127f 	movw	r2, #383	; 0x17f
 80836ce:	2127      	movs	r1, #39	; 0x27
 80836d0:	4618      	mov	r0, r3
 80836d2:	f000 fb0d 	bl	8083cf0 <CODEC_IO_Write>
 80836d6:	4603      	mov	r3, r0
 80836d8:	461a      	mov	r2, r3
 80836da:	68fb      	ldr	r3, [r7, #12]
 80836dc:	4413      	add	r3, r2
 80836de:	60fb      	str	r3, [r7, #12]
 80836e0:	e059      	b.n	8083796 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80836e2:	797b      	ldrb	r3, [r7, #5]
 80836e4:	2b00      	cmp	r3, #0
 80836e6:	d109      	bne.n	80836fc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80836e8:	88fb      	ldrh	r3, [r7, #6]
 80836ea:	2101      	movs	r1, #1
 80836ec:	4618      	mov	r0, r3
 80836ee:	f000 f8bb 	bl	8083868 <wm8994_SetMute>
 80836f2:	4602      	mov	r2, r0
 80836f4:	68fb      	ldr	r3, [r7, #12]
 80836f6:	4413      	add	r3, r2
 80836f8:	60fb      	str	r3, [r7, #12]
 80836fa:	e04c      	b.n	8083796 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80836fc:	88fb      	ldrh	r3, [r7, #6]
 80836fe:	2100      	movs	r1, #0
 8083700:	4618      	mov	r0, r3
 8083702:	f000 f8b1 	bl	8083868 <wm8994_SetMute>
 8083706:	4602      	mov	r2, r0
 8083708:	68fb      	ldr	r3, [r7, #12]
 808370a:	4413      	add	r3, r2
 808370c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 808370e:	88fb      	ldrh	r3, [r7, #6]
 8083710:	b2d8      	uxtb	r0, r3
 8083712:	7afb      	ldrb	r3, [r7, #11]
 8083714:	b21b      	sxth	r3, r3
 8083716:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 808371a:	b21b      	sxth	r3, r3
 808371c:	b29b      	uxth	r3, r3
 808371e:	461a      	mov	r2, r3
 8083720:	211c      	movs	r1, #28
 8083722:	f000 fae5 	bl	8083cf0 <CODEC_IO_Write>
 8083726:	4603      	mov	r3, r0
 8083728:	461a      	mov	r2, r3
 808372a:	68fb      	ldr	r3, [r7, #12]
 808372c:	4413      	add	r3, r2
 808372e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8083730:	88fb      	ldrh	r3, [r7, #6]
 8083732:	b2d8      	uxtb	r0, r3
 8083734:	7afb      	ldrb	r3, [r7, #11]
 8083736:	b21b      	sxth	r3, r3
 8083738:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 808373c:	b21b      	sxth	r3, r3
 808373e:	b29b      	uxth	r3, r3
 8083740:	461a      	mov	r2, r3
 8083742:	211d      	movs	r1, #29
 8083744:	f000 fad4 	bl	8083cf0 <CODEC_IO_Write>
 8083748:	4603      	mov	r3, r0
 808374a:	461a      	mov	r2, r3
 808374c:	68fb      	ldr	r3, [r7, #12]
 808374e:	4413      	add	r3, r2
 8083750:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8083752:	88fb      	ldrh	r3, [r7, #6]
 8083754:	b2d8      	uxtb	r0, r3
 8083756:	7afb      	ldrb	r3, [r7, #11]
 8083758:	b21b      	sxth	r3, r3
 808375a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 808375e:	b21b      	sxth	r3, r3
 8083760:	b29b      	uxth	r3, r3
 8083762:	461a      	mov	r2, r3
 8083764:	2126      	movs	r1, #38	; 0x26
 8083766:	f000 fac3 	bl	8083cf0 <CODEC_IO_Write>
 808376a:	4603      	mov	r3, r0
 808376c:	461a      	mov	r2, r3
 808376e:	68fb      	ldr	r3, [r7, #12]
 8083770:	4413      	add	r3, r2
 8083772:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8083774:	88fb      	ldrh	r3, [r7, #6]
 8083776:	b2d8      	uxtb	r0, r3
 8083778:	7afb      	ldrb	r3, [r7, #11]
 808377a:	b21b      	sxth	r3, r3
 808377c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8083780:	b21b      	sxth	r3, r3
 8083782:	b29b      	uxth	r3, r3
 8083784:	461a      	mov	r2, r3
 8083786:	2127      	movs	r1, #39	; 0x27
 8083788:	f000 fab2 	bl	8083cf0 <CODEC_IO_Write>
 808378c:	4603      	mov	r3, r0
 808378e:	461a      	mov	r2, r3
 8083790:	68fb      	ldr	r3, [r7, #12]
 8083792:	4413      	add	r3, r2
 8083794:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8083796:	4b33      	ldr	r3, [pc, #204]	; (8083864 <wm8994_SetVolume+0x244>)
 8083798:	681b      	ldr	r3, [r3, #0]
 808379a:	2b00      	cmp	r3, #0
 808379c:	d059      	beq.n	8083852 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 808379e:	797b      	ldrb	r3, [r7, #5]
 80837a0:	2b63      	cmp	r3, #99	; 0x63
 80837a2:	d80c      	bhi.n	80837be <wm8994_SetVolume+0x19e>
 80837a4:	797a      	ldrb	r2, [r7, #5]
 80837a6:	4613      	mov	r3, r2
 80837a8:	011b      	lsls	r3, r3, #4
 80837aa:	1a9b      	subs	r3, r3, r2
 80837ac:	011b      	lsls	r3, r3, #4
 80837ae:	4a2b      	ldr	r2, [pc, #172]	; (808385c <wm8994_SetVolume+0x23c>)
 80837b0:	fb82 1203 	smull	r1, r2, r2, r3
 80837b4:	1152      	asrs	r2, r2, #5
 80837b6:	17db      	asrs	r3, r3, #31
 80837b8:	1ad3      	subs	r3, r2, r3
 80837ba:	b2db      	uxtb	r3, r3
 80837bc:	e000      	b.n	80837c0 <wm8994_SetVolume+0x1a0>
 80837be:	23ef      	movs	r3, #239	; 0xef
 80837c0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80837c2:	88fb      	ldrh	r3, [r7, #6]
 80837c4:	b2d8      	uxtb	r0, r3
 80837c6:	7afb      	ldrb	r3, [r7, #11]
 80837c8:	b21b      	sxth	r3, r3
 80837ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80837ce:	b21b      	sxth	r3, r3
 80837d0:	b29b      	uxth	r3, r3
 80837d2:	461a      	mov	r2, r3
 80837d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80837d8:	f000 fa8a 	bl	8083cf0 <CODEC_IO_Write>
 80837dc:	4603      	mov	r3, r0
 80837de:	461a      	mov	r2, r3
 80837e0:	68fb      	ldr	r3, [r7, #12]
 80837e2:	4413      	add	r3, r2
 80837e4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80837e6:	88fb      	ldrh	r3, [r7, #6]
 80837e8:	b2d8      	uxtb	r0, r3
 80837ea:	7afb      	ldrb	r3, [r7, #11]
 80837ec:	b21b      	sxth	r3, r3
 80837ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80837f2:	b21b      	sxth	r3, r3
 80837f4:	b29b      	uxth	r3, r3
 80837f6:	461a      	mov	r2, r3
 80837f8:	f240 4101 	movw	r1, #1025	; 0x401
 80837fc:	f000 fa78 	bl	8083cf0 <CODEC_IO_Write>
 8083800:	4603      	mov	r3, r0
 8083802:	461a      	mov	r2, r3
 8083804:	68fb      	ldr	r3, [r7, #12]
 8083806:	4413      	add	r3, r2
 8083808:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 808380a:	88fb      	ldrh	r3, [r7, #6]
 808380c:	b2d8      	uxtb	r0, r3
 808380e:	7afb      	ldrb	r3, [r7, #11]
 8083810:	b21b      	sxth	r3, r3
 8083812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083816:	b21b      	sxth	r3, r3
 8083818:	b29b      	uxth	r3, r3
 808381a:	461a      	mov	r2, r3
 808381c:	f240 4104 	movw	r1, #1028	; 0x404
 8083820:	f000 fa66 	bl	8083cf0 <CODEC_IO_Write>
 8083824:	4603      	mov	r3, r0
 8083826:	461a      	mov	r2, r3
 8083828:	68fb      	ldr	r3, [r7, #12]
 808382a:	4413      	add	r3, r2
 808382c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 808382e:	88fb      	ldrh	r3, [r7, #6]
 8083830:	b2d8      	uxtb	r0, r3
 8083832:	7afb      	ldrb	r3, [r7, #11]
 8083834:	b21b      	sxth	r3, r3
 8083836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808383a:	b21b      	sxth	r3, r3
 808383c:	b29b      	uxth	r3, r3
 808383e:	461a      	mov	r2, r3
 8083840:	f240 4105 	movw	r1, #1029	; 0x405
 8083844:	f000 fa54 	bl	8083cf0 <CODEC_IO_Write>
 8083848:	4603      	mov	r3, r0
 808384a:	461a      	mov	r2, r3
 808384c:	68fb      	ldr	r3, [r7, #12]
 808384e:	4413      	add	r3, r2
 8083850:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8083852:	68fb      	ldr	r3, [r7, #12]
}
 8083854:	4618      	mov	r0, r3
 8083856:	3710      	adds	r7, #16
 8083858:	46bd      	mov	sp, r7
 808385a:	bd80      	pop	{r7, pc}
 808385c:	51eb851f 	.word	0x51eb851f
 8083860:	2000b584 	.word	0x2000b584
 8083864:	2000b588 	.word	0x2000b588

08083868 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8083868:	b580      	push	{r7, lr}
 808386a:	b084      	sub	sp, #16
 808386c:	af00      	add	r7, sp, #0
 808386e:	4603      	mov	r3, r0
 8083870:	6039      	str	r1, [r7, #0]
 8083872:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8083874:	2300      	movs	r3, #0
 8083876:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8083878:	4b21      	ldr	r3, [pc, #132]	; (8083900 <wm8994_SetMute+0x98>)
 808387a:	681b      	ldr	r3, [r3, #0]
 808387c:	2b00      	cmp	r3, #0
 808387e:	d039      	beq.n	80838f4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8083880:	683b      	ldr	r3, [r7, #0]
 8083882:	2b01      	cmp	r3, #1
 8083884:	d11c      	bne.n	80838c0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8083886:	88fb      	ldrh	r3, [r7, #6]
 8083888:	b2db      	uxtb	r3, r3
 808388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808388e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8083892:	4618      	mov	r0, r3
 8083894:	f000 fa2c 	bl	8083cf0 <CODEC_IO_Write>
 8083898:	4603      	mov	r3, r0
 808389a:	461a      	mov	r2, r3
 808389c:	68fb      	ldr	r3, [r7, #12]
 808389e:	4413      	add	r3, r2
 80838a0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80838a2:	88fb      	ldrh	r3, [r7, #6]
 80838a4:	b2db      	uxtb	r3, r3
 80838a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80838aa:	f240 4122 	movw	r1, #1058	; 0x422
 80838ae:	4618      	mov	r0, r3
 80838b0:	f000 fa1e 	bl	8083cf0 <CODEC_IO_Write>
 80838b4:	4603      	mov	r3, r0
 80838b6:	461a      	mov	r2, r3
 80838b8:	68fb      	ldr	r3, [r7, #12]
 80838ba:	4413      	add	r3, r2
 80838bc:	60fb      	str	r3, [r7, #12]
 80838be:	e019      	b.n	80838f4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80838c0:	88fb      	ldrh	r3, [r7, #6]
 80838c2:	b2db      	uxtb	r3, r3
 80838c4:	2210      	movs	r2, #16
 80838c6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80838ca:	4618      	mov	r0, r3
 80838cc:	f000 fa10 	bl	8083cf0 <CODEC_IO_Write>
 80838d0:	4603      	mov	r3, r0
 80838d2:	461a      	mov	r2, r3
 80838d4:	68fb      	ldr	r3, [r7, #12]
 80838d6:	4413      	add	r3, r2
 80838d8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80838da:	88fb      	ldrh	r3, [r7, #6]
 80838dc:	b2db      	uxtb	r3, r3
 80838de:	2210      	movs	r2, #16
 80838e0:	f240 4122 	movw	r1, #1058	; 0x422
 80838e4:	4618      	mov	r0, r3
 80838e6:	f000 fa03 	bl	8083cf0 <CODEC_IO_Write>
 80838ea:	4603      	mov	r3, r0
 80838ec:	461a      	mov	r2, r3
 80838ee:	68fb      	ldr	r3, [r7, #12]
 80838f0:	4413      	add	r3, r2
 80838f2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80838f4:	68fb      	ldr	r3, [r7, #12]
}
 80838f6:	4618      	mov	r0, r3
 80838f8:	3710      	adds	r7, #16
 80838fa:	46bd      	mov	sp, r7
 80838fc:	bd80      	pop	{r7, pc}
 80838fe:	bf00      	nop
 8083900:	2000b584 	.word	0x2000b584

08083904 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8083904:	b580      	push	{r7, lr}
 8083906:	b084      	sub	sp, #16
 8083908:	af00      	add	r7, sp, #0
 808390a:	4603      	mov	r3, r0
 808390c:	460a      	mov	r2, r1
 808390e:	80fb      	strh	r3, [r7, #6]
 8083910:	4613      	mov	r3, r2
 8083912:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8083914:	2300      	movs	r3, #0
 8083916:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8083918:	797b      	ldrb	r3, [r7, #5]
 808391a:	2b02      	cmp	r3, #2
 808391c:	d047      	beq.n	80839ae <wm8994_SetOutputMode+0xaa>
 808391e:	2b03      	cmp	r3, #3
 8083920:	f000 8087 	beq.w	8083a32 <wm8994_SetOutputMode+0x12e>
 8083924:	2b01      	cmp	r3, #1
 8083926:	f040 80c6 	bne.w	8083ab6 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 808392a:	88fb      	ldrh	r3, [r7, #6]
 808392c:	b2db      	uxtb	r3, r3
 808392e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8083932:	2105      	movs	r1, #5
 8083934:	4618      	mov	r0, r3
 8083936:	f000 f9db 	bl	8083cf0 <CODEC_IO_Write>
 808393a:	4603      	mov	r3, r0
 808393c:	461a      	mov	r2, r3
 808393e:	68fb      	ldr	r3, [r7, #12]
 8083940:	4413      	add	r3, r2
 8083942:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8083944:	88fb      	ldrh	r3, [r7, #6]
 8083946:	b2db      	uxtb	r3, r3
 8083948:	2200      	movs	r2, #0
 808394a:	f240 6101 	movw	r1, #1537	; 0x601
 808394e:	4618      	mov	r0, r3
 8083950:	f000 f9ce 	bl	8083cf0 <CODEC_IO_Write>
 8083954:	4603      	mov	r3, r0
 8083956:	461a      	mov	r2, r3
 8083958:	68fb      	ldr	r3, [r7, #12]
 808395a:	4413      	add	r3, r2
 808395c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 808395e:	88fb      	ldrh	r3, [r7, #6]
 8083960:	b2db      	uxtb	r3, r3
 8083962:	2200      	movs	r2, #0
 8083964:	f240 6102 	movw	r1, #1538	; 0x602
 8083968:	4618      	mov	r0, r3
 808396a:	f000 f9c1 	bl	8083cf0 <CODEC_IO_Write>
 808396e:	4603      	mov	r3, r0
 8083970:	461a      	mov	r2, r3
 8083972:	68fb      	ldr	r3, [r7, #12]
 8083974:	4413      	add	r3, r2
 8083976:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8083978:	88fb      	ldrh	r3, [r7, #6]
 808397a:	b2db      	uxtb	r3, r3
 808397c:	2202      	movs	r2, #2
 808397e:	f240 6104 	movw	r1, #1540	; 0x604
 8083982:	4618      	mov	r0, r3
 8083984:	f000 f9b4 	bl	8083cf0 <CODEC_IO_Write>
 8083988:	4603      	mov	r3, r0
 808398a:	461a      	mov	r2, r3
 808398c:	68fb      	ldr	r3, [r7, #12]
 808398e:	4413      	add	r3, r2
 8083990:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8083992:	88fb      	ldrh	r3, [r7, #6]
 8083994:	b2db      	uxtb	r3, r3
 8083996:	2202      	movs	r2, #2
 8083998:	f240 6105 	movw	r1, #1541	; 0x605
 808399c:	4618      	mov	r0, r3
 808399e:	f000 f9a7 	bl	8083cf0 <CODEC_IO_Write>
 80839a2:	4603      	mov	r3, r0
 80839a4:	461a      	mov	r2, r3
 80839a6:	68fb      	ldr	r3, [r7, #12]
 80839a8:	4413      	add	r3, r2
 80839aa:	60fb      	str	r3, [r7, #12]
    break;
 80839ac:	e0c5      	b.n	8083b3a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80839ae:	88fb      	ldrh	r3, [r7, #6]
 80839b0:	b2db      	uxtb	r3, r3
 80839b2:	f240 3203 	movw	r2, #771	; 0x303
 80839b6:	2105      	movs	r1, #5
 80839b8:	4618      	mov	r0, r3
 80839ba:	f000 f999 	bl	8083cf0 <CODEC_IO_Write>
 80839be:	4603      	mov	r3, r0
 80839c0:	461a      	mov	r2, r3
 80839c2:	68fb      	ldr	r3, [r7, #12]
 80839c4:	4413      	add	r3, r2
 80839c6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80839c8:	88fb      	ldrh	r3, [r7, #6]
 80839ca:	b2db      	uxtb	r3, r3
 80839cc:	2201      	movs	r2, #1
 80839ce:	f240 6101 	movw	r1, #1537	; 0x601
 80839d2:	4618      	mov	r0, r3
 80839d4:	f000 f98c 	bl	8083cf0 <CODEC_IO_Write>
 80839d8:	4603      	mov	r3, r0
 80839da:	461a      	mov	r2, r3
 80839dc:	68fb      	ldr	r3, [r7, #12]
 80839de:	4413      	add	r3, r2
 80839e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80839e2:	88fb      	ldrh	r3, [r7, #6]
 80839e4:	b2db      	uxtb	r3, r3
 80839e6:	2201      	movs	r2, #1
 80839e8:	f240 6102 	movw	r1, #1538	; 0x602
 80839ec:	4618      	mov	r0, r3
 80839ee:	f000 f97f 	bl	8083cf0 <CODEC_IO_Write>
 80839f2:	4603      	mov	r3, r0
 80839f4:	461a      	mov	r2, r3
 80839f6:	68fb      	ldr	r3, [r7, #12]
 80839f8:	4413      	add	r3, r2
 80839fa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80839fc:	88fb      	ldrh	r3, [r7, #6]
 80839fe:	b2db      	uxtb	r3, r3
 8083a00:	2200      	movs	r2, #0
 8083a02:	f240 6104 	movw	r1, #1540	; 0x604
 8083a06:	4618      	mov	r0, r3
 8083a08:	f000 f972 	bl	8083cf0 <CODEC_IO_Write>
 8083a0c:	4603      	mov	r3, r0
 8083a0e:	461a      	mov	r2, r3
 8083a10:	68fb      	ldr	r3, [r7, #12]
 8083a12:	4413      	add	r3, r2
 8083a14:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8083a16:	88fb      	ldrh	r3, [r7, #6]
 8083a18:	b2db      	uxtb	r3, r3
 8083a1a:	2200      	movs	r2, #0
 8083a1c:	f240 6105 	movw	r1, #1541	; 0x605
 8083a20:	4618      	mov	r0, r3
 8083a22:	f000 f965 	bl	8083cf0 <CODEC_IO_Write>
 8083a26:	4603      	mov	r3, r0
 8083a28:	461a      	mov	r2, r3
 8083a2a:	68fb      	ldr	r3, [r7, #12]
 8083a2c:	4413      	add	r3, r2
 8083a2e:	60fb      	str	r3, [r7, #12]
    break;
 8083a30:	e083      	b.n	8083b3a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8083a32:	88fb      	ldrh	r3, [r7, #6]
 8083a34:	b2db      	uxtb	r3, r3
 8083a36:	f640 720f 	movw	r2, #3855	; 0xf0f
 8083a3a:	2105      	movs	r1, #5
 8083a3c:	4618      	mov	r0, r3
 8083a3e:	f000 f957 	bl	8083cf0 <CODEC_IO_Write>
 8083a42:	4603      	mov	r3, r0
 8083a44:	461a      	mov	r2, r3
 8083a46:	68fb      	ldr	r3, [r7, #12]
 8083a48:	4413      	add	r3, r2
 8083a4a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8083a4c:	88fb      	ldrh	r3, [r7, #6]
 8083a4e:	b2db      	uxtb	r3, r3
 8083a50:	2201      	movs	r2, #1
 8083a52:	f240 6101 	movw	r1, #1537	; 0x601
 8083a56:	4618      	mov	r0, r3
 8083a58:	f000 f94a 	bl	8083cf0 <CODEC_IO_Write>
 8083a5c:	4603      	mov	r3, r0
 8083a5e:	461a      	mov	r2, r3
 8083a60:	68fb      	ldr	r3, [r7, #12]
 8083a62:	4413      	add	r3, r2
 8083a64:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8083a66:	88fb      	ldrh	r3, [r7, #6]
 8083a68:	b2db      	uxtb	r3, r3
 8083a6a:	2201      	movs	r2, #1
 8083a6c:	f240 6102 	movw	r1, #1538	; 0x602
 8083a70:	4618      	mov	r0, r3
 8083a72:	f000 f93d 	bl	8083cf0 <CODEC_IO_Write>
 8083a76:	4603      	mov	r3, r0
 8083a78:	461a      	mov	r2, r3
 8083a7a:	68fb      	ldr	r3, [r7, #12]
 8083a7c:	4413      	add	r3, r2
 8083a7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8083a80:	88fb      	ldrh	r3, [r7, #6]
 8083a82:	b2db      	uxtb	r3, r3
 8083a84:	2202      	movs	r2, #2
 8083a86:	f240 6104 	movw	r1, #1540	; 0x604
 8083a8a:	4618      	mov	r0, r3
 8083a8c:	f000 f930 	bl	8083cf0 <CODEC_IO_Write>
 8083a90:	4603      	mov	r3, r0
 8083a92:	461a      	mov	r2, r3
 8083a94:	68fb      	ldr	r3, [r7, #12]
 8083a96:	4413      	add	r3, r2
 8083a98:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8083a9a:	88fb      	ldrh	r3, [r7, #6]
 8083a9c:	b2db      	uxtb	r3, r3
 8083a9e:	2202      	movs	r2, #2
 8083aa0:	f240 6105 	movw	r1, #1541	; 0x605
 8083aa4:	4618      	mov	r0, r3
 8083aa6:	f000 f923 	bl	8083cf0 <CODEC_IO_Write>
 8083aaa:	4603      	mov	r3, r0
 8083aac:	461a      	mov	r2, r3
 8083aae:	68fb      	ldr	r3, [r7, #12]
 8083ab0:	4413      	add	r3, r2
 8083ab2:	60fb      	str	r3, [r7, #12]
    break;
 8083ab4:	e041      	b.n	8083b3a <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8083ab6:	88fb      	ldrh	r3, [r7, #6]
 8083ab8:	b2db      	uxtb	r3, r3
 8083aba:	f240 3203 	movw	r2, #771	; 0x303
 8083abe:	2105      	movs	r1, #5
 8083ac0:	4618      	mov	r0, r3
 8083ac2:	f000 f915 	bl	8083cf0 <CODEC_IO_Write>
 8083ac6:	4603      	mov	r3, r0
 8083ac8:	461a      	mov	r2, r3
 8083aca:	68fb      	ldr	r3, [r7, #12]
 8083acc:	4413      	add	r3, r2
 8083ace:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8083ad0:	88fb      	ldrh	r3, [r7, #6]
 8083ad2:	b2db      	uxtb	r3, r3
 8083ad4:	2201      	movs	r2, #1
 8083ad6:	f240 6101 	movw	r1, #1537	; 0x601
 8083ada:	4618      	mov	r0, r3
 8083adc:	f000 f908 	bl	8083cf0 <CODEC_IO_Write>
 8083ae0:	4603      	mov	r3, r0
 8083ae2:	461a      	mov	r2, r3
 8083ae4:	68fb      	ldr	r3, [r7, #12]
 8083ae6:	4413      	add	r3, r2
 8083ae8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8083aea:	88fb      	ldrh	r3, [r7, #6]
 8083aec:	b2db      	uxtb	r3, r3
 8083aee:	2201      	movs	r2, #1
 8083af0:	f240 6102 	movw	r1, #1538	; 0x602
 8083af4:	4618      	mov	r0, r3
 8083af6:	f000 f8fb 	bl	8083cf0 <CODEC_IO_Write>
 8083afa:	4603      	mov	r3, r0
 8083afc:	461a      	mov	r2, r3
 8083afe:	68fb      	ldr	r3, [r7, #12]
 8083b00:	4413      	add	r3, r2
 8083b02:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8083b04:	88fb      	ldrh	r3, [r7, #6]
 8083b06:	b2db      	uxtb	r3, r3
 8083b08:	2200      	movs	r2, #0
 8083b0a:	f240 6104 	movw	r1, #1540	; 0x604
 8083b0e:	4618      	mov	r0, r3
 8083b10:	f000 f8ee 	bl	8083cf0 <CODEC_IO_Write>
 8083b14:	4603      	mov	r3, r0
 8083b16:	461a      	mov	r2, r3
 8083b18:	68fb      	ldr	r3, [r7, #12]
 8083b1a:	4413      	add	r3, r2
 8083b1c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8083b1e:	88fb      	ldrh	r3, [r7, #6]
 8083b20:	b2db      	uxtb	r3, r3
 8083b22:	2200      	movs	r2, #0
 8083b24:	f240 6105 	movw	r1, #1541	; 0x605
 8083b28:	4618      	mov	r0, r3
 8083b2a:	f000 f8e1 	bl	8083cf0 <CODEC_IO_Write>
 8083b2e:	4603      	mov	r3, r0
 8083b30:	461a      	mov	r2, r3
 8083b32:	68fb      	ldr	r3, [r7, #12]
 8083b34:	4413      	add	r3, r2
 8083b36:	60fb      	str	r3, [r7, #12]
    break;    
 8083b38:	bf00      	nop
  }  
  return counter;
 8083b3a:	68fb      	ldr	r3, [r7, #12]
}
 8083b3c:	4618      	mov	r0, r3
 8083b3e:	3710      	adds	r7, #16
 8083b40:	46bd      	mov	sp, r7
 8083b42:	bd80      	pop	{r7, pc}

08083b44 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8083b44:	b580      	push	{r7, lr}
 8083b46:	b084      	sub	sp, #16
 8083b48:	af00      	add	r7, sp, #0
 8083b4a:	4603      	mov	r3, r0
 8083b4c:	6039      	str	r1, [r7, #0]
 8083b4e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8083b50:	2300      	movs	r3, #0
 8083b52:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8083b54:	683b      	ldr	r3, [r7, #0]
 8083b56:	f245 6222 	movw	r2, #22050	; 0x5622
 8083b5a:	4293      	cmp	r3, r2
 8083b5c:	d076      	beq.n	8083c4c <wm8994_SetFrequency+0x108>
 8083b5e:	f245 6222 	movw	r2, #22050	; 0x5622
 8083b62:	4293      	cmp	r3, r2
 8083b64:	d80a      	bhi.n	8083b7c <wm8994_SetFrequency+0x38>
 8083b66:	f642 3211 	movw	r2, #11025	; 0x2b11
 8083b6a:	4293      	cmp	r3, r2
 8083b6c:	d060      	beq.n	8083c30 <wm8994_SetFrequency+0xec>
 8083b6e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8083b72:	d025      	beq.n	8083bc0 <wm8994_SetFrequency+0x7c>
 8083b74:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8083b78:	d014      	beq.n	8083ba4 <wm8994_SetFrequency+0x60>
 8083b7a:	e083      	b.n	8083c84 <wm8994_SetFrequency+0x140>
 8083b7c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8083b80:	4293      	cmp	r3, r2
 8083b82:	d071      	beq.n	8083c68 <wm8994_SetFrequency+0x124>
 8083b84:	f64a 4244 	movw	r2, #44100	; 0xac44
 8083b88:	4293      	cmp	r3, r2
 8083b8a:	d803      	bhi.n	8083b94 <wm8994_SetFrequency+0x50>
 8083b8c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8083b90:	d024      	beq.n	8083bdc <wm8994_SetFrequency+0x98>
 8083b92:	e077      	b.n	8083c84 <wm8994_SetFrequency+0x140>
 8083b94:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8083b98:	4293      	cmp	r3, r2
 8083b9a:	d02d      	beq.n	8083bf8 <wm8994_SetFrequency+0xb4>
 8083b9c:	4a43      	ldr	r2, [pc, #268]	; (8083cac <wm8994_SetFrequency+0x168>)
 8083b9e:	4293      	cmp	r3, r2
 8083ba0:	d038      	beq.n	8083c14 <wm8994_SetFrequency+0xd0>
 8083ba2:	e06f      	b.n	8083c84 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8083ba4:	88fb      	ldrh	r3, [r7, #6]
 8083ba6:	b2db      	uxtb	r3, r3
 8083ba8:	2203      	movs	r2, #3
 8083baa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083bae:	4618      	mov	r0, r3
 8083bb0:	f000 f89e 	bl	8083cf0 <CODEC_IO_Write>
 8083bb4:	4603      	mov	r3, r0
 8083bb6:	461a      	mov	r2, r3
 8083bb8:	68fb      	ldr	r3, [r7, #12]
 8083bba:	4413      	add	r3, r2
 8083bbc:	60fb      	str	r3, [r7, #12]
    break;
 8083bbe:	e06f      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8083bc0:	88fb      	ldrh	r3, [r7, #6]
 8083bc2:	b2db      	uxtb	r3, r3
 8083bc4:	2233      	movs	r2, #51	; 0x33
 8083bc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083bca:	4618      	mov	r0, r3
 8083bcc:	f000 f890 	bl	8083cf0 <CODEC_IO_Write>
 8083bd0:	4603      	mov	r3, r0
 8083bd2:	461a      	mov	r2, r3
 8083bd4:	68fb      	ldr	r3, [r7, #12]
 8083bd6:	4413      	add	r3, r2
 8083bd8:	60fb      	str	r3, [r7, #12]
    break;
 8083bda:	e061      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8083bdc:	88fb      	ldrh	r3, [r7, #6]
 8083bde:	b2db      	uxtb	r3, r3
 8083be0:	2263      	movs	r2, #99	; 0x63
 8083be2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083be6:	4618      	mov	r0, r3
 8083be8:	f000 f882 	bl	8083cf0 <CODEC_IO_Write>
 8083bec:	4603      	mov	r3, r0
 8083bee:	461a      	mov	r2, r3
 8083bf0:	68fb      	ldr	r3, [r7, #12]
 8083bf2:	4413      	add	r3, r2
 8083bf4:	60fb      	str	r3, [r7, #12]
    break;
 8083bf6:	e053      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8083bf8:	88fb      	ldrh	r3, [r7, #6]
 8083bfa:	b2db      	uxtb	r3, r3
 8083bfc:	2283      	movs	r2, #131	; 0x83
 8083bfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c02:	4618      	mov	r0, r3
 8083c04:	f000 f874 	bl	8083cf0 <CODEC_IO_Write>
 8083c08:	4603      	mov	r3, r0
 8083c0a:	461a      	mov	r2, r3
 8083c0c:	68fb      	ldr	r3, [r7, #12]
 8083c0e:	4413      	add	r3, r2
 8083c10:	60fb      	str	r3, [r7, #12]
    break;
 8083c12:	e045      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8083c14:	88fb      	ldrh	r3, [r7, #6]
 8083c16:	b2db      	uxtb	r3, r3
 8083c18:	22a3      	movs	r2, #163	; 0xa3
 8083c1a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c1e:	4618      	mov	r0, r3
 8083c20:	f000 f866 	bl	8083cf0 <CODEC_IO_Write>
 8083c24:	4603      	mov	r3, r0
 8083c26:	461a      	mov	r2, r3
 8083c28:	68fb      	ldr	r3, [r7, #12]
 8083c2a:	4413      	add	r3, r2
 8083c2c:	60fb      	str	r3, [r7, #12]
    break;
 8083c2e:	e037      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8083c30:	88fb      	ldrh	r3, [r7, #6]
 8083c32:	b2db      	uxtb	r3, r3
 8083c34:	2213      	movs	r2, #19
 8083c36:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c3a:	4618      	mov	r0, r3
 8083c3c:	f000 f858 	bl	8083cf0 <CODEC_IO_Write>
 8083c40:	4603      	mov	r3, r0
 8083c42:	461a      	mov	r2, r3
 8083c44:	68fb      	ldr	r3, [r7, #12]
 8083c46:	4413      	add	r3, r2
 8083c48:	60fb      	str	r3, [r7, #12]
    break;
 8083c4a:	e029      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8083c4c:	88fb      	ldrh	r3, [r7, #6]
 8083c4e:	b2db      	uxtb	r3, r3
 8083c50:	2243      	movs	r2, #67	; 0x43
 8083c52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c56:	4618      	mov	r0, r3
 8083c58:	f000 f84a 	bl	8083cf0 <CODEC_IO_Write>
 8083c5c:	4603      	mov	r3, r0
 8083c5e:	461a      	mov	r2, r3
 8083c60:	68fb      	ldr	r3, [r7, #12]
 8083c62:	4413      	add	r3, r2
 8083c64:	60fb      	str	r3, [r7, #12]
    break;
 8083c66:	e01b      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8083c68:	88fb      	ldrh	r3, [r7, #6]
 8083c6a:	b2db      	uxtb	r3, r3
 8083c6c:	2273      	movs	r2, #115	; 0x73
 8083c6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c72:	4618      	mov	r0, r3
 8083c74:	f000 f83c 	bl	8083cf0 <CODEC_IO_Write>
 8083c78:	4603      	mov	r3, r0
 8083c7a:	461a      	mov	r2, r3
 8083c7c:	68fb      	ldr	r3, [r7, #12]
 8083c7e:	4413      	add	r3, r2
 8083c80:	60fb      	str	r3, [r7, #12]
    break; 
 8083c82:	e00d      	b.n	8083ca0 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8083c84:	88fb      	ldrh	r3, [r7, #6]
 8083c86:	b2db      	uxtb	r3, r3
 8083c88:	2283      	movs	r2, #131	; 0x83
 8083c8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8083c8e:	4618      	mov	r0, r3
 8083c90:	f000 f82e 	bl	8083cf0 <CODEC_IO_Write>
 8083c94:	4603      	mov	r3, r0
 8083c96:	461a      	mov	r2, r3
 8083c98:	68fb      	ldr	r3, [r7, #12]
 8083c9a:	4413      	add	r3, r2
 8083c9c:	60fb      	str	r3, [r7, #12]
    break; 
 8083c9e:	bf00      	nop
  }
  return counter;
 8083ca0:	68fb      	ldr	r3, [r7, #12]
}
 8083ca2:	4618      	mov	r0, r3
 8083ca4:	3710      	adds	r7, #16
 8083ca6:	46bd      	mov	sp, r7
 8083ca8:	bd80      	pop	{r7, pc}
 8083caa:	bf00      	nop
 8083cac:	00017700 	.word	0x00017700

08083cb0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8083cb0:	b580      	push	{r7, lr}
 8083cb2:	b084      	sub	sp, #16
 8083cb4:	af00      	add	r7, sp, #0
 8083cb6:	4603      	mov	r3, r0
 8083cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8083cba:	2300      	movs	r3, #0
 8083cbc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8083cbe:	88fb      	ldrh	r3, [r7, #6]
 8083cc0:	b2db      	uxtb	r3, r3
 8083cc2:	2200      	movs	r2, #0
 8083cc4:	2100      	movs	r1, #0
 8083cc6:	4618      	mov	r0, r3
 8083cc8:	f000 f812 	bl	8083cf0 <CODEC_IO_Write>
 8083ccc:	4603      	mov	r3, r0
 8083cce:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8083cd0:	4b05      	ldr	r3, [pc, #20]	; (8083ce8 <wm8994_Reset+0x38>)
 8083cd2:	2200      	movs	r2, #0
 8083cd4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8083cd6:	4b05      	ldr	r3, [pc, #20]	; (8083cec <wm8994_Reset+0x3c>)
 8083cd8:	2200      	movs	r2, #0
 8083cda:	601a      	str	r2, [r3, #0]

  return counter;
 8083cdc:	68fb      	ldr	r3, [r7, #12]
}
 8083cde:	4618      	mov	r0, r3
 8083ce0:	3710      	adds	r7, #16
 8083ce2:	46bd      	mov	sp, r7
 8083ce4:	bd80      	pop	{r7, pc}
 8083ce6:	bf00      	nop
 8083ce8:	2000b584 	.word	0x2000b584
 8083cec:	2000b588 	.word	0x2000b588

08083cf0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8083cf0:	b580      	push	{r7, lr}
 8083cf2:	b084      	sub	sp, #16
 8083cf4:	af00      	add	r7, sp, #0
 8083cf6:	4603      	mov	r3, r0
 8083cf8:	71fb      	strb	r3, [r7, #7]
 8083cfa:	460b      	mov	r3, r1
 8083cfc:	80bb      	strh	r3, [r7, #4]
 8083cfe:	4613      	mov	r3, r2
 8083d00:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8083d02:	2300      	movs	r3, #0
 8083d04:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8083d06:	887a      	ldrh	r2, [r7, #2]
 8083d08:	88b9      	ldrh	r1, [r7, #4]
 8083d0a:	79fb      	ldrb	r3, [r7, #7]
 8083d0c:	4618      	mov	r0, r3
 8083d0e:	f000 faff 	bl	8084310 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8083d12:	68fb      	ldr	r3, [r7, #12]
 8083d14:	b2db      	uxtb	r3, r3
}
 8083d16:	4618      	mov	r0, r3
 8083d18:	3710      	adds	r7, #16
 8083d1a:	46bd      	mov	sp, r7
 8083d1c:	bd80      	pop	{r7, pc}
	...

08083d20 <BSP_LED_Init>:
 *          This parameter can be one of the following values:
 *            @arg  LED1
 * @retval None
 */
void BSP_LED_Init(Led_TypeDef Led)
{
 8083d20:	b580      	push	{r7, lr}
 8083d22:	b08a      	sub	sp, #40	; 0x28
 8083d24:	af00      	add	r7, sp, #0
 8083d26:	4603      	mov	r3, r0
 8083d28:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  gpio_init_structure;
	GPIO_TypeDef*     gpio_led;

	if (Led == LED1)
 8083d2a:	79fb      	ldrb	r3, [r7, #7]
 8083d2c:	2b00      	cmp	r3, #0
 8083d2e:	d122      	bne.n	8083d76 <BSP_LED_Init+0x56>
	{
		gpio_led = LED1_GPIO_PORT;
 8083d30:	4b13      	ldr	r3, [pc, #76]	; (8083d80 <BSP_LED_Init+0x60>)
 8083d32:	627b      	str	r3, [r7, #36]	; 0x24
		/* Enable the GPIO_LED clock */
		LED1_GPIO_CLK_ENABLE();
 8083d34:	4b13      	ldr	r3, [pc, #76]	; (8083d84 <BSP_LED_Init+0x64>)
 8083d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083d38:	4a12      	ldr	r2, [pc, #72]	; (8083d84 <BSP_LED_Init+0x64>)
 8083d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8083d40:	4b10      	ldr	r3, [pc, #64]	; (8083d84 <BSP_LED_Init+0x64>)
 8083d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083d48:	60fb      	str	r3, [r7, #12]
 8083d4a:	68fb      	ldr	r3, [r7, #12]

		/* Configure the GPIO_LED pin */
		gpio_init_structure.Pin = GPIO_PIN[Led];
 8083d4c:	2302      	movs	r3, #2
 8083d4e:	613b      	str	r3, [r7, #16]
		gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8083d50:	2301      	movs	r3, #1
 8083d52:	617b      	str	r3, [r7, #20]
		gpio_init_structure.Pull = GPIO_PULLUP;
 8083d54:	2301      	movs	r3, #1
 8083d56:	61bb      	str	r3, [r7, #24]
		gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8083d58:	2303      	movs	r3, #3
 8083d5a:	61fb      	str	r3, [r7, #28]

		HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8083d5c:	f107 0310 	add.w	r3, r7, #16
 8083d60:	4619      	mov	r1, r3
 8083d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8083d64:	f006 fa30 	bl	808a1c8 <HAL_GPIO_Init>

		/* By default, turn off LED */
		HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8083d68:	2302      	movs	r3, #2
 8083d6a:	b29b      	uxth	r3, r3
 8083d6c:	2200      	movs	r2, #0
 8083d6e:	4619      	mov	r1, r3
 8083d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8083d72:	f006 fcf5 	bl	808a760 <HAL_GPIO_WritePin>
	}
}
 8083d76:	bf00      	nop
 8083d78:	3728      	adds	r7, #40	; 0x28
 8083d7a:	46bd      	mov	sp, r7
 8083d7c:	bd80      	pop	{r7, pc}
 8083d7e:	bf00      	nop
 8083d80:	40022000 	.word	0x40022000
 8083d84:	40023800 	.word	0x40023800

08083d88 <BSP_PB_Init>:
 *       are mapped on the same push button named "User"
 *       on the board serigraphy.
 * @retval None
 */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8083d88:	b580      	push	{r7, lr}
 8083d8a:	b08a      	sub	sp, #40	; 0x28
 8083d8c:	af00      	add	r7, sp, #0
 8083d8e:	4603      	mov	r3, r0
 8083d90:	460a      	mov	r2, r1
 8083d92:	80fb      	strh	r3, [r7, #6]
 8083d94:	4613      	mov	r3, r2
 8083d96:	717b      	strb	r3, [r7, #5]
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable the BUTTON clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8083d98:	88fb      	ldrh	r3, [r7, #6]
 8083d9a:	2b00      	cmp	r3, #0
 8083d9c:	d10c      	bne.n	8083db8 <BSP_PB_Init+0x30>
 8083d9e:	4b3a      	ldr	r3, [pc, #232]	; (8083e88 <BSP_PB_Init+0x100>)
 8083da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083da2:	4a39      	ldr	r2, [pc, #228]	; (8083e88 <BSP_PB_Init+0x100>)
 8083da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083da8:	6313      	str	r3, [r2, #48]	; 0x30
 8083daa:	4b37      	ldr	r3, [pc, #220]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083db2:	613b      	str	r3, [r7, #16]
 8083db4:	693b      	ldr	r3, [r7, #16]
 8083db6:	e01b      	b.n	8083df0 <BSP_PB_Init+0x68>
 8083db8:	88fb      	ldrh	r3, [r7, #6]
 8083dba:	2b01      	cmp	r3, #1
 8083dbc:	d10c      	bne.n	8083dd8 <BSP_PB_Init+0x50>
 8083dbe:	4b32      	ldr	r3, [pc, #200]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083dc2:	4a31      	ldr	r2, [pc, #196]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8083dca:	4b2f      	ldr	r3, [pc, #188]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083dd2:	60fb      	str	r3, [r7, #12]
 8083dd4:	68fb      	ldr	r3, [r7, #12]
 8083dd6:	e00b      	b.n	8083df0 <BSP_PB_Init+0x68>
 8083dd8:	4b2b      	ldr	r3, [pc, #172]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083ddc:	4a2a      	ldr	r2, [pc, #168]	; (8083e88 <BSP_PB_Init+0x100>)
 8083dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083de2:	6313      	str	r3, [r2, #48]	; 0x30
 8083de4:	4b28      	ldr	r3, [pc, #160]	; (8083e88 <BSP_PB_Init+0x100>)
 8083de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083dec:	60bb      	str	r3, [r7, #8]
 8083dee:	68bb      	ldr	r3, [r7, #8]

	if(ButtonMode == BUTTON_MODE_GPIO)
 8083df0:	797b      	ldrb	r3, [r7, #5]
 8083df2:	2b00      	cmp	r3, #0
 8083df4:	d114      	bne.n	8083e20 <BSP_PB_Init+0x98>
	{
		/* Configure Button pin as input */
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 8083df6:	88fb      	ldrh	r3, [r7, #6]
 8083df8:	4a24      	ldr	r2, [pc, #144]	; (8083e8c <BSP_PB_Init+0x104>)
 8083dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083dfe:	617b      	str	r3, [r7, #20]
		gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8083e00:	2300      	movs	r3, #0
 8083e02:	61bb      	str	r3, [r7, #24]
		gpio_init_structure.Pull = GPIO_NOPULL;
 8083e04:	2300      	movs	r3, #0
 8083e06:	61fb      	str	r3, [r7, #28]
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8083e08:	2302      	movs	r3, #2
 8083e0a:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8083e0c:	88fb      	ldrh	r3, [r7, #6]
 8083e0e:	4a20      	ldr	r2, [pc, #128]	; (8083e90 <BSP_PB_Init+0x108>)
 8083e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083e14:	f107 0214 	add.w	r2, r7, #20
 8083e18:	4611      	mov	r1, r2
 8083e1a:	4618      	mov	r0, r3
 8083e1c:	f006 f9d4 	bl	808a1c8 <HAL_GPIO_Init>
	}

	if(ButtonMode == BUTTON_MODE_EXTI)
 8083e20:	797b      	ldrb	r3, [r7, #5]
 8083e22:	2b01      	cmp	r3, #1
 8083e24:	d12c      	bne.n	8083e80 <BSP_PB_Init+0xf8>
	{
		/* Configure Button pin as input with External interrupt */
		gpio_init_structure.Pin = BUTTON_PIN[Button];
 8083e26:	88fb      	ldrh	r3, [r7, #6]
 8083e28:	4a18      	ldr	r2, [pc, #96]	; (8083e8c <BSP_PB_Init+0x104>)
 8083e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083e2e:	617b      	str	r3, [r7, #20]
		gpio_init_structure.Pull = GPIO_NOPULL;
 8083e30:	2300      	movs	r3, #0
 8083e32:	61fb      	str	r3, [r7, #28]
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8083e34:	2302      	movs	r3, #2
 8083e36:	623b      	str	r3, [r7, #32]

		if(Button != BUTTON_WAKEUP)
 8083e38:	88fb      	ldrh	r3, [r7, #6]
 8083e3a:	2b00      	cmp	r3, #0
 8083e3c:	d002      	beq.n	8083e44 <BSP_PB_Init+0xbc>
		{
			gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8083e3e:	4b15      	ldr	r3, [pc, #84]	; (8083e94 <BSP_PB_Init+0x10c>)
 8083e40:	61bb      	str	r3, [r7, #24]
 8083e42:	e001      	b.n	8083e48 <BSP_PB_Init+0xc0>
		}
		else
		{
			gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8083e44:	4b14      	ldr	r3, [pc, #80]	; (8083e98 <BSP_PB_Init+0x110>)
 8083e46:	61bb      	str	r3, [r7, #24]
		}

		HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8083e48:	88fb      	ldrh	r3, [r7, #6]
 8083e4a:	4a11      	ldr	r2, [pc, #68]	; (8083e90 <BSP_PB_Init+0x108>)
 8083e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083e50:	f107 0214 	add.w	r2, r7, #20
 8083e54:	4611      	mov	r1, r2
 8083e56:	4618      	mov	r0, r3
 8083e58:	f006 f9b6 	bl	808a1c8 <HAL_GPIO_Init>

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8083e5c:	88fb      	ldrh	r3, [r7, #6]
 8083e5e:	4a0f      	ldr	r2, [pc, #60]	; (8083e9c <BSP_PB_Init+0x114>)
 8083e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083e64:	b25b      	sxtb	r3, r3
 8083e66:	2200      	movs	r2, #0
 8083e68:	210f      	movs	r1, #15
 8083e6a:	4618      	mov	r0, r3
 8083e6c:	f005 fa74 	bl	8089358 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8083e70:	88fb      	ldrh	r3, [r7, #6]
 8083e72:	4a0a      	ldr	r2, [pc, #40]	; (8083e9c <BSP_PB_Init+0x114>)
 8083e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083e78:	b25b      	sxtb	r3, r3
 8083e7a:	4618      	mov	r0, r3
 8083e7c:	f005 fa88 	bl	8089390 <HAL_NVIC_EnableIRQ>
	}
}
 8083e80:	bf00      	nop
 8083e82:	3728      	adds	r7, #40	; 0x28
 8083e84:	46bd      	mov	sp, r7
 8083e86:	bd80      	pop	{r7, pc}
 8083e88:	40023800 	.word	0x40023800
 8083e8c:	0809f058 	.word	0x0809f058
 8083e90:	2000b05c 	.word	0x2000b05c
 8083e94:	10210000 	.word	0x10210000
 8083e98:	10110000 	.word	0x10110000
 8083e9c:	0809f060 	.word	0x0809f060

08083ea0 <BSP_PB_GetState>:
 *       are mapped on the same push button named "User"
 *       on the board serigraphy.
 * @retval The Button GPIO pin value
 */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8083ea0:	b580      	push	{r7, lr}
 8083ea2:	b084      	sub	sp, #16
 8083ea4:	af00      	add	r7, sp, #0
 8083ea6:	4603      	mov	r3, r0
 8083ea8:	80fb      	strh	r3, [r7, #6]
	uint32_t status=0;
 8083eaa:	2300      	movs	r3, #0
 8083eac:	60fb      	str	r3, [r7, #12]

	if (Button >=256)
 8083eae:	88fb      	ldrh	r3, [r7, #6]
 8083eb0:	2bff      	cmp	r3, #255	; 0xff
 8083eb2:	d907      	bls.n	8083ec4 <BSP_PB_GetState+0x24>
		status= BSP_KEYS_GetKey(Button-256);
 8083eb4:	88fb      	ldrh	r3, [r7, #6]
 8083eb6:	b2db      	uxtb	r3, r3
 8083eb8:	4618      	mov	r0, r3
 8083eba:	f001 fbb1 	bl	8085620 <BSP_KEYS_GetKey>
 8083ebe:	4603      	mov	r3, r0
 8083ec0:	60fb      	str	r3, [r7, #12]
 8083ec2:	e00c      	b.n	8083ede <BSP_PB_GetState+0x3e>
	else
		status= HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8083ec4:	88fb      	ldrh	r3, [r7, #6]
 8083ec6:	4a08      	ldr	r2, [pc, #32]	; (8083ee8 <BSP_PB_GetState+0x48>)
 8083ec8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8083ecc:	88fb      	ldrh	r3, [r7, #6]
 8083ece:	4a07      	ldr	r2, [pc, #28]	; (8083eec <BSP_PB_GetState+0x4c>)
 8083ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083ed4:	4619      	mov	r1, r3
 8083ed6:	f006 fc2b 	bl	808a730 <HAL_GPIO_ReadPin>
 8083eda:	4603      	mov	r3, r0
 8083edc:	60fb      	str	r3, [r7, #12]

	return status;
 8083ede:	68fb      	ldr	r3, [r7, #12]
}
 8083ee0:	4618      	mov	r0, r3
 8083ee2:	3710      	adds	r7, #16
 8083ee4:	46bd      	mov	sp, r7
 8083ee6:	bd80      	pop	{r7, pc}
 8083ee8:	2000b05c 	.word	0x2000b05c
 8083eec:	0809f058 	.word	0x0809f058

08083ef0 <BSP_COM_Init>:
 * @param  huart: Pointer to a UART_HandleTypeDef structure that contains the
 *                configuration information for the specified USART peripheral.
 * @retval None
 */
HAL_StatusTypeDef BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8083ef0:	b580      	push	{r7, lr}
 8083ef2:	b08e      	sub	sp, #56	; 0x38
 8083ef4:	af00      	add	r7, sp, #0
 8083ef6:	4603      	mov	r3, r0
 8083ef8:	6039      	str	r1, [r7, #0]
 8083efa:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable GPIO clock */
	DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8083efc:	79fb      	ldrb	r3, [r7, #7]
 8083efe:	2b00      	cmp	r3, #0
 8083f00:	d10c      	bne.n	8083f1c <BSP_COM_Init+0x2c>
 8083f02:	4b47      	ldr	r3, [pc, #284]	; (8084020 <BSP_COM_Init+0x130>)
 8083f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f06:	4a46      	ldr	r2, [pc, #280]	; (8084020 <BSP_COM_Init+0x130>)
 8083f08:	f043 0301 	orr.w	r3, r3, #1
 8083f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8083f0e:	4b44      	ldr	r3, [pc, #272]	; (8084020 <BSP_COM_Init+0x130>)
 8083f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f12:	f003 0301 	and.w	r3, r3, #1
 8083f16:	623b      	str	r3, [r7, #32]
 8083f18:	6a3b      	ldr	r3, [r7, #32]
 8083f1a:	e00b      	b.n	8083f34 <BSP_COM_Init+0x44>
 8083f1c:	4b40      	ldr	r3, [pc, #256]	; (8084020 <BSP_COM_Init+0x130>)
 8083f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f20:	4a3f      	ldr	r2, [pc, #252]	; (8084020 <BSP_COM_Init+0x130>)
 8083f22:	f043 0304 	orr.w	r3, r3, #4
 8083f26:	6313      	str	r3, [r2, #48]	; 0x30
 8083f28:	4b3d      	ldr	r3, [pc, #244]	; (8084020 <BSP_COM_Init+0x130>)
 8083f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f2c:	f003 0304 	and.w	r3, r3, #4
 8083f30:	61fb      	str	r3, [r7, #28]
 8083f32:	69fb      	ldr	r3, [r7, #28]
	DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8083f34:	79fb      	ldrb	r3, [r7, #7]
 8083f36:	2b00      	cmp	r3, #0
 8083f38:	d10c      	bne.n	8083f54 <BSP_COM_Init+0x64>
 8083f3a:	4b39      	ldr	r3, [pc, #228]	; (8084020 <BSP_COM_Init+0x130>)
 8083f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f3e:	4a38      	ldr	r2, [pc, #224]	; (8084020 <BSP_COM_Init+0x130>)
 8083f40:	f043 0302 	orr.w	r3, r3, #2
 8083f44:	6313      	str	r3, [r2, #48]	; 0x30
 8083f46:	4b36      	ldr	r3, [pc, #216]	; (8084020 <BSP_COM_Init+0x130>)
 8083f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f4a:	f003 0302 	and.w	r3, r3, #2
 8083f4e:	61bb      	str	r3, [r7, #24]
 8083f50:	69bb      	ldr	r3, [r7, #24]
 8083f52:	e00b      	b.n	8083f6c <BSP_COM_Init+0x7c>
 8083f54:	4b32      	ldr	r3, [pc, #200]	; (8084020 <BSP_COM_Init+0x130>)
 8083f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f58:	4a31      	ldr	r2, [pc, #196]	; (8084020 <BSP_COM_Init+0x130>)
 8083f5a:	f043 0304 	orr.w	r3, r3, #4
 8083f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8083f60:	4b2f      	ldr	r3, [pc, #188]	; (8084020 <BSP_COM_Init+0x130>)
 8083f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f64:	f003 0304 	and.w	r3, r3, #4
 8083f68:	617b      	str	r3, [r7, #20]
 8083f6a:	697b      	ldr	r3, [r7, #20]

	/* Enable USART clock */
	DISCOVERY_COMx_CLK_ENABLE(COM);
 8083f6c:	79fb      	ldrb	r3, [r7, #7]
 8083f6e:	2b00      	cmp	r3, #0
 8083f70:	d10c      	bne.n	8083f8c <BSP_COM_Init+0x9c>
 8083f72:	4b2b      	ldr	r3, [pc, #172]	; (8084020 <BSP_COM_Init+0x130>)
 8083f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083f76:	4a2a      	ldr	r2, [pc, #168]	; (8084020 <BSP_COM_Init+0x130>)
 8083f78:	f043 0310 	orr.w	r3, r3, #16
 8083f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8083f7e:	4b28      	ldr	r3, [pc, #160]	; (8084020 <BSP_COM_Init+0x130>)
 8083f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083f82:	f003 0310 	and.w	r3, r3, #16
 8083f86:	613b      	str	r3, [r7, #16]
 8083f88:	693b      	ldr	r3, [r7, #16]
 8083f8a:	e00b      	b.n	8083fa4 <BSP_COM_Init+0xb4>
 8083f8c:	4b24      	ldr	r3, [pc, #144]	; (8084020 <BSP_COM_Init+0x130>)
 8083f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083f90:	4a23      	ldr	r2, [pc, #140]	; (8084020 <BSP_COM_Init+0x130>)
 8083f92:	f043 0320 	orr.w	r3, r3, #32
 8083f96:	6453      	str	r3, [r2, #68]	; 0x44
 8083f98:	4b21      	ldr	r3, [pc, #132]	; (8084020 <BSP_COM_Init+0x130>)
 8083f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083f9c:	f003 0320 	and.w	r3, r3, #32
 8083fa0:	60fb      	str	r3, [r7, #12]
 8083fa2:	68fb      	ldr	r3, [r7, #12]

	/* Configure USART Tx as alternate function */
	gpio_init_structure.Pin = COM_TX_PIN[COM];
 8083fa4:	79fb      	ldrb	r3, [r7, #7]
 8083fa6:	4a1f      	ldr	r2, [pc, #124]	; (8084024 <BSP_COM_Init+0x134>)
 8083fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083fac:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8083fae:	2302      	movs	r3, #2
 8083fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8083fb2:	2302      	movs	r3, #2
 8083fb4:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Pull = GPIO_PULLUP;
 8083fb6:	2301      	movs	r3, #1
 8083fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Alternate = COM_TX_AF[COM];
 8083fba:	79fb      	ldrb	r3, [r7, #7]
 8083fbc:	4a1a      	ldr	r2, [pc, #104]	; (8084028 <BSP_COM_Init+0x138>)
 8083fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083fc2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8083fc4:	79fb      	ldrb	r3, [r7, #7]
 8083fc6:	4a19      	ldr	r2, [pc, #100]	; (808402c <BSP_COM_Init+0x13c>)
 8083fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083fcc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8083fd0:	4611      	mov	r1, r2
 8083fd2:	4618      	mov	r0, r3
 8083fd4:	f006 f8f8 	bl	808a1c8 <HAL_GPIO_Init>

	/* Configure USART Rx as alternate function */
	gpio_init_structure.Pin = COM_RX_PIN[COM];
 8083fd8:	79fb      	ldrb	r3, [r7, #7]
 8083fda:	4a15      	ldr	r2, [pc, #84]	; (8084030 <BSP_COM_Init+0x140>)
 8083fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083fe0:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8083fe2:	2302      	movs	r3, #2
 8083fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = COM_RX_AF[COM];
 8083fe6:	79fb      	ldrb	r3, [r7, #7]
 8083fe8:	4a12      	ldr	r2, [pc, #72]	; (8084034 <BSP_COM_Init+0x144>)
 8083fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8083fee:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8083ff0:	79fb      	ldrb	r3, [r7, #7]
 8083ff2:	4a11      	ldr	r2, [pc, #68]	; (8084038 <BSP_COM_Init+0x148>)
 8083ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083ff8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8083ffc:	4611      	mov	r1, r2
 8083ffe:	4618      	mov	r0, r3
 8084000:	f006 f8e2 	bl	808a1c8 <HAL_GPIO_Init>

	/* USART configuration */
	huart->Instance = COM_USART[COM];
 8084004:	79fb      	ldrb	r3, [r7, #7]
 8084006:	4a0d      	ldr	r2, [pc, #52]	; (808403c <BSP_COM_Init+0x14c>)
 8084008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 808400c:	683b      	ldr	r3, [r7, #0]
 808400e:	601a      	str	r2, [r3, #0]
	return HAL_UART_Init(huart);
 8084010:	6838      	ldr	r0, [r7, #0]
 8084012:	f00d f939 	bl	8091288 <HAL_UART_Init>
 8084016:	4603      	mov	r3, r0
}
 8084018:	4618      	mov	r0, r3
 808401a:	3738      	adds	r7, #56	; 0x38
 808401c:	46bd      	mov	sp, r7
 808401e:	bd80      	pop	{r7, pc}
 8084020:	40023800 	.word	0x40023800
 8084024:	0809f068 	.word	0x0809f068
 8084028:	0809f070 	.word	0x0809f070
 808402c:	2000b070 	.word	0x2000b070
 8084030:	0809f06c 	.word	0x0809f06c
 8084034:	0809f074 	.word	0x0809f074
 8084038:	2000b078 	.word	0x2000b078
 808403c:	2000b068 	.word	0x2000b068

08084040 <I2Cx_MspInit>:
 * @brief  Initializes I2C MSP.
 * @param  i2c_handler : I2C handler
 * @retval None
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8084040:	b580      	push	{r7, lr}
 8084042:	b08c      	sub	sp, #48	; 0x30
 8084044:	af00      	add	r7, sp, #0
 8084046:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  gpio_init_structure;

	if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8084048:	687b      	ldr	r3, [r7, #4]
 808404a:	4a51      	ldr	r2, [pc, #324]	; (8084190 <I2Cx_MspInit+0x150>)
 808404c:	4293      	cmp	r3, r2
 808404e:	d14d      	bne.n	80840ec <I2Cx_MspInit+0xac>
	{
		/* AUDIO and LCD I2C MSP init */

		/*** Configure the GPIOs ***/
		/* Enable GPIO clock */
		DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8084050:	4b50      	ldr	r3, [pc, #320]	; (8084194 <I2Cx_MspInit+0x154>)
 8084052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084054:	4a4f      	ldr	r2, [pc, #316]	; (8084194 <I2Cx_MspInit+0x154>)
 8084056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808405a:	6313      	str	r3, [r2, #48]	; 0x30
 808405c:	4b4d      	ldr	r3, [pc, #308]	; (8084194 <I2Cx_MspInit+0x154>)
 808405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8084064:	61bb      	str	r3, [r7, #24]
 8084066:	69bb      	ldr	r3, [r7, #24]

		/* Configure I2C Tx as alternate function */
		gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8084068:	2380      	movs	r3, #128	; 0x80
 808406a:	61fb      	str	r3, [r7, #28]
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 808406c:	2312      	movs	r3, #18
 808406e:	623b      	str	r3, [r7, #32]
		gpio_init_structure.Pull = GPIO_NOPULL;
 8084070:	2300      	movs	r3, #0
 8084072:	627b      	str	r3, [r7, #36]	; 0x24
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8084074:	2302      	movs	r3, #2
 8084076:	62bb      	str	r3, [r7, #40]	; 0x28
		gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8084078:	2304      	movs	r3, #4
 808407a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808407c:	f107 031c 	add.w	r3, r7, #28
 8084080:	4619      	mov	r1, r3
 8084082:	4845      	ldr	r0, [pc, #276]	; (8084198 <I2Cx_MspInit+0x158>)
 8084084:	f006 f8a0 	bl	808a1c8 <HAL_GPIO_Init>

		/* Configure I2C Rx as alternate function */
		gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8084088:	f44f 7380 	mov.w	r3, #256	; 0x100
 808408c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808408e:	f107 031c 	add.w	r3, r7, #28
 8084092:	4619      	mov	r1, r3
 8084094:	4840      	ldr	r0, [pc, #256]	; (8084198 <I2Cx_MspInit+0x158>)
 8084096:	f006 f897 	bl	808a1c8 <HAL_GPIO_Init>

		/*** Configure the I2C peripheral ***/
		/* Enable I2C clock */
		DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 808409a:	4b3e      	ldr	r3, [pc, #248]	; (8084194 <I2Cx_MspInit+0x154>)
 808409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808409e:	4a3d      	ldr	r2, [pc, #244]	; (8084194 <I2Cx_MspInit+0x154>)
 80840a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80840a4:	6413      	str	r3, [r2, #64]	; 0x40
 80840a6:	4b3b      	ldr	r3, [pc, #236]	; (8084194 <I2Cx_MspInit+0x154>)
 80840a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80840aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80840ae:	617b      	str	r3, [r7, #20]
 80840b0:	697b      	ldr	r3, [r7, #20]

		/* Force the I2C peripheral clock reset */
		DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80840b2:	4b38      	ldr	r3, [pc, #224]	; (8084194 <I2Cx_MspInit+0x154>)
 80840b4:	6a1b      	ldr	r3, [r3, #32]
 80840b6:	4a37      	ldr	r2, [pc, #220]	; (8084194 <I2Cx_MspInit+0x154>)
 80840b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80840bc:	6213      	str	r3, [r2, #32]

		/* Release the I2C peripheral clock reset */
		DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80840be:	4b35      	ldr	r3, [pc, #212]	; (8084194 <I2Cx_MspInit+0x154>)
 80840c0:	6a1b      	ldr	r3, [r3, #32]
 80840c2:	4a34      	ldr	r2, [pc, #208]	; (8084194 <I2Cx_MspInit+0x154>)
 80840c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80840c8:	6213      	str	r3, [r2, #32]

		/* Enable and set I2Cx Interrupt to a lower priority */
		HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80840ca:	2200      	movs	r2, #0
 80840cc:	210f      	movs	r1, #15
 80840ce:	2048      	movs	r0, #72	; 0x48
 80840d0:	f005 f942 	bl	8089358 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80840d4:	2048      	movs	r0, #72	; 0x48
 80840d6:	f005 f95b 	bl	8089390 <HAL_NVIC_EnableIRQ>

		/* Enable and set I2Cx Interrupt to a lower priority */
		HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80840da:	2200      	movs	r2, #0
 80840dc:	210f      	movs	r1, #15
 80840de:	2049      	movs	r0, #73	; 0x49
 80840e0:	f005 f93a 	bl	8089358 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80840e4:	2049      	movs	r0, #73	; 0x49
 80840e6:	f005 f953 	bl	8089390 <HAL_NVIC_EnableIRQ>

		/* Enable and set I2Cx Interrupt to a lower priority */
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
	}
}
 80840ea:	e04d      	b.n	8084188 <I2Cx_MspInit+0x148>
		DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80840ec:	4b29      	ldr	r3, [pc, #164]	; (8084194 <I2Cx_MspInit+0x154>)
 80840ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80840f0:	4a28      	ldr	r2, [pc, #160]	; (8084194 <I2Cx_MspInit+0x154>)
 80840f2:	f043 0302 	orr.w	r3, r3, #2
 80840f6:	6313      	str	r3, [r2, #48]	; 0x30
 80840f8:	4b26      	ldr	r3, [pc, #152]	; (8084194 <I2Cx_MspInit+0x154>)
 80840fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80840fc:	f003 0302 	and.w	r3, r3, #2
 8084100:	613b      	str	r3, [r7, #16]
 8084102:	693b      	ldr	r3, [r7, #16]
		gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8084104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8084108:	61fb      	str	r3, [r7, #28]
		gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 808410a:	2312      	movs	r3, #18
 808410c:	623b      	str	r3, [r7, #32]
		gpio_init_structure.Pull = GPIO_NOPULL;
 808410e:	2300      	movs	r3, #0
 8084110:	627b      	str	r3, [r7, #36]	; 0x24
		gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8084112:	2302      	movs	r3, #2
 8084114:	62bb      	str	r3, [r7, #40]	; 0x28
		gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8084116:	2304      	movs	r3, #4
 8084118:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808411a:	f107 031c 	add.w	r3, r7, #28
 808411e:	4619      	mov	r1, r3
 8084120:	481e      	ldr	r0, [pc, #120]	; (808419c <I2Cx_MspInit+0x15c>)
 8084122:	f006 f851 	bl	808a1c8 <HAL_GPIO_Init>
		gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8084126:	f44f 7300 	mov.w	r3, #512	; 0x200
 808412a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808412c:	f107 031c 	add.w	r3, r7, #28
 8084130:	4619      	mov	r1, r3
 8084132:	481a      	ldr	r0, [pc, #104]	; (808419c <I2Cx_MspInit+0x15c>)
 8084134:	f006 f848 	bl	808a1c8 <HAL_GPIO_Init>
		DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8084138:	4b16      	ldr	r3, [pc, #88]	; (8084194 <I2Cx_MspInit+0x154>)
 808413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808413c:	4a15      	ldr	r2, [pc, #84]	; (8084194 <I2Cx_MspInit+0x154>)
 808413e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8084142:	6413      	str	r3, [r2, #64]	; 0x40
 8084144:	4b13      	ldr	r3, [pc, #76]	; (8084194 <I2Cx_MspInit+0x154>)
 8084146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808414c:	60fb      	str	r3, [r7, #12]
 808414e:	68fb      	ldr	r3, [r7, #12]
		DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8084150:	4b10      	ldr	r3, [pc, #64]	; (8084194 <I2Cx_MspInit+0x154>)
 8084152:	6a1b      	ldr	r3, [r3, #32]
 8084154:	4a0f      	ldr	r2, [pc, #60]	; (8084194 <I2Cx_MspInit+0x154>)
 8084156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 808415a:	6213      	str	r3, [r2, #32]
		DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 808415c:	4b0d      	ldr	r3, [pc, #52]	; (8084194 <I2Cx_MspInit+0x154>)
 808415e:	6a1b      	ldr	r3, [r3, #32]
 8084160:	4a0c      	ldr	r2, [pc, #48]	; (8084194 <I2Cx_MspInit+0x154>)
 8084162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8084166:	6213      	str	r3, [r2, #32]
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8084168:	2200      	movs	r2, #0
 808416a:	210f      	movs	r1, #15
 808416c:	201f      	movs	r0, #31
 808416e:	f005 f8f3 	bl	8089358 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8084172:	201f      	movs	r0, #31
 8084174:	f005 f90c 	bl	8089390 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8084178:	2200      	movs	r2, #0
 808417a:	210f      	movs	r1, #15
 808417c:	2020      	movs	r0, #32
 808417e:	f005 f8eb 	bl	8089358 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8084182:	2020      	movs	r0, #32
 8084184:	f005 f904 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8084188:	bf00      	nop
 808418a:	3730      	adds	r7, #48	; 0x30
 808418c:	46bd      	mov	sp, r7
 808418e:	bd80      	pop	{r7, pc}
 8084190:	2000b58c 	.word	0x2000b58c
 8084194:	40023800 	.word	0x40023800
 8084198:	40021c00 	.word	0x40021c00
 808419c:	40020400 	.word	0x40020400

080841a0 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler : I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80841a0:	b580      	push	{r7, lr}
 80841a2:	b082      	sub	sp, #8
 80841a4:	af00      	add	r7, sp, #0
 80841a6:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80841a8:	6878      	ldr	r0, [r7, #4]
 80841aa:	f006 fe2b 	bl	808ae04 <HAL_I2C_GetState>
 80841ae:	4603      	mov	r3, r0
 80841b0:	2b00      	cmp	r3, #0
 80841b2:	d125      	bne.n	8084200 <I2Cx_Init+0x60>
	{
		if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80841b4:	687b      	ldr	r3, [r7, #4]
 80841b6:	4a14      	ldr	r2, [pc, #80]	; (8084208 <I2Cx_Init+0x68>)
 80841b8:	4293      	cmp	r3, r2
 80841ba:	d103      	bne.n	80841c4 <I2Cx_Init+0x24>
		{
			/* Audio and LCD I2C configuration */
			i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80841bc:	687b      	ldr	r3, [r7, #4]
 80841be:	4a13      	ldr	r2, [pc, #76]	; (808420c <I2Cx_Init+0x6c>)
 80841c0:	601a      	str	r2, [r3, #0]
 80841c2:	e002      	b.n	80841ca <I2Cx_Init+0x2a>
		}
		else
		{
			/* External, camera and Arduino connector  I2C configuration */
			i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80841c4:	687b      	ldr	r3, [r7, #4]
 80841c6:	4a12      	ldr	r2, [pc, #72]	; (8084210 <I2Cx_Init+0x70>)
 80841c8:	601a      	str	r2, [r3, #0]
		}
		i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80841ca:	687b      	ldr	r3, [r7, #4]
 80841cc:	4a11      	ldr	r2, [pc, #68]	; (8084214 <I2Cx_Init+0x74>)
 80841ce:	605a      	str	r2, [r3, #4]
		i2c_handler->Init.OwnAddress1      = 0;
 80841d0:	687b      	ldr	r3, [r7, #4]
 80841d2:	2200      	movs	r2, #0
 80841d4:	609a      	str	r2, [r3, #8]
		i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80841d6:	687b      	ldr	r3, [r7, #4]
 80841d8:	2201      	movs	r2, #1
 80841da:	60da      	str	r2, [r3, #12]
		i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80841dc:	687b      	ldr	r3, [r7, #4]
 80841de:	2200      	movs	r2, #0
 80841e0:	611a      	str	r2, [r3, #16]
		i2c_handler->Init.OwnAddress2      = 0;
 80841e2:	687b      	ldr	r3, [r7, #4]
 80841e4:	2200      	movs	r2, #0
 80841e6:	615a      	str	r2, [r3, #20]
		i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80841e8:	687b      	ldr	r3, [r7, #4]
 80841ea:	2200      	movs	r2, #0
 80841ec:	61da      	str	r2, [r3, #28]
		i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80841ee:	687b      	ldr	r3, [r7, #4]
 80841f0:	2200      	movs	r2, #0
 80841f2:	621a      	str	r2, [r3, #32]

		/* Init the I2C */
		I2Cx_MspInit(i2c_handler);
 80841f4:	6878      	ldr	r0, [r7, #4]
 80841f6:	f7ff ff23 	bl	8084040 <I2Cx_MspInit>
		HAL_I2C_Init(i2c_handler);
 80841fa:	6878      	ldr	r0, [r7, #4]
 80841fc:	f006 fae2 	bl	808a7c4 <HAL_I2C_Init>
	}
}
 8084200:	bf00      	nop
 8084202:	3708      	adds	r7, #8
 8084204:	46bd      	mov	sp, r7
 8084206:	bd80      	pop	{r7, pc}
 8084208:	2000b58c 	.word	0x2000b58c
 808420c:	40005c00 	.word	0x40005c00
 8084210:	40005400 	.word	0x40005400
 8084214:	40912732 	.word	0x40912732

08084218 <I2Cx_ReadMultiple>:
		uint8_t Addr,
		uint16_t Reg,
		uint16_t MemAddress,
		uint8_t *Buffer,
		uint16_t Length)
{
 8084218:	b580      	push	{r7, lr}
 808421a:	b08a      	sub	sp, #40	; 0x28
 808421c:	af04      	add	r7, sp, #16
 808421e:	60f8      	str	r0, [r7, #12]
 8084220:	4608      	mov	r0, r1
 8084222:	4611      	mov	r1, r2
 8084224:	461a      	mov	r2, r3
 8084226:	4603      	mov	r3, r0
 8084228:	72fb      	strb	r3, [r7, #11]
 808422a:	460b      	mov	r3, r1
 808422c:	813b      	strh	r3, [r7, #8]
 808422e:	4613      	mov	r3, r2
 8084230:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8084232:	2300      	movs	r3, #0
 8084234:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8084236:	7afb      	ldrb	r3, [r7, #11]
 8084238:	b299      	uxth	r1, r3
 808423a:	88f8      	ldrh	r0, [r7, #6]
 808423c:	893a      	ldrh	r2, [r7, #8]
 808423e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084242:	9302      	str	r3, [sp, #8]
 8084244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8084246:	9301      	str	r3, [sp, #4]
 8084248:	6a3b      	ldr	r3, [r7, #32]
 808424a:	9300      	str	r3, [sp, #0]
 808424c:	4603      	mov	r3, r0
 808424e:	68f8      	ldr	r0, [r7, #12]
 8084250:	f006 fcb2 	bl	808abb8 <HAL_I2C_Mem_Read>
 8084254:	4603      	mov	r3, r0
 8084256:	75fb      	strb	r3, [r7, #23]

	/* Check the communication status */
	if(status != HAL_OK)
 8084258:	7dfb      	ldrb	r3, [r7, #23]
 808425a:	2b00      	cmp	r3, #0
 808425c:	d004      	beq.n	8084268 <I2Cx_ReadMultiple+0x50>
	{
		/* I2C error occurred */
		I2Cx_Error(i2c_handler, Addr);
 808425e:	7afb      	ldrb	r3, [r7, #11]
 8084260:	4619      	mov	r1, r3
 8084262:	68f8      	ldr	r0, [r7, #12]
 8084264:	f000 f832 	bl	80842cc <I2Cx_Error>
	}
	return status;
 8084268:	7dfb      	ldrb	r3, [r7, #23]
}
 808426a:	4618      	mov	r0, r3
 808426c:	3718      	adds	r7, #24
 808426e:	46bd      	mov	sp, r7
 8084270:	bd80      	pop	{r7, pc}

08084272 <I2Cx_WriteMultiple>:
		uint8_t Addr,
		uint16_t Reg,
		uint16_t MemAddress,
		uint8_t *Buffer,
		uint16_t Length)
{
 8084272:	b580      	push	{r7, lr}
 8084274:	b08a      	sub	sp, #40	; 0x28
 8084276:	af04      	add	r7, sp, #16
 8084278:	60f8      	str	r0, [r7, #12]
 808427a:	4608      	mov	r0, r1
 808427c:	4611      	mov	r1, r2
 808427e:	461a      	mov	r2, r3
 8084280:	4603      	mov	r3, r0
 8084282:	72fb      	strb	r3, [r7, #11]
 8084284:	460b      	mov	r3, r1
 8084286:	813b      	strh	r3, [r7, #8]
 8084288:	4613      	mov	r3, r2
 808428a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 808428c:	2300      	movs	r3, #0
 808428e:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8084290:	7afb      	ldrb	r3, [r7, #11]
 8084292:	b299      	uxth	r1, r3
 8084294:	88f8      	ldrh	r0, [r7, #6]
 8084296:	893a      	ldrh	r2, [r7, #8]
 8084298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808429c:	9302      	str	r3, [sp, #8]
 808429e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80842a0:	9301      	str	r3, [sp, #4]
 80842a2:	6a3b      	ldr	r3, [r7, #32]
 80842a4:	9300      	str	r3, [sp, #0]
 80842a6:	4603      	mov	r3, r0
 80842a8:	68f8      	ldr	r0, [r7, #12]
 80842aa:	f006 fb5f 	bl	808a96c <HAL_I2C_Mem_Write>
 80842ae:	4603      	mov	r3, r0
 80842b0:	75fb      	strb	r3, [r7, #23]

	/* Check the communication status */
	if(status != HAL_OK)
 80842b2:	7dfb      	ldrb	r3, [r7, #23]
 80842b4:	2b00      	cmp	r3, #0
 80842b6:	d004      	beq.n	80842c2 <I2Cx_WriteMultiple+0x50>
	{
		/* Re-Initiaize the I2C Bus */
		I2Cx_Error(i2c_handler, Addr);
 80842b8:	7afb      	ldrb	r3, [r7, #11]
 80842ba:	4619      	mov	r1, r3
 80842bc:	68f8      	ldr	r0, [r7, #12]
 80842be:	f000 f805 	bl	80842cc <I2Cx_Error>
	}
	return status;
 80842c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80842c4:	4618      	mov	r0, r3
 80842c6:	3718      	adds	r7, #24
 80842c8:	46bd      	mov	sp, r7
 80842ca:	bd80      	pop	{r7, pc}

080842cc <I2Cx_Error>:
 * @param  i2c_handler : I2C handler
 * @param  Addr: I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80842cc:	b580      	push	{r7, lr}
 80842ce:	b082      	sub	sp, #8
 80842d0:	af00      	add	r7, sp, #0
 80842d2:	6078      	str	r0, [r7, #4]
 80842d4:	460b      	mov	r3, r1
 80842d6:	70fb      	strb	r3, [r7, #3]
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(i2c_handler);
 80842d8:	6878      	ldr	r0, [r7, #4]
 80842da:	f006 fb03 	bl	808a8e4 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init(i2c_handler);
 80842de:	6878      	ldr	r0, [r7, #4]
 80842e0:	f7ff ff5e 	bl	80841a0 <I2Cx_Init>
}
 80842e4:	bf00      	nop
 80842e6:	3708      	adds	r7, #8
 80842e8:	46bd      	mov	sp, r7
 80842ea:	bd80      	pop	{r7, pc}

080842ec <AUDIO_IO_Init>:
/**
 * @brief  Initializes Audio low level.
 * @retval None
 */
void AUDIO_IO_Init(void) 
{
 80842ec:	b580      	push	{r7, lr}
 80842ee:	af00      	add	r7, sp, #0
	I2Cx_Init(&hI2cAudioHandler);
 80842f0:	4802      	ldr	r0, [pc, #8]	; (80842fc <AUDIO_IO_Init+0x10>)
 80842f2:	f7ff ff55 	bl	80841a0 <I2Cx_Init>
}
 80842f6:	bf00      	nop
 80842f8:	bd80      	pop	{r7, pc}
 80842fa:	bf00      	nop
 80842fc:	2000b58c 	.word	0x2000b58c

08084300 <AUDIO_IO_DeInit>:
/**
 * @brief  Deinitializes Audio low level.
 * @retval None
 */
void AUDIO_IO_DeInit(void)
{
 8084300:	b480      	push	{r7}
 8084302:	af00      	add	r7, sp, #0
}
 8084304:	bf00      	nop
 8084306:	46bd      	mov	sp, r7
 8084308:	f85d 7b04 	ldr.w	r7, [sp], #4
 808430c:	4770      	bx	lr
	...

08084310 <AUDIO_IO_Write>:
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8084310:	b580      	push	{r7, lr}
 8084312:	b086      	sub	sp, #24
 8084314:	af02      	add	r7, sp, #8
 8084316:	4603      	mov	r3, r0
 8084318:	71fb      	strb	r3, [r7, #7]
 808431a:	460b      	mov	r3, r1
 808431c:	80bb      	strh	r3, [r7, #4]
 808431e:	4613      	mov	r3, r2
 8084320:	807b      	strh	r3, [r7, #2]
	uint16_t tmp = Value;
 8084322:	887b      	ldrh	r3, [r7, #2]
 8084324:	81fb      	strh	r3, [r7, #14]

	Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8084326:	89fb      	ldrh	r3, [r7, #14]
 8084328:	0a1b      	lsrs	r3, r3, #8
 808432a:	b29b      	uxth	r3, r3
 808432c:	807b      	strh	r3, [r7, #2]

	Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 808432e:	89fb      	ldrh	r3, [r7, #14]
 8084330:	021b      	lsls	r3, r3, #8
 8084332:	b29b      	uxth	r3, r3
 8084334:	b21a      	sxth	r2, r3
 8084336:	887b      	ldrh	r3, [r7, #2]
 8084338:	b21b      	sxth	r3, r3
 808433a:	4313      	orrs	r3, r2
 808433c:	b21b      	sxth	r3, r3
 808433e:	b29b      	uxth	r3, r3
 8084340:	807b      	strh	r3, [r7, #2]

	I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8084342:	88ba      	ldrh	r2, [r7, #4]
 8084344:	79f9      	ldrb	r1, [r7, #7]
 8084346:	2302      	movs	r3, #2
 8084348:	9301      	str	r3, [sp, #4]
 808434a:	1cbb      	adds	r3, r7, #2
 808434c:	9300      	str	r3, [sp, #0]
 808434e:	2302      	movs	r3, #2
 8084350:	4803      	ldr	r0, [pc, #12]	; (8084360 <AUDIO_IO_Write+0x50>)
 8084352:	f7ff ff8e 	bl	8084272 <I2Cx_WriteMultiple>
}
 8084356:	bf00      	nop
 8084358:	3710      	adds	r7, #16
 808435a:	46bd      	mov	sp, r7
 808435c:	bd80      	pop	{r7, pc}
 808435e:	bf00      	nop
 8084360:	2000b58c 	.word	0x2000b58c

08084364 <AUDIO_IO_Read>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8084364:	b580      	push	{r7, lr}
 8084366:	b086      	sub	sp, #24
 8084368:	af02      	add	r7, sp, #8
 808436a:	4603      	mov	r3, r0
 808436c:	460a      	mov	r2, r1
 808436e:	71fb      	strb	r3, [r7, #7]
 8084370:	4613      	mov	r3, r2
 8084372:	80bb      	strh	r3, [r7, #4]
	uint16_t read_value = 0, tmp = 0;
 8084374:	2300      	movs	r3, #0
 8084376:	81bb      	strh	r3, [r7, #12]
 8084378:	2300      	movs	r3, #0
 808437a:	81fb      	strh	r3, [r7, #14]

	I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 808437c:	88ba      	ldrh	r2, [r7, #4]
 808437e:	79f9      	ldrb	r1, [r7, #7]
 8084380:	2302      	movs	r3, #2
 8084382:	9301      	str	r3, [sp, #4]
 8084384:	f107 030c 	add.w	r3, r7, #12
 8084388:	9300      	str	r3, [sp, #0]
 808438a:	2302      	movs	r3, #2
 808438c:	480a      	ldr	r0, [pc, #40]	; (80843b8 <AUDIO_IO_Read+0x54>)
 808438e:	f7ff ff43 	bl	8084218 <I2Cx_ReadMultiple>

	tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8084392:	89bb      	ldrh	r3, [r7, #12]
 8084394:	0a1b      	lsrs	r3, r3, #8
 8084396:	81fb      	strh	r3, [r7, #14]

	tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8084398:	89bb      	ldrh	r3, [r7, #12]
 808439a:	021b      	lsls	r3, r3, #8
 808439c:	b29b      	uxth	r3, r3
 808439e:	b21a      	sxth	r2, r3
 80843a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80843a4:	4313      	orrs	r3, r2
 80843a6:	b21b      	sxth	r3, r3
 80843a8:	81fb      	strh	r3, [r7, #14]

	read_value = tmp;
 80843aa:	89fb      	ldrh	r3, [r7, #14]
 80843ac:	81bb      	strh	r3, [r7, #12]

	return read_value;
 80843ae:	89bb      	ldrh	r3, [r7, #12]
}
 80843b0:	4618      	mov	r0, r3
 80843b2:	3710      	adds	r7, #16
 80843b4:	46bd      	mov	sp, r7
 80843b6:	bd80      	pop	{r7, pc}
 80843b8:	2000b58c 	.word	0x2000b58c

080843bc <AUDIO_IO_Delay>:
 * @brief  AUDIO Codec delay
 * @param  Delay: Delay in ms
 * @retval None
 */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80843bc:	b580      	push	{r7, lr}
 80843be:	b082      	sub	sp, #8
 80843c0:	af00      	add	r7, sp, #0
 80843c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 80843c4:	6878      	ldr	r0, [r7, #4]
 80843c6:	f004 fed7 	bl	8089178 <HAL_Delay>
}
 80843ca:	bf00      	nop
 80843cc:	3708      	adds	r7, #8
 80843ce:	46bd      	mov	sp, r7
 80843d0:	bd80      	pop	{r7, pc}
	...

080843d4 <TS_IO_Init>:
/**
 * @brief  Initializes Touchscreen low level.
 * @retval None
 */
void TS_IO_Init(void)
{
 80843d4:	b580      	push	{r7, lr}
 80843d6:	af00      	add	r7, sp, #0
	I2Cx_Init(&hI2cAudioHandler);
 80843d8:	4802      	ldr	r0, [pc, #8]	; (80843e4 <TS_IO_Init+0x10>)
 80843da:	f7ff fee1 	bl	80841a0 <I2Cx_Init>
}
 80843de:	bf00      	nop
 80843e0:	bd80      	pop	{r7, pc}
 80843e2:	bf00      	nop
 80843e4:	2000b58c 	.word	0x2000b58c

080843e8 <TS_IO_Write>:
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80843e8:	b580      	push	{r7, lr}
 80843ea:	b084      	sub	sp, #16
 80843ec:	af02      	add	r7, sp, #8
 80843ee:	4603      	mov	r3, r0
 80843f0:	71fb      	strb	r3, [r7, #7]
 80843f2:	460b      	mov	r3, r1
 80843f4:	71bb      	strb	r3, [r7, #6]
 80843f6:	4613      	mov	r3, r2
 80843f8:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80843fa:	79bb      	ldrb	r3, [r7, #6]
 80843fc:	b29a      	uxth	r2, r3
 80843fe:	79f9      	ldrb	r1, [r7, #7]
 8084400:	2301      	movs	r3, #1
 8084402:	9301      	str	r3, [sp, #4]
 8084404:	1d7b      	adds	r3, r7, #5
 8084406:	9300      	str	r3, [sp, #0]
 8084408:	2301      	movs	r3, #1
 808440a:	4803      	ldr	r0, [pc, #12]	; (8084418 <TS_IO_Write+0x30>)
 808440c:	f7ff ff31 	bl	8084272 <I2Cx_WriteMultiple>
}
 8084410:	bf00      	nop
 8084412:	3708      	adds	r7, #8
 8084414:	46bd      	mov	sp, r7
 8084416:	bd80      	pop	{r7, pc}
 8084418:	2000b58c 	.word	0x2000b58c

0808441c <TS_IO_Read>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 808441c:	b580      	push	{r7, lr}
 808441e:	b086      	sub	sp, #24
 8084420:	af02      	add	r7, sp, #8
 8084422:	4603      	mov	r3, r0
 8084424:	460a      	mov	r2, r1
 8084426:	71fb      	strb	r3, [r7, #7]
 8084428:	4613      	mov	r3, r2
 808442a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_value = 0;
 808442c:	2300      	movs	r3, #0
 808442e:	73fb      	strb	r3, [r7, #15]

	I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8084430:	79bb      	ldrb	r3, [r7, #6]
 8084432:	b29a      	uxth	r2, r3
 8084434:	79f9      	ldrb	r1, [r7, #7]
 8084436:	2301      	movs	r3, #1
 8084438:	9301      	str	r3, [sp, #4]
 808443a:	f107 030f 	add.w	r3, r7, #15
 808443e:	9300      	str	r3, [sp, #0]
 8084440:	2301      	movs	r3, #1
 8084442:	4804      	ldr	r0, [pc, #16]	; (8084454 <TS_IO_Read+0x38>)
 8084444:	f7ff fee8 	bl	8084218 <I2Cx_ReadMultiple>

	return read_value;
 8084448:	7bfb      	ldrb	r3, [r7, #15]
}
 808444a:	4618      	mov	r0, r3
 808444c:	3710      	adds	r7, #16
 808444e:	46bd      	mov	sp, r7
 8084450:	bd80      	pop	{r7, pc}
 8084452:	bf00      	nop
 8084454:	2000b58c 	.word	0x2000b58c

08084458 <TS_IO_Delay>:
 * @brief  TS delay
 * @param  Delay: Delay in ms
 * @retval None
 */
void TS_IO_Delay(uint32_t Delay)
{
 8084458:	b580      	push	{r7, lr}
 808445a:	b082      	sub	sp, #8
 808445c:	af00      	add	r7, sp, #0
 808445e:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8084460:	6878      	ldr	r0, [r7, #4]
 8084462:	f004 fe89 	bl	8089178 <HAL_Delay>
}
 8084466:	bf00      	nop
 8084468:	3708      	adds	r7, #8
 808446a:	46bd      	mov	sp, r7
 808446c:	bd80      	pop	{r7, pc}
	...

08084470 <HAL_UART_RxCpltCallback>:

/**************************** COMx *****************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8084470:	b580      	push	{r7, lr}
 8084472:	b082      	sub	sp, #8
 8084474:	af00      	add	r7, sp, #0
 8084476:	6078      	str	r0, [r7, #4]
	if (huart->Instance == COM_USART[COM1])
 8084478:	687b      	ldr	r3, [r7, #4]
 808447a:	681a      	ldr	r2, [r3, #0]
 808447c:	4b0a      	ldr	r3, [pc, #40]	; (80844a8 <HAL_UART_RxCpltCallback+0x38>)
 808447e:	681b      	ldr	r3, [r3, #0]
 8084480:	429a      	cmp	r2, r3
 8084482:	d10d      	bne.n	80844a0 <HAL_UART_RxCpltCallback+0x30>
		BSP_STDIO_DataReceived	((char*)(huart->pRxBuffPtr-huart->RxXferSize), huart->RxXferSize);
 8084484:	687b      	ldr	r3, [r7, #4]
 8084486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8084488:	687b      	ldr	r3, [r7, #4]
 808448a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 808448e:	425b      	negs	r3, r3
 8084490:	441a      	add	r2, r3
 8084492:	687b      	ldr	r3, [r7, #4]
 8084494:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8084498:	4619      	mov	r1, r3
 808449a:	4610      	mov	r0, r2
 808449c:	f004 fb32 	bl	8088b04 <BSP_STDIO_DataReceived>
}
 80844a0:	bf00      	nop
 80844a2:	3708      	adds	r7, #8
 80844a4:	46bd      	mov	sp, r7
 80844a6:	bd80      	pop	{r7, pc}
 80844a8:	2000b068 	.word	0x2000b068

080844ac <BSP_ACC_GYRO_Init>:
/**
 * @brief  Initializes interface for magnetic sensor.
 * @retval Initialization status
 */
uint8_t BSP_ACC_GYRO_Init(void)
{ 
 80844ac:	b580      	push	{r7, lr}
 80844ae:	b082      	sub	sp, #8
 80844b0:	af00      	add	r7, sp, #0
	uint8_t whoamI,rst;
	//lsm6ds3_int1_route_t int_1_reg;

	/* I2C Configuration */
	I2CHandle.Instance = ACC_GYRO_I2Cx;
 80844b2:	4b34      	ldr	r3, [pc, #208]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844b4:	4a34      	ldr	r2, [pc, #208]	; (8084588 <BSP_ACC_GYRO_Init+0xdc>)
 80844b6:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_I2C_DeInit(&I2CHandle) != HAL_OK)
 80844b8:	4832      	ldr	r0, [pc, #200]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844ba:	f006 fa13 	bl	808a8e4 <HAL_I2C_DeInit>
 80844be:	4603      	mov	r3, r0
 80844c0:	2b00      	cmp	r3, #0
 80844c2:	d001      	beq.n	80844c8 <BSP_ACC_GYRO_Init+0x1c>
	{
		return ACC_ERROR;
 80844c4:	2301      	movs	r3, #1
 80844c6:	e059      	b.n	808457c <BSP_ACC_GYRO_Init+0xd0>
	}

	/* System level initialization */
	BSP_ACC_GYRO_MspInit();
 80844c8:	f000 f9b4 	bl	8084834 <BSP_ACC_GYRO_MspInit>

	I2CHandle.Init.Timing          = ACC_GYRO_I2C_TIMING;
 80844cc:	4b2d      	ldr	r3, [pc, #180]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844ce:	4a2f      	ldr	r2, [pc, #188]	; (808458c <BSP_ACC_GYRO_Init+0xe0>)
 80844d0:	605a      	str	r2, [r3, #4]
	I2CHandle.Init.OwnAddress1     = 0xFF;
 80844d2:	4b2c      	ldr	r3, [pc, #176]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844d4:	22ff      	movs	r2, #255	; 0xff
 80844d6:	609a      	str	r2, [r3, #8]
	I2CHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80844d8:	4b2a      	ldr	r3, [pc, #168]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844da:	2201      	movs	r2, #1
 80844dc:	60da      	str	r2, [r3, #12]
	I2CHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80844de:	4b29      	ldr	r3, [pc, #164]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844e0:	2200      	movs	r2, #0
 80844e2:	611a      	str	r2, [r3, #16]
	I2CHandle.Init.OwnAddress2     = 0xFF;
 80844e4:	4b27      	ldr	r3, [pc, #156]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844e6:	22ff      	movs	r2, #255	; 0xff
 80844e8:	615a      	str	r2, [r3, #20]
	I2CHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80844ea:	4b26      	ldr	r3, [pc, #152]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844ec:	2200      	movs	r2, #0
 80844ee:	61da      	str	r2, [r3, #28]
	I2CHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80844f0:	4b24      	ldr	r3, [pc, #144]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844f2:	2200      	movs	r2, #0
 80844f4:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 80844f6:	4823      	ldr	r0, [pc, #140]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 80844f8:	f006 f964 	bl	808a7c4 <HAL_I2C_Init>
 80844fc:	4603      	mov	r3, r0
 80844fe:	2b00      	cmp	r3, #0
 8084500:	d001      	beq.n	8084506 <BSP_ACC_GYRO_Init+0x5a>
	{
		return ACC_ERROR;
 8084502:	2301      	movs	r3, #1
 8084504:	e03a      	b.n	808457c <BSP_ACC_GYRO_Init+0xd0>
	}

	/* Enable the Analog I2C Filter */
	HAL_I2CEx_ConfigAnalogFilter(&I2CHandle,I2C_ANALOGFILTER_ENABLE);
 8084506:	2100      	movs	r1, #0
 8084508:	481e      	ldr	r0, [pc, #120]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 808450a:	f006 feaf 	bl	808b26c <HAL_I2CEx_ConfigAnalogFilter>

	sensorCtx.write_reg = platform_write;
 808450e:	4b20      	ldr	r3, [pc, #128]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084510:	4a20      	ldr	r2, [pc, #128]	; (8084594 <BSP_ACC_GYRO_Init+0xe8>)
 8084512:	601a      	str	r2, [r3, #0]
	sensorCtx.read_reg = platform_read;
 8084514:	4b1e      	ldr	r3, [pc, #120]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084516:	4a20      	ldr	r2, [pc, #128]	; (8084598 <BSP_ACC_GYRO_Init+0xec>)
 8084518:	605a      	str	r2, [r3, #4]
	sensorCtx.handle = &I2CHandle;
 808451a:	4b1d      	ldr	r3, [pc, #116]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 808451c:	4a19      	ldr	r2, [pc, #100]	; (8084584 <BSP_ACC_GYRO_Init+0xd8>)
 808451e:	609a      	str	r2, [r3, #8]

	/*
	 *  Check device ID
	 */
	lsm6ds3_device_id_get(&sensorCtx, &whoamI);
 8084520:	1dfb      	adds	r3, r7, #7
 8084522:	4619      	mov	r1, r3
 8084524:	481a      	ldr	r0, [pc, #104]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084526:	f7fe f8c1 	bl	80826ac <lsm6ds3_device_id_get>
	if (whoamI != LSM6DS3_ID)
 808452a:	79fb      	ldrb	r3, [r7, #7]
 808452c:	2b69      	cmp	r3, #105	; 0x69
 808452e:	d001      	beq.n	8084534 <BSP_ACC_GYRO_Init+0x88>
	{
		return ACC_ERROR;
 8084530:	2301      	movs	r3, #1
 8084532:	e023      	b.n	808457c <BSP_ACC_GYRO_Init+0xd0>
	}

	/*
	 * Restore default configuration
	 */
	lsm6ds3_reset_set(&sensorCtx, PROPERTY_ENABLE);
 8084534:	2101      	movs	r1, #1
 8084536:	4816      	ldr	r0, [pc, #88]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084538:	f7fe f8c9 	bl	80826ce <lsm6ds3_reset_set>
	do {
		lsm6ds3_reset_get(&sensorCtx, &rst);
 808453c:	1dbb      	adds	r3, r7, #6
 808453e:	4619      	mov	r1, r3
 8084540:	4813      	ldr	r0, [pc, #76]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084542:	f7fe f8ea 	bl	808271a <lsm6ds3_reset_get>
	} while (rst);
 8084546:	79bb      	ldrb	r3, [r7, #6]
 8084548:	2b00      	cmp	r3, #0
 808454a:	d1f7      	bne.n	808453c <BSP_ACC_GYRO_Init+0x90>

	/*
	 * Enable Block Data Update
	 */
	lsm6ds3_block_data_update_set(&sensorCtx, PROPERTY_ENABLE);
 808454c:	2101      	movs	r1, #1
 808454e:	4810      	ldr	r0, [pc, #64]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084550:	f7fe f808 	bl	8082564 <lsm6ds3_block_data_update_set>

	/*
	 * Set full scale
	 */
	lsm6ds3_xl_full_scale_set(&sensorCtx, LSM6DS3_4g);
 8084554:	2102      	movs	r1, #2
 8084556:	480e      	ldr	r0, [pc, #56]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084558:	f7fd ff6c 	bl	8082434 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_gy_full_scale_set(&sensorCtx, LSM6DS3_1000dps);
 808455c:	2104      	movs	r1, #4
 808455e:	480c      	ldr	r0, [pc, #48]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084560:	f7fd ffb4 	bl	80824cc <lsm6ds3_gy_full_scale_set>

	/*
	 * Set Output Data Rate
	 */
	lsm6ds3_xl_data_rate_set(&sensorCtx, LSM6DS3_XL_ODR_833Hz);
 8084564:	2107      	movs	r1, #7
 8084566:	480a      	ldr	r0, [pc, #40]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084568:	f7fd ff8a 	bl	8082480 <lsm6ds3_xl_data_rate_set>
	lsm6ds3_gy_data_rate_set(&sensorCtx, LSM6DS3_GY_ODR_833Hz);
 808456c:	2107      	movs	r1, #7
 808456e:	4808      	ldr	r0, [pc, #32]	; (8084590 <BSP_ACC_GYRO_Init+0xe4>)
 8084570:	f7fd ffd2 	bl	8082518 <lsm6ds3_gy_data_rate_set>
	//	lsm6ds3_pin_int1_route_get(&sensorCtx, &int_1_reg);
	//	int_1_reg.int1_drdy_g = PROPERTY_ENABLE;
	//	int_1_reg.int1_drdy_xl = PROPERTY_ENABLE;
	//	lsm6ds3_pin_int1_route_set(&sensorCtx, &int_1_reg);

	accSensorEnabled = 1;
 8084574:	4b09      	ldr	r3, [pc, #36]	; (808459c <BSP_ACC_GYRO_Init+0xf0>)
 8084576:	2201      	movs	r2, #1
 8084578:	701a      	strb	r2, [r3, #0]
	return ACC_OK;
 808457a:	2300      	movs	r3, #0
}
 808457c:	4618      	mov	r0, r3
 808457e:	3708      	adds	r7, #8
 8084580:	46bd      	mov	sp, r7
 8084582:	bd80      	pop	{r7, pc}
 8084584:	2000b5d8 	.word	0x2000b5d8
 8084588:	40005400 	.word	0x40005400
 808458c:	40912732 	.word	0x40912732
 8084590:	2002d7ec 	.word	0x2002d7ec
 8084594:	080847c1 	.word	0x080847c1
 8084598:	080847fb 	.word	0x080847fb
 808459c:	2000b624 	.word	0x2000b624

080845a0 <BSP_ACC_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t BSP_ACC_ReadRawValues(axis3bit16_t *data_raw_acceleration)
{
 80845a0:	b580      	push	{r7, lr}
 80845a2:	b084      	sub	sp, #16
 80845a4:	af00      	add	r7, sp, #0
 80845a6:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 80845a8:	2300      	movs	r3, #0
 80845aa:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 80845ac:	4b10      	ldr	r3, [pc, #64]	; (80845f0 <BSP_ACC_ReadRawValues+0x50>)
 80845ae:	781b      	ldrb	r3, [r3, #0]
 80845b0:	2b00      	cmp	r3, #0
 80845b2:	d016      	beq.n	80845e2 <BSP_ACC_ReadRawValues+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80845b4:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read status register
		 */
		lsm6ds3_xl_flag_data_ready_get(&sensorCtx, &reg);
 80845b6:	f107 030e 	add.w	r3, r7, #14
 80845ba:	4619      	mov	r1, r3
 80845bc:	480d      	ldr	r0, [pc, #52]	; (80845f4 <BSP_ACC_ReadRawValues+0x54>)
 80845be:	f7fd fff7 	bl	80825b0 <lsm6ds3_xl_flag_data_ready_get>

		if (reg)
 80845c2:	7bbb      	ldrb	r3, [r7, #14]
 80845c4:	2b00      	cmp	r3, #0
 80845c6:	d00a      	beq.n	80845de <BSP_ACC_ReadRawValues+0x3e>
		{
			/*
			 * Read accelerometer field data
			 */
			memset(data_raw_acceleration->u8bit, 0, 3 * sizeof(int16_t));
 80845c8:	687b      	ldr	r3, [r7, #4]
 80845ca:	2206      	movs	r2, #6
 80845cc:	2100      	movs	r1, #0
 80845ce:	4618      	mov	r0, r3
 80845d0:	f017 fc23 	bl	809be1a <memset>
			lsm6ds3_acceleration_raw_get(&sensorCtx, data_raw_acceleration->u8bit);
 80845d4:	687b      	ldr	r3, [r7, #4]
 80845d6:	4619      	mov	r1, r3
 80845d8:	4806      	ldr	r0, [pc, #24]	; (80845f4 <BSP_ACC_ReadRawValues+0x54>)
 80845da:	f7fe f856 	bl	808268a <lsm6ds3_acceleration_raw_get>
  __ASM volatile ("cpsie i" : : : "memory");
 80845de:	b662      	cpsie	i
 80845e0:	e001      	b.n	80845e6 <BSP_ACC_ReadRawValues+0x46>
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80845e2:	2301      	movs	r3, #1
 80845e4:	73fb      	strb	r3, [r7, #15]

	return status;
 80845e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80845e8:	4618      	mov	r0, r3
 80845ea:	3710      	adds	r7, #16
 80845ec:	46bd      	mov	sp, r7
 80845ee:	bd80      	pop	{r7, pc}
 80845f0:	2000b624 	.word	0x2000b624
 80845f4:	2002d7ec 	.word	0x2002d7ec

080845f8 <BSP_GYRO_ReadRawValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t BSP_GYRO_ReadRawValues(axis3bit16_t *data_raw_angular_rate)
{
 80845f8:	b580      	push	{r7, lr}
 80845fa:	b084      	sub	sp, #16
 80845fc:	af00      	add	r7, sp, #0
 80845fe:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8084600:	2300      	movs	r3, #0
 8084602:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	if (accSensorEnabled)
 8084604:	4b10      	ldr	r3, [pc, #64]	; (8084648 <BSP_GYRO_ReadRawValues+0x50>)
 8084606:	781b      	ldrb	r3, [r3, #0]
 8084608:	2b00      	cmp	r3, #0
 808460a:	d016      	beq.n	808463a <BSP_GYRO_ReadRawValues+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 808460c:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		lsm6ds3_gy_flag_data_ready_get(&sensorCtx, &reg);
 808460e:	f107 030e 	add.w	r3, r7, #14
 8084612:	4619      	mov	r1, r3
 8084614:	480d      	ldr	r0, [pc, #52]	; (808464c <BSP_GYRO_ReadRawValues+0x54>)
 8084616:	f7fd ffe4 	bl	80825e2 <lsm6ds3_gy_flag_data_ready_get>

		if (reg)
 808461a:	7bbb      	ldrb	r3, [r7, #14]
 808461c:	2b00      	cmp	r3, #0
 808461e:	d00a      	beq.n	8084636 <BSP_GYRO_ReadRawValues+0x3e>
		{
			/*
			 * Read gyroscope field data
			 */
			memset(data_raw_angular_rate->u8bit, 0, 3 * sizeof(int16_t));
 8084620:	687b      	ldr	r3, [r7, #4]
 8084622:	2206      	movs	r2, #6
 8084624:	2100      	movs	r1, #0
 8084626:	4618      	mov	r0, r3
 8084628:	f017 fbf7 	bl	809be1a <memset>
			lsm6ds3_angular_rate_raw_get(&sensorCtx, data_raw_angular_rate->u8bit);
 808462c:	687b      	ldr	r3, [r7, #4]
 808462e:	4619      	mov	r1, r3
 8084630:	4806      	ldr	r0, [pc, #24]	; (808464c <BSP_GYRO_ReadRawValues+0x54>)
 8084632:	f7fe f819 	bl	8082668 <lsm6ds3_angular_rate_raw_get>
  __ASM volatile ("cpsie i" : : : "memory");
 8084636:	b662      	cpsie	i
 8084638:	e001      	b.n	808463e <BSP_GYRO_ReadRawValues+0x46>
		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 808463a:	2301      	movs	r3, #1
 808463c:	73fb      	strb	r3, [r7, #15]

	return status;
 808463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8084640:	4618      	mov	r0, r3
 8084642:	3710      	adds	r7, #16
 8084644:	46bd      	mov	sp, r7
 8084646:	bd80      	pop	{r7, pc}
 8084648:	2000b624 	.word	0x2000b624
 808464c:	2002d7ec 	.word	0x2002d7ec

08084650 <BSP_ACC_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t BSP_ACC_ReadValues(acceleration_t *acceleration)
{
 8084650:	b580      	push	{r7, lr}
 8084652:	b084      	sub	sp, #16
 8084654:	af00      	add	r7, sp, #0
 8084656:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_acceleration;
	uint8_t status= ACC_OK;
 8084658:	2300      	movs	r3, #0
 808465a:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 808465c:	4b1a      	ldr	r3, [pc, #104]	; (80846c8 <BSP_ACC_ReadValues+0x78>)
 808465e:	781b      	ldrb	r3, [r3, #0]
 8084660:	2b00      	cmp	r3, #0
 8084662:	d02a      	beq.n	80846ba <BSP_ACC_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 8084664:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = BSP_ACC_ReadRawValues(&data_raw_acceleration);
 8084666:	f107 0308 	add.w	r3, r7, #8
 808466a:	4618      	mov	r0, r3
 808466c:	f7ff ff98 	bl	80845a0 <BSP_ACC_ReadRawValues>
 8084670:	4603      	mov	r3, r0
 8084672:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 8084674:	7bfb      	ldrb	r3, [r7, #15]
 8084676:	2b00      	cmp	r3, #0
 8084678:	d11d      	bne.n	80846b6 <BSP_ACC_ReadValues+0x66>
		{
			acceleration->x =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
 808467a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 808467e:	4618      	mov	r0, r3
 8084680:	f7fd fe86 	bl	8082390 <lsm6ds3_from_fs2g_to_mg>
 8084684:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->x =
 8084688:	687b      	ldr	r3, [r7, #4]
 808468a:	edc3 7a00 	vstr	s15, [r3]
			acceleration->y =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
 808468e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8084692:	4618      	mov	r0, r3
 8084694:	f7fd fe7c 	bl	8082390 <lsm6ds3_from_fs2g_to_mg>
 8084698:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->y =
 808469c:	687b      	ldr	r3, [r7, #4]
 808469e:	edc3 7a01 	vstr	s15, [r3, #4]
			acceleration->z =
					lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
 80846a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80846a6:	4618      	mov	r0, r3
 80846a8:	f7fd fe72 	bl	8082390 <lsm6ds3_from_fs2g_to_mg>
 80846ac:	eef0 7a40 	vmov.f32	s15, s0
			acceleration->z =
 80846b0:	687b      	ldr	r3, [r7, #4]
 80846b2:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80846b6:	b662      	cpsie	i
 80846b8:	e001      	b.n	80846be <BSP_ACC_ReadValues+0x6e>

		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80846ba:	2301      	movs	r3, #1
 80846bc:	73fb      	strb	r3, [r7, #15]

	return status;
 80846be:	7bfb      	ldrb	r3, [r7, #15]
}
 80846c0:	4618      	mov	r0, r3
 80846c2:	3710      	adds	r7, #16
 80846c4:	46bd      	mov	sp, r7
 80846c6:	bd80      	pop	{r7, pc}
 80846c8:	2000b624 	.word	0x2000b624

080846cc <BSP_GYRO_ReadValues>:
/**
 * @brief  Reads acceleration values
 * @retval Read status
 */
uint8_t BSP_GYRO_ReadValues(angularRate_t *angular_rate)
{
 80846cc:	b580      	push	{r7, lr}
 80846ce:	b084      	sub	sp, #16
 80846d0:	af00      	add	r7, sp, #0
 80846d2:	6078      	str	r0, [r7, #4]
	axis3bit16_t data_raw_angular_rate;
	uint8_t status= ACC_OK;
 80846d4:	2300      	movs	r3, #0
 80846d6:	73fb      	strb	r3, [r7, #15]

	if (accSensorEnabled)
 80846d8:	4b1a      	ldr	r3, [pc, #104]	; (8084744 <BSP_GYRO_ReadValues+0x78>)
 80846da:	781b      	ldrb	r3, [r3, #0]
 80846dc:	2b00      	cmp	r3, #0
 80846de:	d02a      	beq.n	8084736 <BSP_GYRO_ReadValues+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 80846e0:	b672      	cpsid	i
	{
		/* TODO: Supprimer apres test */
		__disable_irq(); // Set PRIMASK

		status = BSP_GYRO_ReadRawValues(&data_raw_angular_rate);
 80846e2:	f107 0308 	add.w	r3, r7, #8
 80846e6:	4618      	mov	r0, r3
 80846e8:	f7ff ff86 	bl	80845f8 <BSP_GYRO_ReadRawValues>
 80846ec:	4603      	mov	r3, r0
 80846ee:	73fb      	strb	r3, [r7, #15]

		if (status == ACC_OK)
 80846f0:	7bfb      	ldrb	r3, [r7, #15]
 80846f2:	2b00      	cmp	r3, #0
 80846f4:	d11d      	bne.n	8084732 <BSP_GYRO_ReadValues+0x66>
			/*
			 * Read gyroscope field data
			 */

			angular_rate->x =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 80846f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80846fa:	4618      	mov	r0, r3
 80846fc:	f7fd fe68 	bl	80823d0 <lsm6ds3_from_fs2000dps_to_mdps>
 8084700:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->x =
 8084704:	687b      	ldr	r3, [r7, #4]
 8084706:	edc3 7a00 	vstr	s15, [r3]
			angular_rate->y =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 808470a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 808470e:	4618      	mov	r0, r3
 8084710:	f7fd fe5e 	bl	80823d0 <lsm6ds3_from_fs2000dps_to_mdps>
 8084714:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->y =
 8084718:	687b      	ldr	r3, [r7, #4]
 808471a:	edc3 7a01 	vstr	s15, [r3, #4]
			angular_rate->z =
					lsm6ds3_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 808471e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8084722:	4618      	mov	r0, r3
 8084724:	f7fd fe54 	bl	80823d0 <lsm6ds3_from_fs2000dps_to_mdps>
 8084728:	eef0 7a40 	vmov.f32	s15, s0
			angular_rate->z =
 808472c:	687b      	ldr	r3, [r7, #4]
 808472e:	edc3 7a02 	vstr	s15, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8084732:	b662      	cpsie	i
 8084734:	e001      	b.n	808473a <BSP_GYRO_ReadValues+0x6e>

		}

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 8084736:	2301      	movs	r3, #1
 8084738:	73fb      	strb	r3, [r7, #15]

	return status;
 808473a:	7bfb      	ldrb	r3, [r7, #15]
}
 808473c:	4618      	mov	r0, r3
 808473e:	3710      	adds	r7, #16
 8084740:	46bd      	mov	sp, r7
 8084742:	bd80      	pop	{r7, pc}
 8084744:	2000b624 	.word	0x2000b624

08084748 <BSP_ACC_ReadTemperature>:
/**
 * @brief  Reads T° values in °C
 * @retval Read status
 */
uint8_t BSP_ACC_ReadTemperature(float *temperature_degC)
{
 8084748:	b580      	push	{r7, lr}
 808474a:	b084      	sub	sp, #16
 808474c:	af00      	add	r7, sp, #0
 808474e:	6078      	str	r0, [r7, #4]
	uint8_t status= ACC_OK;
 8084750:	2300      	movs	r3, #0
 8084752:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	axis1bit16_t data_raw_temperature;

	if (accSensorEnabled)
 8084754:	4b18      	ldr	r3, [pc, #96]	; (80847b8 <BSP_ACC_ReadTemperature+0x70>)
 8084756:	781b      	ldrb	r3, [r3, #0]
 8084758:	2b00      	cmp	r3, #0
 808475a:	d025      	beq.n	80847a8 <BSP_ACC_ReadTemperature+0x60>
  __ASM volatile ("cpsid i" : : : "memory");
 808475c:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read output only if new value is available
		 */
		lsm6ds3_temp_flag_data_ready_get(&sensorCtx, &reg);
 808475e:	f107 030e 	add.w	r3, r7, #14
 8084762:	4619      	mov	r1, r3
 8084764:	4815      	ldr	r0, [pc, #84]	; (80847bc <BSP_ACC_ReadTemperature+0x74>)
 8084766:	f7fd ff55 	bl	8082614 <lsm6ds3_temp_flag_data_ready_get>

		if (reg)
 808476a:	7bbb      	ldrb	r3, [r7, #14]
 808476c:	2b00      	cmp	r3, #0
 808476e:	d017      	beq.n	80847a0 <BSP_ACC_ReadTemperature+0x58>
		{
			/*
			 * Read temperature data
			 */
			memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8084770:	f107 030c 	add.w	r3, r7, #12
 8084774:	2202      	movs	r2, #2
 8084776:	2100      	movs	r1, #0
 8084778:	4618      	mov	r0, r3
 808477a:	f017 fb4e 	bl	809be1a <memset>
			lsm6ds3_temperature_raw_get(&sensorCtx, data_raw_temperature.u8bit);
 808477e:	f107 030c 	add.w	r3, r7, #12
 8084782:	4619      	mov	r1, r3
 8084784:	480d      	ldr	r0, [pc, #52]	; (80847bc <BSP_ACC_ReadTemperature+0x74>)
 8084786:	f7fd ff5e 	bl	8082646 <lsm6ds3_temperature_raw_get>
			*temperature_degC = lsm6ds3_from_lsb_to_celsius(data_raw_temperature.i16bit);
 808478a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 808478e:	4618      	mov	r0, r3
 8084790:	f7fd fe36 	bl	8082400 <lsm6ds3_from_lsb_to_celsius>
 8084794:	eef0 7a40 	vmov.f32	s15, s0
 8084798:	687b      	ldr	r3, [r7, #4]
 808479a:	edc3 7a00 	vstr	s15, [r3]
 808479e:	e001      	b.n	80847a4 <BSP_ACC_ReadTemperature+0x5c>

		}
		else
		{
			status =  ACC_NO_DATA;
 80847a0:	2303      	movs	r3, #3
 80847a2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80847a4:	b662      	cpsie	i
 80847a6:	e001      	b.n	80847ac <BSP_ACC_ReadTemperature+0x64>



		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	} else status = ACC_ERROR;
 80847a8:	2301      	movs	r3, #1
 80847aa:	73fb      	strb	r3, [r7, #15]

	return status;
 80847ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80847ae:	4618      	mov	r0, r3
 80847b0:	3710      	adds	r7, #16
 80847b2:	46bd      	mov	sp, r7
 80847b4:	bd80      	pop	{r7, pc}
 80847b6:	bf00      	nop
 80847b8:	2000b624 	.word	0x2000b624
 80847bc:	2002d7ec 	.word	0x2002d7ec

080847c0 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80847c0:	b580      	push	{r7, lr}
 80847c2:	b088      	sub	sp, #32
 80847c4:	af04      	add	r7, sp, #16
 80847c6:	60f8      	str	r0, [r7, #12]
 80847c8:	607a      	str	r2, [r7, #4]
 80847ca:	461a      	mov	r2, r3
 80847cc:	460b      	mov	r3, r1
 80847ce:	72fb      	strb	r3, [r7, #11]
 80847d0:	4613      	mov	r3, r2
 80847d2:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Write(handle, LSM6DS3_I2C_ADD_H, reg,
 80847d4:	7afb      	ldrb	r3, [r7, #11]
 80847d6:	b29a      	uxth	r2, r3
 80847d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80847dc:	9302      	str	r3, [sp, #8]
 80847de:	893b      	ldrh	r3, [r7, #8]
 80847e0:	9301      	str	r3, [sp, #4]
 80847e2:	687b      	ldr	r3, [r7, #4]
 80847e4:	9300      	str	r3, [sp, #0]
 80847e6:	2301      	movs	r3, #1
 80847e8:	21d7      	movs	r1, #215	; 0xd7
 80847ea:	68f8      	ldr	r0, [r7, #12]
 80847ec:	f006 f8be 	bl	808a96c <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 80847f0:	2300      	movs	r3, #0
}
 80847f2:	4618      	mov	r0, r3
 80847f4:	3710      	adds	r7, #16
 80847f6:	46bd      	mov	sp, r7
 80847f8:	bd80      	pop	{r7, pc}

080847fa <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80847fa:	b580      	push	{r7, lr}
 80847fc:	b088      	sub	sp, #32
 80847fe:	af04      	add	r7, sp, #16
 8084800:	60f8      	str	r0, [r7, #12]
 8084802:	607a      	str	r2, [r7, #4]
 8084804:	461a      	mov	r2, r3
 8084806:	460b      	mov	r3, r1
 8084808:	72fb      	strb	r3, [r7, #11]
 808480a:	4613      	mov	r3, r2
 808480c:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(handle, LSM6DS3_I2C_ADD_H, reg,
 808480e:	7afb      	ldrb	r3, [r7, #11]
 8084810:	b29a      	uxth	r2, r3
 8084812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084816:	9302      	str	r3, [sp, #8]
 8084818:	893b      	ldrh	r3, [r7, #8]
 808481a:	9301      	str	r3, [sp, #4]
 808481c:	687b      	ldr	r3, [r7, #4]
 808481e:	9300      	str	r3, [sp, #0]
 8084820:	2301      	movs	r3, #1
 8084822:	21d7      	movs	r1, #215	; 0xd7
 8084824:	68f8      	ldr	r0, [r7, #12]
 8084826:	f006 f9c7 	bl	808abb8 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);


	return 0;
 808482a:	2300      	movs	r3, #0
}
 808482c:	4618      	mov	r0, r3
 808482e:	3710      	adds	r7, #16
 8084830:	46bd      	mov	sp, r7
 8084832:	bd80      	pop	{r7, pc}

08084834 <BSP_ACC_GYRO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_ACC_GYRO_MspInit(void)
{
 8084834:	b580      	push	{r7, lr}
 8084836:	b088      	sub	sp, #32
 8084838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;
	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 808483a:	4b29      	ldr	r3, [pc, #164]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 808483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808483e:	4a28      	ldr	r2, [pc, #160]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 8084840:	f043 0302 	orr.w	r3, r3, #2
 8084844:	6313      	str	r3, [r2, #48]	; 0x30
 8084846:	4b26      	ldr	r3, [pc, #152]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 8084848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808484a:	f003 0302 	and.w	r3, r3, #2
 808484e:	60bb      	str	r3, [r7, #8]
 8084850:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8084852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8084856:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8084858:	2312      	movs	r3, #18
 808485a:	613b      	str	r3, [r7, #16]
	gpio_init_structure.Pull = GPIO_PULLUP;
 808485c:	2301      	movs	r3, #1
 808485e:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8084860:	2302      	movs	r3, #2
 8084862:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8084864:	2304      	movs	r3, #4
 8084866:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8084868:	f107 030c 	add.w	r3, r7, #12
 808486c:	4619      	mov	r1, r3
 808486e:	481d      	ldr	r0, [pc, #116]	; (80848e4 <BSP_ACC_GYRO_MspInit+0xb0>)
 8084870:	f005 fcaa 	bl	808a1c8 <HAL_GPIO_Init>

	/* Configure I2C Rx as alternate function */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8084874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8084878:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808487a:	f107 030c 	add.w	r3, r7, #12
 808487e:	4619      	mov	r1, r3
 8084880:	4818      	ldr	r0, [pc, #96]	; (80848e4 <BSP_ACC_GYRO_MspInit+0xb0>)
 8084882:	f005 fca1 	bl	808a1c8 <HAL_GPIO_Init>
	//	HAL_NVIC_EnableIRQ(I2C1_  SPI2_IRQn);


	/*** Configure the I2C peripheral ***/
	/* Enable I2C clock */
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8084886:	4b16      	ldr	r3, [pc, #88]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 8084888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808488a:	4a15      	ldr	r2, [pc, #84]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 808488c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8084890:	6413      	str	r3, [r2, #64]	; 0x40
 8084892:	4b13      	ldr	r3, [pc, #76]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 8084894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808489a:	607b      	str	r3, [r7, #4]
 808489c:	687b      	ldr	r3, [r7, #4]

	/* Force the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_FORCE_RESET();
 808489e:	4b10      	ldr	r3, [pc, #64]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 80848a0:	6a1b      	ldr	r3, [r3, #32]
 80848a2:	4a0f      	ldr	r2, [pc, #60]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 80848a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80848a8:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80848aa:	4b0d      	ldr	r3, [pc, #52]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 80848ac:	6a1b      	ldr	r3, [r3, #32]
 80848ae:	4a0c      	ldr	r2, [pc, #48]	; (80848e0 <BSP_ACC_GYRO_MspInit+0xac>)
 80848b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80848b4:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80848b6:	2200      	movs	r2, #0
 80848b8:	210f      	movs	r1, #15
 80848ba:	201f      	movs	r0, #31
 80848bc:	f004 fd4c 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80848c0:	201f      	movs	r0, #31
 80848c2:	f004 fd65 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80848c6:	2200      	movs	r2, #0
 80848c8:	210f      	movs	r1, #15
 80848ca:	2020      	movs	r0, #32
 80848cc:	f004 fd44 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80848d0:	2020      	movs	r0, #32
 80848d2:	f004 fd5d 	bl	8089390 <HAL_NVIC_EnableIRQ>

	//	/* Enable and set EXTI9-5 Interrupt to the lowest priority */
	//	HAL_NVIC_SetPriority(ACC_GYRO_DRDY_EXTI_IRQn, 0xFF, 0);
	//	HAL_NVIC_EnableIRQ(ACC_GYRO_DRDY_EXTI_IRQn);
}
 80848d6:	bf00      	nop
 80848d8:	3720      	adds	r7, #32
 80848da:	46bd      	mov	sp, r7
 80848dc:	bd80      	pop	{r7, pc}
 80848de:	bf00      	nop
 80848e0:	40023800 	.word	0x40023800
 80848e4:	40020400 	.word	0x40020400

080848e8 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 80848e8:	b590      	push	{r4, r7, lr}
 80848ea:	b085      	sub	sp, #20
 80848ec:	af00      	add	r7, sp, #0
 80848ee:	4603      	mov	r3, r0
 80848f0:	603a      	str	r2, [r7, #0]
 80848f2:	80fb      	strh	r3, [r7, #6]
 80848f4:	460b      	mov	r3, r1
 80848f6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 80848f8:	2301      	movs	r3, #1
 80848fa:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 80848fc:	2300      	movs	r3, #0
 80848fe:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8084900:	f000 fb1e 	bl	8084f40 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8084904:	2200      	movs	r2, #0
 8084906:	6839      	ldr	r1, [r7, #0]
 8084908:	481c      	ldr	r0, [pc, #112]	; (808497c <BSP_AUDIO_OUT_Init+0x94>)
 808490a:	f000 fa77 	bl	8084dfc <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 808490e:	4b1b      	ldr	r3, [pc, #108]	; (808497c <BSP_AUDIO_OUT_Init+0x94>)
 8084910:	4a1b      	ldr	r2, [pc, #108]	; (8084980 <BSP_AUDIO_OUT_Init+0x98>)
 8084912:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8084914:	4819      	ldr	r0, [pc, #100]	; (808497c <BSP_AUDIO_OUT_Init+0x94>)
 8084916:	f009 fcb3 	bl	808e280 <HAL_SAI_GetState>
 808491a:	4603      	mov	r3, r0
 808491c:	2b00      	cmp	r3, #0
 808491e:	d103      	bne.n	8084928 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8084920:	2100      	movs	r1, #0
 8084922:	4816      	ldr	r0, [pc, #88]	; (808497c <BSP_AUDIO_OUT_Init+0x94>)
 8084924:	f000 f94e 	bl	8084bc4 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8084928:	6838      	ldr	r0, [r7, #0]
 808492a:	f000 faab 	bl	8084e84 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 808492e:	4b15      	ldr	r3, [pc, #84]	; (8084984 <BSP_AUDIO_OUT_Init+0x9c>)
 8084930:	689b      	ldr	r3, [r3, #8]
 8084932:	2034      	movs	r0, #52	; 0x34
 8084934:	4798      	blx	r3
 8084936:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8084938:	68bb      	ldr	r3, [r7, #8]
 808493a:	f648 1294 	movw	r2, #35220	; 0x8994
 808493e:	4293      	cmp	r3, r2
 8084940:	d109      	bne.n	8084956 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8084942:	4b10      	ldr	r3, [pc, #64]	; (8084984 <BSP_AUDIO_OUT_Init+0x9c>)
 8084944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084946:	2034      	movs	r0, #52	; 0x34
 8084948:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 808494a:	4b0f      	ldr	r3, [pc, #60]	; (8084988 <BSP_AUDIO_OUT_Init+0xa0>)
 808494c:	4a0d      	ldr	r2, [pc, #52]	; (8084984 <BSP_AUDIO_OUT_Init+0x9c>)
 808494e:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8084950:	2300      	movs	r3, #0
 8084952:	73fb      	strb	r3, [r7, #15]
 8084954:	e001      	b.n	808495a <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8084956:	2301      	movs	r3, #1
 8084958:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 808495a:	7bfb      	ldrb	r3, [r7, #15]
 808495c:	2b00      	cmp	r3, #0
 808495e:	d107      	bne.n	8084970 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8084960:	4b09      	ldr	r3, [pc, #36]	; (8084988 <BSP_AUDIO_OUT_Init+0xa0>)
 8084962:	681b      	ldr	r3, [r3, #0]
 8084964:	681c      	ldr	r4, [r3, #0]
 8084966:	797a      	ldrb	r2, [r7, #5]
 8084968:	88f9      	ldrh	r1, [r7, #6]
 808496a:	683b      	ldr	r3, [r7, #0]
 808496c:	2034      	movs	r0, #52	; 0x34
 808496e:	47a0      	blx	r4
  }
 
  return ret;
 8084970:	7bfb      	ldrb	r3, [r7, #15]
}
 8084972:	4618      	mov	r0, r3
 8084974:	3714      	adds	r7, #20
 8084976:	46bd      	mov	sp, r7
 8084978:	bd90      	pop	{r4, r7, pc}
 808497a:	bf00      	nop
 808497c:	2000b628 	.word	0x2000b628
 8084980:	40015c04 	.word	0x40015c04
 8084984:	2000b028 	.word	0x2000b028
 8084988:	2002d83c 	.word	0x2002d83c

0808498c <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 808498c:	b580      	push	{r7, lr}
 808498e:	b082      	sub	sp, #8
 8084990:	af00      	add	r7, sp, #0
 8084992:	6078      	str	r0, [r7, #4]
 8084994:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8084996:	4b10      	ldr	r3, [pc, #64]	; (80849d8 <BSP_AUDIO_OUT_Play+0x4c>)
 8084998:	681b      	ldr	r3, [r3, #0]
 808499a:	68db      	ldr	r3, [r3, #12]
 808499c:	683a      	ldr	r2, [r7, #0]
 808499e:	b292      	uxth	r2, r2
 80849a0:	6879      	ldr	r1, [r7, #4]
 80849a2:	2034      	movs	r0, #52	; 0x34
 80849a4:	4798      	blx	r3
 80849a6:	4603      	mov	r3, r0
 80849a8:	2b00      	cmp	r3, #0
 80849aa:	d001      	beq.n	80849b0 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 80849ac:	2301      	movs	r3, #1
 80849ae:	e00f      	b.n	80849d0 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80849b0:	683b      	ldr	r3, [r7, #0]
 80849b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80849b6:	d203      	bcs.n	80849c0 <BSP_AUDIO_OUT_Play+0x34>
 80849b8:	683b      	ldr	r3, [r7, #0]
 80849ba:	085b      	lsrs	r3, r3, #1
 80849bc:	b29b      	uxth	r3, r3
 80849be:	e001      	b.n	80849c4 <BSP_AUDIO_OUT_Play+0x38>
 80849c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80849c4:	461a      	mov	r2, r3
 80849c6:	6879      	ldr	r1, [r7, #4]
 80849c8:	4804      	ldr	r0, [pc, #16]	; (80849dc <BSP_AUDIO_OUT_Play+0x50>)
 80849ca:	f009 fb3d 	bl	808e048 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 80849ce:	2300      	movs	r3, #0
  }
}
 80849d0:	4618      	mov	r0, r3
 80849d2:	3708      	adds	r7, #8
 80849d4:	46bd      	mov	sp, r7
 80849d6:	bd80      	pop	{r7, pc}
 80849d8:	2002d83c 	.word	0x2002d83c
 80849dc:	2000b628 	.word	0x2000b628

080849e0 <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Pause(void)
{    
 80849e0:	b580      	push	{r7, lr}
 80849e2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80849e4:	4b07      	ldr	r3, [pc, #28]	; (8084a04 <BSP_AUDIO_OUT_Pause+0x24>)
 80849e6:	681b      	ldr	r3, [r3, #0]
 80849e8:	691b      	ldr	r3, [r3, #16]
 80849ea:	2034      	movs	r0, #52	; 0x34
 80849ec:	4798      	blx	r3
 80849ee:	4603      	mov	r3, r0
 80849f0:	2b00      	cmp	r3, #0
 80849f2:	d001      	beq.n	80849f8 <BSP_AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80849f4:	2301      	movs	r3, #1
 80849f6:	e003      	b.n	8084a00 <BSP_AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_SAI_DMAPause(&haudio_out_sai);
 80849f8:	4803      	ldr	r0, [pc, #12]	; (8084a08 <BSP_AUDIO_OUT_Pause+0x28>)
 80849fa:	f009 fa5e 	bl	808deba <HAL_SAI_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80849fe:	2300      	movs	r3, #0
  }
}
 8084a00:	4618      	mov	r0, r3
 8084a02:	bd80      	pop	{r7, pc}
 8084a04:	2002d83c 	.word	0x2002d83c
 8084a08:	2000b628 	.word	0x2000b628

08084a0c <BSP_AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Resume(void)
{    
 8084a0c:	b580      	push	{r7, lr}
 8084a0e:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8084a10:	4b07      	ldr	r3, [pc, #28]	; (8084a30 <BSP_AUDIO_OUT_Resume+0x24>)
 8084a12:	681b      	ldr	r3, [r3, #0]
 8084a14:	695b      	ldr	r3, [r3, #20]
 8084a16:	2034      	movs	r0, #52	; 0x34
 8084a18:	4798      	blx	r3
 8084a1a:	4603      	mov	r3, r0
 8084a1c:	2b00      	cmp	r3, #0
 8084a1e:	d001      	beq.n	8084a24 <BSP_AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8084a20:	2301      	movs	r3, #1
 8084a22:	e003      	b.n	8084a2c <BSP_AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer pause/resume function */
    HAL_SAI_DMAResume(&haudio_out_sai);
 8084a24:	4803      	ldr	r0, [pc, #12]	; (8084a34 <BSP_AUDIO_OUT_Resume+0x28>)
 8084a26:	f009 fa6a 	bl	808defe <HAL_SAI_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8084a2a:	2300      	movs	r3, #0
  }
}
 8084a2c:	4618      	mov	r0, r3
 8084a2e:	bd80      	pop	{r7, pc}
 8084a30:	2002d83c 	.word	0x2002d83c
 8084a34:	2000b628 	.word	0x2000b628

08084a38 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8084a38:	b580      	push	{r7, lr}
 8084a3a:	b082      	sub	sp, #8
 8084a3c:	af00      	add	r7, sp, #0
 8084a3e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8084a40:	480c      	ldr	r0, [pc, #48]	; (8084a74 <BSP_AUDIO_OUT_Stop+0x3c>)
 8084a42:	f009 fa8d 	bl	808df60 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8084a46:	4b0c      	ldr	r3, [pc, #48]	; (8084a78 <BSP_AUDIO_OUT_Stop+0x40>)
 8084a48:	681b      	ldr	r3, [r3, #0]
 8084a4a:	699b      	ldr	r3, [r3, #24]
 8084a4c:	6879      	ldr	r1, [r7, #4]
 8084a4e:	2034      	movs	r0, #52	; 0x34
 8084a50:	4798      	blx	r3
 8084a52:	4603      	mov	r3, r0
 8084a54:	2b00      	cmp	r3, #0
 8084a56:	d001      	beq.n	8084a5c <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8084a58:	2301      	movs	r3, #1
 8084a5a:	e006      	b.n	8084a6a <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8084a5c:	687b      	ldr	r3, [r7, #4]
 8084a5e:	2b01      	cmp	r3, #1
 8084a60:	d102      	bne.n	8084a68 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8084a62:	2001      	movs	r0, #1
 8084a64:	f004 fb88 	bl	8089178 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8084a68:	2300      	movs	r3, #0
  }
}
 8084a6a:	4618      	mov	r0, r3
 8084a6c:	3708      	adds	r7, #8
 8084a6e:	46bd      	mov	sp, r7
 8084a70:	bd80      	pop	{r7, pc}
 8084a72:	bf00      	nop
 8084a74:	2000b628 	.word	0x2000b628
 8084a78:	2002d83c 	.word	0x2002d83c

08084a7c <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8084a7c:	b580      	push	{r7, lr}
 8084a7e:	b082      	sub	sp, #8
 8084a80:	af00      	add	r7, sp, #0
 8084a82:	4603      	mov	r3, r0
 8084a84:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8084a86:	4b08      	ldr	r3, [pc, #32]	; (8084aa8 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8084a88:	681b      	ldr	r3, [r3, #0]
 8084a8a:	6a1b      	ldr	r3, [r3, #32]
 8084a8c:	79fa      	ldrb	r2, [r7, #7]
 8084a8e:	4611      	mov	r1, r2
 8084a90:	2034      	movs	r0, #52	; 0x34
 8084a92:	4798      	blx	r3
 8084a94:	4603      	mov	r3, r0
 8084a96:	2b00      	cmp	r3, #0
 8084a98:	d001      	beq.n	8084a9e <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8084a9a:	2301      	movs	r3, #1
 8084a9c:	e000      	b.n	8084aa0 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8084a9e:	2300      	movs	r3, #0
  }
}
 8084aa0:	4618      	mov	r0, r3
 8084aa2:	3708      	adds	r7, #8
 8084aa4:	46bd      	mov	sp, r7
 8084aa6:	bd80      	pop	{r7, pc}
 8084aa8:	2002d83c 	.word	0x2002d83c

08084aac <BSP_AUDIO_OUT_SetFrequency>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frequency.
  * @retval None
  */
void BSP_AUDIO_OUT_SetFrequency(uint32_t AudioFreq)
{ 
 8084aac:	b580      	push	{r7, lr}
 8084aae:	b082      	sub	sp, #8
 8084ab0:	af00      	add	r7, sp, #0
 8084ab2:	6078      	str	r0, [r7, #4]
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8084ab4:	2200      	movs	r2, #0
 8084ab6:	6879      	ldr	r1, [r7, #4]
 8084ab8:	480e      	ldr	r0, [pc, #56]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084aba:	f000 f99f 	bl	8084dfc <BSP_AUDIO_OUT_ClockConfig>

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8084abe:	4b0d      	ldr	r3, [pc, #52]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084ac0:	681b      	ldr	r3, [r3, #0]
 8084ac2:	681a      	ldr	r2, [r3, #0]
 8084ac4:	4b0b      	ldr	r3, [pc, #44]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084ac6:	681b      	ldr	r3, [r3, #0]
 8084ac8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8084acc:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frequency configuration */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8084ace:	4a09      	ldr	r2, [pc, #36]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084ad0:	687b      	ldr	r3, [r7, #4]
 8084ad2:	61d3      	str	r3, [r2, #28]
  HAL_SAI_Init(&haudio_out_sai);
 8084ad4:	4807      	ldr	r0, [pc, #28]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084ad6:	f009 f835 	bl	808db44 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8084ada:	4b06      	ldr	r3, [pc, #24]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084adc:	681b      	ldr	r3, [r3, #0]
 8084ade:	681a      	ldr	r2, [r3, #0]
 8084ae0:	4b04      	ldr	r3, [pc, #16]	; (8084af4 <BSP_AUDIO_OUT_SetFrequency+0x48>)
 8084ae2:	681b      	ldr	r3, [r3, #0]
 8084ae4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8084ae8:	601a      	str	r2, [r3, #0]
}
 8084aea:	bf00      	nop
 8084aec:	3708      	adds	r7, #8
 8084aee:	46bd      	mov	sp, r7
 8084af0:	bd80      	pop	{r7, pc}
 8084af2:	bf00      	nop
 8084af4:	2000b628 	.word	0x2000b628

08084af8 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8084af8:	b580      	push	{r7, lr}
 8084afa:	b082      	sub	sp, #8
 8084afc:	af00      	add	r7, sp, #0
 8084afe:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8084b00:	4b0c      	ldr	r3, [pc, #48]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b02:	681b      	ldr	r3, [r3, #0]
 8084b04:	681a      	ldr	r2, [r3, #0]
 8084b06:	4b0b      	ldr	r3, [pc, #44]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b08:	681b      	ldr	r3, [r3, #0]
 8084b0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8084b0e:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8084b10:	4a08      	ldr	r2, [pc, #32]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b12:	687b      	ldr	r3, [r7, #4]
 8084b14:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8084b16:	4807      	ldr	r0, [pc, #28]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b18:	f009 f814 	bl	808db44 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8084b1c:	4b05      	ldr	r3, [pc, #20]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b1e:	681b      	ldr	r3, [r3, #0]
 8084b20:	681a      	ldr	r2, [r3, #0]
 8084b22:	4b04      	ldr	r3, [pc, #16]	; (8084b34 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8084b24:	681b      	ldr	r3, [r3, #0]
 8084b26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8084b2a:	601a      	str	r2, [r3, #0]
}
 8084b2c:	bf00      	nop
 8084b2e:	3708      	adds	r7, #8
 8084b30:	46bd      	mov	sp, r7
 8084b32:	bd80      	pop	{r7, pc}
 8084b34:	2000b628 	.word	0x2000b628

08084b38 <BSP_AUDIO_OUT_DeInit>:
/**
  * @brief  Deinit the audio peripherals.
  * @retval None
  */
void BSP_AUDIO_OUT_DeInit(void)
{
 8084b38:	b580      	push	{r7, lr}
 8084b3a:	af00      	add	r7, sp, #0
  SAIx_Out_DeInit();
 8084b3c:	f000 fa00 	bl	8084f40 <SAIx_Out_DeInit>
  /* DeInit the SAI MSP : this __weak function can be rewritten by the application */
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 8084b40:	2100      	movs	r1, #0
 8084b42:	4802      	ldr	r0, [pc, #8]	; (8084b4c <BSP_AUDIO_OUT_DeInit+0x14>)
 8084b44:	f000 f914 	bl	8084d70 <BSP_AUDIO_OUT_MspDeInit>
}
 8084b48:	bf00      	nop
 8084b4a:	bd80      	pop	{r7, pc}
 8084b4c:	2000b628 	.word	0x2000b628

08084b50 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8084b50:	b580      	push	{r7, lr}
 8084b52:	b082      	sub	sp, #8
 8084b54:	af00      	add	r7, sp, #0
 8084b56:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8084b58:	f00f fde4 	bl	8094724 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8084b5c:	bf00      	nop
 8084b5e:	3708      	adds	r7, #8
 8084b60:	46bd      	mov	sp, r7
 8084b62:	bd80      	pop	{r7, pc}

08084b64 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8084b64:	b580      	push	{r7, lr}
 8084b66:	b082      	sub	sp, #8
 8084b68:	af00      	add	r7, sp, #0
 8084b6a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8084b6c:	f00f fde8 	bl	8094740 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8084b70:	bf00      	nop
 8084b72:	3708      	adds	r7, #8
 8084b74:	46bd      	mov	sp, r7
 8084b76:	bd80      	pop	{r7, pc}

08084b78 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8084b78:	b580      	push	{r7, lr}
 8084b7a:	b084      	sub	sp, #16
 8084b7c:	af00      	add	r7, sp, #0
 8084b7e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8084b80:	480e      	ldr	r0, [pc, #56]	; (8084bbc <HAL_SAI_ErrorCallback+0x44>)
 8084b82:	f009 fb7d 	bl	808e280 <HAL_SAI_GetState>
 8084b86:	4603      	mov	r3, r0
 8084b88:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8084b8a:	480d      	ldr	r0, [pc, #52]	; (8084bc0 <HAL_SAI_ErrorCallback+0x48>)
 8084b8c:	f009 fb78 	bl	808e280 <HAL_SAI_GetState>
 8084b90:	4603      	mov	r3, r0
 8084b92:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8084b94:	7bfb      	ldrb	r3, [r7, #15]
 8084b96:	2b02      	cmp	r3, #2
 8084b98:	d002      	beq.n	8084ba0 <HAL_SAI_ErrorCallback+0x28>
 8084b9a:	7bfb      	ldrb	r3, [r7, #15]
 8084b9c:	2b12      	cmp	r3, #18
 8084b9e:	d101      	bne.n	8084ba4 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8084ba0:	f014 f812 	bl	8098bc8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8084ba4:	7bbb      	ldrb	r3, [r7, #14]
 8084ba6:	2b02      	cmp	r3, #2
 8084ba8:	d002      	beq.n	8084bb0 <HAL_SAI_ErrorCallback+0x38>
 8084baa:	7bbb      	ldrb	r3, [r7, #14]
 8084bac:	2b22      	cmp	r3, #34	; 0x22
 8084bae:	d101      	bne.n	8084bb4 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8084bb0:	f014 f98c 	bl	8098ecc <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8084bb4:	bf00      	nop
 8084bb6:	3710      	adds	r7, #16
 8084bb8:	46bd      	mov	sp, r7
 8084bba:	bd80      	pop	{r7, pc}
 8084bbc:	2000b628 	.word	0x2000b628
 8084bc0:	2000b6ac 	.word	0x2000b6ac

08084bc4 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8084bc4:	b580      	push	{r7, lr}
 8084bc6:	b08c      	sub	sp, #48	; 0x30
 8084bc8:	af00      	add	r7, sp, #0
 8084bca:	6078      	str	r0, [r7, #4]
 8084bcc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8084bce:	4b63      	ldr	r3, [pc, #396]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084bd2:	4a62      	ldr	r2, [pc, #392]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8084bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8084bda:	4b60      	ldr	r3, [pc, #384]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8084be2:	61bb      	str	r3, [r7, #24]
 8084be4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8084be6:	4b5d      	ldr	r3, [pc, #372]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084bea:	4a5c      	ldr	r2, [pc, #368]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8084bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8084bf2:	4b5a      	ldr	r3, [pc, #360]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084bfa:	617b      	str	r3, [r7, #20]
 8084bfc:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8084bfe:	4b57      	ldr	r3, [pc, #348]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084c02:	4a56      	ldr	r2, [pc, #344]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8084c08:	6313      	str	r3, [r2, #48]	; 0x30
 8084c0a:	4b54      	ldr	r3, [pc, #336]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084c12:	613b      	str	r3, [r7, #16]
 8084c14:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8084c16:	4b51      	ldr	r3, [pc, #324]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084c1a:	4a50      	ldr	r2, [pc, #320]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8084c20:	6313      	str	r3, [r2, #48]	; 0x30
 8084c22:	4b4e      	ldr	r3, [pc, #312]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084c2a:	60fb      	str	r3, [r7, #12]
 8084c2c:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8084c2e:	2380      	movs	r3, #128	; 0x80
 8084c30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8084c32:	2302      	movs	r3, #2
 8084c34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8084c36:	2300      	movs	r3, #0
 8084c38:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8084c3a:	2303      	movs	r3, #3
 8084c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8084c3e:	230a      	movs	r3, #10
 8084c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8084c42:	f107 031c 	add.w	r3, r7, #28
 8084c46:	4619      	mov	r1, r3
 8084c48:	4845      	ldr	r0, [pc, #276]	; (8084d60 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8084c4a:	f005 fabd 	bl	808a1c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8084c4e:	2320      	movs	r3, #32
 8084c50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8084c52:	2302      	movs	r3, #2
 8084c54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8084c56:	2300      	movs	r3, #0
 8084c58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8084c5a:	2303      	movs	r3, #3
 8084c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8084c5e:	230a      	movs	r3, #10
 8084c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8084c62:	f107 031c 	add.w	r3, r7, #28
 8084c66:	4619      	mov	r1, r3
 8084c68:	483d      	ldr	r0, [pc, #244]	; (8084d60 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8084c6a:	f005 faad 	bl	808a1c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8084c6e:	2340      	movs	r3, #64	; 0x40
 8084c70:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8084c72:	2302      	movs	r3, #2
 8084c74:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8084c76:	2300      	movs	r3, #0
 8084c78:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8084c7a:	2303      	movs	r3, #3
 8084c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8084c7e:	230a      	movs	r3, #10
 8084c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8084c82:	f107 031c 	add.w	r3, r7, #28
 8084c86:	4619      	mov	r1, r3
 8084c88:	4835      	ldr	r0, [pc, #212]	; (8084d60 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8084c8a:	f005 fa9d 	bl	808a1c8 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8084c8e:	2310      	movs	r3, #16
 8084c90:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8084c92:	2302      	movs	r3, #2
 8084c94:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8084c96:	2300      	movs	r3, #0
 8084c98:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8084c9a:	2303      	movs	r3, #3
 8084c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8084c9e:	230a      	movs	r3, #10
 8084ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8084ca2:	f107 031c 	add.w	r3, r7, #28
 8084ca6:	4619      	mov	r1, r3
 8084ca8:	482d      	ldr	r0, [pc, #180]	; (8084d60 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8084caa:	f005 fa8d 	bl	808a1c8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8084cae:	4b2b      	ldr	r3, [pc, #172]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084cb2:	4a2a      	ldr	r2, [pc, #168]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8084cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8084cba:	4b28      	ldr	r3, [pc, #160]	; (8084d5c <BSP_AUDIO_OUT_MspInit+0x198>)
 8084cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8084cc2:	60bb      	str	r3, [r7, #8]
 8084cc4:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8084cc6:	687b      	ldr	r3, [r7, #4]
 8084cc8:	681b      	ldr	r3, [r3, #0]
 8084cca:	4a26      	ldr	r2, [pc, #152]	; (8084d64 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8084ccc:	4293      	cmp	r3, r2
 8084cce:	d138      	bne.n	8084d42 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8084cd0:	4b25      	ldr	r3, [pc, #148]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084cd2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8084cd6:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8084cd8:	4b23      	ldr	r3, [pc, #140]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084cda:	2240      	movs	r2, #64	; 0x40
 8084cdc:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8084cde:	4b22      	ldr	r3, [pc, #136]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084ce0:	2200      	movs	r2, #0
 8084ce2:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8084ce4:	4b20      	ldr	r3, [pc, #128]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8084cea:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8084cec:	4b1e      	ldr	r3, [pc, #120]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8084cf2:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8084cf4:	4b1c      	ldr	r3, [pc, #112]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8084cfa:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8084cfc:	4b1a      	ldr	r3, [pc, #104]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8084d02:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8084d04:	4b18      	ldr	r3, [pc, #96]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8084d0a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8084d0c:	4b16      	ldr	r3, [pc, #88]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d0e:	2204      	movs	r2, #4
 8084d10:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8084d12:	4b15      	ldr	r3, [pc, #84]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d14:	2203      	movs	r2, #3
 8084d16:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8084d18:	4b13      	ldr	r3, [pc, #76]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d1a:	2200      	movs	r2, #0
 8084d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8084d1e:	4b12      	ldr	r3, [pc, #72]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d20:	2200      	movs	r2, #0
 8084d22:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8084d24:	4b10      	ldr	r3, [pc, #64]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d26:	4a11      	ldr	r2, [pc, #68]	; (8084d6c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8084d28:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8084d2a:	687b      	ldr	r3, [r7, #4]
 8084d2c:	4a0e      	ldr	r2, [pc, #56]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8084d30:	4a0d      	ldr	r2, [pc, #52]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d32:	687b      	ldr	r3, [r7, #4]
 8084d34:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8084d36:	480c      	ldr	r0, [pc, #48]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d38:	f004 fbf4 	bl	8089524 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8084d3c:	480a      	ldr	r0, [pc, #40]	; (8084d68 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8084d3e:	f004 fb43 	bl	80893c8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8084d42:	2200      	movs	r2, #0
 8084d44:	210e      	movs	r1, #14
 8084d46:	203c      	movs	r0, #60	; 0x3c
 8084d48:	f004 fb06 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8084d4c:	203c      	movs	r0, #60	; 0x3c
 8084d4e:	f004 fb1f 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8084d52:	bf00      	nop
 8084d54:	3730      	adds	r7, #48	; 0x30
 8084d56:	46bd      	mov	sp, r7
 8084d58:	bd80      	pop	{r7, pc}
 8084d5a:	bf00      	nop
 8084d5c:	40023800 	.word	0x40023800
 8084d60:	40022000 	.word	0x40022000
 8084d64:	40015c04 	.word	0x40015c04
 8084d68:	2000b730 	.word	0x2000b730
 8084d6c:	40026470 	.word	0x40026470

08084d70 <BSP_AUDIO_OUT_MspDeInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspDeInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8084d70:	b580      	push	{r7, lr}
 8084d72:	b088      	sub	sp, #32
 8084d74:	af00      	add	r7, sp, #0
 8084d76:	6078      	str	r0, [r7, #4]
 8084d78:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef  gpio_init_structure;

    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8084d7a:	203c      	movs	r0, #60	; 0x3c
 8084d7c:	f004 fb16 	bl	80893ac <HAL_NVIC_DisableIRQ>

    if(hsai->Instance == AUDIO_OUT_SAIx)
 8084d80:	687b      	ldr	r3, [r7, #4]
 8084d82:	681b      	ldr	r3, [r3, #0]
 8084d84:	4a1a      	ldr	r2, [pc, #104]	; (8084df0 <BSP_AUDIO_OUT_MspDeInit+0x80>)
 8084d86:	4293      	cmp	r3, r2
 8084d88:	d104      	bne.n	8084d94 <BSP_AUDIO_OUT_MspDeInit+0x24>
    {
      /* Deinitialize the DMA stream */
      HAL_DMA_DeInit(hsai->hdmatx);
 8084d8a:	687b      	ldr	r3, [r7, #4]
 8084d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8084d8e:	4618      	mov	r0, r3
 8084d90:	f004 fbc8 	bl	8089524 <HAL_DMA_DeInit>
    }

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);  
 8084d94:	687b      	ldr	r3, [r7, #4]
 8084d96:	681b      	ldr	r3, [r3, #0]
 8084d98:	681a      	ldr	r2, [r3, #0]
 8084d9a:	687b      	ldr	r3, [r7, #4]
 8084d9c:	681b      	ldr	r3, [r3, #0]
 8084d9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8084da2:	601a      	str	r2, [r3, #0]

    /* Deactives CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8084da4:	2380      	movs	r3, #128	; 0x80
 8084da6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 8084da8:	68fb      	ldr	r3, [r7, #12]
 8084daa:	4619      	mov	r1, r3
 8084dac:	4811      	ldr	r0, [pc, #68]	; (8084df4 <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8084dae:	f005 fbb5 	bl	808a51c <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8084db2:	2320      	movs	r3, #32
 8084db4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 8084db6:	68fb      	ldr	r3, [r7, #12]
 8084db8:	4619      	mov	r1, r3
 8084dba:	480e      	ldr	r0, [pc, #56]	; (8084df4 <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8084dbc:	f005 fbae 	bl	808a51c <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8084dc0:	2340      	movs	r3, #64	; 0x40
 8084dc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 8084dc4:	68fb      	ldr	r3, [r7, #12]
 8084dc6:	4619      	mov	r1, r3
 8084dc8:	480a      	ldr	r0, [pc, #40]	; (8084df4 <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8084dca:	f005 fba7 	bl	808a51c <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8084dce:	2310      	movs	r3, #16
 8084dd0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8084dd2:	68fb      	ldr	r3, [r7, #12]
 8084dd4:	4619      	mov	r1, r3
 8084dd6:	4807      	ldr	r0, [pc, #28]	; (8084df4 <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8084dd8:	f005 fba0 	bl	808a51c <HAL_GPIO_DeInit>
  
    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8084ddc:	4b06      	ldr	r3, [pc, #24]	; (8084df8 <BSP_AUDIO_OUT_MspDeInit+0x88>)
 8084dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084de0:	4a05      	ldr	r2, [pc, #20]	; (8084df8 <BSP_AUDIO_OUT_MspDeInit+0x88>)
 8084de2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8084de6:	6453      	str	r3, [r2, #68]	; 0x44

    /* GPIO pins clock and DMA clock can be shut down in the application
       by surcharging this __weak function */
}
 8084de8:	bf00      	nop
 8084dea:	3720      	adds	r7, #32
 8084dec:	46bd      	mov	sp, r7
 8084dee:	bd80      	pop	{r7, pc}
 8084df0:	40015c04 	.word	0x40015c04
 8084df4:	40022000 	.word	0x40022000
 8084df8:	40023800 	.word	0x40023800

08084dfc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8084dfc:	b580      	push	{r7, lr}
 8084dfe:	b0a6      	sub	sp, #152	; 0x98
 8084e00:	af00      	add	r7, sp, #0
 8084e02:	60f8      	str	r0, [r7, #12]
 8084e04:	60b9      	str	r1, [r7, #8]
 8084e06:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8084e08:	f107 0314 	add.w	r3, r7, #20
 8084e0c:	4618      	mov	r0, r3
 8084e0e:	f008 fbe7 	bl	808d5e0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8084e12:	68bb      	ldr	r3, [r7, #8]
 8084e14:	f642 3211 	movw	r2, #11025	; 0x2b11
 8084e18:	4293      	cmp	r3, r2
 8084e1a:	d009      	beq.n	8084e30 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8084e1c:	68bb      	ldr	r3, [r7, #8]
 8084e1e:	f245 6222 	movw	r2, #22050	; 0x5622
 8084e22:	4293      	cmp	r3, r2
 8084e24:	d004      	beq.n	8084e30 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8084e26:	68bb      	ldr	r3, [r7, #8]
 8084e28:	f64a 4244 	movw	r2, #44100	; 0xac44
 8084e2c:	4293      	cmp	r3, r2
 8084e2e:	d112      	bne.n	8084e56 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8084e30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8084e34:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8084e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8084e3a:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8084e3c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8084e40:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8084e42:	2302      	movs	r3, #2
 8084e44:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8084e46:	2313      	movs	r3, #19
 8084e48:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8084e4a:	f107 0314 	add.w	r3, r7, #20
 8084e4e:	4618      	mov	r0, r3
 8084e50:	f007 ffd8 	bl	808ce04 <HAL_RCCEx_PeriphCLKConfig>
 8084e54:	e011      	b.n	8084e7a <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8084e56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8084e5a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8084e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8084e60:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8084e62:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8084e66:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8084e68:	2307      	movs	r3, #7
 8084e6a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8084e6c:	2301      	movs	r3, #1
 8084e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8084e70:	f107 0314 	add.w	r3, r7, #20
 8084e74:	4618      	mov	r0, r3
 8084e76:	f007 ffc5 	bl	808ce04 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8084e7a:	bf00      	nop
 8084e7c:	3798      	adds	r7, #152	; 0x98
 8084e7e:	46bd      	mov	sp, r7
 8084e80:	bd80      	pop	{r7, pc}
	...

08084e84 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8084e84:	b580      	push	{r7, lr}
 8084e86:	b082      	sub	sp, #8
 8084e88:	af00      	add	r7, sp, #0
 8084e8a:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8084e8c:	4b2a      	ldr	r3, [pc, #168]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084e8e:	4a2b      	ldr	r2, [pc, #172]	; (8084f3c <SAIx_Out_Init+0xb8>)
 8084e90:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8084e92:	4b29      	ldr	r3, [pc, #164]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084e94:	681b      	ldr	r3, [r3, #0]
 8084e96:	681a      	ldr	r2, [r3, #0]
 8084e98:	4b27      	ldr	r3, [pc, #156]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084e9a:	681b      	ldr	r3, [r3, #0]
 8084e9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8084ea0:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8084ea2:	4a25      	ldr	r2, [pc, #148]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ea4:	687b      	ldr	r3, [r7, #4]
 8084ea6:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8084ea8:	4b23      	ldr	r3, [pc, #140]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084eaa:	2200      	movs	r2, #0
 8084eac:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8084eae:	4b22      	ldr	r3, [pc, #136]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084eb0:	2200      	movs	r2, #0
 8084eb2:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8084eb4:	4b20      	ldr	r3, [pc, #128]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084eb6:	2200      	movs	r2, #0
 8084eb8:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8084eba:	4b1f      	ldr	r3, [pc, #124]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ebc:	2280      	movs	r2, #128	; 0x80
 8084ebe:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8084ec0:	4b1d      	ldr	r3, [pc, #116]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ec2:	2200      	movs	r2, #0
 8084ec4:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8084ec6:	4b1c      	ldr	r3, [pc, #112]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ec8:	2201      	movs	r2, #1
 8084eca:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8084ecc:	4b1a      	ldr	r3, [pc, #104]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ece:	2200      	movs	r2, #0
 8084ed0:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8084ed2:	4b19      	ldr	r3, [pc, #100]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8084ed8:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8084eda:	4b17      	ldr	r3, [pc, #92]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084edc:	2201      	movs	r2, #1
 8084ede:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8084ee0:	4b15      	ldr	r3, [pc, #84]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ee2:	2240      	movs	r2, #64	; 0x40
 8084ee4:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8084ee6:	4b14      	ldr	r3, [pc, #80]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ee8:	2220      	movs	r2, #32
 8084eea:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8084eec:	4b12      	ldr	r3, [pc, #72]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8084ef2:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8084ef4:	4b10      	ldr	r3, [pc, #64]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084ef6:	2200      	movs	r2, #0
 8084ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8084efa:	4b0f      	ldr	r3, [pc, #60]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084efc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8084f00:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8084f02:	4b0d      	ldr	r3, [pc, #52]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f04:	2200      	movs	r2, #0
 8084f06:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8084f08:	4b0b      	ldr	r3, [pc, #44]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f0a:	2200      	movs	r2, #0
 8084f0c:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8084f0e:	4b0a      	ldr	r3, [pc, #40]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f10:	2204      	movs	r2, #4
 8084f12:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8084f14:	4b08      	ldr	r3, [pc, #32]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f16:	220f      	movs	r2, #15
 8084f18:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8084f1a:	4807      	ldr	r0, [pc, #28]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f1c:	f008 fe12 	bl	808db44 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8084f20:	4b05      	ldr	r3, [pc, #20]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f22:	681b      	ldr	r3, [r3, #0]
 8084f24:	681a      	ldr	r2, [r3, #0]
 8084f26:	4b04      	ldr	r3, [pc, #16]	; (8084f38 <SAIx_Out_Init+0xb4>)
 8084f28:	681b      	ldr	r3, [r3, #0]
 8084f2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8084f2e:	601a      	str	r2, [r3, #0]
}
 8084f30:	bf00      	nop
 8084f32:	3708      	adds	r7, #8
 8084f34:	46bd      	mov	sp, r7
 8084f36:	bd80      	pop	{r7, pc}
 8084f38:	2000b628 	.word	0x2000b628
 8084f3c:	40015c04 	.word	0x40015c04

08084f40 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8084f40:	b580      	push	{r7, lr}
 8084f42:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8084f44:	4b07      	ldr	r3, [pc, #28]	; (8084f64 <SAIx_Out_DeInit+0x24>)
 8084f46:	4a08      	ldr	r2, [pc, #32]	; (8084f68 <SAIx_Out_DeInit+0x28>)
 8084f48:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8084f4a:	4b06      	ldr	r3, [pc, #24]	; (8084f64 <SAIx_Out_DeInit+0x24>)
 8084f4c:	681b      	ldr	r3, [r3, #0]
 8084f4e:	681a      	ldr	r2, [r3, #0]
 8084f50:	4b04      	ldr	r3, [pc, #16]	; (8084f64 <SAIx_Out_DeInit+0x24>)
 8084f52:	681b      	ldr	r3, [r3, #0]
 8084f54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8084f58:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8084f5a:	4802      	ldr	r0, [pc, #8]	; (8084f64 <SAIx_Out_DeInit+0x24>)
 8084f5c:	f008 ff64 	bl	808de28 <HAL_SAI_DeInit>
}
 8084f60:	bf00      	nop
 8084f62:	bd80      	pop	{r7, pc}
 8084f64:	2000b628 	.word	0x2000b628
 8084f68:	40015c04 	.word	0x40015c04

08084f6c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8084f6c:	b580      	push	{r7, lr}
 8084f6e:	b084      	sub	sp, #16
 8084f70:	af00      	add	r7, sp, #0
 8084f72:	60f8      	str	r0, [r7, #12]
 8084f74:	60b9      	str	r1, [r7, #8]
 8084f76:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8084f78:	687b      	ldr	r3, [r7, #4]
 8084f7a:	68ba      	ldr	r2, [r7, #8]
 8084f7c:	68f9      	ldr	r1, [r7, #12]
 8084f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8084f82:	f000 f805 	bl	8084f90 <BSP_AUDIO_IN_InitEx>
 8084f86:	4603      	mov	r3, r0
}
 8084f88:	4618      	mov	r0, r3
 8084f8a:	3710      	adds	r7, #16
 8084f8c:	46bd      	mov	sp, r7
 8084f8e:	bd80      	pop	{r7, pc}

08084f90 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8084f90:	b590      	push	{r4, r7, lr}
 8084f92:	b089      	sub	sp, #36	; 0x24
 8084f94:	af00      	add	r7, sp, #0
 8084f96:	60b9      	str	r1, [r7, #8]
 8084f98:	607a      	str	r2, [r7, #4]
 8084f9a:	603b      	str	r3, [r7, #0]
 8084f9c:	4603      	mov	r3, r0
 8084f9e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8084fa0:	2301      	movs	r3, #1
 8084fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8084fa4:	2300      	movs	r3, #0
 8084fa6:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8084fa8:	89fb      	ldrh	r3, [r7, #14]
 8084faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8084fae:	d006      	beq.n	8084fbe <BSP_AUDIO_IN_InitEx+0x2e>
 8084fb0:	89fb      	ldrh	r3, [r7, #14]
 8084fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8084fb6:	d002      	beq.n	8084fbe <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8084fb8:	2301      	movs	r3, #1
 8084fba:	77fb      	strb	r3, [r7, #31]
 8084fbc:	e046      	b.n	808504c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8084fbe:	f000 fa83 	bl	80854c8 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8084fc2:	2200      	movs	r2, #0
 8084fc4:	68b9      	ldr	r1, [r7, #8]
 8084fc6:	4824      	ldr	r0, [pc, #144]	; (8085058 <BSP_AUDIO_IN_InitEx+0xc8>)
 8084fc8:	f7ff ff18 	bl	8084dfc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8084fcc:	4b22      	ldr	r3, [pc, #136]	; (8085058 <BSP_AUDIO_IN_InitEx+0xc8>)
 8084fce:	4a23      	ldr	r2, [pc, #140]	; (808505c <BSP_AUDIO_IN_InitEx+0xcc>)
 8084fd0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8084fd2:	4821      	ldr	r0, [pc, #132]	; (8085058 <BSP_AUDIO_IN_InitEx+0xc8>)
 8084fd4:	f009 f954 	bl	808e280 <HAL_SAI_GetState>
 8084fd8:	4603      	mov	r3, r0
 8084fda:	2b00      	cmp	r3, #0
 8084fdc:	d107      	bne.n	8084fee <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8084fde:	2100      	movs	r1, #0
 8084fe0:	481d      	ldr	r0, [pc, #116]	; (8085058 <BSP_AUDIO_IN_InitEx+0xc8>)
 8084fe2:	f7ff fdef 	bl	8084bc4 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8084fe6:	2100      	movs	r1, #0
 8084fe8:	481b      	ldr	r0, [pc, #108]	; (8085058 <BSP_AUDIO_IN_InitEx+0xc8>)
 8084fea:	f000 f905 	bl	80851f8 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8084fee:	89fb      	ldrh	r3, [r7, #14]
 8084ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8084ff4:	d102      	bne.n	8084ffc <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8084ff6:	230a      	movs	r3, #10
 8084ff8:	61bb      	str	r3, [r7, #24]
 8084ffa:	e001      	b.n	8085000 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8084ffc:	2305      	movs	r3, #5
 8084ffe:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8085000:	68ba      	ldr	r2, [r7, #8]
 8085002:	69b9      	ldr	r1, [r7, #24]
 8085004:	2001      	movs	r0, #1
 8085006:	f000 f9a9 	bl	808535c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 808500a:	4b15      	ldr	r3, [pc, #84]	; (8085060 <BSP_AUDIO_IN_InitEx+0xd0>)
 808500c:	689b      	ldr	r3, [r3, #8]
 808500e:	2034      	movs	r0, #52	; 0x34
 8085010:	4798      	blx	r3
 8085012:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8085014:	697b      	ldr	r3, [r7, #20]
 8085016:	f648 1294 	movw	r2, #35220	; 0x8994
 808501a:	4293      	cmp	r3, r2
 808501c:	d109      	bne.n	8085032 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 808501e:	4b10      	ldr	r3, [pc, #64]	; (8085060 <BSP_AUDIO_IN_InitEx+0xd0>)
 8085020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085022:	2034      	movs	r0, #52	; 0x34
 8085024:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8085026:	4b0f      	ldr	r3, [pc, #60]	; (8085064 <BSP_AUDIO_IN_InitEx+0xd4>)
 8085028:	4a0d      	ldr	r2, [pc, #52]	; (8085060 <BSP_AUDIO_IN_InitEx+0xd0>)
 808502a:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 808502c:	2300      	movs	r3, #0
 808502e:	77fb      	strb	r3, [r7, #31]
 8085030:	e001      	b.n	8085036 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8085032:	2301      	movs	r3, #1
 8085034:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8085036:	7ffb      	ldrb	r3, [r7, #31]
 8085038:	2b00      	cmp	r3, #0
 808503a:	d107      	bne.n	808504c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 808503c:	4b09      	ldr	r3, [pc, #36]	; (8085064 <BSP_AUDIO_IN_InitEx+0xd4>)
 808503e:	681b      	ldr	r3, [r3, #0]
 8085040:	681c      	ldr	r4, [r3, #0]
 8085042:	89f9      	ldrh	r1, [r7, #14]
 8085044:	68bb      	ldr	r3, [r7, #8]
 8085046:	2264      	movs	r2, #100	; 0x64
 8085048:	2034      	movs	r0, #52	; 0x34
 808504a:	47a0      	blx	r4
    }
  }
  return ret;
 808504c:	7ffb      	ldrb	r3, [r7, #31]
}
 808504e:	4618      	mov	r0, r3
 8085050:	3724      	adds	r7, #36	; 0x24
 8085052:	46bd      	mov	sp, r7
 8085054:	bd90      	pop	{r4, r7, pc}
 8085056:	bf00      	nop
 8085058:	2000b6ac 	.word	0x2000b6ac
 808505c:	40015c24 	.word	0x40015c24
 8085060:	2000b028 	.word	0x2000b028
 8085064:	2002d83c 	.word	0x2002d83c

08085068 <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8085068:	b590      	push	{r4, r7, lr}
 808506a:	b089      	sub	sp, #36	; 0x24
 808506c:	af00      	add	r7, sp, #0
 808506e:	60ba      	str	r2, [r7, #8]
 8085070:	607b      	str	r3, [r7, #4]
 8085072:	4603      	mov	r3, r0
 8085074:	81fb      	strh	r3, [r7, #14]
 8085076:	460b      	mov	r3, r1
 8085078:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 808507a:	2301      	movs	r3, #1
 808507c:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 808507e:	2300      	movs	r3, #0
 8085080:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8085082:	89fb      	ldrh	r3, [r7, #14]
 8085084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8085088:	d002      	beq.n	8085090 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 808508a:	2301      	movs	r3, #1
 808508c:	77fb      	strb	r3, [r7, #31]
 808508e:	e054      	b.n	808513a <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8085090:	f000 fa1a 	bl	80854c8 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8085094:	f7ff ff54 	bl	8084f40 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8085098:	2200      	movs	r2, #0
 808509a:	68b9      	ldr	r1, [r7, #8]
 808509c:	4829      	ldr	r0, [pc, #164]	; (8085144 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 808509e:	f7ff fead 	bl	8084dfc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80850a2:	4b28      	ldr	r3, [pc, #160]	; (8085144 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80850a4:	4a28      	ldr	r2, [pc, #160]	; (8085148 <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80850a6:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80850a8:	4826      	ldr	r0, [pc, #152]	; (8085144 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80850aa:	f009 f8e9 	bl	808e280 <HAL_SAI_GetState>
 80850ae:	4603      	mov	r3, r0
 80850b0:	2b00      	cmp	r3, #0
 80850b2:	d103      	bne.n	80850bc <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80850b4:	2100      	movs	r1, #0
 80850b6:	4823      	ldr	r0, [pc, #140]	; (8085144 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80850b8:	f000 f89e 	bl	80851f8 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80850bc:	4b23      	ldr	r3, [pc, #140]	; (808514c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80850be:	4a24      	ldr	r2, [pc, #144]	; (8085150 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80850c0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80850c2:	4822      	ldr	r0, [pc, #136]	; (808514c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80850c4:	f009 f8dc 	bl	808e280 <HAL_SAI_GetState>
 80850c8:	4603      	mov	r3, r0
 80850ca:	2b00      	cmp	r3, #0
 80850cc:	d103      	bne.n	80850d6 <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80850ce:	2100      	movs	r1, #0
 80850d0:	481e      	ldr	r0, [pc, #120]	; (808514c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80850d2:	f7ff fd77 	bl	8084bc4 <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80850d6:	89fb      	ldrh	r3, [r7, #14]
 80850d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80850dc:	d102      	bne.n	80850e4 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80850de:	230a      	movs	r3, #10
 80850e0:	61bb      	str	r3, [r7, #24]
 80850e2:	e001      	b.n	80850e8 <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80850e4:	2305      	movs	r3, #5
 80850e6:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80850e8:	68ba      	ldr	r2, [r7, #8]
 80850ea:	69b9      	ldr	r1, [r7, #24]
 80850ec:	2000      	movs	r0, #0
 80850ee:	f000 f935 	bl	808535c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80850f2:	4b18      	ldr	r3, [pc, #96]	; (8085154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80850f4:	689b      	ldr	r3, [r3, #8]
 80850f6:	2034      	movs	r0, #52	; 0x34
 80850f8:	4798      	blx	r3
 80850fa:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 80850fc:	697b      	ldr	r3, [r7, #20]
 80850fe:	f648 1294 	movw	r2, #35220	; 0x8994
 8085102:	4293      	cmp	r3, r2
 8085104:	d109      	bne.n	808511a <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8085106:	4b13      	ldr	r3, [pc, #76]	; (8085154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8085108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808510a:	2034      	movs	r0, #52	; 0x34
 808510c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 808510e:	4b12      	ldr	r3, [pc, #72]	; (8085158 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8085110:	4a10      	ldr	r2, [pc, #64]	; (8085154 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8085112:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8085114:	2300      	movs	r3, #0
 8085116:	77fb      	strb	r3, [r7, #31]
 8085118:	e001      	b.n	808511e <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 808511a:	2301      	movs	r3, #1
 808511c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 808511e:	7ffb      	ldrb	r3, [r7, #31]
 8085120:	2b00      	cmp	r3, #0
 8085122:	d10a      	bne.n	808513a <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8085124:	4b0c      	ldr	r3, [pc, #48]	; (8085158 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8085126:	681b      	ldr	r3, [r3, #0]
 8085128:	681c      	ldr	r4, [r3, #0]
 808512a:	89fa      	ldrh	r2, [r7, #14]
 808512c:	89bb      	ldrh	r3, [r7, #12]
 808512e:	4313      	orrs	r3, r2
 8085130:	b299      	uxth	r1, r3
 8085132:	68bb      	ldr	r3, [r7, #8]
 8085134:	2264      	movs	r2, #100	; 0x64
 8085136:	2034      	movs	r0, #52	; 0x34
 8085138:	47a0      	blx	r4
    }
  }
  return ret;
 808513a:	7ffb      	ldrb	r3, [r7, #31]
}
 808513c:	4618      	mov	r0, r3
 808513e:	3724      	adds	r7, #36	; 0x24
 8085140:	46bd      	mov	sp, r7
 8085142:	bd90      	pop	{r4, r7, pc}
 8085144:	2000b6ac 	.word	0x2000b6ac
 8085148:	40015c24 	.word	0x40015c24
 808514c:	2000b628 	.word	0x2000b628
 8085150:	40015c04 	.word	0x40015c04
 8085154:	2000b028 	.word	0x2000b028
 8085158:	2002d83c 	.word	0x2002d83c

0808515c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 808515c:	b580      	push	{r7, lr}
 808515e:	b084      	sub	sp, #16
 8085160:	af00      	add	r7, sp, #0
 8085162:	6078      	str	r0, [r7, #4]
 8085164:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8085166:	2301      	movs	r3, #1
 8085168:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 808516a:	683b      	ldr	r3, [r7, #0]
 808516c:	b29b      	uxth	r3, r3
 808516e:	461a      	mov	r2, r3
 8085170:	6879      	ldr	r1, [r7, #4]
 8085172:	4805      	ldr	r0, [pc, #20]	; (8085188 <BSP_AUDIO_IN_Record+0x2c>)
 8085174:	f008 fff6 	bl	808e164 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8085178:	2300      	movs	r3, #0
 808517a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 808517c:	68fb      	ldr	r3, [r7, #12]
 808517e:	b2db      	uxtb	r3, r3
}
 8085180:	4618      	mov	r0, r3
 8085182:	3710      	adds	r7, #16
 8085184:	46bd      	mov	sp, r7
 8085186:	bd80      	pop	{r7, pc}
 8085188:	2000b6ac 	.word	0x2000b6ac

0808518c <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 808518c:	b580      	push	{r7, lr}
 808518e:	b082      	sub	sp, #8
 8085190:	af00      	add	r7, sp, #0
 8085192:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8085194:	480c      	ldr	r0, [pc, #48]	; (80851c8 <BSP_AUDIO_IN_Stop+0x3c>)
 8085196:	f008 fee3 	bl	808df60 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 808519a:	4b0c      	ldr	r3, [pc, #48]	; (80851cc <BSP_AUDIO_IN_Stop+0x40>)
 808519c:	681b      	ldr	r3, [r3, #0]
 808519e:	699b      	ldr	r3, [r3, #24]
 80851a0:	6879      	ldr	r1, [r7, #4]
 80851a2:	2034      	movs	r0, #52	; 0x34
 80851a4:	4798      	blx	r3
 80851a6:	4603      	mov	r3, r0
 80851a8:	2b00      	cmp	r3, #0
 80851aa:	d001      	beq.n	80851b0 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 80851ac:	2301      	movs	r3, #1
 80851ae:	e006      	b.n	80851be <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80851b0:	687b      	ldr	r3, [r7, #4]
 80851b2:	2b01      	cmp	r3, #1
 80851b4:	d102      	bne.n	80851bc <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 80851b6:	2001      	movs	r0, #1
 80851b8:	f003 ffde 	bl	8089178 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80851bc:	2300      	movs	r3, #0
  }
}
 80851be:	4618      	mov	r0, r3
 80851c0:	3708      	adds	r7, #8
 80851c2:	46bd      	mov	sp, r7
 80851c4:	bd80      	pop	{r7, pc}
 80851c6:	bf00      	nop
 80851c8:	2000b6ac 	.word	0x2000b6ac
 80851cc:	2002d83c 	.word	0x2002d83c

080851d0 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80851d0:	b580      	push	{r7, lr}
 80851d2:	b082      	sub	sp, #8
 80851d4:	af00      	add	r7, sp, #0
 80851d6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80851d8:	f013 fe60 	bl	8098e9c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80851dc:	bf00      	nop
 80851de:	3708      	adds	r7, #8
 80851e0:	46bd      	mov	sp, r7
 80851e2:	bd80      	pop	{r7, pc}

080851e4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80851e4:	b580      	push	{r7, lr}
 80851e6:	b082      	sub	sp, #8
 80851e8:	af00      	add	r7, sp, #0
 80851ea:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80851ec:	f013 fe62 	bl	8098eb4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80851f0:	bf00      	nop
 80851f2:	3708      	adds	r7, #8
 80851f4:	46bd      	mov	sp, r7
 80851f6:	bd80      	pop	{r7, pc}

080851f8 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80851f8:	b580      	push	{r7, lr}
 80851fa:	b08c      	sub	sp, #48	; 0x30
 80851fc:	af00      	add	r7, sp, #0
 80851fe:	6078      	str	r0, [r7, #4]
 8085200:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8085202:	4b50      	ldr	r3, [pc, #320]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085206:	4a4f      	ldr	r2, [pc, #316]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 808520c:	6453      	str	r3, [r2, #68]	; 0x44
 808520e:	4b4d      	ldr	r3, [pc, #308]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8085216:	61bb      	str	r3, [r7, #24]
 8085218:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 808521a:	4b4a      	ldr	r3, [pc, #296]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 808521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808521e:	4a49      	ldr	r2, [pc, #292]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8085224:	6313      	str	r3, [r2, #48]	; 0x30
 8085226:	4b47      	ldr	r3, [pc, #284]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808522e:	617b      	str	r3, [r7, #20]
 8085230:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8085232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8085236:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8085238:	2302      	movs	r3, #2
 808523a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 808523c:	2300      	movs	r3, #0
 808523e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8085240:	2302      	movs	r3, #2
 8085242:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8085244:	230a      	movs	r3, #10
 8085246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8085248:	f107 031c 	add.w	r3, r7, #28
 808524c:	4619      	mov	r1, r3
 808524e:	483e      	ldr	r0, [pc, #248]	; (8085348 <BSP_AUDIO_IN_MspInit+0x150>)
 8085250:	f004 ffba 	bl	808a1c8 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8085254:	4b3b      	ldr	r3, [pc, #236]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085258:	4a3a      	ldr	r2, [pc, #232]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 808525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808525e:	6313      	str	r3, [r2, #48]	; 0x30
 8085260:	4b38      	ldr	r3, [pc, #224]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8085268:	613b      	str	r3, [r7, #16]
 808526a:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 808526c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8085270:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8085272:	2300      	movs	r3, #0
 8085274:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8085276:	2300      	movs	r3, #0
 8085278:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 808527a:	2302      	movs	r3, #2
 808527c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 808527e:	f107 031c 	add.w	r3, r7, #28
 8085282:	4619      	mov	r1, r3
 8085284:	4831      	ldr	r0, [pc, #196]	; (808534c <BSP_AUDIO_IN_MspInit+0x154>)
 8085286:	f004 ff9f 	bl	808a1c8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 808528a:	4b2e      	ldr	r3, [pc, #184]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 808528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808528e:	4a2d      	ldr	r2, [pc, #180]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8085294:	6313      	str	r3, [r2, #48]	; 0x30
 8085296:	4b2b      	ldr	r3, [pc, #172]	; (8085344 <BSP_AUDIO_IN_MspInit+0x14c>)
 8085298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808529e:	60fb      	str	r3, [r7, #12]
 80852a0:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 80852a2:	687b      	ldr	r3, [r7, #4]
 80852a4:	681b      	ldr	r3, [r3, #0]
 80852a6:	4a2a      	ldr	r2, [pc, #168]	; (8085350 <BSP_AUDIO_IN_MspInit+0x158>)
 80852a8:	4293      	cmp	r3, r2
 80852aa:	d137      	bne.n	808531c <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80852ac:	4b29      	ldr	r3, [pc, #164]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852ae:	2200      	movs	r2, #0
 80852b0:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80852b2:	4b28      	ldr	r3, [pc, #160]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852b4:	2200      	movs	r2, #0
 80852b6:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80852b8:	4b26      	ldr	r3, [pc, #152]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852ba:	2200      	movs	r2, #0
 80852bc:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80852be:	4b25      	ldr	r3, [pc, #148]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80852c4:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80852c6:	4b23      	ldr	r3, [pc, #140]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80852cc:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80852ce:	4b21      	ldr	r3, [pc, #132]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80852d4:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80852d6:	4b1f      	ldr	r3, [pc, #124]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80852dc:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80852de:	4b1d      	ldr	r3, [pc, #116]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80852e4:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80852e6:	4b1b      	ldr	r3, [pc, #108]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852e8:	2200      	movs	r2, #0
 80852ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80852ec:	4b19      	ldr	r3, [pc, #100]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852ee:	2203      	movs	r2, #3
 80852f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80852f2:	4b18      	ldr	r3, [pc, #96]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852f4:	2200      	movs	r2, #0
 80852f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80852f8:	4b16      	ldr	r3, [pc, #88]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 80852fa:	2200      	movs	r2, #0
 80852fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80852fe:	4b15      	ldr	r3, [pc, #84]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 8085300:	4a15      	ldr	r2, [pc, #84]	; (8085358 <BSP_AUDIO_IN_MspInit+0x160>)
 8085302:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8085304:	687b      	ldr	r3, [r7, #4]
 8085306:	4a13      	ldr	r2, [pc, #76]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 8085308:	671a      	str	r2, [r3, #112]	; 0x70
 808530a:	4a12      	ldr	r2, [pc, #72]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 808530c:	687b      	ldr	r3, [r7, #4]
 808530e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8085310:	4810      	ldr	r0, [pc, #64]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 8085312:	f004 f907 	bl	8089524 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8085316:	480f      	ldr	r0, [pc, #60]	; (8085354 <BSP_AUDIO_IN_MspInit+0x15c>)
 8085318:	f004 f856 	bl	80893c8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 808531c:	2200      	movs	r2, #0
 808531e:	210f      	movs	r1, #15
 8085320:	2046      	movs	r0, #70	; 0x46
 8085322:	f004 f819 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8085326:	2046      	movs	r0, #70	; 0x46
 8085328:	f004 f832 	bl	8089390 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 808532c:	2200      	movs	r2, #0
 808532e:	210f      	movs	r1, #15
 8085330:	2028      	movs	r0, #40	; 0x28
 8085332:	f004 f811 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8085336:	2028      	movs	r0, #40	; 0x28
 8085338:	f004 f82a 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 808533c:	bf00      	nop
 808533e:	3730      	adds	r7, #48	; 0x30
 8085340:	46bd      	mov	sp, r7
 8085342:	bd80      	pop	{r7, pc}
 8085344:	40023800 	.word	0x40023800
 8085348:	40021800 	.word	0x40021800
 808534c:	40021c00 	.word	0x40021c00
 8085350:	40015c24 	.word	0x40015c24
 8085354:	2000b790 	.word	0x2000b790
 8085358:	400264b8 	.word	0x400264b8

0808535c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 808535c:	b580      	push	{r7, lr}
 808535e:	b084      	sub	sp, #16
 8085360:	af00      	add	r7, sp, #0
 8085362:	60f8      	str	r0, [r7, #12]
 8085364:	60b9      	str	r1, [r7, #8]
 8085366:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8085368:	4b53      	ldr	r3, [pc, #332]	; (80854b8 <SAIx_In_Init+0x15c>)
 808536a:	4a54      	ldr	r2, [pc, #336]	; (80854bc <SAIx_In_Init+0x160>)
 808536c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 808536e:	4b52      	ldr	r3, [pc, #328]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085370:	681b      	ldr	r3, [r3, #0]
 8085372:	681a      	ldr	r2, [r3, #0]
 8085374:	4b50      	ldr	r3, [pc, #320]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085376:	681b      	ldr	r3, [r3, #0]
 8085378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 808537c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 808537e:	4a4e      	ldr	r2, [pc, #312]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085380:	687b      	ldr	r3, [r7, #4]
 8085382:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8085384:	4a4c      	ldr	r2, [pc, #304]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085386:	68fb      	ldr	r3, [r7, #12]
 8085388:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 808538a:	4b4b      	ldr	r3, [pc, #300]	; (80854b8 <SAIx_In_Init+0x15c>)
 808538c:	2200      	movs	r2, #0
 808538e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8085390:	4b49      	ldr	r3, [pc, #292]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085392:	2200      	movs	r2, #0
 8085394:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8085396:	4b48      	ldr	r3, [pc, #288]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085398:	2280      	movs	r2, #128	; 0x80
 808539a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 808539c:	4b46      	ldr	r3, [pc, #280]	; (80854b8 <SAIx_In_Init+0x15c>)
 808539e:	2200      	movs	r2, #0
 80853a0:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80853a2:	4b45      	ldr	r3, [pc, #276]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853a4:	2201      	movs	r2, #1
 80853a6:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80853a8:	4b43      	ldr	r3, [pc, #268]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853aa:	2200      	movs	r2, #0
 80853ac:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80853ae:	4b42      	ldr	r3, [pc, #264]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80853b4:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80853b6:	4b40      	ldr	r3, [pc, #256]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853b8:	2201      	movs	r2, #1
 80853ba:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80853bc:	4b3e      	ldr	r3, [pc, #248]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853be:	2240      	movs	r2, #64	; 0x40
 80853c0:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80853c2:	4b3d      	ldr	r3, [pc, #244]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853c4:	2220      	movs	r2, #32
 80853c6:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80853c8:	4b3b      	ldr	r3, [pc, #236]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80853ce:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80853d0:	4b39      	ldr	r3, [pc, #228]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853d2:	2200      	movs	r2, #0
 80853d4:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80853d6:	4b38      	ldr	r3, [pc, #224]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80853dc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80853de:	4b36      	ldr	r3, [pc, #216]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853e0:	2200      	movs	r2, #0
 80853e2:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80853e4:	4b34      	ldr	r3, [pc, #208]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853e6:	2200      	movs	r2, #0
 80853e8:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80853ea:	4b33      	ldr	r3, [pc, #204]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853ec:	2204      	movs	r2, #4
 80853ee:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80853f0:	4a31      	ldr	r2, [pc, #196]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853f2:	68bb      	ldr	r3, [r7, #8]
 80853f4:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80853f6:	4830      	ldr	r0, [pc, #192]	; (80854b8 <SAIx_In_Init+0x15c>)
 80853f8:	f008 fba4 	bl	808db44 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80853fc:	4b30      	ldr	r3, [pc, #192]	; (80854c0 <SAIx_In_Init+0x164>)
 80853fe:	4a31      	ldr	r2, [pc, #196]	; (80854c4 <SAIx_In_Init+0x168>)
 8085400:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8085402:	4b2f      	ldr	r3, [pc, #188]	; (80854c0 <SAIx_In_Init+0x164>)
 8085404:	681b      	ldr	r3, [r3, #0]
 8085406:	681a      	ldr	r2, [r3, #0]
 8085408:	4b2d      	ldr	r3, [pc, #180]	; (80854c0 <SAIx_In_Init+0x164>)
 808540a:	681b      	ldr	r3, [r3, #0]
 808540c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8085410:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8085412:	4a2b      	ldr	r2, [pc, #172]	; (80854c0 <SAIx_In_Init+0x164>)
 8085414:	687b      	ldr	r3, [r7, #4]
 8085416:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8085418:	4b29      	ldr	r3, [pc, #164]	; (80854c0 <SAIx_In_Init+0x164>)
 808541a:	2203      	movs	r2, #3
 808541c:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 808541e:	4b28      	ldr	r3, [pc, #160]	; (80854c0 <SAIx_In_Init+0x164>)
 8085420:	2200      	movs	r2, #0
 8085422:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8085424:	4b26      	ldr	r3, [pc, #152]	; (80854c0 <SAIx_In_Init+0x164>)
 8085426:	2200      	movs	r2, #0
 8085428:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 808542a:	4b25      	ldr	r3, [pc, #148]	; (80854c0 <SAIx_In_Init+0x164>)
 808542c:	2280      	movs	r2, #128	; 0x80
 808542e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8085430:	4b23      	ldr	r3, [pc, #140]	; (80854c0 <SAIx_In_Init+0x164>)
 8085432:	2200      	movs	r2, #0
 8085434:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8085436:	4b22      	ldr	r3, [pc, #136]	; (80854c0 <SAIx_In_Init+0x164>)
 8085438:	2201      	movs	r2, #1
 808543a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 808543c:	4b20      	ldr	r3, [pc, #128]	; (80854c0 <SAIx_In_Init+0x164>)
 808543e:	2201      	movs	r2, #1
 8085440:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8085442:	4b1f      	ldr	r3, [pc, #124]	; (80854c0 <SAIx_In_Init+0x164>)
 8085444:	2200      	movs	r2, #0
 8085446:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8085448:	4b1d      	ldr	r3, [pc, #116]	; (80854c0 <SAIx_In_Init+0x164>)
 808544a:	2201      	movs	r2, #1
 808544c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 808544e:	4b1c      	ldr	r3, [pc, #112]	; (80854c0 <SAIx_In_Init+0x164>)
 8085450:	2240      	movs	r2, #64	; 0x40
 8085452:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8085454:	4b1a      	ldr	r3, [pc, #104]	; (80854c0 <SAIx_In_Init+0x164>)
 8085456:	2220      	movs	r2, #32
 8085458:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 808545a:	4b19      	ldr	r3, [pc, #100]	; (80854c0 <SAIx_In_Init+0x164>)
 808545c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8085460:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8085462:	4b17      	ldr	r3, [pc, #92]	; (80854c0 <SAIx_In_Init+0x164>)
 8085464:	2200      	movs	r2, #0
 8085466:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8085468:	4b15      	ldr	r3, [pc, #84]	; (80854c0 <SAIx_In_Init+0x164>)
 808546a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 808546e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8085470:	4b13      	ldr	r3, [pc, #76]	; (80854c0 <SAIx_In_Init+0x164>)
 8085472:	2200      	movs	r2, #0
 8085474:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8085476:	4b12      	ldr	r3, [pc, #72]	; (80854c0 <SAIx_In_Init+0x164>)
 8085478:	2200      	movs	r2, #0
 808547a:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 808547c:	4b10      	ldr	r3, [pc, #64]	; (80854c0 <SAIx_In_Init+0x164>)
 808547e:	2204      	movs	r2, #4
 8085480:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8085482:	4a0f      	ldr	r2, [pc, #60]	; (80854c0 <SAIx_In_Init+0x164>)
 8085484:	68bb      	ldr	r3, [r7, #8]
 8085486:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8085488:	480d      	ldr	r0, [pc, #52]	; (80854c0 <SAIx_In_Init+0x164>)
 808548a:	f008 fb5b 	bl	808db44 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 808548e:	4b0a      	ldr	r3, [pc, #40]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085490:	681b      	ldr	r3, [r3, #0]
 8085492:	681a      	ldr	r2, [r3, #0]
 8085494:	4b08      	ldr	r3, [pc, #32]	; (80854b8 <SAIx_In_Init+0x15c>)
 8085496:	681b      	ldr	r3, [r3, #0]
 8085498:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 808549c:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 808549e:	4b08      	ldr	r3, [pc, #32]	; (80854c0 <SAIx_In_Init+0x164>)
 80854a0:	681b      	ldr	r3, [r3, #0]
 80854a2:	681a      	ldr	r2, [r3, #0]
 80854a4:	4b06      	ldr	r3, [pc, #24]	; (80854c0 <SAIx_In_Init+0x164>)
 80854a6:	681b      	ldr	r3, [r3, #0]
 80854a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80854ac:	601a      	str	r2, [r3, #0]
}
 80854ae:	bf00      	nop
 80854b0:	3710      	adds	r7, #16
 80854b2:	46bd      	mov	sp, r7
 80854b4:	bd80      	pop	{r7, pc}
 80854b6:	bf00      	nop
 80854b8:	2000b628 	.word	0x2000b628
 80854bc:	40015c04 	.word	0x40015c04
 80854c0:	2000b6ac 	.word	0x2000b6ac
 80854c4:	40015c24 	.word	0x40015c24

080854c8 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80854c8:	b580      	push	{r7, lr}
 80854ca:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80854cc:	4b07      	ldr	r3, [pc, #28]	; (80854ec <SAIx_In_DeInit+0x24>)
 80854ce:	4a08      	ldr	r2, [pc, #32]	; (80854f0 <SAIx_In_DeInit+0x28>)
 80854d0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80854d2:	4b06      	ldr	r3, [pc, #24]	; (80854ec <SAIx_In_DeInit+0x24>)
 80854d4:	681b      	ldr	r3, [r3, #0]
 80854d6:	681a      	ldr	r2, [r3, #0]
 80854d8:	4b04      	ldr	r3, [pc, #16]	; (80854ec <SAIx_In_DeInit+0x24>)
 80854da:	681b      	ldr	r3, [r3, #0]
 80854dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80854e0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80854e2:	4802      	ldr	r0, [pc, #8]	; (80854ec <SAIx_In_DeInit+0x24>)
 80854e4:	f008 fca0 	bl	808de28 <HAL_SAI_DeInit>
}
 80854e8:	bf00      	nop
 80854ea:	bd80      	pop	{r7, pc}
 80854ec:	2000b6ac 	.word	0x2000b6ac
 80854f0:	40015c24 	.word	0x40015c24

080854f4 <BSP_KEYS_Init>:
/**
 * @brief  Initializes the KEYS interface.
 * @retval KEYS memory status
 */
uint8_t BSP_KEYS_Init(void)
{ 
 80854f4:	b580      	push	{r7, lr}
 80854f6:	af00      	add	r7, sp, #0
	/* SPi Configuration */
	SPIHandle.Instance = KEYS_SPIx;
 80854f8:	4b23      	ldr	r3, [pc, #140]	; (8085588 <BSP_KEYS_Init+0x94>)
 80854fa:	4a24      	ldr	r2, [pc, #144]	; (808558c <BSP_KEYS_Init+0x98>)
 80854fc:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 80854fe:	4822      	ldr	r0, [pc, #136]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085500:	f00a fc36 	bl	808fd70 <HAL_SPI_DeInit>
 8085504:	4603      	mov	r3, r0
 8085506:	2b00      	cmp	r3, #0
 8085508:	d001      	beq.n	808550e <BSP_KEYS_Init+0x1a>
	{
		return KEYS_ERROR;
 808550a:	2301      	movs	r3, #1
 808550c:	e039      	b.n	8085582 <BSP_KEYS_Init+0x8e>
	}

	/* System level initialization */
	BSP_KEYS_MspInit();
 808550e:	f000 f8a9 	bl	8085664 <BSP_KEYS_MspInit>

	/* SPI2 initialization */
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8085512:	4b1d      	ldr	r3, [pc, #116]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085514:	2238      	movs	r2, #56	; 0x38
 8085516:	61da      	str	r2, [r3, #28]
	SPIHandle.Init.CLKPhase 		= SPI_PHASE_1EDGE;
 8085518:	4b1b      	ldr	r3, [pc, #108]	; (8085588 <BSP_KEYS_Init+0x94>)
 808551a:	2200      	movs	r2, #0
 808551c:	615a      	str	r2, [r3, #20]
	SPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 808551e:	4b1a      	ldr	r3, [pc, #104]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085520:	2200      	movs	r2, #0
 8085522:	611a      	str	r2, [r3, #16]
	SPIHandle.Init.DataSize 		= SPI_DATASIZE_8BIT;
 8085524:	4b18      	ldr	r3, [pc, #96]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085526:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 808552a:	60da      	str	r2, [r3, #12]
	SPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES;
 808552c:	4b16      	ldr	r3, [pc, #88]	; (8085588 <BSP_KEYS_Init+0x94>)
 808552e:	2200      	movs	r2, #0
 8085530:	609a      	str	r2, [r3, #8]
	SPIHandle.Init.FirstBit 		= SPI_FIRSTBIT_MSB;
 8085532:	4b15      	ldr	r3, [pc, #84]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085534:	2200      	movs	r2, #0
 8085536:	621a      	str	r2, [r3, #32]
	SPIHandle.Init.Mode 			=  SPI_MODE_MASTER;
 8085538:	4b13      	ldr	r3, [pc, #76]	; (8085588 <BSP_KEYS_Init+0x94>)
 808553a:	f44f 7282 	mov.w	r2, #260	; 0x104
 808553e:	605a      	str	r2, [r3, #4]
	SPIHandle.Init.NSS 				= SPI_NSS_SOFT;
 8085540:	4b11      	ldr	r3, [pc, #68]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085546:	619a      	str	r2, [r3, #24]
	SPIHandle.Init.TIMode           = SPI_TIMODE_DISABLE;
 8085548:	4b0f      	ldr	r3, [pc, #60]	; (8085588 <BSP_KEYS_Init+0x94>)
 808554a:	2200      	movs	r2, #0
 808554c:	625a      	str	r2, [r3, #36]	; 0x24
	SPIHandle.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 808554e:	4b0e      	ldr	r3, [pc, #56]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085550:	2200      	movs	r2, #0
 8085552:	629a      	str	r2, [r3, #40]	; 0x28
	SPIHandle.Init.CRCPolynomial    = 7;
 8085554:	4b0c      	ldr	r3, [pc, #48]	; (8085588 <BSP_KEYS_Init+0x94>)
 8085556:	2207      	movs	r2, #7
 8085558:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 808555a:	480b      	ldr	r0, [pc, #44]	; (8085588 <BSP_KEYS_Init+0x94>)
 808555c:	f00a fb63 	bl	808fc26 <HAL_SPI_Init>
 8085560:	4603      	mov	r3, r0
 8085562:	2b00      	cmp	r3, #0
 8085564:	d001      	beq.n	808556a <BSP_KEYS_Init+0x76>
	{
		return KEYS_ERROR;
 8085566:	2301      	movs	r3, #1
 8085568:	e00b      	b.n	8085582 <BSP_KEYS_Init+0x8e>
	}

	KEYS_CS_DISABLE();
 808556a:	2201      	movs	r2, #1
 808556c:	2180      	movs	r1, #128	; 0x80
 808556e:	4808      	ldr	r0, [pc, #32]	; (8085590 <BSP_KEYS_Init+0x9c>)
 8085570:	f005 f8f6 	bl	808a760 <HAL_GPIO_WritePin>
	KEYS_SET_SERIAL_MODE();
 8085574:	2201      	movs	r2, #1
 8085576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 808557a:	4806      	ldr	r0, [pc, #24]	; (8085594 <BSP_KEYS_Init+0xa0>)
 808557c:	f005 f8f0 	bl	808a760 <HAL_GPIO_WritePin>

	return KEYS_OK;
 8085580:	2300      	movs	r3, #0
}
 8085582:	4618      	mov	r0, r3
 8085584:	bd80      	pop	{r7, pc}
 8085586:	bf00      	nop
 8085588:	2002d840 	.word	0x2002d840
 808558c:	40003800 	.word	0x40003800
 8085590:	40021800 	.word	0x40021800
 8085594:	40020000 	.word	0x40020000

08085598 <BSP_KEYS_Read>:
/**
 * @brief  Reads keys
 * @retval KEYS memory status
 */
uint8_t BSP_KEYS_Read(void)
{
 8085598:	b580      	push	{r7, lr}
 808559a:	b082      	sub	sp, #8
 808559c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 808559e:	b672      	cpsid	i

	/* TODO: Supprimer apres test */
	__disable_irq();

	/* Enable Keys serializer */
	KEYS_CS_ENABLE();
 80855a0:	2200      	movs	r2, #0
 80855a2:	2180      	movs	r1, #128	; 0x80
 80855a4:	481a      	ldr	r0, [pc, #104]	; (8085610 <BSP_KEYS_Read+0x78>)
 80855a6:	f005 f8db 	bl	808a760 <HAL_GPIO_WritePin>

	/* Enable Parallel load (KEY_LOAD=0, PE) */
	KEYS_SET_PARALLEL_MODE();
 80855aa:	2200      	movs	r2, #0
 80855ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80855b0:	4818      	ldr	r0, [pc, #96]	; (8085614 <BSP_KEYS_Read+0x7c>)
 80855b2:	f005 f8d5 	bl	808a760 <HAL_GPIO_WritePin>

	/* Do a dummy read (just to have 1 clock event for loading parallel data) */
	status = HAL_SPI_Receive(&SPIHandle, &dummy,1,100);
 80855b6:	1db9      	adds	r1, r7, #6
 80855b8:	2364      	movs	r3, #100	; 0x64
 80855ba:	2201      	movs	r2, #1
 80855bc:	4816      	ldr	r0, [pc, #88]	; (8085618 <BSP_KEYS_Read+0x80>)
 80855be:	f00a fd46 	bl	809004e <HAL_SPI_Receive>
 80855c2:	4603      	mov	r3, r0
 80855c4:	71fb      	strb	r3, [r7, #7]

	/* Switch to serial mode */
	KEYS_SET_SERIAL_MODE();
 80855c6:	2201      	movs	r2, #1
 80855c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80855cc:	4811      	ldr	r0, [pc, #68]	; (8085614 <BSP_KEYS_Read+0x7c>)
 80855ce:	f005 f8c7 	bl	808a760 <HAL_GPIO_WritePin>

	/* Read data */
	status = HAL_SPI_Receive(&SPIHandle, &KEYSBuffer,1,100);
 80855d2:	2364      	movs	r3, #100	; 0x64
 80855d4:	2201      	movs	r2, #1
 80855d6:	4911      	ldr	r1, [pc, #68]	; (808561c <BSP_KEYS_Read+0x84>)
 80855d8:	480f      	ldr	r0, [pc, #60]	; (8085618 <BSP_KEYS_Read+0x80>)
 80855da:	f00a fd38 	bl	809004e <HAL_SPI_Receive>
 80855de:	4603      	mov	r3, r0
 80855e0:	71fb      	strb	r3, [r7, #7]
	KEYSBuffer = ~KEYSBuffer; // on inverse la polarité des touches: a 0 si relachée, à 1 si appuyée
 80855e2:	4b0e      	ldr	r3, [pc, #56]	; (808561c <BSP_KEYS_Read+0x84>)
 80855e4:	781b      	ldrb	r3, [r3, #0]
 80855e6:	43db      	mvns	r3, r3
 80855e8:	b2da      	uxtb	r2, r3
 80855ea:	4b0c      	ldr	r3, [pc, #48]	; (808561c <BSP_KEYS_Read+0x84>)
 80855ec:	701a      	strb	r2, [r3, #0]

	/* Disable Keys serializer (free spi bus) */
	KEYS_CS_DISABLE();
 80855ee:	2201      	movs	r2, #1
 80855f0:	2180      	movs	r1, #128	; 0x80
 80855f2:	4807      	ldr	r0, [pc, #28]	; (8085610 <BSP_KEYS_Read+0x78>)
 80855f4:	f005 f8b4 	bl	808a760 <HAL_GPIO_WritePin>

	if (status != HAL_OK)
 80855f8:	79fb      	ldrb	r3, [r7, #7]
 80855fa:	2b00      	cmp	r3, #0
 80855fc:	d001      	beq.n	8085602 <BSP_KEYS_Read+0x6a>
	{
		return KEYS_ERROR;
 80855fe:	2301      	movs	r3, #1
 8085600:	e001      	b.n	8085606 <BSP_KEYS_Read+0x6e>
  __ASM volatile ("cpsie i" : : : "memory");
 8085602:	b662      	cpsie	i
	}

	/* TODO: Supprimer apres test */
	__enable_irq();

	return KEYS_OK;
 8085604:	2300      	movs	r3, #0
}
 8085606:	4618      	mov	r0, r3
 8085608:	3708      	adds	r7, #8
 808560a:	46bd      	mov	sp, r7
 808560c:	bd80      	pop	{r7, pc}
 808560e:	bf00      	nop
 8085610:	40021800 	.word	0x40021800
 8085614:	40020000 	.word	0x40020000
 8085618:	2002d840 	.word	0x2002d840
 808561c:	2002d7f8 	.word	0x2002d7f8

08085620 <BSP_KEYS_GetKey>:
/**
 * @brief  Check if given key is pressed
 * @retval KEYS_PRESSED or KEYS_RELEASE
 */
uint8_t BSP_KEYS_GetKey(uint8_t key)
{
 8085620:	b580      	push	{r7, lr}
 8085622:	b082      	sub	sp, #8
 8085624:	af00      	add	r7, sp, #0
 8085626:	4603      	mov	r3, r0
 8085628:	71fb      	strb	r3, [r7, #7]
	BSP_KEYS_Read();
 808562a:	f7ff ffb5 	bl	8085598 <BSP_KEYS_Read>

	if (KEYSBuffer & key)
 808562e:	4b07      	ldr	r3, [pc, #28]	; (808564c <BSP_KEYS_GetKey+0x2c>)
 8085630:	781a      	ldrb	r2, [r3, #0]
 8085632:	79fb      	ldrb	r3, [r7, #7]
 8085634:	4013      	ands	r3, r2
 8085636:	b2db      	uxtb	r3, r3
 8085638:	2b00      	cmp	r3, #0
 808563a:	d001      	beq.n	8085640 <BSP_KEYS_GetKey+0x20>
	{
		return KEYS_PRESSED;
 808563c:	2301      	movs	r3, #1
 808563e:	e000      	b.n	8085642 <BSP_KEYS_GetKey+0x22>
	}

	return KEYS_RELEASED;
 8085640:	2300      	movs	r3, #0
}
 8085642:	4618      	mov	r0, r3
 8085644:	3708      	adds	r7, #8
 8085646:	46bd      	mov	sp, r7
 8085648:	bd80      	pop	{r7, pc}
 808564a:	bf00      	nop
 808564c:	2002d7f8 	.word	0x2002d7f8

08085650 <BSP_KEYS_GetKeys>:
/**
 * @brief  Return whole keys status
 * @retval Keys status
 */
uint8_t BSP_KEYS_GetKeys (void)
{
 8085650:	b580      	push	{r7, lr}
 8085652:	af00      	add	r7, sp, #0
	BSP_KEYS_Read();
 8085654:	f7ff ffa0 	bl	8085598 <BSP_KEYS_Read>

	return KEYSBuffer;
 8085658:	4b01      	ldr	r3, [pc, #4]	; (8085660 <BSP_KEYS_GetKeys+0x10>)
 808565a:	781b      	ldrb	r3, [r3, #0]
}
 808565c:	4618      	mov	r0, r3
 808565e:	bd80      	pop	{r7, pc}
 8085660:	2002d7f8 	.word	0x2002d7f8

08085664 <BSP_KEYS_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_KEYS_MspInit(void)
{
 8085664:	b580      	push	{r7, lr}
 8085666:	b08a      	sub	sp, #40	; 0x28
 8085668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable the Keys (SPI) interface clock */
	KEYS_CLK_ENABLE();
 808566a:	4b43      	ldr	r3, [pc, #268]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 808566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808566e:	4a42      	ldr	r2, [pc, #264]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 8085670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8085674:	6413      	str	r3, [r2, #64]	; 0x40
 8085676:	4b40      	ldr	r3, [pc, #256]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 8085678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808567a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808567e:	613b      	str	r3, [r7, #16]
 8085680:	693b      	ldr	r3, [r7, #16]

	/* Enable GPIO clocks */
	KEYS_CS_GPIO_CLK_ENABLE();
 8085682:	4b3d      	ldr	r3, [pc, #244]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 8085684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085686:	4a3c      	ldr	r2, [pc, #240]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 8085688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808568c:	6313      	str	r3, [r2, #48]	; 0x30
 808568e:	4b3a      	ldr	r3, [pc, #232]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 8085690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8085696:	60fb      	str	r3, [r7, #12]
 8085698:	68fb      	ldr	r3, [r7, #12]
	KEYS_CLK_GPIO_CLK_ENABLE();
 808569a:	4b37      	ldr	r3, [pc, #220]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 808569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808569e:	4a36      	ldr	r2, [pc, #216]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80856a4:	6313      	str	r3, [r2, #48]	; 0x30
 80856a6:	4b34      	ldr	r3, [pc, #208]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80856ae:	60bb      	str	r3, [r7, #8]
 80856b0:	68bb      	ldr	r3, [r7, #8]
	KEYS_MISO_GPIO_CLK_ENABLE();
 80856b2:	4b31      	ldr	r3, [pc, #196]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856b6:	4a30      	ldr	r2, [pc, #192]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856b8:	f043 0302 	orr.w	r3, r3, #2
 80856bc:	6313      	str	r3, [r2, #48]	; 0x30
 80856be:	4b2e      	ldr	r3, [pc, #184]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856c2:	f003 0302 	and.w	r3, r3, #2
 80856c6:	607b      	str	r3, [r7, #4]
 80856c8:	687b      	ldr	r3, [r7, #4]
	KEYS_LOAD_GPIO_CLK_ENABLE();
 80856ca:	4b2b      	ldr	r3, [pc, #172]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856ce:	4a2a      	ldr	r2, [pc, #168]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856d0:	f043 0301 	orr.w	r3, r3, #1
 80856d4:	6313      	str	r3, [r2, #48]	; 0x30
 80856d6:	4b28      	ldr	r3, [pc, #160]	; (8085778 <BSP_KEYS_MspInit+0x114>)
 80856d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80856da:	f003 0301 	and.w	r3, r3, #1
 80856de:	603b      	str	r3, [r7, #0]
 80856e0:	683b      	ldr	r3, [r7, #0]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_CS_PIN;
 80856e2:	2380      	movs	r3, #128	; 0x80
 80856e4:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80856e6:	2301      	movs	r3, #1
 80856e8:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 80856ea:	2300      	movs	r3, #0
 80856ec:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80856ee:	2303      	movs	r3, #3
 80856f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(KEYS_CS_GPIO_PORT, &gpio_init_structure);
 80856f2:	f107 0314 	add.w	r3, r7, #20
 80856f6:	4619      	mov	r1, r3
 80856f8:	4820      	ldr	r0, [pc, #128]	; (808577c <BSP_KEYS_MspInit+0x118>)
 80856fa:	f004 fd65 	bl	808a1c8 <HAL_GPIO_Init>

	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_LOAD_PIN;
 80856fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8085702:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(KEYS_LOAD_GPIO_PORT, &gpio_init_structure);
 8085704:	f107 0314 	add.w	r3, r7, #20
 8085708:	4619      	mov	r1, r3
 808570a:	481d      	ldr	r0, [pc, #116]	; (8085780 <BSP_KEYS_MspInit+0x11c>)
 808570c:	f004 fd5c 	bl	808a1c8 <HAL_GPIO_Init>

	//TODO: A supprimer quand le driver BMP280 sera pret
	/* BMP280 CS GPIO pin configuration , to put it high */
	gpio_init_structure.Pin       = GPIO_PIN_8;
 8085710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8085714:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8085716:	f107 0314 	add.w	r3, r7, #20
 808571a:	4619      	mov	r1, r3
 808571c:	4818      	ldr	r0, [pc, #96]	; (8085780 <BSP_KEYS_MspInit+0x11c>)
 808571e:	f004 fd53 	bl	808a1c8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8085722:	2201      	movs	r2, #1
 8085724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8085728:	4815      	ldr	r0, [pc, #84]	; (8085780 <BSP_KEYS_MspInit+0x11c>)
 808572a:	f005 f819 	bl	808a760 <HAL_GPIO_WritePin>
	//TODO: Fin de suppression

	/* KEYS CLK GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_CLK_PIN;
 808572e:	2302      	movs	r3, #2
 8085730:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8085732:	2302      	movs	r3, #2
 8085734:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8085736:	2300      	movs	r3, #0
 8085738:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 808573a:	2305      	movs	r3, #5
 808573c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(KEYS_CLK_GPIO_PORT, &gpio_init_structure);
 808573e:	f107 0314 	add.w	r3, r7, #20
 8085742:	4619      	mov	r1, r3
 8085744:	480f      	ldr	r0, [pc, #60]	; (8085784 <BSP_KEYS_MspInit+0x120>)
 8085746:	f004 fd3f 	bl	808a1c8 <HAL_GPIO_Init>

	/* KEYS MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = KEYS_MISO_PIN;
 808574a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 808574e:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8085750:	2305      	movs	r3, #5
 8085752:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(KEYS_MISO_GPIO_PORT, &gpio_init_structure);
 8085754:	f107 0314 	add.w	r3, r7, #20
 8085758:	4619      	mov	r1, r3
 808575a:	480b      	ldr	r0, [pc, #44]	; (8085788 <BSP_KEYS_MspInit+0x124>)
 808575c:	f004 fd34 	bl	808a1c8 <HAL_GPIO_Init>

	/*##-3- Configure the NVIC for SPI2 #########################################*/
	/* NVIC configuration for SPI2 interrupt */
	HAL_NVIC_SetPriority(SPI2_IRQn, 0x0F, 0);
 8085760:	2200      	movs	r2, #0
 8085762:	210f      	movs	r1, #15
 8085764:	2024      	movs	r0, #36	; 0x24
 8085766:	f003 fdf7 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 808576a:	2024      	movs	r0, #36	; 0x24
 808576c:	f003 fe10 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8085770:	bf00      	nop
 8085772:	3728      	adds	r7, #40	; 0x28
 8085774:	46bd      	mov	sp, r7
 8085776:	bd80      	pop	{r7, pc}
 8085778:	40023800 	.word	0x40023800
 808577c:	40021800 	.word	0x40021800
 8085780:	40020000 	.word	0x40020000
 8085784:	40022000 	.word	0x40022000
 8085788:	40020400 	.word	0x40020400

0808578c <BSP_LCD_Init>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void)
{    
 808578c:	b580      	push	{r7, lr}
 808578e:	af00      	add	r7, sp, #0
	/* Select the used LCD */

	/* The RK043FN48H LCD 480x272 is selected */
	/* Timing Configuration */
	hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8085790:	4b31      	ldr	r3, [pc, #196]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085792:	2228      	movs	r2, #40	; 0x28
 8085794:	615a      	str	r2, [r3, #20]
	hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8085796:	4b30      	ldr	r3, [pc, #192]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085798:	2209      	movs	r2, #9
 808579a:	619a      	str	r2, [r3, #24]
	hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 808579c:	4b2e      	ldr	r3, [pc, #184]	; (8085858 <BSP_LCD_Init+0xcc>)
 808579e:	2235      	movs	r2, #53	; 0x35
 80857a0:	61da      	str	r2, [r3, #28]
	hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80857a2:	4b2d      	ldr	r3, [pc, #180]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857a4:	220b      	movs	r2, #11
 80857a6:	621a      	str	r2, [r3, #32]
	hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80857a8:	4b2b      	ldr	r3, [pc, #172]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857aa:	f240 121b 	movw	r2, #283	; 0x11b
 80857ae:	629a      	str	r2, [r3, #40]	; 0x28
	hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80857b0:	4b29      	ldr	r3, [pc, #164]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857b2:	f240 2215 	movw	r2, #533	; 0x215
 80857b6:	625a      	str	r2, [r3, #36]	; 0x24
	hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80857b8:	4b27      	ldr	r3, [pc, #156]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857ba:	f240 121d 	movw	r2, #285	; 0x11d
 80857be:	631a      	str	r2, [r3, #48]	; 0x30
	hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80857c0:	4b25      	ldr	r3, [pc, #148]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857c2:	f240 2235 	movw	r2, #565	; 0x235
 80857c6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* LCD clock configuration */
	BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80857c8:	2100      	movs	r1, #0
 80857ca:	4823      	ldr	r0, [pc, #140]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857cc:	f001 fb7e 	bl	8086ecc <BSP_LCD_ClockConfig>

	/* Initialize the LCD pixel width and pixel height */
	hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80857d0:	4b21      	ldr	r3, [pc, #132]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80857d6:	661a      	str	r2, [r3, #96]	; 0x60
	hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80857d8:	4b1f      	ldr	r3, [pc, #124]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857da:	f44f 7288 	mov.w	r2, #272	; 0x110
 80857de:	665a      	str	r2, [r3, #100]	; 0x64

	/* Background value */
	hLtdcHandler.Init.Backcolor.Blue = 0;
 80857e0:	4b1d      	ldr	r3, [pc, #116]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857e2:	2200      	movs	r2, #0
 80857e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hLtdcHandler.Init.Backcolor.Green = 0;
 80857e8:	4b1b      	ldr	r3, [pc, #108]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857ea:	2200      	movs	r2, #0
 80857ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hLtdcHandler.Init.Backcolor.Red = 0;
 80857f0:	4b19      	ldr	r3, [pc, #100]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857f2:	2200      	movs	r2, #0
 80857f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Polarity */
	hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80857f8:	4b17      	ldr	r3, [pc, #92]	; (8085858 <BSP_LCD_Init+0xcc>)
 80857fa:	2200      	movs	r2, #0
 80857fc:	605a      	str	r2, [r3, #4]
	hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80857fe:	4b16      	ldr	r3, [pc, #88]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085800:	2200      	movs	r2, #0
 8085802:	609a      	str	r2, [r3, #8]
	hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8085804:	4b14      	ldr	r3, [pc, #80]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085806:	2200      	movs	r2, #0
 8085808:	60da      	str	r2, [r3, #12]
	hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 808580a:	4b13      	ldr	r3, [pc, #76]	; (8085858 <BSP_LCD_Init+0xcc>)
 808580c:	2200      	movs	r2, #0
 808580e:	611a      	str	r2, [r3, #16]
	hLtdcHandler.Instance = LTDC;
 8085810:	4b11      	ldr	r3, [pc, #68]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085812:	4a12      	ldr	r2, [pc, #72]	; (808585c <BSP_LCD_Init+0xd0>)
 8085814:	601a      	str	r2, [r3, #0]

	if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8085816:	4810      	ldr	r0, [pc, #64]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085818:	f005 ff15 	bl	808b646 <HAL_LTDC_GetState>
 808581c:	4603      	mov	r3, r0
 808581e:	2b00      	cmp	r3, #0
 8085820:	d103      	bne.n	808582a <BSP_LCD_Init+0x9e>
	{
		/* Initialize the LCD Msp: this __weak function can be rewritten by the application */
		BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8085822:	2100      	movs	r1, #0
 8085824:	480c      	ldr	r0, [pc, #48]	; (8085858 <BSP_LCD_Init+0xcc>)
 8085826:	f001 fa77 	bl	8086d18 <BSP_LCD_MspInit>
	}
	HAL_LTDC_Init(&hLtdcHandler);
 808582a:	480b      	ldr	r0, [pc, #44]	; (8085858 <BSP_LCD_Init+0xcc>)
 808582c:	f005 fd6a 	bl	808b304 <HAL_LTDC_Init>

	/* Assert display enable LCD_DISP pin */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8085830:	2201      	movs	r2, #1
 8085832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8085836:	480a      	ldr	r0, [pc, #40]	; (8085860 <BSP_LCD_Init+0xd4>)
 8085838:	f004 ff92 	bl	808a760 <HAL_GPIO_WritePin>

	/* Assert backlight LCD_BL_CTRL pin */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 808583c:	2201      	movs	r2, #1
 808583e:	2108      	movs	r1, #8
 8085840:	4808      	ldr	r0, [pc, #32]	; (8085864 <BSP_LCD_Init+0xd8>)
 8085842:	f004 ff8d 	bl	808a760 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 8085846:	f002 fed3 	bl	80885f0 <BSP_SDRAM_Init>
#endif

	/* Initialize the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 808584a:	4807      	ldr	r0, [pc, #28]	; (8085868 <BSP_LCD_Init+0xdc>)
 808584c:	f000 f900 	bl	8085a50 <BSP_LCD_SetFont>

	return LCD_OK;
 8085850:	2300      	movs	r3, #0
}
 8085852:	4618      	mov	r0, r3
 8085854:	bd80      	pop	{r7, pc}
 8085856:	bf00      	nop
 8085858:	2002d8a4 	.word	0x2002d8a4
 808585c:	40016800 	.word	0x40016800
 8085860:	40022000 	.word	0x40022000
 8085864:	40022800 	.word	0x40022800
 8085868:	2000b36c 	.word	0x2000b36c

0808586c <BSP_LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @retval Used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void)
{
 808586c:	b480      	push	{r7}
 808586e:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8085870:	4b06      	ldr	r3, [pc, #24]	; (808588c <BSP_LCD_GetXSize+0x20>)
 8085872:	681b      	ldr	r3, [r3, #0]
 8085874:	4a06      	ldr	r2, [pc, #24]	; (8085890 <BSP_LCD_GetXSize+0x24>)
 8085876:	2134      	movs	r1, #52	; 0x34
 8085878:	fb01 f303 	mul.w	r3, r1, r3
 808587c:	4413      	add	r3, r2
 808587e:	3360      	adds	r3, #96	; 0x60
 8085880:	681b      	ldr	r3, [r3, #0]
}
 8085882:	4618      	mov	r0, r3
 8085884:	46bd      	mov	sp, r7
 8085886:	f85d 7b04 	ldr.w	r7, [sp], #4
 808588a:	4770      	bx	lr
 808588c:	2000b830 	.word	0x2000b830
 8085890:	2002d8a4 	.word	0x2002d8a4

08085894 <BSP_LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @retval Used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void)
{
 8085894:	b480      	push	{r7}
 8085896:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8085898:	4b06      	ldr	r3, [pc, #24]	; (80858b4 <BSP_LCD_GetYSize+0x20>)
 808589a:	681b      	ldr	r3, [r3, #0]
 808589c:	4a06      	ldr	r2, [pc, #24]	; (80858b8 <BSP_LCD_GetYSize+0x24>)
 808589e:	2134      	movs	r1, #52	; 0x34
 80858a0:	fb01 f303 	mul.w	r3, r1, r3
 80858a4:	4413      	add	r3, r2
 80858a6:	3364      	adds	r3, #100	; 0x64
 80858a8:	681b      	ldr	r3, [r3, #0]
}
 80858aa:	4618      	mov	r0, r3
 80858ac:	46bd      	mov	sp, r7
 80858ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80858b2:	4770      	bx	lr
 80858b4:	2000b830 	.word	0x2000b830
 80858b8:	2002d8a4 	.word	0x2002d8a4

080858bc <BSP_LCD_LayerRgb565Init>:
 * @param  LayerIndex: Layer foreground or background
 * @param  FB_Address: Layer frame buffer
 * @retval None
 */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80858bc:	b580      	push	{r7, lr}
 80858be:	b090      	sub	sp, #64	; 0x40
 80858c0:	af00      	add	r7, sp, #0
 80858c2:	4603      	mov	r3, r0
 80858c4:	6039      	str	r1, [r7, #0]
 80858c6:	80fb      	strh	r3, [r7, #6]
	LCD_LayerCfgTypeDef  layer_cfg;

	/* Layer Init */
	layer_cfg.WindowX0 = 0;
 80858c8:	2300      	movs	r3, #0
 80858ca:	60fb      	str	r3, [r7, #12]
	layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80858cc:	f7ff ffce 	bl	808586c <BSP_LCD_GetXSize>
 80858d0:	4603      	mov	r3, r0
 80858d2:	613b      	str	r3, [r7, #16]
	layer_cfg.WindowY0 = 0;
 80858d4:	2300      	movs	r3, #0
 80858d6:	617b      	str	r3, [r7, #20]
	layer_cfg.WindowY1 = BSP_LCD_GetYSize();
 80858d8:	f7ff ffdc 	bl	8085894 <BSP_LCD_GetYSize>
 80858dc:	4603      	mov	r3, r0
 80858de:	61bb      	str	r3, [r7, #24]
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80858e0:	2302      	movs	r3, #2
 80858e2:	61fb      	str	r3, [r7, #28]
	layer_cfg.FBStartAdress = FB_Address;
 80858e4:	683b      	ldr	r3, [r7, #0]
 80858e6:	633b      	str	r3, [r7, #48]	; 0x30
	//if (LayerIndex==1) layer_cfg.Alpha = 128;
	/*else*/  layer_cfg.Alpha = 255;
 80858e8:	23ff      	movs	r3, #255	; 0xff
 80858ea:	623b      	str	r3, [r7, #32]
	layer_cfg.Alpha0 = 0;
 80858ec:	2300      	movs	r3, #0
 80858ee:	627b      	str	r3, [r7, #36]	; 0x24
	layer_cfg.Backcolor.Blue = 0;
 80858f0:	2300      	movs	r3, #0
 80858f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	layer_cfg.Backcolor.Green = 0;
 80858f6:	2300      	movs	r3, #0
 80858f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	layer_cfg.Backcolor.Red = 0;
 80858fc:	2300      	movs	r3, #0
 80858fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8085902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8085906:	62bb      	str	r3, [r7, #40]	; 0x28
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8085908:	2307      	movs	r3, #7
 808590a:	62fb      	str	r3, [r7, #44]	; 0x2c
	layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 808590c:	f7ff ffae 	bl	808586c <BSP_LCD_GetXSize>
 8085910:	4603      	mov	r3, r0
 8085912:	637b      	str	r3, [r7, #52]	; 0x34
	layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8085914:	f7ff ffbe 	bl	8085894 <BSP_LCD_GetYSize>
 8085918:	4603      	mov	r3, r0
 808591a:	63bb      	str	r3, [r7, #56]	; 0x38

	HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex);
 808591c:	88fa      	ldrh	r2, [r7, #6]
 808591e:	f107 030c 	add.w	r3, r7, #12
 8085922:	4619      	mov	r1, r3
 8085924:	4812      	ldr	r0, [pc, #72]	; (8085970 <BSP_LCD_LayerRgb565Init+0xb4>)
 8085926:	f005 fdd3 	bl	808b4d0 <HAL_LTDC_ConfigLayer>

	DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 808592a:	88fa      	ldrh	r2, [r7, #6]
 808592c:	4911      	ldr	r1, [pc, #68]	; (8085974 <BSP_LCD_LayerRgb565Init+0xb8>)
 808592e:	4613      	mov	r3, r2
 8085930:	005b      	lsls	r3, r3, #1
 8085932:	4413      	add	r3, r2
 8085934:	009b      	lsls	r3, r3, #2
 8085936:	440b      	add	r3, r1
 8085938:	3304      	adds	r3, #4
 808593a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 808593e:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].pFont     = &Font24;
 8085940:	88fa      	ldrh	r2, [r7, #6]
 8085942:	490c      	ldr	r1, [pc, #48]	; (8085974 <BSP_LCD_LayerRgb565Init+0xb8>)
 8085944:	4613      	mov	r3, r2
 8085946:	005b      	lsls	r3, r3, #1
 8085948:	4413      	add	r3, r2
 808594a:	009b      	lsls	r3, r3, #2
 808594c:	440b      	add	r3, r1
 808594e:	3308      	adds	r3, #8
 8085950:	4a09      	ldr	r2, [pc, #36]	; (8085978 <BSP_LCD_LayerRgb565Init+0xbc>)
 8085952:	601a      	str	r2, [r3, #0]
	DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8085954:	88fa      	ldrh	r2, [r7, #6]
 8085956:	4907      	ldr	r1, [pc, #28]	; (8085974 <BSP_LCD_LayerRgb565Init+0xb8>)
 8085958:	4613      	mov	r3, r2
 808595a:	005b      	lsls	r3, r3, #1
 808595c:	4413      	add	r3, r2
 808595e:	009b      	lsls	r3, r3, #2
 8085960:	440b      	add	r3, r1
 8085962:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8085966:	601a      	str	r2, [r3, #0]
}
 8085968:	bf00      	nop
 808596a:	3740      	adds	r7, #64	; 0x40
 808596c:	46bd      	mov	sp, r7
 808596e:	bd80      	pop	{r7, pc}
 8085970:	2002d8a4 	.word	0x2002d8a4
 8085974:	2000b834 	.word	0x2000b834
 8085978:	2000b36c 	.word	0x2000b36c

0808597c <BSP_LCD_SelectLayer>:
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: Layer foreground or background
 * @retval None
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 808597c:	b480      	push	{r7}
 808597e:	b083      	sub	sp, #12
 8085980:	af00      	add	r7, sp, #0
 8085982:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8085984:	4a04      	ldr	r2, [pc, #16]	; (8085998 <BSP_LCD_SelectLayer+0x1c>)
 8085986:	687b      	ldr	r3, [r7, #4]
 8085988:	6013      	str	r3, [r2, #0]
} 
 808598a:	bf00      	nop
 808598c:	370c      	adds	r7, #12
 808598e:	46bd      	mov	sp, r7
 8085990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085994:	4770      	bx	lr
 8085996:	bf00      	nop
 8085998:	2000b830 	.word	0x2000b830

0808599c <BSP_LCD_SetColorKeying>:
 * @param  LayerIndex: Layer foreground or background
 * @param  RGBValue: Color reference
 * @retval None
 */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 808599c:	b580      	push	{r7, lr}
 808599e:	b082      	sub	sp, #8
 80859a0:	af00      	add	r7, sp, #0
 80859a2:	6078      	str	r0, [r7, #4]
 80859a4:	6039      	str	r1, [r7, #0]
	/* Configure and Enable the color Keying for LCD Layer */
	HAL_LTDC_ConfigColorKeying(&hLtdcHandler, RGBValue, LayerIndex);
 80859a6:	687a      	ldr	r2, [r7, #4]
 80859a8:	6839      	ldr	r1, [r7, #0]
 80859aa:	4805      	ldr	r0, [pc, #20]	; (80859c0 <BSP_LCD_SetColorKeying+0x24>)
 80859ac:	f005 fdce 	bl	808b54c <HAL_LTDC_ConfigColorKeying>
	HAL_LTDC_EnableColorKeying(&hLtdcHandler, LayerIndex);
 80859b0:	6879      	ldr	r1, [r7, #4]
 80859b2:	4803      	ldr	r0, [pc, #12]	; (80859c0 <BSP_LCD_SetColorKeying+0x24>)
 80859b4:	f005 fe0e 	bl	808b5d4 <HAL_LTDC_EnableColorKeying>
}
 80859b8:	bf00      	nop
 80859ba:	3708      	adds	r7, #8
 80859bc:	46bd      	mov	sp, r7
 80859be:	bd80      	pop	{r7, pc}
 80859c0:	2002d8a4 	.word	0x2002d8a4

080859c4 <BSP_LCD_SetTextColor>:
 * @brief  Sets the LCD text color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 * @retval None
 */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80859c4:	b480      	push	{r7}
 80859c6:	b083      	sub	sp, #12
 80859c8:	af00      	add	r7, sp, #0
 80859ca:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 80859cc:	4b07      	ldr	r3, [pc, #28]	; (80859ec <BSP_LCD_SetTextColor+0x28>)
 80859ce:	681a      	ldr	r2, [r3, #0]
 80859d0:	4907      	ldr	r1, [pc, #28]	; (80859f0 <BSP_LCD_SetTextColor+0x2c>)
 80859d2:	4613      	mov	r3, r2
 80859d4:	005b      	lsls	r3, r3, #1
 80859d6:	4413      	add	r3, r2
 80859d8:	009b      	lsls	r3, r3, #2
 80859da:	440b      	add	r3, r1
 80859dc:	687a      	ldr	r2, [r7, #4]
 80859de:	601a      	str	r2, [r3, #0]
}
 80859e0:	bf00      	nop
 80859e2:	370c      	adds	r7, #12
 80859e4:	46bd      	mov	sp, r7
 80859e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80859ea:	4770      	bx	lr
 80859ec:	2000b830 	.word	0x2000b830
 80859f0:	2000b834 	.word	0x2000b834

080859f4 <BSP_LCD_GetTextColor>:
/**
 * @brief  Gets the LCD text color.
 * @retval Used text color.
 */
uint32_t BSP_LCD_GetTextColor(void)
{
 80859f4:	b480      	push	{r7}
 80859f6:	af00      	add	r7, sp, #0
	return DrawProp[ActiveLayer].TextColor;
 80859f8:	4b06      	ldr	r3, [pc, #24]	; (8085a14 <BSP_LCD_GetTextColor+0x20>)
 80859fa:	681a      	ldr	r2, [r3, #0]
 80859fc:	4906      	ldr	r1, [pc, #24]	; (8085a18 <BSP_LCD_GetTextColor+0x24>)
 80859fe:	4613      	mov	r3, r2
 8085a00:	005b      	lsls	r3, r3, #1
 8085a02:	4413      	add	r3, r2
 8085a04:	009b      	lsls	r3, r3, #2
 8085a06:	440b      	add	r3, r1
 8085a08:	681b      	ldr	r3, [r3, #0]
}
 8085a0a:	4618      	mov	r0, r3
 8085a0c:	46bd      	mov	sp, r7
 8085a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085a12:	4770      	bx	lr
 8085a14:	2000b830 	.word	0x2000b830
 8085a18:	2000b834 	.word	0x2000b834

08085a1c <BSP_LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8085a1c:	b480      	push	{r7}
 8085a1e:	b083      	sub	sp, #12
 8085a20:	af00      	add	r7, sp, #0
 8085a22:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 8085a24:	4b08      	ldr	r3, [pc, #32]	; (8085a48 <BSP_LCD_SetBackColor+0x2c>)
 8085a26:	681a      	ldr	r2, [r3, #0]
 8085a28:	4908      	ldr	r1, [pc, #32]	; (8085a4c <BSP_LCD_SetBackColor+0x30>)
 8085a2a:	4613      	mov	r3, r2
 8085a2c:	005b      	lsls	r3, r3, #1
 8085a2e:	4413      	add	r3, r2
 8085a30:	009b      	lsls	r3, r3, #2
 8085a32:	440b      	add	r3, r1
 8085a34:	3304      	adds	r3, #4
 8085a36:	687a      	ldr	r2, [r7, #4]
 8085a38:	601a      	str	r2, [r3, #0]
}
 8085a3a:	bf00      	nop
 8085a3c:	370c      	adds	r7, #12
 8085a3e:	46bd      	mov	sp, r7
 8085a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085a44:	4770      	bx	lr
 8085a46:	bf00      	nop
 8085a48:	2000b830 	.word	0x2000b830
 8085a4c:	2000b834 	.word	0x2000b834

08085a50 <BSP_LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8085a50:	b480      	push	{r7}
 8085a52:	b083      	sub	sp, #12
 8085a54:	af00      	add	r7, sp, #0
 8085a56:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = fonts;
 8085a58:	4b08      	ldr	r3, [pc, #32]	; (8085a7c <BSP_LCD_SetFont+0x2c>)
 8085a5a:	681a      	ldr	r2, [r3, #0]
 8085a5c:	4908      	ldr	r1, [pc, #32]	; (8085a80 <BSP_LCD_SetFont+0x30>)
 8085a5e:	4613      	mov	r3, r2
 8085a60:	005b      	lsls	r3, r3, #1
 8085a62:	4413      	add	r3, r2
 8085a64:	009b      	lsls	r3, r3, #2
 8085a66:	440b      	add	r3, r1
 8085a68:	3308      	adds	r3, #8
 8085a6a:	687a      	ldr	r2, [r7, #4]
 8085a6c:	601a      	str	r2, [r3, #0]
}
 8085a6e:	bf00      	nop
 8085a70:	370c      	adds	r7, #12
 8085a72:	46bd      	mov	sp, r7
 8085a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085a78:	4770      	bx	lr
 8085a7a:	bf00      	nop
 8085a7c:	2000b830 	.word	0x2000b830
 8085a80:	2000b834 	.word	0x2000b834

08085a84 <BSP_LCD_GetFont>:
/**
 * @brief  Gets the LCD text font.
 * @retval Used layer font
 */
sFONT *BSP_LCD_GetFont(void)
{
 8085a84:	b480      	push	{r7}
 8085a86:	af00      	add	r7, sp, #0
	return DrawProp[ActiveLayer].pFont;
 8085a88:	4b07      	ldr	r3, [pc, #28]	; (8085aa8 <BSP_LCD_GetFont+0x24>)
 8085a8a:	681a      	ldr	r2, [r3, #0]
 8085a8c:	4907      	ldr	r1, [pc, #28]	; (8085aac <BSP_LCD_GetFont+0x28>)
 8085a8e:	4613      	mov	r3, r2
 8085a90:	005b      	lsls	r3, r3, #1
 8085a92:	4413      	add	r3, r2
 8085a94:	009b      	lsls	r3, r3, #2
 8085a96:	440b      	add	r3, r1
 8085a98:	3308      	adds	r3, #8
 8085a9a:	681b      	ldr	r3, [r3, #0]
}
 8085a9c:	4618      	mov	r0, r3
 8085a9e:	46bd      	mov	sp, r7
 8085aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085aa4:	4770      	bx	lr
 8085aa6:	bf00      	nop
 8085aa8:	2000b830 	.word	0x2000b830
 8085aac:	2000b834 	.word	0x2000b834

08085ab0 <BSP_LCD_Clear>:
 * @brief  Clears the whole LCD.
 * @param  Color: Color of the background
 * @retval None
 */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8085ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085ab2:	b085      	sub	sp, #20
 8085ab4:	af02      	add	r7, sp, #8
 8085ab6:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8085ab8:	4b0f      	ldr	r3, [pc, #60]	; (8085af8 <BSP_LCD_Clear+0x48>)
 8085aba:	681c      	ldr	r4, [r3, #0]
 8085abc:	4b0e      	ldr	r3, [pc, #56]	; (8085af8 <BSP_LCD_Clear+0x48>)
 8085abe:	681b      	ldr	r3, [r3, #0]
 8085ac0:	4a0e      	ldr	r2, [pc, #56]	; (8085afc <BSP_LCD_Clear+0x4c>)
 8085ac2:	2134      	movs	r1, #52	; 0x34
 8085ac4:	fb01 f303 	mul.w	r3, r1, r3
 8085ac8:	4413      	add	r3, r2
 8085aca:	335c      	adds	r3, #92	; 0x5c
 8085acc:	681b      	ldr	r3, [r3, #0]
 8085ace:	461d      	mov	r5, r3
 8085ad0:	f7ff fecc 	bl	808586c <BSP_LCD_GetXSize>
 8085ad4:	4606      	mov	r6, r0
 8085ad6:	f7ff fedd 	bl	8085894 <BSP_LCD_GetYSize>
 8085ada:	4602      	mov	r2, r0
 8085adc:	687b      	ldr	r3, [r7, #4]
 8085ade:	9301      	str	r3, [sp, #4]
 8085ae0:	2300      	movs	r3, #0
 8085ae2:	9300      	str	r3, [sp, #0]
 8085ae4:	4613      	mov	r3, r2
 8085ae6:	4632      	mov	r2, r6
 8085ae8:	4629      	mov	r1, r5
 8085aea:	4620      	mov	r0, r4
 8085aec:	f001 fb82 	bl	80871f4 <LL_FillBuffer>
}
 8085af0:	bf00      	nop
 8085af2:	370c      	adds	r7, #12
 8085af4:	46bd      	mov	sp, r7
 8085af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085af8:	2000b830 	.word	0x2000b830
 8085afc:	2002d8a4 	.word	0x2002d8a4

08085b00 <BSP_LCD_ResetScreen>:
/**
 * @brief  Full reset of screen.
 * @param none
 * @retval None
 */
void BSP_LCD_ResetScreen(void) {
 8085b00:	b580      	push	{r7, lr}
 8085b02:	af00      	add	r7, sp, #0
	BSP_LCD_SelectLayer(LTDC_BACKGROUND_LAYER);
 8085b04:	2000      	movs	r0, #0
 8085b06:	f7ff ff39 	bl	808597c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8085b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085b0e:	f7ff ffcf 	bl	8085ab0 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(LTDC_FOREGROUND_LAYER);
 8085b12:	2001      	movs	r0, #1
 8085b14:	f7ff ff32 	bl	808597c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8085b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085b1c:	f7ff ffc8 	bl	8085ab0 <BSP_LCD_Clear>
}
 8085b20:	bf00      	nop
 8085b22:	bd80      	pop	{r7, pc}

08085b24 <BSP_LCD_DisplayChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8085b24:	b590      	push	{r4, r7, lr}
 8085b26:	b083      	sub	sp, #12
 8085b28:	af00      	add	r7, sp, #0
 8085b2a:	4603      	mov	r3, r0
 8085b2c:	80fb      	strh	r3, [r7, #6]
 8085b2e:	460b      	mov	r3, r1
 8085b30:	80bb      	strh	r3, [r7, #4]
 8085b32:	4613      	mov	r3, r2
 8085b34:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8085b36:	4b1b      	ldr	r3, [pc, #108]	; (8085ba4 <BSP_LCD_DisplayChar+0x80>)
 8085b38:	681a      	ldr	r2, [r3, #0]
 8085b3a:	491b      	ldr	r1, [pc, #108]	; (8085ba8 <BSP_LCD_DisplayChar+0x84>)
 8085b3c:	4613      	mov	r3, r2
 8085b3e:	005b      	lsls	r3, r3, #1
 8085b40:	4413      	add	r3, r2
 8085b42:	009b      	lsls	r3, r3, #2
 8085b44:	440b      	add	r3, r1
 8085b46:	3308      	adds	r3, #8
 8085b48:	681b      	ldr	r3, [r3, #0]
 8085b4a:	6819      	ldr	r1, [r3, #0]
 8085b4c:	78fb      	ldrb	r3, [r7, #3]
 8085b4e:	f1a3 0020 	sub.w	r0, r3, #32
															 DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8085b52:	4b14      	ldr	r3, [pc, #80]	; (8085ba4 <BSP_LCD_DisplayChar+0x80>)
 8085b54:	681a      	ldr	r2, [r3, #0]
 8085b56:	4c14      	ldr	r4, [pc, #80]	; (8085ba8 <BSP_LCD_DisplayChar+0x84>)
 8085b58:	4613      	mov	r3, r2
 8085b5a:	005b      	lsls	r3, r3, #1
 8085b5c:	4413      	add	r3, r2
 8085b5e:	009b      	lsls	r3, r3, #2
 8085b60:	4423      	add	r3, r4
 8085b62:	3308      	adds	r3, #8
 8085b64:	681b      	ldr	r3, [r3, #0]
 8085b66:	88db      	ldrh	r3, [r3, #6]
	DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8085b68:	fb03 f000 	mul.w	r0, r3, r0
															 DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8085b6c:	4b0d      	ldr	r3, [pc, #52]	; (8085ba4 <BSP_LCD_DisplayChar+0x80>)
 8085b6e:	681a      	ldr	r2, [r3, #0]
 8085b70:	4c0d      	ldr	r4, [pc, #52]	; (8085ba8 <BSP_LCD_DisplayChar+0x84>)
 8085b72:	4613      	mov	r3, r2
 8085b74:	005b      	lsls	r3, r3, #1
 8085b76:	4413      	add	r3, r2
 8085b78:	009b      	lsls	r3, r3, #2
 8085b7a:	4423      	add	r3, r4
 8085b7c:	3308      	adds	r3, #8
 8085b7e:	681b      	ldr	r3, [r3, #0]
 8085b80:	889b      	ldrh	r3, [r3, #4]
 8085b82:	3307      	adds	r3, #7
 8085b84:	2b00      	cmp	r3, #0
 8085b86:	da00      	bge.n	8085b8a <BSP_LCD_DisplayChar+0x66>
 8085b88:	3307      	adds	r3, #7
 8085b8a:	10db      	asrs	r3, r3, #3
 8085b8c:	fb03 f300 	mul.w	r3, r3, r0
	DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8085b90:	18ca      	adds	r2, r1, r3
 8085b92:	88b9      	ldrh	r1, [r7, #4]
 8085b94:	88fb      	ldrh	r3, [r7, #6]
 8085b96:	4618      	mov	r0, r3
 8085b98:	f001 f9b4 	bl	8086f04 <DrawChar>
}
 8085b9c:	bf00      	nop
 8085b9e:	370c      	adds	r7, #12
 8085ba0:	46bd      	mov	sp, r7
 8085ba2:	bd90      	pop	{r4, r7, pc}
 8085ba4:	2000b830 	.word	0x2000b830
 8085ba8:	2000b834 	.word	0x2000b834

08085bac <BSP_LCD_DisplayStringAt>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8085bac:	b5b0      	push	{r4, r5, r7, lr}
 8085bae:	b088      	sub	sp, #32
 8085bb0:	af00      	add	r7, sp, #0
 8085bb2:	60ba      	str	r2, [r7, #8]
 8085bb4:	461a      	mov	r2, r3
 8085bb6:	4603      	mov	r3, r0
 8085bb8:	81fb      	strh	r3, [r7, #14]
 8085bba:	460b      	mov	r3, r1
 8085bbc:	81bb      	strh	r3, [r7, #12]
 8085bbe:	4613      	mov	r3, r2
 8085bc0:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8085bc2:	2301      	movs	r3, #1
 8085bc4:	83fb      	strh	r3, [r7, #30]
 8085bc6:	2300      	movs	r3, #0
 8085bc8:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8085bca:	2300      	movs	r3, #0
 8085bcc:	61bb      	str	r3, [r7, #24]
 8085bce:	2300      	movs	r3, #0
 8085bd0:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8085bd2:	68bb      	ldr	r3, [r7, #8]
 8085bd4:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8085bd6:	e002      	b.n	8085bde <BSP_LCD_DisplayStringAt+0x32>
 8085bd8:	69bb      	ldr	r3, [r7, #24]
 8085bda:	3301      	adds	r3, #1
 8085bdc:	61bb      	str	r3, [r7, #24]
 8085bde:	697b      	ldr	r3, [r7, #20]
 8085be0:	1c5a      	adds	r2, r3, #1
 8085be2:	617a      	str	r2, [r7, #20]
 8085be4:	781b      	ldrb	r3, [r3, #0]
 8085be6:	2b00      	cmp	r3, #0
 8085be8:	d1f6      	bne.n	8085bd8 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8085bea:	f7ff fe3f 	bl	808586c <BSP_LCD_GetXSize>
 8085bee:	4b4f      	ldr	r3, [pc, #316]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085bf0:	681a      	ldr	r2, [r3, #0]
 8085bf2:	494f      	ldr	r1, [pc, #316]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085bf4:	4613      	mov	r3, r2
 8085bf6:	005b      	lsls	r3, r3, #1
 8085bf8:	4413      	add	r3, r2
 8085bfa:	009b      	lsls	r3, r3, #2
 8085bfc:	440b      	add	r3, r1
 8085bfe:	3308      	adds	r3, #8
 8085c00:	681b      	ldr	r3, [r3, #0]
 8085c02:	889b      	ldrh	r3, [r3, #4]
 8085c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8085c08:	613b      	str	r3, [r7, #16]

	switch (Mode)
 8085c0a:	79fb      	ldrb	r3, [r7, #7]
 8085c0c:	2b02      	cmp	r3, #2
 8085c0e:	d01c      	beq.n	8085c4a <BSP_LCD_DisplayStringAt+0x9e>
 8085c10:	2b03      	cmp	r3, #3
 8085c12:	d017      	beq.n	8085c44 <BSP_LCD_DisplayStringAt+0x98>
 8085c14:	2b01      	cmp	r3, #1
 8085c16:	d12e      	bne.n	8085c76 <BSP_LCD_DisplayStringAt+0xca>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8085c18:	693a      	ldr	r2, [r7, #16]
 8085c1a:	69bb      	ldr	r3, [r7, #24]
 8085c1c:	1ad1      	subs	r1, r2, r3
 8085c1e:	4b43      	ldr	r3, [pc, #268]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085c20:	681a      	ldr	r2, [r3, #0]
 8085c22:	4843      	ldr	r0, [pc, #268]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085c24:	4613      	mov	r3, r2
 8085c26:	005b      	lsls	r3, r3, #1
 8085c28:	4413      	add	r3, r2
 8085c2a:	009b      	lsls	r3, r3, #2
 8085c2c:	4403      	add	r3, r0
 8085c2e:	3308      	adds	r3, #8
 8085c30:	681b      	ldr	r3, [r3, #0]
 8085c32:	889b      	ldrh	r3, [r3, #4]
 8085c34:	fb03 f301 	mul.w	r3, r3, r1
 8085c38:	085b      	lsrs	r3, r3, #1
 8085c3a:	b29a      	uxth	r2, r3
 8085c3c:	89fb      	ldrh	r3, [r7, #14]
 8085c3e:	4413      	add	r3, r2
 8085c40:	83fb      	strh	r3, [r7, #30]
		break;
 8085c42:	e01b      	b.n	8085c7c <BSP_LCD_DisplayStringAt+0xd0>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8085c44:	89fb      	ldrh	r3, [r7, #14]
 8085c46:	83fb      	strh	r3, [r7, #30]
		break;
 8085c48:	e018      	b.n	8085c7c <BSP_LCD_DisplayStringAt+0xd0>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8085c4a:	693a      	ldr	r2, [r7, #16]
 8085c4c:	69bb      	ldr	r3, [r7, #24]
 8085c4e:	1ad3      	subs	r3, r2, r3
 8085c50:	b299      	uxth	r1, r3
 8085c52:	4b36      	ldr	r3, [pc, #216]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085c54:	681a      	ldr	r2, [r3, #0]
 8085c56:	4836      	ldr	r0, [pc, #216]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085c58:	4613      	mov	r3, r2
 8085c5a:	005b      	lsls	r3, r3, #1
 8085c5c:	4413      	add	r3, r2
 8085c5e:	009b      	lsls	r3, r3, #2
 8085c60:	4403      	add	r3, r0
 8085c62:	3308      	adds	r3, #8
 8085c64:	681b      	ldr	r3, [r3, #0]
 8085c66:	889b      	ldrh	r3, [r3, #4]
 8085c68:	fb11 f303 	smulbb	r3, r1, r3
 8085c6c:	b29a      	uxth	r2, r3
 8085c6e:	89fb      	ldrh	r3, [r7, #14]
 8085c70:	1ad3      	subs	r3, r2, r3
 8085c72:	83fb      	strh	r3, [r7, #30]
		break;
 8085c74:	e002      	b.n	8085c7c <BSP_LCD_DisplayStringAt+0xd0>
	}
	default:
	{
		ref_column = Xpos;
 8085c76:	89fb      	ldrh	r3, [r7, #14]
 8085c78:	83fb      	strh	r3, [r7, #30]
		break;
 8085c7a:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8085c7c:	8bfb      	ldrh	r3, [r7, #30]
 8085c7e:	2b00      	cmp	r3, #0
 8085c80:	d003      	beq.n	8085c8a <BSP_LCD_DisplayStringAt+0xde>
 8085c82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8085c86:	2b00      	cmp	r3, #0
 8085c88:	da1d      	bge.n	8085cc6 <BSP_LCD_DisplayStringAt+0x11a>
	{
		ref_column = 1;
 8085c8a:	2301      	movs	r3, #1
 8085c8c:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8085c8e:	e01a      	b.n	8085cc6 <BSP_LCD_DisplayStringAt+0x11a>
	{
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8085c90:	68bb      	ldr	r3, [r7, #8]
 8085c92:	781a      	ldrb	r2, [r3, #0]
 8085c94:	89b9      	ldrh	r1, [r7, #12]
 8085c96:	8bfb      	ldrh	r3, [r7, #30]
 8085c98:	4618      	mov	r0, r3
 8085c9a:	f7ff ff43 	bl	8085b24 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		ref_column += DrawProp[ActiveLayer].pFont->Width;
 8085c9e:	4b23      	ldr	r3, [pc, #140]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085ca0:	681a      	ldr	r2, [r3, #0]
 8085ca2:	4923      	ldr	r1, [pc, #140]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085ca4:	4613      	mov	r3, r2
 8085ca6:	005b      	lsls	r3, r3, #1
 8085ca8:	4413      	add	r3, r2
 8085caa:	009b      	lsls	r3, r3, #2
 8085cac:	440b      	add	r3, r1
 8085cae:	3308      	adds	r3, #8
 8085cb0:	681b      	ldr	r3, [r3, #0]
 8085cb2:	889a      	ldrh	r2, [r3, #4]
 8085cb4:	8bfb      	ldrh	r3, [r7, #30]
 8085cb6:	4413      	add	r3, r2
 8085cb8:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8085cba:	68bb      	ldr	r3, [r7, #8]
 8085cbc:	3301      	adds	r3, #1
 8085cbe:	60bb      	str	r3, [r7, #8]
		i++;
 8085cc0:	8bbb      	ldrh	r3, [r7, #28]
 8085cc2:	3301      	adds	r3, #1
 8085cc4:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8085cc6:	68bb      	ldr	r3, [r7, #8]
 8085cc8:	781b      	ldrb	r3, [r3, #0]
 8085cca:	2b00      	cmp	r3, #0
 8085ccc:	bf14      	ite	ne
 8085cce:	2301      	movne	r3, #1
 8085cd0:	2300      	moveq	r3, #0
 8085cd2:	b2dc      	uxtb	r4, r3
 8085cd4:	f7ff fdca 	bl	808586c <BSP_LCD_GetXSize>
 8085cd8:	4605      	mov	r5, r0
 8085cda:	8bb9      	ldrh	r1, [r7, #28]
 8085cdc:	4b13      	ldr	r3, [pc, #76]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085cde:	681a      	ldr	r2, [r3, #0]
 8085ce0:	4813      	ldr	r0, [pc, #76]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085ce2:	4613      	mov	r3, r2
 8085ce4:	005b      	lsls	r3, r3, #1
 8085ce6:	4413      	add	r3, r2
 8085ce8:	009b      	lsls	r3, r3, #2
 8085cea:	4403      	add	r3, r0
 8085cec:	3308      	adds	r3, #8
 8085cee:	681b      	ldr	r3, [r3, #0]
 8085cf0:	889b      	ldrh	r3, [r3, #4]
 8085cf2:	fb03 f301 	mul.w	r3, r3, r1
 8085cf6:	1aeb      	subs	r3, r5, r3
 8085cf8:	b299      	uxth	r1, r3
 8085cfa:	4b0c      	ldr	r3, [pc, #48]	; (8085d2c <BSP_LCD_DisplayStringAt+0x180>)
 8085cfc:	681a      	ldr	r2, [r3, #0]
 8085cfe:	480c      	ldr	r0, [pc, #48]	; (8085d30 <BSP_LCD_DisplayStringAt+0x184>)
 8085d00:	4613      	mov	r3, r2
 8085d02:	005b      	lsls	r3, r3, #1
 8085d04:	4413      	add	r3, r2
 8085d06:	009b      	lsls	r3, r3, #2
 8085d08:	4403      	add	r3, r0
 8085d0a:	3308      	adds	r3, #8
 8085d0c:	681b      	ldr	r3, [r3, #0]
 8085d0e:	889b      	ldrh	r3, [r3, #4]
 8085d10:	4299      	cmp	r1, r3
 8085d12:	bf2c      	ite	cs
 8085d14:	2301      	movcs	r3, #1
 8085d16:	2300      	movcc	r3, #0
 8085d18:	b2db      	uxtb	r3, r3
 8085d1a:	4023      	ands	r3, r4
 8085d1c:	b2db      	uxtb	r3, r3
 8085d1e:	2b00      	cmp	r3, #0
 8085d20:	d1b6      	bne.n	8085c90 <BSP_LCD_DisplayStringAt+0xe4>
	}
}
 8085d22:	bf00      	nop
 8085d24:	3720      	adds	r7, #32
 8085d26:	46bd      	mov	sp, r7
 8085d28:	bdb0      	pop	{r4, r5, r7, pc}
 8085d2a:	bf00      	nop
 8085d2c:	2000b830 	.word	0x2000b830
 8085d30:	2000b834 	.word	0x2000b834

08085d34 <BSP_LCD_DisplayStringAtLine>:
 * @param  Line: Line where to display the character shape
 * @param  ptr: Pointer to string to display on LCD
 * @retval None
 */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8085d34:	b580      	push	{r7, lr}
 8085d36:	b082      	sub	sp, #8
 8085d38:	af00      	add	r7, sp, #0
 8085d3a:	4603      	mov	r3, r0
 8085d3c:	6039      	str	r1, [r7, #0]
 8085d3e:	80fb      	strh	r3, [r7, #6]
	BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8085d40:	f7ff fea0 	bl	8085a84 <BSP_LCD_GetFont>
 8085d44:	4603      	mov	r3, r0
 8085d46:	88db      	ldrh	r3, [r3, #6]
 8085d48:	88fa      	ldrh	r2, [r7, #6]
 8085d4a:	fb12 f303 	smulbb	r3, r2, r3
 8085d4e:	b299      	uxth	r1, r3
 8085d50:	2303      	movs	r3, #3
 8085d52:	683a      	ldr	r2, [r7, #0]
 8085d54:	2000      	movs	r0, #0
 8085d56:	f7ff ff29 	bl	8085bac <BSP_LCD_DisplayStringAt>
}
 8085d5a:	bf00      	nop
 8085d5c:	3708      	adds	r7, #8
 8085d5e:	46bd      	mov	sp, r7
 8085d60:	bd80      	pop	{r7, pc}
	...

08085d64 <BSP_LCD_DrawHLine>:
 * @param  Ypos: Y position
 * @param  Length: Line length
 * @retval None
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8085d64:	b5b0      	push	{r4, r5, r7, lr}
 8085d66:	b086      	sub	sp, #24
 8085d68:	af02      	add	r7, sp, #8
 8085d6a:	4603      	mov	r3, r0
 8085d6c:	80fb      	strh	r3, [r7, #6]
 8085d6e:	460b      	mov	r3, r1
 8085d70:	80bb      	strh	r3, [r7, #4]
 8085d72:	4613      	mov	r3, r2
 8085d74:	807b      	strh	r3, [r7, #2]
	uint32_t  x_address = 0;
 8085d76:	2300      	movs	r3, #0
 8085d78:	60fb      	str	r3, [r7, #12]
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
	}
#elif (LCD_ORIENTATION == LCD_ORIENTATION_180)
	/* Get the line address */
	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8085d7a:	4b2c      	ldr	r3, [pc, #176]	; (8085e2c <BSP_LCD_DrawHLine+0xc8>)
 8085d7c:	681b      	ldr	r3, [r3, #0]
 8085d7e:	4a2c      	ldr	r2, [pc, #176]	; (8085e30 <BSP_LCD_DrawHLine+0xcc>)
 8085d80:	2134      	movs	r1, #52	; 0x34
 8085d82:	fb01 f303 	mul.w	r3, r1, r3
 8085d86:	4413      	add	r3, r2
 8085d88:	3348      	adds	r3, #72	; 0x48
 8085d8a:	681b      	ldr	r3, [r3, #0]
 8085d8c:	2b02      	cmp	r3, #2
 8085d8e:	d119      	bne.n	8085dc4 <BSP_LCD_DrawHLine+0x60>
	{ /* RGB565 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+Length) - (BSP_LCD_GetXSize() * Ypos));
 8085d90:	4b26      	ldr	r3, [pc, #152]	; (8085e2c <BSP_LCD_DrawHLine+0xc8>)
 8085d92:	681b      	ldr	r3, [r3, #0]
 8085d94:	4a26      	ldr	r2, [pc, #152]	; (8085e30 <BSP_LCD_DrawHLine+0xcc>)
 8085d96:	2134      	movs	r1, #52	; 0x34
 8085d98:	fb01 f303 	mul.w	r3, r1, r3
 8085d9c:	4413      	add	r3, r2
 8085d9e:	335c      	adds	r3, #92	; 0x5c
 8085da0:	681c      	ldr	r4, [r3, #0]
 8085da2:	88fa      	ldrh	r2, [r7, #6]
 8085da4:	887b      	ldrh	r3, [r7, #2]
 8085da6:	4413      	add	r3, r2
 8085da8:	425d      	negs	r5, r3
 8085daa:	f7ff fd5f 	bl	808586c <BSP_LCD_GetXSize>
 8085dae:	4602      	mov	r2, r0
 8085db0:	88bb      	ldrh	r3, [r7, #4]
 8085db2:	fb03 f302 	mul.w	r3, r3, r2
 8085db6:	1aeb      	subs	r3, r5, r3
 8085db8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8085dbc:	005b      	lsls	r3, r3, #1
 8085dbe:	4423      	add	r3, r4
 8085dc0:	60fb      	str	r3, [r7, #12]
 8085dc2:	e018      	b.n	8085df6 <BSP_LCD_DrawHLine+0x92>
	}
	else
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+Length) - (BSP_LCD_GetXSize() * Ypos));
 8085dc4:	4b19      	ldr	r3, [pc, #100]	; (8085e2c <BSP_LCD_DrawHLine+0xc8>)
 8085dc6:	681b      	ldr	r3, [r3, #0]
 8085dc8:	4a19      	ldr	r2, [pc, #100]	; (8085e30 <BSP_LCD_DrawHLine+0xcc>)
 8085dca:	2134      	movs	r1, #52	; 0x34
 8085dcc:	fb01 f303 	mul.w	r3, r1, r3
 8085dd0:	4413      	add	r3, r2
 8085dd2:	335c      	adds	r3, #92	; 0x5c
 8085dd4:	681c      	ldr	r4, [r3, #0]
 8085dd6:	88fa      	ldrh	r2, [r7, #6]
 8085dd8:	887b      	ldrh	r3, [r7, #2]
 8085dda:	4413      	add	r3, r2
 8085ddc:	425d      	negs	r5, r3
 8085dde:	f7ff fd45 	bl	808586c <BSP_LCD_GetXSize>
 8085de2:	4602      	mov	r2, r0
 8085de4:	88bb      	ldrh	r3, [r7, #4]
 8085de6:	fb03 f302 	mul.w	r3, r3, r2
 8085dea:	1aeb      	subs	r3, r5, r3
 8085dec:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8085df0:	009b      	lsls	r3, r3, #2
 8085df2:	4423      	add	r3, r4
 8085df4:	60fb      	str	r3, [r7, #12]
#else
#error "LCD Orientation not available"
#endif /*LCD_ORIENTATION */

	/* Write line */
	LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Length+1, 1, 0, DrawProp[ActiveLayer].TextColor);
 8085df6:	4b0d      	ldr	r3, [pc, #52]	; (8085e2c <BSP_LCD_DrawHLine+0xc8>)
 8085df8:	6818      	ldr	r0, [r3, #0]
 8085dfa:	68fc      	ldr	r4, [r7, #12]
 8085dfc:	887b      	ldrh	r3, [r7, #2]
 8085dfe:	3301      	adds	r3, #1
 8085e00:	461d      	mov	r5, r3
 8085e02:	4b0a      	ldr	r3, [pc, #40]	; (8085e2c <BSP_LCD_DrawHLine+0xc8>)
 8085e04:	681a      	ldr	r2, [r3, #0]
 8085e06:	490b      	ldr	r1, [pc, #44]	; (8085e34 <BSP_LCD_DrawHLine+0xd0>)
 8085e08:	4613      	mov	r3, r2
 8085e0a:	005b      	lsls	r3, r3, #1
 8085e0c:	4413      	add	r3, r2
 8085e0e:	009b      	lsls	r3, r3, #2
 8085e10:	440b      	add	r3, r1
 8085e12:	681b      	ldr	r3, [r3, #0]
 8085e14:	9301      	str	r3, [sp, #4]
 8085e16:	2300      	movs	r3, #0
 8085e18:	9300      	str	r3, [sp, #0]
 8085e1a:	2301      	movs	r3, #1
 8085e1c:	462a      	mov	r2, r5
 8085e1e:	4621      	mov	r1, r4
 8085e20:	f001 f9e8 	bl	80871f4 <LL_FillBuffer>
}
 8085e24:	bf00      	nop
 8085e26:	3710      	adds	r7, #16
 8085e28:	46bd      	mov	sp, r7
 8085e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8085e2c:	2000b830 	.word	0x2000b830
 8085e30:	2002d8a4 	.word	0x2002d8a4
 8085e34:	2000b834 	.word	0x2000b834

08085e38 <BSP_LCD_DrawVLine>:
 * @param  Ypos: Y position
 * @param  Length: Line length
 * @retval None
 */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8085e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085e3a:	b087      	sub	sp, #28
 8085e3c:	af02      	add	r7, sp, #8
 8085e3e:	4603      	mov	r3, r0
 8085e40:	80fb      	strh	r3, [r7, #6]
 8085e42:	460b      	mov	r3, r1
 8085e44:	80bb      	strh	r3, [r7, #4]
 8085e46:	4613      	mov	r3, r2
 8085e48:	807b      	strh	r3, [r7, #2]
	uint32_t  x_address = 0;
 8085e4a:	2300      	movs	r3, #0
 8085e4c:	60fb      	str	r3, [r7, #12]
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
	}
#elif (LCD_ORIENTATION == LCD_ORIENTATION_180)
	/* Get the line address */
	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8085e4e:	4b2e      	ldr	r3, [pc, #184]	; (8085f08 <BSP_LCD_DrawVLine+0xd0>)
 8085e50:	681b      	ldr	r3, [r3, #0]
 8085e52:	4a2e      	ldr	r2, [pc, #184]	; (8085f0c <BSP_LCD_DrawVLine+0xd4>)
 8085e54:	2134      	movs	r1, #52	; 0x34
 8085e56:	fb01 f303 	mul.w	r3, r1, r3
 8085e5a:	4413      	add	r3, r2
 8085e5c:	3348      	adds	r3, #72	; 0x48
 8085e5e:	681b      	ldr	r3, [r3, #0]
 8085e60:	2b02      	cmp	r3, #2
 8085e62:	d119      	bne.n	8085e98 <BSP_LCD_DrawVLine+0x60>
	{ /* RGB565 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - Xpos - (BSP_LCD_GetXSize() * (Ypos+Length)));
 8085e64:	4b28      	ldr	r3, [pc, #160]	; (8085f08 <BSP_LCD_DrawVLine+0xd0>)
 8085e66:	681b      	ldr	r3, [r3, #0]
 8085e68:	4a28      	ldr	r2, [pc, #160]	; (8085f0c <BSP_LCD_DrawVLine+0xd4>)
 8085e6a:	2134      	movs	r1, #52	; 0x34
 8085e6c:	fb01 f303 	mul.w	r3, r1, r3
 8085e70:	4413      	add	r3, r2
 8085e72:	335c      	adds	r3, #92	; 0x5c
 8085e74:	681c      	ldr	r4, [r3, #0]
 8085e76:	88fb      	ldrh	r3, [r7, #6]
 8085e78:	425d      	negs	r5, r3
 8085e7a:	f7ff fcf7 	bl	808586c <BSP_LCD_GetXSize>
 8085e7e:	4601      	mov	r1, r0
 8085e80:	88ba      	ldrh	r2, [r7, #4]
 8085e82:	887b      	ldrh	r3, [r7, #2]
 8085e84:	4413      	add	r3, r2
 8085e86:	fb03 f301 	mul.w	r3, r3, r1
 8085e8a:	1aeb      	subs	r3, r5, r3
 8085e8c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8085e90:	005b      	lsls	r3, r3, #1
 8085e92:	4423      	add	r3, r4
 8085e94:	60fb      	str	r3, [r7, #12]
 8085e96:	e018      	b.n	8085eca <BSP_LCD_DrawVLine+0x92>
	}
	else
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - Xpos - (BSP_LCD_GetXSize() * (Ypos+Length)));
 8085e98:	4b1b      	ldr	r3, [pc, #108]	; (8085f08 <BSP_LCD_DrawVLine+0xd0>)
 8085e9a:	681b      	ldr	r3, [r3, #0]
 8085e9c:	4a1b      	ldr	r2, [pc, #108]	; (8085f0c <BSP_LCD_DrawVLine+0xd4>)
 8085e9e:	2134      	movs	r1, #52	; 0x34
 8085ea0:	fb01 f303 	mul.w	r3, r1, r3
 8085ea4:	4413      	add	r3, r2
 8085ea6:	335c      	adds	r3, #92	; 0x5c
 8085ea8:	681c      	ldr	r4, [r3, #0]
 8085eaa:	88fb      	ldrh	r3, [r7, #6]
 8085eac:	425d      	negs	r5, r3
 8085eae:	f7ff fcdd 	bl	808586c <BSP_LCD_GetXSize>
 8085eb2:	4601      	mov	r1, r0
 8085eb4:	88ba      	ldrh	r2, [r7, #4]
 8085eb6:	887b      	ldrh	r3, [r7, #2]
 8085eb8:	4413      	add	r3, r2
 8085eba:	fb03 f301 	mul.w	r3, r3, r1
 8085ebe:	1aeb      	subs	r3, r5, r3
 8085ec0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8085ec4:	009b      	lsls	r3, r3, #2
 8085ec6:	4423      	add	r3, r4
 8085ec8:	60fb      	str	r3, [r7, #12]
#else
#error "LCD Orientation not available"
#endif /*LCD_ORIENTATION */

	/* Write line */
	LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, 1, Length+1, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8085eca:	4b0f      	ldr	r3, [pc, #60]	; (8085f08 <BSP_LCD_DrawVLine+0xd0>)
 8085ecc:	681c      	ldr	r4, [r3, #0]
 8085ece:	68fd      	ldr	r5, [r7, #12]
 8085ed0:	887b      	ldrh	r3, [r7, #2]
 8085ed2:	3301      	adds	r3, #1
 8085ed4:	461e      	mov	r6, r3
 8085ed6:	f7ff fcc9 	bl	808586c <BSP_LCD_GetXSize>
 8085eda:	4603      	mov	r3, r0
 8085edc:	1e59      	subs	r1, r3, #1
 8085ede:	4b0a      	ldr	r3, [pc, #40]	; (8085f08 <BSP_LCD_DrawVLine+0xd0>)
 8085ee0:	681a      	ldr	r2, [r3, #0]
 8085ee2:	480b      	ldr	r0, [pc, #44]	; (8085f10 <BSP_LCD_DrawVLine+0xd8>)
 8085ee4:	4613      	mov	r3, r2
 8085ee6:	005b      	lsls	r3, r3, #1
 8085ee8:	4413      	add	r3, r2
 8085eea:	009b      	lsls	r3, r3, #2
 8085eec:	4403      	add	r3, r0
 8085eee:	681b      	ldr	r3, [r3, #0]
 8085ef0:	9301      	str	r3, [sp, #4]
 8085ef2:	9100      	str	r1, [sp, #0]
 8085ef4:	4633      	mov	r3, r6
 8085ef6:	2201      	movs	r2, #1
 8085ef8:	4629      	mov	r1, r5
 8085efa:	4620      	mov	r0, r4
 8085efc:	f001 f97a 	bl	80871f4 <LL_FillBuffer>
}
 8085f00:	bf00      	nop
 8085f02:	3714      	adds	r7, #20
 8085f04:	46bd      	mov	sp, r7
 8085f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085f08:	2000b830 	.word	0x2000b830
 8085f0c:	2002d8a4 	.word	0x2002d8a4
 8085f10:	2000b834 	.word	0x2000b834

08085f14 <BSP_LCD_DrawLine>:
 * @param  x2: Point 2 X position
 * @param  y2: Point 2 Y position
 * @retval None
 */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8085f14:	b590      	push	{r4, r7, lr}
 8085f16:	b08b      	sub	sp, #44	; 0x2c
 8085f18:	af00      	add	r7, sp, #0
 8085f1a:	4604      	mov	r4, r0
 8085f1c:	4608      	mov	r0, r1
 8085f1e:	4611      	mov	r1, r2
 8085f20:	461a      	mov	r2, r3
 8085f22:	4623      	mov	r3, r4
 8085f24:	80fb      	strh	r3, [r7, #6]
 8085f26:	4603      	mov	r3, r0
 8085f28:	80bb      	strh	r3, [r7, #4]
 8085f2a:	460b      	mov	r3, r1
 8085f2c:	807b      	strh	r3, [r7, #2]
 8085f2e:	4613      	mov	r3, r2
 8085f30:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8085f32:	2300      	movs	r3, #0
 8085f34:	823b      	strh	r3, [r7, #16]
 8085f36:	2300      	movs	r3, #0
 8085f38:	81fb      	strh	r3, [r7, #14]
 8085f3a:	2300      	movs	r3, #0
 8085f3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8085f3e:	2300      	movs	r3, #0
 8085f40:	84bb      	strh	r3, [r7, #36]	; 0x24
 8085f42:	2300      	movs	r3, #0
 8085f44:	847b      	strh	r3, [r7, #34]	; 0x22
 8085f46:	2300      	movs	r3, #0
 8085f48:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 8085f4a:	2300      	movs	r3, #0
 8085f4c:	83fb      	strh	r3, [r7, #30]
 8085f4e:	2300      	movs	r3, #0
 8085f50:	83bb      	strh	r3, [r7, #28]
 8085f52:	2300      	movs	r3, #0
 8085f54:	837b      	strh	r3, [r7, #26]
 8085f56:	2300      	movs	r3, #0
 8085f58:	833b      	strh	r3, [r7, #24]
 8085f5a:	2300      	movs	r3, #0
 8085f5c:	82fb      	strh	r3, [r7, #22]
 8085f5e:	2300      	movs	r3, #0
 8085f60:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8085f62:	2300      	movs	r3, #0
 8085f64:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);        /* The difference between the x's */
 8085f66:	887a      	ldrh	r2, [r7, #2]
 8085f68:	88fb      	ldrh	r3, [r7, #6]
 8085f6a:	1ad3      	subs	r3, r2, r3
 8085f6c:	2b00      	cmp	r3, #0
 8085f6e:	bfb8      	it	lt
 8085f70:	425b      	neglt	r3, r3
 8085f72:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);        /* The difference between the y's */
 8085f74:	883a      	ldrh	r2, [r7, #0]
 8085f76:	88bb      	ldrh	r3, [r7, #4]
 8085f78:	1ad3      	subs	r3, r2, r3
 8085f7a:	2b00      	cmp	r3, #0
 8085f7c:	bfb8      	it	lt
 8085f7e:	425b      	neglt	r3, r3
 8085f80:	81fb      	strh	r3, [r7, #14]
	x = x1;                       /* Start x off at the first pixel */
 8085f82:	88fb      	ldrh	r3, [r7, #6]
 8085f84:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;                       /* Start y off at the first pixel */
 8085f86:	88bb      	ldrh	r3, [r7, #4]
 8085f88:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)                 /* The x-values are increasing */
 8085f8a:	887a      	ldrh	r2, [r7, #2]
 8085f8c:	88fb      	ldrh	r3, [r7, #6]
 8085f8e:	429a      	cmp	r2, r3
 8085f90:	d304      	bcc.n	8085f9c <BSP_LCD_DrawLine+0x88>
	{
		xinc1 = 1;
 8085f92:	2301      	movs	r3, #1
 8085f94:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8085f96:	2301      	movs	r3, #1
 8085f98:	843b      	strh	r3, [r7, #32]
 8085f9a:	e005      	b.n	8085fa8 <BSP_LCD_DrawLine+0x94>
	}
	else                          /* The x-values are decreasing */
	{
		xinc1 = -1;
 8085f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085fa0:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8085fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085fa6:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)                 /* The y-values are increasing */
 8085fa8:	883a      	ldrh	r2, [r7, #0]
 8085faa:	88bb      	ldrh	r3, [r7, #4]
 8085fac:	429a      	cmp	r2, r3
 8085fae:	d304      	bcc.n	8085fba <BSP_LCD_DrawLine+0xa6>
	{
		yinc1 = 1;
 8085fb0:	2301      	movs	r3, #1
 8085fb2:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8085fb4:	2301      	movs	r3, #1
 8085fb6:	83bb      	strh	r3, [r7, #28]
 8085fb8:	e005      	b.n	8085fc6 <BSP_LCD_DrawLine+0xb2>
	}
	else                          /* The y-values are decreasing */
	{
		yinc1 = -1;
 8085fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085fbe:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8085fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8085fc4:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8085fc6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8085fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8085fce:	429a      	cmp	r2, r3
 8085fd0:	db11      	blt.n	8085ff6 <BSP_LCD_DrawLine+0xe2>
	{
		xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8085fd2:	2300      	movs	r3, #0
 8085fd4:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;                  /* Don't change the y for every iteration */
 8085fd6:	2300      	movs	r3, #0
 8085fd8:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8085fda:	8a3b      	ldrh	r3, [r7, #16]
 8085fdc:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8085fde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8085fe2:	2b00      	cmp	r3, #0
 8085fe4:	da00      	bge.n	8085fe8 <BSP_LCD_DrawLine+0xd4>
 8085fe6:	3301      	adds	r3, #1
 8085fe8:	105b      	asrs	r3, r3, #1
 8085fea:	833b      	strh	r3, [r7, #24]
		num_add = deltay;
 8085fec:	89fb      	ldrh	r3, [r7, #14]
 8085fee:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltax;         /* There are more x-values than y-values */
 8085ff0:	8a3b      	ldrh	r3, [r7, #16]
 8085ff2:	82bb      	strh	r3, [r7, #20]
 8085ff4:	e010      	b.n	8086018 <BSP_LCD_DrawLine+0x104>
	}
	else                          /* There is at least one y-value for every x-value */
	{
		xinc2 = 0;                  /* Don't change the x for every iteration */
 8085ff6:	2300      	movs	r3, #0
 8085ff8:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8085ffa:	2300      	movs	r3, #0
 8085ffc:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8085ffe:	89fb      	ldrh	r3, [r7, #14]
 8086000:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8086002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8086006:	2b00      	cmp	r3, #0
 8086008:	da00      	bge.n	808600c <BSP_LCD_DrawLine+0xf8>
 808600a:	3301      	adds	r3, #1
 808600c:	105b      	asrs	r3, r3, #1
 808600e:	833b      	strh	r3, [r7, #24]
		num_add = deltax;
 8086010:	8a3b      	ldrh	r3, [r7, #16]
 8086012:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltay;         /* There are more y-values than x-values */
 8086014:	89fb      	ldrh	r3, [r7, #14]
 8086016:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8086018:	2300      	movs	r3, #0
 808601a:	827b      	strh	r3, [r7, #18]
 808601c:	e038      	b.n	8086090 <BSP_LCD_DrawLine+0x17c>
	{
		BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 808601e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8086020:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8086022:	4b20      	ldr	r3, [pc, #128]	; (80860a4 <BSP_LCD_DrawLine+0x190>)
 8086024:	681a      	ldr	r2, [r3, #0]
 8086026:	4920      	ldr	r1, [pc, #128]	; (80860a8 <BSP_LCD_DrawLine+0x194>)
 8086028:	4613      	mov	r3, r2
 808602a:	005b      	lsls	r3, r3, #1
 808602c:	4413      	add	r3, r2
 808602e:	009b      	lsls	r3, r3, #2
 8086030:	440b      	add	r3, r1
 8086032:	681b      	ldr	r3, [r3, #0]
 8086034:	461a      	mov	r2, r3
 8086036:	4621      	mov	r1, r4
 8086038:	f000 faa0 	bl	808657c <BSP_LCD_DrawPixel>
		num += num_add;                            /* Increase the numerator by the top of the fraction */
 808603c:	8b3a      	ldrh	r2, [r7, #24]
 808603e:	8afb      	ldrh	r3, [r7, #22]
 8086040:	4413      	add	r3, r2
 8086042:	b29b      	uxth	r3, r3
 8086044:	833b      	strh	r3, [r7, #24]
		if (num >= den)                           /* Check if numerator >= denominator */
 8086046:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 808604a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 808604e:	429a      	cmp	r2, r3
 8086050:	db0e      	blt.n	8086070 <BSP_LCD_DrawLine+0x15c>
		{
			num -= den;                             /* Calculate the new numerator value */
 8086052:	8b3a      	ldrh	r2, [r7, #24]
 8086054:	8b7b      	ldrh	r3, [r7, #26]
 8086056:	1ad3      	subs	r3, r2, r3
 8086058:	b29b      	uxth	r3, r3
 808605a:	833b      	strh	r3, [r7, #24]
			x += xinc1;                             /* Change the x as appropriate */
 808605c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 808605e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8086060:	4413      	add	r3, r2
 8086062:	b29b      	uxth	r3, r3
 8086064:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;                             /* Change the y as appropriate */
 8086066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8086068:	8bfb      	ldrh	r3, [r7, #30]
 808606a:	4413      	add	r3, r2
 808606c:	b29b      	uxth	r3, r3
 808606e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;                               /* Change the x as appropriate */
 8086070:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8086072:	8c3b      	ldrh	r3, [r7, #32]
 8086074:	4413      	add	r3, r2
 8086076:	b29b      	uxth	r3, r3
 8086078:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;                               /* Change the y as appropriate */
 808607a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 808607c:	8bbb      	ldrh	r3, [r7, #28]
 808607e:	4413      	add	r3, r2
 8086080:	b29b      	uxth	r3, r3
 8086082:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8086084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8086088:	b29b      	uxth	r3, r3
 808608a:	3301      	adds	r3, #1
 808608c:	b29b      	uxth	r3, r3
 808608e:	827b      	strh	r3, [r7, #18]
 8086090:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8086094:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8086098:	429a      	cmp	r2, r3
 808609a:	ddc0      	ble.n	808601e <BSP_LCD_DrawLine+0x10a>
	}
}
 808609c:	bf00      	nop
 808609e:	372c      	adds	r7, #44	; 0x2c
 80860a0:	46bd      	mov	sp, r7
 80860a2:	bd90      	pop	{r4, r7, pc}
 80860a4:	2000b830 	.word	0x2000b830
 80860a8:	2000b834 	.word	0x2000b834

080860ac <BSP_LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80860ac:	b590      	push	{r4, r7, lr}
 80860ae:	b083      	sub	sp, #12
 80860b0:	af00      	add	r7, sp, #0
 80860b2:	4604      	mov	r4, r0
 80860b4:	4608      	mov	r0, r1
 80860b6:	4611      	mov	r1, r2
 80860b8:	461a      	mov	r2, r3
 80860ba:	4623      	mov	r3, r4
 80860bc:	80fb      	strh	r3, [r7, #6]
 80860be:	4603      	mov	r3, r0
 80860c0:	80bb      	strh	r3, [r7, #4]
 80860c2:	460b      	mov	r3, r1
 80860c4:	807b      	strh	r3, [r7, #2]
 80860c6:	4613      	mov	r3, r2
 80860c8:	803b      	strh	r3, [r7, #0]
	/* Draw horizontal lines */
	BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80860ca:	887a      	ldrh	r2, [r7, #2]
 80860cc:	88b9      	ldrh	r1, [r7, #4]
 80860ce:	88fb      	ldrh	r3, [r7, #6]
 80860d0:	4618      	mov	r0, r3
 80860d2:	f7ff fe47 	bl	8085d64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80860d6:	88ba      	ldrh	r2, [r7, #4]
 80860d8:	883b      	ldrh	r3, [r7, #0]
 80860da:	4413      	add	r3, r2
 80860dc:	b299      	uxth	r1, r3
 80860de:	887a      	ldrh	r2, [r7, #2]
 80860e0:	88fb      	ldrh	r3, [r7, #6]
 80860e2:	4618      	mov	r0, r3
 80860e4:	f7ff fe3e 	bl	8085d64 <BSP_LCD_DrawHLine>

	/* Draw vertical lines */
	BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80860e8:	883a      	ldrh	r2, [r7, #0]
 80860ea:	88b9      	ldrh	r1, [r7, #4]
 80860ec:	88fb      	ldrh	r3, [r7, #6]
 80860ee:	4618      	mov	r0, r3
 80860f0:	f7ff fea2 	bl	8085e38 <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80860f4:	88fa      	ldrh	r2, [r7, #6]
 80860f6:	887b      	ldrh	r3, [r7, #2]
 80860f8:	4413      	add	r3, r2
 80860fa:	b29b      	uxth	r3, r3
 80860fc:	883a      	ldrh	r2, [r7, #0]
 80860fe:	88b9      	ldrh	r1, [r7, #4]
 8086100:	4618      	mov	r0, r3
 8086102:	f7ff fe99 	bl	8085e38 <BSP_LCD_DrawVLine>
}
 8086106:	bf00      	nop
 8086108:	370c      	adds	r7, #12
 808610a:	46bd      	mov	sp, r7
 808610c:	bd90      	pop	{r4, r7, pc}
	...

08086110 <BSP_LCD_DrawCircle>:
 * @param  Ypos: Y position
 * @param  Radius: Circle radius
 * @retval None
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8086110:	b590      	push	{r4, r7, lr}
 8086112:	b087      	sub	sp, #28
 8086114:	af00      	add	r7, sp, #0
 8086116:	4603      	mov	r3, r0
 8086118:	80fb      	strh	r3, [r7, #6]
 808611a:	460b      	mov	r3, r1
 808611c:	80bb      	strh	r3, [r7, #4]
 808611e:	4613      	mov	r3, r2
 8086120:	807b      	strh	r3, [r7, #2]
	int32_t   decision;    /* Decision Variable */
	uint32_t  current_x;   /* Current X Value */
	uint32_t  current_y;   /* Current Y Value */

	decision = 3 - (Radius << 1);
 8086122:	887b      	ldrh	r3, [r7, #2]
 8086124:	005b      	lsls	r3, r3, #1
 8086126:	f1c3 0303 	rsb	r3, r3, #3
 808612a:	617b      	str	r3, [r7, #20]
	current_x = 0;
 808612c:	2300      	movs	r3, #0
 808612e:	613b      	str	r3, [r7, #16]
	current_y = Radius;
 8086130:	887b      	ldrh	r3, [r7, #2]
 8086132:	60fb      	str	r3, [r7, #12]

	while (current_x <= current_y)
 8086134:	e0cf      	b.n	80862d6 <BSP_LCD_DrawCircle+0x1c6>
	{
		BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8086136:	693b      	ldr	r3, [r7, #16]
 8086138:	b29a      	uxth	r2, r3
 808613a:	88fb      	ldrh	r3, [r7, #6]
 808613c:	4413      	add	r3, r2
 808613e:	b298      	uxth	r0, r3
 8086140:	68fb      	ldr	r3, [r7, #12]
 8086142:	b29b      	uxth	r3, r3
 8086144:	88ba      	ldrh	r2, [r7, #4]
 8086146:	1ad3      	subs	r3, r2, r3
 8086148:	b29c      	uxth	r4, r3
 808614a:	4b67      	ldr	r3, [pc, #412]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 808614c:	681a      	ldr	r2, [r3, #0]
 808614e:	4967      	ldr	r1, [pc, #412]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 8086150:	4613      	mov	r3, r2
 8086152:	005b      	lsls	r3, r3, #1
 8086154:	4413      	add	r3, r2
 8086156:	009b      	lsls	r3, r3, #2
 8086158:	440b      	add	r3, r1
 808615a:	681b      	ldr	r3, [r3, #0]
 808615c:	461a      	mov	r2, r3
 808615e:	4621      	mov	r1, r4
 8086160:	f000 fa0c 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8086164:	693b      	ldr	r3, [r7, #16]
 8086166:	b29b      	uxth	r3, r3
 8086168:	88fa      	ldrh	r2, [r7, #6]
 808616a:	1ad3      	subs	r3, r2, r3
 808616c:	b298      	uxth	r0, r3
 808616e:	68fb      	ldr	r3, [r7, #12]
 8086170:	b29b      	uxth	r3, r3
 8086172:	88ba      	ldrh	r2, [r7, #4]
 8086174:	1ad3      	subs	r3, r2, r3
 8086176:	b29c      	uxth	r4, r3
 8086178:	4b5b      	ldr	r3, [pc, #364]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 808617a:	681a      	ldr	r2, [r3, #0]
 808617c:	495b      	ldr	r1, [pc, #364]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 808617e:	4613      	mov	r3, r2
 8086180:	005b      	lsls	r3, r3, #1
 8086182:	4413      	add	r3, r2
 8086184:	009b      	lsls	r3, r3, #2
 8086186:	440b      	add	r3, r1
 8086188:	681b      	ldr	r3, [r3, #0]
 808618a:	461a      	mov	r2, r3
 808618c:	4621      	mov	r1, r4
 808618e:	f000 f9f5 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8086192:	68fb      	ldr	r3, [r7, #12]
 8086194:	b29a      	uxth	r2, r3
 8086196:	88fb      	ldrh	r3, [r7, #6]
 8086198:	4413      	add	r3, r2
 808619a:	b298      	uxth	r0, r3
 808619c:	693b      	ldr	r3, [r7, #16]
 808619e:	b29b      	uxth	r3, r3
 80861a0:	88ba      	ldrh	r2, [r7, #4]
 80861a2:	1ad3      	subs	r3, r2, r3
 80861a4:	b29c      	uxth	r4, r3
 80861a6:	4b50      	ldr	r3, [pc, #320]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 80861a8:	681a      	ldr	r2, [r3, #0]
 80861aa:	4950      	ldr	r1, [pc, #320]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 80861ac:	4613      	mov	r3, r2
 80861ae:	005b      	lsls	r3, r3, #1
 80861b0:	4413      	add	r3, r2
 80861b2:	009b      	lsls	r3, r3, #2
 80861b4:	440b      	add	r3, r1
 80861b6:	681b      	ldr	r3, [r3, #0]
 80861b8:	461a      	mov	r2, r3
 80861ba:	4621      	mov	r1, r4
 80861bc:	f000 f9de 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80861c0:	68fb      	ldr	r3, [r7, #12]
 80861c2:	b29b      	uxth	r3, r3
 80861c4:	88fa      	ldrh	r2, [r7, #6]
 80861c6:	1ad3      	subs	r3, r2, r3
 80861c8:	b298      	uxth	r0, r3
 80861ca:	693b      	ldr	r3, [r7, #16]
 80861cc:	b29b      	uxth	r3, r3
 80861ce:	88ba      	ldrh	r2, [r7, #4]
 80861d0:	1ad3      	subs	r3, r2, r3
 80861d2:	b29c      	uxth	r4, r3
 80861d4:	4b44      	ldr	r3, [pc, #272]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 80861d6:	681a      	ldr	r2, [r3, #0]
 80861d8:	4944      	ldr	r1, [pc, #272]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 80861da:	4613      	mov	r3, r2
 80861dc:	005b      	lsls	r3, r3, #1
 80861de:	4413      	add	r3, r2
 80861e0:	009b      	lsls	r3, r3, #2
 80861e2:	440b      	add	r3, r1
 80861e4:	681b      	ldr	r3, [r3, #0]
 80861e6:	461a      	mov	r2, r3
 80861e8:	4621      	mov	r1, r4
 80861ea:	f000 f9c7 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80861ee:	693b      	ldr	r3, [r7, #16]
 80861f0:	b29a      	uxth	r2, r3
 80861f2:	88fb      	ldrh	r3, [r7, #6]
 80861f4:	4413      	add	r3, r2
 80861f6:	b298      	uxth	r0, r3
 80861f8:	68fb      	ldr	r3, [r7, #12]
 80861fa:	b29a      	uxth	r2, r3
 80861fc:	88bb      	ldrh	r3, [r7, #4]
 80861fe:	4413      	add	r3, r2
 8086200:	b29c      	uxth	r4, r3
 8086202:	4b39      	ldr	r3, [pc, #228]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 8086204:	681a      	ldr	r2, [r3, #0]
 8086206:	4939      	ldr	r1, [pc, #228]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 8086208:	4613      	mov	r3, r2
 808620a:	005b      	lsls	r3, r3, #1
 808620c:	4413      	add	r3, r2
 808620e:	009b      	lsls	r3, r3, #2
 8086210:	440b      	add	r3, r1
 8086212:	681b      	ldr	r3, [r3, #0]
 8086214:	461a      	mov	r2, r3
 8086216:	4621      	mov	r1, r4
 8086218:	f000 f9b0 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 808621c:	693b      	ldr	r3, [r7, #16]
 808621e:	b29b      	uxth	r3, r3
 8086220:	88fa      	ldrh	r2, [r7, #6]
 8086222:	1ad3      	subs	r3, r2, r3
 8086224:	b298      	uxth	r0, r3
 8086226:	68fb      	ldr	r3, [r7, #12]
 8086228:	b29a      	uxth	r2, r3
 808622a:	88bb      	ldrh	r3, [r7, #4]
 808622c:	4413      	add	r3, r2
 808622e:	b29c      	uxth	r4, r3
 8086230:	4b2d      	ldr	r3, [pc, #180]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 8086232:	681a      	ldr	r2, [r3, #0]
 8086234:	492d      	ldr	r1, [pc, #180]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 8086236:	4613      	mov	r3, r2
 8086238:	005b      	lsls	r3, r3, #1
 808623a:	4413      	add	r3, r2
 808623c:	009b      	lsls	r3, r3, #2
 808623e:	440b      	add	r3, r1
 8086240:	681b      	ldr	r3, [r3, #0]
 8086242:	461a      	mov	r2, r3
 8086244:	4621      	mov	r1, r4
 8086246:	f000 f999 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 808624a:	68fb      	ldr	r3, [r7, #12]
 808624c:	b29a      	uxth	r2, r3
 808624e:	88fb      	ldrh	r3, [r7, #6]
 8086250:	4413      	add	r3, r2
 8086252:	b298      	uxth	r0, r3
 8086254:	693b      	ldr	r3, [r7, #16]
 8086256:	b29a      	uxth	r2, r3
 8086258:	88bb      	ldrh	r3, [r7, #4]
 808625a:	4413      	add	r3, r2
 808625c:	b29c      	uxth	r4, r3
 808625e:	4b22      	ldr	r3, [pc, #136]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 8086260:	681a      	ldr	r2, [r3, #0]
 8086262:	4922      	ldr	r1, [pc, #136]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 8086264:	4613      	mov	r3, r2
 8086266:	005b      	lsls	r3, r3, #1
 8086268:	4413      	add	r3, r2
 808626a:	009b      	lsls	r3, r3, #2
 808626c:	440b      	add	r3, r1
 808626e:	681b      	ldr	r3, [r3, #0]
 8086270:	461a      	mov	r2, r3
 8086272:	4621      	mov	r1, r4
 8086274:	f000 f982 	bl	808657c <BSP_LCD_DrawPixel>

		BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8086278:	68fb      	ldr	r3, [r7, #12]
 808627a:	b29b      	uxth	r3, r3
 808627c:	88fa      	ldrh	r2, [r7, #6]
 808627e:	1ad3      	subs	r3, r2, r3
 8086280:	b298      	uxth	r0, r3
 8086282:	693b      	ldr	r3, [r7, #16]
 8086284:	b29a      	uxth	r2, r3
 8086286:	88bb      	ldrh	r3, [r7, #4]
 8086288:	4413      	add	r3, r2
 808628a:	b29c      	uxth	r4, r3
 808628c:	4b16      	ldr	r3, [pc, #88]	; (80862e8 <BSP_LCD_DrawCircle+0x1d8>)
 808628e:	681a      	ldr	r2, [r3, #0]
 8086290:	4916      	ldr	r1, [pc, #88]	; (80862ec <BSP_LCD_DrawCircle+0x1dc>)
 8086292:	4613      	mov	r3, r2
 8086294:	005b      	lsls	r3, r3, #1
 8086296:	4413      	add	r3, r2
 8086298:	009b      	lsls	r3, r3, #2
 808629a:	440b      	add	r3, r1
 808629c:	681b      	ldr	r3, [r3, #0]
 808629e:	461a      	mov	r2, r3
 80862a0:	4621      	mov	r1, r4
 80862a2:	f000 f96b 	bl	808657c <BSP_LCD_DrawPixel>

		if (decision < 0)
 80862a6:	697b      	ldr	r3, [r7, #20]
 80862a8:	2b00      	cmp	r3, #0
 80862aa:	da06      	bge.n	80862ba <BSP_LCD_DrawCircle+0x1aa>
		{
			decision += (current_x << 2) + 6;
 80862ac:	693b      	ldr	r3, [r7, #16]
 80862ae:	009a      	lsls	r2, r3, #2
 80862b0:	697b      	ldr	r3, [r7, #20]
 80862b2:	4413      	add	r3, r2
 80862b4:	3306      	adds	r3, #6
 80862b6:	617b      	str	r3, [r7, #20]
 80862b8:	e00a      	b.n	80862d0 <BSP_LCD_DrawCircle+0x1c0>
		}
		else
		{
			decision += ((current_x - current_y) << 2) + 10;
 80862ba:	693a      	ldr	r2, [r7, #16]
 80862bc:	68fb      	ldr	r3, [r7, #12]
 80862be:	1ad3      	subs	r3, r2, r3
 80862c0:	009a      	lsls	r2, r3, #2
 80862c2:	697b      	ldr	r3, [r7, #20]
 80862c4:	4413      	add	r3, r2
 80862c6:	330a      	adds	r3, #10
 80862c8:	617b      	str	r3, [r7, #20]
			current_y--;
 80862ca:	68fb      	ldr	r3, [r7, #12]
 80862cc:	3b01      	subs	r3, #1
 80862ce:	60fb      	str	r3, [r7, #12]
		}
		current_x++;
 80862d0:	693b      	ldr	r3, [r7, #16]
 80862d2:	3301      	adds	r3, #1
 80862d4:	613b      	str	r3, [r7, #16]
	while (current_x <= current_y)
 80862d6:	693a      	ldr	r2, [r7, #16]
 80862d8:	68fb      	ldr	r3, [r7, #12]
 80862da:	429a      	cmp	r2, r3
 80862dc:	f67f af2b 	bls.w	8086136 <BSP_LCD_DrawCircle+0x26>
	}
}
 80862e0:	bf00      	nop
 80862e2:	371c      	adds	r7, #28
 80862e4:	46bd      	mov	sp, r7
 80862e6:	bd90      	pop	{r4, r7, pc}
 80862e8:	2000b830 	.word	0x2000b830
 80862ec:	2000b834 	.word	0x2000b834

080862f0 <BSP_LCD_DrawPolygon>:
 * @param  Points: Pointer to the points array
 * @param  PointCount: Number of points
 * @retval None
 */
void BSP_LCD_DrawPolygon(pPoint Points, uint16_t PointCount)
{
 80862f0:	b590      	push	{r4, r7, lr}
 80862f2:	b085      	sub	sp, #20
 80862f4:	af00      	add	r7, sp, #0
 80862f6:	6078      	str	r0, [r7, #4]
 80862f8:	460b      	mov	r3, r1
 80862fa:	807b      	strh	r3, [r7, #2]
	int16_t x = 0, y = 0;
 80862fc:	2300      	movs	r3, #0
 80862fe:	81fb      	strh	r3, [r7, #14]
 8086300:	2300      	movs	r3, #0
 8086302:	81bb      	strh	r3, [r7, #12]

	if(PointCount < 2)
 8086304:	887b      	ldrh	r3, [r7, #2]
 8086306:	2b01      	cmp	r3, #1
 8086308:	d93b      	bls.n	8086382 <BSP_LCD_DrawPolygon+0x92>
	{
		return;
	}

	BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 808630a:	687b      	ldr	r3, [r7, #4]
 808630c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8086310:	b298      	uxth	r0, r3
 8086312:	687b      	ldr	r3, [r7, #4]
 8086314:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8086318:	b299      	uxth	r1, r3
 808631a:	887a      	ldrh	r2, [r7, #2]
 808631c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8086320:	4413      	add	r3, r2
 8086322:	009b      	lsls	r3, r3, #2
 8086324:	687a      	ldr	r2, [r7, #4]
 8086326:	4413      	add	r3, r2
 8086328:	f9b3 3000 	ldrsh.w	r3, [r3]
 808632c:	b29c      	uxth	r4, r3
 808632e:	887a      	ldrh	r2, [r7, #2]
 8086330:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8086334:	4413      	add	r3, r2
 8086336:	009b      	lsls	r3, r3, #2
 8086338:	687a      	ldr	r2, [r7, #4]
 808633a:	4413      	add	r3, r2
 808633c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8086340:	b29b      	uxth	r3, r3
 8086342:	4622      	mov	r2, r4
 8086344:	f7ff fde6 	bl	8085f14 <BSP_LCD_DrawLine>

	while(--PointCount)
 8086348:	e014      	b.n	8086374 <BSP_LCD_DrawPolygon+0x84>
	{
		x = Points->X;
 808634a:	687b      	ldr	r3, [r7, #4]
 808634c:	881b      	ldrh	r3, [r3, #0]
 808634e:	81fb      	strh	r3, [r7, #14]
		y = Points->Y;
 8086350:	687b      	ldr	r3, [r7, #4]
 8086352:	885b      	ldrh	r3, [r3, #2]
 8086354:	81bb      	strh	r3, [r7, #12]
		Points++;
 8086356:	687b      	ldr	r3, [r7, #4]
 8086358:	3304      	adds	r3, #4
 808635a:	607b      	str	r3, [r7, #4]
		BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 808635c:	89f8      	ldrh	r0, [r7, #14]
 808635e:	89b9      	ldrh	r1, [r7, #12]
 8086360:	687b      	ldr	r3, [r7, #4]
 8086362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8086366:	b29a      	uxth	r2, r3
 8086368:	687b      	ldr	r3, [r7, #4]
 808636a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 808636e:	b29b      	uxth	r3, r3
 8086370:	f7ff fdd0 	bl	8085f14 <BSP_LCD_DrawLine>
	while(--PointCount)
 8086374:	887b      	ldrh	r3, [r7, #2]
 8086376:	3b01      	subs	r3, #1
 8086378:	807b      	strh	r3, [r7, #2]
 808637a:	887b      	ldrh	r3, [r7, #2]
 808637c:	2b00      	cmp	r3, #0
 808637e:	d1e4      	bne.n	808634a <BSP_LCD_DrawPolygon+0x5a>
 8086380:	e000      	b.n	8086384 <BSP_LCD_DrawPolygon+0x94>
		return;
 8086382:	bf00      	nop
	}
}
 8086384:	3714      	adds	r7, #20
 8086386:	46bd      	mov	sp, r7
 8086388:	bd90      	pop	{r4, r7, pc}
	...

0808638c <BSP_LCD_DrawEllipse>:
 * @param  XRadius: Ellipse X radius
 * @param  YRadius: Ellipse Y radius
 * @retval None
 */
void BSP_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
 808638c:	b590      	push	{r4, r7, lr}
 808638e:	b08d      	sub	sp, #52	; 0x34
 8086390:	af00      	add	r7, sp, #0
 8086392:	60f8      	str	r0, [r7, #12]
 8086394:	60b9      	str	r1, [r7, #8]
 8086396:	607a      	str	r2, [r7, #4]
 8086398:	603b      	str	r3, [r7, #0]
	int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 808639a:	2300      	movs	r3, #0
 808639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 808639e:	683b      	ldr	r3, [r7, #0]
 80863a0:	425b      	negs	r3, r3
 80863a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80863a4:	687b      	ldr	r3, [r7, #4]
 80863a6:	f1c3 0301 	rsb	r3, r3, #1
 80863aa:	005b      	lsls	r3, r3, #1
 80863ac:	627b      	str	r3, [r7, #36]	; 0x24
	float k = 0, rad1 = 0, rad2 = 0;
 80863ae:	f04f 0300 	mov.w	r3, #0
 80863b2:	61fb      	str	r3, [r7, #28]
 80863b4:	f04f 0300 	mov.w	r3, #0
 80863b8:	61bb      	str	r3, [r7, #24]
 80863ba:	f04f 0300 	mov.w	r3, #0
 80863be:	617b      	str	r3, [r7, #20]

	rad1 = XRadius;
 80863c0:	687b      	ldr	r3, [r7, #4]
 80863c2:	ee07 3a90 	vmov	s15, r3
 80863c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80863ca:	edc7 7a06 	vstr	s15, [r7, #24]
	rad2 = YRadius;
 80863ce:	683b      	ldr	r3, [r7, #0]
 80863d0:	ee07 3a90 	vmov	s15, r3
 80863d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80863d8:	edc7 7a05 	vstr	s15, [r7, #20]

	k = (float)(rad2/rad1);
 80863dc:	edd7 6a05 	vldr	s13, [r7, #20]
 80863e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80863e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80863e8:	edc7 7a07 	vstr	s15, [r7, #28]

	do {
		BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80863ec:	68fb      	ldr	r3, [r7, #12]
 80863ee:	b29a      	uxth	r2, r3
 80863f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80863f2:	ee07 3a90 	vmov	s15, r3
 80863f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80863fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80863fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086406:	ee17 3a90 	vmov	r3, s15
 808640a:	b29b      	uxth	r3, r3
 808640c:	1ad3      	subs	r3, r2, r3
 808640e:	b298      	uxth	r0, r3
 8086410:	68bb      	ldr	r3, [r7, #8]
 8086412:	b29a      	uxth	r2, r3
 8086414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086416:	b29b      	uxth	r3, r3
 8086418:	4413      	add	r3, r2
 808641a:	b29c      	uxth	r4, r3
 808641c:	4b55      	ldr	r3, [pc, #340]	; (8086574 <BSP_LCD_DrawEllipse+0x1e8>)
 808641e:	681a      	ldr	r2, [r3, #0]
 8086420:	4955      	ldr	r1, [pc, #340]	; (8086578 <BSP_LCD_DrawEllipse+0x1ec>)
 8086422:	4613      	mov	r3, r2
 8086424:	005b      	lsls	r3, r3, #1
 8086426:	4413      	add	r3, r2
 8086428:	009b      	lsls	r3, r3, #2
 808642a:	440b      	add	r3, r1
 808642c:	681b      	ldr	r3, [r3, #0]
 808642e:	461a      	mov	r2, r3
 8086430:	4621      	mov	r1, r4
 8086432:	f000 f8a3 	bl	808657c <BSP_LCD_DrawPixel>
		BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8086436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086438:	ee07 3a90 	vmov	s15, r3
 808643c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8086440:	ed97 7a07 	vldr	s14, [r7, #28]
 8086444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 808644c:	ee17 3a90 	vmov	r3, s15
 8086450:	b29a      	uxth	r2, r3
 8086452:	68fb      	ldr	r3, [r7, #12]
 8086454:	b29b      	uxth	r3, r3
 8086456:	4413      	add	r3, r2
 8086458:	b298      	uxth	r0, r3
 808645a:	68bb      	ldr	r3, [r7, #8]
 808645c:	b29a      	uxth	r2, r3
 808645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086460:	b29b      	uxth	r3, r3
 8086462:	4413      	add	r3, r2
 8086464:	b29c      	uxth	r4, r3
 8086466:	4b43      	ldr	r3, [pc, #268]	; (8086574 <BSP_LCD_DrawEllipse+0x1e8>)
 8086468:	681a      	ldr	r2, [r3, #0]
 808646a:	4943      	ldr	r1, [pc, #268]	; (8086578 <BSP_LCD_DrawEllipse+0x1ec>)
 808646c:	4613      	mov	r3, r2
 808646e:	005b      	lsls	r3, r3, #1
 8086470:	4413      	add	r3, r2
 8086472:	009b      	lsls	r3, r3, #2
 8086474:	440b      	add	r3, r1
 8086476:	681b      	ldr	r3, [r3, #0]
 8086478:	461a      	mov	r2, r3
 808647a:	4621      	mov	r1, r4
 808647c:	f000 f87e 	bl	808657c <BSP_LCD_DrawPixel>
		BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 8086480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086482:	ee07 3a90 	vmov	s15, r3
 8086486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 808648a:	ed97 7a07 	vldr	s14, [r7, #28]
 808648e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086496:	ee17 3a90 	vmov	r3, s15
 808649a:	b29a      	uxth	r2, r3
 808649c:	68fb      	ldr	r3, [r7, #12]
 808649e:	b29b      	uxth	r3, r3
 80864a0:	4413      	add	r3, r2
 80864a2:	b298      	uxth	r0, r3
 80864a4:	68bb      	ldr	r3, [r7, #8]
 80864a6:	b29a      	uxth	r2, r3
 80864a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80864aa:	b29b      	uxth	r3, r3
 80864ac:	1ad3      	subs	r3, r2, r3
 80864ae:	b29c      	uxth	r4, r3
 80864b0:	4b30      	ldr	r3, [pc, #192]	; (8086574 <BSP_LCD_DrawEllipse+0x1e8>)
 80864b2:	681a      	ldr	r2, [r3, #0]
 80864b4:	4930      	ldr	r1, [pc, #192]	; (8086578 <BSP_LCD_DrawEllipse+0x1ec>)
 80864b6:	4613      	mov	r3, r2
 80864b8:	005b      	lsls	r3, r3, #1
 80864ba:	4413      	add	r3, r2
 80864bc:	009b      	lsls	r3, r3, #2
 80864be:	440b      	add	r3, r1
 80864c0:	681b      	ldr	r3, [r3, #0]
 80864c2:	461a      	mov	r2, r3
 80864c4:	4621      	mov	r1, r4
 80864c6:	f000 f859 	bl	808657c <BSP_LCD_DrawPixel>
		BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 80864ca:	68fb      	ldr	r3, [r7, #12]
 80864cc:	b29a      	uxth	r2, r3
 80864ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80864d0:	ee07 3a90 	vmov	s15, r3
 80864d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80864d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80864dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80864e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80864e4:	ee17 3a90 	vmov	r3, s15
 80864e8:	b29b      	uxth	r3, r3
 80864ea:	1ad3      	subs	r3, r2, r3
 80864ec:	b298      	uxth	r0, r3
 80864ee:	68bb      	ldr	r3, [r7, #8]
 80864f0:	b29a      	uxth	r2, r3
 80864f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80864f4:	b29b      	uxth	r3, r3
 80864f6:	1ad3      	subs	r3, r2, r3
 80864f8:	b29c      	uxth	r4, r3
 80864fa:	4b1e      	ldr	r3, [pc, #120]	; (8086574 <BSP_LCD_DrawEllipse+0x1e8>)
 80864fc:	681a      	ldr	r2, [r3, #0]
 80864fe:	491e      	ldr	r1, [pc, #120]	; (8086578 <BSP_LCD_DrawEllipse+0x1ec>)
 8086500:	4613      	mov	r3, r2
 8086502:	005b      	lsls	r3, r3, #1
 8086504:	4413      	add	r3, r2
 8086506:	009b      	lsls	r3, r3, #2
 8086508:	440b      	add	r3, r1
 808650a:	681b      	ldr	r3, [r3, #0]
 808650c:	461a      	mov	r2, r3
 808650e:	4621      	mov	r1, r4
 8086510:	f000 f834 	bl	808657c <BSP_LCD_DrawPixel>

		e2 = err;
 8086514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086516:	623b      	str	r3, [r7, #32]
		if (e2 <= x) {
 8086518:	6a3a      	ldr	r2, [r7, #32]
 808651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808651c:	429a      	cmp	r2, r3
 808651e:	dc13      	bgt.n	8086548 <BSP_LCD_DrawEllipse+0x1bc>
			err += ++x*2+1;
 8086520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086522:	3301      	adds	r3, #1
 8086524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8086526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086528:	005b      	lsls	r3, r3, #1
 808652a:	3301      	adds	r3, #1
 808652c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808652e:	4413      	add	r3, r2
 8086530:	627b      	str	r3, [r7, #36]	; 0x24
			if (-y == x && e2 <= y) e2 = 0;
 8086532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086534:	425b      	negs	r3, r3
 8086536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8086538:	429a      	cmp	r2, r3
 808653a:	d105      	bne.n	8086548 <BSP_LCD_DrawEllipse+0x1bc>
 808653c:	6a3a      	ldr	r2, [r7, #32]
 808653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086540:	429a      	cmp	r2, r3
 8086542:	dc01      	bgt.n	8086548 <BSP_LCD_DrawEllipse+0x1bc>
 8086544:	2300      	movs	r3, #0
 8086546:	623b      	str	r3, [r7, #32]
		}
		if (e2 > y) err += ++y*2+1;
 8086548:	6a3a      	ldr	r2, [r7, #32]
 808654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808654c:	429a      	cmp	r2, r3
 808654e:	dd08      	ble.n	8086562 <BSP_LCD_DrawEllipse+0x1d6>
 8086550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086552:	3301      	adds	r3, #1
 8086554:	62bb      	str	r3, [r7, #40]	; 0x28
 8086556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086558:	005b      	lsls	r3, r3, #1
 808655a:	3301      	adds	r3, #1
 808655c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808655e:	4413      	add	r3, r2
 8086560:	627b      	str	r3, [r7, #36]	; 0x24
	}
	while (y <= 0);
 8086562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086564:	2b00      	cmp	r3, #0
 8086566:	f77f af41 	ble.w	80863ec <BSP_LCD_DrawEllipse+0x60>
}
 808656a:	bf00      	nop
 808656c:	3734      	adds	r7, #52	; 0x34
 808656e:	46bd      	mov	sp, r7
 8086570:	bd90      	pop	{r4, r7, pc}
 8086572:	bf00      	nop
 8086574:	2000b830 	.word	0x2000b830
 8086578:	2000b834 	.word	0x2000b834

0808657c <BSP_LCD_DrawPixel>:
 * @param  Ypos: Y position
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 * @retval None
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 808657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808657e:	b083      	sub	sp, #12
 8086580:	af00      	add	r7, sp, #0
 8086582:	4603      	mov	r3, r0
 8086584:	603a      	str	r2, [r7, #0]
 8086586:	80fb      	strh	r3, [r7, #6]
 8086588:	460b      	mov	r3, r1
 808658a:	80bb      	strh	r3, [r7, #4]
		*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
	}

#elif (LCD_ORIENTATION == LCD_ORIENTATION_180)

	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 808658c:	4b21      	ldr	r3, [pc, #132]	; (8086614 <BSP_LCD_DrawPixel+0x98>)
 808658e:	681b      	ldr	r3, [r3, #0]
 8086590:	4a21      	ldr	r2, [pc, #132]	; (8086618 <BSP_LCD_DrawPixel+0x9c>)
 8086592:	2134      	movs	r1, #52	; 0x34
 8086594:	fb01 f303 	mul.w	r3, r1, r3
 8086598:	4413      	add	r3, r2
 808659a:	3348      	adds	r3, #72	; 0x48
 808659c:	681b      	ldr	r3, [r3, #0]
 808659e:	2b02      	cmp	r3, #2
 80865a0:	d119      	bne.n	80865d6 <BSP_LCD_DrawPixel+0x5a>
	{ /* RGB565 format */
		*(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 2 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - Xpos - BSP_LCD_GetXSize() * Ypos)) = (uint16_t)RGB_Code;
 80865a2:	4b1c      	ldr	r3, [pc, #112]	; (8086614 <BSP_LCD_DrawPixel+0x98>)
 80865a4:	681b      	ldr	r3, [r3, #0]
 80865a6:	4a1c      	ldr	r2, [pc, #112]	; (8086618 <BSP_LCD_DrawPixel+0x9c>)
 80865a8:	2134      	movs	r1, #52	; 0x34
 80865aa:	fb01 f303 	mul.w	r3, r1, r3
 80865ae:	4413      	add	r3, r2
 80865b0:	335c      	adds	r3, #92	; 0x5c
 80865b2:	681c      	ldr	r4, [r3, #0]
 80865b4:	88fb      	ldrh	r3, [r7, #6]
 80865b6:	425d      	negs	r5, r3
 80865b8:	f7ff f958 	bl	808586c <BSP_LCD_GetXSize>
 80865bc:	4602      	mov	r2, r0
 80865be:	88bb      	ldrh	r3, [r7, #4]
 80865c0:	fb03 f302 	mul.w	r3, r3, r2
 80865c4:	1aeb      	subs	r3, r5, r3
 80865c6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80865ca:	005b      	lsls	r3, r3, #1
 80865cc:	4423      	add	r3, r4
 80865ce:	683a      	ldr	r2, [r7, #0]
 80865d0:	b292      	uxth	r2, r2
 80865d2:	801a      	strh	r2, [r3, #0]
		*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - Xpos - BSP_LCD_GetXSize() * Ypos)) = (uint16_t)RGB_Code;
	}
#else
#error "LCD Orientation not available"
#endif /* LCD_ORIENTATION */
}
 80865d4:	e019      	b.n	808660a <BSP_LCD_DrawPixel+0x8e>
		*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - Xpos - BSP_LCD_GetXSize() * Ypos)) = (uint16_t)RGB_Code;
 80865d6:	683b      	ldr	r3, [r7, #0]
 80865d8:	b29e      	uxth	r6, r3
 80865da:	4b0e      	ldr	r3, [pc, #56]	; (8086614 <BSP_LCD_DrawPixel+0x98>)
 80865dc:	681b      	ldr	r3, [r3, #0]
 80865de:	4a0e      	ldr	r2, [pc, #56]	; (8086618 <BSP_LCD_DrawPixel+0x9c>)
 80865e0:	2134      	movs	r1, #52	; 0x34
 80865e2:	fb01 f303 	mul.w	r3, r1, r3
 80865e6:	4413      	add	r3, r2
 80865e8:	335c      	adds	r3, #92	; 0x5c
 80865ea:	681c      	ldr	r4, [r3, #0]
 80865ec:	88fb      	ldrh	r3, [r7, #6]
 80865ee:	425d      	negs	r5, r3
 80865f0:	f7ff f93c 	bl	808586c <BSP_LCD_GetXSize>
 80865f4:	4602      	mov	r2, r0
 80865f6:	88bb      	ldrh	r3, [r7, #4]
 80865f8:	fb03 f302 	mul.w	r3, r3, r2
 80865fc:	1aeb      	subs	r3, r5, r3
 80865fe:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8086602:	009b      	lsls	r3, r3, #2
 8086604:	4423      	add	r3, r4
 8086606:	4632      	mov	r2, r6
 8086608:	601a      	str	r2, [r3, #0]
}
 808660a:	bf00      	nop
 808660c:	370c      	adds	r7, #12
 808660e:	46bd      	mov	sp, r7
 8086610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086612:	bf00      	nop
 8086614:	2000b830 	.word	0x2000b830
 8086618:	2002d8a4 	.word	0x2002d8a4

0808661c <BSP_LCD_DrawBitmap>:
 * @param  Ypos: Bmp Y position in the LCD
 * @param  pbmp: Pointer to Bmp picture address in the internal Flash
 * @retval None
 */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 808661c:	b5b0      	push	{r4, r5, r7, lr}
 808661e:	b08a      	sub	sp, #40	; 0x28
 8086620:	af00      	add	r7, sp, #0
 8086622:	60f8      	str	r0, [r7, #12]
 8086624:	60b9      	str	r1, [r7, #8]
 8086626:	607a      	str	r2, [r7, #4]
	uint32_t width = 0, height = 0, bit_pixel = 0;
 8086628:	2300      	movs	r3, #0
 808662a:	61bb      	str	r3, [r7, #24]
 808662c:	2300      	movs	r3, #0
 808662e:	617b      	str	r3, [r7, #20]
 8086630:	2300      	movs	r3, #0
 8086632:	613b      	str	r3, [r7, #16]
	uint32_t address;
	uint32_t input_color_mode = 0;
 8086634:	2300      	movs	r3, #0
 8086636:	623b      	str	r3, [r7, #32]
	uint32_t index=0;
 8086638:	2300      	movs	r3, #0
 808663a:	61fb      	str	r3, [r7, #28]

	/* Get bitmap data address offset */
	index = *(__IO uint16_t *) (pbmp + 10);
 808663c:	687b      	ldr	r3, [r7, #4]
 808663e:	330a      	adds	r3, #10
 8086640:	881b      	ldrh	r3, [r3, #0]
 8086642:	b29b      	uxth	r3, r3
 8086644:	61fb      	str	r3, [r7, #28]
	index |= (*(__IO uint16_t *) (pbmp + 12)) << 16;
 8086646:	687b      	ldr	r3, [r7, #4]
 8086648:	330c      	adds	r3, #12
 808664a:	881b      	ldrh	r3, [r3, #0]
 808664c:	b29b      	uxth	r3, r3
 808664e:	041b      	lsls	r3, r3, #16
 8086650:	461a      	mov	r2, r3
 8086652:	69fb      	ldr	r3, [r7, #28]
 8086654:	4313      	orrs	r3, r2
 8086656:	61fb      	str	r3, [r7, #28]

	/* Read bitmap width */
	width = *(uint16_t *) (pbmp + 18);
 8086658:	687b      	ldr	r3, [r7, #4]
 808665a:	3312      	adds	r3, #18
 808665c:	881b      	ldrh	r3, [r3, #0]
 808665e:	61bb      	str	r3, [r7, #24]
	width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8086660:	687b      	ldr	r3, [r7, #4]
 8086662:	3314      	adds	r3, #20
 8086664:	881b      	ldrh	r3, [r3, #0]
 8086666:	041b      	lsls	r3, r3, #16
 8086668:	461a      	mov	r2, r3
 808666a:	69bb      	ldr	r3, [r7, #24]
 808666c:	4313      	orrs	r3, r2
 808666e:	61bb      	str	r3, [r7, #24]

	/* Read bitmap height */
	height = *(uint16_t *) (pbmp + 22);
 8086670:	687b      	ldr	r3, [r7, #4]
 8086672:	3316      	adds	r3, #22
 8086674:	881b      	ldrh	r3, [r3, #0]
 8086676:	617b      	str	r3, [r7, #20]
	height |= (*(uint16_t *) (pbmp + 24)) << 16;
 8086678:	687b      	ldr	r3, [r7, #4]
 808667a:	3318      	adds	r3, #24
 808667c:	881b      	ldrh	r3, [r3, #0]
 808667e:	041b      	lsls	r3, r3, #16
 8086680:	461a      	mov	r2, r3
 8086682:	697b      	ldr	r3, [r7, #20]
 8086684:	4313      	orrs	r3, r2
 8086686:	617b      	str	r3, [r7, #20]

	/* Read bit/pixel */
	bit_pixel = *(uint16_t *) (pbmp + 28);
 8086688:	687b      	ldr	r3, [r7, #4]
 808668a:	331c      	adds	r3, #28
 808668c:	881b      	ldrh	r3, [r3, #0]
 808668e:	613b      	str	r3, [r7, #16]
		address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
	}

#elif (LCD_ORIENTATION == LCD_ORIENTATION_180)

	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8086690:	4b4d      	ldr	r3, [pc, #308]	; (80867c8 <BSP_LCD_DrawBitmap+0x1ac>)
 8086692:	681b      	ldr	r3, [r3, #0]
 8086694:	4a4d      	ldr	r2, [pc, #308]	; (80867cc <BSP_LCD_DrawBitmap+0x1b0>)
 8086696:	2134      	movs	r1, #52	; 0x34
 8086698:	fb01 f303 	mul.w	r3, r1, r3
 808669c:	4413      	add	r3, r2
 808669e:	3348      	adds	r3, #72	; 0x48
 80866a0:	681b      	ldr	r3, [r3, #0]
 80866a2:	2b02      	cmp	r3, #2
 80866a4:	d119      	bne.n	80866da <BSP_LCD_DrawBitmap+0xbe>
	{ /* RGB565 format */
		address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 2 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+width) - (BSP_LCD_GetXSize() * (Ypos))));
 80866a6:	4b48      	ldr	r3, [pc, #288]	; (80867c8 <BSP_LCD_DrawBitmap+0x1ac>)
 80866a8:	681b      	ldr	r3, [r3, #0]
 80866aa:	4a48      	ldr	r2, [pc, #288]	; (80867cc <BSP_LCD_DrawBitmap+0x1b0>)
 80866ac:	2134      	movs	r1, #52	; 0x34
 80866ae:	fb01 f303 	mul.w	r3, r1, r3
 80866b2:	4413      	add	r3, r2
 80866b4:	335c      	adds	r3, #92	; 0x5c
 80866b6:	681c      	ldr	r4, [r3, #0]
 80866b8:	68fa      	ldr	r2, [r7, #12]
 80866ba:	69bb      	ldr	r3, [r7, #24]
 80866bc:	4413      	add	r3, r2
 80866be:	425d      	negs	r5, r3
 80866c0:	f7ff f8d4 	bl	808586c <BSP_LCD_GetXSize>
 80866c4:	4602      	mov	r2, r0
 80866c6:	68bb      	ldr	r3, [r7, #8]
 80866c8:	fb03 f302 	mul.w	r3, r3, r2
 80866cc:	1aeb      	subs	r3, r5, r3
 80866ce:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80866d2:	005b      	lsls	r3, r3, #1
 80866d4:	4423      	add	r3, r4
 80866d6:	627b      	str	r3, [r7, #36]	; 0x24
 80866d8:	e01a      	b.n	8086710 <BSP_LCD_DrawBitmap+0xf4>
	}
	else
	{ /* ARGB8888 format */
		address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+width) - (BSP_LCD_GetXSize() * (Ypos+height))));
 80866da:	4b3b      	ldr	r3, [pc, #236]	; (80867c8 <BSP_LCD_DrawBitmap+0x1ac>)
 80866dc:	681b      	ldr	r3, [r3, #0]
 80866de:	4a3b      	ldr	r2, [pc, #236]	; (80867cc <BSP_LCD_DrawBitmap+0x1b0>)
 80866e0:	2134      	movs	r1, #52	; 0x34
 80866e2:	fb01 f303 	mul.w	r3, r1, r3
 80866e6:	4413      	add	r3, r2
 80866e8:	335c      	adds	r3, #92	; 0x5c
 80866ea:	681c      	ldr	r4, [r3, #0]
 80866ec:	68fa      	ldr	r2, [r7, #12]
 80866ee:	69bb      	ldr	r3, [r7, #24]
 80866f0:	4413      	add	r3, r2
 80866f2:	425d      	negs	r5, r3
 80866f4:	f7ff f8ba 	bl	808586c <BSP_LCD_GetXSize>
 80866f8:	4601      	mov	r1, r0
 80866fa:	68ba      	ldr	r2, [r7, #8]
 80866fc:	697b      	ldr	r3, [r7, #20]
 80866fe:	4413      	add	r3, r2
 8086700:	fb03 f301 	mul.w	r3, r3, r1
 8086704:	1aeb      	subs	r3, r5, r3
 8086706:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 808670a:	009b      	lsls	r3, r3, #2
 808670c:	4423      	add	r3, r4
 808670e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* LCD_ORIENTATION */

	//bit_pixel = 16;

	/* Get the layer pixel format */
	if ((bit_pixel/8) == 4)
 8086710:	693b      	ldr	r3, [r7, #16]
 8086712:	3b20      	subs	r3, #32
 8086714:	2b07      	cmp	r3, #7
 8086716:	d802      	bhi.n	808671e <BSP_LCD_DrawBitmap+0x102>
	{
		input_color_mode = CM_ARGB8888;
 8086718:	2300      	movs	r3, #0
 808671a:	623b      	str	r3, [r7, #32]
 808671c:	e008      	b.n	8086730 <BSP_LCD_DrawBitmap+0x114>
	}
	else if ((bit_pixel/8) == 2)
 808671e:	693b      	ldr	r3, [r7, #16]
 8086720:	3b10      	subs	r3, #16
 8086722:	2b07      	cmp	r3, #7
 8086724:	d802      	bhi.n	808672c <BSP_LCD_DrawBitmap+0x110>
	{
		input_color_mode = CM_RGB565;
 8086726:	2302      	movs	r3, #2
 8086728:	623b      	str	r3, [r7, #32]
 808672a:	e001      	b.n	8086730 <BSP_LCD_DrawBitmap+0x114>
	}
	else
	{
		input_color_mode = CM_RGB888;
 808672c:	2301      	movs	r3, #1
 808672e:	623b      	str	r3, [r7, #32]
	}

	/* Bypass the bitmap header */
	pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8086730:	697b      	ldr	r3, [r7, #20]
 8086732:	3b01      	subs	r3, #1
 8086734:	69ba      	ldr	r2, [r7, #24]
 8086736:	fb02 f303 	mul.w	r3, r2, r3
 808673a:	693a      	ldr	r2, [r7, #16]
 808673c:	08d2      	lsrs	r2, r2, #3
 808673e:	fb02 f203 	mul.w	r2, r2, r3
 8086742:	69fb      	ldr	r3, [r7, #28]
 8086744:	4413      	add	r3, r2
 8086746:	687a      	ldr	r2, [r7, #4]
 8086748:	4413      	add	r3, r2
 808674a:	607b      	str	r3, [r7, #4]

	/* Convert picture to ARGB8888 pixel format */

	for(index=0; index < height; index++)
 808674c:	2300      	movs	r3, #0
 808674e:	61fb      	str	r3, [r7, #28]
 8086750:	e031      	b.n	80867b6 <BSP_LCD_DrawBitmap+0x19a>
	{
		if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8086752:	4b1d      	ldr	r3, [pc, #116]	; (80867c8 <BSP_LCD_DrawBitmap+0x1ac>)
 8086754:	681b      	ldr	r3, [r3, #0]
 8086756:	4a1d      	ldr	r2, [pc, #116]	; (80867cc <BSP_LCD_DrawBitmap+0x1b0>)
 8086758:	2134      	movs	r1, #52	; 0x34
 808675a:	fb01 f303 	mul.w	r3, r1, r3
 808675e:	4413      	add	r3, r2
 8086760:	3348      	adds	r3, #72	; 0x48
 8086762:	681b      	ldr	r3, [r3, #0]
 8086764:	2b02      	cmp	r3, #2
 8086766:	d10d      	bne.n	8086784 <BSP_LCD_DrawBitmap+0x168>
		{
			LL_ConvertLineToRGB565((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8086768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 808676a:	6a3b      	ldr	r3, [r7, #32]
 808676c:	69ba      	ldr	r2, [r7, #24]
 808676e:	6878      	ldr	r0, [r7, #4]
 8086770:	f000 fdd0 	bl	8087314 <LL_ConvertLineToRGB565>
			address-=  (BSP_LCD_GetXSize()*2);
 8086774:	f7ff f87a 	bl	808586c <BSP_LCD_GetXSize>
 8086778:	4603      	mov	r3, r0
 808677a:	005b      	lsls	r3, r3, #1
 808677c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808677e:	1ad3      	subs	r3, r2, r3
 8086780:	627b      	str	r3, [r7, #36]	; 0x24
 8086782:	e00c      	b.n	808679e <BSP_LCD_DrawBitmap+0x182>
		}
		else
		{
			LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8086784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8086786:	6a3b      	ldr	r3, [r7, #32]
 8086788:	69ba      	ldr	r2, [r7, #24]
 808678a:	6878      	ldr	r0, [r7, #4]
 808678c:	f000 fd7e 	bl	808728c <LL_ConvertLineToARGB8888>
			address+=  (BSP_LCD_GetXSize()*4);
 8086790:	f7ff f86c 	bl	808586c <BSP_LCD_GetXSize>
 8086794:	4603      	mov	r3, r0
 8086796:	009b      	lsls	r3, r3, #2
 8086798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808679a:	4413      	add	r3, r2
 808679c:	627b      	str	r3, [r7, #36]	; 0x24
		/* Pixel format conversion */
		//LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);

		/* Increment the source and destination buffers */
		//address+=  (BSP_LCD_GetXSize()*4);
		pbmp -= width*(bit_pixel/8);
 808679e:	693b      	ldr	r3, [r7, #16]
 80867a0:	08db      	lsrs	r3, r3, #3
 80867a2:	69ba      	ldr	r2, [r7, #24]
 80867a4:	fb02 f303 	mul.w	r3, r2, r3
 80867a8:	425b      	negs	r3, r3
 80867aa:	687a      	ldr	r2, [r7, #4]
 80867ac:	4413      	add	r3, r2
 80867ae:	607b      	str	r3, [r7, #4]
	for(index=0; index < height; index++)
 80867b0:	69fb      	ldr	r3, [r7, #28]
 80867b2:	3301      	adds	r3, #1
 80867b4:	61fb      	str	r3, [r7, #28]
 80867b6:	69fa      	ldr	r2, [r7, #28]
 80867b8:	697b      	ldr	r3, [r7, #20]
 80867ba:	429a      	cmp	r2, r3
 80867bc:	d3c9      	bcc.n	8086752 <BSP_LCD_DrawBitmap+0x136>
	}
}
 80867be:	bf00      	nop
 80867c0:	3728      	adds	r7, #40	; 0x28
 80867c2:	46bd      	mov	sp, r7
 80867c4:	bdb0      	pop	{r4, r5, r7, pc}
 80867c6:	bf00      	nop
 80867c8:	2000b830 	.word	0x2000b830
 80867cc:	2002d8a4 	.word	0x2002d8a4

080867d0 <BSP_LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80867d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80867d4:	b086      	sub	sp, #24
 80867d6:	af02      	add	r7, sp, #8
 80867d8:	4604      	mov	r4, r0
 80867da:	4608      	mov	r0, r1
 80867dc:	4611      	mov	r1, r2
 80867de:	461a      	mov	r2, r3
 80867e0:	4623      	mov	r3, r4
 80867e2:	80fb      	strh	r3, [r7, #6]
 80867e4:	4603      	mov	r3, r0
 80867e6:	80bb      	strh	r3, [r7, #4]
 80867e8:	460b      	mov	r3, r1
 80867ea:	807b      	strh	r3, [r7, #2]
 80867ec:	4613      	mov	r3, r2
 80867ee:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = 0;
 80867f0:	2300      	movs	r3, #0
 80867f2:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80867f4:	4b38      	ldr	r3, [pc, #224]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 80867f6:	681a      	ldr	r2, [r3, #0]
 80867f8:	4938      	ldr	r1, [pc, #224]	; (80868dc <BSP_LCD_FillRect+0x10c>)
 80867fa:	4613      	mov	r3, r2
 80867fc:	005b      	lsls	r3, r3, #1
 80867fe:	4413      	add	r3, r2
 8086800:	009b      	lsls	r3, r3, #2
 8086802:	440b      	add	r3, r1
 8086804:	681b      	ldr	r3, [r3, #0]
 8086806:	4618      	mov	r0, r3
 8086808:	f7ff f8dc 	bl	80859c4 <BSP_LCD_SetTextColor>
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
	}
#elif (LCD_ORIENTATION== LCD_ORIENTATION_180)

	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 808680c:	4b32      	ldr	r3, [pc, #200]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 808680e:	681b      	ldr	r3, [r3, #0]
 8086810:	4a33      	ldr	r2, [pc, #204]	; (80868e0 <BSP_LCD_FillRect+0x110>)
 8086812:	2134      	movs	r1, #52	; 0x34
 8086814:	fb01 f303 	mul.w	r3, r1, r3
 8086818:	4413      	add	r3, r2
 808681a:	3348      	adds	r3, #72	; 0x48
 808681c:	681b      	ldr	r3, [r3, #0]
 808681e:	2b02      	cmp	r3, #2
 8086820:	d11c      	bne.n	808685c <BSP_LCD_FillRect+0x8c>
	{ /* RGB565 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 2 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+Width) - (BSP_LCD_GetXSize() * (Ypos+Height-1))));
 8086822:	4b2d      	ldr	r3, [pc, #180]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 8086824:	681b      	ldr	r3, [r3, #0]
 8086826:	4a2e      	ldr	r2, [pc, #184]	; (80868e0 <BSP_LCD_FillRect+0x110>)
 8086828:	2134      	movs	r1, #52	; 0x34
 808682a:	fb01 f303 	mul.w	r3, r1, r3
 808682e:	4413      	add	r3, r2
 8086830:	335c      	adds	r3, #92	; 0x5c
 8086832:	681c      	ldr	r4, [r3, #0]
 8086834:	88fa      	ldrh	r2, [r7, #6]
 8086836:	887b      	ldrh	r3, [r7, #2]
 8086838:	4413      	add	r3, r2
 808683a:	425d      	negs	r5, r3
 808683c:	f7ff f816 	bl	808586c <BSP_LCD_GetXSize>
 8086840:	4601      	mov	r1, r0
 8086842:	88ba      	ldrh	r2, [r7, #4]
 8086844:	883b      	ldrh	r3, [r7, #0]
 8086846:	4413      	add	r3, r2
 8086848:	3b01      	subs	r3, #1
 808684a:	fb03 f301 	mul.w	r3, r3, r1
 808684e:	1aeb      	subs	r3, r5, r3
 8086850:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8086854:	005b      	lsls	r3, r3, #1
 8086856:	4423      	add	r3, r4
 8086858:	60fb      	str	r3, [r7, #12]
 808685a:	e01b      	b.n	8086894 <BSP_LCD_FillRect+0xc4>
	}
	else
	{ /* ARGB8888 format */
		x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * ((RK043FN48H_WIDTH*RK043FN48H_HEIGHT) - (Xpos+Width) - (BSP_LCD_GetXSize() * (Ypos+Height-1))));
 808685c:	4b1e      	ldr	r3, [pc, #120]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 808685e:	681b      	ldr	r3, [r3, #0]
 8086860:	4a1f      	ldr	r2, [pc, #124]	; (80868e0 <BSP_LCD_FillRect+0x110>)
 8086862:	2134      	movs	r1, #52	; 0x34
 8086864:	fb01 f303 	mul.w	r3, r1, r3
 8086868:	4413      	add	r3, r2
 808686a:	335c      	adds	r3, #92	; 0x5c
 808686c:	681c      	ldr	r4, [r3, #0]
 808686e:	88fa      	ldrh	r2, [r7, #6]
 8086870:	887b      	ldrh	r3, [r7, #2]
 8086872:	4413      	add	r3, r2
 8086874:	425d      	negs	r5, r3
 8086876:	f7fe fff9 	bl	808586c <BSP_LCD_GetXSize>
 808687a:	4601      	mov	r1, r0
 808687c:	88ba      	ldrh	r2, [r7, #4]
 808687e:	883b      	ldrh	r3, [r7, #0]
 8086880:	4413      	add	r3, r2
 8086882:	3b01      	subs	r3, #1
 8086884:	fb03 f301 	mul.w	r3, r3, r1
 8086888:	1aeb      	subs	r3, r5, r3
 808688a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 808688e:	009b      	lsls	r3, r3, #2
 8086890:	4423      	add	r3, r4
 8086892:	60fb      	str	r3, [r7, #12]
	}
#else
#error "LCD Orientation not implemented"
#endif /* LCD_ORIENTATION */
	/* Fill the rectangle */
	LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8086894:	4b10      	ldr	r3, [pc, #64]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 8086896:	681c      	ldr	r4, [r3, #0]
 8086898:	68fd      	ldr	r5, [r7, #12]
 808689a:	887e      	ldrh	r6, [r7, #2]
 808689c:	f8b7 8000 	ldrh.w	r8, [r7]
 80868a0:	f7fe ffe4 	bl	808586c <BSP_LCD_GetXSize>
 80868a4:	4602      	mov	r2, r0
 80868a6:	887b      	ldrh	r3, [r7, #2]
 80868a8:	1ad1      	subs	r1, r2, r3
 80868aa:	4b0b      	ldr	r3, [pc, #44]	; (80868d8 <BSP_LCD_FillRect+0x108>)
 80868ac:	681a      	ldr	r2, [r3, #0]
 80868ae:	480b      	ldr	r0, [pc, #44]	; (80868dc <BSP_LCD_FillRect+0x10c>)
 80868b0:	4613      	mov	r3, r2
 80868b2:	005b      	lsls	r3, r3, #1
 80868b4:	4413      	add	r3, r2
 80868b6:	009b      	lsls	r3, r3, #2
 80868b8:	4403      	add	r3, r0
 80868ba:	681b      	ldr	r3, [r3, #0]
 80868bc:	9301      	str	r3, [sp, #4]
 80868be:	9100      	str	r1, [sp, #0]
 80868c0:	4643      	mov	r3, r8
 80868c2:	4632      	mov	r2, r6
 80868c4:	4629      	mov	r1, r5
 80868c6:	4620      	mov	r0, r4
 80868c8:	f000 fc94 	bl	80871f4 <LL_FillBuffer>
}
 80868cc:	bf00      	nop
 80868ce:	3710      	adds	r7, #16
 80868d0:	46bd      	mov	sp, r7
 80868d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80868d6:	bf00      	nop
 80868d8:	2000b830 	.word	0x2000b830
 80868dc:	2000b834 	.word	0x2000b834
 80868e0:	2002d8a4 	.word	0x2002d8a4

080868e4 <BSP_LCD_FillCircle>:
 * @param  Ypos: Y position
 * @param  Radius: Circle radius
 * @retval None
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80868e4:	b580      	push	{r7, lr}
 80868e6:	b086      	sub	sp, #24
 80868e8:	af00      	add	r7, sp, #0
 80868ea:	4603      	mov	r3, r0
 80868ec:	80fb      	strh	r3, [r7, #6]
 80868ee:	460b      	mov	r3, r1
 80868f0:	80bb      	strh	r3, [r7, #4]
 80868f2:	4613      	mov	r3, r2
 80868f4:	807b      	strh	r3, [r7, #2]
	int32_t  decision;     /* Decision Variable */
	uint32_t  current_x;   /* Current X Value */
	uint32_t  current_y;   /* Current Y Value */

	decision = 3 - (Radius << 1);
 80868f6:	887b      	ldrh	r3, [r7, #2]
 80868f8:	005b      	lsls	r3, r3, #1
 80868fa:	f1c3 0303 	rsb	r3, r3, #3
 80868fe:	617b      	str	r3, [r7, #20]

	current_x = 0;
 8086900:	2300      	movs	r3, #0
 8086902:	613b      	str	r3, [r7, #16]
	current_y = Radius;
 8086904:	887b      	ldrh	r3, [r7, #2]
 8086906:	60fb      	str	r3, [r7, #12]

	//BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);

	while (current_x <= current_y)
 8086908:	e061      	b.n	80869ce <BSP_LCD_FillCircle+0xea>
	{
		if(current_y > 0)
 808690a:	68fb      	ldr	r3, [r7, #12]
 808690c:	2b00      	cmp	r3, #0
 808690e:	d021      	beq.n	8086954 <BSP_LCD_FillCircle+0x70>
		{
			BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8086910:	68fb      	ldr	r3, [r7, #12]
 8086912:	b29b      	uxth	r3, r3
 8086914:	88fa      	ldrh	r2, [r7, #6]
 8086916:	1ad3      	subs	r3, r2, r3
 8086918:	b298      	uxth	r0, r3
 808691a:	693b      	ldr	r3, [r7, #16]
 808691c:	b29a      	uxth	r2, r3
 808691e:	88bb      	ldrh	r3, [r7, #4]
 8086920:	4413      	add	r3, r2
 8086922:	b299      	uxth	r1, r3
 8086924:	68fb      	ldr	r3, [r7, #12]
 8086926:	b29b      	uxth	r3, r3
 8086928:	005b      	lsls	r3, r3, #1
 808692a:	b29b      	uxth	r3, r3
 808692c:	461a      	mov	r2, r3
 808692e:	f7ff fa19 	bl	8085d64 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8086932:	68fb      	ldr	r3, [r7, #12]
 8086934:	b29b      	uxth	r3, r3
 8086936:	88fa      	ldrh	r2, [r7, #6]
 8086938:	1ad3      	subs	r3, r2, r3
 808693a:	b298      	uxth	r0, r3
 808693c:	693b      	ldr	r3, [r7, #16]
 808693e:	b29b      	uxth	r3, r3
 8086940:	88ba      	ldrh	r2, [r7, #4]
 8086942:	1ad3      	subs	r3, r2, r3
 8086944:	b299      	uxth	r1, r3
 8086946:	68fb      	ldr	r3, [r7, #12]
 8086948:	b29b      	uxth	r3, r3
 808694a:	005b      	lsls	r3, r3, #1
 808694c:	b29b      	uxth	r3, r3
 808694e:	461a      	mov	r2, r3
 8086950:	f7ff fa08 	bl	8085d64 <BSP_LCD_DrawHLine>
		}

		if(current_x > 0)
 8086954:	693b      	ldr	r3, [r7, #16]
 8086956:	2b00      	cmp	r3, #0
 8086958:	d021      	beq.n	808699e <BSP_LCD_FillCircle+0xba>
		{
			BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 808695a:	693b      	ldr	r3, [r7, #16]
 808695c:	b29b      	uxth	r3, r3
 808695e:	88fa      	ldrh	r2, [r7, #6]
 8086960:	1ad3      	subs	r3, r2, r3
 8086962:	b298      	uxth	r0, r3
 8086964:	68fb      	ldr	r3, [r7, #12]
 8086966:	b29b      	uxth	r3, r3
 8086968:	88ba      	ldrh	r2, [r7, #4]
 808696a:	1ad3      	subs	r3, r2, r3
 808696c:	b299      	uxth	r1, r3
 808696e:	693b      	ldr	r3, [r7, #16]
 8086970:	b29b      	uxth	r3, r3
 8086972:	005b      	lsls	r3, r3, #1
 8086974:	b29b      	uxth	r3, r3
 8086976:	461a      	mov	r2, r3
 8086978:	f7ff f9f4 	bl	8085d64 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 808697c:	693b      	ldr	r3, [r7, #16]
 808697e:	b29b      	uxth	r3, r3
 8086980:	88fa      	ldrh	r2, [r7, #6]
 8086982:	1ad3      	subs	r3, r2, r3
 8086984:	b298      	uxth	r0, r3
 8086986:	68fb      	ldr	r3, [r7, #12]
 8086988:	b29a      	uxth	r2, r3
 808698a:	88bb      	ldrh	r3, [r7, #4]
 808698c:	4413      	add	r3, r2
 808698e:	b299      	uxth	r1, r3
 8086990:	693b      	ldr	r3, [r7, #16]
 8086992:	b29b      	uxth	r3, r3
 8086994:	005b      	lsls	r3, r3, #1
 8086996:	b29b      	uxth	r3, r3
 8086998:	461a      	mov	r2, r3
 808699a:	f7ff f9e3 	bl	8085d64 <BSP_LCD_DrawHLine>
		}
		if (decision < 0)
 808699e:	697b      	ldr	r3, [r7, #20]
 80869a0:	2b00      	cmp	r3, #0
 80869a2:	da06      	bge.n	80869b2 <BSP_LCD_FillCircle+0xce>
		{
			decision += (current_x << 2) + 6;
 80869a4:	693b      	ldr	r3, [r7, #16]
 80869a6:	009a      	lsls	r2, r3, #2
 80869a8:	697b      	ldr	r3, [r7, #20]
 80869aa:	4413      	add	r3, r2
 80869ac:	3306      	adds	r3, #6
 80869ae:	617b      	str	r3, [r7, #20]
 80869b0:	e00a      	b.n	80869c8 <BSP_LCD_FillCircle+0xe4>
		}
		else
		{
			decision += ((current_x - current_y) << 2) + 10;
 80869b2:	693a      	ldr	r2, [r7, #16]
 80869b4:	68fb      	ldr	r3, [r7, #12]
 80869b6:	1ad3      	subs	r3, r2, r3
 80869b8:	009a      	lsls	r2, r3, #2
 80869ba:	697b      	ldr	r3, [r7, #20]
 80869bc:	4413      	add	r3, r2
 80869be:	330a      	adds	r3, #10
 80869c0:	617b      	str	r3, [r7, #20]
			current_y--;
 80869c2:	68fb      	ldr	r3, [r7, #12]
 80869c4:	3b01      	subs	r3, #1
 80869c6:	60fb      	str	r3, [r7, #12]
		}
		current_x++;
 80869c8:	693b      	ldr	r3, [r7, #16]
 80869ca:	3301      	adds	r3, #1
 80869cc:	613b      	str	r3, [r7, #16]
	while (current_x <= current_y)
 80869ce:	693a      	ldr	r2, [r7, #16]
 80869d0:	68fb      	ldr	r3, [r7, #12]
 80869d2:	429a      	cmp	r2, r3
 80869d4:	d999      	bls.n	808690a <BSP_LCD_FillCircle+0x26>
	}

	//BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
	//BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
}
 80869d6:	bf00      	nop
 80869d8:	3718      	adds	r7, #24
 80869da:	46bd      	mov	sp, r7
 80869dc:	bd80      	pop	{r7, pc}

080869de <BSP_LCD_FillPolygon>:
 * @param  Points: Pointer to the points array
 * @param  PointCount: Number of points
 * @retval None
 */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 80869de:	b5b0      	push	{r4, r5, r7, lr}
 80869e0:	b08c      	sub	sp, #48	; 0x30
 80869e2:	af02      	add	r7, sp, #8
 80869e4:	6078      	str	r0, [r7, #4]
 80869e6:	460b      	mov	r3, r1
 80869e8:	807b      	strh	r3, [r7, #2]
	int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 80869ea:	2300      	movs	r3, #0
 80869ec:	833b      	strh	r3, [r7, #24]
 80869ee:	2300      	movs	r3, #0
 80869f0:	82fb      	strh	r3, [r7, #22]
 80869f2:	2300      	movs	r3, #0
 80869f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80869f6:	2300      	movs	r3, #0
 80869f8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80869fa:	2300      	movs	r3, #0
 80869fc:	82bb      	strh	r3, [r7, #20]
 80869fe:	2300      	movs	r3, #0
 8086a00:	827b      	strh	r3, [r7, #18]
 8086a02:	2300      	movs	r3, #0
 8086a04:	823b      	strh	r3, [r7, #16]
 8086a06:	2300      	movs	r3, #0
 8086a08:	81fb      	strh	r3, [r7, #14]
 8086a0a:	2300      	movs	r3, #0
 8086a0c:	81bb      	strh	r3, [r7, #12]
 8086a0e:	2300      	movs	r3, #0
 8086a10:	817b      	strh	r3, [r7, #10]
 8086a12:	2300      	movs	r3, #0
 8086a14:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8086a16:	2300      	movs	r3, #0
 8086a18:	843b      	strh	r3, [r7, #32]
 8086a1a:	2300      	movs	r3, #0
 8086a1c:	83fb      	strh	r3, [r7, #30]
 8086a1e:	2300      	movs	r3, #0
 8086a20:	83bb      	strh	r3, [r7, #28]
 8086a22:	2300      	movs	r3, #0
 8086a24:	837b      	strh	r3, [r7, #26]

	image_left = image_right = Points->X;
 8086a26:	687b      	ldr	r3, [r7, #4]
 8086a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8086a2c:	83fb      	strh	r3, [r7, #30]
 8086a2e:	8bfb      	ldrh	r3, [r7, #30]
 8086a30:	843b      	strh	r3, [r7, #32]
	image_top= image_bottom = Points->Y;
 8086a32:	687b      	ldr	r3, [r7, #4]
 8086a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8086a38:	837b      	strh	r3, [r7, #26]
 8086a3a:	8b7b      	ldrh	r3, [r7, #26]
 8086a3c:	83bb      	strh	r3, [r7, #28]

	for(counter = 1; counter < PointCount; counter++)
 8086a3e:	2301      	movs	r3, #1
 8086a40:	847b      	strh	r3, [r7, #34]	; 0x22
 8086a42:	e02f      	b.n	8086aa4 <BSP_LCD_FillPolygon+0xc6>
	{
		pixelX = POLY_X(counter);
 8086a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8086a48:	009b      	lsls	r3, r3, #2
 8086a4a:	687a      	ldr	r2, [r7, #4]
 8086a4c:	4413      	add	r3, r2
 8086a4e:	881b      	ldrh	r3, [r3, #0]
 8086a50:	81bb      	strh	r3, [r7, #12]
		if(pixelX < image_left)
 8086a52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8086a56:	8c3b      	ldrh	r3, [r7, #32]
 8086a58:	429a      	cmp	r2, r3
 8086a5a:	da01      	bge.n	8086a60 <BSP_LCD_FillPolygon+0x82>
		{
			image_left = pixelX;
 8086a5c:	89bb      	ldrh	r3, [r7, #12]
 8086a5e:	843b      	strh	r3, [r7, #32]
		}
		if(pixelX > image_right)
 8086a60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8086a64:	8bfb      	ldrh	r3, [r7, #30]
 8086a66:	429a      	cmp	r2, r3
 8086a68:	dd01      	ble.n	8086a6e <BSP_LCD_FillPolygon+0x90>
		{
			image_right = pixelX;
 8086a6a:	89bb      	ldrh	r3, [r7, #12]
 8086a6c:	83fb      	strh	r3, [r7, #30]
		}

		pixelY = POLY_Y(counter);
 8086a6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8086a72:	009b      	lsls	r3, r3, #2
 8086a74:	687a      	ldr	r2, [r7, #4]
 8086a76:	4413      	add	r3, r2
 8086a78:	885b      	ldrh	r3, [r3, #2]
 8086a7a:	817b      	strh	r3, [r7, #10]
		if(pixelY < image_top)
 8086a7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8086a80:	8bbb      	ldrh	r3, [r7, #28]
 8086a82:	429a      	cmp	r2, r3
 8086a84:	da01      	bge.n	8086a8a <BSP_LCD_FillPolygon+0xac>
		{
			image_top = pixelY;
 8086a86:	897b      	ldrh	r3, [r7, #10]
 8086a88:	83bb      	strh	r3, [r7, #28]
		}
		if(pixelY > image_bottom)
 8086a8a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8086a8e:	8b7b      	ldrh	r3, [r7, #26]
 8086a90:	429a      	cmp	r2, r3
 8086a92:	dd01      	ble.n	8086a98 <BSP_LCD_FillPolygon+0xba>
		{
			image_bottom = pixelY;
 8086a94:	897b      	ldrh	r3, [r7, #10]
 8086a96:	837b      	strh	r3, [r7, #26]
	for(counter = 1; counter < PointCount; counter++)
 8086a98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8086a9c:	b29b      	uxth	r3, r3
 8086a9e:	3301      	adds	r3, #1
 8086aa0:	b29b      	uxth	r3, r3
 8086aa2:	847b      	strh	r3, [r7, #34]	; 0x22
 8086aa4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8086aa8:	887b      	ldrh	r3, [r7, #2]
 8086aaa:	429a      	cmp	r2, r3
 8086aac:	dbca      	blt.n	8086a44 <BSP_LCD_FillPolygon+0x66>
		}
	}

	if(PointCount < 2)
 8086aae:	887b      	ldrh	r3, [r7, #2]
 8086ab0:	2b01      	cmp	r3, #1
 8086ab2:	d974      	bls.n	8086b9e <BSP_LCD_FillPolygon+0x1c0>
	{
		return;
	}

	X_center = (image_left + image_right)/2;
 8086ab4:	8c3a      	ldrh	r2, [r7, #32]
 8086ab6:	8bfb      	ldrh	r3, [r7, #30]
 8086ab8:	4413      	add	r3, r2
 8086aba:	2b00      	cmp	r3, #0
 8086abc:	da00      	bge.n	8086ac0 <BSP_LCD_FillPolygon+0xe2>
 8086abe:	3301      	adds	r3, #1
 8086ac0:	105b      	asrs	r3, r3, #1
 8086ac2:	82bb      	strh	r3, [r7, #20]
	Y_center = (image_bottom + image_top)/2;
 8086ac4:	8b7a      	ldrh	r2, [r7, #26]
 8086ac6:	8bbb      	ldrh	r3, [r7, #28]
 8086ac8:	4413      	add	r3, r2
 8086aca:	2b00      	cmp	r3, #0
 8086acc:	da00      	bge.n	8086ad0 <BSP_LCD_FillPolygon+0xf2>
 8086ace:	3301      	adds	r3, #1
 8086ad0:	105b      	asrs	r3, r3, #1
 8086ad2:	827b      	strh	r3, [r7, #18]

	X_first = Points->X;
 8086ad4:	687b      	ldr	r3, [r7, #4]
 8086ad6:	881b      	ldrh	r3, [r3, #0]
 8086ad8:	823b      	strh	r3, [r7, #16]
	Y_first = Points->Y;
 8086ada:	687b      	ldr	r3, [r7, #4]
 8086adc:	885b      	ldrh	r3, [r3, #2]
 8086ade:	81fb      	strh	r3, [r7, #14]

	while(--PointCount)
 8086ae0:	e032      	b.n	8086b48 <BSP_LCD_FillPolygon+0x16a>
	{
		X = Points->X;
 8086ae2:	687b      	ldr	r3, [r7, #4]
 8086ae4:	881b      	ldrh	r3, [r3, #0]
 8086ae6:	833b      	strh	r3, [r7, #24]
		Y = Points->Y;
 8086ae8:	687b      	ldr	r3, [r7, #4]
 8086aea:	885b      	ldrh	r3, [r3, #2]
 8086aec:	82fb      	strh	r3, [r7, #22]
		Points++;
 8086aee:	687b      	ldr	r3, [r7, #4]
 8086af0:	3304      	adds	r3, #4
 8086af2:	607b      	str	r3, [r7, #4]
		X2 = Points->X;
 8086af4:	687b      	ldr	r3, [r7, #4]
 8086af6:	881b      	ldrh	r3, [r3, #0]
 8086af8:	84fb      	strh	r3, [r7, #38]	; 0x26
		Y2 = Points->Y;
 8086afa:	687b      	ldr	r3, [r7, #4]
 8086afc:	885b      	ldrh	r3, [r3, #2]
 8086afe:	84bb      	strh	r3, [r7, #36]	; 0x24

		FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8086b00:	8b38      	ldrh	r0, [r7, #24]
 8086b02:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8086b04:	8abc      	ldrh	r4, [r7, #20]
 8086b06:	8afd      	ldrh	r5, [r7, #22]
 8086b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8086b0a:	8a7a      	ldrh	r2, [r7, #18]
 8086b0c:	9201      	str	r2, [sp, #4]
 8086b0e:	9300      	str	r3, [sp, #0]
 8086b10:	462b      	mov	r3, r5
 8086b12:	4622      	mov	r2, r4
 8086b14:	f000 faae 	bl	8087074 <FillTriangle>
		FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8086b18:	8b38      	ldrh	r0, [r7, #24]
 8086b1a:	8ab9      	ldrh	r1, [r7, #20]
 8086b1c:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8086b1e:	8afd      	ldrh	r5, [r7, #22]
 8086b20:	8a7b      	ldrh	r3, [r7, #18]
 8086b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8086b24:	9201      	str	r2, [sp, #4]
 8086b26:	9300      	str	r3, [sp, #0]
 8086b28:	462b      	mov	r3, r5
 8086b2a:	4622      	mov	r2, r4
 8086b2c:	f000 faa2 	bl	8087074 <FillTriangle>
		FillTriangle(X_center, X2, X, Y_center, Y2, Y);
 8086b30:	8ab8      	ldrh	r0, [r7, #20]
 8086b32:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8086b34:	8b3c      	ldrh	r4, [r7, #24]
 8086b36:	8a7d      	ldrh	r5, [r7, #18]
 8086b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8086b3a:	8afa      	ldrh	r2, [r7, #22]
 8086b3c:	9201      	str	r2, [sp, #4]
 8086b3e:	9300      	str	r3, [sp, #0]
 8086b40:	462b      	mov	r3, r5
 8086b42:	4622      	mov	r2, r4
 8086b44:	f000 fa96 	bl	8087074 <FillTriangle>
	while(--PointCount)
 8086b48:	887b      	ldrh	r3, [r7, #2]
 8086b4a:	3b01      	subs	r3, #1
 8086b4c:	807b      	strh	r3, [r7, #2]
 8086b4e:	887b      	ldrh	r3, [r7, #2]
 8086b50:	2b00      	cmp	r3, #0
 8086b52:	d1c6      	bne.n	8086ae2 <BSP_LCD_FillPolygon+0x104>
	}

	FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8086b54:	8a38      	ldrh	r0, [r7, #16]
 8086b56:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8086b58:	8abc      	ldrh	r4, [r7, #20]
 8086b5a:	89fd      	ldrh	r5, [r7, #14]
 8086b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8086b5e:	8a7a      	ldrh	r2, [r7, #18]
 8086b60:	9201      	str	r2, [sp, #4]
 8086b62:	9300      	str	r3, [sp, #0]
 8086b64:	462b      	mov	r3, r5
 8086b66:	4622      	mov	r2, r4
 8086b68:	f000 fa84 	bl	8087074 <FillTriangle>
	FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8086b6c:	8a38      	ldrh	r0, [r7, #16]
 8086b6e:	8ab9      	ldrh	r1, [r7, #20]
 8086b70:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8086b72:	89fd      	ldrh	r5, [r7, #14]
 8086b74:	8a7b      	ldrh	r3, [r7, #18]
 8086b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8086b78:	9201      	str	r2, [sp, #4]
 8086b7a:	9300      	str	r3, [sp, #0]
 8086b7c:	462b      	mov	r3, r5
 8086b7e:	4622      	mov	r2, r4
 8086b80:	f000 fa78 	bl	8087074 <FillTriangle>
	FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);
 8086b84:	8ab8      	ldrh	r0, [r7, #20]
 8086b86:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8086b88:	8a3c      	ldrh	r4, [r7, #16]
 8086b8a:	8a7d      	ldrh	r5, [r7, #18]
 8086b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8086b8e:	89fa      	ldrh	r2, [r7, #14]
 8086b90:	9201      	str	r2, [sp, #4]
 8086b92:	9300      	str	r3, [sp, #0]
 8086b94:	462b      	mov	r3, r5
 8086b96:	4622      	mov	r2, r4
 8086b98:	f000 fa6c 	bl	8087074 <FillTriangle>
 8086b9c:	e000      	b.n	8086ba0 <BSP_LCD_FillPolygon+0x1c2>
		return;
 8086b9e:	bf00      	nop
}
 8086ba0:	3728      	adds	r7, #40	; 0x28
 8086ba2:	46bd      	mov	sp, r7
 8086ba4:	bdb0      	pop	{r4, r5, r7, pc}

08086ba6 <BSP_LCD_FillEllipse>:
 * @param  XRadius: Ellipse X radius
 * @param  YRadius: Ellipse Y radius
 * @retval None
 */
void BSP_LCD_FillEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
 8086ba6:	b580      	push	{r7, lr}
 8086ba8:	b08c      	sub	sp, #48	; 0x30
 8086baa:	af00      	add	r7, sp, #0
 8086bac:	60f8      	str	r0, [r7, #12]
 8086bae:	60b9      	str	r1, [r7, #8]
 8086bb0:	607a      	str	r2, [r7, #4]
 8086bb2:	603b      	str	r3, [r7, #0]
	int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8086bb4:	2300      	movs	r3, #0
 8086bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8086bb8:	683b      	ldr	r3, [r7, #0]
 8086bba:	425b      	negs	r3, r3
 8086bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8086bbe:	687b      	ldr	r3, [r7, #4]
 8086bc0:	f1c3 0301 	rsb	r3, r3, #1
 8086bc4:	005b      	lsls	r3, r3, #1
 8086bc6:	627b      	str	r3, [r7, #36]	; 0x24
	float k = 0, rad1 = 0, rad2 = 0;
 8086bc8:	f04f 0300 	mov.w	r3, #0
 8086bcc:	61fb      	str	r3, [r7, #28]
 8086bce:	f04f 0300 	mov.w	r3, #0
 8086bd2:	61bb      	str	r3, [r7, #24]
 8086bd4:	f04f 0300 	mov.w	r3, #0
 8086bd8:	617b      	str	r3, [r7, #20]

	rad1 = XRadius;
 8086bda:	687b      	ldr	r3, [r7, #4]
 8086bdc:	ee07 3a90 	vmov	s15, r3
 8086be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8086be4:	edc7 7a06 	vstr	s15, [r7, #24]
	rad2 = YRadius;
 8086be8:	683b      	ldr	r3, [r7, #0]
 8086bea:	ee07 3a90 	vmov	s15, r3
 8086bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8086bf2:	edc7 7a05 	vstr	s15, [r7, #20]

	k = (float)(rad2/rad1);
 8086bf6:	edd7 6a05 	vldr	s13, [r7, #20]
 8086bfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8086bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086c02:	edc7 7a07 	vstr	s15, [r7, #28]

	do
	{
		BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos+y), (2*(uint16_t)(x/k) + 1));
 8086c06:	68fb      	ldr	r3, [r7, #12]
 8086c08:	b29a      	uxth	r2, r3
 8086c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086c0c:	ee07 3a90 	vmov	s15, r3
 8086c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8086c14:	ed97 7a07 	vldr	s14, [r7, #28]
 8086c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086c20:	ee17 3a90 	vmov	r3, s15
 8086c24:	b29b      	uxth	r3, r3
 8086c26:	1ad3      	subs	r3, r2, r3
 8086c28:	b298      	uxth	r0, r3
 8086c2a:	68bb      	ldr	r3, [r7, #8]
 8086c2c:	b29a      	uxth	r2, r3
 8086c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086c30:	b29b      	uxth	r3, r3
 8086c32:	4413      	add	r3, r2
 8086c34:	b299      	uxth	r1, r3
 8086c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086c38:	ee07 3a90 	vmov	s15, r3
 8086c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8086c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8086c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086c4c:	ee17 3a90 	vmov	r3, s15
 8086c50:	b29b      	uxth	r3, r3
 8086c52:	005b      	lsls	r3, r3, #1
 8086c54:	b29b      	uxth	r3, r3
 8086c56:	3301      	adds	r3, #1
 8086c58:	b29b      	uxth	r3, r3
 8086c5a:	461a      	mov	r2, r3
 8086c5c:	f7ff f882 	bl	8085d64 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos-y), (2*(uint16_t)(x/k) + 1));
 8086c60:	68fb      	ldr	r3, [r7, #12]
 8086c62:	b29a      	uxth	r2, r3
 8086c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086c66:	ee07 3a90 	vmov	s15, r3
 8086c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8086c6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8086c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086c7a:	ee17 3a90 	vmov	r3, s15
 8086c7e:	b29b      	uxth	r3, r3
 8086c80:	1ad3      	subs	r3, r2, r3
 8086c82:	b298      	uxth	r0, r3
 8086c84:	68bb      	ldr	r3, [r7, #8]
 8086c86:	b29a      	uxth	r2, r3
 8086c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086c8a:	b29b      	uxth	r3, r3
 8086c8c:	1ad3      	subs	r3, r2, r3
 8086c8e:	b299      	uxth	r1, r3
 8086c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086c92:	ee07 3a90 	vmov	s15, r3
 8086c96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8086c9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8086c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8086ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8086ca6:	ee17 3a90 	vmov	r3, s15
 8086caa:	b29b      	uxth	r3, r3
 8086cac:	005b      	lsls	r3, r3, #1
 8086cae:	b29b      	uxth	r3, r3
 8086cb0:	3301      	adds	r3, #1
 8086cb2:	b29b      	uxth	r3, r3
 8086cb4:	461a      	mov	r2, r3
 8086cb6:	f7ff f855 	bl	8085d64 <BSP_LCD_DrawHLine>

		e2 = err;
 8086cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086cbc:	623b      	str	r3, [r7, #32]
		if (e2 <= x)
 8086cbe:	6a3a      	ldr	r2, [r7, #32]
 8086cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086cc2:	429a      	cmp	r2, r3
 8086cc4:	dc13      	bgt.n	8086cee <BSP_LCD_FillEllipse+0x148>
		{
			err += ++x*2+1;
 8086cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086cc8:	3301      	adds	r3, #1
 8086cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8086ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086cce:	005b      	lsls	r3, r3, #1
 8086cd0:	3301      	adds	r3, #1
 8086cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8086cd4:	4413      	add	r3, r2
 8086cd6:	627b      	str	r3, [r7, #36]	; 0x24
			if (-y == x && e2 <= y) e2 = 0;
 8086cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086cda:	425b      	negs	r3, r3
 8086cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8086cde:	429a      	cmp	r2, r3
 8086ce0:	d105      	bne.n	8086cee <BSP_LCD_FillEllipse+0x148>
 8086ce2:	6a3a      	ldr	r2, [r7, #32]
 8086ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086ce6:	429a      	cmp	r2, r3
 8086ce8:	dc01      	bgt.n	8086cee <BSP_LCD_FillEllipse+0x148>
 8086cea:	2300      	movs	r3, #0
 8086cec:	623b      	str	r3, [r7, #32]
		}
		if (e2 > y) err += ++y*2+1;
 8086cee:	6a3a      	ldr	r2, [r7, #32]
 8086cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086cf2:	429a      	cmp	r2, r3
 8086cf4:	dd08      	ble.n	8086d08 <BSP_LCD_FillEllipse+0x162>
 8086cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086cf8:	3301      	adds	r3, #1
 8086cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8086cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086cfe:	005b      	lsls	r3, r3, #1
 8086d00:	3301      	adds	r3, #1
 8086d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8086d04:	4413      	add	r3, r2
 8086d06:	627b      	str	r3, [r7, #36]	; 0x24
	}
	while (y <= 0);
 8086d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086d0a:	2b00      	cmp	r3, #0
 8086d0c:	f77f af7b 	ble.w	8086c06 <BSP_LCD_FillEllipse+0x60>
}
 8086d10:	bf00      	nop
 8086d12:	3730      	adds	r7, #48	; 0x30
 8086d14:	46bd      	mov	sp, r7
 8086d16:	bd80      	pop	{r7, pc}

08086d18 <BSP_LCD_MspInit>:
 * @param  hltdc: LTDC handle
 * @param  Params
 * @retval None
 */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8086d18:	b580      	push	{r7, lr}
 8086d1a:	b090      	sub	sp, #64	; 0x40
 8086d1c:	af00      	add	r7, sp, #0
 8086d1e:	6078      	str	r0, [r7, #4]
 8086d20:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable the LTDC and DMA2D clocks */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8086d22:	4b64      	ldr	r3, [pc, #400]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8086d26:	4a63      	ldr	r2, [pc, #396]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8086d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8086d2e:	4b61      	ldr	r3, [pc, #388]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8086d32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8086d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8086d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8086d3a:	4b5e      	ldr	r3, [pc, #376]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d3e:	4a5d      	ldr	r2, [pc, #372]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8086d44:	6313      	str	r3, [r2, #48]	; 0x30
 8086d46:	4b5b      	ldr	r3, [pc, #364]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8086d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8086d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8086d52:	4b58      	ldr	r3, [pc, #352]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d56:	4a57      	ldr	r2, [pc, #348]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d58:	f043 0310 	orr.w	r3, r3, #16
 8086d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8086d5e:	4b55      	ldr	r3, [pc, #340]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d62:	f003 0310 	and.w	r3, r3, #16
 8086d66:	623b      	str	r3, [r7, #32]
 8086d68:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8086d6a:	4b52      	ldr	r3, [pc, #328]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d6e:	4a51      	ldr	r2, [pc, #324]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8086d74:	6313      	str	r3, [r2, #48]	; 0x30
 8086d76:	4b4f      	ldr	r3, [pc, #316]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086d7e:	61fb      	str	r3, [r7, #28]
 8086d80:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8086d82:	4b4c      	ldr	r3, [pc, #304]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d86:	4a4b      	ldr	r2, [pc, #300]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8086d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8086d8e:	4b49      	ldr	r3, [pc, #292]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8086d96:	61bb      	str	r3, [r7, #24]
 8086d98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8086d9a:	4b46      	ldr	r3, [pc, #280]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086d9e:	4a45      	ldr	r2, [pc, #276]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8086da4:	6313      	str	r3, [r2, #48]	; 0x30
 8086da6:	4b43      	ldr	r3, [pc, #268]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8086dae:	617b      	str	r3, [r7, #20]
 8086db0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8086db2:	4b40      	ldr	r3, [pc, #256]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086db6:	4a3f      	ldr	r2, [pc, #252]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8086dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8086dbe:	4b3d      	ldr	r3, [pc, #244]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8086dc6:	613b      	str	r3, [r7, #16]
 8086dc8:	693b      	ldr	r3, [r7, #16]
	LCD_DISP_GPIO_CLK_ENABLE();
 8086dca:	4b3a      	ldr	r3, [pc, #232]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086dce:	4a39      	ldr	r2, [pc, #228]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8086dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8086dd6:	4b37      	ldr	r3, [pc, #220]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8086dde:	60fb      	str	r3, [r7, #12]
 8086de0:	68fb      	ldr	r3, [r7, #12]
	LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8086de2:	4b34      	ldr	r3, [pc, #208]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086de6:	4a33      	ldr	r2, [pc, #204]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8086dec:	6313      	str	r3, [r2, #48]	; 0x30
 8086dee:	4b31      	ldr	r3, [pc, #196]	; (8086eb4 <BSP_LCD_MspInit+0x19c>)
 8086df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8086df6:	60bb      	str	r3, [r7, #8]
 8086df8:	68bb      	ldr	r3, [r7, #8]

	/*** LTDC Pins configuration ***/
	/* GPIOE configuration */
	gpio_init_structure.Pin       = GPIO_PIN_4;
 8086dfa:	2310      	movs	r3, #16
 8086dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8086dfe:	2302      	movs	r3, #2
 8086e00:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Pull      = GPIO_NOPULL;
 8086e02:	2300      	movs	r3, #0
 8086e04:	637b      	str	r3, [r7, #52]	; 0x34
	gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8086e06:	2302      	movs	r3, #2
 8086e08:	63bb      	str	r3, [r7, #56]	; 0x38
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8086e0a:	230e      	movs	r3, #14
 8086e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8086e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e12:	4619      	mov	r1, r3
 8086e14:	4828      	ldr	r0, [pc, #160]	; (8086eb8 <BSP_LCD_MspInit+0x1a0>)
 8086e16:	f003 f9d7 	bl	808a1c8 <HAL_GPIO_Init>

	/* GPIOG configuration */
	gpio_init_structure.Pin       = GPIO_PIN_12;
 8086e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8086e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8086e20:	2302      	movs	r3, #2
 8086e22:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8086e24:	2309      	movs	r3, #9
 8086e26:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8086e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e2c:	4619      	mov	r1, r3
 8086e2e:	4823      	ldr	r0, [pc, #140]	; (8086ebc <BSP_LCD_MspInit+0x1a4>)
 8086e30:	f003 f9ca 	bl	808a1c8 <HAL_GPIO_Init>

	/* GPIOI LTDC alternate configuration */
	gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8086e34:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8086e38:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8086e3a:	2302      	movs	r3, #2
 8086e3c:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8086e3e:	230e      	movs	r3, #14
 8086e40:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8086e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e46:	4619      	mov	r1, r3
 8086e48:	481d      	ldr	r0, [pc, #116]	; (8086ec0 <BSP_LCD_MspInit+0x1a8>)
 8086e4a:	f003 f9bd 	bl	808a1c8 <HAL_GPIO_Init>

	/* GPIOJ configuration */
	gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8086e4e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8086e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
			GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8086e54:	2302      	movs	r3, #2
 8086e56:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8086e58:	230e      	movs	r3, #14
 8086e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8086e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e60:	4619      	mov	r1, r3
 8086e62:	4818      	ldr	r0, [pc, #96]	; (8086ec4 <BSP_LCD_MspInit+0x1ac>)
 8086e64:	f003 f9b0 	bl	808a1c8 <HAL_GPIO_Init>

	/* GPIOK configuration */
	gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8086e68:	23f7      	movs	r3, #247	; 0xf7
 8086e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8086e6c:	2302      	movs	r3, #2
 8086e6e:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8086e70:	230e      	movs	r3, #14
 8086e72:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8086e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e78:	4619      	mov	r1, r3
 8086e7a:	4813      	ldr	r0, [pc, #76]	; (8086ec8 <BSP_LCD_MspInit+0x1b0>)
 8086e7c:	f003 f9a4 	bl	808a1c8 <HAL_GPIO_Init>

	/* LCD_DISP GPIO configuration */
	gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8086e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8086e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8086e86:	2301      	movs	r3, #1
 8086e88:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8086e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086e8e:	4619      	mov	r1, r3
 8086e90:	480b      	ldr	r0, [pc, #44]	; (8086ec0 <BSP_LCD_MspInit+0x1a8>)
 8086e92:	f003 f999 	bl	808a1c8 <HAL_GPIO_Init>

	/* LCD_BL_CTRL GPIO configuration */
	gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8086e96:	2308      	movs	r3, #8
 8086e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8086e9a:	2301      	movs	r3, #1
 8086e9c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8086e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8086ea2:	4619      	mov	r1, r3
 8086ea4:	4808      	ldr	r0, [pc, #32]	; (8086ec8 <BSP_LCD_MspInit+0x1b0>)
 8086ea6:	f003 f98f 	bl	808a1c8 <HAL_GPIO_Init>
}
 8086eaa:	bf00      	nop
 8086eac:	3740      	adds	r7, #64	; 0x40
 8086eae:	46bd      	mov	sp, r7
 8086eb0:	bd80      	pop	{r7, pc}
 8086eb2:	bf00      	nop
 8086eb4:	40023800 	.word	0x40023800
 8086eb8:	40021000 	.word	0x40021000
 8086ebc:	40021800 	.word	0x40021800
 8086ec0:	40022000 	.word	0x40022000
 8086ec4:	40022400 	.word	0x40022400
 8086ec8:	40022800 	.word	0x40022800

08086ecc <BSP_LCD_ClockConfig>:
 * @note   This API is called by BSP_LCD_Init()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8086ecc:	b580      	push	{r7, lr}
 8086ece:	b082      	sub	sp, #8
 8086ed0:	af00      	add	r7, sp, #0
 8086ed2:	6078      	str	r0, [r7, #4]
 8086ed4:	6039      	str	r1, [r7, #0]
	/* RK043FN48H LCD clock configuration */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8086ed6:	4b0a      	ldr	r3, [pc, #40]	; (8086f00 <BSP_LCD_ClockConfig+0x34>)
 8086ed8:	2208      	movs	r2, #8
 8086eda:	601a      	str	r2, [r3, #0]
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8086edc:	4b08      	ldr	r3, [pc, #32]	; (8086f00 <BSP_LCD_ClockConfig+0x34>)
 8086ede:	22c0      	movs	r2, #192	; 0xc0
 8086ee0:	615a      	str	r2, [r3, #20]
	periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8086ee2:	4b07      	ldr	r3, [pc, #28]	; (8086f00 <BSP_LCD_ClockConfig+0x34>)
 8086ee4:	2205      	movs	r2, #5
 8086ee6:	61da      	str	r2, [r3, #28]
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8086ee8:	4b05      	ldr	r3, [pc, #20]	; (8086f00 <BSP_LCD_ClockConfig+0x34>)
 8086eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8086eee:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8086ef0:	4803      	ldr	r0, [pc, #12]	; (8086f00 <BSP_LCD_ClockConfig+0x34>)
 8086ef2:	f005 ff87 	bl	808ce04 <HAL_RCCEx_PeriphCLKConfig>
}
 8086ef6:	bf00      	nop
 8086ef8:	3708      	adds	r7, #8
 8086efa:	46bd      	mov	sp, r7
 8086efc:	bd80      	pop	{r7, pc}
 8086efe:	bf00      	nop
 8086f00:	2000b84c 	.word	0x2000b84c

08086f04 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8086f04:	b580      	push	{r7, lr}
 8086f06:	b088      	sub	sp, #32
 8086f08:	af00      	add	r7, sp, #0
 8086f0a:	4603      	mov	r3, r0
 8086f0c:	603a      	str	r2, [r7, #0]
 8086f0e:	80fb      	strh	r3, [r7, #6]
 8086f10:	460b      	mov	r3, r1
 8086f12:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8086f14:	2300      	movs	r3, #0
 8086f16:	61fb      	str	r3, [r7, #28]
 8086f18:	2300      	movs	r3, #0
 8086f1a:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = DrawProp[ActiveLayer].pFont->Height;
 8086f1c:	4b53      	ldr	r3, [pc, #332]	; (808706c <DrawChar+0x168>)
 8086f1e:	681a      	ldr	r2, [r3, #0]
 8086f20:	4953      	ldr	r1, [pc, #332]	; (8087070 <DrawChar+0x16c>)
 8086f22:	4613      	mov	r3, r2
 8086f24:	005b      	lsls	r3, r3, #1
 8086f26:	4413      	add	r3, r2
 8086f28:	009b      	lsls	r3, r3, #2
 8086f2a:	440b      	add	r3, r1
 8086f2c:	3308      	adds	r3, #8
 8086f2e:	681b      	ldr	r3, [r3, #0]
 8086f30:	88db      	ldrh	r3, [r3, #6]
 8086f32:	827b      	strh	r3, [r7, #18]
	width  = DrawProp[ActiveLayer].pFont->Width;
 8086f34:	4b4d      	ldr	r3, [pc, #308]	; (808706c <DrawChar+0x168>)
 8086f36:	681a      	ldr	r2, [r3, #0]
 8086f38:	494d      	ldr	r1, [pc, #308]	; (8087070 <DrawChar+0x16c>)
 8086f3a:	4613      	mov	r3, r2
 8086f3c:	005b      	lsls	r3, r3, #1
 8086f3e:	4413      	add	r3, r2
 8086f40:	009b      	lsls	r3, r3, #2
 8086f42:	440b      	add	r3, r1
 8086f44:	3308      	adds	r3, #8
 8086f46:	681b      	ldr	r3, [r3, #0]
 8086f48:	889b      	ldrh	r3, [r3, #4]
 8086f4a:	823b      	strh	r3, [r7, #16]

	offset =  8 *((width + 7)/8) -  width ;
 8086f4c:	8a3b      	ldrh	r3, [r7, #16]
 8086f4e:	3307      	adds	r3, #7
 8086f50:	2b00      	cmp	r3, #0
 8086f52:	da00      	bge.n	8086f56 <DrawChar+0x52>
 8086f54:	3307      	adds	r3, #7
 8086f56:	10db      	asrs	r3, r3, #3
 8086f58:	b2db      	uxtb	r3, r3
 8086f5a:	00db      	lsls	r3, r3, #3
 8086f5c:	b2da      	uxtb	r2, r3
 8086f5e:	8a3b      	ldrh	r3, [r7, #16]
 8086f60:	b2db      	uxtb	r3, r3
 8086f62:	1ad3      	subs	r3, r2, r3
 8086f64:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < height; i++)
 8086f66:	2300      	movs	r3, #0
 8086f68:	61fb      	str	r3, [r7, #28]
 8086f6a:	e076      	b.n	808705a <DrawChar+0x156>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8086f6c:	8a3b      	ldrh	r3, [r7, #16]
 8086f6e:	3307      	adds	r3, #7
 8086f70:	2b00      	cmp	r3, #0
 8086f72:	da00      	bge.n	8086f76 <DrawChar+0x72>
 8086f74:	3307      	adds	r3, #7
 8086f76:	10db      	asrs	r3, r3, #3
 8086f78:	461a      	mov	r2, r3
 8086f7a:	69fb      	ldr	r3, [r7, #28]
 8086f7c:	fb03 f302 	mul.w	r3, r3, r2
 8086f80:	683a      	ldr	r2, [r7, #0]
 8086f82:	4413      	add	r3, r2
 8086f84:	60bb      	str	r3, [r7, #8]

		switch(((width + 7)/8))
 8086f86:	8a3b      	ldrh	r3, [r7, #16]
 8086f88:	3307      	adds	r3, #7
 8086f8a:	2b00      	cmp	r3, #0
 8086f8c:	da00      	bge.n	8086f90 <DrawChar+0x8c>
 8086f8e:	3307      	adds	r3, #7
 8086f90:	10db      	asrs	r3, r3, #3
 8086f92:	2b01      	cmp	r3, #1
 8086f94:	d002      	beq.n	8086f9c <DrawChar+0x98>
 8086f96:	2b02      	cmp	r3, #2
 8086f98:	d004      	beq.n	8086fa4 <DrawChar+0xa0>
 8086f9a:	e00c      	b.n	8086fb6 <DrawChar+0xb2>
		{

		case 1:
			line =  pchar[0];
 8086f9c:	68bb      	ldr	r3, [r7, #8]
 8086f9e:	781b      	ldrb	r3, [r3, #0]
 8086fa0:	617b      	str	r3, [r7, #20]
			break;
 8086fa2:	e016      	b.n	8086fd2 <DrawChar+0xce>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8086fa4:	68bb      	ldr	r3, [r7, #8]
 8086fa6:	781b      	ldrb	r3, [r3, #0]
 8086fa8:	021b      	lsls	r3, r3, #8
 8086faa:	68ba      	ldr	r2, [r7, #8]
 8086fac:	3201      	adds	r2, #1
 8086fae:	7812      	ldrb	r2, [r2, #0]
 8086fb0:	4313      	orrs	r3, r2
 8086fb2:	617b      	str	r3, [r7, #20]
			break;
 8086fb4:	e00d      	b.n	8086fd2 <DrawChar+0xce>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8086fb6:	68bb      	ldr	r3, [r7, #8]
 8086fb8:	781b      	ldrb	r3, [r3, #0]
 8086fba:	041a      	lsls	r2, r3, #16
 8086fbc:	68bb      	ldr	r3, [r7, #8]
 8086fbe:	3301      	adds	r3, #1
 8086fc0:	781b      	ldrb	r3, [r3, #0]
 8086fc2:	021b      	lsls	r3, r3, #8
 8086fc4:	4313      	orrs	r3, r2
 8086fc6:	68ba      	ldr	r2, [r7, #8]
 8086fc8:	3202      	adds	r2, #2
 8086fca:	7812      	ldrb	r2, [r2, #0]
 8086fcc:	4313      	orrs	r3, r2
 8086fce:	617b      	str	r3, [r7, #20]
			break;
 8086fd0:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8086fd2:	2300      	movs	r3, #0
 8086fd4:	61bb      	str	r3, [r7, #24]
 8086fd6:	e036      	b.n	8087046 <DrawChar+0x142>
		{
			if(line & (1 << (width- j + offset- 1)))
 8086fd8:	8a3a      	ldrh	r2, [r7, #16]
 8086fda:	69bb      	ldr	r3, [r7, #24]
 8086fdc:	1ad2      	subs	r2, r2, r3
 8086fde:	7bfb      	ldrb	r3, [r7, #15]
 8086fe0:	4413      	add	r3, r2
 8086fe2:	3b01      	subs	r3, #1
 8086fe4:	2201      	movs	r2, #1
 8086fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8086fea:	461a      	mov	r2, r3
 8086fec:	697b      	ldr	r3, [r7, #20]
 8086fee:	4013      	ands	r3, r2
 8086ff0:	2b00      	cmp	r3, #0
 8086ff2:	d012      	beq.n	808701a <DrawChar+0x116>
			{
				BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8086ff4:	69bb      	ldr	r3, [r7, #24]
 8086ff6:	b29a      	uxth	r2, r3
 8086ff8:	88fb      	ldrh	r3, [r7, #6]
 8086ffa:	4413      	add	r3, r2
 8086ffc:	b298      	uxth	r0, r3
 8086ffe:	4b1b      	ldr	r3, [pc, #108]	; (808706c <DrawChar+0x168>)
 8087000:	681a      	ldr	r2, [r3, #0]
 8087002:	491b      	ldr	r1, [pc, #108]	; (8087070 <DrawChar+0x16c>)
 8087004:	4613      	mov	r3, r2
 8087006:	005b      	lsls	r3, r3, #1
 8087008:	4413      	add	r3, r2
 808700a:	009b      	lsls	r3, r3, #2
 808700c:	440b      	add	r3, r1
 808700e:	681a      	ldr	r2, [r3, #0]
 8087010:	88bb      	ldrh	r3, [r7, #4]
 8087012:	4619      	mov	r1, r3
 8087014:	f7ff fab2 	bl	808657c <BSP_LCD_DrawPixel>
 8087018:	e012      	b.n	8087040 <DrawChar+0x13c>
			}
			else
			{
				BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 808701a:	69bb      	ldr	r3, [r7, #24]
 808701c:	b29a      	uxth	r2, r3
 808701e:	88fb      	ldrh	r3, [r7, #6]
 8087020:	4413      	add	r3, r2
 8087022:	b298      	uxth	r0, r3
 8087024:	4b11      	ldr	r3, [pc, #68]	; (808706c <DrawChar+0x168>)
 8087026:	681a      	ldr	r2, [r3, #0]
 8087028:	4911      	ldr	r1, [pc, #68]	; (8087070 <DrawChar+0x16c>)
 808702a:	4613      	mov	r3, r2
 808702c:	005b      	lsls	r3, r3, #1
 808702e:	4413      	add	r3, r2
 8087030:	009b      	lsls	r3, r3, #2
 8087032:	440b      	add	r3, r1
 8087034:	3304      	adds	r3, #4
 8087036:	681a      	ldr	r2, [r3, #0]
 8087038:	88bb      	ldrh	r3, [r7, #4]
 808703a:	4619      	mov	r1, r3
 808703c:	f7ff fa9e 	bl	808657c <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++)
 8087040:	69bb      	ldr	r3, [r7, #24]
 8087042:	3301      	adds	r3, #1
 8087044:	61bb      	str	r3, [r7, #24]
 8087046:	8a3b      	ldrh	r3, [r7, #16]
 8087048:	69ba      	ldr	r2, [r7, #24]
 808704a:	429a      	cmp	r2, r3
 808704c:	d3c4      	bcc.n	8086fd8 <DrawChar+0xd4>
			}
		}
		Ypos++;
 808704e:	88bb      	ldrh	r3, [r7, #4]
 8087050:	3301      	adds	r3, #1
 8087052:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8087054:	69fb      	ldr	r3, [r7, #28]
 8087056:	3301      	adds	r3, #1
 8087058:	61fb      	str	r3, [r7, #28]
 808705a:	8a7b      	ldrh	r3, [r7, #18]
 808705c:	69fa      	ldr	r2, [r7, #28]
 808705e:	429a      	cmp	r2, r3
 8087060:	d384      	bcc.n	8086f6c <DrawChar+0x68>
	}
}
 8087062:	bf00      	nop
 8087064:	3720      	adds	r7, #32
 8087066:	46bd      	mov	sp, r7
 8087068:	bd80      	pop	{r7, pc}
 808706a:	bf00      	nop
 808706c:	2000b830 	.word	0x2000b830
 8087070:	2000b834 	.word	0x2000b834

08087074 <FillTriangle>:
 * @param  x3: Point 3 X position
 * @param  y3: Point 3 Y position
 * @retval None
 */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8087074:	b590      	push	{r4, r7, lr}
 8087076:	b08b      	sub	sp, #44	; 0x2c
 8087078:	af00      	add	r7, sp, #0
 808707a:	4604      	mov	r4, r0
 808707c:	4608      	mov	r0, r1
 808707e:	4611      	mov	r1, r2
 8087080:	461a      	mov	r2, r3
 8087082:	4623      	mov	r3, r4
 8087084:	80fb      	strh	r3, [r7, #6]
 8087086:	4603      	mov	r3, r0
 8087088:	80bb      	strh	r3, [r7, #4]
 808708a:	460b      	mov	r3, r1
 808708c:	807b      	strh	r3, [r7, #2]
 808708e:	4613      	mov	r3, r2
 8087090:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8087092:	2300      	movs	r3, #0
 8087094:	823b      	strh	r3, [r7, #16]
 8087096:	2300      	movs	r3, #0
 8087098:	81fb      	strh	r3, [r7, #14]
 808709a:	2300      	movs	r3, #0
 808709c:	84fb      	strh	r3, [r7, #38]	; 0x26
 808709e:	2300      	movs	r3, #0
 80870a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80870a2:	2300      	movs	r3, #0
 80870a4:	847b      	strh	r3, [r7, #34]	; 0x22
 80870a6:	2300      	movs	r3, #0
 80870a8:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80870aa:	2300      	movs	r3, #0
 80870ac:	83fb      	strh	r3, [r7, #30]
 80870ae:	2300      	movs	r3, #0
 80870b0:	83bb      	strh	r3, [r7, #28]
 80870b2:	2300      	movs	r3, #0
 80870b4:	837b      	strh	r3, [r7, #26]
 80870b6:	2300      	movs	r3, #0
 80870b8:	833b      	strh	r3, [r7, #24]
 80870ba:	2300      	movs	r3, #0
 80870bc:	82fb      	strh	r3, [r7, #22]
 80870be:	2300      	movs	r3, #0
 80870c0:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80870c2:	2300      	movs	r3, #0
 80870c4:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);        /* The difference between the x's */
 80870c6:	88ba      	ldrh	r2, [r7, #4]
 80870c8:	88fb      	ldrh	r3, [r7, #6]
 80870ca:	1ad3      	subs	r3, r2, r3
 80870cc:	2b00      	cmp	r3, #0
 80870ce:	bfb8      	it	lt
 80870d0:	425b      	neglt	r3, r3
 80870d2:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);        /* The difference between the y's */
 80870d4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80870d6:	883b      	ldrh	r3, [r7, #0]
 80870d8:	1ad3      	subs	r3, r2, r3
 80870da:	2b00      	cmp	r3, #0
 80870dc:	bfb8      	it	lt
 80870de:	425b      	neglt	r3, r3
 80870e0:	81fb      	strh	r3, [r7, #14]
	x = x1;                       /* Start x off at the first pixel */
 80870e2:	88fb      	ldrh	r3, [r7, #6]
 80870e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;                       /* Start y off at the first pixel */
 80870e6:	883b      	ldrh	r3, [r7, #0]
 80870e8:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)                 /* The x-values are increasing */
 80870ea:	88ba      	ldrh	r2, [r7, #4]
 80870ec:	88fb      	ldrh	r3, [r7, #6]
 80870ee:	429a      	cmp	r2, r3
 80870f0:	d304      	bcc.n	80870fc <FillTriangle+0x88>
	{
		xinc1 = 1;
 80870f2:	2301      	movs	r3, #1
 80870f4:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80870f6:	2301      	movs	r3, #1
 80870f8:	843b      	strh	r3, [r7, #32]
 80870fa:	e005      	b.n	8087108 <FillTriangle+0x94>
	}
	else                          /* The x-values are decreasing */
	{
		xinc1 = -1;
 80870fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8087100:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8087102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8087106:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)                 /* The y-values are increasing */
 8087108:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 808710a:	883b      	ldrh	r3, [r7, #0]
 808710c:	429a      	cmp	r2, r3
 808710e:	d304      	bcc.n	808711a <FillTriangle+0xa6>
	{
		yinc1 = 1;
 8087110:	2301      	movs	r3, #1
 8087112:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8087114:	2301      	movs	r3, #1
 8087116:	83bb      	strh	r3, [r7, #28]
 8087118:	e005      	b.n	8087126 <FillTriangle+0xb2>
	}
	else                          /* The y-values are decreasing */
	{
		yinc1 = -1;
 808711a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808711e:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8087120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8087124:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8087126:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 808712a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 808712e:	429a      	cmp	r2, r3
 8087130:	db11      	blt.n	8087156 <FillTriangle+0xe2>
	{
		xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8087132:	2300      	movs	r3, #0
 8087134:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;                  /* Don't change the y for every iteration */
 8087136:	2300      	movs	r3, #0
 8087138:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 808713a:	8a3b      	ldrh	r3, [r7, #16]
 808713c:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 808713e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8087142:	2b00      	cmp	r3, #0
 8087144:	da00      	bge.n	8087148 <FillTriangle+0xd4>
 8087146:	3301      	adds	r3, #1
 8087148:	105b      	asrs	r3, r3, #1
 808714a:	833b      	strh	r3, [r7, #24]
		num_add = deltay;
 808714c:	89fb      	ldrh	r3, [r7, #14]
 808714e:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltax;         /* There are more x-values than y-values */
 8087150:	8a3b      	ldrh	r3, [r7, #16]
 8087152:	82bb      	strh	r3, [r7, #20]
 8087154:	e010      	b.n	8087178 <FillTriangle+0x104>
	}
	else                          /* There is at least one y-value for every x-value */
	{
		xinc2 = 0;                  /* Don't change the x for every iteration */
 8087156:	2300      	movs	r3, #0
 8087158:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 808715a:	2300      	movs	r3, #0
 808715c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 808715e:	89fb      	ldrh	r3, [r7, #14]
 8087160:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8087162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8087166:	2b00      	cmp	r3, #0
 8087168:	da00      	bge.n	808716c <FillTriangle+0xf8>
 808716a:	3301      	adds	r3, #1
 808716c:	105b      	asrs	r3, r3, #1
 808716e:	833b      	strh	r3, [r7, #24]
		num_add = deltax;
 8087170:	8a3b      	ldrh	r3, [r7, #16]
 8087172:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltay;         /* There are more y-values than x-values */
 8087174:	89fb      	ldrh	r3, [r7, #14]
 8087176:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8087178:	2300      	movs	r3, #0
 808717a:	827b      	strh	r3, [r7, #18]
 808717c:	e02f      	b.n	80871de <FillTriangle+0x16a>
	{
		BSP_LCD_DrawLine(x, y, x3, y3);
 808717e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8087180:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8087182:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8087184:	887a      	ldrh	r2, [r7, #2]
 8087186:	f7fe fec5 	bl	8085f14 <BSP_LCD_DrawLine>

		num += num_add;              /* Increase the numerator by the top of the fraction */
 808718a:	8b3a      	ldrh	r2, [r7, #24]
 808718c:	8afb      	ldrh	r3, [r7, #22]
 808718e:	4413      	add	r3, r2
 8087190:	b29b      	uxth	r3, r3
 8087192:	833b      	strh	r3, [r7, #24]
		if (num >= den)             /* Check if numerator >= denominator */
 8087194:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8087198:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 808719c:	429a      	cmp	r2, r3
 808719e:	db0e      	blt.n	80871be <FillTriangle+0x14a>
		{
			num -= den;               /* Calculate the new numerator value */
 80871a0:	8b3a      	ldrh	r2, [r7, #24]
 80871a2:	8b7b      	ldrh	r3, [r7, #26]
 80871a4:	1ad3      	subs	r3, r2, r3
 80871a6:	b29b      	uxth	r3, r3
 80871a8:	833b      	strh	r3, [r7, #24]
			x += xinc1;               /* Change the x as appropriate */
 80871aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80871ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80871ae:	4413      	add	r3, r2
 80871b0:	b29b      	uxth	r3, r3
 80871b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;               /* Change the y as appropriate */
 80871b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80871b6:	8bfb      	ldrh	r3, [r7, #30]
 80871b8:	4413      	add	r3, r2
 80871ba:	b29b      	uxth	r3, r3
 80871bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;                 /* Change the x as appropriate */
 80871be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80871c0:	8c3b      	ldrh	r3, [r7, #32]
 80871c2:	4413      	add	r3, r2
 80871c4:	b29b      	uxth	r3, r3
 80871c6:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;                 /* Change the y as appropriate */
 80871c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80871ca:	8bbb      	ldrh	r3, [r7, #28]
 80871cc:	4413      	add	r3, r2
 80871ce:	b29b      	uxth	r3, r3
 80871d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80871d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80871d6:	b29b      	uxth	r3, r3
 80871d8:	3301      	adds	r3, #1
 80871da:	b29b      	uxth	r3, r3
 80871dc:	827b      	strh	r3, [r7, #18]
 80871de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80871e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80871e6:	429a      	cmp	r2, r3
 80871e8:	ddc9      	ble.n	808717e <FillTriangle+0x10a>
	}
}
 80871ea:	bf00      	nop
 80871ec:	372c      	adds	r7, #44	; 0x2c
 80871ee:	46bd      	mov	sp, r7
 80871f0:	bd90      	pop	{r4, r7, pc}
	...

080871f4 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  ColorIndex: Color index
 * @retval None
 */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80871f4:	b580      	push	{r7, lr}
 80871f6:	b086      	sub	sp, #24
 80871f8:	af02      	add	r7, sp, #8
 80871fa:	60f8      	str	r0, [r7, #12]
 80871fc:	60b9      	str	r1, [r7, #8]
 80871fe:	607a      	str	r2, [r7, #4]
 8087200:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8087202:	4b1e      	ldr	r3, [pc, #120]	; (808727c <LL_FillBuffer+0x88>)
 8087204:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8087208:	605a      	str	r2, [r3, #4]
	if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 808720a:	4b1d      	ldr	r3, [pc, #116]	; (8087280 <LL_FillBuffer+0x8c>)
 808720c:	681b      	ldr	r3, [r3, #0]
 808720e:	4a1d      	ldr	r2, [pc, #116]	; (8087284 <LL_FillBuffer+0x90>)
 8087210:	2134      	movs	r1, #52	; 0x34
 8087212:	fb01 f303 	mul.w	r3, r1, r3
 8087216:	4413      	add	r3, r2
 8087218:	3348      	adds	r3, #72	; 0x48
 808721a:	681b      	ldr	r3, [r3, #0]
 808721c:	2b02      	cmp	r3, #2
 808721e:	d103      	bne.n	8087228 <LL_FillBuffer+0x34>
	{ /* RGB565 format */
		hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8087220:	4b16      	ldr	r3, [pc, #88]	; (808727c <LL_FillBuffer+0x88>)
 8087222:	2202      	movs	r2, #2
 8087224:	609a      	str	r2, [r3, #8]
 8087226:	e002      	b.n	808722e <LL_FillBuffer+0x3a>
	}
	else
	{ /* ARGB8888 format */
		hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8087228:	4b14      	ldr	r3, [pc, #80]	; (808727c <LL_FillBuffer+0x88>)
 808722a:	2200      	movs	r2, #0
 808722c:	609a      	str	r2, [r3, #8]
	}
	hDma2dHandler.Init.OutputOffset = OffLine;
 808722e:	4a13      	ldr	r2, [pc, #76]	; (808727c <LL_FillBuffer+0x88>)
 8087230:	69bb      	ldr	r3, [r7, #24]
 8087232:	60d3      	str	r3, [r2, #12]

	hDma2dHandler.Instance = DMA2D;
 8087234:	4b11      	ldr	r3, [pc, #68]	; (808727c <LL_FillBuffer+0x88>)
 8087236:	4a14      	ldr	r2, [pc, #80]	; (8087288 <LL_FillBuffer+0x94>)
 8087238:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 808723a:	4810      	ldr	r0, [pc, #64]	; (808727c <LL_FillBuffer+0x88>)
 808723c:	f002 fd2a 	bl	8089c94 <HAL_DMA2D_Init>
 8087240:	4603      	mov	r3, r0
 8087242:	2b00      	cmp	r3, #0
 8087244:	d115      	bne.n	8087272 <LL_FillBuffer+0x7e>
	{
		if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 8087246:	68f9      	ldr	r1, [r7, #12]
 8087248:	480c      	ldr	r0, [pc, #48]	; (808727c <LL_FillBuffer+0x88>)
 808724a:	f002 fe81 	bl	8089f50 <HAL_DMA2D_ConfigLayer>
 808724e:	4603      	mov	r3, r0
 8087250:	2b00      	cmp	r3, #0
 8087252:	d10e      	bne.n	8087272 <LL_FillBuffer+0x7e>
		{
			if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8087254:	68ba      	ldr	r2, [r7, #8]
 8087256:	683b      	ldr	r3, [r7, #0]
 8087258:	9300      	str	r3, [sp, #0]
 808725a:	687b      	ldr	r3, [r7, #4]
 808725c:	69f9      	ldr	r1, [r7, #28]
 808725e:	4807      	ldr	r0, [pc, #28]	; (808727c <LL_FillBuffer+0x88>)
 8087260:	f002 fd62 	bl	8089d28 <HAL_DMA2D_Start>
 8087264:	4603      	mov	r3, r0
 8087266:	2b00      	cmp	r3, #0
 8087268:	d103      	bne.n	8087272 <LL_FillBuffer+0x7e>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 808726a:	210a      	movs	r1, #10
 808726c:	4803      	ldr	r0, [pc, #12]	; (808727c <LL_FillBuffer+0x88>)
 808726e:	f002 fd86 	bl	8089d7e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8087272:	bf00      	nop
 8087274:	3710      	adds	r7, #16
 8087276:	46bd      	mov	sp, r7
 8087278:	bd80      	pop	{r7, pc}
 808727a:	bf00      	nop
 808727c:	2000b7f0 	.word	0x2000b7f0
 8087280:	2000b830 	.word	0x2000b830
 8087284:	2002d8a4 	.word	0x2002d8a4
 8087288:	4002b000 	.word	0x4002b000

0808728c <LL_ConvertLineToARGB8888>:
 * @param  xSize: Buffer width
 * @param  ColorMode: Input color mode
 * @retval None
 */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 808728c:	b580      	push	{r7, lr}
 808728e:	b086      	sub	sp, #24
 8087290:	af02      	add	r7, sp, #8
 8087292:	60f8      	str	r0, [r7, #12]
 8087294:	60b9      	str	r1, [r7, #8]
 8087296:	607a      	str	r2, [r7, #4]
 8087298:	603b      	str	r3, [r7, #0]
	/* Configure the DMA2D Mode, Color Mode and output offset */
	hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 808729a:	4b1c      	ldr	r3, [pc, #112]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 808729c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80872a0:	605a      	str	r2, [r3, #4]
	hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80872a2:	4b1a      	ldr	r3, [pc, #104]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872a4:	2200      	movs	r2, #0
 80872a6:	609a      	str	r2, [r3, #8]
	hDma2dHandler.Init.OutputOffset = 0;
 80872a8:	4b18      	ldr	r3, [pc, #96]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872aa:	2200      	movs	r2, #0
 80872ac:	60da      	str	r2, [r3, #12]

	/* Foreground Configuration */
	hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80872ae:	4b17      	ldr	r3, [pc, #92]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872b0:	2200      	movs	r2, #0
 80872b2:	631a      	str	r2, [r3, #48]	; 0x30
	hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80872b4:	4b15      	ldr	r3, [pc, #84]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872b6:	22ff      	movs	r2, #255	; 0xff
 80872b8:	635a      	str	r2, [r3, #52]	; 0x34
	hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80872ba:	4a14      	ldr	r2, [pc, #80]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872bc:	683b      	ldr	r3, [r7, #0]
 80872be:	62d3      	str	r3, [r2, #44]	; 0x2c
	hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80872c0:	4b12      	ldr	r3, [pc, #72]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872c2:	2200      	movs	r2, #0
 80872c4:	629a      	str	r2, [r3, #40]	; 0x28

	hDma2dHandler.Instance = DMA2D;
 80872c6:	4b11      	ldr	r3, [pc, #68]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872c8:	4a11      	ldr	r2, [pc, #68]	; (8087310 <LL_ConvertLineToARGB8888+0x84>)
 80872ca:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 80872cc:	480f      	ldr	r0, [pc, #60]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872ce:	f002 fce1 	bl	8089c94 <HAL_DMA2D_Init>
 80872d2:	4603      	mov	r3, r0
 80872d4:	2b00      	cmp	r3, #0
 80872d6:	d115      	bne.n	8087304 <LL_ConvertLineToARGB8888+0x78>
	{
		if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK)
 80872d8:	2101      	movs	r1, #1
 80872da:	480c      	ldr	r0, [pc, #48]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872dc:	f002 fe38 	bl	8089f50 <HAL_DMA2D_ConfigLayer>
 80872e0:	4603      	mov	r3, r0
 80872e2:	2b00      	cmp	r3, #0
 80872e4:	d10e      	bne.n	8087304 <LL_ConvertLineToARGB8888+0x78>
		{
			if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80872e6:	68f9      	ldr	r1, [r7, #12]
 80872e8:	68ba      	ldr	r2, [r7, #8]
 80872ea:	2301      	movs	r3, #1
 80872ec:	9300      	str	r3, [sp, #0]
 80872ee:	687b      	ldr	r3, [r7, #4]
 80872f0:	4806      	ldr	r0, [pc, #24]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 80872f2:	f002 fd19 	bl	8089d28 <HAL_DMA2D_Start>
 80872f6:	4603      	mov	r3, r0
 80872f8:	2b00      	cmp	r3, #0
 80872fa:	d103      	bne.n	8087304 <LL_ConvertLineToARGB8888+0x78>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80872fc:	210a      	movs	r1, #10
 80872fe:	4803      	ldr	r0, [pc, #12]	; (808730c <LL_ConvertLineToARGB8888+0x80>)
 8087300:	f002 fd3d 	bl	8089d7e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8087304:	bf00      	nop
 8087306:	3710      	adds	r7, #16
 8087308:	46bd      	mov	sp, r7
 808730a:	bd80      	pop	{r7, pc}
 808730c:	2000b7f0 	.word	0x2000b7f0
 8087310:	4002b000 	.word	0x4002b000

08087314 <LL_ConvertLineToRGB565>:
 * @param  xSize: Buffer width
 * @param  ColorMode: Input color mode
 * @retval None
 */
static void LL_ConvertLineToRGB565(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8087314:	b480      	push	{r7}
 8087316:	b08b      	sub	sp, #44	; 0x2c
 8087318:	af00      	add	r7, sp, #0
 808731a:	60f8      	str	r0, [r7, #12]
 808731c:	60b9      	str	r1, [r7, #8]
 808731e:	607a      	str	r2, [r7, #4]
 8087320:	603b      	str	r3, [r7, #0]
				HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
			}
		}
	}
#elif (LCD_ORIENTATION == LCD_ORIENTATION_180)
	uint16_t colorConversion=0;
 8087322:	2300      	movs	r3, #0
 8087324:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t *src_address_16=pSrc;
 8087326:	68fb      	ldr	r3, [r7, #12]
 8087328:	623b      	str	r3, [r7, #32]
	uint16_t *dst_address=pDst;
 808732a:	68bb      	ldr	r3, [r7, #8]
 808732c:	61fb      	str	r3, [r7, #28]
	uint8_t * src_address_8 = pSrc;
 808732e:	68fb      	ldr	r3, [r7, #12]
 8087330:	61bb      	str	r3, [r7, #24]

	dst_address = dst_address+xSize-1;
 8087332:	687a      	ldr	r2, [r7, #4]
 8087334:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8087338:	4413      	add	r3, r2
 808733a:	005b      	lsls	r3, r3, #1
 808733c:	69fa      	ldr	r2, [r7, #28]
 808733e:	4413      	add	r3, r2
 8087340:	61fb      	str	r3, [r7, #28]

	for (int i=0; i<xSize; i++ )
 8087342:	2300      	movs	r3, #0
 8087344:	617b      	str	r3, [r7, #20]
 8087346:	e04c      	b.n	80873e2 <LL_ConvertLineToRGB565+0xce>
	{
		if (ColorMode == CM_RGB565)
 8087348:	683b      	ldr	r3, [r7, #0]
 808734a:	2b02      	cmp	r3, #2
 808734c:	d106      	bne.n	808735c <LL_ConvertLineToRGB565+0x48>
		{
			colorConversion = (uint16_t)(*src_address_16);
 808734e:	6a3b      	ldr	r3, [r7, #32]
 8087350:	881b      	ldrh	r3, [r3, #0]
 8087352:	84fb      	strh	r3, [r7, #38]	; 0x26
			src_address_16++;
 8087354:	6a3b      	ldr	r3, [r7, #32]
 8087356:	3302      	adds	r3, #2
 8087358:	623b      	str	r3, [r7, #32]
 808735a:	e039      	b.n	80873d0 <LL_ConvertLineToRGB565+0xbc>
		}
		else if (ColorMode == CM_RGB888)
 808735c:	683b      	ldr	r3, [r7, #0]
 808735e:	2b01      	cmp	r3, #1
 8087360:	d11a      	bne.n	8087398 <LL_ConvertLineToRGB565+0x84>
		{
			colorConversion=0;
 8087362:	2300      	movs	r3, #0
 8087364:	84fb      	strh	r3, [r7, #38]	; 0x26
			colorConversion=((uint16_t)((uint8_t)(*src_address_8))<<11) + ((uint16_t)((uint8_t)(*src_address_8+1))<<5) +((uint16_t)((uint8_t)(*src_address_8+2)));
 8087366:	69bb      	ldr	r3, [r7, #24]
 8087368:	781b      	ldrb	r3, [r3, #0]
 808736a:	b29b      	uxth	r3, r3
 808736c:	02db      	lsls	r3, r3, #11
 808736e:	b29a      	uxth	r2, r3
 8087370:	69bb      	ldr	r3, [r7, #24]
 8087372:	781b      	ldrb	r3, [r3, #0]
 8087374:	3301      	adds	r3, #1
 8087376:	b2db      	uxtb	r3, r3
 8087378:	b29b      	uxth	r3, r3
 808737a:	015b      	lsls	r3, r3, #5
 808737c:	b29b      	uxth	r3, r3
 808737e:	4413      	add	r3, r2
 8087380:	b29a      	uxth	r2, r3
 8087382:	69bb      	ldr	r3, [r7, #24]
 8087384:	781b      	ldrb	r3, [r3, #0]
 8087386:	3302      	adds	r3, #2
 8087388:	b2db      	uxtb	r3, r3
 808738a:	b29b      	uxth	r3, r3
 808738c:	4413      	add	r3, r2
 808738e:	84fb      	strh	r3, [r7, #38]	; 0x26
			src_address_8 = src_address_8+3;
 8087390:	69bb      	ldr	r3, [r7, #24]
 8087392:	3303      	adds	r3, #3
 8087394:	61bb      	str	r3, [r7, #24]
 8087396:	e01b      	b.n	80873d0 <LL_ConvertLineToRGB565+0xbc>
		}
		else
		{
			colorConversion=0;
 8087398:	2300      	movs	r3, #0
 808739a:	84fb      	strh	r3, [r7, #38]	; 0x26
			colorConversion=((uint16_t)((uint8_t)(*src_address_8+1))<<11) + ((uint16_t)((uint8_t)(*src_address_8+2))<<5) +((uint16_t)((uint8_t)(*src_address_8+3)));
 808739c:	69bb      	ldr	r3, [r7, #24]
 808739e:	781b      	ldrb	r3, [r3, #0]
 80873a0:	3301      	adds	r3, #1
 80873a2:	b2db      	uxtb	r3, r3
 80873a4:	b29b      	uxth	r3, r3
 80873a6:	02db      	lsls	r3, r3, #11
 80873a8:	b29a      	uxth	r2, r3
 80873aa:	69bb      	ldr	r3, [r7, #24]
 80873ac:	781b      	ldrb	r3, [r3, #0]
 80873ae:	3302      	adds	r3, #2
 80873b0:	b2db      	uxtb	r3, r3
 80873b2:	b29b      	uxth	r3, r3
 80873b4:	015b      	lsls	r3, r3, #5
 80873b6:	b29b      	uxth	r3, r3
 80873b8:	4413      	add	r3, r2
 80873ba:	b29a      	uxth	r2, r3
 80873bc:	69bb      	ldr	r3, [r7, #24]
 80873be:	781b      	ldrb	r3, [r3, #0]
 80873c0:	3303      	adds	r3, #3
 80873c2:	b2db      	uxtb	r3, r3
 80873c4:	b29b      	uxth	r3, r3
 80873c6:	4413      	add	r3, r2
 80873c8:	84fb      	strh	r3, [r7, #38]	; 0x26
			src_address_8 = src_address_8+4;
 80873ca:	69bb      	ldr	r3, [r7, #24]
 80873cc:	3304      	adds	r3, #4
 80873ce:	61bb      	str	r3, [r7, #24]
		}

		*dst_address=colorConversion;
 80873d0:	69fb      	ldr	r3, [r7, #28]
 80873d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80873d4:	801a      	strh	r2, [r3, #0]
		dst_address--;
 80873d6:	69fb      	ldr	r3, [r7, #28]
 80873d8:	3b02      	subs	r3, #2
 80873da:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<xSize; i++ )
 80873dc:	697b      	ldr	r3, [r7, #20]
 80873de:	3301      	adds	r3, #1
 80873e0:	617b      	str	r3, [r7, #20]
 80873e2:	697b      	ldr	r3, [r7, #20]
 80873e4:	687a      	ldr	r2, [r7, #4]
 80873e6:	429a      	cmp	r2, r3
 80873e8:	d8ae      	bhi.n	8087348 <LL_ConvertLineToRGB565+0x34>
	}
#else
#error "Lcd orientation not supported"
#endif /* LCD_ORIENTATION */
}
 80873ea:	bf00      	nop
 80873ec:	372c      	adds	r7, #44	; 0x2c
 80873ee:	46bd      	mov	sp, r7
 80873f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80873f4:	4770      	bx	lr

080873f6 <BSP_LCD_DMA2D_IRQHandler>:
 * @brief  Handles DMA2D interrupt request.
 * @param  None
 * @retval None
 */
void BSP_LCD_DMA2D_IRQHandler(void)
{
 80873f6:	b480      	push	{r7}
 80873f8:	af00      	add	r7, sp, #0
	//HAL_DMA2D_IRQHandler(&hdma2d_camera);

	while (1); //Nothing to do now
 80873fa:	e7fe      	b.n	80873fa <BSP_LCD_DMA2D_IRQHandler+0x4>

080873fc <HAL_DMA2D_MspInit>:
 *           - Peripheral's GPIO Configuration
 * @param hdma2d: DMA2D handle pointer
 * @retval None
 */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80873fc:	b580      	push	{r7, lr}
 80873fe:	b084      	sub	sp, #16
 8087400:	af00      	add	r7, sp, #0
 8087402:	6078      	str	r0, [r7, #4]
	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8087404:	4b0b      	ldr	r3, [pc, #44]	; (8087434 <HAL_DMA2D_MspInit+0x38>)
 8087406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087408:	4a0a      	ldr	r2, [pc, #40]	; (8087434 <HAL_DMA2D_MspInit+0x38>)
 808740a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 808740e:	6313      	str	r3, [r2, #48]	; 0x30
 8087410:	4b08      	ldr	r3, [pc, #32]	; (8087434 <HAL_DMA2D_MspInit+0x38>)
 8087412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8087418:	60fb      	str	r3, [r7, #12]
 808741a:	68fb      	ldr	r3, [r7, #12]

	/*##-2- NVIC configuration  ################################################*/
	/* NVIC configuration for DMA2D transfer complete interrupt */
	HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 808741c:	2200      	movs	r2, #0
 808741e:	2100      	movs	r1, #0
 8087420:	205a      	movs	r0, #90	; 0x5a
 8087422:	f001 ff99 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8087426:	205a      	movs	r0, #90	; 0x5a
 8087428:	f001 ffb2 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 808742c:	bf00      	nop
 808742e:	3710      	adds	r7, #16
 8087430:	46bd      	mov	sp, r7
 8087432:	bd80      	pop	{r7, pc}
 8087434:	40023800 	.word	0x40023800

08087438 <BSP_MAG_Init>:
/**
 * @brief  Initializes interface for magnetic sensor.
 * @retval Initialization status
 */
uint8_t BSP_MAG_Init(void)
{ 
 8087438:	b580      	push	{r7, lr}
 808743a:	b082      	sub	sp, #8
 808743c:	af00      	add	r7, sp, #0
	uint8_t whoamI,rst;

	/* I2C Configuration */
	I2CHandle.Instance = MAG_I2Cx;
 808743e:	4b38      	ldr	r3, [pc, #224]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087440:	4a38      	ldr	r2, [pc, #224]	; (8087524 <BSP_MAG_Init+0xec>)
 8087442:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_I2C_DeInit(&I2CHandle) != HAL_OK)
 8087444:	4836      	ldr	r0, [pc, #216]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087446:	f003 fa4d 	bl	808a8e4 <HAL_I2C_DeInit>
 808744a:	4603      	mov	r3, r0
 808744c:	2b00      	cmp	r3, #0
 808744e:	d001      	beq.n	8087454 <BSP_MAG_Init+0x1c>
	{
		return MAG_ERROR;
 8087450:	2301      	movs	r3, #1
 8087452:	e060      	b.n	8087516 <BSP_MAG_Init+0xde>
	}

	/* System level initialization */
	BSP_MAG_MspInit();
 8087454:	f000 f940 	bl	80876d8 <BSP_MAG_MspInit>

	I2CHandle.Instance             = MAG_I2Cx;
 8087458:	4b31      	ldr	r3, [pc, #196]	; (8087520 <BSP_MAG_Init+0xe8>)
 808745a:	4a32      	ldr	r2, [pc, #200]	; (8087524 <BSP_MAG_Init+0xec>)
 808745c:	601a      	str	r2, [r3, #0]
	I2CHandle.Init.Timing          = MAG_I2C_TIMING;
 808745e:	4b30      	ldr	r3, [pc, #192]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087460:	4a31      	ldr	r2, [pc, #196]	; (8087528 <BSP_MAG_Init+0xf0>)
 8087462:	605a      	str	r2, [r3, #4]
	I2CHandle.Init.OwnAddress1     = 0xFF;
 8087464:	4b2e      	ldr	r3, [pc, #184]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087466:	22ff      	movs	r2, #255	; 0xff
 8087468:	609a      	str	r2, [r3, #8]
	I2CHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 808746a:	4b2d      	ldr	r3, [pc, #180]	; (8087520 <BSP_MAG_Init+0xe8>)
 808746c:	2201      	movs	r2, #1
 808746e:	60da      	str	r2, [r3, #12]
	I2CHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8087470:	4b2b      	ldr	r3, [pc, #172]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087472:	2200      	movs	r2, #0
 8087474:	611a      	str	r2, [r3, #16]
	I2CHandle.Init.OwnAddress2     = 0xFF;
 8087476:	4b2a      	ldr	r3, [pc, #168]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087478:	22ff      	movs	r2, #255	; 0xff
 808747a:	615a      	str	r2, [r3, #20]
	I2CHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 808747c:	4b28      	ldr	r3, [pc, #160]	; (8087520 <BSP_MAG_Init+0xe8>)
 808747e:	2200      	movs	r2, #0
 8087480:	61da      	str	r2, [r3, #28]
	I2CHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8087482:	4b27      	ldr	r3, [pc, #156]	; (8087520 <BSP_MAG_Init+0xe8>)
 8087484:	2200      	movs	r2, #0
 8087486:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&I2CHandle) != HAL_OK)
 8087488:	4825      	ldr	r0, [pc, #148]	; (8087520 <BSP_MAG_Init+0xe8>)
 808748a:	f003 f99b 	bl	808a7c4 <HAL_I2C_Init>
 808748e:	4603      	mov	r3, r0
 8087490:	2b00      	cmp	r3, #0
 8087492:	d001      	beq.n	8087498 <BSP_MAG_Init+0x60>
	{
		return MAG_ERROR;
 8087494:	2301      	movs	r3, #1
 8087496:	e03e      	b.n	8087516 <BSP_MAG_Init+0xde>
	}

	/* Enable the Analog I2C Filter */
	//HAL_I2CEx_ConfigAnalogFilter(&I2CHandle,I2C_ANALOGFILTER_ENABLE);

	magCtx.write_reg = platform_write;
 8087498:	4b24      	ldr	r3, [pc, #144]	; (808752c <BSP_MAG_Init+0xf4>)
 808749a:	4a25      	ldr	r2, [pc, #148]	; (8087530 <BSP_MAG_Init+0xf8>)
 808749c:	601a      	str	r2, [r3, #0]
	magCtx.read_reg = platform_read;
 808749e:	4b23      	ldr	r3, [pc, #140]	; (808752c <BSP_MAG_Init+0xf4>)
 80874a0:	4a24      	ldr	r2, [pc, #144]	; (8087534 <BSP_MAG_Init+0xfc>)
 80874a2:	605a      	str	r2, [r3, #4]
	magCtx.handle = &I2CHandle;
 80874a4:	4b21      	ldr	r3, [pc, #132]	; (808752c <BSP_MAG_Init+0xf4>)
 80874a6:	4a1e      	ldr	r2, [pc, #120]	; (8087520 <BSP_MAG_Init+0xe8>)
 80874a8:	609a      	str	r2, [r3, #8]

	/*
	 *  Check device ID
	 */
	lis2mdl_device_id_get(&magCtx, &whoamI);
 80874aa:	1dfb      	adds	r3, r7, #7
 80874ac:	4619      	mov	r1, r3
 80874ae:	481f      	ldr	r0, [pc, #124]	; (808752c <BSP_MAG_Init+0xf4>)
 80874b0:	f7fa fec7 	bl	8082242 <lis2mdl_device_id_get>
	if (whoamI != LIS2MDL_ID)
 80874b4:	79fb      	ldrb	r3, [r7, #7]
 80874b6:	2b40      	cmp	r3, #64	; 0x40
 80874b8:	d001      	beq.n	80874be <BSP_MAG_Init+0x86>
	{
		return MAG_ERROR;
 80874ba:	2301      	movs	r3, #1
 80874bc:	e02b      	b.n	8087516 <BSP_MAG_Init+0xde>
	}

	/*
	 *  Restore default configuration
	 */
	lis2mdl_reset_set(&magCtx, PROPERTY_ENABLE);
 80874be:	2101      	movs	r1, #1
 80874c0:	481a      	ldr	r0, [pc, #104]	; (808752c <BSP_MAG_Init+0xf4>)
 80874c2:	f7fa fecf 	bl	8082264 <lis2mdl_reset_set>
	do {
		lis2mdl_reset_get(&magCtx, &rst);
 80874c6:	1dbb      	adds	r3, r7, #6
 80874c8:	4619      	mov	r1, r3
 80874ca:	4818      	ldr	r0, [pc, #96]	; (808752c <BSP_MAG_Init+0xf4>)
 80874cc:	f7fa fef0 	bl	80822b0 <lis2mdl_reset_get>
	} while (rst);
 80874d0:	79bb      	ldrb	r3, [r7, #6]
 80874d2:	2b00      	cmp	r3, #0
 80874d4:	d1f7      	bne.n	80874c6 <BSP_MAG_Init+0x8e>

	/*
	 *  Enable Block Data Update
	 */
	lis2mdl_block_data_update_set(&magCtx, PROPERTY_ENABLE);
 80874d6:	2101      	movs	r1, #1
 80874d8:	4814      	ldr	r0, [pc, #80]	; (808752c <BSP_MAG_Init+0xf4>)
 80874da:	f7fa fe51 	bl	8082180 <lis2mdl_block_data_update_set>

	/*
	 * Set Output Data Rate
	 */
	lis2mdl_data_rate_set(&magCtx, LIS2MDL_ODR_100Hz);
 80874de:	2103      	movs	r1, #3
 80874e0:	4812      	ldr	r0, [pc, #72]	; (808752c <BSP_MAG_Init+0xf4>)
 80874e2:	f7fa fdb5 	bl	8082050 <lis2mdl_data_rate_set>

	/*
	 * Set / Reset sensor mode
	 */
	lis2mdl_set_rst_mode_set(&magCtx, LIS2MDL_SENS_OFF_CANC_EVERY_ODR);
 80874e6:	2101      	movs	r1, #1
 80874e8:	4810      	ldr	r0, [pc, #64]	; (808752c <BSP_MAG_Init+0xf4>)
 80874ea:	f7fa fe23 	bl	8082134 <lis2mdl_set_rst_mode_set>

	/*
	 * Enable temperature compensation
	 */
	lis2mdl_offset_temp_comp_set(&magCtx, PROPERTY_ENABLE);
 80874ee:	2101      	movs	r1, #1
 80874f0:	480e      	ldr	r0, [pc, #56]	; (808752c <BSP_MAG_Init+0xf4>)
 80874f2:	f7fa fdd3 	bl	808209c <lis2mdl_offset_temp_comp_set>

	/*
	 * Set Low-pass bandwidth to ODR/4
	 */
	lis2mdl_low_pass_bandwidth_set(&magCtx, LIS2MDL_ODR_DIV_4);
 80874f6:	2101      	movs	r1, #1
 80874f8:	480c      	ldr	r0, [pc, #48]	; (808752c <BSP_MAG_Init+0xf4>)
 80874fa:	f7fa fdf5 	bl	80820e8 <lis2mdl_low_pass_bandwidth_set>

	/*
	 * Set device in continuous mode
	 */
	lis2mdl_operating_mode_set(&magCtx, LIS2MDL_CONTINUOUS_MODE);
 80874fe:	2100      	movs	r1, #0
 8087500:	480a      	ldr	r0, [pc, #40]	; (808752c <BSP_MAG_Init+0xf4>)
 8087502:	f7fa fd7f 	bl	8082004 <lis2mdl_operating_mode_set>

	/*
	 * Enable interrupt generation on new data ready
	 */
	lis2mdl_drdy_on_pin_set(&magCtx, PROPERTY_ENABLE);
 8087506:	2101      	movs	r1, #1
 8087508:	4808      	ldr	r0, [pc, #32]	; (808752c <BSP_MAG_Init+0xf4>)
 808750a:	f7fa feea 	bl	80822e2 <lis2mdl_drdy_on_pin_set>

	magSensorEnabled=1;
 808750e:	4b0a      	ldr	r3, [pc, #40]	; (8087538 <BSP_MAG_Init+0x100>)
 8087510:	2201      	movs	r2, #1
 8087512:	701a      	strb	r2, [r3, #0]
	return MAG_OK;
 8087514:	2300      	movs	r3, #0
}
 8087516:	4618      	mov	r0, r3
 8087518:	3708      	adds	r7, #8
 808751a:	46bd      	mov	sp, r7
 808751c:	bd80      	pop	{r7, pc}
 808751e:	bf00      	nop
 8087520:	2000b8d0 	.word	0x2000b8d0
 8087524:	40005400 	.word	0x40005400
 8087528:	40912732 	.word	0x40912732
 808752c:	2002d94c 	.word	0x2002d94c
 8087530:	08087655 	.word	0x08087655
 8087534:	08087697 	.word	0x08087697
 8087538:	2000b91c 	.word	0x2000b91c

0808753c <BSP_MAG_ReadValues>:
/**
 * @brief  Reads magnetic values in mgauss
 * @retval Read status
 */
uint8_t BSP_MAG_ReadValues(magnetic_t *magnetic)
{
 808753c:	b580      	push	{r7, lr}
 808753e:	b084      	sub	sp, #16
 8087540:	af00      	add	r7, sp, #0
 8087542:	6078      	str	r0, [r7, #4]
	uint8_t status= MAG_OK;
 8087544:	2300      	movs	r3, #0
 8087546:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	axis3bit16_t data_raw_magnetic;

	if (magSensorEnabled)
 8087548:	4b22      	ldr	r3, [pc, #136]	; (80875d4 <BSP_MAG_ReadValues+0x98>)
 808754a:	781b      	ldrb	r3, [r3, #0]
 808754c:	2b00      	cmp	r3, #0
 808754e:	d039      	beq.n	80875c4 <BSP_MAG_ReadValues+0x88>
  __ASM volatile ("cpsid i" : : : "memory");
 8087550:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read output only if new value is available
		 */
		lis2mdl_mag_data_ready_get(&magCtx, &reg);
 8087552:	f107 030e 	add.w	r3, r7, #14
 8087556:	4619      	mov	r1, r3
 8087558:	481f      	ldr	r0, [pc, #124]	; (80875d8 <BSP_MAG_ReadValues+0x9c>)
 808755a:	f7fa fe37 	bl	80821cc <lis2mdl_mag_data_ready_get>
		if (reg)
 808755e:	7bbb      	ldrb	r3, [r7, #14]
 8087560:	2b00      	cmp	r3, #0
 8087562:	d02b      	beq.n	80875bc <BSP_MAG_ReadValues+0x80>
		{
			/*
			 * Read magnetic field data
			 */
			memset(data_raw_magnetic.u8bit, 0x00, 3 * sizeof(int16_t));
 8087564:	f107 0308 	add.w	r3, r7, #8
 8087568:	2206      	movs	r2, #6
 808756a:	2100      	movs	r1, #0
 808756c:	4618      	mov	r0, r3
 808756e:	f014 fc54 	bl	809be1a <memset>
			lis2mdl_magnetic_raw_get(&magCtx, data_raw_magnetic.u8bit);
 8087572:	f107 0308 	add.w	r3, r7, #8
 8087576:	4619      	mov	r1, r3
 8087578:	4817      	ldr	r0, [pc, #92]	; (80875d8 <BSP_MAG_ReadValues+0x9c>)
 808757a:	f7fa fe40 	bl	80821fe <lis2mdl_magnetic_raw_get>

			magnetic->x = lis2mdl_from_lsb_to_mgauss( data_raw_magnetic.i16bit[0]);
 808757e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8087582:	4618      	mov	r0, r3
 8087584:	f7fa fd0e 	bl	8081fa4 <lis2mdl_from_lsb_to_mgauss>
 8087588:	eef0 7a40 	vmov.f32	s15, s0
 808758c:	687b      	ldr	r3, [r7, #4]
 808758e:	edc3 7a00 	vstr	s15, [r3]
			magnetic->y = lis2mdl_from_lsb_to_mgauss( data_raw_magnetic.i16bit[1]);
 8087592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8087596:	4618      	mov	r0, r3
 8087598:	f7fa fd04 	bl	8081fa4 <lis2mdl_from_lsb_to_mgauss>
 808759c:	eef0 7a40 	vmov.f32	s15, s0
 80875a0:	687b      	ldr	r3, [r7, #4]
 80875a2:	edc3 7a01 	vstr	s15, [r3, #4]
			magnetic->z = lis2mdl_from_lsb_to_mgauss( data_raw_magnetic.i16bit[2]);
 80875a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80875aa:	4618      	mov	r0, r3
 80875ac:	f7fa fcfa 	bl	8081fa4 <lis2mdl_from_lsb_to_mgauss>
 80875b0:	eef0 7a40 	vmov.f32	s15, s0
 80875b4:	687b      	ldr	r3, [r7, #4]
 80875b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80875ba:	e001      	b.n	80875c0 <BSP_MAG_ReadValues+0x84>
		}
		else
		{
			status =  MAG_NO_DATA;
 80875bc:	2303      	movs	r3, #3
 80875be:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80875c0:	b662      	cpsie	i
 80875c2:	e001      	b.n	80875c8 <BSP_MAG_ReadValues+0x8c>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK

	}
	else status = MAG_ERROR;
 80875c4:	2301      	movs	r3, #1
 80875c6:	73fb      	strb	r3, [r7, #15]

	return status;
 80875c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80875ca:	4618      	mov	r0, r3
 80875cc:	3710      	adds	r7, #16
 80875ce:	46bd      	mov	sp, r7
 80875d0:	bd80      	pop	{r7, pc}
 80875d2:	bf00      	nop
 80875d4:	2000b91c 	.word	0x2000b91c
 80875d8:	2002d94c 	.word	0x2002d94c

080875dc <BSP_MAG_ReadTemperature>:
/**
 * @brief  Reads T° values in °C
 * @retval Read status
 */
uint8_t BSP_MAG_ReadTemperature(float *temperature_degC)
{
 80875dc:	b580      	push	{r7, lr}
 80875de:	b084      	sub	sp, #16
 80875e0:	af00      	add	r7, sp, #0
 80875e2:	6078      	str	r0, [r7, #4]
	uint8_t status= MAG_OK;
 80875e4:	2300      	movs	r3, #0
 80875e6:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	axis1bit16_t data_raw_temperature;

	if (magSensorEnabled)
 80875e8:	4b18      	ldr	r3, [pc, #96]	; (808764c <BSP_MAG_ReadTemperature+0x70>)
 80875ea:	781b      	ldrb	r3, [r3, #0]
 80875ec:	2b00      	cmp	r3, #0
 80875ee:	d025      	beq.n	808763c <BSP_MAG_ReadTemperature+0x60>
  __ASM volatile ("cpsid i" : : : "memory");
 80875f0:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read output only if new value is available
		 */
		lis2mdl_mag_data_ready_get(&magCtx, &reg);
 80875f2:	f107 030e 	add.w	r3, r7, #14
 80875f6:	4619      	mov	r1, r3
 80875f8:	4815      	ldr	r0, [pc, #84]	; (8087650 <BSP_MAG_ReadTemperature+0x74>)
 80875fa:	f7fa fde7 	bl	80821cc <lis2mdl_mag_data_ready_get>
		if (reg)
 80875fe:	7bbb      	ldrb	r3, [r7, #14]
 8087600:	2b00      	cmp	r3, #0
 8087602:	d017      	beq.n	8087634 <BSP_MAG_ReadTemperature+0x58>
		{
			/*
			 * Read temperature data
			 */
			memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8087604:	f107 030c 	add.w	r3, r7, #12
 8087608:	2202      	movs	r2, #2
 808760a:	2100      	movs	r1, #0
 808760c:	4618      	mov	r0, r3
 808760e:	f014 fc04 	bl	809be1a <memset>
			lis2mdl_temperature_raw_get(&magCtx, data_raw_temperature.u8bit);
 8087612:	f107 030c 	add.w	r3, r7, #12
 8087616:	4619      	mov	r1, r3
 8087618:	480d      	ldr	r0, [pc, #52]	; (8087650 <BSP_MAG_ReadTemperature+0x74>)
 808761a:	f7fa fe01 	bl	8082220 <lis2mdl_temperature_raw_get>
			*temperature_degC = lis2mdl_from_lsb_to_celsius(data_raw_temperature.i16bit);
 808761e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8087622:	4618      	mov	r0, r3
 8087624:	f7fa fcd4 	bl	8081fd0 <lis2mdl_from_lsb_to_celsius>
 8087628:	eef0 7a40 	vmov.f32	s15, s0
 808762c:	687b      	ldr	r3, [r7, #4]
 808762e:	edc3 7a00 	vstr	s15, [r3]
 8087632:	e001      	b.n	8087638 <BSP_MAG_ReadTemperature+0x5c>

		}
		else
		{
			status =  MAG_NO_DATA;
 8087634:	2303      	movs	r3, #3
 8087636:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8087638:	b662      	cpsie	i
 808763a:	e001      	b.n	8087640 <BSP_MAG_ReadTemperature+0x64>

		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK

	}
	else status = MAG_ERROR;
 808763c:	2301      	movs	r3, #1
 808763e:	73fb      	strb	r3, [r7, #15]

	return status;
 8087640:	7bfb      	ldrb	r3, [r7, #15]
}
 8087642:	4618      	mov	r0, r3
 8087644:	3710      	adds	r7, #16
 8087646:	46bd      	mov	sp, r7
 8087648:	bd80      	pop	{r7, pc}
 808764a:	bf00      	nop
 808764c:	2000b91c 	.word	0x2000b91c
 8087650:	2002d94c 	.word	0x2002d94c

08087654 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8087654:	b580      	push	{r7, lr}
 8087656:	b088      	sub	sp, #32
 8087658:	af04      	add	r7, sp, #16
 808765a:	60f8      	str	r0, [r7, #12]
 808765c:	607a      	str	r2, [r7, #4]
 808765e:	461a      	mov	r2, r3
 8087660:	460b      	mov	r3, r1
 8087662:	72fb      	strb	r3, [r7, #11]
 8087664:	4613      	mov	r3, r2
 8087666:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	reg |= 0x80;
 8087668:	7afb      	ldrb	r3, [r7, #11]
 808766a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808766e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(handle, LIS2MDL_I2C_ADD, reg,
 8087670:	7afb      	ldrb	r3, [r7, #11]
 8087672:	b29a      	uxth	r2, r3
 8087674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8087678:	9302      	str	r3, [sp, #8]
 808767a:	893b      	ldrh	r3, [r7, #8]
 808767c:	9301      	str	r3, [sp, #4]
 808767e:	687b      	ldr	r3, [r7, #4]
 8087680:	9300      	str	r3, [sp, #0]
 8087682:	2301      	movs	r3, #1
 8087684:	213d      	movs	r1, #61	; 0x3d
 8087686:	68f8      	ldr	r0, [r7, #12]
 8087688:	f003 f970 	bl	808a96c <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
 808768c:	2300      	movs	r3, #0
}
 808768e:	4618      	mov	r0, r3
 8087690:	3710      	adds	r7, #16
 8087692:	46bd      	mov	sp, r7
 8087694:	bd80      	pop	{r7, pc}

08087696 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8087696:	b580      	push	{r7, lr}
 8087698:	b088      	sub	sp, #32
 808769a:	af04      	add	r7, sp, #16
 808769c:	60f8      	str	r0, [r7, #12]
 808769e:	607a      	str	r2, [r7, #4]
 80876a0:	461a      	mov	r2, r3
 80876a2:	460b      	mov	r3, r1
 80876a4:	72fb      	strb	r3, [r7, #11]
 80876a6:	4613      	mov	r3, r2
 80876a8:	813b      	strh	r3, [r7, #8]
	/* Read multiple command */
	reg |= 0x80;
 80876aa:	7afb      	ldrb	r3, [r7, #11]
 80876ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80876b0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(handle, LIS2MDL_I2C_ADD, reg,
 80876b2:	7afb      	ldrb	r3, [r7, #11]
 80876b4:	b29a      	uxth	r2, r3
 80876b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80876ba:	9302      	str	r3, [sp, #8]
 80876bc:	893b      	ldrh	r3, [r7, #8]
 80876be:	9301      	str	r3, [sp, #4]
 80876c0:	687b      	ldr	r3, [r7, #4]
 80876c2:	9300      	str	r3, [sp, #0]
 80876c4:	2301      	movs	r3, #1
 80876c6:	213d      	movs	r1, #61	; 0x3d
 80876c8:	68f8      	ldr	r0, [r7, #12]
 80876ca:	f003 fa75 	bl	808abb8 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
 80876ce:	2300      	movs	r3, #0
}
 80876d0:	4618      	mov	r0, r3
 80876d2:	3710      	adds	r7, #16
 80876d4:	46bd      	mov	sp, r7
 80876d6:	bd80      	pop	{r7, pc}

080876d8 <BSP_MAG_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_MAG_MspInit(void)
{
 80876d8:	b580      	push	{r7, lr}
 80876da:	b088      	sub	sp, #32
 80876dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80876de:	4b34      	ldr	r3, [pc, #208]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 80876e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80876e2:	4a33      	ldr	r2, [pc, #204]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 80876e4:	f043 0302 	orr.w	r3, r3, #2
 80876e8:	6313      	str	r3, [r2, #48]	; 0x30
 80876ea:	4b31      	ldr	r3, [pc, #196]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 80876ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80876ee:	f003 0302 	and.w	r3, r3, #2
 80876f2:	60bb      	str	r3, [r7, #8]
 80876f4:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* KEYS CS GPIO pin configuration  */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80876f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80876fa:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80876fc:	2312      	movs	r3, #18
 80876fe:	613b      	str	r3, [r7, #16]
	gpio_init_structure.Pull = GPIO_PULLUP;
 8087700:	2301      	movs	r3, #1
 8087702:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8087704:	2302      	movs	r3, #2
 8087706:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8087708:	2304      	movs	r3, #4
 808770a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808770c:	f107 030c 	add.w	r3, r7, #12
 8087710:	4619      	mov	r1, r3
 8087712:	4828      	ldr	r0, [pc, #160]	; (80877b4 <BSP_MAG_MspInit+0xdc>)
 8087714:	f002 fd58 	bl	808a1c8 <HAL_GPIO_Init>

	/* Configure I2C Rx as alternate function */
	gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8087718:	f44f 7300 	mov.w	r3, #512	; 0x200
 808771c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 808771e:	f107 030c 	add.w	r3, r7, #12
 8087722:	4619      	mov	r1, r3
 8087724:	4823      	ldr	r0, [pc, #140]	; (80877b4 <BSP_MAG_MspInit+0xdc>)
 8087726:	f002 fd4f 	bl	808a1c8 <HAL_GPIO_Init>

	/* IT DRDY GPIO pin configuration  */
	gpio_init_structure.Pin       = MAG_DRDY_PIN;
 808772a:	2340      	movs	r3, #64	; 0x40
 808772c:	60fb      	str	r3, [r7, #12]
	gpio_init_structure.Pull 	  = GPIO_NOPULL;
 808772e:	2300      	movs	r3, #0
 8087730:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Speed 	  = GPIO_SPEED_FAST;
 8087732:	2302      	movs	r3, #2
 8087734:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Mode 	  = GPIO_MODE_IT_RISING;
 8087736:	4b20      	ldr	r3, [pc, #128]	; (80877b8 <BSP_MAG_MspInit+0xe0>)
 8087738:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MAG_DRDY_GPIO_PORT, &gpio_init_structure);
 808773a:	f107 030c 	add.w	r3, r7, #12
 808773e:	4619      	mov	r1, r3
 8087740:	481e      	ldr	r0, [pc, #120]	; (80877bc <BSP_MAG_MspInit+0xe4>)
 8087742:	f002 fd41 	bl	808a1c8 <HAL_GPIO_Init>
	//	HAL_NVIC_EnableIRQ(I2C1_  SPI2_IRQn);


	/*** Configure the I2C peripheral ***/
	/* Enable I2C clock */
	DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8087746:	4b1a      	ldr	r3, [pc, #104]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 8087748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808774a:	4a19      	ldr	r2, [pc, #100]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 808774c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8087750:	6413      	str	r3, [r2, #64]	; 0x40
 8087752:	4b17      	ldr	r3, [pc, #92]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 8087754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808775a:	607b      	str	r3, [r7, #4]
 808775c:	687b      	ldr	r3, [r7, #4]

	/* Force the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_FORCE_RESET();
 808775e:	4b14      	ldr	r3, [pc, #80]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 8087760:	6a1b      	ldr	r3, [r3, #32]
 8087762:	4a13      	ldr	r2, [pc, #76]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 8087764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8087768:	6213      	str	r3, [r2, #32]

	/* Release the I2C peripheral clock reset */
	DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 808776a:	4b11      	ldr	r3, [pc, #68]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 808776c:	6a1b      	ldr	r3, [r3, #32]
 808776e:	4a10      	ldr	r2, [pc, #64]	; (80877b0 <BSP_MAG_MspInit+0xd8>)
 8087770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8087774:	6213      	str	r3, [r2, #32]

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8087776:	2200      	movs	r2, #0
 8087778:	210f      	movs	r1, #15
 808777a:	201f      	movs	r0, #31
 808777c:	f001 fdec 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8087780:	201f      	movs	r0, #31
 8087782:	f001 fe05 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable and set I2Cx Interrupt to a lower priority */
	HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8087786:	2200      	movs	r2, #0
 8087788:	210f      	movs	r1, #15
 808778a:	2020      	movs	r0, #32
 808778c:	f001 fde4 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8087790:	2020      	movs	r0, #32
 8087792:	f001 fdfd 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable and set EXTI9-5 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(MAG_DRDY_EXTI_IRQn, 0xFF, 0);
 8087796:	2200      	movs	r2, #0
 8087798:	21ff      	movs	r1, #255	; 0xff
 808779a:	2017      	movs	r0, #23
 808779c:	f001 fddc 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MAG_DRDY_EXTI_IRQn);
 80877a0:	2017      	movs	r0, #23
 80877a2:	f001 fdf5 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 80877a6:	bf00      	nop
 80877a8:	3720      	adds	r7, #32
 80877aa:	46bd      	mov	sp, r7
 80877ac:	bd80      	pop	{r7, pc}
 80877ae:	bf00      	nop
 80877b0:	40023800 	.word	0x40023800
 80877b4:	40020400 	.word	0x40020400
 80877b8:	10110000 	.word	0x10110000
 80877bc:	40021c00 	.word	0x40021c00

080877c0 <BSP_PRESSURE_Init>:
/**
 * @brief  Initializes interface for pressure sensor.
 * @retval Initialization status
 */
uint8_t BSP_PRESSURE_Init(void)
{ 
 80877c0:	b580      	push	{r7, lr}
 80877c2:	af00      	add	r7, sp, #0
	/* SPi Configuration */
	SPIHandle.Instance = PRESSURE_SPIx;
 80877c4:	4b36      	ldr	r3, [pc, #216]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 80877c6:	4a37      	ldr	r2, [pc, #220]	; (80878a4 <BSP_PRESSURE_Init+0xe4>)
 80877c8:	601a      	str	r2, [r3, #0]
	PressureHandle.hspi = &SPIHandle;
 80877ca:	4b37      	ldr	r3, [pc, #220]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 80877cc:	4a34      	ldr	r2, [pc, #208]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 80877ce:	625a      	str	r2, [r3, #36]	; 0x24
	PressureHandle.cs_gpio = PRESSURE_CS_GPIO_PORT;
 80877d0:	4b35      	ldr	r3, [pc, #212]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 80877d2:	4a36      	ldr	r2, [pc, #216]	; (80878ac <BSP_PRESSURE_Init+0xec>)
 80877d4:	629a      	str	r2, [r3, #40]	; 0x28
	PressureHandle.cs_pin = PRESSURE_CS_PIN;
 80877d6:	4b34      	ldr	r3, [pc, #208]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 80877d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80877dc:	859a      	strh	r2, [r3, #44]	; 0x2c
	PressureHandlePtr = &PressureHandle;
 80877de:	4b34      	ldr	r3, [pc, #208]	; (80878b0 <BSP_PRESSURE_Init+0xf0>)
 80877e0:	4a31      	ldr	r2, [pc, #196]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 80877e2:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_SPI_DeInit(&SPIHandle) != HAL_OK)
 80877e4:	482e      	ldr	r0, [pc, #184]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 80877e6:	f008 fac3 	bl	808fd70 <HAL_SPI_DeInit>
 80877ea:	4603      	mov	r3, r0
 80877ec:	2b00      	cmp	r3, #0
 80877ee:	d001      	beq.n	80877f4 <BSP_PRESSURE_Init+0x34>
	{
		return PRESSURE_ERROR;
 80877f0:	2301      	movs	r3, #1
 80877f2:	e053      	b.n	808789c <BSP_PRESSURE_Init+0xdc>
  __ASM volatile ("cpsid i" : : : "memory");
 80877f4:	b672      	cpsid	i
	}

	__disable_irq(); // Set PRIMASK

	/* System level initialization */
	BSP_PRESSURE_MspInit();
 80877f6:	f000 f899 	bl	808792c <BSP_PRESSURE_MspInit>

	/* SPI2 initialization */
	SPIHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80877fa:	4b29      	ldr	r3, [pc, #164]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 80877fc:	2238      	movs	r2, #56	; 0x38
 80877fe:	61da      	str	r2, [r3, #28]
	SPIHandle.Init.CLKPhase 		= SPI_PHASE_1EDGE;
 8087800:	4b27      	ldr	r3, [pc, #156]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087802:	2200      	movs	r2, #0
 8087804:	615a      	str	r2, [r3, #20]
	SPIHandle.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8087806:	4b26      	ldr	r3, [pc, #152]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087808:	2200      	movs	r2, #0
 808780a:	611a      	str	r2, [r3, #16]
	SPIHandle.Init.DataSize 		= SPI_DATASIZE_8BIT;
 808780c:	4b24      	ldr	r3, [pc, #144]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 808780e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8087812:	60da      	str	r2, [r3, #12]
	SPIHandle.Init.Direction 		= SPI_DIRECTION_2LINES;
 8087814:	4b22      	ldr	r3, [pc, #136]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087816:	2200      	movs	r2, #0
 8087818:	609a      	str	r2, [r3, #8]
	SPIHandle.Init.FirstBit 		= SPI_FIRSTBIT_MSB;
 808781a:	4b21      	ldr	r3, [pc, #132]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 808781c:	2200      	movs	r2, #0
 808781e:	621a      	str	r2, [r3, #32]
	SPIHandle.Init.Mode 			= SPI_MODE_MASTER;
 8087820:	4b1f      	ldr	r3, [pc, #124]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087822:	f44f 7282 	mov.w	r2, #260	; 0x104
 8087826:	605a      	str	r2, [r3, #4]
	SPIHandle.Init.NSS 				= SPI_NSS_SOFT;
 8087828:	4b1d      	ldr	r3, [pc, #116]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 808782a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808782e:	619a      	str	r2, [r3, #24]
	SPIHandle.Init.TIMode           = SPI_TIMODE_DISABLE;
 8087830:	4b1b      	ldr	r3, [pc, #108]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087832:	2200      	movs	r2, #0
 8087834:	625a      	str	r2, [r3, #36]	; 0x24
	SPIHandle.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8087836:	4b1a      	ldr	r3, [pc, #104]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087838:	2200      	movs	r2, #0
 808783a:	629a      	str	r2, [r3, #40]	; 0x28
	SPIHandle.Init.CRCPolynomial    = 7;
 808783c:	4b18      	ldr	r3, [pc, #96]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 808783e:	2207      	movs	r2, #7
 8087840:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_SPI_Init(&SPIHandle) != HAL_OK)
 8087842:	4817      	ldr	r0, [pc, #92]	; (80878a0 <BSP_PRESSURE_Init+0xe0>)
 8087844:	f008 f9ef 	bl	808fc26 <HAL_SPI_Init>
 8087848:	4603      	mov	r3, r0
 808784a:	2b00      	cmp	r3, #0
 808784c:	d001      	beq.n	8087852 <BSP_PRESSURE_Init+0x92>
	{
		return PRESSURE_ERROR;
 808784e:	2301      	movs	r3, #1
 8087850:	e024      	b.n	808789c <BSP_PRESSURE_Init+0xdc>
	}

	PRESSURE_CS_DISABLE(PressureHandlePtr);
 8087852:	4b17      	ldr	r3, [pc, #92]	; (80878b0 <BSP_PRESSURE_Init+0xf0>)
 8087854:	681b      	ldr	r3, [r3, #0]
 8087856:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8087858:	4b15      	ldr	r3, [pc, #84]	; (80878b0 <BSP_PRESSURE_Init+0xf0>)
 808785a:	681b      	ldr	r3, [r3, #0]
 808785c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 808785e:	2201      	movs	r2, #1
 8087860:	4619      	mov	r1, r3
 8087862:	f002 ff7d 	bl	808a760 <HAL_GPIO_WritePin>

	bmp280_init_default_params(&PressureHandle.params);
 8087866:	4813      	ldr	r0, [pc, #76]	; (80878b4 <BSP_PRESSURE_Init+0xf4>)
 8087868:	f7f9 faae 	bl	8080dc8 <bmp280_init_default_params>

	if (!bmp280_init(&PressureHandle, &PressureHandle.params)) {
 808786c:	4911      	ldr	r1, [pc, #68]	; (80878b4 <BSP_PRESSURE_Init+0xf4>)
 808786e:	480e      	ldr	r0, [pc, #56]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 8087870:	f7f9 fcd6 	bl	8081220 <bmp280_init>
 8087874:	4603      	mov	r3, r0
 8087876:	f083 0301 	eor.w	r3, r3, #1
 808787a:	b2db      	uxtb	r3, r3
 808787c:	2b00      	cmp	r3, #0
 808787e:	d001      	beq.n	8087884 <BSP_PRESSURE_Init+0xc4>
		return PRESSURE_ERROR;
 8087880:	2301      	movs	r3, #1
 8087882:	e00b      	b.n	808789c <BSP_PRESSURE_Init+0xdc>
	}

	if (PressureHandle.id != BMP280_CHIP_ID) {
 8087884:	4b08      	ldr	r3, [pc, #32]	; (80878a8 <BSP_PRESSURE_Init+0xe8>)
 8087886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808788a:	2b58      	cmp	r3, #88	; 0x58
 808788c:	d001      	beq.n	8087892 <BSP_PRESSURE_Init+0xd2>
		return PRESSURE_ERROR;
 808788e:	2301      	movs	r3, #1
 8087890:	e004      	b.n	808789c <BSP_PRESSURE_Init+0xdc>
	}

	pressureSensorEnabled=1;
 8087892:	4b09      	ldr	r3, [pc, #36]	; (80878b8 <BSP_PRESSURE_Init+0xf8>)
 8087894:	2201      	movs	r2, #1
 8087896:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8087898:	b662      	cpsie	i

	__enable_irq(); // Clear PRIMASK
	return PRESSURE_OK;
 808789a:	2300      	movs	r3, #0
}
 808789c:	4618      	mov	r0, r3
 808789e:	bd80      	pop	{r7, pc}
 80878a0:	2000b920 	.word	0x2000b920
 80878a4:	40003800 	.word	0x40003800
 80878a8:	2002d95c 	.word	0x2002d95c
 80878ac:	40020000 	.word	0x40020000
 80878b0:	2002d958 	.word	0x2002d958
 80878b4:	2002d98a 	.word	0x2002d98a
 80878b8:	2000b984 	.word	0x2000b984

080878bc <BSP_PRESSURE_ReadCompensatedValues>:
/**
 * @brief  Pressure and temperature compensated
 * @retval Read status
 */
uint8_t BSP_PRESSURE_ReadCompensatedValues(float *pressure, float *temperature)
{
 80878bc:	b580      	push	{r7, lr}
 80878be:	b084      	sub	sp, #16
 80878c0:	af00      	add	r7, sp, #0
 80878c2:	6078      	str	r0, [r7, #4]
 80878c4:	6039      	str	r1, [r7, #0]
	uint8_t status= PRESSURE_OK;
 80878c6:	2300      	movs	r3, #0
 80878c8:	73fb      	strb	r3, [r7, #15]
	float humidity;

	if (pressureSensorEnabled)
 80878ca:	4b16      	ldr	r3, [pc, #88]	; (8087924 <BSP_PRESSURE_ReadCompensatedValues+0x68>)
 80878cc:	781b      	ldrb	r3, [r3, #0]
 80878ce:	2b00      	cmp	r3, #0
 80878d0:	d018      	beq.n	8087904 <BSP_PRESSURE_ReadCompensatedValues+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80878d2:	b672      	cpsid	i
		__disable_irq(); // Set PRIMASK

		/*
		 * Read output only if new value is available
		 */
		while (bmp280_is_measuring(&PressureHandle));
 80878d4:	bf00      	nop
 80878d6:	4814      	ldr	r0, [pc, #80]	; (8087928 <BSP_PRESSURE_ReadCompensatedValues+0x6c>)
 80878d8:	f7f9 fd47 	bl	808136a <bmp280_is_measuring>
 80878dc:	4603      	mov	r3, r0
 80878de:	2b00      	cmp	r3, #0
 80878e0:	d1f9      	bne.n	80878d6 <BSP_PRESSURE_ReadCompensatedValues+0x1a>

		if (bmp280_read_float(&PressureHandle, temperature, pressure, &humidity)==false)
 80878e2:	f107 0308 	add.w	r3, r7, #8
 80878e6:	687a      	ldr	r2, [r7, #4]
 80878e8:	6839      	ldr	r1, [r7, #0]
 80878ea:	480f      	ldr	r0, [pc, #60]	; (8087928 <BSP_PRESSURE_ReadCompensatedValues+0x6c>)
 80878ec:	f7fa f83c 	bl	8081968 <bmp280_read_float>
 80878f0:	4603      	mov	r3, r0
 80878f2:	f083 0301 	eor.w	r3, r3, #1
 80878f6:	b2db      	uxtb	r3, r3
 80878f8:	2b00      	cmp	r3, #0
 80878fa:	d001      	beq.n	8087900 <BSP_PRESSURE_ReadCompensatedValues+0x44>
		{
			status =  PRESSURE_NO_DATA;
 80878fc:	2303      	movs	r3, #3
 80878fe:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8087900:	b662      	cpsie	i
 8087902:	e009      	b.n	8087918 <BSP_PRESSURE_ReadCompensatedValues+0x5c>
		/* TODO: Supprimer apres test */
		__enable_irq(); // Clear PRIMASK
	}
	else
	{
		*pressure=0.0;
 8087904:	687b      	ldr	r3, [r7, #4]
 8087906:	f04f 0200 	mov.w	r2, #0
 808790a:	601a      	str	r2, [r3, #0]
		*temperature=0.0;
 808790c:	683b      	ldr	r3, [r7, #0]
 808790e:	f04f 0200 	mov.w	r2, #0
 8087912:	601a      	str	r2, [r3, #0]
		status =  PRESSURE_NO_DATA;
 8087914:	2303      	movs	r3, #3
 8087916:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8087918:	7bfb      	ldrb	r3, [r7, #15]
}
 808791a:	4618      	mov	r0, r3
 808791c:	3710      	adds	r7, #16
 808791e:	46bd      	mov	sp, r7
 8087920:	bd80      	pop	{r7, pc}
 8087922:	bf00      	nop
 8087924:	2000b984 	.word	0x2000b984
 8087928:	2002d95c 	.word	0x2002d95c

0808792c <BSP_PRESSURE_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_PRESSURE_MspInit(void)
{
 808792c:	b580      	push	{r7, lr}
 808792e:	b08a      	sub	sp, #40	; 0x28
 8087930:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_init_structure;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable the Keys (SPI) interface clock */
	PRESSURE_CLK_ENABLE();
 8087932:	4b40      	ldr	r3, [pc, #256]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087936:	4a3f      	ldr	r2, [pc, #252]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 808793c:	6413      	str	r3, [r2, #64]	; 0x40
 808793e:	4b3d      	ldr	r3, [pc, #244]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8087946:	613b      	str	r3, [r7, #16]
 8087948:	693b      	ldr	r3, [r7, #16]

	/* Enable GPIO clocks */
	PRESSURE_CS_GPIO_CLK_ENABLE();
 808794a:	4b3a      	ldr	r3, [pc, #232]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 808794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808794e:	4a39      	ldr	r2, [pc, #228]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087950:	f043 0301 	orr.w	r3, r3, #1
 8087954:	6313      	str	r3, [r2, #48]	; 0x30
 8087956:	4b37      	ldr	r3, [pc, #220]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808795a:	f003 0301 	and.w	r3, r3, #1
 808795e:	60fb      	str	r3, [r7, #12]
 8087960:	68fb      	ldr	r3, [r7, #12]
	PRESSURE_CLK_GPIO_CLK_ENABLE();
 8087962:	4b34      	ldr	r3, [pc, #208]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087966:	4a33      	ldr	r2, [pc, #204]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808796c:	6313      	str	r3, [r2, #48]	; 0x30
 808796e:	4b31      	ldr	r3, [pc, #196]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8087976:	60bb      	str	r3, [r7, #8]
 8087978:	68bb      	ldr	r3, [r7, #8]
	PRESSURE_MISO_GPIO_CLK_ENABLE();
 808797a:	4b2e      	ldr	r3, [pc, #184]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 808797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808797e:	4a2d      	ldr	r2, [pc, #180]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087980:	f043 0302 	orr.w	r3, r3, #2
 8087984:	6313      	str	r3, [r2, #48]	; 0x30
 8087986:	4b2b      	ldr	r3, [pc, #172]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808798a:	f003 0302 	and.w	r3, r3, #2
 808798e:	607b      	str	r3, [r7, #4]
 8087990:	687b      	ldr	r3, [r7, #4]
	PRESSURE_MOSI_GPIO_CLK_ENABLE();
 8087992:	4b28      	ldr	r3, [pc, #160]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087996:	4a27      	ldr	r2, [pc, #156]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 8087998:	f043 0302 	orr.w	r3, r3, #2
 808799c:	6313      	str	r3, [r2, #48]	; 0x30
 808799e:	4b25      	ldr	r3, [pc, #148]	; (8087a34 <BSP_PRESSURE_MspInit+0x108>)
 80879a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80879a2:	f003 0302 	and.w	r3, r3, #2
 80879a6:	603b      	str	r3, [r7, #0]
 80879a8:	683b      	ldr	r3, [r7, #0]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* PRESSURE CS GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_CS_PIN;
 80879aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80879ae:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80879b0:	2301      	movs	r3, #1
 80879b2:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 80879b4:	2300      	movs	r3, #0
 80879b6:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80879b8:	2303      	movs	r3, #3
 80879ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PRESSURE_CS_GPIO_PORT, &gpio_init_structure);
 80879bc:	f107 0314 	add.w	r3, r7, #20
 80879c0:	4619      	mov	r1, r3
 80879c2:	481d      	ldr	r0, [pc, #116]	; (8087a38 <BSP_PRESSURE_MspInit+0x10c>)
 80879c4:	f002 fc00 	bl	808a1c8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(PRESSURE_CS_GPIO_PORT, PRESSURE_CS_PIN, GPIO_PIN_SET );
 80879c8:	2201      	movs	r2, #1
 80879ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80879ce:	481a      	ldr	r0, [pc, #104]	; (8087a38 <BSP_PRESSURE_MspInit+0x10c>)
 80879d0:	f002 fec6 	bl	808a760 <HAL_GPIO_WritePin>

	/* PRESSURE CLK GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_CLK_PIN;
 80879d4:	2302      	movs	r3, #2
 80879d6:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80879d8:	2302      	movs	r3, #2
 80879da:	61bb      	str	r3, [r7, #24]
	gpio_init_structure.Pull      = GPIO_NOPULL;
 80879dc:	2300      	movs	r3, #0
 80879de:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 80879e0:	2305      	movs	r3, #5
 80879e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PRESSURE_CLK_GPIO_PORT, &gpio_init_structure);
 80879e4:	f107 0314 	add.w	r3, r7, #20
 80879e8:	4619      	mov	r1, r3
 80879ea:	4814      	ldr	r0, [pc, #80]	; (8087a3c <BSP_PRESSURE_MspInit+0x110>)
 80879ec:	f002 fbec 	bl	808a1c8 <HAL_GPIO_Init>

	/* PRESSURE MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_MISO_PIN;
 80879f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80879f4:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 80879f6:	2305      	movs	r3, #5
 80879f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PRESSURE_MISO_GPIO_PORT, &gpio_init_structure);
 80879fa:	f107 0314 	add.w	r3, r7, #20
 80879fe:	4619      	mov	r1, r3
 8087a00:	480f      	ldr	r0, [pc, #60]	; (8087a40 <BSP_PRESSURE_MspInit+0x114>)
 8087a02:	f002 fbe1 	bl	808a1c8 <HAL_GPIO_Init>

	/* PRESSURE MISO GPIO pin configuration  */
	gpio_init_structure.Pin       = PRESSURE_MOSI_PIN;
 8087a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8087a0a:	617b      	str	r3, [r7, #20]
	gpio_init_structure.Alternate = GPIO_AF5_SPI2;
 8087a0c:	2305      	movs	r3, #5
 8087a0e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(PRESSURE_MOSI_GPIO_PORT, &gpio_init_structure);
 8087a10:	f107 0314 	add.w	r3, r7, #20
 8087a14:	4619      	mov	r1, r3
 8087a16:	480a      	ldr	r0, [pc, #40]	; (8087a40 <BSP_PRESSURE_MspInit+0x114>)
 8087a18:	f002 fbd6 	bl	808a1c8 <HAL_GPIO_Init>

	/*##-3- Configure the NVIC for SPI2 #########################################*/
	/* NVIC configuration for SPI2 interrupt */
	HAL_NVIC_SetPriority(SPI2_IRQn, 0x0F, 0);
 8087a1c:	2200      	movs	r2, #0
 8087a1e:	210f      	movs	r1, #15
 8087a20:	2024      	movs	r0, #36	; 0x24
 8087a22:	f001 fc99 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8087a26:	2024      	movs	r0, #36	; 0x24
 8087a28:	f001 fcb2 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8087a2c:	bf00      	nop
 8087a2e:	3728      	adds	r7, #40	; 0x28
 8087a30:	46bd      	mov	sp, r7
 8087a32:	bd80      	pop	{r7, pc}
 8087a34:	40023800 	.word	0x40023800
 8087a38:	40020000 	.word	0x40020000
 8087a3c:	40022000 	.word	0x40022000
 8087a40:	40020400 	.word	0x40020400

08087a44 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8087a44:	b580      	push	{r7, lr}
 8087a46:	b082      	sub	sp, #8
 8087a48:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8087a4a:	4b28      	ldr	r3, [pc, #160]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a4c:	4a28      	ldr	r2, [pc, #160]	; (8087af0 <BSP_QSPI_Init+0xac>)
 8087a4e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8087a50:	4826      	ldr	r0, [pc, #152]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a52:	f004 f881 	bl	808bb58 <HAL_QSPI_DeInit>
 8087a56:	4603      	mov	r3, r0
 8087a58:	2b00      	cmp	r3, #0
 8087a5a:	d001      	beq.n	8087a60 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8087a5c:	2301      	movs	r3, #1
 8087a5e:	e040      	b.n	8087ae2 <BSP_QSPI_Init+0x9e>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8087a60:	2100      	movs	r1, #0
 8087a62:	4822      	ldr	r0, [pc, #136]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a64:	f000 f9b0 	bl	8087dc8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8087a68:	4b20      	ldr	r3, [pc, #128]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a6a:	2201      	movs	r2, #1
 8087a6c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8087a6e:	4b1f      	ldr	r3, [pc, #124]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a70:	2204      	movs	r2, #4
 8087a72:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8087a74:	4b1d      	ldr	r3, [pc, #116]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a76:	2210      	movs	r2, #16
 8087a78:	60da      	str	r2, [r3, #12]
 8087a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8087a7e:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8087a80:	687b      	ldr	r3, [r7, #4]
 8087a82:	fa93 f3a3 	rbit	r3, r3
 8087a86:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8087a88:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8087a8a:	fab3 f383 	clz	r3, r3
 8087a8e:	3b01      	subs	r3, #1
 8087a90:	461a      	mov	r2, r3
 8087a92:	4b16      	ldr	r3, [pc, #88]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a94:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8087a96:	4b15      	ldr	r3, [pc, #84]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087a98:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8087a9c:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8087a9e:	4b13      	ldr	r3, [pc, #76]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087aa0:	2200      	movs	r2, #0
 8087aa2:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8087aa4:	4b11      	ldr	r3, [pc, #68]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087aa6:	2200      	movs	r2, #0
 8087aa8:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8087aaa:	4b10      	ldr	r3, [pc, #64]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087aac:	2200      	movs	r2, #0
 8087aae:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8087ab0:	480e      	ldr	r0, [pc, #56]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087ab2:	f003 ffc7 	bl	808ba44 <HAL_QSPI_Init>
 8087ab6:	4603      	mov	r3, r0
 8087ab8:	2b00      	cmp	r3, #0
 8087aba:	d001      	beq.n	8087ac0 <BSP_QSPI_Init+0x7c>
  {
    return QSPI_ERROR;
 8087abc:	2301      	movs	r3, #1
 8087abe:	e010      	b.n	8087ae2 <BSP_QSPI_Init+0x9e>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8087ac0:	480a      	ldr	r0, [pc, #40]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087ac2:	f000 fa41 	bl	8087f48 <QSPI_ResetMemory>
 8087ac6:	4603      	mov	r3, r0
 8087ac8:	2b00      	cmp	r3, #0
 8087aca:	d001      	beq.n	8087ad0 <BSP_QSPI_Init+0x8c>
  {
    return QSPI_NOT_SUPPORTED;
 8087acc:	2304      	movs	r3, #4
 8087ace:	e008      	b.n	8087ae2 <BSP_QSPI_Init+0x9e>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8087ad0:	4806      	ldr	r0, [pc, #24]	; (8087aec <BSP_QSPI_Init+0xa8>)
 8087ad2:	f000 fa7b 	bl	8087fcc <QSPI_DummyCyclesCfg>
 8087ad6:	4603      	mov	r3, r0
 8087ad8:	2b00      	cmp	r3, #0
 8087ada:	d001      	beq.n	8087ae0 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_NOT_SUPPORTED;
 8087adc:	2304      	movs	r3, #4
 8087ade:	e000      	b.n	8087ae2 <BSP_QSPI_Init+0x9e>
  }
  
  return QSPI_OK;
 8087ae0:	2300      	movs	r3, #0
}
 8087ae2:	4618      	mov	r0, r3
 8087ae4:	3708      	adds	r7, #8
 8087ae6:	46bd      	mov	sp, r7
 8087ae8:	bd80      	pop	{r7, pc}
 8087aea:	bf00      	nop
 8087aec:	2002d994 	.word	0x2002d994
 8087af0:	a0001000 	.word	0xa0001000

08087af4 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8087af4:	b580      	push	{r7, lr}
 8087af6:	b092      	sub	sp, #72	; 0x48
 8087af8:	af00      	add	r7, sp, #0
 8087afa:	60f8      	str	r0, [r7, #12]
 8087afc:	60b9      	str	r1, [r7, #8]
 8087afe:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087b04:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8087b06:	23eb      	movs	r3, #235	; 0xeb
 8087b08:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8087b0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8087b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8087b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087b14:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8087b16:	68bb      	ldr	r3, [r7, #8]
 8087b18:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087b1a:	2300      	movs	r3, #0
 8087b1c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8087b1e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8087b22:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8087b24:	230a      	movs	r3, #10
 8087b26:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8087b28:	687b      	ldr	r3, [r7, #4]
 8087b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087b2c:	2300      	movs	r3, #0
 8087b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087b30:	2300      	movs	r3, #0
 8087b32:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087b34:	2300      	movs	r3, #0
 8087b36:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087b38:	f107 0310 	add.w	r3, r7, #16
 8087b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8087b40:	4619      	mov	r1, r3
 8087b42:	4816      	ldr	r0, [pc, #88]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b44:	f004 f84c 	bl	808bbe0 <HAL_QSPI_Command>
 8087b48:	4603      	mov	r3, r0
 8087b4a:	2b00      	cmp	r3, #0
 8087b4c:	d001      	beq.n	8087b52 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8087b4e:	2301      	movs	r3, #1
 8087b50:	e01f      	b.n	8087b92 <BSP_QSPI_Read+0x9e>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8087b52:	4b12      	ldr	r3, [pc, #72]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b54:	681b      	ldr	r3, [r3, #0]
 8087b56:	685b      	ldr	r3, [r3, #4]
 8087b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8087b5c:	4b0f      	ldr	r3, [pc, #60]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b5e:	681b      	ldr	r3, [r3, #0]
 8087b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8087b64:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8087b6a:	68f9      	ldr	r1, [r7, #12]
 8087b6c:	480b      	ldr	r0, [pc, #44]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b6e:	f004 f92c 	bl	808bdca <HAL_QSPI_Receive>
 8087b72:	4603      	mov	r3, r0
 8087b74:	2b00      	cmp	r3, #0
 8087b76:	d001      	beq.n	8087b7c <BSP_QSPI_Read+0x88>
  {
    return QSPI_ERROR;
 8087b78:	2301      	movs	r3, #1
 8087b7a:	e00a      	b.n	8087b92 <BSP_QSPI_Read+0x9e>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8087b7c:	4b07      	ldr	r3, [pc, #28]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b7e:	681b      	ldr	r3, [r3, #0]
 8087b80:	685b      	ldr	r3, [r3, #4]
 8087b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8087b86:	4b05      	ldr	r3, [pc, #20]	; (8087b9c <BSP_QSPI_Read+0xa8>)
 8087b88:	681b      	ldr	r3, [r3, #0]
 8087b8a:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8087b8e:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8087b90:	2300      	movs	r3, #0
}
 8087b92:	4618      	mov	r0, r3
 8087b94:	3748      	adds	r7, #72	; 0x48
 8087b96:	46bd      	mov	sp, r7
 8087b98:	bd80      	pop	{r7, pc}
 8087b9a:	bf00      	nop
 8087b9c:	2002d994 	.word	0x2002d994

08087ba0 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8087ba0:	b580      	push	{r7, lr}
 8087ba2:	b096      	sub	sp, #88	; 0x58
 8087ba4:	af00      	add	r7, sp, #0
 8087ba6:	60f8      	str	r0, [r7, #12]
 8087ba8:	60b9      	str	r1, [r7, #8]
 8087baa:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8087bac:	68bb      	ldr	r3, [r7, #8]
 8087bae:	b2db      	uxtb	r3, r3
 8087bb0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8087bb4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8087bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8087bb8:	687b      	ldr	r3, [r7, #4]
 8087bba:	429a      	cmp	r2, r3
 8087bbc:	d901      	bls.n	8087bc2 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8087bbe:	687b      	ldr	r3, [r7, #4]
 8087bc0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8087bc2:	68bb      	ldr	r3, [r7, #8]
 8087bc4:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8087bc6:	68ba      	ldr	r2, [r7, #8]
 8087bc8:	687b      	ldr	r3, [r7, #4]
 8087bca:	4413      	add	r3, r2
 8087bcc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8087bd4:	2312      	movs	r3, #18
 8087bd6:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8087bd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8087bdc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8087bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087be2:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087be4:	2300      	movs	r3, #0
 8087be6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8087be8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8087bec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8087bee:	2300      	movs	r3, #0
 8087bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087bf2:	2300      	movs	r3, #0
 8087bf4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087bf6:	2300      	movs	r3, #0
 8087bf8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087bfa:	2300      	movs	r3, #0
 8087bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8087bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8087c00:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8087c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8087c04:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8087c06:	4824      	ldr	r0, [pc, #144]	; (8087c98 <BSP_QSPI_Write+0xf8>)
 8087c08:	f000 fa53 	bl	80880b2 <QSPI_WriteEnable>
 8087c0c:	4603      	mov	r3, r0
 8087c0e:	2b00      	cmp	r3, #0
 8087c10:	d001      	beq.n	8087c16 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8087c12:	2301      	movs	r3, #1
 8087c14:	e03b      	b.n	8087c8e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087c16:	f107 0314 	add.w	r3, r7, #20
 8087c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8087c1e:	4619      	mov	r1, r3
 8087c20:	481d      	ldr	r0, [pc, #116]	; (8087c98 <BSP_QSPI_Write+0xf8>)
 8087c22:	f003 ffdd 	bl	808bbe0 <HAL_QSPI_Command>
 8087c26:	4603      	mov	r3, r0
 8087c28:	2b00      	cmp	r3, #0
 8087c2a:	d001      	beq.n	8087c30 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8087c2c:	2301      	movs	r3, #1
 8087c2e:	e02e      	b.n	8087c8e <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8087c34:	68f9      	ldr	r1, [r7, #12]
 8087c36:	4818      	ldr	r0, [pc, #96]	; (8087c98 <BSP_QSPI_Write+0xf8>)
 8087c38:	f004 f832 	bl	808bca0 <HAL_QSPI_Transmit>
 8087c3c:	4603      	mov	r3, r0
 8087c3e:	2b00      	cmp	r3, #0
 8087c40:	d001      	beq.n	8087c46 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8087c42:	2301      	movs	r3, #1
 8087c44:	e023      	b.n	8087c8e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8087c46:	f241 3188 	movw	r1, #5000	; 0x1388
 8087c4a:	4813      	ldr	r0, [pc, #76]	; (8087c98 <BSP_QSPI_Write+0xf8>)
 8087c4c:	f000 fa7a 	bl	8088144 <QSPI_AutoPollingMemReady>
 8087c50:	4603      	mov	r3, r0
 8087c52:	2b00      	cmp	r3, #0
 8087c54:	d001      	beq.n	8087c5a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8087c56:	2301      	movs	r3, #1
 8087c58:	e019      	b.n	8087c8e <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8087c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8087c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8087c5e:	4413      	add	r3, r2
 8087c60:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8087c62:	68fa      	ldr	r2, [r7, #12]
 8087c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8087c66:	4413      	add	r3, r2
 8087c68:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8087c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8087c6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8087c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8087c72:	429a      	cmp	r2, r3
 8087c74:	d203      	bcs.n	8087c7e <BSP_QSPI_Write+0xde>
 8087c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8087c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8087c7a:	1ad3      	subs	r3, r2, r3
 8087c7c:	e001      	b.n	8087c82 <BSP_QSPI_Write+0xe2>
 8087c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087c82:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8087c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8087c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8087c88:	429a      	cmp	r2, r3
 8087c8a:	d3b8      	bcc.n	8087bfe <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8087c8c:	2300      	movs	r3, #0
}
 8087c8e:	4618      	mov	r0, r3
 8087c90:	3758      	adds	r7, #88	; 0x58
 8087c92:	46bd      	mov	sp, r7
 8087c94:	bd80      	pop	{r7, pc}
 8087c96:	bf00      	nop
 8087c98:	2002d994 	.word	0x2002d994

08087c9c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8087c9c:	b580      	push	{r7, lr}
 8087c9e:	b090      	sub	sp, #64	; 0x40
 8087ca0:	af00      	add	r7, sp, #0
 8087ca2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087ca8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8087caa:	2320      	movs	r3, #32
 8087cac:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8087cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087cb2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8087cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087cb8:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8087cba:	687b      	ldr	r3, [r7, #4]
 8087cbc:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087cbe:	2300      	movs	r3, #0
 8087cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8087cc2:	2300      	movs	r3, #0
 8087cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8087cc6:	2300      	movs	r3, #0
 8087cc8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087cca:	2300      	movs	r3, #0
 8087ccc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087cce:	2300      	movs	r3, #0
 8087cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087cd2:	2300      	movs	r3, #0
 8087cd4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8087cd6:	4812      	ldr	r0, [pc, #72]	; (8087d20 <BSP_QSPI_Erase_Block+0x84>)
 8087cd8:	f000 f9eb 	bl	80880b2 <QSPI_WriteEnable>
 8087cdc:	4603      	mov	r3, r0
 8087cde:	2b00      	cmp	r3, #0
 8087ce0:	d001      	beq.n	8087ce6 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8087ce2:	2301      	movs	r3, #1
 8087ce4:	e017      	b.n	8087d16 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087ce6:	f107 0308 	add.w	r3, r7, #8
 8087cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8087cee:	4619      	mov	r1, r3
 8087cf0:	480b      	ldr	r0, [pc, #44]	; (8087d20 <BSP_QSPI_Erase_Block+0x84>)
 8087cf2:	f003 ff75 	bl	808bbe0 <HAL_QSPI_Command>
 8087cf6:	4603      	mov	r3, r0
 8087cf8:	2b00      	cmp	r3, #0
 8087cfa:	d001      	beq.n	8087d00 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8087cfc:	2301      	movs	r3, #1
 8087cfe:	e00a      	b.n	8087d16 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8087d00:	f44f 7148 	mov.w	r1, #800	; 0x320
 8087d04:	4806      	ldr	r0, [pc, #24]	; (8087d20 <BSP_QSPI_Erase_Block+0x84>)
 8087d06:	f000 fa1d 	bl	8088144 <QSPI_AutoPollingMemReady>
 8087d0a:	4603      	mov	r3, r0
 8087d0c:	2b00      	cmp	r3, #0
 8087d0e:	d001      	beq.n	8087d14 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8087d10:	2301      	movs	r3, #1
 8087d12:	e000      	b.n	8087d16 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8087d14:	2300      	movs	r3, #0
}
 8087d16:	4618      	mov	r0, r3
 8087d18:	3740      	adds	r7, #64	; 0x40
 8087d1a:	46bd      	mov	sp, r7
 8087d1c:	bd80      	pop	{r7, pc}
 8087d1e:	bf00      	nop
 8087d20:	2002d994 	.word	0x2002d994

08087d24 <BSP_QSPI_GetInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo: pointer on the configuration structure  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
 8087d24:	b480      	push	{r7}
 8087d26:	b083      	sub	sp, #12
 8087d28:	af00      	add	r7, sp, #0
 8087d2a:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize          = N25Q128A_FLASH_SIZE;
 8087d2c:	687b      	ldr	r3, [r7, #4]
 8087d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8087d32:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8087d34:	687b      	ldr	r3, [r7, #4]
 8087d36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8087d3a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8087d3c:	687b      	ldr	r3, [r7, #4]
 8087d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8087d42:	609a      	str	r2, [r3, #8]
  pInfo->ProgPageSize       = N25Q128A_PAGE_SIZE;
 8087d44:	687b      	ldr	r3, [r7, #4]
 8087d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8087d4a:	60da      	str	r2, [r3, #12]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8087d4c:	687b      	ldr	r3, [r7, #4]
 8087d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8087d52:	611a      	str	r2, [r3, #16]
  
  return QSPI_OK;
 8087d54:	2300      	movs	r3, #0
}
 8087d56:	4618      	mov	r0, r3
 8087d58:	370c      	adds	r7, #12
 8087d5a:	46bd      	mov	sp, r7
 8087d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087d60:	4770      	bx	lr
	...

08087d64 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8087d64:	b580      	push	{r7, lr}
 8087d66:	b090      	sub	sp, #64	; 0x40
 8087d68:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087d6e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8087d70:	23eb      	movs	r3, #235	; 0xeb
 8087d72:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8087d74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8087d78:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8087d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087d7e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087d80:	2300      	movs	r3, #0
 8087d82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8087d84:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8087d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8087d8a:	230a      	movs	r3, #10
 8087d8c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087d8e:	2300      	movs	r3, #0
 8087d90:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087d92:	2300      	movs	r3, #0
 8087d94:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087d96:	2300      	movs	r3, #0
 8087d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8087d9a:	2300      	movs	r3, #0
 8087d9c:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8087d9e:	2300      	movs	r3, #0
 8087da0:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8087da2:	463a      	mov	r2, r7
 8087da4:	f107 0308 	add.w	r3, r7, #8
 8087da8:	4619      	mov	r1, r3
 8087daa:	4806      	ldr	r0, [pc, #24]	; (8087dc4 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8087dac:	f004 f926 	bl	808bffc <HAL_QSPI_MemoryMapped>
 8087db0:	4603      	mov	r3, r0
 8087db2:	2b00      	cmp	r3, #0
 8087db4:	d001      	beq.n	8087dba <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8087db6:	2301      	movs	r3, #1
 8087db8:	e000      	b.n	8087dbc <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8087dba:	2300      	movs	r3, #0
}
 8087dbc:	4618      	mov	r0, r3
 8087dbe:	3740      	adds	r7, #64	; 0x40
 8087dc0:	46bd      	mov	sp, r7
 8087dc2:	bd80      	pop	{r7, pc}
 8087dc4:	2002d994 	.word	0x2002d994

08087dc8 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8087dc8:	b580      	push	{r7, lr}
 8087dca:	b08e      	sub	sp, #56	; 0x38
 8087dcc:	af00      	add	r7, sp, #0
 8087dce:	6078      	str	r0, [r7, #4]
 8087dd0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8087dd2:	4b59      	ldr	r3, [pc, #356]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087dd6:	4a58      	ldr	r2, [pc, #352]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087dd8:	f043 0302 	orr.w	r3, r3, #2
 8087ddc:	6393      	str	r3, [r2, #56]	; 0x38
 8087dde:	4b56      	ldr	r3, [pc, #344]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087de2:	f003 0302 	and.w	r3, r3, #2
 8087de6:	623b      	str	r3, [r7, #32]
 8087de8:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8087dea:	4b53      	ldr	r3, [pc, #332]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087dec:	699b      	ldr	r3, [r3, #24]
 8087dee:	4a52      	ldr	r2, [pc, #328]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087df0:	f043 0302 	orr.w	r3, r3, #2
 8087df4:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8087df6:	4b50      	ldr	r3, [pc, #320]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087df8:	699b      	ldr	r3, [r3, #24]
 8087dfa:	4a4f      	ldr	r2, [pc, #316]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087dfc:	f023 0302 	bic.w	r3, r3, #2
 8087e00:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8087e02:	4b4d      	ldr	r3, [pc, #308]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e06:	4a4c      	ldr	r2, [pc, #304]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e08:	f043 0302 	orr.w	r3, r3, #2
 8087e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8087e0e:	4b4a      	ldr	r3, [pc, #296]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e12:	f003 0302 	and.w	r3, r3, #2
 8087e16:	61fb      	str	r3, [r7, #28]
 8087e18:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8087e1a:	4b47      	ldr	r3, [pc, #284]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e1e:	4a46      	ldr	r2, [pc, #280]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e20:	f043 0302 	orr.w	r3, r3, #2
 8087e24:	6313      	str	r3, [r2, #48]	; 0x30
 8087e26:	4b44      	ldr	r3, [pc, #272]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e2a:	f003 0302 	and.w	r3, r3, #2
 8087e2e:	61bb      	str	r3, [r7, #24]
 8087e30:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8087e32:	4b41      	ldr	r3, [pc, #260]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e36:	4a40      	ldr	r2, [pc, #256]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e38:	f043 0308 	orr.w	r3, r3, #8
 8087e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8087e3e:	4b3e      	ldr	r3, [pc, #248]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e42:	f003 0308 	and.w	r3, r3, #8
 8087e46:	617b      	str	r3, [r7, #20]
 8087e48:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8087e4a:	4b3b      	ldr	r3, [pc, #236]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e4e:	4a3a      	ldr	r2, [pc, #232]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e50:	f043 0308 	orr.w	r3, r3, #8
 8087e54:	6313      	str	r3, [r2, #48]	; 0x30
 8087e56:	4b38      	ldr	r3, [pc, #224]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e5a:	f003 0308 	and.w	r3, r3, #8
 8087e5e:	613b      	str	r3, [r7, #16]
 8087e60:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8087e62:	4b35      	ldr	r3, [pc, #212]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e66:	4a34      	ldr	r2, [pc, #208]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e68:	f043 0310 	orr.w	r3, r3, #16
 8087e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8087e6e:	4b32      	ldr	r3, [pc, #200]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e72:	f003 0310 	and.w	r3, r3, #16
 8087e76:	60fb      	str	r3, [r7, #12]
 8087e78:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8087e7a:	4b2f      	ldr	r3, [pc, #188]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e7e:	4a2e      	ldr	r2, [pc, #184]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e80:	f043 0308 	orr.w	r3, r3, #8
 8087e84:	6313      	str	r3, [r2, #48]	; 0x30
 8087e86:	4b2c      	ldr	r3, [pc, #176]	; (8087f38 <BSP_QSPI_MspInit+0x170>)
 8087e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087e8a:	f003 0308 	and.w	r3, r3, #8
 8087e8e:	60bb      	str	r3, [r7, #8]
 8087e90:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8087e92:	2340      	movs	r3, #64	; 0x40
 8087e94:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8087e96:	2302      	movs	r3, #2
 8087e98:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8087e9a:	2301      	movs	r3, #1
 8087e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8087e9e:	2303      	movs	r3, #3
 8087ea0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8087ea2:	230a      	movs	r3, #10
 8087ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8087ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087eaa:	4619      	mov	r1, r3
 8087eac:	4823      	ldr	r0, [pc, #140]	; (8087f3c <BSP_QSPI_MspInit+0x174>)
 8087eae:	f002 f98b 	bl	808a1c8 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8087eb2:	2304      	movs	r3, #4
 8087eb4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8087eb6:	2300      	movs	r3, #0
 8087eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8087eba:	2309      	movs	r3, #9
 8087ebc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8087ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087ec2:	4619      	mov	r1, r3
 8087ec4:	481d      	ldr	r0, [pc, #116]	; (8087f3c <BSP_QSPI_MspInit+0x174>)
 8087ec6:	f002 f97f 	bl	808a1c8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8087eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8087ece:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8087ed0:	2309      	movs	r3, #9
 8087ed2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8087ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087ed8:	4619      	mov	r1, r3
 8087eda:	4819      	ldr	r0, [pc, #100]	; (8087f40 <BSP_QSPI_MspInit+0x178>)
 8087edc:	f002 f974 	bl	808a1c8 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8087ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8087ee4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8087ee6:	2309      	movs	r3, #9
 8087ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8087eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087eee:	4619      	mov	r1, r3
 8087ef0:	4813      	ldr	r0, [pc, #76]	; (8087f40 <BSP_QSPI_MspInit+0x178>)
 8087ef2:	f002 f969 	bl	808a1c8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8087ef6:	2304      	movs	r3, #4
 8087ef8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8087efa:	2309      	movs	r3, #9
 8087efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8087efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087f02:	4619      	mov	r1, r3
 8087f04:	480f      	ldr	r0, [pc, #60]	; (8087f44 <BSP_QSPI_MspInit+0x17c>)
 8087f06:	f002 f95f 	bl	808a1c8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8087f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087f0e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8087f10:	2309      	movs	r3, #9
 8087f12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8087f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8087f18:	4619      	mov	r1, r3
 8087f1a:	4809      	ldr	r0, [pc, #36]	; (8087f40 <BSP_QSPI_MspInit+0x178>)
 8087f1c:	f002 f954 	bl	808a1c8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8087f20:	2200      	movs	r2, #0
 8087f22:	210f      	movs	r1, #15
 8087f24:	205c      	movs	r0, #92	; 0x5c
 8087f26:	f001 fa17 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8087f2a:	205c      	movs	r0, #92	; 0x5c
 8087f2c:	f001 fa30 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8087f30:	bf00      	nop
 8087f32:	3738      	adds	r7, #56	; 0x38
 8087f34:	46bd      	mov	sp, r7
 8087f36:	bd80      	pop	{r7, pc}
 8087f38:	40023800 	.word	0x40023800
 8087f3c:	40020400 	.word	0x40020400
 8087f40:	40020c00 	.word	0x40020c00
 8087f44:	40021000 	.word	0x40021000

08087f48 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8087f48:	b580      	push	{r7, lr}
 8087f4a:	b090      	sub	sp, #64	; 0x40
 8087f4c:	af00      	add	r7, sp, #0
 8087f4e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087f54:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8087f56:	2366      	movs	r3, #102	; 0x66
 8087f58:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8087f5a:	2300      	movs	r3, #0
 8087f5c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087f5e:	2300      	movs	r3, #0
 8087f60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8087f62:	2300      	movs	r3, #0
 8087f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8087f66:	2300      	movs	r3, #0
 8087f68:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087f6a:	2300      	movs	r3, #0
 8087f6c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087f6e:	2300      	movs	r3, #0
 8087f70:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087f72:	2300      	movs	r3, #0
 8087f74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087f76:	f107 0308 	add.w	r3, r7, #8
 8087f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8087f7e:	4619      	mov	r1, r3
 8087f80:	6878      	ldr	r0, [r7, #4]
 8087f82:	f003 fe2d 	bl	808bbe0 <HAL_QSPI_Command>
 8087f86:	4603      	mov	r3, r0
 8087f88:	2b00      	cmp	r3, #0
 8087f8a:	d001      	beq.n	8087f90 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8087f8c:	2301      	movs	r3, #1
 8087f8e:	e019      	b.n	8087fc4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8087f90:	2399      	movs	r3, #153	; 0x99
 8087f92:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8087f94:	f107 0308 	add.w	r3, r7, #8
 8087f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8087f9c:	4619      	mov	r1, r3
 8087f9e:	6878      	ldr	r0, [r7, #4]
 8087fa0:	f003 fe1e 	bl	808bbe0 <HAL_QSPI_Command>
 8087fa4:	4603      	mov	r3, r0
 8087fa6:	2b00      	cmp	r3, #0
 8087fa8:	d001      	beq.n	8087fae <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8087faa:	2301      	movs	r3, #1
 8087fac:	e00a      	b.n	8087fc4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8087fae:	f241 3188 	movw	r1, #5000	; 0x1388
 8087fb2:	6878      	ldr	r0, [r7, #4]
 8087fb4:	f000 f8c6 	bl	8088144 <QSPI_AutoPollingMemReady>
 8087fb8:	4603      	mov	r3, r0
 8087fba:	2b00      	cmp	r3, #0
 8087fbc:	d001      	beq.n	8087fc2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8087fbe:	2301      	movs	r3, #1
 8087fc0:	e000      	b.n	8087fc4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8087fc2:	2300      	movs	r3, #0
}
 8087fc4:	4618      	mov	r0, r3
 8087fc6:	3740      	adds	r7, #64	; 0x40
 8087fc8:	46bd      	mov	sp, r7
 8087fca:	bd80      	pop	{r7, pc}

08087fcc <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8087fcc:	b580      	push	{r7, lr}
 8087fce:	b094      	sub	sp, #80	; 0x50
 8087fd0:	af00      	add	r7, sp, #0
 8087fd2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8087fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8087fda:	2385      	movs	r3, #133	; 0x85
 8087fdc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8087fde:	2300      	movs	r3, #0
 8087fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8087fe2:	2300      	movs	r3, #0
 8087fe4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8087fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8087fea:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8087fec:	2300      	movs	r3, #0
 8087fee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8087ff0:	2301      	movs	r3, #1
 8087ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8087ff4:	2300      	movs	r3, #0
 8087ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8087ff8:	2300      	movs	r3, #0
 8087ffa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8087ffc:	2300      	movs	r3, #0
 8087ffe:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8088000:	f107 0310 	add.w	r3, r7, #16
 8088004:	f241 3288 	movw	r2, #5000	; 0x1388
 8088008:	4619      	mov	r1, r3
 808800a:	6878      	ldr	r0, [r7, #4]
 808800c:	f003 fde8 	bl	808bbe0 <HAL_QSPI_Command>
 8088010:	4603      	mov	r3, r0
 8088012:	2b00      	cmp	r3, #0
 8088014:	d001      	beq.n	808801a <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8088016:	2301      	movs	r3, #1
 8088018:	e047      	b.n	80880aa <QSPI_DummyCyclesCfg+0xde>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 808801a:	f107 030f 	add.w	r3, r7, #15
 808801e:	f241 3288 	movw	r2, #5000	; 0x1388
 8088022:	4619      	mov	r1, r3
 8088024:	6878      	ldr	r0, [r7, #4]
 8088026:	f003 fed0 	bl	808bdca <HAL_QSPI_Receive>
 808802a:	4603      	mov	r3, r0
 808802c:	2b00      	cmp	r3, #0
 808802e:	d001      	beq.n	8088034 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8088030:	2301      	movs	r3, #1
 8088032:	e03a      	b.n	80880aa <QSPI_DummyCyclesCfg+0xde>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8088034:	6878      	ldr	r0, [r7, #4]
 8088036:	f000 f83c 	bl	80880b2 <QSPI_WriteEnable>
 808803a:	4603      	mov	r3, r0
 808803c:	2b00      	cmp	r3, #0
 808803e:	d001      	beq.n	8088044 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8088040:	2301      	movs	r3, #1
 8088042:	e032      	b.n	80880aa <QSPI_DummyCyclesCfg+0xde>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8088044:	2381      	movs	r3, #129	; 0x81
 8088046:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8088048:	7bfb      	ldrb	r3, [r7, #15]
 808804a:	b25b      	sxtb	r3, r3
 808804c:	f003 030f 	and.w	r3, r3, #15
 8088050:	b25a      	sxtb	r2, r3
 8088052:	23f0      	movs	r3, #240	; 0xf0
 8088054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8088056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8088058:	fa93 f3a3 	rbit	r3, r3
 808805c:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 808805e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088060:	fab3 f383 	clz	r3, r3
 8088064:	210a      	movs	r1, #10
 8088066:	fa01 f303 	lsl.w	r3, r1, r3
 808806a:	b25b      	sxtb	r3, r3
 808806c:	4313      	orrs	r3, r2
 808806e:	b25b      	sxtb	r3, r3
 8088070:	b2db      	uxtb	r3, r3
 8088072:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8088074:	f107 0310 	add.w	r3, r7, #16
 8088078:	f241 3288 	movw	r2, #5000	; 0x1388
 808807c:	4619      	mov	r1, r3
 808807e:	6878      	ldr	r0, [r7, #4]
 8088080:	f003 fdae 	bl	808bbe0 <HAL_QSPI_Command>
 8088084:	4603      	mov	r3, r0
 8088086:	2b00      	cmp	r3, #0
 8088088:	d001      	beq.n	808808e <QSPI_DummyCyclesCfg+0xc2>
  {
    return QSPI_ERROR;
 808808a:	2301      	movs	r3, #1
 808808c:	e00d      	b.n	80880aa <QSPI_DummyCyclesCfg+0xde>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 808808e:	f107 030f 	add.w	r3, r7, #15
 8088092:	f241 3288 	movw	r2, #5000	; 0x1388
 8088096:	4619      	mov	r1, r3
 8088098:	6878      	ldr	r0, [r7, #4]
 808809a:	f003 fe01 	bl	808bca0 <HAL_QSPI_Transmit>
 808809e:	4603      	mov	r3, r0
 80880a0:	2b00      	cmp	r3, #0
 80880a2:	d001      	beq.n	80880a8 <QSPI_DummyCyclesCfg+0xdc>
  {
    return QSPI_ERROR;
 80880a4:	2301      	movs	r3, #1
 80880a6:	e000      	b.n	80880aa <QSPI_DummyCyclesCfg+0xde>
  }
  
  return QSPI_OK;
 80880a8:	2300      	movs	r3, #0
}
 80880aa:	4618      	mov	r0, r3
 80880ac:	3750      	adds	r7, #80	; 0x50
 80880ae:	46bd      	mov	sp, r7
 80880b0:	bd80      	pop	{r7, pc}

080880b2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80880b2:	b580      	push	{r7, lr}
 80880b4:	b096      	sub	sp, #88	; 0x58
 80880b6:	af00      	add	r7, sp, #0
 80880b8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80880ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80880be:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80880c0:	2306      	movs	r3, #6
 80880c2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80880c4:	2300      	movs	r3, #0
 80880c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80880c8:	2300      	movs	r3, #0
 80880ca:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80880cc:	2300      	movs	r3, #0
 80880ce:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80880d0:	2300      	movs	r3, #0
 80880d2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80880d4:	2300      	movs	r3, #0
 80880d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80880d8:	2300      	movs	r3, #0
 80880da:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80880dc:	2300      	movs	r3, #0
 80880de:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80880e0:	f107 0320 	add.w	r3, r7, #32
 80880e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80880e8:	4619      	mov	r1, r3
 80880ea:	6878      	ldr	r0, [r7, #4]
 80880ec:	f003 fd78 	bl	808bbe0 <HAL_QSPI_Command>
 80880f0:	4603      	mov	r3, r0
 80880f2:	2b00      	cmp	r3, #0
 80880f4:	d001      	beq.n	80880fa <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80880f6:	2301      	movs	r3, #1
 80880f8:	e020      	b.n	808813c <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 80880fa:	2302      	movs	r3, #2
 80880fc:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80880fe:	2302      	movs	r3, #2
 8088100:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8088102:	2300      	movs	r3, #0
 8088104:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8088106:	2301      	movs	r3, #1
 8088108:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 808810a:	2310      	movs	r3, #16
 808810c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 808810e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8088112:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8088114:	2305      	movs	r3, #5
 8088116:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8088118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808811c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 808811e:	f107 0208 	add.w	r2, r7, #8
 8088122:	f107 0120 	add.w	r1, r7, #32
 8088126:	f241 3388 	movw	r3, #5000	; 0x1388
 808812a:	6878      	ldr	r0, [r7, #4]
 808812c:	f003 feed 	bl	808bf0a <HAL_QSPI_AutoPolling>
 8088130:	4603      	mov	r3, r0
 8088132:	2b00      	cmp	r3, #0
 8088134:	d001      	beq.n	808813a <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8088136:	2301      	movs	r3, #1
 8088138:	e000      	b.n	808813c <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 808813a:	2300      	movs	r3, #0
}
 808813c:	4618      	mov	r0, r3
 808813e:	3758      	adds	r7, #88	; 0x58
 8088140:	46bd      	mov	sp, r7
 8088142:	bd80      	pop	{r7, pc}

08088144 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8088144:	b580      	push	{r7, lr}
 8088146:	b096      	sub	sp, #88	; 0x58
 8088148:	af00      	add	r7, sp, #0
 808814a:	6078      	str	r0, [r7, #4]
 808814c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 808814e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8088152:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8088154:	2305      	movs	r3, #5
 8088156:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8088158:	2300      	movs	r3, #0
 808815a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 808815c:	2300      	movs	r3, #0
 808815e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8088160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8088164:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8088166:	2300      	movs	r3, #0
 8088168:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 808816a:	2300      	movs	r3, #0
 808816c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 808816e:	2300      	movs	r3, #0
 8088170:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8088172:	2300      	movs	r3, #0
 8088174:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8088176:	2300      	movs	r3, #0
 8088178:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 808817a:	2301      	movs	r3, #1
 808817c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 808817e:	2300      	movs	r3, #0
 8088180:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8088182:	2301      	movs	r3, #1
 8088184:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8088186:	2310      	movs	r3, #16
 8088188:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 808818a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 808818e:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8088190:	f107 0208 	add.w	r2, r7, #8
 8088194:	f107 0120 	add.w	r1, r7, #32
 8088198:	683b      	ldr	r3, [r7, #0]
 808819a:	6878      	ldr	r0, [r7, #4]
 808819c:	f003 feb5 	bl	808bf0a <HAL_QSPI_AutoPolling>
 80881a0:	4603      	mov	r3, r0
 80881a2:	2b00      	cmp	r3, #0
 80881a4:	d001      	beq.n	80881aa <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80881a6:	2301      	movs	r3, #1
 80881a8:	e000      	b.n	80881ac <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80881aa:	2300      	movs	r3, #0
}
 80881ac:	4618      	mov	r0, r3
 80881ae:	3758      	adds	r7, #88	; 0x58
 80881b0:	46bd      	mov	sp, r7
 80881b2:	bd80      	pop	{r7, pc}

080881b4 <BSP_RNG_InitGenerator>:
  * @brief  Random number generator initialisation
  * @param  RNG_HandleTypeDef
  * @retval None
  */
void BSP_RNG_InitGenerator(void)
{
 80881b4:	b580      	push	{r7, lr}
 80881b6:	af00      	add	r7, sp, #0
	RNG_Handle.State = HAL_RNG_STATE_RESET;
 80881b8:	4b03      	ldr	r3, [pc, #12]	; (80881c8 <BSP_RNG_InitGenerator+0x14>)
 80881ba:	2200      	movs	r2, #0
 80881bc:	725a      	strb	r2, [r3, #9]
	HAL_RNG_Init(&RNG_Handle);
 80881be:	4802      	ldr	r0, [pc, #8]	; (80881c8 <BSP_RNG_InitGenerator+0x14>)
 80881c0:	f005 fc4e 	bl	808da60 <HAL_RNG_Init>
}
 80881c4:	bf00      	nop
 80881c6:	bd80      	pop	{r7, pc}
 80881c8:	2000b988 	.word	0x2000b988

080881cc <BSP_RNG_GetNumber>:
  * @brief  Get random number
  * @param  RNG_HandleTypeDef
  * @retval 32 bit random value
  */
uint32_t BSP_RNG_GetNumber(void)
{
 80881cc:	b580      	push	{r7, lr}
 80881ce:	b082      	sub	sp, #8
 80881d0:	af00      	add	r7, sp, #0
uint32_t val;

	if (HAL_RNG_GenerateRandomNumber(&RNG_Handle, &val) == HAL_OK)
 80881d2:	1d3b      	adds	r3, r7, #4
 80881d4:	4619      	mov	r1, r3
 80881d6:	4807      	ldr	r0, [pc, #28]	; (80881f4 <BSP_RNG_GetNumber+0x28>)
 80881d8:	f005 fc69 	bl	808daae <HAL_RNG_GenerateRandomNumber>
 80881dc:	4603      	mov	r3, r0
 80881de:	2b00      	cmp	r3, #0
 80881e0:	d101      	bne.n	80881e6 <BSP_RNG_GetNumber+0x1a>
		return val;
 80881e2:	687b      	ldr	r3, [r7, #4]
 80881e4:	e001      	b.n	80881ea <BSP_RNG_GetNumber+0x1e>
	else
		return RNG_Handle.RandomNumber;
 80881e6:	4b03      	ldr	r3, [pc, #12]	; (80881f4 <BSP_RNG_GetNumber+0x28>)
 80881e8:	685b      	ldr	r3, [r3, #4]
}
 80881ea:	4618      	mov	r0, r3
 80881ec:	3708      	adds	r7, #8
 80881ee:	46bd      	mov	sp, r7
 80881f0:	bd80      	pop	{r7, pc}
 80881f2:	bf00      	nop
 80881f4:	2000b988 	.word	0x2000b988

080881f8 <HAL_RNG_MspInit>:
  * @brief  Low level Init (clock)
  * @param  RNG_HandleTypeDef
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80881f8:	b480      	push	{r7}
 80881fa:	b085      	sub	sp, #20
 80881fc:	af00      	add	r7, sp, #0
 80881fe:	6078      	str	r0, [r7, #4]
	/* Reset RNG */
	__HAL_RCC_RNG_FORCE_RESET();
 8088200:	4b10      	ldr	r3, [pc, #64]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 8088202:	695b      	ldr	r3, [r3, #20]
 8088204:	4a0f      	ldr	r2, [pc, #60]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 8088206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808820a:	6153      	str	r3, [r2, #20]

	/* Release Reset RNG */
	__HAL_RCC_RNG_RELEASE_RESET();
 808820c:	4b0d      	ldr	r3, [pc, #52]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 808820e:	695b      	ldr	r3, [r3, #20]
 8088210:	4a0c      	ldr	r2, [pc, #48]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 8088212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8088216:	6153      	str	r3, [r2, #20]

	/* Enable clock for RNG */
	__HAL_RCC_RNG_CLK_ENABLE();
 8088218:	4b0a      	ldr	r3, [pc, #40]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 808821a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808821c:	4a09      	ldr	r2, [pc, #36]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 808821e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8088222:	6353      	str	r3, [r2, #52]	; 0x34
 8088224:	4b07      	ldr	r3, [pc, #28]	; (8088244 <HAL_RNG_MspInit+0x4c>)
 8088226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808822c:	60fb      	str	r3, [r7, #12]
 808822e:	68fb      	ldr	r3, [r7, #12]

	hrng->Instance = RNG;
 8088230:	687b      	ldr	r3, [r7, #4]
 8088232:	4a05      	ldr	r2, [pc, #20]	; (8088248 <HAL_RNG_MspInit+0x50>)
 8088234:	601a      	str	r2, [r3, #0]
}
 8088236:	bf00      	nop
 8088238:	3714      	adds	r7, #20
 808823a:	46bd      	mov	sp, r7
 808823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088240:	4770      	bx	lr
 8088242:	bf00      	nop
 8088244:	40023800 	.word	0x40023800
 8088248:	50060800 	.word	0x50060800

0808824c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 808824c:	b580      	push	{r7, lr}
 808824e:	b082      	sub	sp, #8
 8088250:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8088252:	2300      	movs	r3, #0
 8088254:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8088256:	4b20      	ldr	r3, [pc, #128]	; (80882d8 <BSP_SD_Init+0x8c>)
 8088258:	4a20      	ldr	r2, [pc, #128]	; (80882dc <BSP_SD_Init+0x90>)
 808825a:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 808825c:	4b1e      	ldr	r3, [pc, #120]	; (80882d8 <BSP_SD_Init+0x8c>)
 808825e:	2200      	movs	r2, #0
 8088260:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8088262:	4b1d      	ldr	r3, [pc, #116]	; (80882d8 <BSP_SD_Init+0x8c>)
 8088264:	2200      	movs	r2, #0
 8088266:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8088268:	4b1b      	ldr	r3, [pc, #108]	; (80882d8 <BSP_SD_Init+0x8c>)
 808826a:	2200      	movs	r2, #0
 808826c:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 808826e:	4b1a      	ldr	r3, [pc, #104]	; (80882d8 <BSP_SD_Init+0x8c>)
 8088270:	2200      	movs	r2, #0
 8088272:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8088274:	4b18      	ldr	r3, [pc, #96]	; (80882d8 <BSP_SD_Init+0x8c>)
 8088276:	2200      	movs	r2, #0
 8088278:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 808827a:	4b17      	ldr	r3, [pc, #92]	; (80882d8 <BSP_SD_Init+0x8c>)
 808827c:	2210      	movs	r2, #16
 808827e:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8088280:	2100      	movs	r1, #0
 8088282:	4815      	ldr	r0, [pc, #84]	; (80882d8 <BSP_SD_Init+0x8c>)
 8088284:	f000 f97e 	bl	8088584 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8088288:	f000 f82a 	bl	80882e0 <BSP_SD_IsDetected>
 808828c:	4603      	mov	r3, r0
 808828e:	2b01      	cmp	r3, #1
 8088290:	d001      	beq.n	8088296 <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8088292:	2302      	movs	r3, #2
 8088294:	e01c      	b.n	80882d0 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8088296:	2100      	movs	r1, #0
 8088298:	480f      	ldr	r0, [pc, #60]	; (80882d8 <BSP_SD_Init+0x8c>)
 808829a:	f000 f887 	bl	80883ac <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 808829e:	480e      	ldr	r0, [pc, #56]	; (80882d8 <BSP_SD_Init+0x8c>)
 80882a0:	f006 f91b 	bl	808e4da <HAL_SD_Init>
 80882a4:	4603      	mov	r3, r0
 80882a6:	2b00      	cmp	r3, #0
 80882a8:	d001      	beq.n	80882ae <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 80882aa:	2301      	movs	r3, #1
 80882ac:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80882ae:	79fb      	ldrb	r3, [r7, #7]
 80882b0:	2b00      	cmp	r3, #0
 80882b2:	d10c      	bne.n	80882ce <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80882b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80882b8:	4807      	ldr	r0, [pc, #28]	; (80882d8 <BSP_SD_Init+0x8c>)
 80882ba:	f006 ffd7 	bl	808f26c <HAL_SD_ConfigWideBusOperation>
 80882be:	4603      	mov	r3, r0
 80882c0:	2b00      	cmp	r3, #0
 80882c2:	d002      	beq.n	80882ca <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 80882c4:	2301      	movs	r3, #1
 80882c6:	71fb      	strb	r3, [r7, #7]
 80882c8:	e001      	b.n	80882ce <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 80882ca:	2300      	movs	r3, #0
 80882cc:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 80882ce:	79fb      	ldrb	r3, [r7, #7]
}
 80882d0:	4618      	mov	r0, r3
 80882d2:	3708      	adds	r7, #8
 80882d4:	46bd      	mov	sp, r7
 80882d6:	bd80      	pop	{r7, pc}
 80882d8:	2002d9e0 	.word	0x2002d9e0
 80882dc:	40012c00 	.word	0x40012c00

080882e0 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 80882e0:	b580      	push	{r7, lr}
 80882e2:	b082      	sub	sp, #8
 80882e4:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 80882e6:	2301      	movs	r3, #1
 80882e8:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80882ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80882ee:	4807      	ldr	r0, [pc, #28]	; (808830c <BSP_SD_IsDetected+0x2c>)
 80882f0:	f002 fa1e 	bl	808a730 <HAL_GPIO_ReadPin>
 80882f4:	4603      	mov	r3, r0
 80882f6:	2b01      	cmp	r3, #1
 80882f8:	d101      	bne.n	80882fe <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 80882fa:	2300      	movs	r3, #0
 80882fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80882fe:	79fb      	ldrb	r3, [r7, #7]
 8088300:	b2db      	uxtb	r3, r3
}
 8088302:	4618      	mov	r0, r3
 8088304:	3708      	adds	r7, #8
 8088306:	46bd      	mov	sp, r7
 8088308:	bd80      	pop	{r7, pc}
 808830a:	bf00      	nop
 808830c:	40020800 	.word	0x40020800

08088310 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8088310:	b580      	push	{r7, lr}
 8088312:	b086      	sub	sp, #24
 8088314:	af02      	add	r7, sp, #8
 8088316:	60f8      	str	r0, [r7, #12]
 8088318:	60b9      	str	r1, [r7, #8]
 808831a:	607a      	str	r2, [r7, #4]
 808831c:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 808831e:	683b      	ldr	r3, [r7, #0]
 8088320:	9300      	str	r3, [sp, #0]
 8088322:	687b      	ldr	r3, [r7, #4]
 8088324:	68ba      	ldr	r2, [r7, #8]
 8088326:	68f9      	ldr	r1, [r7, #12]
 8088328:	4806      	ldr	r0, [pc, #24]	; (8088344 <BSP_SD_ReadBlocks+0x34>)
 808832a:	f006 f96f 	bl	808e60c <HAL_SD_ReadBlocks>
 808832e:	4603      	mov	r3, r0
 8088330:	2b00      	cmp	r3, #0
 8088332:	d001      	beq.n	8088338 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8088334:	2301      	movs	r3, #1
 8088336:	e000      	b.n	808833a <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8088338:	2300      	movs	r3, #0
  }
}
 808833a:	4618      	mov	r0, r3
 808833c:	3710      	adds	r7, #16
 808833e:	46bd      	mov	sp, r7
 8088340:	bd80      	pop	{r7, pc}
 8088342:	bf00      	nop
 8088344:	2002d9e0 	.word	0x2002d9e0

08088348 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8088348:	b580      	push	{r7, lr}
 808834a:	b086      	sub	sp, #24
 808834c:	af02      	add	r7, sp, #8
 808834e:	60f8      	str	r0, [r7, #12]
 8088350:	60b9      	str	r1, [r7, #8]
 8088352:	607a      	str	r2, [r7, #4]
 8088354:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8088356:	683b      	ldr	r3, [r7, #0]
 8088358:	9300      	str	r3, [sp, #0]
 808835a:	687b      	ldr	r3, [r7, #4]
 808835c:	68ba      	ldr	r2, [r7, #8]
 808835e:	68f9      	ldr	r1, [r7, #12]
 8088360:	4806      	ldr	r0, [pc, #24]	; (808837c <BSP_SD_WriteBlocks+0x34>)
 8088362:	f006 fae9 	bl	808e938 <HAL_SD_WriteBlocks>
 8088366:	4603      	mov	r3, r0
 8088368:	2b00      	cmp	r3, #0
 808836a:	d001      	beq.n	8088370 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 808836c:	2301      	movs	r3, #1
 808836e:	e000      	b.n	8088372 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8088370:	2300      	movs	r3, #0
  }
}
 8088372:	4618      	mov	r0, r3
 8088374:	3710      	adds	r7, #16
 8088376:	46bd      	mov	sp, r7
 8088378:	bd80      	pop	{r7, pc}
 808837a:	bf00      	nop
 808837c:	2002d9e0 	.word	0x2002d9e0

08088380 <BSP_SD_Erase>:
  * @param  StartAddr: Start byte address
  * @param  EndAddr: End byte address
  * @retval SD status
  */
uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
{
 8088380:	b580      	push	{r7, lr}
 8088382:	b082      	sub	sp, #8
 8088384:	af00      	add	r7, sp, #0
 8088386:	6078      	str	r0, [r7, #4]
 8088388:	6039      	str	r1, [r7, #0]
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 808838a:	683a      	ldr	r2, [r7, #0]
 808838c:	6879      	ldr	r1, [r7, #4]
 808838e:	4806      	ldr	r0, [pc, #24]	; (80883a8 <BSP_SD_Erase+0x28>)
 8088390:	f006 fc4c 	bl	808ec2c <HAL_SD_Erase>
 8088394:	4603      	mov	r3, r0
 8088396:	2b00      	cmp	r3, #0
 8088398:	d001      	beq.n	808839e <BSP_SD_Erase+0x1e>
  {
    return MSD_ERROR;
 808839a:	2301      	movs	r3, #1
 808839c:	e000      	b.n	80883a0 <BSP_SD_Erase+0x20>
  }
  else
  {
    return MSD_OK;
 808839e:	2300      	movs	r3, #0
  }
}
 80883a0:	4618      	mov	r0, r3
 80883a2:	3708      	adds	r7, #8
 80883a4:	46bd      	mov	sp, r7
 80883a6:	bd80      	pop	{r7, pc}
 80883a8:	2002d9e0 	.word	0x2002d9e0

080883ac <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80883ac:	b580      	push	{r7, lr}
 80883ae:	b08c      	sub	sp, #48	; 0x30
 80883b0:	af00      	add	r7, sp, #0
 80883b2:	6078      	str	r0, [r7, #4]
 80883b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80883b6:	4b6c      	ldr	r3, [pc, #432]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80883ba:	4a6b      	ldr	r2, [pc, #428]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80883c0:	6453      	str	r3, [r2, #68]	; 0x44
 80883c2:	4b69      	ldr	r3, [pc, #420]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80883c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80883ca:	61bb      	str	r3, [r7, #24]
 80883cc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80883ce:	4b66      	ldr	r3, [pc, #408]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883d2:	4a65      	ldr	r2, [pc, #404]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80883d8:	6313      	str	r3, [r2, #48]	; 0x30
 80883da:	4b63      	ldr	r3, [pc, #396]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80883e2:	617b      	str	r3, [r7, #20]
 80883e4:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80883e6:	4b60      	ldr	r3, [pc, #384]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883ea:	4a5f      	ldr	r2, [pc, #380]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883ec:	f043 0304 	orr.w	r3, r3, #4
 80883f0:	6313      	str	r3, [r2, #48]	; 0x30
 80883f2:	4b5d      	ldr	r3, [pc, #372]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 80883f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883f6:	f003 0304 	and.w	r3, r3, #4
 80883fa:	613b      	str	r3, [r7, #16]
 80883fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80883fe:	4b5a      	ldr	r3, [pc, #360]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 8088400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088402:	4a59      	ldr	r2, [pc, #356]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 8088404:	f043 0308 	orr.w	r3, r3, #8
 8088408:	6313      	str	r3, [r2, #48]	; 0x30
 808840a:	4b57      	ldr	r3, [pc, #348]	; (8088568 <BSP_SD_MspInit+0x1bc>)
 808840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808840e:	f003 0308 	and.w	r3, r3, #8
 8088412:	60fb      	str	r3, [r7, #12]
 8088414:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8088416:	2302      	movs	r3, #2
 8088418:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 808841a:	2301      	movs	r3, #1
 808841c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 808841e:	2303      	movs	r3, #3
 8088420:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8088422:	230c      	movs	r3, #12
 8088424:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8088426:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 808842a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 808842c:	f107 031c 	add.w	r3, r7, #28
 8088430:	4619      	mov	r1, r3
 8088432:	484e      	ldr	r0, [pc, #312]	; (808856c <BSP_SD_MspInit+0x1c0>)
 8088434:	f001 fec8 	bl	808a1c8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8088438:	2304      	movs	r3, #4
 808843a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 808843c:	f107 031c 	add.w	r3, r7, #28
 8088440:	4619      	mov	r1, r3
 8088442:	484b      	ldr	r0, [pc, #300]	; (8088570 <BSP_SD_MspInit+0x1c4>)
 8088444:	f001 fec0 	bl	808a1c8 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8088448:	2200      	movs	r2, #0
 808844a:	210e      	movs	r1, #14
 808844c:	2031      	movs	r0, #49	; 0x31
 808844e:	f000 ff83 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8088452:	2031      	movs	r0, #49	; 0x31
 8088454:	f000 ff9c 	bl	8089390 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8088458:	4b46      	ldr	r3, [pc, #280]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 808845a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 808845e:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8088460:	4b44      	ldr	r3, [pc, #272]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 8088462:	2200      	movs	r2, #0
 8088464:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8088466:	4b43      	ldr	r3, [pc, #268]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 8088468:	2200      	movs	r2, #0
 808846a:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 808846c:	4b41      	ldr	r3, [pc, #260]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 808846e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8088472:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8088474:	4b3f      	ldr	r3, [pc, #252]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 8088476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 808847a:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 808847c:	4b3d      	ldr	r3, [pc, #244]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 808847e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8088482:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8088484:	4b3b      	ldr	r3, [pc, #236]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 8088486:	2220      	movs	r2, #32
 8088488:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 808848a:	4b3a      	ldr	r3, [pc, #232]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 808848c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8088490:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8088492:	4b38      	ldr	r3, [pc, #224]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 8088494:	2204      	movs	r2, #4
 8088496:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8088498:	4b36      	ldr	r3, [pc, #216]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 808849a:	2203      	movs	r2, #3
 808849c:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 808849e:	4b35      	ldr	r3, [pc, #212]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80884a4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80884a6:	4b33      	ldr	r3, [pc, #204]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80884ac:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80884ae:	4b31      	ldr	r3, [pc, #196]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884b0:	4a31      	ldr	r2, [pc, #196]	; (8088578 <BSP_SD_MspInit+0x1cc>)
 80884b2:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80884b4:	687b      	ldr	r3, [r7, #4]
 80884b6:	4a2f      	ldr	r2, [pc, #188]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80884ba:	4a2e      	ldr	r2, [pc, #184]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884bc:	687b      	ldr	r3, [r7, #4]
 80884be:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80884c0:	482c      	ldr	r0, [pc, #176]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884c2:	f001 f82f 	bl	8089524 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80884c6:	482b      	ldr	r0, [pc, #172]	; (8088574 <BSP_SD_MspInit+0x1c8>)
 80884c8:	f000 ff7e 	bl	80893c8 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80884cc:	4b2b      	ldr	r3, [pc, #172]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80884d2:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80884d4:	4b29      	ldr	r3, [pc, #164]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884d6:	2240      	movs	r2, #64	; 0x40
 80884d8:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80884da:	4b28      	ldr	r3, [pc, #160]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884dc:	2200      	movs	r2, #0
 80884de:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80884e0:	4b26      	ldr	r3, [pc, #152]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80884e6:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80884e8:	4b24      	ldr	r3, [pc, #144]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80884ee:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80884f0:	4b22      	ldr	r3, [pc, #136]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80884f6:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80884f8:	4b20      	ldr	r3, [pc, #128]	; (808857c <BSP_SD_MspInit+0x1d0>)
 80884fa:	2220      	movs	r2, #32
 80884fc:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80884fe:	4b1f      	ldr	r3, [pc, #124]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088500:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8088504:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8088506:	4b1d      	ldr	r3, [pc, #116]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088508:	2204      	movs	r2, #4
 808850a:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 808850c:	4b1b      	ldr	r3, [pc, #108]	; (808857c <BSP_SD_MspInit+0x1d0>)
 808850e:	2203      	movs	r2, #3
 8088510:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8088512:	4b1a      	ldr	r3, [pc, #104]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088514:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8088518:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 808851a:	4b18      	ldr	r3, [pc, #96]	; (808857c <BSP_SD_MspInit+0x1d0>)
 808851c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8088520:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8088522:	4b16      	ldr	r3, [pc, #88]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088524:	4a16      	ldr	r2, [pc, #88]	; (8088580 <BSP_SD_MspInit+0x1d4>)
 8088526:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8088528:	687b      	ldr	r3, [r7, #4]
 808852a:	4a14      	ldr	r2, [pc, #80]	; (808857c <BSP_SD_MspInit+0x1d0>)
 808852c:	641a      	str	r2, [r3, #64]	; 0x40
 808852e:	4a13      	ldr	r2, [pc, #76]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088530:	687b      	ldr	r3, [r7, #4]
 8088532:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8088534:	4811      	ldr	r0, [pc, #68]	; (808857c <BSP_SD_MspInit+0x1d0>)
 8088536:	f000 fff5 	bl	8089524 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 808853a:	4810      	ldr	r0, [pc, #64]	; (808857c <BSP_SD_MspInit+0x1d0>)
 808853c:	f000 ff44 	bl	80893c8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8088540:	2200      	movs	r2, #0
 8088542:	210f      	movs	r1, #15
 8088544:	203b      	movs	r0, #59	; 0x3b
 8088546:	f000 ff07 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 808854a:	203b      	movs	r0, #59	; 0x3b
 808854c:	f000 ff20 	bl	8089390 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8088550:	2200      	movs	r2, #0
 8088552:	210f      	movs	r1, #15
 8088554:	2045      	movs	r0, #69	; 0x45
 8088556:	f000 feff 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 808855a:	2045      	movs	r0, #69	; 0x45
 808855c:	f000 ff18 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8088560:	bf00      	nop
 8088562:	3730      	adds	r7, #48	; 0x30
 8088564:	46bd      	mov	sp, r7
 8088566:	bd80      	pop	{r7, pc}
 8088568:	40023800 	.word	0x40023800
 808856c:	40020800 	.word	0x40020800
 8088570:	40020c00 	.word	0x40020c00
 8088574:	2000b994 	.word	0x2000b994
 8088578:	40026458 	.word	0x40026458
 808857c:	2000b9f4 	.word	0x2000b9f4
 8088580:	400264a0 	.word	0x400264a0

08088584 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8088584:	b580      	push	{r7, lr}
 8088586:	b088      	sub	sp, #32
 8088588:	af00      	add	r7, sp, #0
 808858a:	6078      	str	r0, [r7, #4]
 808858c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 808858e:	4b0f      	ldr	r3, [pc, #60]	; (80885cc <BSP_SD_Detect_MspInit+0x48>)
 8088590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088592:	4a0e      	ldr	r2, [pc, #56]	; (80885cc <BSP_SD_Detect_MspInit+0x48>)
 8088594:	f043 0304 	orr.w	r3, r3, #4
 8088598:	6313      	str	r3, [r2, #48]	; 0x30
 808859a:	4b0c      	ldr	r3, [pc, #48]	; (80885cc <BSP_SD_Detect_MspInit+0x48>)
 808859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808859e:	f003 0304 	and.w	r3, r3, #4
 80885a2:	60bb      	str	r3, [r7, #8]
 80885a4:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80885a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80885aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80885ac:	2300      	movs	r3, #0
 80885ae:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80885b0:	2301      	movs	r3, #1
 80885b2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80885b4:	2303      	movs	r3, #3
 80885b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80885b8:	f107 030c 	add.w	r3, r7, #12
 80885bc:	4619      	mov	r1, r3
 80885be:	4804      	ldr	r0, [pc, #16]	; (80885d0 <BSP_SD_Detect_MspInit+0x4c>)
 80885c0:	f001 fe02 	bl	808a1c8 <HAL_GPIO_Init>
}
 80885c4:	bf00      	nop
 80885c6:	3720      	adds	r7, #32
 80885c8:	46bd      	mov	sp, r7
 80885ca:	bd80      	pop	{r7, pc}
 80885cc:	40023800 	.word	0x40023800
 80885d0:	40020800 	.word	0x40020800

080885d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80885d4:	b580      	push	{r7, lr}
 80885d6:	b082      	sub	sp, #8
 80885d8:	af00      	add	r7, sp, #0
 80885da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80885dc:	6879      	ldr	r1, [r7, #4]
 80885de:	4803      	ldr	r0, [pc, #12]	; (80885ec <BSP_SD_GetCardInfo+0x18>)
 80885e0:	f006 fe18 	bl	808f214 <HAL_SD_GetCardInfo>
}
 80885e4:	bf00      	nop
 80885e6:	3708      	adds	r7, #8
 80885e8:	46bd      	mov	sp, r7
 80885ea:	bd80      	pop	{r7, pc}
 80885ec:	2002d9e0 	.word	0x2002d9e0

080885f0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80885f0:	b580      	push	{r7, lr}
 80885f2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80885f4:	4b29      	ldr	r3, [pc, #164]	; (808869c <BSP_SDRAM_Init+0xac>)
 80885f6:	4a2a      	ldr	r2, [pc, #168]	; (80886a0 <BSP_SDRAM_Init+0xb0>)
 80885f8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80885fa:	4b2a      	ldr	r3, [pc, #168]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 80885fc:	2202      	movs	r2, #2
 80885fe:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8088600:	4b28      	ldr	r3, [pc, #160]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 8088602:	2207      	movs	r2, #7
 8088604:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8088606:	4b27      	ldr	r3, [pc, #156]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 8088608:	2204      	movs	r2, #4
 808860a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 808860c:	4b25      	ldr	r3, [pc, #148]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 808860e:	2207      	movs	r2, #7
 8088610:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8088612:	4b24      	ldr	r3, [pc, #144]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 8088614:	2202      	movs	r2, #2
 8088616:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8088618:	4b22      	ldr	r3, [pc, #136]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 808861a:	2202      	movs	r2, #2
 808861c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 808861e:	4b21      	ldr	r3, [pc, #132]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 8088620:	2202      	movs	r2, #2
 8088622:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8088624:	4b1d      	ldr	r3, [pc, #116]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088626:	2200      	movs	r2, #0
 8088628:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 808862a:	4b1c      	ldr	r3, [pc, #112]	; (808869c <BSP_SDRAM_Init+0xac>)
 808862c:	2200      	movs	r2, #0
 808862e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8088630:	4b1a      	ldr	r3, [pc, #104]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088632:	2204      	movs	r2, #4
 8088634:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8088636:	4b19      	ldr	r3, [pc, #100]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088638:	2210      	movs	r2, #16
 808863a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 808863c:	4b17      	ldr	r3, [pc, #92]	; (808869c <BSP_SDRAM_Init+0xac>)
 808863e:	2240      	movs	r2, #64	; 0x40
 8088640:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8088642:	4b16      	ldr	r3, [pc, #88]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8088648:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 808864a:	4b14      	ldr	r3, [pc, #80]	; (808869c <BSP_SDRAM_Init+0xac>)
 808864c:	2200      	movs	r2, #0
 808864e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8088650:	4b12      	ldr	r3, [pc, #72]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8088656:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8088658:	4b10      	ldr	r3, [pc, #64]	; (808869c <BSP_SDRAM_Init+0xac>)
 808865a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 808865e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8088660:	4b0e      	ldr	r3, [pc, #56]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088662:	2200      	movs	r2, #0
 8088664:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8088666:	2100      	movs	r1, #0
 8088668:	480c      	ldr	r0, [pc, #48]	; (808869c <BSP_SDRAM_Init+0xac>)
 808866a:	f000 f8df 	bl	808882c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 808866e:	490d      	ldr	r1, [pc, #52]	; (80886a4 <BSP_SDRAM_Init+0xb4>)
 8088670:	480a      	ldr	r0, [pc, #40]	; (808869c <BSP_SDRAM_Init+0xac>)
 8088672:	f007 f94b 	bl	808f90c <HAL_SDRAM_Init>
 8088676:	4603      	mov	r3, r0
 8088678:	2b00      	cmp	r3, #0
 808867a:	d003      	beq.n	8088684 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 808867c:	4b0a      	ldr	r3, [pc, #40]	; (80886a8 <BSP_SDRAM_Init+0xb8>)
 808867e:	2201      	movs	r2, #1
 8088680:	701a      	strb	r2, [r3, #0]
 8088682:	e002      	b.n	808868a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8088684:	4b08      	ldr	r3, [pc, #32]	; (80886a8 <BSP_SDRAM_Init+0xb8>)
 8088686:	2200      	movs	r2, #0
 8088688:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 808868a:	f240 6003 	movw	r0, #1539	; 0x603
 808868e:	f000 f80d 	bl	80886ac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8088692:	4b05      	ldr	r3, [pc, #20]	; (80886a8 <BSP_SDRAM_Init+0xb8>)
 8088694:	781b      	ldrb	r3, [r3, #0]
}
 8088696:	4618      	mov	r0, r3
 8088698:	bd80      	pop	{r7, pc}
 808869a:	bf00      	nop
 808869c:	2002da64 	.word	0x2002da64
 80886a0:	a0000140 	.word	0xa0000140
 80886a4:	2000ba54 	.word	0x2000ba54
 80886a8:	2000b080 	.word	0x2000b080

080886ac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80886ac:	b580      	push	{r7, lr}
 80886ae:	b084      	sub	sp, #16
 80886b0:	af00      	add	r7, sp, #0
 80886b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80886b4:	2300      	movs	r3, #0
 80886b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80886b8:	4b2a      	ldr	r3, [pc, #168]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886ba:	2201      	movs	r2, #1
 80886bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80886be:	4b29      	ldr	r3, [pc, #164]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886c0:	2210      	movs	r2, #16
 80886c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80886c4:	4b27      	ldr	r3, [pc, #156]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886c6:	2201      	movs	r2, #1
 80886c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80886ca:	4b26      	ldr	r3, [pc, #152]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886cc:	2200      	movs	r2, #0
 80886ce:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80886d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80886d4:	4923      	ldr	r1, [pc, #140]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886d6:	4824      	ldr	r0, [pc, #144]	; (8088768 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80886d8:	f007 fa5a 	bl	808fb90 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80886dc:	2001      	movs	r0, #1
 80886de:	f000 fd4b 	bl	8089178 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80886e2:	4b20      	ldr	r3, [pc, #128]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886e4:	2202      	movs	r2, #2
 80886e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80886e8:	4b1e      	ldr	r3, [pc, #120]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886ea:	2210      	movs	r2, #16
 80886ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80886ee:	4b1d      	ldr	r3, [pc, #116]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886f0:	2201      	movs	r2, #1
 80886f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80886f4:	4b1b      	ldr	r3, [pc, #108]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80886f6:	2200      	movs	r2, #0
 80886f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80886fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80886fe:	4919      	ldr	r1, [pc, #100]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088700:	4819      	ldr	r0, [pc, #100]	; (8088768 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8088702:	f007 fa45 	bl	808fb90 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8088706:	4b17      	ldr	r3, [pc, #92]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088708:	2203      	movs	r2, #3
 808870a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 808870c:	4b15      	ldr	r3, [pc, #84]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 808870e:	2210      	movs	r2, #16
 8088710:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8088712:	4b14      	ldr	r3, [pc, #80]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088714:	2208      	movs	r2, #8
 8088716:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8088718:	4b12      	ldr	r3, [pc, #72]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 808871a:	2200      	movs	r2, #0
 808871c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 808871e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8088722:	4910      	ldr	r1, [pc, #64]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088724:	4810      	ldr	r0, [pc, #64]	; (8088768 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8088726:	f007 fa33 	bl	808fb90 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 808872a:	f44f 7308 	mov.w	r3, #544	; 0x220
 808872e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8088730:	4b0c      	ldr	r3, [pc, #48]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088732:	2204      	movs	r2, #4
 8088734:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8088736:	4b0b      	ldr	r3, [pc, #44]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088738:	2210      	movs	r2, #16
 808873a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 808873c:	4b09      	ldr	r3, [pc, #36]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 808873e:	2201      	movs	r2, #1
 8088740:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8088742:	68fb      	ldr	r3, [r7, #12]
 8088744:	4a07      	ldr	r2, [pc, #28]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8088746:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8088748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808874c:	4905      	ldr	r1, [pc, #20]	; (8088764 <BSP_SDRAM_Initialization_sequence+0xb8>)
 808874e:	4806      	ldr	r0, [pc, #24]	; (8088768 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8088750:	f007 fa1e 	bl	808fb90 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8088754:	6879      	ldr	r1, [r7, #4]
 8088756:	4804      	ldr	r0, [pc, #16]	; (8088768 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8088758:	f007 fa45 	bl	808fbe6 <HAL_SDRAM_ProgramRefreshRate>
}
 808875c:	bf00      	nop
 808875e:	3710      	adds	r7, #16
 8088760:	46bd      	mov	sp, r7
 8088762:	bd80      	pop	{r7, pc}
 8088764:	2000ba70 	.word	0x2000ba70
 8088768:	2002da64 	.word	0x2002da64

0808876c <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 808876c:	b580      	push	{r7, lr}
 808876e:	b084      	sub	sp, #16
 8088770:	af00      	add	r7, sp, #0
 8088772:	60f8      	str	r0, [r7, #12]
 8088774:	60b9      	str	r1, [r7, #8]
 8088776:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8088778:	68f9      	ldr	r1, [r7, #12]
 808877a:	687b      	ldr	r3, [r7, #4]
 808877c:	68ba      	ldr	r2, [r7, #8]
 808877e:	4806      	ldr	r0, [pc, #24]	; (8088798 <BSP_SDRAM_ReadData+0x2c>)
 8088780:	f007 f902 	bl	808f988 <HAL_SDRAM_Read_32b>
 8088784:	4603      	mov	r3, r0
 8088786:	2b00      	cmp	r3, #0
 8088788:	d001      	beq.n	808878e <BSP_SDRAM_ReadData+0x22>
  {
    return SDRAM_ERROR;
 808878a:	2301      	movs	r3, #1
 808878c:	e000      	b.n	8088790 <BSP_SDRAM_ReadData+0x24>
  }
  else
  {
    return SDRAM_OK;
 808878e:	2300      	movs	r3, #0
  } 
}
 8088790:	4618      	mov	r0, r3
 8088792:	3710      	adds	r7, #16
 8088794:	46bd      	mov	sp, r7
 8088796:	bd80      	pop	{r7, pc}
 8088798:	2002da64 	.word	0x2002da64

0808879c <BSP_SDRAM_ReadData_DMA>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 808879c:	b580      	push	{r7, lr}
 808879e:	b084      	sub	sp, #16
 80887a0:	af00      	add	r7, sp, #0
 80887a2:	60f8      	str	r0, [r7, #12]
 80887a4:	60b9      	str	r1, [r7, #8]
 80887a6:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Read_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80887a8:	68f9      	ldr	r1, [r7, #12]
 80887aa:	687b      	ldr	r3, [r7, #4]
 80887ac:	68ba      	ldr	r2, [r7, #8]
 80887ae:	4806      	ldr	r0, [pc, #24]	; (80887c8 <BSP_SDRAM_ReadData_DMA+0x2c>)
 80887b0:	f007 f96c 	bl	808fa8c <HAL_SDRAM_Read_DMA>
 80887b4:	4603      	mov	r3, r0
 80887b6:	2b00      	cmp	r3, #0
 80887b8:	d001      	beq.n	80887be <BSP_SDRAM_ReadData_DMA+0x22>
  {
    return SDRAM_ERROR;
 80887ba:	2301      	movs	r3, #1
 80887bc:	e000      	b.n	80887c0 <BSP_SDRAM_ReadData_DMA+0x24>
  }
  else
  {
    return SDRAM_OK;
 80887be:	2300      	movs	r3, #0
  }     
}
 80887c0:	4618      	mov	r0, r3
 80887c2:	3710      	adds	r7, #16
 80887c4:	46bd      	mov	sp, r7
 80887c6:	bd80      	pop	{r7, pc}
 80887c8:	2002da64 	.word	0x2002da64

080887cc <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 80887cc:	b580      	push	{r7, lr}
 80887ce:	b084      	sub	sp, #16
 80887d0:	af00      	add	r7, sp, #0
 80887d2:	60f8      	str	r0, [r7, #12]
 80887d4:	60b9      	str	r1, [r7, #8]
 80887d6:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80887d8:	68f9      	ldr	r1, [r7, #12]
 80887da:	687b      	ldr	r3, [r7, #4]
 80887dc:	68ba      	ldr	r2, [r7, #8]
 80887de:	4806      	ldr	r0, [pc, #24]	; (80887f8 <BSP_SDRAM_WriteData+0x2c>)
 80887e0:	f007 f911 	bl	808fa06 <HAL_SDRAM_Write_32b>
 80887e4:	4603      	mov	r3, r0
 80887e6:	2b00      	cmp	r3, #0
 80887e8:	d001      	beq.n	80887ee <BSP_SDRAM_WriteData+0x22>
  {
    return SDRAM_ERROR;
 80887ea:	2301      	movs	r3, #1
 80887ec:	e000      	b.n	80887f0 <BSP_SDRAM_WriteData+0x24>
  }
  else
  {
    return SDRAM_OK;
 80887ee:	2300      	movs	r3, #0
  }
}
 80887f0:	4618      	mov	r0, r3
 80887f2:	3710      	adds	r7, #16
 80887f4:	46bd      	mov	sp, r7
 80887f6:	bd80      	pop	{r7, pc}
 80887f8:	2002da64 	.word	0x2002da64

080887fc <BSP_SDRAM_WriteData_DMA>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 80887fc:	b580      	push	{r7, lr}
 80887fe:	b084      	sub	sp, #16
 8088800:	af00      	add	r7, sp, #0
 8088802:	60f8      	str	r0, [r7, #12]
 8088804:	60b9      	str	r1, [r7, #8]
 8088806:	607a      	str	r2, [r7, #4]
  if(HAL_SDRAM_Write_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8088808:	68f9      	ldr	r1, [r7, #12]
 808880a:	687b      	ldr	r3, [r7, #4]
 808880c:	68ba      	ldr	r2, [r7, #8]
 808880e:	4806      	ldr	r0, [pc, #24]	; (8088828 <BSP_SDRAM_WriteData_DMA+0x2c>)
 8088810:	f007 f97c 	bl	808fb0c <HAL_SDRAM_Write_DMA>
 8088814:	4603      	mov	r3, r0
 8088816:	2b00      	cmp	r3, #0
 8088818:	d001      	beq.n	808881e <BSP_SDRAM_WriteData_DMA+0x22>
  {
    return SDRAM_ERROR;
 808881a:	2301      	movs	r3, #1
 808881c:	e000      	b.n	8088820 <BSP_SDRAM_WriteData_DMA+0x24>
  }
  else
  {
    return SDRAM_OK;
 808881e:	2300      	movs	r3, #0
  } 
}
 8088820:	4618      	mov	r0, r3
 8088822:	3710      	adds	r7, #16
 8088824:	46bd      	mov	sp, r7
 8088826:	bd80      	pop	{r7, pc}
 8088828:	2002da64 	.word	0x2002da64

0808882c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 808882c:	b580      	push	{r7, lr}
 808882e:	b090      	sub	sp, #64	; 0x40
 8088830:	af00      	add	r7, sp, #0
 8088832:	6078      	str	r0, [r7, #4]
 8088834:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8088836:	4b70      	ldr	r3, [pc, #448]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808883a:	4a6f      	ldr	r2, [pc, #444]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 808883c:	f043 0301 	orr.w	r3, r3, #1
 8088840:	6393      	str	r3, [r2, #56]	; 0x38
 8088842:	4b6d      	ldr	r3, [pc, #436]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088846:	f003 0301 	and.w	r3, r3, #1
 808884a:	62bb      	str	r3, [r7, #40]	; 0x28
 808884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 808884e:	4b6a      	ldr	r3, [pc, #424]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088852:	4a69      	ldr	r2, [pc, #420]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8088858:	6313      	str	r3, [r2, #48]	; 0x30
 808885a:	4b67      	ldr	r3, [pc, #412]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 808885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808885e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8088862:	627b      	str	r3, [r7, #36]	; 0x24
 8088864:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8088866:	4b64      	ldr	r3, [pc, #400]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808886a:	4a63      	ldr	r2, [pc, #396]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 808886c:	f043 0304 	orr.w	r3, r3, #4
 8088870:	6313      	str	r3, [r2, #48]	; 0x30
 8088872:	4b61      	ldr	r3, [pc, #388]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088876:	f003 0304 	and.w	r3, r3, #4
 808887a:	623b      	str	r3, [r7, #32]
 808887c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 808887e:	4b5e      	ldr	r3, [pc, #376]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088882:	4a5d      	ldr	r2, [pc, #372]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088884:	f043 0308 	orr.w	r3, r3, #8
 8088888:	6313      	str	r3, [r2, #48]	; 0x30
 808888a:	4b5b      	ldr	r3, [pc, #364]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 808888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808888e:	f003 0308 	and.w	r3, r3, #8
 8088892:	61fb      	str	r3, [r7, #28]
 8088894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8088896:	4b58      	ldr	r3, [pc, #352]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 8088898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808889a:	4a57      	ldr	r2, [pc, #348]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 808889c:	f043 0310 	orr.w	r3, r3, #16
 80888a0:	6313      	str	r3, [r2, #48]	; 0x30
 80888a2:	4b55      	ldr	r3, [pc, #340]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888a6:	f003 0310 	and.w	r3, r3, #16
 80888aa:	61bb      	str	r3, [r7, #24]
 80888ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80888ae:	4b52      	ldr	r3, [pc, #328]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888b2:	4a51      	ldr	r2, [pc, #324]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888b4:	f043 0320 	orr.w	r3, r3, #32
 80888b8:	6313      	str	r3, [r2, #48]	; 0x30
 80888ba:	4b4f      	ldr	r3, [pc, #316]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888be:	f003 0320 	and.w	r3, r3, #32
 80888c2:	617b      	str	r3, [r7, #20]
 80888c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80888c6:	4b4c      	ldr	r3, [pc, #304]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888ca:	4a4b      	ldr	r2, [pc, #300]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80888d0:	6313      	str	r3, [r2, #48]	; 0x30
 80888d2:	4b49      	ldr	r3, [pc, #292]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80888da:	613b      	str	r3, [r7, #16]
 80888dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80888de:	4b46      	ldr	r3, [pc, #280]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888e2:	4a45      	ldr	r2, [pc, #276]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80888e8:	6313      	str	r3, [r2, #48]	; 0x30
 80888ea:	4b43      	ldr	r3, [pc, #268]	; (80889f8 <BSP_SDRAM_MspInit+0x1cc>)
 80888ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80888f2:	60fb      	str	r3, [r7, #12]
 80888f4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80888f6:	2302      	movs	r3, #2
 80888f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80888fa:	2301      	movs	r3, #1
 80888fc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80888fe:	2302      	movs	r3, #2
 8088900:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8088902:	230c      	movs	r3, #12
 8088904:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8088906:	2308      	movs	r3, #8
 8088908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 808890a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 808890e:	4619      	mov	r1, r3
 8088910:	483a      	ldr	r0, [pc, #232]	; (80889fc <BSP_SDRAM_MspInit+0x1d0>)
 8088912:	f001 fc59 	bl	808a1c8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8088916:	f24c 7303 	movw	r3, #50947	; 0xc703
 808891a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 808891c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8088920:	4619      	mov	r1, r3
 8088922:	4837      	ldr	r0, [pc, #220]	; (8088a00 <BSP_SDRAM_MspInit+0x1d4>)
 8088924:	f001 fc50 	bl	808a1c8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8088928:	f64f 7383 	movw	r3, #65411	; 0xff83
 808892c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 808892e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8088932:	4619      	mov	r1, r3
 8088934:	4833      	ldr	r0, [pc, #204]	; (8088a04 <BSP_SDRAM_MspInit+0x1d8>)
 8088936:	f001 fc47 	bl	808a1c8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 808893a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 808893e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8088940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8088944:	4619      	mov	r1, r3
 8088946:	4830      	ldr	r0, [pc, #192]	; (8088a08 <BSP_SDRAM_MspInit+0x1dc>)
 8088948:	f001 fc3e 	bl	808a1c8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 808894c:	f248 1333 	movw	r3, #33075	; 0x8133
 8088950:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8088952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8088956:	4619      	mov	r1, r3
 8088958:	482c      	ldr	r0, [pc, #176]	; (8088a0c <BSP_SDRAM_MspInit+0x1e0>)
 808895a:	f001 fc35 	bl	808a1c8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 808895e:	2328      	movs	r3, #40	; 0x28
 8088960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8088962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8088966:	4619      	mov	r1, r3
 8088968:	4829      	ldr	r0, [pc, #164]	; (8088a10 <BSP_SDRAM_MspInit+0x1e4>)
 808896a:	f001 fc2d 	bl	808a1c8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 808896e:	4b29      	ldr	r3, [pc, #164]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 8088970:	2200      	movs	r2, #0
 8088972:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8088974:	4b27      	ldr	r3, [pc, #156]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 8088976:	2280      	movs	r2, #128	; 0x80
 8088978:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 808897a:	4b26      	ldr	r3, [pc, #152]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 808897c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088980:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8088982:	4b24      	ldr	r3, [pc, #144]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 8088984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8088988:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 808898a:	4b22      	ldr	r3, [pc, #136]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 808898c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8088990:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8088992:	4b20      	ldr	r3, [pc, #128]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 8088994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8088998:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 808899a:	4b1e      	ldr	r3, [pc, #120]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 808899c:	2200      	movs	r2, #0
 808899e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80889a0:	4b1c      	ldr	r3, [pc, #112]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80889a6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80889a8:	4b1a      	ldr	r3, [pc, #104]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889aa:	2200      	movs	r2, #0
 80889ac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80889ae:	4b19      	ldr	r3, [pc, #100]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889b0:	2203      	movs	r2, #3
 80889b2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80889b4:	4b17      	ldr	r3, [pc, #92]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889b6:	2200      	movs	r2, #0
 80889b8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80889ba:	4b16      	ldr	r3, [pc, #88]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889bc:	2200      	movs	r2, #0
 80889be:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80889c0:	4b14      	ldr	r3, [pc, #80]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889c2:	4a15      	ldr	r2, [pc, #84]	; (8088a18 <BSP_SDRAM_MspInit+0x1ec>)
 80889c4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80889c6:	687b      	ldr	r3, [r7, #4]
 80889c8:	4a12      	ldr	r2, [pc, #72]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889ca:	631a      	str	r2, [r3, #48]	; 0x30
 80889cc:	4a11      	ldr	r2, [pc, #68]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889ce:	687b      	ldr	r3, [r7, #4]
 80889d0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80889d2:	4810      	ldr	r0, [pc, #64]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889d4:	f000 fda6 	bl	8089524 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80889d8:	480e      	ldr	r0, [pc, #56]	; (8088a14 <BSP_SDRAM_MspInit+0x1e8>)
 80889da:	f000 fcf5 	bl	80893c8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80889de:	2200      	movs	r2, #0
 80889e0:	210f      	movs	r1, #15
 80889e2:	2038      	movs	r0, #56	; 0x38
 80889e4:	f000 fcb8 	bl	8089358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80889e8:	2038      	movs	r0, #56	; 0x38
 80889ea:	f000 fcd1 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 80889ee:	bf00      	nop
 80889f0:	3740      	adds	r7, #64	; 0x40
 80889f2:	46bd      	mov	sp, r7
 80889f4:	bd80      	pop	{r7, pc}
 80889f6:	bf00      	nop
 80889f8:	40023800 	.word	0x40023800
 80889fc:	40020800 	.word	0x40020800
 8088a00:	40020c00 	.word	0x40020c00
 8088a04:	40021000 	.word	0x40021000
 8088a08:	40021400 	.word	0x40021400
 8088a0c:	40021800 	.word	0x40021800
 8088a10:	40021c00 	.word	0x40021c00
 8088a14:	2000ba80 	.word	0x2000ba80
 8088a18:	40026410 	.word	0x40026410

08088a1c <BSP_STDIO_Init>:
/**
 * @brief  Initializes STDIO interface.
 * @retval STDIO status
 */
uint8_t BSP_STDIO_Init(void)
{ 
 8088a1c:	b580      	push	{r7, lr}
 8088a1e:	af00      	add	r7, sp, #0
	UARTHandle.Instance = USART1;
 8088a20:	4b18      	ldr	r3, [pc, #96]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a22:	4a19      	ldr	r2, [pc, #100]	; (8088a88 <BSP_STDIO_Init+0x6c>)
 8088a24:	601a      	str	r2, [r3, #0]

	/* Call the DeInit function to reset the driver */
	if (HAL_UART_DeInit(&UARTHandle) != HAL_OK)
 8088a26:	4817      	ldr	r0, [pc, #92]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a28:	f008 fc7f 	bl	809132a <HAL_UART_DeInit>
 8088a2c:	4603      	mov	r3, r0
 8088a2e:	2b00      	cmp	r3, #0
 8088a30:	d001      	beq.n	8088a36 <BSP_STDIO_Init+0x1a>
	{
		return STDIO_ERROR;
 8088a32:	2301      	movs	r3, #1
 8088a34:	e023      	b.n	8088a7e <BSP_STDIO_Init+0x62>
	}

	/* COM1 initialization */
	UARTHandle.Init.BaudRate = 115200;
 8088a36:	4b13      	ldr	r3, [pc, #76]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8088a3c:	605a      	str	r2, [r3, #4]
	UARTHandle.Init.Mode = USART_MODE_TX_RX;
 8088a3e:	4b11      	ldr	r3, [pc, #68]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a40:	220c      	movs	r2, #12
 8088a42:	615a      	str	r2, [r3, #20]
	UARTHandle.Init.OverSampling = USART_OVERSAMPLING_16;
 8088a44:	4b0f      	ldr	r3, [pc, #60]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a46:	2200      	movs	r2, #0
 8088a48:	61da      	str	r2, [r3, #28]
	UARTHandle.Init.Parity = USART_PARITY_NONE;
 8088a4a:	4b0e      	ldr	r3, [pc, #56]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a4c:	2200      	movs	r2, #0
 8088a4e:	611a      	str	r2, [r3, #16]
	UARTHandle.Init.StopBits = USART_STOPBITS_1;
 8088a50:	4b0c      	ldr	r3, [pc, #48]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a52:	2200      	movs	r2, #0
 8088a54:	60da      	str	r2, [r3, #12]
	UARTHandle.Init.WordLength = USART_WORDLENGTH_8B;
 8088a56:	4b0b      	ldr	r3, [pc, #44]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a58:	2200      	movs	r2, #0
 8088a5a:	609a      	str	r2, [r3, #8]

	if (BSP_COM_Init(COM1, &UARTHandle) != HAL_OK)
 8088a5c:	4909      	ldr	r1, [pc, #36]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a5e:	2000      	movs	r0, #0
 8088a60:	f7fb fa46 	bl	8083ef0 <BSP_COM_Init>
 8088a64:	4603      	mov	r3, r0
 8088a66:	2b00      	cmp	r3, #0
 8088a68:	d001      	beq.n	8088a6e <BSP_STDIO_Init+0x52>
	{
		return STDIO_ERROR;
 8088a6a:	2301      	movs	r3, #1
 8088a6c:	e007      	b.n	8088a7e <BSP_STDIO_Init+0x62>
	}

	BSP_STDIO_MspInit();
 8088a6e:	f000 f877 	bl	8088b60 <BSP_STDIO_MspInit>

	HAL_UART_Receive_IT(&UARTHandle,(uint8_t*)stdinBuffer, 1);
 8088a72:	2201      	movs	r2, #1
 8088a74:	4905      	ldr	r1, [pc, #20]	; (8088a8c <BSP_STDIO_Init+0x70>)
 8088a76:	4803      	ldr	r0, [pc, #12]	; (8088a84 <BSP_STDIO_Init+0x68>)
 8088a78:	f008 fd2f 	bl	80914da <HAL_UART_Receive_IT>

	return STDIO_OK;
 8088a7c:	2300      	movs	r3, #0
}
 8088a7e:	4618      	mov	r0, r3
 8088a80:	bd80      	pop	{r7, pc}
 8088a82:	bf00      	nop
 8088a84:	2000bae0 	.word	0x2000bae0
 8088a88:	40011000 	.word	0x40011000
 8088a8c:	2002dafc 	.word	0x2002dafc

08088a90 <BSP_STDIO_SendData>:
/**
 * @brief  Send data
 * @retval STDIO status
 */
uint8_t BSP_STDIO_SendData   (uint8_t* data, uint16_t len)
{
 8088a90:	b580      	push	{r7, lr}
 8088a92:	b084      	sub	sp, #16
 8088a94:	af00      	add	r7, sp, #0
 8088a96:	6078      	str	r0, [r7, #4]
 8088a98:	460b      	mov	r3, r1
 8088a9a:	807b      	strh	r3, [r7, #2]
	uint8_t status;

	for (int i=0; i<len; i++)
 8088a9c:	2300      	movs	r3, #0
 8088a9e:	60fb      	str	r3, [r7, #12]
 8088aa0:	e00b      	b.n	8088aba <BSP_STDIO_SendData+0x2a>
	{
		stdoutBuffer[i] = (char)data[i];
 8088aa2:	68fb      	ldr	r3, [r7, #12]
 8088aa4:	687a      	ldr	r2, [r7, #4]
 8088aa6:	4413      	add	r3, r2
 8088aa8:	7819      	ldrb	r1, [r3, #0]
 8088aaa:	4a0f      	ldr	r2, [pc, #60]	; (8088ae8 <BSP_STDIO_SendData+0x58>)
 8088aac:	68fb      	ldr	r3, [r7, #12]
 8088aae:	4413      	add	r3, r2
 8088ab0:	460a      	mov	r2, r1
 8088ab2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<len; i++)
 8088ab4:	68fb      	ldr	r3, [r7, #12]
 8088ab6:	3301      	adds	r3, #1
 8088ab8:	60fb      	str	r3, [r7, #12]
 8088aba:	887b      	ldrh	r3, [r7, #2]
 8088abc:	68fa      	ldr	r2, [r7, #12]
 8088abe:	429a      	cmp	r2, r3
 8088ac0:	dbef      	blt.n	8088aa2 <BSP_STDIO_SendData+0x12>
	}

	status = HAL_UART_Transmit(&UARTHandle, (uint8_t*)stdoutBuffer, len, 100);
 8088ac2:	887a      	ldrh	r2, [r7, #2]
 8088ac4:	2364      	movs	r3, #100	; 0x64
 8088ac6:	4908      	ldr	r1, [pc, #32]	; (8088ae8 <BSP_STDIO_SendData+0x58>)
 8088ac8:	4808      	ldr	r0, [pc, #32]	; (8088aec <BSP_STDIO_SendData+0x5c>)
 8088aca:	f008 fc7a 	bl	80913c2 <HAL_UART_Transmit>
 8088ace:	4603      	mov	r3, r0
 8088ad0:	72fb      	strb	r3, [r7, #11]

	if (status != HAL_OK)
 8088ad2:	7afb      	ldrb	r3, [r7, #11]
 8088ad4:	2b00      	cmp	r3, #0
 8088ad6:	d001      	beq.n	8088adc <BSP_STDIO_SendData+0x4c>
	{
		return STDIO_ERROR;
 8088ad8:	2301      	movs	r3, #1
 8088ada:	e000      	b.n	8088ade <BSP_STDIO_SendData+0x4e>
	}

	return STDIO_OK;
 8088adc:	2300      	movs	r3, #0
}
 8088ade:	4618      	mov	r0, r3
 8088ae0:	3710      	adds	r7, #16
 8088ae2:	46bd      	mov	sp, r7
 8088ae4:	bd80      	pop	{r7, pc}
 8088ae6:	bf00      	nop
 8088ae8:	2002da98 	.word	0x2002da98
 8088aec:	2000bae0 	.word	0x2000bae0

08088af0 <BSP_STDIO_IRQHandler>:

void BSP_STDIO_IRQHandler	(void)
{
 8088af0:	b580      	push	{r7, lr}
 8088af2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&UARTHandle);
 8088af4:	4802      	ldr	r0, [pc, #8]	; (8088b00 <BSP_STDIO_IRQHandler+0x10>)
 8088af6:	f008 fd77 	bl	80915e8 <HAL_UART_IRQHandler>
}
 8088afa:	bf00      	nop
 8088afc:	bd80      	pop	{r7, pc}
 8088afe:	bf00      	nop
 8088b00:	2000bae0 	.word	0x2000bae0

08088b04 <BSP_STDIO_DataReceived>:

__weak void BSP_STDIO_DataReceived	(char* data, uint16_t length)
{
 8088b04:	b580      	push	{r7, lr}
 8088b06:	b084      	sub	sp, #16
 8088b08:	af00      	add	r7, sp, #0
 8088b0a:	6078      	str	r0, [r7, #4]
 8088b0c:	460b      	mov	r3, r1
 8088b0e:	807b      	strh	r3, [r7, #2]
	//volatile uint8_t status;

	for (int i=0; i<length;i++)
 8088b10:	2300      	movs	r3, #0
 8088b12:	60fb      	str	r3, [r7, #12]
 8088b14:	e00b      	b.n	8088b2e <BSP_STDIO_DataReceived+0x2a>
	{
		stdoutBuffer[i] = data[i];
 8088b16:	68fb      	ldr	r3, [r7, #12]
 8088b18:	687a      	ldr	r2, [r7, #4]
 8088b1a:	4413      	add	r3, r2
 8088b1c:	7819      	ldrb	r1, [r3, #0]
 8088b1e:	4a0d      	ldr	r2, [pc, #52]	; (8088b54 <BSP_STDIO_DataReceived+0x50>)
 8088b20:	68fb      	ldr	r3, [r7, #12]
 8088b22:	4413      	add	r3, r2
 8088b24:	460a      	mov	r2, r1
 8088b26:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<length;i++)
 8088b28:	68fb      	ldr	r3, [r7, #12]
 8088b2a:	3301      	adds	r3, #1
 8088b2c:	60fb      	str	r3, [r7, #12]
 8088b2e:	887b      	ldrh	r3, [r7, #2]
 8088b30:	68fa      	ldr	r2, [r7, #12]
 8088b32:	429a      	cmp	r2, r3
 8088b34:	dbef      	blt.n	8088b16 <BSP_STDIO_DataReceived+0x12>
	}

	HAL_UART_Transmit(&UARTHandle, (uint8_t*)stdoutBuffer, length, 100);
 8088b36:	887a      	ldrh	r2, [r7, #2]
 8088b38:	2364      	movs	r3, #100	; 0x64
 8088b3a:	4906      	ldr	r1, [pc, #24]	; (8088b54 <BSP_STDIO_DataReceived+0x50>)
 8088b3c:	4806      	ldr	r0, [pc, #24]	; (8088b58 <BSP_STDIO_DataReceived+0x54>)
 8088b3e:	f008 fc40 	bl	80913c2 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&UARTHandle,(uint8_t*)stdinBuffer, 1);
 8088b42:	2201      	movs	r2, #1
 8088b44:	4905      	ldr	r1, [pc, #20]	; (8088b5c <BSP_STDIO_DataReceived+0x58>)
 8088b46:	4804      	ldr	r0, [pc, #16]	; (8088b58 <BSP_STDIO_DataReceived+0x54>)
 8088b48:	f008 fcc7 	bl	80914da <HAL_UART_Receive_IT>
}
 8088b4c:	bf00      	nop
 8088b4e:	3710      	adds	r7, #16
 8088b50:	46bd      	mov	sp, r7
 8088b52:	bd80      	pop	{r7, pc}
 8088b54:	2002da98 	.word	0x2002da98
 8088b58:	2000bae0 	.word	0x2000bae0
 8088b5c:	2002dafc 	.word	0x2002dafc

08088b60 <BSP_STDIO_MspInit>:
 *           - Peripheral's GPIO Configuration
 *           - NVIC configuration for QSPI interrupt
 * @retval None
 */
__weak void BSP_STDIO_MspInit(void)
{
 8088b60:	b580      	push	{r7, lr}
 8088b62:	af00      	add	r7, sp, #0
	/*##-3- Configure the NVIC for USART1 #########################################*/
	/* NVIC configuration for USART1 interrupt */
	HAL_NVIC_SetPriority(DISCOVERY_COM1_IRQn, 0x0F, 0);
 8088b64:	2200      	movs	r2, #0
 8088b66:	210f      	movs	r1, #15
 8088b68:	2025      	movs	r0, #37	; 0x25
 8088b6a:	f000 fbf5 	bl	8089358 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DISCOVERY_COM1_IRQn);
 8088b6e:	2025      	movs	r0, #37	; 0x25
 8088b70:	f000 fc0e 	bl	8089390 <HAL_NVIC_EnableIRQ>
}
 8088b74:	bf00      	nop
 8088b76:	bd80      	pop	{r7, pc}

08088b78 <BSP_TS_Init>:
 * @param  ts_SizeX: Maximum X size of the TS area on LCD
 * @param  ts_SizeY: Maximum Y size of the TS area on LCD
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8088b78:	b580      	push	{r7, lr}
 8088b7a:	b084      	sub	sp, #16
 8088b7c:	af00      	add	r7, sp, #0
 8088b7e:	4603      	mov	r3, r0
 8088b80:	460a      	mov	r2, r1
 8088b82:	80fb      	strh	r3, [r7, #6]
 8088b84:	4613      	mov	r3, r2
 8088b86:	80bb      	strh	r3, [r7, #4]
	uint8_t status = TS_OK;
 8088b88:	2300      	movs	r3, #0
 8088b8a:	73fb      	strb	r3, [r7, #15]
	tsXBoundary = ts_SizeX;
 8088b8c:	4a14      	ldr	r2, [pc, #80]	; (8088be0 <BSP_TS_Init+0x68>)
 8088b8e:	88fb      	ldrh	r3, [r7, #6]
 8088b90:	8013      	strh	r3, [r2, #0]
	tsYBoundary = ts_SizeY;
 8088b92:	4a14      	ldr	r2, [pc, #80]	; (8088be4 <BSP_TS_Init+0x6c>)
 8088b94:	88bb      	ldrh	r3, [r7, #4]
 8088b96:	8013      	strh	r3, [r2, #0]

	/* Read ID and verify if the touch screen driver is ready */
	ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8088b98:	4b13      	ldr	r3, [pc, #76]	; (8088be8 <BSP_TS_Init+0x70>)
 8088b9a:	681b      	ldr	r3, [r3, #0]
 8088b9c:	2070      	movs	r0, #112	; 0x70
 8088b9e:	4798      	blx	r3
	if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8088ba0:	4b11      	ldr	r3, [pc, #68]	; (8088be8 <BSP_TS_Init+0x70>)
 8088ba2:	685b      	ldr	r3, [r3, #4]
 8088ba4:	2070      	movs	r0, #112	; 0x70
 8088ba6:	4798      	blx	r3
 8088ba8:	4603      	mov	r3, r0
 8088baa:	2b51      	cmp	r3, #81	; 0x51
 8088bac:	d111      	bne.n	8088bd2 <BSP_TS_Init+0x5a>
	{
		/* Initialize the TS driver structure */
		tsDriver = &ft5336_ts_drv;
 8088bae:	4b0f      	ldr	r3, [pc, #60]	; (8088bec <BSP_TS_Init+0x74>)
 8088bb0:	4a0d      	ldr	r2, [pc, #52]	; (8088be8 <BSP_TS_Init+0x70>)
 8088bb2:	601a      	str	r2, [r3, #0]
		I2cAddress = TS_I2C_ADDRESS;
 8088bb4:	4b0e      	ldr	r3, [pc, #56]	; (8088bf0 <BSP_TS_Init+0x78>)
 8088bb6:	2270      	movs	r2, #112	; 0x70
 8088bb8:	701a      	strb	r2, [r3, #0]
		tsOrientation = TS_SWAP_XY;
 8088bba:	4b0e      	ldr	r3, [pc, #56]	; (8088bf4 <BSP_TS_Init+0x7c>)
 8088bbc:	2208      	movs	r2, #8
 8088bbe:	701a      	strb	r2, [r3, #0]

		/* Initialize the TS driver */
		tsDriver->Start(I2cAddress);
 8088bc0:	4b0a      	ldr	r3, [pc, #40]	; (8088bec <BSP_TS_Init+0x74>)
 8088bc2:	681b      	ldr	r3, [r3, #0]
 8088bc4:	68db      	ldr	r3, [r3, #12]
 8088bc6:	4a0a      	ldr	r2, [pc, #40]	; (8088bf0 <BSP_TS_Init+0x78>)
 8088bc8:	7812      	ldrb	r2, [r2, #0]
 8088bca:	b292      	uxth	r2, r2
 8088bcc:	4610      	mov	r0, r2
 8088bce:	4798      	blx	r3
 8088bd0:	e001      	b.n	8088bd6 <BSP_TS_Init+0x5e>
	}
	else
	{
		status = TS_DEVICE_NOT_FOUND;
 8088bd2:	2303      	movs	r3, #3
 8088bd4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8088bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8088bd8:	4618      	mov	r0, r3
 8088bda:	3710      	adds	r7, #16
 8088bdc:	46bd      	mov	sp, r7
 8088bde:	bd80      	pop	{r7, pc}
 8088be0:	2000bb54 	.word	0x2000bb54
 8088be4:	2000bb56 	.word	0x2000bb56
 8088be8:	2000b000 	.word	0x2000b000
 8088bec:	2000bb50 	.word	0x2000bb50
 8088bf0:	2000bb59 	.word	0x2000bb59
 8088bf4:	2000bb58 	.word	0x2000bb58

08088bf8 <BSP_TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8088bf8:	b590      	push	{r4, r7, lr}
 8088bfa:	b097      	sub	sp, #92	; 0x5c
 8088bfc:	af02      	add	r7, sp, #8
 8088bfe:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 8088c00:	2300      	movs	r3, #0
 8088c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
	uint32_t weight = 0;
 8088c06:	2300      	movs	r3, #0
 8088c08:	613b      	str	r3, [r7, #16]
	uint32_t area = 0;
 8088c0a:	2300      	movs	r3, #0
 8088c0c:	60fb      	str	r3, [r7, #12]
	uint32_t event = 0;
 8088c0e:	2300      	movs	r3, #0
 8088c10:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8088c12:	4bbc      	ldr	r3, [pc, #752]	; (8088f04 <BSP_TS_GetState+0x30c>)
 8088c14:	681b      	ldr	r3, [r3, #0]
 8088c16:	691b      	ldr	r3, [r3, #16]
 8088c18:	4abb      	ldr	r2, [pc, #748]	; (8088f08 <BSP_TS_GetState+0x310>)
 8088c1a:	7812      	ldrb	r2, [r2, #0]
 8088c1c:	b292      	uxth	r2, r2
 8088c1e:	4610      	mov	r0, r2
 8088c20:	4798      	blx	r3
 8088c22:	4603      	mov	r3, r0
 8088c24:	461a      	mov	r2, r3
 8088c26:	687b      	ldr	r3, [r7, #4]
 8088c28:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 8088c2a:	687b      	ldr	r3, [r7, #4]
 8088c2c:	781b      	ldrb	r3, [r3, #0]
 8088c2e:	2b00      	cmp	r3, #0
 8088c30:	f000 81f2 	beq.w	8089018 <BSP_TS_GetState+0x420>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 8088c34:	2300      	movs	r3, #0
 8088c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8088c38:	e1e1      	b.n	8088ffe <BSP_TS_GetState+0x406>
		{
			/* Get each touch coordinates */
			tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8088c3a:	4bb2      	ldr	r3, [pc, #712]	; (8088f04 <BSP_TS_GetState+0x30c>)
 8088c3c:	681b      	ldr	r3, [r3, #0]
 8088c3e:	695b      	ldr	r3, [r3, #20]
 8088c40:	4ab1      	ldr	r2, [pc, #708]	; (8088f08 <BSP_TS_GetState+0x310>)
 8088c42:	7812      	ldrb	r2, [r2, #0]
 8088c44:	b290      	uxth	r0, r2
 8088c46:	f107 0120 	add.w	r1, r7, #32
 8088c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8088c4c:	0052      	lsls	r2, r2, #1
 8088c4e:	188c      	adds	r4, r1, r2
 8088c50:	f107 0114 	add.w	r1, r7, #20
 8088c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8088c56:	0052      	lsls	r2, r2, #1
 8088c58:	440a      	add	r2, r1
 8088c5a:	4621      	mov	r1, r4
 8088c5c:	4798      	blx	r3

			if(tsOrientation == TS_SWAP_NONE)
 8088c5e:	4bab      	ldr	r3, [pc, #684]	; (8088f0c <BSP_TS_GetState+0x314>)
 8088c60:	781b      	ldrb	r3, [r3, #0]
 8088c62:	2b01      	cmp	r3, #1
 8088c64:	d11b      	bne.n	8088c9e <BSP_TS_GetState+0xa6>
			{
				x[index] = brute_x[index];
 8088c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088c68:	005b      	lsls	r3, r3, #1
 8088c6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088c6e:	4413      	add	r3, r2
 8088c70:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8088c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088c76:	005b      	lsls	r3, r3, #1
 8088c78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088c7c:	440b      	add	r3, r1
 8088c7e:	f823 2c18 	strh.w	r2, [r3, #-24]
				y[index] = brute_y[index];
 8088c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088c84:	005b      	lsls	r3, r3, #1
 8088c86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088c8a:	4413      	add	r3, r2
 8088c8c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8088c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088c92:	005b      	lsls	r3, r3, #1
 8088c94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088c98:	440b      	add	r3, r1
 8088c9a:	f823 2c24 	strh.w	r2, [r3, #-36]
			}

			if(tsOrientation & TS_SWAP_X)
 8088c9e:	4b9b      	ldr	r3, [pc, #620]	; (8088f0c <BSP_TS_GetState+0x314>)
 8088ca0:	781b      	ldrb	r3, [r3, #0]
 8088ca2:	f003 0302 	and.w	r3, r3, #2
 8088ca6:	2b00      	cmp	r3, #0
 8088ca8:	d010      	beq.n	8088ccc <BSP_TS_GetState+0xd4>
			{
				x[index] = 4096 - brute_x[index];
 8088caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088cac:	005b      	lsls	r3, r3, #1
 8088cae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088cb2:	4413      	add	r3, r2
 8088cb4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8088cb8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8088cbc:	b29a      	uxth	r2, r3
 8088cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088cc0:	005b      	lsls	r3, r3, #1
 8088cc2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088cc6:	440b      	add	r3, r1
 8088cc8:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			if(tsOrientation & TS_SWAP_Y)
 8088ccc:	4b8f      	ldr	r3, [pc, #572]	; (8088f0c <BSP_TS_GetState+0x314>)
 8088cce:	781b      	ldrb	r3, [r3, #0]
 8088cd0:	f003 0304 	and.w	r3, r3, #4
 8088cd4:	2b00      	cmp	r3, #0
 8088cd6:	d010      	beq.n	8088cfa <BSP_TS_GetState+0x102>
			{
				y[index] = 4096 - brute_y[index];
 8088cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088cda:	005b      	lsls	r3, r3, #1
 8088cdc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088ce0:	4413      	add	r3, r2
 8088ce2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8088ce6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8088cea:	b29a      	uxth	r2, r3
 8088cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088cee:	005b      	lsls	r3, r3, #1
 8088cf0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088cf4:	440b      	add	r3, r1
 8088cf6:	f823 2c24 	strh.w	r2, [r3, #-36]
			}

			if(tsOrientation & TS_SWAP_XY)
 8088cfa:	4b84      	ldr	r3, [pc, #528]	; (8088f0c <BSP_TS_GetState+0x314>)
 8088cfc:	781b      	ldrb	r3, [r3, #0]
 8088cfe:	f003 0308 	and.w	r3, r3, #8
 8088d02:	2b00      	cmp	r3, #0
 8088d04:	d01b      	beq.n	8088d3e <BSP_TS_GetState+0x146>
			{
				y[index] = brute_x[index];
 8088d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d08:	005b      	lsls	r3, r3, #1
 8088d0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d0e:	4413      	add	r3, r2
 8088d10:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8088d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d16:	005b      	lsls	r3, r3, #1
 8088d18:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088d1c:	440b      	add	r3, r1
 8088d1e:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 8088d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d24:	005b      	lsls	r3, r3, #1
 8088d26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d2a:	4413      	add	r3, r2
 8088d2c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8088d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d32:	005b      	lsls	r3, r3, #1
 8088d34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088d38:	440b      	add	r3, r1
 8088d3a:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

#if (LCD_ORIENTATION == LCD_ORIENTATION_180)
	if ((int32_t)(480 - x[index])>=0)
 8088d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d40:	005b      	lsls	r3, r3, #1
 8088d42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d46:	4413      	add	r3, r2
 8088d48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8088d4c:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8088d50:	2b00      	cmp	r3, #0
 8088d52:	db11      	blt.n	8088d78 <BSP_TS_GetState+0x180>
		x[index] = 480 - x[index];
 8088d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d56:	005b      	lsls	r3, r3, #1
 8088d58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d5c:	4413      	add	r3, r2
 8088d5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8088d62:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8088d66:	b29a      	uxth	r2, r3
 8088d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d6a:	005b      	lsls	r3, r3, #1
 8088d6c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088d70:	440b      	add	r3, r1
 8088d72:	f823 2c18 	strh.w	r2, [r3, #-24]
 8088d76:	e007      	b.n	8088d88 <BSP_TS_GetState+0x190>
	else
		x[index] = 0;
 8088d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d7a:	005b      	lsls	r3, r3, #1
 8088d7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d80:	4413      	add	r3, r2
 8088d82:	2200      	movs	r2, #0
 8088d84:	f823 2c18 	strh.w	r2, [r3, #-24]

	if ((int32_t)(260 - y[index])>=0)
 8088d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088d8a:	005b      	lsls	r3, r3, #1
 8088d8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088d90:	4413      	add	r3, r2
 8088d92:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8088d96:	f5c3 7382 	rsb	r3, r3, #260	; 0x104
 8088d9a:	2b00      	cmp	r3, #0
 8088d9c:	db11      	blt.n	8088dc2 <BSP_TS_GetState+0x1ca>
		y[index] = 260 - y[index];
 8088d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088da0:	005b      	lsls	r3, r3, #1
 8088da2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088da6:	4413      	add	r3, r2
 8088da8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8088dac:	f5c3 7382 	rsb	r3, r3, #260	; 0x104
 8088db0:	b29a      	uxth	r2, r3
 8088db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088db4:	005b      	lsls	r3, r3, #1
 8088db6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088dba:	440b      	add	r3, r1
 8088dbc:	f823 2c24 	strh.w	r2, [r3, #-36]
 8088dc0:	e007      	b.n	8088dd2 <BSP_TS_GetState+0x1da>
	else
		y[index] = 0;
 8088dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088dc4:	005b      	lsls	r3, r3, #1
 8088dc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088dca:	4413      	add	r3, r2
 8088dcc:	2200      	movs	r2, #0
 8088dce:	f823 2c24 	strh.w	r2, [r3, #-36]
#endif /* LCD_ORIENTATION */

	x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8088dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088dd4:	005b      	lsls	r3, r3, #1
 8088dd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088dda:	4413      	add	r3, r2
 8088ddc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8088de0:	4619      	mov	r1, r3
 8088de2:	4a4b      	ldr	r2, [pc, #300]	; (8088f10 <BSP_TS_GetState+0x318>)
 8088de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088dea:	4299      	cmp	r1, r3
 8088dec:	d90e      	bls.n	8088e0c <BSP_TS_GetState+0x214>
 8088dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088df0:	005b      	lsls	r3, r3, #1
 8088df2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088df6:	4413      	add	r3, r2
 8088df8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8088dfc:	4944      	ldr	r1, [pc, #272]	; (8088f10 <BSP_TS_GetState+0x318>)
 8088dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8088e04:	b29b      	uxth	r3, r3
 8088e06:	1ad3      	subs	r3, r2, r3
 8088e08:	b29b      	uxth	r3, r3
 8088e0a:	e00d      	b.n	8088e28 <BSP_TS_GetState+0x230>
 8088e0c:	4a40      	ldr	r2, [pc, #256]	; (8088f10 <BSP_TS_GetState+0x318>)
 8088e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088e14:	b29a      	uxth	r2, r3
 8088e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e18:	005b      	lsls	r3, r3, #1
 8088e1a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088e1e:	440b      	add	r3, r1
 8088e20:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8088e24:	1ad3      	subs	r3, r2, r3
 8088e26:	b29b      	uxth	r3, r3
 8088e28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8088e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e2e:	005b      	lsls	r3, r3, #1
 8088e30:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088e34:	4413      	add	r3, r2
 8088e36:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8088e3a:	4619      	mov	r1, r3
 8088e3c:	4a35      	ldr	r2, [pc, #212]	; (8088f14 <BSP_TS_GetState+0x31c>)
 8088e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088e44:	4299      	cmp	r1, r3
 8088e46:	d90e      	bls.n	8088e66 <BSP_TS_GetState+0x26e>
 8088e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e4a:	005b      	lsls	r3, r3, #1
 8088e4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088e50:	4413      	add	r3, r2
 8088e52:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8088e56:	492f      	ldr	r1, [pc, #188]	; (8088f14 <BSP_TS_GetState+0x31c>)
 8088e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8088e5e:	b29b      	uxth	r3, r3
 8088e60:	1ad3      	subs	r3, r2, r3
 8088e62:	b29b      	uxth	r3, r3
 8088e64:	e00d      	b.n	8088e82 <BSP_TS_GetState+0x28a>
 8088e66:	4a2b      	ldr	r2, [pc, #172]	; (8088f14 <BSP_TS_GetState+0x31c>)
 8088e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088e6e:	b29a      	uxth	r2, r3
 8088e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e72:	005b      	lsls	r3, r3, #1
 8088e74:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8088e78:	440b      	add	r3, r1
 8088e7a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8088e7e:	1ad3      	subs	r3, r2, r3
 8088e80:	b29b      	uxth	r3, r3
 8088e82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	if ((x_diff + y_diff) > 5)
 8088e86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8088e8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8088e8e:	4413      	add	r3, r2
 8088e90:	2b05      	cmp	r3, #5
 8088e92:	dd17      	ble.n	8088ec4 <BSP_TS_GetState+0x2cc>
	{
		_x[index] = x[index];
 8088e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088e96:	005b      	lsls	r3, r3, #1
 8088e98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088e9c:	4413      	add	r3, r2
 8088e9e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8088ea2:	4619      	mov	r1, r3
 8088ea4:	4a1a      	ldr	r2, [pc, #104]	; (8088f10 <BSP_TS_GetState+0x318>)
 8088ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		_y[index] = y[index];
 8088eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088eae:	005b      	lsls	r3, r3, #1
 8088eb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088eb4:	4413      	add	r3, r2
 8088eb6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8088eba:	4619      	mov	r1, r3
 8088ebc:	4a15      	ldr	r2, [pc, #84]	; (8088f14 <BSP_TS_GetState+0x31c>)
 8088ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ec0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8088ec4:	4b10      	ldr	r3, [pc, #64]	; (8088f08 <BSP_TS_GetState+0x310>)
 8088ec6:	781b      	ldrb	r3, [r3, #0]
 8088ec8:	2b70      	cmp	r3, #112	; 0x70
 8088eca:	d125      	bne.n	8088f18 <BSP_TS_GetState+0x320>
	{
		TS_State->touchX[index] = x[index];
 8088ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ece:	005b      	lsls	r3, r3, #1
 8088ed0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088ed4:	4413      	add	r3, r2
 8088ed6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8088eda:	687a      	ldr	r2, [r7, #4]
 8088edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ede:	005b      	lsls	r3, r3, #1
 8088ee0:	4413      	add	r3, r2
 8088ee2:	460a      	mov	r2, r1
 8088ee4:	805a      	strh	r2, [r3, #2]
		TS_State->touchY[index] = y[index];
 8088ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ee8:	005b      	lsls	r3, r3, #1
 8088eea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8088eee:	4413      	add	r3, r2
 8088ef0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8088ef4:	687a      	ldr	r2, [r7, #4]
 8088ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ef8:	3304      	adds	r3, #4
 8088efa:	005b      	lsls	r3, r3, #1
 8088efc:	4413      	add	r3, r2
 8088efe:	460a      	mov	r2, r1
 8088f00:	809a      	strh	r2, [r3, #4]
 8088f02:	e02c      	b.n	8088f5e <BSP_TS_GetState+0x366>
 8088f04:	2000bb50 	.word	0x2000bb50
 8088f08:	2000bb59 	.word	0x2000bb59
 8088f0c:	2000bb58 	.word	0x2000bb58
 8088f10:	2000bb5c 	.word	0x2000bb5c
 8088f14:	2000bb70 	.word	0x2000bb70
	}
	else
	{
		/* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
		TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8088f18:	4b42      	ldr	r3, [pc, #264]	; (8089024 <BSP_TS_GetState+0x42c>)
 8088f1a:	881b      	ldrh	r3, [r3, #0]
 8088f1c:	4619      	mov	r1, r3
 8088f1e:	4a42      	ldr	r2, [pc, #264]	; (8089028 <BSP_TS_GetState+0x430>)
 8088f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088f26:	fb03 f301 	mul.w	r3, r3, r1
 8088f2a:	0b1b      	lsrs	r3, r3, #12
 8088f2c:	b299      	uxth	r1, r3
 8088f2e:	687a      	ldr	r2, [r7, #4]
 8088f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f32:	005b      	lsls	r3, r3, #1
 8088f34:	4413      	add	r3, r2
 8088f36:	460a      	mov	r2, r1
 8088f38:	805a      	strh	r2, [r3, #2]
		TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8088f3a:	4b3c      	ldr	r3, [pc, #240]	; (808902c <BSP_TS_GetState+0x434>)
 8088f3c:	881b      	ldrh	r3, [r3, #0]
 8088f3e:	4619      	mov	r1, r3
 8088f40:	4a3b      	ldr	r2, [pc, #236]	; (8089030 <BSP_TS_GetState+0x438>)
 8088f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8088f48:	fb03 f301 	mul.w	r3, r3, r1
 8088f4c:	0b1b      	lsrs	r3, r3, #12
 8088f4e:	b299      	uxth	r1, r3
 8088f50:	687a      	ldr	r2, [r7, #4]
 8088f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f54:	3304      	adds	r3, #4
 8088f56:	005b      	lsls	r3, r3, #1
 8088f58:	4413      	add	r3, r2
 8088f5a:	460a      	mov	r2, r1
 8088f5c:	809a      	strh	r2, [r3, #4]
	}

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

	/* Get touch info related to the current touch */
	ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8088f5e:	4b35      	ldr	r3, [pc, #212]	; (8089034 <BSP_TS_GetState+0x43c>)
 8088f60:	781b      	ldrb	r3, [r3, #0]
 8088f62:	b298      	uxth	r0, r3
 8088f64:	f107 010c 	add.w	r1, r7, #12
 8088f68:	f107 0210 	add.w	r2, r7, #16
 8088f6c:	f107 0308 	add.w	r3, r7, #8
 8088f70:	9300      	str	r3, [sp, #0]
 8088f72:	460b      	mov	r3, r1
 8088f74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8088f76:	f7f8 ff0d 	bl	8081d94 <ft5336_TS_GetTouchInfo>

	/* Update TS_State structure */
	TS_State->touchWeight[index] = weight;
 8088f7a:	693b      	ldr	r3, [r7, #16]
 8088f7c:	b2d9      	uxtb	r1, r3
 8088f7e:	687a      	ldr	r2, [r7, #4]
 8088f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f82:	4413      	add	r3, r2
 8088f84:	3316      	adds	r3, #22
 8088f86:	460a      	mov	r2, r1
 8088f88:	701a      	strb	r2, [r3, #0]
	TS_State->touchArea[index]   = area;
 8088f8a:	68fb      	ldr	r3, [r7, #12]
 8088f8c:	b2d9      	uxtb	r1, r3
 8088f8e:	687a      	ldr	r2, [r7, #4]
 8088f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088f92:	4413      	add	r3, r2
 8088f94:	3320      	adds	r3, #32
 8088f96:	460a      	mov	r2, r1
 8088f98:	701a      	strb	r2, [r3, #0]

	/* Remap touch event */
	switch(event)
 8088f9a:	68bb      	ldr	r3, [r7, #8]
 8088f9c:	2b03      	cmp	r3, #3
 8088f9e:	d827      	bhi.n	8088ff0 <BSP_TS_GetState+0x3f8>
 8088fa0:	a201      	add	r2, pc, #4	; (adr r2, 8088fa8 <BSP_TS_GetState+0x3b0>)
 8088fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8088fa6:	bf00      	nop
 8088fa8:	08088fb9 	.word	0x08088fb9
 8088fac:	08088fc7 	.word	0x08088fc7
 8088fb0:	08088fd5 	.word	0x08088fd5
 8088fb4:	08088fe3 	.word	0x08088fe3
	{
	case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
		TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8088fb8:	687a      	ldr	r2, [r7, #4]
 8088fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088fbc:	4413      	add	r3, r2
 8088fbe:	331b      	adds	r3, #27
 8088fc0:	2201      	movs	r2, #1
 8088fc2:	701a      	strb	r2, [r3, #0]
		break;
 8088fc4:	e018      	b.n	8088ff8 <BSP_TS_GetState+0x400>
	case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
		TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8088fc6:	687a      	ldr	r2, [r7, #4]
 8088fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088fca:	4413      	add	r3, r2
 8088fcc:	331b      	adds	r3, #27
 8088fce:	2202      	movs	r2, #2
 8088fd0:	701a      	strb	r2, [r3, #0]
		break;
 8088fd2:	e011      	b.n	8088ff8 <BSP_TS_GetState+0x400>
	case FT5336_TOUCH_EVT_FLAG_CONTACT :
		TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8088fd4:	687a      	ldr	r2, [r7, #4]
 8088fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088fd8:	4413      	add	r3, r2
 8088fda:	331b      	adds	r3, #27
 8088fdc:	2203      	movs	r2, #3
 8088fde:	701a      	strb	r2, [r3, #0]
		break;
 8088fe0:	e00a      	b.n	8088ff8 <BSP_TS_GetState+0x400>
	case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
		TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8088fe2:	687a      	ldr	r2, [r7, #4]
 8088fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088fe6:	4413      	add	r3, r2
 8088fe8:	331b      	adds	r3, #27
 8088fea:	2200      	movs	r2, #0
 8088fec:	701a      	strb	r2, [r3, #0]
		break;
 8088fee:	e003      	b.n	8088ff8 <BSP_TS_GetState+0x400>
	default :
		ts_status = TS_ERROR;
 8088ff0:	2301      	movs	r3, #1
 8088ff2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
 8088ff6:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 8088ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8088ffa:	3301      	adds	r3, #1
 8088ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8088ffe:	687b      	ldr	r3, [r7, #4]
 8089000:	781b      	ldrb	r3, [r3, #0]
 8089002:	461a      	mov	r2, r3
 8089004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8089006:	4293      	cmp	r3, r2
 8089008:	f4ff ae17 	bcc.w	8088c3a <BSP_TS_GetState+0x42>

		} /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
		/* Get gesture Id */
		ts_status = BSP_TS_Get_GestureId(TS_State);
 808900c:	6878      	ldr	r0, [r7, #4]
 808900e:	f000 f813 	bl	8089038 <BSP_TS_Get_GestureId>
 8089012:	4603      	mov	r3, r0
 8089014:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 8089018:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 808901c:	4618      	mov	r0, r3
 808901e:	3754      	adds	r7, #84	; 0x54
 8089020:	46bd      	mov	sp, r7
 8089022:	bd90      	pop	{r4, r7, pc}
 8089024:	2000bb54 	.word	0x2000bb54
 8089028:	2000bb5c 	.word	0x2000bb5c
 808902c:	2000bb56 	.word	0x2000bb56
 8089030:	2000bb70 	.word	0x2000bb70
 8089034:	2000bb59 	.word	0x2000bb59

08089038 <BSP_TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8089038:	b580      	push	{r7, lr}
 808903a:	b084      	sub	sp, #16
 808903c:	af00      	add	r7, sp, #0
 808903e:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = 0;
 8089040:	2300      	movs	r3, #0
 8089042:	60bb      	str	r3, [r7, #8]
	uint8_t  ts_status = TS_OK;
 8089044:	2300      	movs	r3, #0
 8089046:	73fb      	strb	r3, [r7, #15]

	/* Get gesture Id */
	ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8089048:	4b1f      	ldr	r3, [pc, #124]	; (80890c8 <BSP_TS_Get_GestureId+0x90>)
 808904a:	781b      	ldrb	r3, [r3, #0]
 808904c:	b29b      	uxth	r3, r3
 808904e:	f107 0208 	add.w	r2, r7, #8
 8089052:	4611      	mov	r1, r2
 8089054:	4618      	mov	r0, r3
 8089056:	f7f8 fe84 	bl	8081d62 <ft5336_TS_GetGestureID>

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 808905a:	68bb      	ldr	r3, [r7, #8]
 808905c:	2b18      	cmp	r3, #24
 808905e:	d01b      	beq.n	8089098 <BSP_TS_Get_GestureId+0x60>
 8089060:	2b18      	cmp	r3, #24
 8089062:	d806      	bhi.n	8089072 <BSP_TS_Get_GestureId+0x3a>
 8089064:	2b10      	cmp	r3, #16
 8089066:	d00f      	beq.n	8089088 <BSP_TS_Get_GestureId+0x50>
 8089068:	2b14      	cmp	r3, #20
 808906a:	d011      	beq.n	8089090 <BSP_TS_Get_GestureId+0x58>
 808906c:	2b00      	cmp	r3, #0
 808906e:	d007      	beq.n	8089080 <BSP_TS_Get_GestureId+0x48>
 8089070:	e022      	b.n	80890b8 <BSP_TS_Get_GestureId+0x80>
 8089072:	2b40      	cmp	r3, #64	; 0x40
 8089074:	d018      	beq.n	80890a8 <BSP_TS_Get_GestureId+0x70>
 8089076:	2b49      	cmp	r3, #73	; 0x49
 8089078:	d01a      	beq.n	80890b0 <BSP_TS_Get_GestureId+0x78>
 808907a:	2b1c      	cmp	r3, #28
 808907c:	d010      	beq.n	80890a0 <BSP_TS_Get_GestureId+0x68>
 808907e:	e01b      	b.n	80890b8 <BSP_TS_Get_GestureId+0x80>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 8089080:	687b      	ldr	r3, [r7, #4]
 8089082:	2200      	movs	r2, #0
 8089084:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8089086:	e01a      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 8089088:	687b      	ldr	r3, [r7, #4]
 808908a:	2201      	movs	r2, #1
 808908c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 808908e:	e016      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8089090:	687b      	ldr	r3, [r7, #4]
 8089092:	2202      	movs	r2, #2
 8089094:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8089096:	e012      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8089098:	687b      	ldr	r3, [r7, #4]
 808909a:	2203      	movs	r2, #3
 808909c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 808909e:	e00e      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80890a0:	687b      	ldr	r3, [r7, #4]
 80890a2:	2204      	movs	r2, #4
 80890a4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80890a6:	e00a      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 80890a8:	687b      	ldr	r3, [r7, #4]
 80890aa:	2205      	movs	r2, #5
 80890ac:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80890ae:	e006      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80890b0:	687b      	ldr	r3, [r7, #4]
 80890b2:	2206      	movs	r2, #6
 80890b4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80890b6:	e002      	b.n	80890be <BSP_TS_Get_GestureId+0x86>
	default :
		ts_status = TS_ERROR;
 80890b8:	2301      	movs	r3, #1
 80890ba:	73fb      	strb	r3, [r7, #15]
		break;
 80890bc:	bf00      	nop
	} /* of switch(gestureId) */

	return(ts_status);
 80890be:	7bfb      	ldrb	r3, [r7, #15]
}
 80890c0:	4618      	mov	r0, r3
 80890c2:	3710      	adds	r7, #16
 80890c4:	46bd      	mov	sp, r7
 80890c6:	bd80      	pop	{r7, pc}
 80890c8:	2000bb59 	.word	0x2000bb59

080890cc <BSP_TS_ITClear>:

/**
 * @brief  Clears all touch screen interrupts.
 */
void BSP_TS_ITClear(void)
{
 80890cc:	b580      	push	{r7, lr}
 80890ce:	af00      	add	r7, sp, #0
	/* Clear TS IT pending bits */
	tsDriver->ClearIT(I2cAddress);
 80890d0:	4b04      	ldr	r3, [pc, #16]	; (80890e4 <BSP_TS_ITClear+0x18>)
 80890d2:	681b      	ldr	r3, [r3, #0]
 80890d4:	69db      	ldr	r3, [r3, #28]
 80890d6:	4a04      	ldr	r2, [pc, #16]	; (80890e8 <BSP_TS_ITClear+0x1c>)
 80890d8:	7812      	ldrb	r2, [r2, #0]
 80890da:	b292      	uxth	r2, r2
 80890dc:	4610      	mov	r0, r2
 80890de:	4798      	blx	r3
}
 80890e0:	bf00      	nop
 80890e2:	bd80      	pop	{r7, pc}
 80890e4:	2000bb50 	.word	0x2000bb50
 80890e8:	2000bb59 	.word	0x2000bb59

080890ec <BSP_WIFI_IRQHandler>:

	return WIFI_OK;
}

void BSP_WIFI_IRQHandler	(void)
{
 80890ec:	b580      	push	{r7, lr}
 80890ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&UARTHandle);
 80890f0:	4802      	ldr	r0, [pc, #8]	; (80890fc <BSP_WIFI_IRQHandler+0x10>)
 80890f2:	f008 fa79 	bl	80915e8 <HAL_UART_IRQHandler>
}
 80890f6:	bf00      	nop
 80890f8:	bd80      	pop	{r7, pc}
 80890fa:	bf00      	nop
 80890fc:	2000bb84 	.word	0x2000bb84

08089100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8089100:	b580      	push	{r7, lr}
 8089102:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8089104:	4b0b      	ldr	r3, [pc, #44]	; (8089134 <HAL_Init+0x34>)
 8089106:	681b      	ldr	r3, [r3, #0]
 8089108:	4a0a      	ldr	r2, [pc, #40]	; (8089134 <HAL_Init+0x34>)
 808910a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 808910e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8089110:	4b08      	ldr	r3, [pc, #32]	; (8089134 <HAL_Init+0x34>)
 8089112:	681b      	ldr	r3, [r3, #0]
 8089114:	4a07      	ldr	r2, [pc, #28]	; (8089134 <HAL_Init+0x34>)
 8089116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808911a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 808911c:	2003      	movs	r0, #3
 808911e:	f000 f910 	bl	8089342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8089122:	200f      	movs	r0, #15
 8089124:	f008 f832 	bl	809118c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8089128:	f012 fd4f 	bl	809bbca <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 808912c:	2300      	movs	r3, #0
}
 808912e:	4618      	mov	r0, r3
 8089130:	bd80      	pop	{r7, pc}
 8089132:	bf00      	nop
 8089134:	40023c00 	.word	0x40023c00

08089138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8089138:	b480      	push	{r7}
 808913a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 808913c:	4b06      	ldr	r3, [pc, #24]	; (8089158 <HAL_IncTick+0x20>)
 808913e:	781b      	ldrb	r3, [r3, #0]
 8089140:	461a      	mov	r2, r3
 8089142:	4b06      	ldr	r3, [pc, #24]	; (808915c <HAL_IncTick+0x24>)
 8089144:	681b      	ldr	r3, [r3, #0]
 8089146:	4413      	add	r3, r2
 8089148:	4a04      	ldr	r2, [pc, #16]	; (808915c <HAL_IncTick+0x24>)
 808914a:	6013      	str	r3, [r2, #0]
}
 808914c:	bf00      	nop
 808914e:	46bd      	mov	sp, r7
 8089150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089154:	4770      	bx	lr
 8089156:	bf00      	nop
 8089158:	2000b081 	.word	0x2000b081
 808915c:	2002db60 	.word	0x2002db60

08089160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8089160:	b480      	push	{r7}
 8089162:	af00      	add	r7, sp, #0
  return uwTick;
 8089164:	4b03      	ldr	r3, [pc, #12]	; (8089174 <HAL_GetTick+0x14>)
 8089166:	681b      	ldr	r3, [r3, #0]
}
 8089168:	4618      	mov	r0, r3
 808916a:	46bd      	mov	sp, r7
 808916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089170:	4770      	bx	lr
 8089172:	bf00      	nop
 8089174:	2002db60 	.word	0x2002db60

08089178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8089178:	b580      	push	{r7, lr}
 808917a:	b084      	sub	sp, #16
 808917c:	af00      	add	r7, sp, #0
 808917e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8089180:	f7ff ffee 	bl	8089160 <HAL_GetTick>
 8089184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8089186:	687b      	ldr	r3, [r7, #4]
 8089188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 808918a:	68fb      	ldr	r3, [r7, #12]
 808918c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8089190:	d005      	beq.n	808919e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8089192:	4b09      	ldr	r3, [pc, #36]	; (80891b8 <HAL_Delay+0x40>)
 8089194:	781b      	ldrb	r3, [r3, #0]
 8089196:	461a      	mov	r2, r3
 8089198:	68fb      	ldr	r3, [r7, #12]
 808919a:	4413      	add	r3, r2
 808919c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 808919e:	bf00      	nop
 80891a0:	f7ff ffde 	bl	8089160 <HAL_GetTick>
 80891a4:	4602      	mov	r2, r0
 80891a6:	68bb      	ldr	r3, [r7, #8]
 80891a8:	1ad3      	subs	r3, r2, r3
 80891aa:	68fa      	ldr	r2, [r7, #12]
 80891ac:	429a      	cmp	r2, r3
 80891ae:	d8f7      	bhi.n	80891a0 <HAL_Delay+0x28>
  {
  }
}
 80891b0:	bf00      	nop
 80891b2:	3710      	adds	r7, #16
 80891b4:	46bd      	mov	sp, r7
 80891b6:	bd80      	pop	{r7, pc}
 80891b8:	2000b081 	.word	0x2000b081

080891bc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80891bc:	b480      	push	{r7}
 80891be:	b085      	sub	sp, #20
 80891c0:	af00      	add	r7, sp, #0
 80891c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80891c4:	687b      	ldr	r3, [r7, #4]
 80891c6:	f003 0307 	and.w	r3, r3, #7
 80891ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80891cc:	4b0b      	ldr	r3, [pc, #44]	; (80891fc <NVIC_SetPriorityGrouping+0x40>)
 80891ce:	68db      	ldr	r3, [r3, #12]
 80891d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80891d2:	68ba      	ldr	r2, [r7, #8]
 80891d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80891d8:	4013      	ands	r3, r2
 80891da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80891dc:	68fb      	ldr	r3, [r7, #12]
 80891de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80891e0:	68bb      	ldr	r3, [r7, #8]
 80891e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80891e4:	4b06      	ldr	r3, [pc, #24]	; (8089200 <NVIC_SetPriorityGrouping+0x44>)
 80891e6:	4313      	orrs	r3, r2
 80891e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80891ea:	4a04      	ldr	r2, [pc, #16]	; (80891fc <NVIC_SetPriorityGrouping+0x40>)
 80891ec:	68bb      	ldr	r3, [r7, #8]
 80891ee:	60d3      	str	r3, [r2, #12]
}
 80891f0:	bf00      	nop
 80891f2:	3714      	adds	r7, #20
 80891f4:	46bd      	mov	sp, r7
 80891f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80891fa:	4770      	bx	lr
 80891fc:	e000ed00 	.word	0xe000ed00
 8089200:	05fa0000 	.word	0x05fa0000

08089204 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8089204:	b480      	push	{r7}
 8089206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8089208:	4b04      	ldr	r3, [pc, #16]	; (808921c <NVIC_GetPriorityGrouping+0x18>)
 808920a:	68db      	ldr	r3, [r3, #12]
 808920c:	0a1b      	lsrs	r3, r3, #8
 808920e:	f003 0307 	and.w	r3, r3, #7
}
 8089212:	4618      	mov	r0, r3
 8089214:	46bd      	mov	sp, r7
 8089216:	f85d 7b04 	ldr.w	r7, [sp], #4
 808921a:	4770      	bx	lr
 808921c:	e000ed00 	.word	0xe000ed00

08089220 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8089220:	b480      	push	{r7}
 8089222:	b083      	sub	sp, #12
 8089224:	af00      	add	r7, sp, #0
 8089226:	4603      	mov	r3, r0
 8089228:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 808922a:	79fb      	ldrb	r3, [r7, #7]
 808922c:	f003 021f 	and.w	r2, r3, #31
 8089230:	4907      	ldr	r1, [pc, #28]	; (8089250 <NVIC_EnableIRQ+0x30>)
 8089232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8089236:	095b      	lsrs	r3, r3, #5
 8089238:	2001      	movs	r0, #1
 808923a:	fa00 f202 	lsl.w	r2, r0, r2
 808923e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8089242:	bf00      	nop
 8089244:	370c      	adds	r7, #12
 8089246:	46bd      	mov	sp, r7
 8089248:	f85d 7b04 	ldr.w	r7, [sp], #4
 808924c:	4770      	bx	lr
 808924e:	bf00      	nop
 8089250:	e000e100 	.word	0xe000e100

08089254 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8089254:	b480      	push	{r7}
 8089256:	b083      	sub	sp, #12
 8089258:	af00      	add	r7, sp, #0
 808925a:	4603      	mov	r3, r0
 808925c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 808925e:	79fb      	ldrb	r3, [r7, #7]
 8089260:	f003 021f 	and.w	r2, r3, #31
 8089264:	4907      	ldr	r1, [pc, #28]	; (8089284 <NVIC_DisableIRQ+0x30>)
 8089266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808926a:	095b      	lsrs	r3, r3, #5
 808926c:	2001      	movs	r0, #1
 808926e:	fa00 f202 	lsl.w	r2, r0, r2
 8089272:	3320      	adds	r3, #32
 8089274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8089278:	bf00      	nop
 808927a:	370c      	adds	r7, #12
 808927c:	46bd      	mov	sp, r7
 808927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089282:	4770      	bx	lr
 8089284:	e000e100 	.word	0xe000e100

08089288 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8089288:	b480      	push	{r7}
 808928a:	b083      	sub	sp, #12
 808928c:	af00      	add	r7, sp, #0
 808928e:	4603      	mov	r3, r0
 8089290:	6039      	str	r1, [r7, #0]
 8089292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8089294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8089298:	2b00      	cmp	r3, #0
 808929a:	da0b      	bge.n	80892b4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 808929c:	683b      	ldr	r3, [r7, #0]
 808929e:	b2da      	uxtb	r2, r3
 80892a0:	490c      	ldr	r1, [pc, #48]	; (80892d4 <NVIC_SetPriority+0x4c>)
 80892a2:	79fb      	ldrb	r3, [r7, #7]
 80892a4:	f003 030f 	and.w	r3, r3, #15
 80892a8:	3b04      	subs	r3, #4
 80892aa:	0112      	lsls	r2, r2, #4
 80892ac:	b2d2      	uxtb	r2, r2
 80892ae:	440b      	add	r3, r1
 80892b0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80892b2:	e009      	b.n	80892c8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80892b4:	683b      	ldr	r3, [r7, #0]
 80892b6:	b2da      	uxtb	r2, r3
 80892b8:	4907      	ldr	r1, [pc, #28]	; (80892d8 <NVIC_SetPriority+0x50>)
 80892ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80892be:	0112      	lsls	r2, r2, #4
 80892c0:	b2d2      	uxtb	r2, r2
 80892c2:	440b      	add	r3, r1
 80892c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80892c8:	bf00      	nop
 80892ca:	370c      	adds	r7, #12
 80892cc:	46bd      	mov	sp, r7
 80892ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80892d2:	4770      	bx	lr
 80892d4:	e000ed00 	.word	0xe000ed00
 80892d8:	e000e100 	.word	0xe000e100

080892dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80892dc:	b480      	push	{r7}
 80892de:	b089      	sub	sp, #36	; 0x24
 80892e0:	af00      	add	r7, sp, #0
 80892e2:	60f8      	str	r0, [r7, #12]
 80892e4:	60b9      	str	r1, [r7, #8]
 80892e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80892e8:	68fb      	ldr	r3, [r7, #12]
 80892ea:	f003 0307 	and.w	r3, r3, #7
 80892ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80892f0:	69fb      	ldr	r3, [r7, #28]
 80892f2:	f1c3 0307 	rsb	r3, r3, #7
 80892f6:	2b04      	cmp	r3, #4
 80892f8:	bf28      	it	cs
 80892fa:	2304      	movcs	r3, #4
 80892fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80892fe:	69fb      	ldr	r3, [r7, #28]
 8089300:	3304      	adds	r3, #4
 8089302:	2b06      	cmp	r3, #6
 8089304:	d902      	bls.n	808930c <NVIC_EncodePriority+0x30>
 8089306:	69fb      	ldr	r3, [r7, #28]
 8089308:	3b03      	subs	r3, #3
 808930a:	e000      	b.n	808930e <NVIC_EncodePriority+0x32>
 808930c:	2300      	movs	r3, #0
 808930e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8089310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8089314:	69bb      	ldr	r3, [r7, #24]
 8089316:	fa02 f303 	lsl.w	r3, r2, r3
 808931a:	43da      	mvns	r2, r3
 808931c:	68bb      	ldr	r3, [r7, #8]
 808931e:	401a      	ands	r2, r3
 8089320:	697b      	ldr	r3, [r7, #20]
 8089322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8089324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8089328:	697b      	ldr	r3, [r7, #20]
 808932a:	fa01 f303 	lsl.w	r3, r1, r3
 808932e:	43d9      	mvns	r1, r3
 8089330:	687b      	ldr	r3, [r7, #4]
 8089332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8089334:	4313      	orrs	r3, r2
         );
}
 8089336:	4618      	mov	r0, r3
 8089338:	3724      	adds	r7, #36	; 0x24
 808933a:	46bd      	mov	sp, r7
 808933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089340:	4770      	bx	lr

08089342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8089342:	b580      	push	{r7, lr}
 8089344:	b082      	sub	sp, #8
 8089346:	af00      	add	r7, sp, #0
 8089348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 808934a:	6878      	ldr	r0, [r7, #4]
 808934c:	f7ff ff36 	bl	80891bc <NVIC_SetPriorityGrouping>
}
 8089350:	bf00      	nop
 8089352:	3708      	adds	r7, #8
 8089354:	46bd      	mov	sp, r7
 8089356:	bd80      	pop	{r7, pc}

08089358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8089358:	b580      	push	{r7, lr}
 808935a:	b086      	sub	sp, #24
 808935c:	af00      	add	r7, sp, #0
 808935e:	4603      	mov	r3, r0
 8089360:	60b9      	str	r1, [r7, #8]
 8089362:	607a      	str	r2, [r7, #4]
 8089364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8089366:	2300      	movs	r3, #0
 8089368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 808936a:	f7ff ff4b 	bl	8089204 <NVIC_GetPriorityGrouping>
 808936e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8089370:	687a      	ldr	r2, [r7, #4]
 8089372:	68b9      	ldr	r1, [r7, #8]
 8089374:	6978      	ldr	r0, [r7, #20]
 8089376:	f7ff ffb1 	bl	80892dc <NVIC_EncodePriority>
 808937a:	4602      	mov	r2, r0
 808937c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8089380:	4611      	mov	r1, r2
 8089382:	4618      	mov	r0, r3
 8089384:	f7ff ff80 	bl	8089288 <NVIC_SetPriority>
}
 8089388:	bf00      	nop
 808938a:	3718      	adds	r7, #24
 808938c:	46bd      	mov	sp, r7
 808938e:	bd80      	pop	{r7, pc}

08089390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8089390:	b580      	push	{r7, lr}
 8089392:	b082      	sub	sp, #8
 8089394:	af00      	add	r7, sp, #0
 8089396:	4603      	mov	r3, r0
 8089398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 808939a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808939e:	4618      	mov	r0, r3
 80893a0:	f7ff ff3e 	bl	8089220 <NVIC_EnableIRQ>
}
 80893a4:	bf00      	nop
 80893a6:	3708      	adds	r7, #8
 80893a8:	46bd      	mov	sp, r7
 80893aa:	bd80      	pop	{r7, pc}

080893ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80893ac:	b580      	push	{r7, lr}
 80893ae:	b082      	sub	sp, #8
 80893b0:	af00      	add	r7, sp, #0
 80893b2:	4603      	mov	r3, r0
 80893b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80893b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80893ba:	4618      	mov	r0, r3
 80893bc:	f7ff ff4a 	bl	8089254 <NVIC_DisableIRQ>
}
 80893c0:	bf00      	nop
 80893c2:	3708      	adds	r7, #8
 80893c4:	46bd      	mov	sp, r7
 80893c6:	bd80      	pop	{r7, pc}

080893c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80893c8:	b580      	push	{r7, lr}
 80893ca:	b086      	sub	sp, #24
 80893cc:	af00      	add	r7, sp, #0
 80893ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80893d0:	2300      	movs	r3, #0
 80893d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80893d4:	f7ff fec4 	bl	8089160 <HAL_GetTick>
 80893d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80893da:	687b      	ldr	r3, [r7, #4]
 80893dc:	2b00      	cmp	r3, #0
 80893de:	d101      	bne.n	80893e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80893e0:	2301      	movs	r3, #1
 80893e2:	e099      	b.n	8089518 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80893e4:	687b      	ldr	r3, [r7, #4]
 80893e6:	2200      	movs	r2, #0
 80893e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80893ec:	687b      	ldr	r3, [r7, #4]
 80893ee:	2202      	movs	r2, #2
 80893f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80893f4:	687b      	ldr	r3, [r7, #4]
 80893f6:	681b      	ldr	r3, [r3, #0]
 80893f8:	681a      	ldr	r2, [r3, #0]
 80893fa:	687b      	ldr	r3, [r7, #4]
 80893fc:	681b      	ldr	r3, [r3, #0]
 80893fe:	f022 0201 	bic.w	r2, r2, #1
 8089402:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8089404:	e00f      	b.n	8089426 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8089406:	f7ff feab 	bl	8089160 <HAL_GetTick>
 808940a:	4602      	mov	r2, r0
 808940c:	693b      	ldr	r3, [r7, #16]
 808940e:	1ad3      	subs	r3, r2, r3
 8089410:	2b05      	cmp	r3, #5
 8089412:	d908      	bls.n	8089426 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8089414:	687b      	ldr	r3, [r7, #4]
 8089416:	2220      	movs	r2, #32
 8089418:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 808941a:	687b      	ldr	r3, [r7, #4]
 808941c:	2203      	movs	r2, #3
 808941e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8089422:	2303      	movs	r3, #3
 8089424:	e078      	b.n	8089518 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8089426:	687b      	ldr	r3, [r7, #4]
 8089428:	681b      	ldr	r3, [r3, #0]
 808942a:	681b      	ldr	r3, [r3, #0]
 808942c:	f003 0301 	and.w	r3, r3, #1
 8089430:	2b00      	cmp	r3, #0
 8089432:	d1e8      	bne.n	8089406 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8089434:	687b      	ldr	r3, [r7, #4]
 8089436:	681b      	ldr	r3, [r3, #0]
 8089438:	681b      	ldr	r3, [r3, #0]
 808943a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 808943c:	697a      	ldr	r2, [r7, #20]
 808943e:	4b38      	ldr	r3, [pc, #224]	; (8089520 <HAL_DMA_Init+0x158>)
 8089440:	4013      	ands	r3, r2
 8089442:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8089444:	687b      	ldr	r3, [r7, #4]
 8089446:	685a      	ldr	r2, [r3, #4]
 8089448:	687b      	ldr	r3, [r7, #4]
 808944a:	689b      	ldr	r3, [r3, #8]
 808944c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 808944e:	687b      	ldr	r3, [r7, #4]
 8089450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8089452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8089454:	687b      	ldr	r3, [r7, #4]
 8089456:	691b      	ldr	r3, [r3, #16]
 8089458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 808945a:	687b      	ldr	r3, [r7, #4]
 808945c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 808945e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8089460:	687b      	ldr	r3, [r7, #4]
 8089462:	699b      	ldr	r3, [r3, #24]
 8089464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8089466:	687b      	ldr	r3, [r7, #4]
 8089468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 808946a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 808946c:	687b      	ldr	r3, [r7, #4]
 808946e:	6a1b      	ldr	r3, [r3, #32]
 8089470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8089472:	697a      	ldr	r2, [r7, #20]
 8089474:	4313      	orrs	r3, r2
 8089476:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8089478:	687b      	ldr	r3, [r7, #4]
 808947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808947c:	2b04      	cmp	r3, #4
 808947e:	d107      	bne.n	8089490 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8089480:	687b      	ldr	r3, [r7, #4]
 8089482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8089484:	687b      	ldr	r3, [r7, #4]
 8089486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089488:	4313      	orrs	r3, r2
 808948a:	697a      	ldr	r2, [r7, #20]
 808948c:	4313      	orrs	r3, r2
 808948e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8089490:	687b      	ldr	r3, [r7, #4]
 8089492:	681b      	ldr	r3, [r3, #0]
 8089494:	697a      	ldr	r2, [r7, #20]
 8089496:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8089498:	687b      	ldr	r3, [r7, #4]
 808949a:	681b      	ldr	r3, [r3, #0]
 808949c:	695b      	ldr	r3, [r3, #20]
 808949e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80894a0:	697b      	ldr	r3, [r7, #20]
 80894a2:	f023 0307 	bic.w	r3, r3, #7
 80894a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80894a8:	687b      	ldr	r3, [r7, #4]
 80894aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80894ac:	697a      	ldr	r2, [r7, #20]
 80894ae:	4313      	orrs	r3, r2
 80894b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80894b2:	687b      	ldr	r3, [r7, #4]
 80894b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80894b6:	2b04      	cmp	r3, #4
 80894b8:	d117      	bne.n	80894ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80894ba:	687b      	ldr	r3, [r7, #4]
 80894bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80894be:	697a      	ldr	r2, [r7, #20]
 80894c0:	4313      	orrs	r3, r2
 80894c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80894c4:	687b      	ldr	r3, [r7, #4]
 80894c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80894c8:	2b00      	cmp	r3, #0
 80894ca:	d00e      	beq.n	80894ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80894cc:	6878      	ldr	r0, [r7, #4]
 80894ce:	f000 fb67 	bl	8089ba0 <DMA_CheckFifoParam>
 80894d2:	4603      	mov	r3, r0
 80894d4:	2b00      	cmp	r3, #0
 80894d6:	d008      	beq.n	80894ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80894d8:	687b      	ldr	r3, [r7, #4]
 80894da:	2240      	movs	r2, #64	; 0x40
 80894dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80894de:	687b      	ldr	r3, [r7, #4]
 80894e0:	2201      	movs	r2, #1
 80894e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80894e6:	2301      	movs	r3, #1
 80894e8:	e016      	b.n	8089518 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80894ea:	687b      	ldr	r3, [r7, #4]
 80894ec:	681b      	ldr	r3, [r3, #0]
 80894ee:	697a      	ldr	r2, [r7, #20]
 80894f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80894f2:	6878      	ldr	r0, [r7, #4]
 80894f4:	f000 fb1e 	bl	8089b34 <DMA_CalcBaseAndBitshift>
 80894f8:	4603      	mov	r3, r0
 80894fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80894fc:	687b      	ldr	r3, [r7, #4]
 80894fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089500:	223f      	movs	r2, #63	; 0x3f
 8089502:	409a      	lsls	r2, r3
 8089504:	68fb      	ldr	r3, [r7, #12]
 8089506:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8089508:	687b      	ldr	r3, [r7, #4]
 808950a:	2200      	movs	r2, #0
 808950c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 808950e:	687b      	ldr	r3, [r7, #4]
 8089510:	2201      	movs	r2, #1
 8089512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8089516:	2300      	movs	r3, #0
}
 8089518:	4618      	mov	r0, r3
 808951a:	3718      	adds	r7, #24
 808951c:	46bd      	mov	sp, r7
 808951e:	bd80      	pop	{r7, pc}
 8089520:	f010803f 	.word	0xf010803f

08089524 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8089524:	b580      	push	{r7, lr}
 8089526:	b084      	sub	sp, #16
 8089528:	af00      	add	r7, sp, #0
 808952a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 808952c:	687b      	ldr	r3, [r7, #4]
 808952e:	2b00      	cmp	r3, #0
 8089530:	d101      	bne.n	8089536 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8089532:	2301      	movs	r3, #1
 8089534:	e050      	b.n	80895d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8089536:	687b      	ldr	r3, [r7, #4]
 8089538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 808953c:	b2db      	uxtb	r3, r3
 808953e:	2b02      	cmp	r3, #2
 8089540:	d101      	bne.n	8089546 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8089542:	2302      	movs	r3, #2
 8089544:	e048      	b.n	80895d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8089546:	687b      	ldr	r3, [r7, #4]
 8089548:	681b      	ldr	r3, [r3, #0]
 808954a:	681a      	ldr	r2, [r3, #0]
 808954c:	687b      	ldr	r3, [r7, #4]
 808954e:	681b      	ldr	r3, [r3, #0]
 8089550:	f022 0201 	bic.w	r2, r2, #1
 8089554:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8089556:	687b      	ldr	r3, [r7, #4]
 8089558:	681b      	ldr	r3, [r3, #0]
 808955a:	2200      	movs	r2, #0
 808955c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 808955e:	687b      	ldr	r3, [r7, #4]
 8089560:	681b      	ldr	r3, [r3, #0]
 8089562:	2200      	movs	r2, #0
 8089564:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8089566:	687b      	ldr	r3, [r7, #4]
 8089568:	681b      	ldr	r3, [r3, #0]
 808956a:	2200      	movs	r2, #0
 808956c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 808956e:	687b      	ldr	r3, [r7, #4]
 8089570:	681b      	ldr	r3, [r3, #0]
 8089572:	2200      	movs	r2, #0
 8089574:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8089576:	687b      	ldr	r3, [r7, #4]
 8089578:	681b      	ldr	r3, [r3, #0]
 808957a:	2200      	movs	r2, #0
 808957c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 808957e:	687b      	ldr	r3, [r7, #4]
 8089580:	681b      	ldr	r3, [r3, #0]
 8089582:	2221      	movs	r2, #33	; 0x21
 8089584:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8089586:	6878      	ldr	r0, [r7, #4]
 8089588:	f000 fad4 	bl	8089b34 <DMA_CalcBaseAndBitshift>
 808958c:	4603      	mov	r3, r0
 808958e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8089590:	687b      	ldr	r3, [r7, #4]
 8089592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089594:	223f      	movs	r2, #63	; 0x3f
 8089596:	409a      	lsls	r2, r3
 8089598:	68fb      	ldr	r3, [r7, #12]
 808959a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 808959c:	687b      	ldr	r3, [r7, #4]
 808959e:	2200      	movs	r2, #0
 80895a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80895a2:	687b      	ldr	r3, [r7, #4]
 80895a4:	2200      	movs	r2, #0
 80895a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80895a8:	687b      	ldr	r3, [r7, #4]
 80895aa:	2200      	movs	r2, #0
 80895ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80895ae:	687b      	ldr	r3, [r7, #4]
 80895b0:	2200      	movs	r2, #0
 80895b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80895b4:	687b      	ldr	r3, [r7, #4]
 80895b6:	2200      	movs	r2, #0
 80895b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80895ba:	687b      	ldr	r3, [r7, #4]
 80895bc:	2200      	movs	r2, #0
 80895be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80895c0:	687b      	ldr	r3, [r7, #4]
 80895c2:	2200      	movs	r2, #0
 80895c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80895c6:	687b      	ldr	r3, [r7, #4]
 80895c8:	2200      	movs	r2, #0
 80895ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80895ce:	687b      	ldr	r3, [r7, #4]
 80895d0:	2200      	movs	r2, #0
 80895d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80895d6:	2300      	movs	r3, #0
}
 80895d8:	4618      	mov	r0, r3
 80895da:	3710      	adds	r7, #16
 80895dc:	46bd      	mov	sp, r7
 80895de:	bd80      	pop	{r7, pc}

080895e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80895e0:	b580      	push	{r7, lr}
 80895e2:	b086      	sub	sp, #24
 80895e4:	af00      	add	r7, sp, #0
 80895e6:	60f8      	str	r0, [r7, #12]
 80895e8:	60b9      	str	r1, [r7, #8]
 80895ea:	607a      	str	r2, [r7, #4]
 80895ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80895ee:	2300      	movs	r3, #0
 80895f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80895f2:	68fb      	ldr	r3, [r7, #12]
 80895f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80895f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80895f8:	68fb      	ldr	r3, [r7, #12]
 80895fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80895fe:	2b01      	cmp	r3, #1
 8089600:	d101      	bne.n	8089606 <HAL_DMA_Start_IT+0x26>
 8089602:	2302      	movs	r3, #2
 8089604:	e048      	b.n	8089698 <HAL_DMA_Start_IT+0xb8>
 8089606:	68fb      	ldr	r3, [r7, #12]
 8089608:	2201      	movs	r2, #1
 808960a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 808960e:	68fb      	ldr	r3, [r7, #12]
 8089610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8089614:	b2db      	uxtb	r3, r3
 8089616:	2b01      	cmp	r3, #1
 8089618:	d137      	bne.n	808968a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 808961a:	68fb      	ldr	r3, [r7, #12]
 808961c:	2202      	movs	r2, #2
 808961e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8089622:	68fb      	ldr	r3, [r7, #12]
 8089624:	2200      	movs	r2, #0
 8089626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8089628:	683b      	ldr	r3, [r7, #0]
 808962a:	687a      	ldr	r2, [r7, #4]
 808962c:	68b9      	ldr	r1, [r7, #8]
 808962e:	68f8      	ldr	r0, [r7, #12]
 8089630:	f000 fa52 	bl	8089ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8089634:	68fb      	ldr	r3, [r7, #12]
 8089636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089638:	223f      	movs	r2, #63	; 0x3f
 808963a:	409a      	lsls	r2, r3
 808963c:	693b      	ldr	r3, [r7, #16]
 808963e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8089640:	68fb      	ldr	r3, [r7, #12]
 8089642:	681b      	ldr	r3, [r3, #0]
 8089644:	681a      	ldr	r2, [r3, #0]
 8089646:	68fb      	ldr	r3, [r7, #12]
 8089648:	681b      	ldr	r3, [r3, #0]
 808964a:	f042 0216 	orr.w	r2, r2, #22
 808964e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8089650:	68fb      	ldr	r3, [r7, #12]
 8089652:	681b      	ldr	r3, [r3, #0]
 8089654:	695a      	ldr	r2, [r3, #20]
 8089656:	68fb      	ldr	r3, [r7, #12]
 8089658:	681b      	ldr	r3, [r3, #0]
 808965a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 808965e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8089660:	68fb      	ldr	r3, [r7, #12]
 8089662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8089664:	2b00      	cmp	r3, #0
 8089666:	d007      	beq.n	8089678 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8089668:	68fb      	ldr	r3, [r7, #12]
 808966a:	681b      	ldr	r3, [r3, #0]
 808966c:	681a      	ldr	r2, [r3, #0]
 808966e:	68fb      	ldr	r3, [r7, #12]
 8089670:	681b      	ldr	r3, [r3, #0]
 8089672:	f042 0208 	orr.w	r2, r2, #8
 8089676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8089678:	68fb      	ldr	r3, [r7, #12]
 808967a:	681b      	ldr	r3, [r3, #0]
 808967c:	681a      	ldr	r2, [r3, #0]
 808967e:	68fb      	ldr	r3, [r7, #12]
 8089680:	681b      	ldr	r3, [r3, #0]
 8089682:	f042 0201 	orr.w	r2, r2, #1
 8089686:	601a      	str	r2, [r3, #0]
 8089688:	e005      	b.n	8089696 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 808968a:	68fb      	ldr	r3, [r7, #12]
 808968c:	2200      	movs	r2, #0
 808968e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8089692:	2302      	movs	r3, #2
 8089694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8089696:	7dfb      	ldrb	r3, [r7, #23]
}
 8089698:	4618      	mov	r0, r3
 808969a:	3718      	adds	r7, #24
 808969c:	46bd      	mov	sp, r7
 808969e:	bd80      	pop	{r7, pc}

080896a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80896a0:	b580      	push	{r7, lr}
 80896a2:	b084      	sub	sp, #16
 80896a4:	af00      	add	r7, sp, #0
 80896a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80896a8:	687b      	ldr	r3, [r7, #4]
 80896aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80896ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80896ae:	f7ff fd57 	bl	8089160 <HAL_GetTick>
 80896b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80896b4:	687b      	ldr	r3, [r7, #4]
 80896b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80896ba:	b2db      	uxtb	r3, r3
 80896bc:	2b02      	cmp	r3, #2
 80896be:	d008      	beq.n	80896d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80896c0:	687b      	ldr	r3, [r7, #4]
 80896c2:	2280      	movs	r2, #128	; 0x80
 80896c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80896c6:	687b      	ldr	r3, [r7, #4]
 80896c8:	2200      	movs	r2, #0
 80896ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80896ce:	2301      	movs	r3, #1
 80896d0:	e052      	b.n	8089778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80896d2:	687b      	ldr	r3, [r7, #4]
 80896d4:	681b      	ldr	r3, [r3, #0]
 80896d6:	681a      	ldr	r2, [r3, #0]
 80896d8:	687b      	ldr	r3, [r7, #4]
 80896da:	681b      	ldr	r3, [r3, #0]
 80896dc:	f022 0216 	bic.w	r2, r2, #22
 80896e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80896e2:	687b      	ldr	r3, [r7, #4]
 80896e4:	681b      	ldr	r3, [r3, #0]
 80896e6:	695a      	ldr	r2, [r3, #20]
 80896e8:	687b      	ldr	r3, [r7, #4]
 80896ea:	681b      	ldr	r3, [r3, #0]
 80896ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80896f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80896f2:	687b      	ldr	r3, [r7, #4]
 80896f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80896f6:	2b00      	cmp	r3, #0
 80896f8:	d103      	bne.n	8089702 <HAL_DMA_Abort+0x62>
 80896fa:	687b      	ldr	r3, [r7, #4]
 80896fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80896fe:	2b00      	cmp	r3, #0
 8089700:	d007      	beq.n	8089712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8089702:	687b      	ldr	r3, [r7, #4]
 8089704:	681b      	ldr	r3, [r3, #0]
 8089706:	681a      	ldr	r2, [r3, #0]
 8089708:	687b      	ldr	r3, [r7, #4]
 808970a:	681b      	ldr	r3, [r3, #0]
 808970c:	f022 0208 	bic.w	r2, r2, #8
 8089710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8089712:	687b      	ldr	r3, [r7, #4]
 8089714:	681b      	ldr	r3, [r3, #0]
 8089716:	681a      	ldr	r2, [r3, #0]
 8089718:	687b      	ldr	r3, [r7, #4]
 808971a:	681b      	ldr	r3, [r3, #0]
 808971c:	f022 0201 	bic.w	r2, r2, #1
 8089720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8089722:	e013      	b.n	808974c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8089724:	f7ff fd1c 	bl	8089160 <HAL_GetTick>
 8089728:	4602      	mov	r2, r0
 808972a:	68bb      	ldr	r3, [r7, #8]
 808972c:	1ad3      	subs	r3, r2, r3
 808972e:	2b05      	cmp	r3, #5
 8089730:	d90c      	bls.n	808974c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8089732:	687b      	ldr	r3, [r7, #4]
 8089734:	2220      	movs	r2, #32
 8089736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8089738:	687b      	ldr	r3, [r7, #4]
 808973a:	2200      	movs	r2, #0
 808973c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8089740:	687b      	ldr	r3, [r7, #4]
 8089742:	2203      	movs	r2, #3
 8089744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8089748:	2303      	movs	r3, #3
 808974a:	e015      	b.n	8089778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 808974c:	687b      	ldr	r3, [r7, #4]
 808974e:	681b      	ldr	r3, [r3, #0]
 8089750:	681b      	ldr	r3, [r3, #0]
 8089752:	f003 0301 	and.w	r3, r3, #1
 8089756:	2b00      	cmp	r3, #0
 8089758:	d1e4      	bne.n	8089724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 808975a:	687b      	ldr	r3, [r7, #4]
 808975c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808975e:	223f      	movs	r2, #63	; 0x3f
 8089760:	409a      	lsls	r2, r3
 8089762:	68fb      	ldr	r3, [r7, #12]
 8089764:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8089766:	687b      	ldr	r3, [r7, #4]
 8089768:	2200      	movs	r2, #0
 808976a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 808976e:	687b      	ldr	r3, [r7, #4]
 8089770:	2201      	movs	r2, #1
 8089772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8089776:	2300      	movs	r3, #0
}
 8089778:	4618      	mov	r0, r3
 808977a:	3710      	adds	r7, #16
 808977c:	46bd      	mov	sp, r7
 808977e:	bd80      	pop	{r7, pc}

08089780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8089780:	b480      	push	{r7}
 8089782:	b083      	sub	sp, #12
 8089784:	af00      	add	r7, sp, #0
 8089786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8089788:	687b      	ldr	r3, [r7, #4]
 808978a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 808978e:	b2db      	uxtb	r3, r3
 8089790:	2b02      	cmp	r3, #2
 8089792:	d004      	beq.n	808979e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8089794:	687b      	ldr	r3, [r7, #4]
 8089796:	2280      	movs	r2, #128	; 0x80
 8089798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 808979a:	2301      	movs	r3, #1
 808979c:	e00c      	b.n	80897b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 808979e:	687b      	ldr	r3, [r7, #4]
 80897a0:	2205      	movs	r2, #5
 80897a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80897a6:	687b      	ldr	r3, [r7, #4]
 80897a8:	681b      	ldr	r3, [r3, #0]
 80897aa:	681a      	ldr	r2, [r3, #0]
 80897ac:	687b      	ldr	r3, [r7, #4]
 80897ae:	681b      	ldr	r3, [r3, #0]
 80897b0:	f022 0201 	bic.w	r2, r2, #1
 80897b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80897b6:	2300      	movs	r3, #0
}
 80897b8:	4618      	mov	r0, r3
 80897ba:	370c      	adds	r7, #12
 80897bc:	46bd      	mov	sp, r7
 80897be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80897c2:	4770      	bx	lr

080897c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80897c4:	b580      	push	{r7, lr}
 80897c6:	b086      	sub	sp, #24
 80897c8:	af00      	add	r7, sp, #0
 80897ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80897cc:	2300      	movs	r3, #0
 80897ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80897d0:	4b92      	ldr	r3, [pc, #584]	; (8089a1c <HAL_DMA_IRQHandler+0x258>)
 80897d2:	681b      	ldr	r3, [r3, #0]
 80897d4:	4a92      	ldr	r2, [pc, #584]	; (8089a20 <HAL_DMA_IRQHandler+0x25c>)
 80897d6:	fba2 2303 	umull	r2, r3, r2, r3
 80897da:	0a9b      	lsrs	r3, r3, #10
 80897dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80897de:	687b      	ldr	r3, [r7, #4]
 80897e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80897e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80897e4:	693b      	ldr	r3, [r7, #16]
 80897e6:	681b      	ldr	r3, [r3, #0]
 80897e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80897ea:	687b      	ldr	r3, [r7, #4]
 80897ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80897ee:	2208      	movs	r2, #8
 80897f0:	409a      	lsls	r2, r3
 80897f2:	68fb      	ldr	r3, [r7, #12]
 80897f4:	4013      	ands	r3, r2
 80897f6:	2b00      	cmp	r3, #0
 80897f8:	d01a      	beq.n	8089830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80897fa:	687b      	ldr	r3, [r7, #4]
 80897fc:	681b      	ldr	r3, [r3, #0]
 80897fe:	681b      	ldr	r3, [r3, #0]
 8089800:	f003 0304 	and.w	r3, r3, #4
 8089804:	2b00      	cmp	r3, #0
 8089806:	d013      	beq.n	8089830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8089808:	687b      	ldr	r3, [r7, #4]
 808980a:	681b      	ldr	r3, [r3, #0]
 808980c:	681a      	ldr	r2, [r3, #0]
 808980e:	687b      	ldr	r3, [r7, #4]
 8089810:	681b      	ldr	r3, [r3, #0]
 8089812:	f022 0204 	bic.w	r2, r2, #4
 8089816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8089818:	687b      	ldr	r3, [r7, #4]
 808981a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808981c:	2208      	movs	r2, #8
 808981e:	409a      	lsls	r2, r3
 8089820:	693b      	ldr	r3, [r7, #16]
 8089822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8089824:	687b      	ldr	r3, [r7, #4]
 8089826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8089828:	f043 0201 	orr.w	r2, r3, #1
 808982c:	687b      	ldr	r3, [r7, #4]
 808982e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8089830:	687b      	ldr	r3, [r7, #4]
 8089832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089834:	2201      	movs	r2, #1
 8089836:	409a      	lsls	r2, r3
 8089838:	68fb      	ldr	r3, [r7, #12]
 808983a:	4013      	ands	r3, r2
 808983c:	2b00      	cmp	r3, #0
 808983e:	d012      	beq.n	8089866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8089840:	687b      	ldr	r3, [r7, #4]
 8089842:	681b      	ldr	r3, [r3, #0]
 8089844:	695b      	ldr	r3, [r3, #20]
 8089846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808984a:	2b00      	cmp	r3, #0
 808984c:	d00b      	beq.n	8089866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 808984e:	687b      	ldr	r3, [r7, #4]
 8089850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089852:	2201      	movs	r2, #1
 8089854:	409a      	lsls	r2, r3
 8089856:	693b      	ldr	r3, [r7, #16]
 8089858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 808985a:	687b      	ldr	r3, [r7, #4]
 808985c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808985e:	f043 0202 	orr.w	r2, r3, #2
 8089862:	687b      	ldr	r3, [r7, #4]
 8089864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8089866:	687b      	ldr	r3, [r7, #4]
 8089868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808986a:	2204      	movs	r2, #4
 808986c:	409a      	lsls	r2, r3
 808986e:	68fb      	ldr	r3, [r7, #12]
 8089870:	4013      	ands	r3, r2
 8089872:	2b00      	cmp	r3, #0
 8089874:	d012      	beq.n	808989c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8089876:	687b      	ldr	r3, [r7, #4]
 8089878:	681b      	ldr	r3, [r3, #0]
 808987a:	681b      	ldr	r3, [r3, #0]
 808987c:	f003 0302 	and.w	r3, r3, #2
 8089880:	2b00      	cmp	r3, #0
 8089882:	d00b      	beq.n	808989c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8089884:	687b      	ldr	r3, [r7, #4]
 8089886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089888:	2204      	movs	r2, #4
 808988a:	409a      	lsls	r2, r3
 808988c:	693b      	ldr	r3, [r7, #16]
 808988e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8089890:	687b      	ldr	r3, [r7, #4]
 8089892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8089894:	f043 0204 	orr.w	r2, r3, #4
 8089898:	687b      	ldr	r3, [r7, #4]
 808989a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 808989c:	687b      	ldr	r3, [r7, #4]
 808989e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80898a0:	2210      	movs	r2, #16
 80898a2:	409a      	lsls	r2, r3
 80898a4:	68fb      	ldr	r3, [r7, #12]
 80898a6:	4013      	ands	r3, r2
 80898a8:	2b00      	cmp	r3, #0
 80898aa:	d043      	beq.n	8089934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80898ac:	687b      	ldr	r3, [r7, #4]
 80898ae:	681b      	ldr	r3, [r3, #0]
 80898b0:	681b      	ldr	r3, [r3, #0]
 80898b2:	f003 0308 	and.w	r3, r3, #8
 80898b6:	2b00      	cmp	r3, #0
 80898b8:	d03c      	beq.n	8089934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80898ba:	687b      	ldr	r3, [r7, #4]
 80898bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80898be:	2210      	movs	r2, #16
 80898c0:	409a      	lsls	r2, r3
 80898c2:	693b      	ldr	r3, [r7, #16]
 80898c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80898c6:	687b      	ldr	r3, [r7, #4]
 80898c8:	681b      	ldr	r3, [r3, #0]
 80898ca:	681b      	ldr	r3, [r3, #0]
 80898cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80898d0:	2b00      	cmp	r3, #0
 80898d2:	d018      	beq.n	8089906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80898d4:	687b      	ldr	r3, [r7, #4]
 80898d6:	681b      	ldr	r3, [r3, #0]
 80898d8:	681b      	ldr	r3, [r3, #0]
 80898da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80898de:	2b00      	cmp	r3, #0
 80898e0:	d108      	bne.n	80898f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80898e2:	687b      	ldr	r3, [r7, #4]
 80898e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80898e6:	2b00      	cmp	r3, #0
 80898e8:	d024      	beq.n	8089934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80898ea:	687b      	ldr	r3, [r7, #4]
 80898ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80898ee:	6878      	ldr	r0, [r7, #4]
 80898f0:	4798      	blx	r3
 80898f2:	e01f      	b.n	8089934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80898f4:	687b      	ldr	r3, [r7, #4]
 80898f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80898f8:	2b00      	cmp	r3, #0
 80898fa:	d01b      	beq.n	8089934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80898fc:	687b      	ldr	r3, [r7, #4]
 80898fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8089900:	6878      	ldr	r0, [r7, #4]
 8089902:	4798      	blx	r3
 8089904:	e016      	b.n	8089934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8089906:	687b      	ldr	r3, [r7, #4]
 8089908:	681b      	ldr	r3, [r3, #0]
 808990a:	681b      	ldr	r3, [r3, #0]
 808990c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8089910:	2b00      	cmp	r3, #0
 8089912:	d107      	bne.n	8089924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8089914:	687b      	ldr	r3, [r7, #4]
 8089916:	681b      	ldr	r3, [r3, #0]
 8089918:	681a      	ldr	r2, [r3, #0]
 808991a:	687b      	ldr	r3, [r7, #4]
 808991c:	681b      	ldr	r3, [r3, #0]
 808991e:	f022 0208 	bic.w	r2, r2, #8
 8089922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8089924:	687b      	ldr	r3, [r7, #4]
 8089926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8089928:	2b00      	cmp	r3, #0
 808992a:	d003      	beq.n	8089934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 808992c:	687b      	ldr	r3, [r7, #4]
 808992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8089930:	6878      	ldr	r0, [r7, #4]
 8089932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8089934:	687b      	ldr	r3, [r7, #4]
 8089936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8089938:	2220      	movs	r2, #32
 808993a:	409a      	lsls	r2, r3
 808993c:	68fb      	ldr	r3, [r7, #12]
 808993e:	4013      	ands	r3, r2
 8089940:	2b00      	cmp	r3, #0
 8089942:	f000 808e 	beq.w	8089a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8089946:	687b      	ldr	r3, [r7, #4]
 8089948:	681b      	ldr	r3, [r3, #0]
 808994a:	681b      	ldr	r3, [r3, #0]
 808994c:	f003 0310 	and.w	r3, r3, #16
 8089950:	2b00      	cmp	r3, #0
 8089952:	f000 8086 	beq.w	8089a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8089956:	687b      	ldr	r3, [r7, #4]
 8089958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808995a:	2220      	movs	r2, #32
 808995c:	409a      	lsls	r2, r3
 808995e:	693b      	ldr	r3, [r7, #16]
 8089960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8089962:	687b      	ldr	r3, [r7, #4]
 8089964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8089968:	b2db      	uxtb	r3, r3
 808996a:	2b05      	cmp	r3, #5
 808996c:	d136      	bne.n	80899dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 808996e:	687b      	ldr	r3, [r7, #4]
 8089970:	681b      	ldr	r3, [r3, #0]
 8089972:	681a      	ldr	r2, [r3, #0]
 8089974:	687b      	ldr	r3, [r7, #4]
 8089976:	681b      	ldr	r3, [r3, #0]
 8089978:	f022 0216 	bic.w	r2, r2, #22
 808997c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 808997e:	687b      	ldr	r3, [r7, #4]
 8089980:	681b      	ldr	r3, [r3, #0]
 8089982:	695a      	ldr	r2, [r3, #20]
 8089984:	687b      	ldr	r3, [r7, #4]
 8089986:	681b      	ldr	r3, [r3, #0]
 8089988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 808998c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 808998e:	687b      	ldr	r3, [r7, #4]
 8089990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8089992:	2b00      	cmp	r3, #0
 8089994:	d103      	bne.n	808999e <HAL_DMA_IRQHandler+0x1da>
 8089996:	687b      	ldr	r3, [r7, #4]
 8089998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808999a:	2b00      	cmp	r3, #0
 808999c:	d007      	beq.n	80899ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 808999e:	687b      	ldr	r3, [r7, #4]
 80899a0:	681b      	ldr	r3, [r3, #0]
 80899a2:	681a      	ldr	r2, [r3, #0]
 80899a4:	687b      	ldr	r3, [r7, #4]
 80899a6:	681b      	ldr	r3, [r3, #0]
 80899a8:	f022 0208 	bic.w	r2, r2, #8
 80899ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80899ae:	687b      	ldr	r3, [r7, #4]
 80899b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80899b2:	223f      	movs	r2, #63	; 0x3f
 80899b4:	409a      	lsls	r2, r3
 80899b6:	693b      	ldr	r3, [r7, #16]
 80899b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80899ba:	687b      	ldr	r3, [r7, #4]
 80899bc:	2200      	movs	r2, #0
 80899be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80899c2:	687b      	ldr	r3, [r7, #4]
 80899c4:	2201      	movs	r2, #1
 80899c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80899ca:	687b      	ldr	r3, [r7, #4]
 80899cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80899ce:	2b00      	cmp	r3, #0
 80899d0:	d07d      	beq.n	8089ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80899d2:	687b      	ldr	r3, [r7, #4]
 80899d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80899d6:	6878      	ldr	r0, [r7, #4]
 80899d8:	4798      	blx	r3
        }
        return;
 80899da:	e078      	b.n	8089ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80899dc:	687b      	ldr	r3, [r7, #4]
 80899de:	681b      	ldr	r3, [r3, #0]
 80899e0:	681b      	ldr	r3, [r3, #0]
 80899e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80899e6:	2b00      	cmp	r3, #0
 80899e8:	d01c      	beq.n	8089a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80899ea:	687b      	ldr	r3, [r7, #4]
 80899ec:	681b      	ldr	r3, [r3, #0]
 80899ee:	681b      	ldr	r3, [r3, #0]
 80899f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80899f4:	2b00      	cmp	r3, #0
 80899f6:	d108      	bne.n	8089a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80899f8:	687b      	ldr	r3, [r7, #4]
 80899fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80899fc:	2b00      	cmp	r3, #0
 80899fe:	d030      	beq.n	8089a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8089a00:	687b      	ldr	r3, [r7, #4]
 8089a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8089a04:	6878      	ldr	r0, [r7, #4]
 8089a06:	4798      	blx	r3
 8089a08:	e02b      	b.n	8089a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8089a0a:	687b      	ldr	r3, [r7, #4]
 8089a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089a0e:	2b00      	cmp	r3, #0
 8089a10:	d027      	beq.n	8089a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8089a12:	687b      	ldr	r3, [r7, #4]
 8089a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089a16:	6878      	ldr	r0, [r7, #4]
 8089a18:	4798      	blx	r3
 8089a1a:	e022      	b.n	8089a62 <HAL_DMA_IRQHandler+0x29e>
 8089a1c:	2000b374 	.word	0x2000b374
 8089a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8089a24:	687b      	ldr	r3, [r7, #4]
 8089a26:	681b      	ldr	r3, [r3, #0]
 8089a28:	681b      	ldr	r3, [r3, #0]
 8089a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8089a2e:	2b00      	cmp	r3, #0
 8089a30:	d10f      	bne.n	8089a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8089a32:	687b      	ldr	r3, [r7, #4]
 8089a34:	681b      	ldr	r3, [r3, #0]
 8089a36:	681a      	ldr	r2, [r3, #0]
 8089a38:	687b      	ldr	r3, [r7, #4]
 8089a3a:	681b      	ldr	r3, [r3, #0]
 8089a3c:	f022 0210 	bic.w	r2, r2, #16
 8089a40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8089a42:	687b      	ldr	r3, [r7, #4]
 8089a44:	2200      	movs	r2, #0
 8089a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8089a4a:	687b      	ldr	r3, [r7, #4]
 8089a4c:	2201      	movs	r2, #1
 8089a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8089a52:	687b      	ldr	r3, [r7, #4]
 8089a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089a56:	2b00      	cmp	r3, #0
 8089a58:	d003      	beq.n	8089a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8089a5a:	687b      	ldr	r3, [r7, #4]
 8089a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089a5e:	6878      	ldr	r0, [r7, #4]
 8089a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8089a62:	687b      	ldr	r3, [r7, #4]
 8089a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8089a66:	2b00      	cmp	r3, #0
 8089a68:	d032      	beq.n	8089ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8089a6a:	687b      	ldr	r3, [r7, #4]
 8089a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8089a6e:	f003 0301 	and.w	r3, r3, #1
 8089a72:	2b00      	cmp	r3, #0
 8089a74:	d022      	beq.n	8089abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8089a76:	687b      	ldr	r3, [r7, #4]
 8089a78:	2205      	movs	r2, #5
 8089a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8089a7e:	687b      	ldr	r3, [r7, #4]
 8089a80:	681b      	ldr	r3, [r3, #0]
 8089a82:	681a      	ldr	r2, [r3, #0]
 8089a84:	687b      	ldr	r3, [r7, #4]
 8089a86:	681b      	ldr	r3, [r3, #0]
 8089a88:	f022 0201 	bic.w	r2, r2, #1
 8089a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8089a8e:	68bb      	ldr	r3, [r7, #8]
 8089a90:	3301      	adds	r3, #1
 8089a92:	60bb      	str	r3, [r7, #8]
 8089a94:	697a      	ldr	r2, [r7, #20]
 8089a96:	429a      	cmp	r2, r3
 8089a98:	d307      	bcc.n	8089aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8089a9a:	687b      	ldr	r3, [r7, #4]
 8089a9c:	681b      	ldr	r3, [r3, #0]
 8089a9e:	681b      	ldr	r3, [r3, #0]
 8089aa0:	f003 0301 	and.w	r3, r3, #1
 8089aa4:	2b00      	cmp	r3, #0
 8089aa6:	d1f2      	bne.n	8089a8e <HAL_DMA_IRQHandler+0x2ca>
 8089aa8:	e000      	b.n	8089aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8089aaa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8089aac:	687b      	ldr	r3, [r7, #4]
 8089aae:	2200      	movs	r2, #0
 8089ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8089ab4:	687b      	ldr	r3, [r7, #4]
 8089ab6:	2201      	movs	r2, #1
 8089ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8089abc:	687b      	ldr	r3, [r7, #4]
 8089abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8089ac0:	2b00      	cmp	r3, #0
 8089ac2:	d005      	beq.n	8089ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8089ac4:	687b      	ldr	r3, [r7, #4]
 8089ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8089ac8:	6878      	ldr	r0, [r7, #4]
 8089aca:	4798      	blx	r3
 8089acc:	e000      	b.n	8089ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8089ace:	bf00      	nop
    }
  }
}
 8089ad0:	3718      	adds	r7, #24
 8089ad2:	46bd      	mov	sp, r7
 8089ad4:	bd80      	pop	{r7, pc}
 8089ad6:	bf00      	nop

08089ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8089ad8:	b480      	push	{r7}
 8089ada:	b085      	sub	sp, #20
 8089adc:	af00      	add	r7, sp, #0
 8089ade:	60f8      	str	r0, [r7, #12]
 8089ae0:	60b9      	str	r1, [r7, #8]
 8089ae2:	607a      	str	r2, [r7, #4]
 8089ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8089ae6:	68fb      	ldr	r3, [r7, #12]
 8089ae8:	681b      	ldr	r3, [r3, #0]
 8089aea:	681a      	ldr	r2, [r3, #0]
 8089aec:	68fb      	ldr	r3, [r7, #12]
 8089aee:	681b      	ldr	r3, [r3, #0]
 8089af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8089af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8089af6:	68fb      	ldr	r3, [r7, #12]
 8089af8:	681b      	ldr	r3, [r3, #0]
 8089afa:	683a      	ldr	r2, [r7, #0]
 8089afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8089afe:	68fb      	ldr	r3, [r7, #12]
 8089b00:	689b      	ldr	r3, [r3, #8]
 8089b02:	2b40      	cmp	r3, #64	; 0x40
 8089b04:	d108      	bne.n	8089b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8089b06:	68fb      	ldr	r3, [r7, #12]
 8089b08:	681b      	ldr	r3, [r3, #0]
 8089b0a:	687a      	ldr	r2, [r7, #4]
 8089b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8089b0e:	68fb      	ldr	r3, [r7, #12]
 8089b10:	681b      	ldr	r3, [r3, #0]
 8089b12:	68ba      	ldr	r2, [r7, #8]
 8089b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8089b16:	e007      	b.n	8089b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8089b18:	68fb      	ldr	r3, [r7, #12]
 8089b1a:	681b      	ldr	r3, [r3, #0]
 8089b1c:	68ba      	ldr	r2, [r7, #8]
 8089b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8089b20:	68fb      	ldr	r3, [r7, #12]
 8089b22:	681b      	ldr	r3, [r3, #0]
 8089b24:	687a      	ldr	r2, [r7, #4]
 8089b26:	60da      	str	r2, [r3, #12]
}
 8089b28:	bf00      	nop
 8089b2a:	3714      	adds	r7, #20
 8089b2c:	46bd      	mov	sp, r7
 8089b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089b32:	4770      	bx	lr

08089b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8089b34:	b480      	push	{r7}
 8089b36:	b085      	sub	sp, #20
 8089b38:	af00      	add	r7, sp, #0
 8089b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8089b3c:	687b      	ldr	r3, [r7, #4]
 8089b3e:	681b      	ldr	r3, [r3, #0]
 8089b40:	b2db      	uxtb	r3, r3
 8089b42:	3b10      	subs	r3, #16
 8089b44:	4a13      	ldr	r2, [pc, #76]	; (8089b94 <DMA_CalcBaseAndBitshift+0x60>)
 8089b46:	fba2 2303 	umull	r2, r3, r2, r3
 8089b4a:	091b      	lsrs	r3, r3, #4
 8089b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8089b4e:	4a12      	ldr	r2, [pc, #72]	; (8089b98 <DMA_CalcBaseAndBitshift+0x64>)
 8089b50:	68fb      	ldr	r3, [r7, #12]
 8089b52:	4413      	add	r3, r2
 8089b54:	781b      	ldrb	r3, [r3, #0]
 8089b56:	461a      	mov	r2, r3
 8089b58:	687b      	ldr	r3, [r7, #4]
 8089b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8089b5c:	68fb      	ldr	r3, [r7, #12]
 8089b5e:	2b03      	cmp	r3, #3
 8089b60:	d908      	bls.n	8089b74 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8089b62:	687b      	ldr	r3, [r7, #4]
 8089b64:	681b      	ldr	r3, [r3, #0]
 8089b66:	461a      	mov	r2, r3
 8089b68:	4b0c      	ldr	r3, [pc, #48]	; (8089b9c <DMA_CalcBaseAndBitshift+0x68>)
 8089b6a:	4013      	ands	r3, r2
 8089b6c:	1d1a      	adds	r2, r3, #4
 8089b6e:	687b      	ldr	r3, [r7, #4]
 8089b70:	659a      	str	r2, [r3, #88]	; 0x58
 8089b72:	e006      	b.n	8089b82 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8089b74:	687b      	ldr	r3, [r7, #4]
 8089b76:	681b      	ldr	r3, [r3, #0]
 8089b78:	461a      	mov	r2, r3
 8089b7a:	4b08      	ldr	r3, [pc, #32]	; (8089b9c <DMA_CalcBaseAndBitshift+0x68>)
 8089b7c:	4013      	ands	r3, r2
 8089b7e:	687a      	ldr	r2, [r7, #4]
 8089b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8089b82:	687b      	ldr	r3, [r7, #4]
 8089b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8089b86:	4618      	mov	r0, r3
 8089b88:	3714      	adds	r7, #20
 8089b8a:	46bd      	mov	sp, r7
 8089b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089b90:	4770      	bx	lr
 8089b92:	bf00      	nop
 8089b94:	aaaaaaab 	.word	0xaaaaaaab
 8089b98:	0809f078 	.word	0x0809f078
 8089b9c:	fffffc00 	.word	0xfffffc00

08089ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8089ba0:	b480      	push	{r7}
 8089ba2:	b085      	sub	sp, #20
 8089ba4:	af00      	add	r7, sp, #0
 8089ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8089ba8:	2300      	movs	r3, #0
 8089baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8089bac:	687b      	ldr	r3, [r7, #4]
 8089bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8089bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8089bb2:	687b      	ldr	r3, [r7, #4]
 8089bb4:	699b      	ldr	r3, [r3, #24]
 8089bb6:	2b00      	cmp	r3, #0
 8089bb8:	d11f      	bne.n	8089bfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8089bba:	68bb      	ldr	r3, [r7, #8]
 8089bbc:	2b03      	cmp	r3, #3
 8089bbe:	d855      	bhi.n	8089c6c <DMA_CheckFifoParam+0xcc>
 8089bc0:	a201      	add	r2, pc, #4	; (adr r2, 8089bc8 <DMA_CheckFifoParam+0x28>)
 8089bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8089bc6:	bf00      	nop
 8089bc8:	08089bd9 	.word	0x08089bd9
 8089bcc:	08089beb 	.word	0x08089beb
 8089bd0:	08089bd9 	.word	0x08089bd9
 8089bd4:	08089c6d 	.word	0x08089c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8089bd8:	687b      	ldr	r3, [r7, #4]
 8089bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8089be0:	2b00      	cmp	r3, #0
 8089be2:	d045      	beq.n	8089c70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8089be4:	2301      	movs	r3, #1
 8089be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8089be8:	e042      	b.n	8089c70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8089bea:	687b      	ldr	r3, [r7, #4]
 8089bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8089bf2:	d13f      	bne.n	8089c74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8089bf4:	2301      	movs	r3, #1
 8089bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8089bf8:	e03c      	b.n	8089c74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8089bfa:	687b      	ldr	r3, [r7, #4]
 8089bfc:	699b      	ldr	r3, [r3, #24]
 8089bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089c02:	d121      	bne.n	8089c48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8089c04:	68bb      	ldr	r3, [r7, #8]
 8089c06:	2b03      	cmp	r3, #3
 8089c08:	d836      	bhi.n	8089c78 <DMA_CheckFifoParam+0xd8>
 8089c0a:	a201      	add	r2, pc, #4	; (adr r2, 8089c10 <DMA_CheckFifoParam+0x70>)
 8089c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8089c10:	08089c21 	.word	0x08089c21
 8089c14:	08089c27 	.word	0x08089c27
 8089c18:	08089c21 	.word	0x08089c21
 8089c1c:	08089c39 	.word	0x08089c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8089c20:	2301      	movs	r3, #1
 8089c22:	73fb      	strb	r3, [r7, #15]
      break;
 8089c24:	e02f      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8089c26:	687b      	ldr	r3, [r7, #4]
 8089c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8089c2e:	2b00      	cmp	r3, #0
 8089c30:	d024      	beq.n	8089c7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8089c32:	2301      	movs	r3, #1
 8089c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8089c36:	e021      	b.n	8089c7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8089c38:	687b      	ldr	r3, [r7, #4]
 8089c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8089c40:	d11e      	bne.n	8089c80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8089c42:	2301      	movs	r3, #1
 8089c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8089c46:	e01b      	b.n	8089c80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8089c48:	68bb      	ldr	r3, [r7, #8]
 8089c4a:	2b02      	cmp	r3, #2
 8089c4c:	d902      	bls.n	8089c54 <DMA_CheckFifoParam+0xb4>
 8089c4e:	2b03      	cmp	r3, #3
 8089c50:	d003      	beq.n	8089c5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8089c52:	e018      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8089c54:	2301      	movs	r3, #1
 8089c56:	73fb      	strb	r3, [r7, #15]
      break;
 8089c58:	e015      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8089c5a:	687b      	ldr	r3, [r7, #4]
 8089c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8089c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8089c62:	2b00      	cmp	r3, #0
 8089c64:	d00e      	beq.n	8089c84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8089c66:	2301      	movs	r3, #1
 8089c68:	73fb      	strb	r3, [r7, #15]
      break;
 8089c6a:	e00b      	b.n	8089c84 <DMA_CheckFifoParam+0xe4>
      break;
 8089c6c:	bf00      	nop
 8089c6e:	e00a      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;
 8089c70:	bf00      	nop
 8089c72:	e008      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;
 8089c74:	bf00      	nop
 8089c76:	e006      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;
 8089c78:	bf00      	nop
 8089c7a:	e004      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;
 8089c7c:	bf00      	nop
 8089c7e:	e002      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;   
 8089c80:	bf00      	nop
 8089c82:	e000      	b.n	8089c86 <DMA_CheckFifoParam+0xe6>
      break;
 8089c84:	bf00      	nop
    }
  } 
  
  return status; 
 8089c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8089c88:	4618      	mov	r0, r3
 8089c8a:	3714      	adds	r7, #20
 8089c8c:	46bd      	mov	sp, r7
 8089c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089c92:	4770      	bx	lr

08089c94 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8089c94:	b580      	push	{r7, lr}
 8089c96:	b082      	sub	sp, #8
 8089c98:	af00      	add	r7, sp, #0
 8089c9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8089c9c:	687b      	ldr	r3, [r7, #4]
 8089c9e:	2b00      	cmp	r3, #0
 8089ca0:	d101      	bne.n	8089ca6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8089ca2:	2301      	movs	r3, #1
 8089ca4:	e039      	b.n	8089d1a <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8089ca6:	687b      	ldr	r3, [r7, #4]
 8089ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8089cac:	b2db      	uxtb	r3, r3
 8089cae:	2b00      	cmp	r3, #0
 8089cb0:	d106      	bne.n	8089cc0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8089cb2:	687b      	ldr	r3, [r7, #4]
 8089cb4:	2200      	movs	r2, #0
 8089cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8089cba:	6878      	ldr	r0, [r7, #4]
 8089cbc:	f7fd fb9e 	bl	80873fc <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8089cc0:	687b      	ldr	r3, [r7, #4]
 8089cc2:	2202      	movs	r2, #2
 8089cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8089cc8:	687b      	ldr	r3, [r7, #4]
 8089cca:	681b      	ldr	r3, [r3, #0]
 8089ccc:	681b      	ldr	r3, [r3, #0]
 8089cce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8089cd2:	687b      	ldr	r3, [r7, #4]
 8089cd4:	685a      	ldr	r2, [r3, #4]
 8089cd6:	687b      	ldr	r3, [r7, #4]
 8089cd8:	681b      	ldr	r3, [r3, #0]
 8089cda:	430a      	orrs	r2, r1
 8089cdc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8089cde:	687b      	ldr	r3, [r7, #4]
 8089ce0:	681b      	ldr	r3, [r3, #0]
 8089ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089ce4:	f023 0107 	bic.w	r1, r3, #7
 8089ce8:	687b      	ldr	r3, [r7, #4]
 8089cea:	689a      	ldr	r2, [r3, #8]
 8089cec:	687b      	ldr	r3, [r7, #4]
 8089cee:	681b      	ldr	r3, [r3, #0]
 8089cf0:	430a      	orrs	r2, r1
 8089cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8089cf4:	687b      	ldr	r3, [r7, #4]
 8089cf6:	681b      	ldr	r3, [r3, #0]
 8089cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8089cfa:	4b0a      	ldr	r3, [pc, #40]	; (8089d24 <HAL_DMA2D_Init+0x90>)
 8089cfc:	4013      	ands	r3, r2
 8089cfe:	687a      	ldr	r2, [r7, #4]
 8089d00:	68d1      	ldr	r1, [r2, #12]
 8089d02:	687a      	ldr	r2, [r7, #4]
 8089d04:	6812      	ldr	r2, [r2, #0]
 8089d06:	430b      	orrs	r3, r1
 8089d08:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8089d0a:	687b      	ldr	r3, [r7, #4]
 8089d0c:	2200      	movs	r2, #0
 8089d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8089d10:	687b      	ldr	r3, [r7, #4]
 8089d12:	2201      	movs	r2, #1
 8089d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8089d18:	2300      	movs	r3, #0
}
 8089d1a:	4618      	mov	r0, r3
 8089d1c:	3708      	adds	r7, #8
 8089d1e:	46bd      	mov	sp, r7
 8089d20:	bd80      	pop	{r7, pc}
 8089d22:	bf00      	nop
 8089d24:	ffffc000 	.word	0xffffc000

08089d28 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8089d28:	b580      	push	{r7, lr}
 8089d2a:	b086      	sub	sp, #24
 8089d2c:	af02      	add	r7, sp, #8
 8089d2e:	60f8      	str	r0, [r7, #12]
 8089d30:	60b9      	str	r1, [r7, #8]
 8089d32:	607a      	str	r2, [r7, #4]
 8089d34:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8089d36:	68fb      	ldr	r3, [r7, #12]
 8089d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8089d3c:	2b01      	cmp	r3, #1
 8089d3e:	d101      	bne.n	8089d44 <HAL_DMA2D_Start+0x1c>
 8089d40:	2302      	movs	r3, #2
 8089d42:	e018      	b.n	8089d76 <HAL_DMA2D_Start+0x4e>
 8089d44:	68fb      	ldr	r3, [r7, #12]
 8089d46:	2201      	movs	r2, #1
 8089d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8089d4c:	68fb      	ldr	r3, [r7, #12]
 8089d4e:	2202      	movs	r2, #2
 8089d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8089d54:	69bb      	ldr	r3, [r7, #24]
 8089d56:	9300      	str	r3, [sp, #0]
 8089d58:	683b      	ldr	r3, [r7, #0]
 8089d5a:	687a      	ldr	r2, [r7, #4]
 8089d5c:	68b9      	ldr	r1, [r7, #8]
 8089d5e:	68f8      	ldr	r0, [r7, #12]
 8089d60:	f000 f98c 	bl	808a07c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8089d64:	68fb      	ldr	r3, [r7, #12]
 8089d66:	681b      	ldr	r3, [r3, #0]
 8089d68:	681a      	ldr	r2, [r3, #0]
 8089d6a:	68fb      	ldr	r3, [r7, #12]
 8089d6c:	681b      	ldr	r3, [r3, #0]
 8089d6e:	f042 0201 	orr.w	r2, r2, #1
 8089d72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8089d74:	2300      	movs	r3, #0
}
 8089d76:	4618      	mov	r0, r3
 8089d78:	3710      	adds	r7, #16
 8089d7a:	46bd      	mov	sp, r7
 8089d7c:	bd80      	pop	{r7, pc}

08089d7e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8089d7e:	b580      	push	{r7, lr}
 8089d80:	b084      	sub	sp, #16
 8089d82:	af00      	add	r7, sp, #0
 8089d84:	6078      	str	r0, [r7, #4]
 8089d86:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8089d88:	2300      	movs	r3, #0
 8089d8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8089d8c:	2300      	movs	r3, #0
 8089d8e:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8089d90:	687b      	ldr	r3, [r7, #4]
 8089d92:	681b      	ldr	r3, [r3, #0]
 8089d94:	681b      	ldr	r3, [r3, #0]
 8089d96:	f003 0301 	and.w	r3, r3, #1
 8089d9a:	2b00      	cmp	r3, #0
 8089d9c:	d056      	beq.n	8089e4c <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8089d9e:	f7ff f9df 	bl	8089160 <HAL_GetTick>
 8089da2:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8089da4:	e04b      	b.n	8089e3e <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8089da6:	687b      	ldr	r3, [r7, #4]
 8089da8:	681b      	ldr	r3, [r3, #0]
 8089daa:	685b      	ldr	r3, [r3, #4]
 8089dac:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8089dae:	68bb      	ldr	r3, [r7, #8]
 8089db0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8089db4:	2b00      	cmp	r3, #0
 8089db6:	d023      	beq.n	8089e00 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8089db8:	68bb      	ldr	r3, [r7, #8]
 8089dba:	f003 0320 	and.w	r3, r3, #32
 8089dbe:	2b00      	cmp	r3, #0
 8089dc0:	d005      	beq.n	8089dce <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8089dc2:	687b      	ldr	r3, [r7, #4]
 8089dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089dc6:	f043 0202 	orr.w	r2, r3, #2
 8089dca:	687b      	ldr	r3, [r7, #4]
 8089dcc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8089dce:	68bb      	ldr	r3, [r7, #8]
 8089dd0:	f003 0301 	and.w	r3, r3, #1
 8089dd4:	2b00      	cmp	r3, #0
 8089dd6:	d005      	beq.n	8089de4 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8089dd8:	687b      	ldr	r3, [r7, #4]
 8089dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089ddc:	f043 0201 	orr.w	r2, r3, #1
 8089de0:	687b      	ldr	r3, [r7, #4]
 8089de2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8089de4:	687b      	ldr	r3, [r7, #4]
 8089de6:	681b      	ldr	r3, [r3, #0]
 8089de8:	2221      	movs	r2, #33	; 0x21
 8089dea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8089dec:	687b      	ldr	r3, [r7, #4]
 8089dee:	2204      	movs	r2, #4
 8089df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8089df4:	687b      	ldr	r3, [r7, #4]
 8089df6:	2200      	movs	r2, #0
 8089df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8089dfc:	2301      	movs	r3, #1
 8089dfe:	e0a2      	b.n	8089f46 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8089e00:	683b      	ldr	r3, [r7, #0]
 8089e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8089e06:	d01a      	beq.n	8089e3e <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8089e08:	683b      	ldr	r3, [r7, #0]
 8089e0a:	2b00      	cmp	r3, #0
 8089e0c:	d007      	beq.n	8089e1e <HAL_DMA2D_PollForTransfer+0xa0>
 8089e0e:	f7ff f9a7 	bl	8089160 <HAL_GetTick>
 8089e12:	4602      	mov	r2, r0
 8089e14:	68fb      	ldr	r3, [r7, #12]
 8089e16:	1ad3      	subs	r3, r2, r3
 8089e18:	683a      	ldr	r2, [r7, #0]
 8089e1a:	429a      	cmp	r2, r3
 8089e1c:	d20f      	bcs.n	8089e3e <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8089e1e:	687b      	ldr	r3, [r7, #4]
 8089e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089e22:	f043 0220 	orr.w	r2, r3, #32
 8089e26:	687b      	ldr	r3, [r7, #4]
 8089e28:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8089e2a:	687b      	ldr	r3, [r7, #4]
 8089e2c:	2203      	movs	r2, #3
 8089e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8089e32:	687b      	ldr	r3, [r7, #4]
 8089e34:	2200      	movs	r2, #0
 8089e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8089e3a:	2303      	movs	r3, #3
 8089e3c:	e083      	b.n	8089f46 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8089e3e:	687b      	ldr	r3, [r7, #4]
 8089e40:	681b      	ldr	r3, [r3, #0]
 8089e42:	685b      	ldr	r3, [r3, #4]
 8089e44:	f003 0302 	and.w	r3, r3, #2
 8089e48:	2b00      	cmp	r3, #0
 8089e4a:	d0ac      	beq.n	8089da6 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8089e4c:	687b      	ldr	r3, [r7, #4]
 8089e4e:	681b      	ldr	r3, [r3, #0]
 8089e50:	69db      	ldr	r3, [r3, #28]
 8089e52:	f003 0320 	and.w	r3, r3, #32
 8089e56:	2b00      	cmp	r3, #0
 8089e58:	d106      	bne.n	8089e68 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8089e5a:	687b      	ldr	r3, [r7, #4]
 8089e5c:	681b      	ldr	r3, [r3, #0]
 8089e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8089e60:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8089e64:	2b00      	cmp	r3, #0
 8089e66:	d061      	beq.n	8089f2c <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8089e68:	f7ff f97a 	bl	8089160 <HAL_GetTick>
 8089e6c:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8089e6e:	e056      	b.n	8089f1e <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8089e70:	687b      	ldr	r3, [r7, #4]
 8089e72:	681b      	ldr	r3, [r3, #0]
 8089e74:	685b      	ldr	r3, [r3, #4]
 8089e76:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8089e78:	68bb      	ldr	r3, [r7, #8]
 8089e7a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8089e7e:	2b00      	cmp	r3, #0
 8089e80:	d02e      	beq.n	8089ee0 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8089e82:	68bb      	ldr	r3, [r7, #8]
 8089e84:	f003 0308 	and.w	r3, r3, #8
 8089e88:	2b00      	cmp	r3, #0
 8089e8a:	d005      	beq.n	8089e98 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8089e8c:	687b      	ldr	r3, [r7, #4]
 8089e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089e90:	f043 0204 	orr.w	r2, r3, #4
 8089e94:	687b      	ldr	r3, [r7, #4]
 8089e96:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8089e98:	68bb      	ldr	r3, [r7, #8]
 8089e9a:	f003 0320 	and.w	r3, r3, #32
 8089e9e:	2b00      	cmp	r3, #0
 8089ea0:	d005      	beq.n	8089eae <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8089ea2:	687b      	ldr	r3, [r7, #4]
 8089ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089ea6:	f043 0202 	orr.w	r2, r3, #2
 8089eaa:	687b      	ldr	r3, [r7, #4]
 8089eac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8089eae:	68bb      	ldr	r3, [r7, #8]
 8089eb0:	f003 0301 	and.w	r3, r3, #1
 8089eb4:	2b00      	cmp	r3, #0
 8089eb6:	d005      	beq.n	8089ec4 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8089eb8:	687b      	ldr	r3, [r7, #4]
 8089eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089ebc:	f043 0201 	orr.w	r2, r3, #1
 8089ec0:	687b      	ldr	r3, [r7, #4]
 8089ec2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8089ec4:	687b      	ldr	r3, [r7, #4]
 8089ec6:	681b      	ldr	r3, [r3, #0]
 8089ec8:	2229      	movs	r2, #41	; 0x29
 8089eca:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8089ecc:	687b      	ldr	r3, [r7, #4]
 8089ece:	2204      	movs	r2, #4
 8089ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8089ed4:	687b      	ldr	r3, [r7, #4]
 8089ed6:	2200      	movs	r2, #0
 8089ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8089edc:	2301      	movs	r3, #1
 8089ede:	e032      	b.n	8089f46 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8089ee0:	683b      	ldr	r3, [r7, #0]
 8089ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8089ee6:	d01a      	beq.n	8089f1e <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8089ee8:	683b      	ldr	r3, [r7, #0]
 8089eea:	2b00      	cmp	r3, #0
 8089eec:	d007      	beq.n	8089efe <HAL_DMA2D_PollForTransfer+0x180>
 8089eee:	f7ff f937 	bl	8089160 <HAL_GetTick>
 8089ef2:	4602      	mov	r2, r0
 8089ef4:	68fb      	ldr	r3, [r7, #12]
 8089ef6:	1ad3      	subs	r3, r2, r3
 8089ef8:	683a      	ldr	r2, [r7, #0]
 8089efa:	429a      	cmp	r2, r3
 8089efc:	d20f      	bcs.n	8089f1e <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8089efe:	687b      	ldr	r3, [r7, #4]
 8089f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089f02:	f043 0220 	orr.w	r2, r3, #32
 8089f06:	687b      	ldr	r3, [r7, #4]
 8089f08:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8089f0a:	687b      	ldr	r3, [r7, #4]
 8089f0c:	2203      	movs	r2, #3
 8089f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8089f12:	687b      	ldr	r3, [r7, #4]
 8089f14:	2200      	movs	r2, #0
 8089f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8089f1a:	2303      	movs	r3, #3
 8089f1c:	e013      	b.n	8089f46 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8089f1e:	687b      	ldr	r3, [r7, #4]
 8089f20:	681b      	ldr	r3, [r3, #0]
 8089f22:	685b      	ldr	r3, [r3, #4]
 8089f24:	f003 0310 	and.w	r3, r3, #16
 8089f28:	2b00      	cmp	r3, #0
 8089f2a:	d0a1      	beq.n	8089e70 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8089f2c:	687b      	ldr	r3, [r7, #4]
 8089f2e:	681b      	ldr	r3, [r3, #0]
 8089f30:	2212      	movs	r2, #18
 8089f32:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8089f34:	687b      	ldr	r3, [r7, #4]
 8089f36:	2201      	movs	r2, #1
 8089f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8089f3c:	687b      	ldr	r3, [r7, #4]
 8089f3e:	2200      	movs	r2, #0
 8089f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8089f44:	2300      	movs	r3, #0
}
 8089f46:	4618      	mov	r0, r3
 8089f48:	3710      	adds	r7, #16
 8089f4a:	46bd      	mov	sp, r7
 8089f4c:	bd80      	pop	{r7, pc}
	...

08089f50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8089f50:	b480      	push	{r7}
 8089f52:	b087      	sub	sp, #28
 8089f54:	af00      	add	r7, sp, #0
 8089f56:	6078      	str	r0, [r7, #4]
 8089f58:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8089f5a:	683b      	ldr	r3, [r7, #0]
 8089f5c:	011b      	lsls	r3, r3, #4
 8089f5e:	3318      	adds	r3, #24
 8089f60:	687a      	ldr	r2, [r7, #4]
 8089f62:	4413      	add	r3, r2
 8089f64:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8089f66:	2300      	movs	r3, #0
 8089f68:	60fb      	str	r3, [r7, #12]
 8089f6a:	2300      	movs	r3, #0
 8089f6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8089f6e:	687b      	ldr	r3, [r7, #4]
 8089f70:	685b      	ldr	r3, [r3, #4]
 8089f72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8089f76:	687b      	ldr	r3, [r7, #4]
 8089f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8089f7c:	2b01      	cmp	r3, #1
 8089f7e:	d101      	bne.n	8089f84 <HAL_DMA2D_ConfigLayer+0x34>
 8089f80:	2302      	movs	r3, #2
 8089f82:	e073      	b.n	808a06c <HAL_DMA2D_ConfigLayer+0x11c>
 8089f84:	687b      	ldr	r3, [r7, #4]
 8089f86:	2201      	movs	r2, #1
 8089f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8089f8c:	687b      	ldr	r3, [r7, #4]
 8089f8e:	2202      	movs	r2, #2
 8089f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8089f94:	693b      	ldr	r3, [r7, #16]
 8089f96:	685a      	ldr	r2, [r3, #4]
 8089f98:	693b      	ldr	r3, [r7, #16]
 8089f9a:	689b      	ldr	r3, [r3, #8]
 8089f9c:	041b      	lsls	r3, r3, #16
 8089f9e:	4313      	orrs	r3, r2
 8089fa0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8089fa2:	4b35      	ldr	r3, [pc, #212]	; (808a078 <HAL_DMA2D_ConfigLayer+0x128>)
 8089fa4:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8089fa6:	693b      	ldr	r3, [r7, #16]
 8089fa8:	685b      	ldr	r3, [r3, #4]
 8089faa:	2b0a      	cmp	r3, #10
 8089fac:	d003      	beq.n	8089fb6 <HAL_DMA2D_ConfigLayer+0x66>
 8089fae:	693b      	ldr	r3, [r7, #16]
 8089fb0:	685b      	ldr	r3, [r3, #4]
 8089fb2:	2b09      	cmp	r3, #9
 8089fb4:	d107      	bne.n	8089fc6 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8089fb6:	693b      	ldr	r3, [r7, #16]
 8089fb8:	68db      	ldr	r3, [r3, #12]
 8089fba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8089fbe:	697a      	ldr	r2, [r7, #20]
 8089fc0:	4313      	orrs	r3, r2
 8089fc2:	617b      	str	r3, [r7, #20]
 8089fc4:	e005      	b.n	8089fd2 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8089fc6:	693b      	ldr	r3, [r7, #16]
 8089fc8:	68db      	ldr	r3, [r3, #12]
 8089fca:	061b      	lsls	r3, r3, #24
 8089fcc:	697a      	ldr	r2, [r7, #20]
 8089fce:	4313      	orrs	r3, r2
 8089fd0:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8089fd2:	683b      	ldr	r3, [r7, #0]
 8089fd4:	2b00      	cmp	r3, #0
 8089fd6:	d120      	bne.n	808a01a <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8089fd8:	687b      	ldr	r3, [r7, #4]
 8089fda:	681b      	ldr	r3, [r3, #0]
 8089fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8089fde:	68fb      	ldr	r3, [r7, #12]
 8089fe0:	43db      	mvns	r3, r3
 8089fe2:	ea02 0103 	and.w	r1, r2, r3
 8089fe6:	687b      	ldr	r3, [r7, #4]
 8089fe8:	681b      	ldr	r3, [r3, #0]
 8089fea:	697a      	ldr	r2, [r7, #20]
 8089fec:	430a      	orrs	r2, r1
 8089fee:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8089ff0:	687b      	ldr	r3, [r7, #4]
 8089ff2:	681b      	ldr	r3, [r3, #0]
 8089ff4:	693a      	ldr	r2, [r7, #16]
 8089ff6:	6812      	ldr	r2, [r2, #0]
 8089ff8:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8089ffa:	693b      	ldr	r3, [r7, #16]
 8089ffc:	685b      	ldr	r3, [r3, #4]
 8089ffe:	2b0a      	cmp	r3, #10
 808a000:	d003      	beq.n	808a00a <HAL_DMA2D_ConfigLayer+0xba>
 808a002:	693b      	ldr	r3, [r7, #16]
 808a004:	685b      	ldr	r3, [r3, #4]
 808a006:	2b09      	cmp	r3, #9
 808a008:	d127      	bne.n	808a05a <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 808a00a:	693b      	ldr	r3, [r7, #16]
 808a00c:	68da      	ldr	r2, [r3, #12]
 808a00e:	687b      	ldr	r3, [r7, #4]
 808a010:	681b      	ldr	r3, [r3, #0]
 808a012:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 808a016:	629a      	str	r2, [r3, #40]	; 0x28
 808a018:	e01f      	b.n	808a05a <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 808a01a:	687b      	ldr	r3, [r7, #4]
 808a01c:	681b      	ldr	r3, [r3, #0]
 808a01e:	69da      	ldr	r2, [r3, #28]
 808a020:	68fb      	ldr	r3, [r7, #12]
 808a022:	43db      	mvns	r3, r3
 808a024:	ea02 0103 	and.w	r1, r2, r3
 808a028:	687b      	ldr	r3, [r7, #4]
 808a02a:	681b      	ldr	r3, [r3, #0]
 808a02c:	697a      	ldr	r2, [r7, #20]
 808a02e:	430a      	orrs	r2, r1
 808a030:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 808a032:	687b      	ldr	r3, [r7, #4]
 808a034:	681b      	ldr	r3, [r3, #0]
 808a036:	693a      	ldr	r2, [r7, #16]
 808a038:	6812      	ldr	r2, [r2, #0]
 808a03a:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 808a03c:	693b      	ldr	r3, [r7, #16]
 808a03e:	685b      	ldr	r3, [r3, #4]
 808a040:	2b0a      	cmp	r3, #10
 808a042:	d003      	beq.n	808a04c <HAL_DMA2D_ConfigLayer+0xfc>
 808a044:	693b      	ldr	r3, [r7, #16]
 808a046:	685b      	ldr	r3, [r3, #4]
 808a048:	2b09      	cmp	r3, #9
 808a04a:	d106      	bne.n	808a05a <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 808a04c:	693b      	ldr	r3, [r7, #16]
 808a04e:	68da      	ldr	r2, [r3, #12]
 808a050:	687b      	ldr	r3, [r7, #4]
 808a052:	681b      	ldr	r3, [r3, #0]
 808a054:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 808a058:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 808a05a:	687b      	ldr	r3, [r7, #4]
 808a05c:	2201      	movs	r2, #1
 808a05e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 808a062:	687b      	ldr	r3, [r7, #4]
 808a064:	2200      	movs	r2, #0
 808a066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 808a06a:	2300      	movs	r3, #0
}
 808a06c:	4618      	mov	r0, r3
 808a06e:	371c      	adds	r7, #28
 808a070:	46bd      	mov	sp, r7
 808a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a076:	4770      	bx	lr
 808a078:	ff03000f 	.word	0xff03000f

0808a07c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 808a07c:	b480      	push	{r7}
 808a07e:	b08b      	sub	sp, #44	; 0x2c
 808a080:	af00      	add	r7, sp, #0
 808a082:	60f8      	str	r0, [r7, #12]
 808a084:	60b9      	str	r1, [r7, #8]
 808a086:	607a      	str	r2, [r7, #4]
 808a088:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 808a08a:	2300      	movs	r3, #0
 808a08c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 808a08e:	2300      	movs	r3, #0
 808a090:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 808a092:	2300      	movs	r3, #0
 808a094:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 808a096:	2300      	movs	r3, #0
 808a098:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 808a09a:	2300      	movs	r3, #0
 808a09c:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 808a09e:	68fb      	ldr	r3, [r7, #12]
 808a0a0:	681b      	ldr	r3, [r3, #0]
 808a0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a0a4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 808a0a8:	683b      	ldr	r3, [r7, #0]
 808a0aa:	041a      	lsls	r2, r3, #16
 808a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808a0ae:	431a      	orrs	r2, r3
 808a0b0:	68fb      	ldr	r3, [r7, #12]
 808a0b2:	681b      	ldr	r3, [r3, #0]
 808a0b4:	430a      	orrs	r2, r1
 808a0b6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 808a0b8:	68fb      	ldr	r3, [r7, #12]
 808a0ba:	681b      	ldr	r3, [r3, #0]
 808a0bc:	687a      	ldr	r2, [r7, #4]
 808a0be:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 808a0c0:	68fb      	ldr	r3, [r7, #12]
 808a0c2:	685b      	ldr	r3, [r3, #4]
 808a0c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 808a0c8:	d174      	bne.n	808a1b4 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 808a0ca:	68bb      	ldr	r3, [r7, #8]
 808a0cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 808a0d0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 808a0d2:	68bb      	ldr	r3, [r7, #8]
 808a0d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 808a0d8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 808a0da:	68bb      	ldr	r3, [r7, #8]
 808a0dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 808a0e0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 808a0e2:	68bb      	ldr	r3, [r7, #8]
 808a0e4:	b2db      	uxtb	r3, r3
 808a0e6:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 808a0e8:	68fb      	ldr	r3, [r7, #12]
 808a0ea:	689b      	ldr	r3, [r3, #8]
 808a0ec:	2b00      	cmp	r3, #0
 808a0ee:	d108      	bne.n	808a102 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 808a0f0:	69ba      	ldr	r2, [r7, #24]
 808a0f2:	69fb      	ldr	r3, [r7, #28]
 808a0f4:	431a      	orrs	r2, r3
 808a0f6:	6a3b      	ldr	r3, [r7, #32]
 808a0f8:	4313      	orrs	r3, r2
 808a0fa:	697a      	ldr	r2, [r7, #20]
 808a0fc:	4313      	orrs	r3, r2
 808a0fe:	627b      	str	r3, [r7, #36]	; 0x24
 808a100:	e053      	b.n	808a1aa <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 808a102:	68fb      	ldr	r3, [r7, #12]
 808a104:	689b      	ldr	r3, [r3, #8]
 808a106:	2b01      	cmp	r3, #1
 808a108:	d106      	bne.n	808a118 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 808a10a:	69ba      	ldr	r2, [r7, #24]
 808a10c:	69fb      	ldr	r3, [r7, #28]
 808a10e:	4313      	orrs	r3, r2
 808a110:	697a      	ldr	r2, [r7, #20]
 808a112:	4313      	orrs	r3, r2
 808a114:	627b      	str	r3, [r7, #36]	; 0x24
 808a116:	e048      	b.n	808a1aa <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 808a118:	68fb      	ldr	r3, [r7, #12]
 808a11a:	689b      	ldr	r3, [r3, #8]
 808a11c:	2b02      	cmp	r3, #2
 808a11e:	d111      	bne.n	808a144 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 808a120:	69fb      	ldr	r3, [r7, #28]
 808a122:	0cdb      	lsrs	r3, r3, #19
 808a124:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 808a126:	69bb      	ldr	r3, [r7, #24]
 808a128:	0a9b      	lsrs	r3, r3, #10
 808a12a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 808a12c:	697b      	ldr	r3, [r7, #20]
 808a12e:	08db      	lsrs	r3, r3, #3
 808a130:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 808a132:	69bb      	ldr	r3, [r7, #24]
 808a134:	015a      	lsls	r2, r3, #5
 808a136:	69fb      	ldr	r3, [r7, #28]
 808a138:	02db      	lsls	r3, r3, #11
 808a13a:	4313      	orrs	r3, r2
 808a13c:	697a      	ldr	r2, [r7, #20]
 808a13e:	4313      	orrs	r3, r2
 808a140:	627b      	str	r3, [r7, #36]	; 0x24
 808a142:	e032      	b.n	808a1aa <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 808a144:	68fb      	ldr	r3, [r7, #12]
 808a146:	689b      	ldr	r3, [r3, #8]
 808a148:	2b03      	cmp	r3, #3
 808a14a:	d117      	bne.n	808a17c <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 808a14c:	6a3b      	ldr	r3, [r7, #32]
 808a14e:	0fdb      	lsrs	r3, r3, #31
 808a150:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 808a152:	69fb      	ldr	r3, [r7, #28]
 808a154:	0cdb      	lsrs	r3, r3, #19
 808a156:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 808a158:	69bb      	ldr	r3, [r7, #24]
 808a15a:	0adb      	lsrs	r3, r3, #11
 808a15c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 808a15e:	697b      	ldr	r3, [r7, #20]
 808a160:	08db      	lsrs	r3, r3, #3
 808a162:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 808a164:	69bb      	ldr	r3, [r7, #24]
 808a166:	015a      	lsls	r2, r3, #5
 808a168:	69fb      	ldr	r3, [r7, #28]
 808a16a:	029b      	lsls	r3, r3, #10
 808a16c:	431a      	orrs	r2, r3
 808a16e:	6a3b      	ldr	r3, [r7, #32]
 808a170:	03db      	lsls	r3, r3, #15
 808a172:	4313      	orrs	r3, r2
 808a174:	697a      	ldr	r2, [r7, #20]
 808a176:	4313      	orrs	r3, r2
 808a178:	627b      	str	r3, [r7, #36]	; 0x24
 808a17a:	e016      	b.n	808a1aa <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 808a17c:	6a3b      	ldr	r3, [r7, #32]
 808a17e:	0f1b      	lsrs	r3, r3, #28
 808a180:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 808a182:	69fb      	ldr	r3, [r7, #28]
 808a184:	0d1b      	lsrs	r3, r3, #20
 808a186:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 808a188:	69bb      	ldr	r3, [r7, #24]
 808a18a:	0b1b      	lsrs	r3, r3, #12
 808a18c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 808a18e:	697b      	ldr	r3, [r7, #20]
 808a190:	091b      	lsrs	r3, r3, #4
 808a192:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 808a194:	69bb      	ldr	r3, [r7, #24]
 808a196:	011a      	lsls	r2, r3, #4
 808a198:	69fb      	ldr	r3, [r7, #28]
 808a19a:	021b      	lsls	r3, r3, #8
 808a19c:	431a      	orrs	r2, r3
 808a19e:	6a3b      	ldr	r3, [r7, #32]
 808a1a0:	031b      	lsls	r3, r3, #12
 808a1a2:	4313      	orrs	r3, r2
 808a1a4:	697a      	ldr	r2, [r7, #20]
 808a1a6:	4313      	orrs	r3, r2
 808a1a8:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 808a1aa:	68fb      	ldr	r3, [r7, #12]
 808a1ac:	681b      	ldr	r3, [r3, #0]
 808a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808a1b0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 808a1b2:	e003      	b.n	808a1bc <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 808a1b4:	68fb      	ldr	r3, [r7, #12]
 808a1b6:	681b      	ldr	r3, [r3, #0]
 808a1b8:	68ba      	ldr	r2, [r7, #8]
 808a1ba:	60da      	str	r2, [r3, #12]
}
 808a1bc:	bf00      	nop
 808a1be:	372c      	adds	r7, #44	; 0x2c
 808a1c0:	46bd      	mov	sp, r7
 808a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a1c6:	4770      	bx	lr

0808a1c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 808a1c8:	b480      	push	{r7}
 808a1ca:	b089      	sub	sp, #36	; 0x24
 808a1cc:	af00      	add	r7, sp, #0
 808a1ce:	6078      	str	r0, [r7, #4]
 808a1d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 808a1d2:	2300      	movs	r3, #0
 808a1d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 808a1d6:	2300      	movs	r3, #0
 808a1d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 808a1da:	2300      	movs	r3, #0
 808a1dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 808a1de:	2300      	movs	r3, #0
 808a1e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 808a1e2:	2300      	movs	r3, #0
 808a1e4:	61fb      	str	r3, [r7, #28]
 808a1e6:	e175      	b.n	808a4d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 808a1e8:	2201      	movs	r2, #1
 808a1ea:	69fb      	ldr	r3, [r7, #28]
 808a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 808a1f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 808a1f2:	683b      	ldr	r3, [r7, #0]
 808a1f4:	681b      	ldr	r3, [r3, #0]
 808a1f6:	697a      	ldr	r2, [r7, #20]
 808a1f8:	4013      	ands	r3, r2
 808a1fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 808a1fc:	693a      	ldr	r2, [r7, #16]
 808a1fe:	697b      	ldr	r3, [r7, #20]
 808a200:	429a      	cmp	r2, r3
 808a202:	f040 8164 	bne.w	808a4ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 808a206:	683b      	ldr	r3, [r7, #0]
 808a208:	685b      	ldr	r3, [r3, #4]
 808a20a:	2b02      	cmp	r3, #2
 808a20c:	d003      	beq.n	808a216 <HAL_GPIO_Init+0x4e>
 808a20e:	683b      	ldr	r3, [r7, #0]
 808a210:	685b      	ldr	r3, [r3, #4]
 808a212:	2b12      	cmp	r3, #18
 808a214:	d123      	bne.n	808a25e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 808a216:	69fb      	ldr	r3, [r7, #28]
 808a218:	08da      	lsrs	r2, r3, #3
 808a21a:	687b      	ldr	r3, [r7, #4]
 808a21c:	3208      	adds	r2, #8
 808a21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808a222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 808a224:	69fb      	ldr	r3, [r7, #28]
 808a226:	f003 0307 	and.w	r3, r3, #7
 808a22a:	009b      	lsls	r3, r3, #2
 808a22c:	220f      	movs	r2, #15
 808a22e:	fa02 f303 	lsl.w	r3, r2, r3
 808a232:	43db      	mvns	r3, r3
 808a234:	69ba      	ldr	r2, [r7, #24]
 808a236:	4013      	ands	r3, r2
 808a238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 808a23a:	683b      	ldr	r3, [r7, #0]
 808a23c:	691a      	ldr	r2, [r3, #16]
 808a23e:	69fb      	ldr	r3, [r7, #28]
 808a240:	f003 0307 	and.w	r3, r3, #7
 808a244:	009b      	lsls	r3, r3, #2
 808a246:	fa02 f303 	lsl.w	r3, r2, r3
 808a24a:	69ba      	ldr	r2, [r7, #24]
 808a24c:	4313      	orrs	r3, r2
 808a24e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 808a250:	69fb      	ldr	r3, [r7, #28]
 808a252:	08da      	lsrs	r2, r3, #3
 808a254:	687b      	ldr	r3, [r7, #4]
 808a256:	3208      	adds	r2, #8
 808a258:	69b9      	ldr	r1, [r7, #24]
 808a25a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 808a25e:	687b      	ldr	r3, [r7, #4]
 808a260:	681b      	ldr	r3, [r3, #0]
 808a262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 808a264:	69fb      	ldr	r3, [r7, #28]
 808a266:	005b      	lsls	r3, r3, #1
 808a268:	2203      	movs	r2, #3
 808a26a:	fa02 f303 	lsl.w	r3, r2, r3
 808a26e:	43db      	mvns	r3, r3
 808a270:	69ba      	ldr	r2, [r7, #24]
 808a272:	4013      	ands	r3, r2
 808a274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 808a276:	683b      	ldr	r3, [r7, #0]
 808a278:	685b      	ldr	r3, [r3, #4]
 808a27a:	f003 0203 	and.w	r2, r3, #3
 808a27e:	69fb      	ldr	r3, [r7, #28]
 808a280:	005b      	lsls	r3, r3, #1
 808a282:	fa02 f303 	lsl.w	r3, r2, r3
 808a286:	69ba      	ldr	r2, [r7, #24]
 808a288:	4313      	orrs	r3, r2
 808a28a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 808a28c:	687b      	ldr	r3, [r7, #4]
 808a28e:	69ba      	ldr	r2, [r7, #24]
 808a290:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 808a292:	683b      	ldr	r3, [r7, #0]
 808a294:	685b      	ldr	r3, [r3, #4]
 808a296:	2b01      	cmp	r3, #1
 808a298:	d00b      	beq.n	808a2b2 <HAL_GPIO_Init+0xea>
 808a29a:	683b      	ldr	r3, [r7, #0]
 808a29c:	685b      	ldr	r3, [r3, #4]
 808a29e:	2b02      	cmp	r3, #2
 808a2a0:	d007      	beq.n	808a2b2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 808a2a2:	683b      	ldr	r3, [r7, #0]
 808a2a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 808a2a6:	2b11      	cmp	r3, #17
 808a2a8:	d003      	beq.n	808a2b2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 808a2aa:	683b      	ldr	r3, [r7, #0]
 808a2ac:	685b      	ldr	r3, [r3, #4]
 808a2ae:	2b12      	cmp	r3, #18
 808a2b0:	d130      	bne.n	808a314 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 808a2b2:	687b      	ldr	r3, [r7, #4]
 808a2b4:	689b      	ldr	r3, [r3, #8]
 808a2b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 808a2b8:	69fb      	ldr	r3, [r7, #28]
 808a2ba:	005b      	lsls	r3, r3, #1
 808a2bc:	2203      	movs	r2, #3
 808a2be:	fa02 f303 	lsl.w	r3, r2, r3
 808a2c2:	43db      	mvns	r3, r3
 808a2c4:	69ba      	ldr	r2, [r7, #24]
 808a2c6:	4013      	ands	r3, r2
 808a2c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 808a2ca:	683b      	ldr	r3, [r7, #0]
 808a2cc:	68da      	ldr	r2, [r3, #12]
 808a2ce:	69fb      	ldr	r3, [r7, #28]
 808a2d0:	005b      	lsls	r3, r3, #1
 808a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 808a2d6:	69ba      	ldr	r2, [r7, #24]
 808a2d8:	4313      	orrs	r3, r2
 808a2da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 808a2dc:	687b      	ldr	r3, [r7, #4]
 808a2de:	69ba      	ldr	r2, [r7, #24]
 808a2e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 808a2e2:	687b      	ldr	r3, [r7, #4]
 808a2e4:	685b      	ldr	r3, [r3, #4]
 808a2e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 808a2e8:	2201      	movs	r2, #1
 808a2ea:	69fb      	ldr	r3, [r7, #28]
 808a2ec:	fa02 f303 	lsl.w	r3, r2, r3
 808a2f0:	43db      	mvns	r3, r3
 808a2f2:	69ba      	ldr	r2, [r7, #24]
 808a2f4:	4013      	ands	r3, r2
 808a2f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 808a2f8:	683b      	ldr	r3, [r7, #0]
 808a2fa:	685b      	ldr	r3, [r3, #4]
 808a2fc:	091b      	lsrs	r3, r3, #4
 808a2fe:	f003 0201 	and.w	r2, r3, #1
 808a302:	69fb      	ldr	r3, [r7, #28]
 808a304:	fa02 f303 	lsl.w	r3, r2, r3
 808a308:	69ba      	ldr	r2, [r7, #24]
 808a30a:	4313      	orrs	r3, r2
 808a30c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 808a30e:	687b      	ldr	r3, [r7, #4]
 808a310:	69ba      	ldr	r2, [r7, #24]
 808a312:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 808a314:	687b      	ldr	r3, [r7, #4]
 808a316:	68db      	ldr	r3, [r3, #12]
 808a318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 808a31a:	69fb      	ldr	r3, [r7, #28]
 808a31c:	005b      	lsls	r3, r3, #1
 808a31e:	2203      	movs	r2, #3
 808a320:	fa02 f303 	lsl.w	r3, r2, r3
 808a324:	43db      	mvns	r3, r3
 808a326:	69ba      	ldr	r2, [r7, #24]
 808a328:	4013      	ands	r3, r2
 808a32a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 808a32c:	683b      	ldr	r3, [r7, #0]
 808a32e:	689a      	ldr	r2, [r3, #8]
 808a330:	69fb      	ldr	r3, [r7, #28]
 808a332:	005b      	lsls	r3, r3, #1
 808a334:	fa02 f303 	lsl.w	r3, r2, r3
 808a338:	69ba      	ldr	r2, [r7, #24]
 808a33a:	4313      	orrs	r3, r2
 808a33c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 808a33e:	687b      	ldr	r3, [r7, #4]
 808a340:	69ba      	ldr	r2, [r7, #24]
 808a342:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 808a344:	683b      	ldr	r3, [r7, #0]
 808a346:	685b      	ldr	r3, [r3, #4]
 808a348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808a34c:	2b00      	cmp	r3, #0
 808a34e:	f000 80be 	beq.w	808a4ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 808a352:	4b65      	ldr	r3, [pc, #404]	; (808a4e8 <HAL_GPIO_Init+0x320>)
 808a354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a356:	4a64      	ldr	r2, [pc, #400]	; (808a4e8 <HAL_GPIO_Init+0x320>)
 808a358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 808a35c:	6453      	str	r3, [r2, #68]	; 0x44
 808a35e:	4b62      	ldr	r3, [pc, #392]	; (808a4e8 <HAL_GPIO_Init+0x320>)
 808a360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808a366:	60fb      	str	r3, [r7, #12]
 808a368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 808a36a:	4a60      	ldr	r2, [pc, #384]	; (808a4ec <HAL_GPIO_Init+0x324>)
 808a36c:	69fb      	ldr	r3, [r7, #28]
 808a36e:	089b      	lsrs	r3, r3, #2
 808a370:	3302      	adds	r3, #2
 808a372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 808a376:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 808a378:	69fb      	ldr	r3, [r7, #28]
 808a37a:	f003 0303 	and.w	r3, r3, #3
 808a37e:	009b      	lsls	r3, r3, #2
 808a380:	220f      	movs	r2, #15
 808a382:	fa02 f303 	lsl.w	r3, r2, r3
 808a386:	43db      	mvns	r3, r3
 808a388:	69ba      	ldr	r2, [r7, #24]
 808a38a:	4013      	ands	r3, r2
 808a38c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 808a38e:	687b      	ldr	r3, [r7, #4]
 808a390:	4a57      	ldr	r2, [pc, #348]	; (808a4f0 <HAL_GPIO_Init+0x328>)
 808a392:	4293      	cmp	r3, r2
 808a394:	d037      	beq.n	808a406 <HAL_GPIO_Init+0x23e>
 808a396:	687b      	ldr	r3, [r7, #4]
 808a398:	4a56      	ldr	r2, [pc, #344]	; (808a4f4 <HAL_GPIO_Init+0x32c>)
 808a39a:	4293      	cmp	r3, r2
 808a39c:	d031      	beq.n	808a402 <HAL_GPIO_Init+0x23a>
 808a39e:	687b      	ldr	r3, [r7, #4]
 808a3a0:	4a55      	ldr	r2, [pc, #340]	; (808a4f8 <HAL_GPIO_Init+0x330>)
 808a3a2:	4293      	cmp	r3, r2
 808a3a4:	d02b      	beq.n	808a3fe <HAL_GPIO_Init+0x236>
 808a3a6:	687b      	ldr	r3, [r7, #4]
 808a3a8:	4a54      	ldr	r2, [pc, #336]	; (808a4fc <HAL_GPIO_Init+0x334>)
 808a3aa:	4293      	cmp	r3, r2
 808a3ac:	d025      	beq.n	808a3fa <HAL_GPIO_Init+0x232>
 808a3ae:	687b      	ldr	r3, [r7, #4]
 808a3b0:	4a53      	ldr	r2, [pc, #332]	; (808a500 <HAL_GPIO_Init+0x338>)
 808a3b2:	4293      	cmp	r3, r2
 808a3b4:	d01f      	beq.n	808a3f6 <HAL_GPIO_Init+0x22e>
 808a3b6:	687b      	ldr	r3, [r7, #4]
 808a3b8:	4a52      	ldr	r2, [pc, #328]	; (808a504 <HAL_GPIO_Init+0x33c>)
 808a3ba:	4293      	cmp	r3, r2
 808a3bc:	d019      	beq.n	808a3f2 <HAL_GPIO_Init+0x22a>
 808a3be:	687b      	ldr	r3, [r7, #4]
 808a3c0:	4a51      	ldr	r2, [pc, #324]	; (808a508 <HAL_GPIO_Init+0x340>)
 808a3c2:	4293      	cmp	r3, r2
 808a3c4:	d013      	beq.n	808a3ee <HAL_GPIO_Init+0x226>
 808a3c6:	687b      	ldr	r3, [r7, #4]
 808a3c8:	4a50      	ldr	r2, [pc, #320]	; (808a50c <HAL_GPIO_Init+0x344>)
 808a3ca:	4293      	cmp	r3, r2
 808a3cc:	d00d      	beq.n	808a3ea <HAL_GPIO_Init+0x222>
 808a3ce:	687b      	ldr	r3, [r7, #4]
 808a3d0:	4a4f      	ldr	r2, [pc, #316]	; (808a510 <HAL_GPIO_Init+0x348>)
 808a3d2:	4293      	cmp	r3, r2
 808a3d4:	d007      	beq.n	808a3e6 <HAL_GPIO_Init+0x21e>
 808a3d6:	687b      	ldr	r3, [r7, #4]
 808a3d8:	4a4e      	ldr	r2, [pc, #312]	; (808a514 <HAL_GPIO_Init+0x34c>)
 808a3da:	4293      	cmp	r3, r2
 808a3dc:	d101      	bne.n	808a3e2 <HAL_GPIO_Init+0x21a>
 808a3de:	2309      	movs	r3, #9
 808a3e0:	e012      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3e2:	230a      	movs	r3, #10
 808a3e4:	e010      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3e6:	2308      	movs	r3, #8
 808a3e8:	e00e      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3ea:	2307      	movs	r3, #7
 808a3ec:	e00c      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3ee:	2306      	movs	r3, #6
 808a3f0:	e00a      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3f2:	2305      	movs	r3, #5
 808a3f4:	e008      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3f6:	2304      	movs	r3, #4
 808a3f8:	e006      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3fa:	2303      	movs	r3, #3
 808a3fc:	e004      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a3fe:	2302      	movs	r3, #2
 808a400:	e002      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a402:	2301      	movs	r3, #1
 808a404:	e000      	b.n	808a408 <HAL_GPIO_Init+0x240>
 808a406:	2300      	movs	r3, #0
 808a408:	69fa      	ldr	r2, [r7, #28]
 808a40a:	f002 0203 	and.w	r2, r2, #3
 808a40e:	0092      	lsls	r2, r2, #2
 808a410:	4093      	lsls	r3, r2
 808a412:	69ba      	ldr	r2, [r7, #24]
 808a414:	4313      	orrs	r3, r2
 808a416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 808a418:	4934      	ldr	r1, [pc, #208]	; (808a4ec <HAL_GPIO_Init+0x324>)
 808a41a:	69fb      	ldr	r3, [r7, #28]
 808a41c:	089b      	lsrs	r3, r3, #2
 808a41e:	3302      	adds	r3, #2
 808a420:	69ba      	ldr	r2, [r7, #24]
 808a422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 808a426:	4b3c      	ldr	r3, [pc, #240]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a428:	681b      	ldr	r3, [r3, #0]
 808a42a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808a42c:	693b      	ldr	r3, [r7, #16]
 808a42e:	43db      	mvns	r3, r3
 808a430:	69ba      	ldr	r2, [r7, #24]
 808a432:	4013      	ands	r3, r2
 808a434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 808a436:	683b      	ldr	r3, [r7, #0]
 808a438:	685b      	ldr	r3, [r3, #4]
 808a43a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808a43e:	2b00      	cmp	r3, #0
 808a440:	d003      	beq.n	808a44a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 808a442:	69ba      	ldr	r2, [r7, #24]
 808a444:	693b      	ldr	r3, [r7, #16]
 808a446:	4313      	orrs	r3, r2
 808a448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 808a44a:	4a33      	ldr	r2, [pc, #204]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a44c:	69bb      	ldr	r3, [r7, #24]
 808a44e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 808a450:	4b31      	ldr	r3, [pc, #196]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a452:	685b      	ldr	r3, [r3, #4]
 808a454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808a456:	693b      	ldr	r3, [r7, #16]
 808a458:	43db      	mvns	r3, r3
 808a45a:	69ba      	ldr	r2, [r7, #24]
 808a45c:	4013      	ands	r3, r2
 808a45e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 808a460:	683b      	ldr	r3, [r7, #0]
 808a462:	685b      	ldr	r3, [r3, #4]
 808a464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808a468:	2b00      	cmp	r3, #0
 808a46a:	d003      	beq.n	808a474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 808a46c:	69ba      	ldr	r2, [r7, #24]
 808a46e:	693b      	ldr	r3, [r7, #16]
 808a470:	4313      	orrs	r3, r2
 808a472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 808a474:	4a28      	ldr	r2, [pc, #160]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a476:	69bb      	ldr	r3, [r7, #24]
 808a478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 808a47a:	4b27      	ldr	r3, [pc, #156]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a47c:	689b      	ldr	r3, [r3, #8]
 808a47e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808a480:	693b      	ldr	r3, [r7, #16]
 808a482:	43db      	mvns	r3, r3
 808a484:	69ba      	ldr	r2, [r7, #24]
 808a486:	4013      	ands	r3, r2
 808a488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 808a48a:	683b      	ldr	r3, [r7, #0]
 808a48c:	685b      	ldr	r3, [r3, #4]
 808a48e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 808a492:	2b00      	cmp	r3, #0
 808a494:	d003      	beq.n	808a49e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 808a496:	69ba      	ldr	r2, [r7, #24]
 808a498:	693b      	ldr	r3, [r7, #16]
 808a49a:	4313      	orrs	r3, r2
 808a49c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 808a49e:	4a1e      	ldr	r2, [pc, #120]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a4a0:	69bb      	ldr	r3, [r7, #24]
 808a4a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 808a4a4:	4b1c      	ldr	r3, [pc, #112]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a4a6:	68db      	ldr	r3, [r3, #12]
 808a4a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808a4aa:	693b      	ldr	r3, [r7, #16]
 808a4ac:	43db      	mvns	r3, r3
 808a4ae:	69ba      	ldr	r2, [r7, #24]
 808a4b0:	4013      	ands	r3, r2
 808a4b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 808a4b4:	683b      	ldr	r3, [r7, #0]
 808a4b6:	685b      	ldr	r3, [r3, #4]
 808a4b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808a4bc:	2b00      	cmp	r3, #0
 808a4be:	d003      	beq.n	808a4c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 808a4c0:	69ba      	ldr	r2, [r7, #24]
 808a4c2:	693b      	ldr	r3, [r7, #16]
 808a4c4:	4313      	orrs	r3, r2
 808a4c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 808a4c8:	4a13      	ldr	r2, [pc, #76]	; (808a518 <HAL_GPIO_Init+0x350>)
 808a4ca:	69bb      	ldr	r3, [r7, #24]
 808a4cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 808a4ce:	69fb      	ldr	r3, [r7, #28]
 808a4d0:	3301      	adds	r3, #1
 808a4d2:	61fb      	str	r3, [r7, #28]
 808a4d4:	69fb      	ldr	r3, [r7, #28]
 808a4d6:	2b0f      	cmp	r3, #15
 808a4d8:	f67f ae86 	bls.w	808a1e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 808a4dc:	bf00      	nop
 808a4de:	3724      	adds	r7, #36	; 0x24
 808a4e0:	46bd      	mov	sp, r7
 808a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a4e6:	4770      	bx	lr
 808a4e8:	40023800 	.word	0x40023800
 808a4ec:	40013800 	.word	0x40013800
 808a4f0:	40020000 	.word	0x40020000
 808a4f4:	40020400 	.word	0x40020400
 808a4f8:	40020800 	.word	0x40020800
 808a4fc:	40020c00 	.word	0x40020c00
 808a500:	40021000 	.word	0x40021000
 808a504:	40021400 	.word	0x40021400
 808a508:	40021800 	.word	0x40021800
 808a50c:	40021c00 	.word	0x40021c00
 808a510:	40022000 	.word	0x40022000
 808a514:	40022400 	.word	0x40022400
 808a518:	40013c00 	.word	0x40013c00

0808a51c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 808a51c:	b480      	push	{r7}
 808a51e:	b087      	sub	sp, #28
 808a520:	af00      	add	r7, sp, #0
 808a522:	6078      	str	r0, [r7, #4]
 808a524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 808a526:	2300      	movs	r3, #0
 808a528:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 808a52a:	2300      	movs	r3, #0
 808a52c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 808a52e:	2300      	movs	r3, #0
 808a530:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 808a532:	2300      	movs	r3, #0
 808a534:	617b      	str	r3, [r7, #20]
 808a536:	e0d9      	b.n	808a6ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 808a538:	2201      	movs	r2, #1
 808a53a:	697b      	ldr	r3, [r7, #20]
 808a53c:	fa02 f303 	lsl.w	r3, r2, r3
 808a540:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 808a542:	683a      	ldr	r2, [r7, #0]
 808a544:	693b      	ldr	r3, [r7, #16]
 808a546:	4013      	ands	r3, r2
 808a548:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 808a54a:	68fa      	ldr	r2, [r7, #12]
 808a54c:	693b      	ldr	r3, [r7, #16]
 808a54e:	429a      	cmp	r2, r3
 808a550:	f040 80c9 	bne.w	808a6e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 808a554:	687b      	ldr	r3, [r7, #4]
 808a556:	681a      	ldr	r2, [r3, #0]
 808a558:	697b      	ldr	r3, [r7, #20]
 808a55a:	005b      	lsls	r3, r3, #1
 808a55c:	2103      	movs	r1, #3
 808a55e:	fa01 f303 	lsl.w	r3, r1, r3
 808a562:	43db      	mvns	r3, r3
 808a564:	401a      	ands	r2, r3
 808a566:	687b      	ldr	r3, [r7, #4]
 808a568:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 808a56a:	697b      	ldr	r3, [r7, #20]
 808a56c:	08da      	lsrs	r2, r3, #3
 808a56e:	687b      	ldr	r3, [r7, #4]
 808a570:	3208      	adds	r2, #8
 808a572:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808a576:	697b      	ldr	r3, [r7, #20]
 808a578:	f003 0307 	and.w	r3, r3, #7
 808a57c:	009b      	lsls	r3, r3, #2
 808a57e:	220f      	movs	r2, #15
 808a580:	fa02 f303 	lsl.w	r3, r2, r3
 808a584:	43db      	mvns	r3, r3
 808a586:	697a      	ldr	r2, [r7, #20]
 808a588:	08d2      	lsrs	r2, r2, #3
 808a58a:	4019      	ands	r1, r3
 808a58c:	687b      	ldr	r3, [r7, #4]
 808a58e:	3208      	adds	r2, #8
 808a590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 808a594:	687b      	ldr	r3, [r7, #4]
 808a596:	689a      	ldr	r2, [r3, #8]
 808a598:	697b      	ldr	r3, [r7, #20]
 808a59a:	005b      	lsls	r3, r3, #1
 808a59c:	2103      	movs	r1, #3
 808a59e:	fa01 f303 	lsl.w	r3, r1, r3
 808a5a2:	43db      	mvns	r3, r3
 808a5a4:	401a      	ands	r2, r3
 808a5a6:	687b      	ldr	r3, [r7, #4]
 808a5a8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 808a5aa:	687b      	ldr	r3, [r7, #4]
 808a5ac:	685a      	ldr	r2, [r3, #4]
 808a5ae:	2101      	movs	r1, #1
 808a5b0:	697b      	ldr	r3, [r7, #20]
 808a5b2:	fa01 f303 	lsl.w	r3, r1, r3
 808a5b6:	43db      	mvns	r3, r3
 808a5b8:	401a      	ands	r2, r3
 808a5ba:	687b      	ldr	r3, [r7, #4]
 808a5bc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 808a5be:	687b      	ldr	r3, [r7, #4]
 808a5c0:	68da      	ldr	r2, [r3, #12]
 808a5c2:	697b      	ldr	r3, [r7, #20]
 808a5c4:	005b      	lsls	r3, r3, #1
 808a5c6:	2103      	movs	r1, #3
 808a5c8:	fa01 f303 	lsl.w	r3, r1, r3
 808a5cc:	43db      	mvns	r3, r3
 808a5ce:	401a      	ands	r2, r3
 808a5d0:	687b      	ldr	r3, [r7, #4]
 808a5d2:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 808a5d4:	4a4a      	ldr	r2, [pc, #296]	; (808a700 <HAL_GPIO_DeInit+0x1e4>)
 808a5d6:	697b      	ldr	r3, [r7, #20]
 808a5d8:	089b      	lsrs	r3, r3, #2
 808a5da:	3302      	adds	r3, #2
 808a5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 808a5e0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 808a5e2:	697b      	ldr	r3, [r7, #20]
 808a5e4:	f003 0303 	and.w	r3, r3, #3
 808a5e8:	009b      	lsls	r3, r3, #2
 808a5ea:	220f      	movs	r2, #15
 808a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 808a5f0:	68ba      	ldr	r2, [r7, #8]
 808a5f2:	4013      	ands	r3, r2
 808a5f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 808a5f6:	687b      	ldr	r3, [r7, #4]
 808a5f8:	4a42      	ldr	r2, [pc, #264]	; (808a704 <HAL_GPIO_DeInit+0x1e8>)
 808a5fa:	4293      	cmp	r3, r2
 808a5fc:	d037      	beq.n	808a66e <HAL_GPIO_DeInit+0x152>
 808a5fe:	687b      	ldr	r3, [r7, #4]
 808a600:	4a41      	ldr	r2, [pc, #260]	; (808a708 <HAL_GPIO_DeInit+0x1ec>)
 808a602:	4293      	cmp	r3, r2
 808a604:	d031      	beq.n	808a66a <HAL_GPIO_DeInit+0x14e>
 808a606:	687b      	ldr	r3, [r7, #4]
 808a608:	4a40      	ldr	r2, [pc, #256]	; (808a70c <HAL_GPIO_DeInit+0x1f0>)
 808a60a:	4293      	cmp	r3, r2
 808a60c:	d02b      	beq.n	808a666 <HAL_GPIO_DeInit+0x14a>
 808a60e:	687b      	ldr	r3, [r7, #4]
 808a610:	4a3f      	ldr	r2, [pc, #252]	; (808a710 <HAL_GPIO_DeInit+0x1f4>)
 808a612:	4293      	cmp	r3, r2
 808a614:	d025      	beq.n	808a662 <HAL_GPIO_DeInit+0x146>
 808a616:	687b      	ldr	r3, [r7, #4]
 808a618:	4a3e      	ldr	r2, [pc, #248]	; (808a714 <HAL_GPIO_DeInit+0x1f8>)
 808a61a:	4293      	cmp	r3, r2
 808a61c:	d01f      	beq.n	808a65e <HAL_GPIO_DeInit+0x142>
 808a61e:	687b      	ldr	r3, [r7, #4]
 808a620:	4a3d      	ldr	r2, [pc, #244]	; (808a718 <HAL_GPIO_DeInit+0x1fc>)
 808a622:	4293      	cmp	r3, r2
 808a624:	d019      	beq.n	808a65a <HAL_GPIO_DeInit+0x13e>
 808a626:	687b      	ldr	r3, [r7, #4]
 808a628:	4a3c      	ldr	r2, [pc, #240]	; (808a71c <HAL_GPIO_DeInit+0x200>)
 808a62a:	4293      	cmp	r3, r2
 808a62c:	d013      	beq.n	808a656 <HAL_GPIO_DeInit+0x13a>
 808a62e:	687b      	ldr	r3, [r7, #4]
 808a630:	4a3b      	ldr	r2, [pc, #236]	; (808a720 <HAL_GPIO_DeInit+0x204>)
 808a632:	4293      	cmp	r3, r2
 808a634:	d00d      	beq.n	808a652 <HAL_GPIO_DeInit+0x136>
 808a636:	687b      	ldr	r3, [r7, #4]
 808a638:	4a3a      	ldr	r2, [pc, #232]	; (808a724 <HAL_GPIO_DeInit+0x208>)
 808a63a:	4293      	cmp	r3, r2
 808a63c:	d007      	beq.n	808a64e <HAL_GPIO_DeInit+0x132>
 808a63e:	687b      	ldr	r3, [r7, #4]
 808a640:	4a39      	ldr	r2, [pc, #228]	; (808a728 <HAL_GPIO_DeInit+0x20c>)
 808a642:	4293      	cmp	r3, r2
 808a644:	d101      	bne.n	808a64a <HAL_GPIO_DeInit+0x12e>
 808a646:	2309      	movs	r3, #9
 808a648:	e012      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a64a:	230a      	movs	r3, #10
 808a64c:	e010      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a64e:	2308      	movs	r3, #8
 808a650:	e00e      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a652:	2307      	movs	r3, #7
 808a654:	e00c      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a656:	2306      	movs	r3, #6
 808a658:	e00a      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a65a:	2305      	movs	r3, #5
 808a65c:	e008      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a65e:	2304      	movs	r3, #4
 808a660:	e006      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a662:	2303      	movs	r3, #3
 808a664:	e004      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a666:	2302      	movs	r3, #2
 808a668:	e002      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a66a:	2301      	movs	r3, #1
 808a66c:	e000      	b.n	808a670 <HAL_GPIO_DeInit+0x154>
 808a66e:	2300      	movs	r3, #0
 808a670:	697a      	ldr	r2, [r7, #20]
 808a672:	f002 0203 	and.w	r2, r2, #3
 808a676:	0092      	lsls	r2, r2, #2
 808a678:	4093      	lsls	r3, r2
 808a67a:	68ba      	ldr	r2, [r7, #8]
 808a67c:	429a      	cmp	r2, r3
 808a67e:	d132      	bne.n	808a6e6 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 808a680:	697b      	ldr	r3, [r7, #20]
 808a682:	f003 0303 	and.w	r3, r3, #3
 808a686:	009b      	lsls	r3, r3, #2
 808a688:	220f      	movs	r2, #15
 808a68a:	fa02 f303 	lsl.w	r3, r2, r3
 808a68e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 808a690:	4a1b      	ldr	r2, [pc, #108]	; (808a700 <HAL_GPIO_DeInit+0x1e4>)
 808a692:	697b      	ldr	r3, [r7, #20]
 808a694:	089b      	lsrs	r3, r3, #2
 808a696:	3302      	adds	r3, #2
 808a698:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 808a69c:	68bb      	ldr	r3, [r7, #8]
 808a69e:	43da      	mvns	r2, r3
 808a6a0:	4817      	ldr	r0, [pc, #92]	; (808a700 <HAL_GPIO_DeInit+0x1e4>)
 808a6a2:	697b      	ldr	r3, [r7, #20]
 808a6a4:	089b      	lsrs	r3, r3, #2
 808a6a6:	400a      	ands	r2, r1
 808a6a8:	3302      	adds	r3, #2
 808a6aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 808a6ae:	4b1f      	ldr	r3, [pc, #124]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6b0:	681a      	ldr	r2, [r3, #0]
 808a6b2:	68fb      	ldr	r3, [r7, #12]
 808a6b4:	43db      	mvns	r3, r3
 808a6b6:	491d      	ldr	r1, [pc, #116]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6b8:	4013      	ands	r3, r2
 808a6ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 808a6bc:	4b1b      	ldr	r3, [pc, #108]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6be:	685a      	ldr	r2, [r3, #4]
 808a6c0:	68fb      	ldr	r3, [r7, #12]
 808a6c2:	43db      	mvns	r3, r3
 808a6c4:	4919      	ldr	r1, [pc, #100]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6c6:	4013      	ands	r3, r2
 808a6c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 808a6ca:	4b18      	ldr	r3, [pc, #96]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6cc:	689a      	ldr	r2, [r3, #8]
 808a6ce:	68fb      	ldr	r3, [r7, #12]
 808a6d0:	43db      	mvns	r3, r3
 808a6d2:	4916      	ldr	r1, [pc, #88]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6d4:	4013      	ands	r3, r2
 808a6d6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 808a6d8:	4b14      	ldr	r3, [pc, #80]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6da:	68da      	ldr	r2, [r3, #12]
 808a6dc:	68fb      	ldr	r3, [r7, #12]
 808a6de:	43db      	mvns	r3, r3
 808a6e0:	4912      	ldr	r1, [pc, #72]	; (808a72c <HAL_GPIO_DeInit+0x210>)
 808a6e2:	4013      	ands	r3, r2
 808a6e4:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 808a6e6:	697b      	ldr	r3, [r7, #20]
 808a6e8:	3301      	adds	r3, #1
 808a6ea:	617b      	str	r3, [r7, #20]
 808a6ec:	697b      	ldr	r3, [r7, #20]
 808a6ee:	2b0f      	cmp	r3, #15
 808a6f0:	f67f af22 	bls.w	808a538 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 808a6f4:	bf00      	nop
 808a6f6:	371c      	adds	r7, #28
 808a6f8:	46bd      	mov	sp, r7
 808a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a6fe:	4770      	bx	lr
 808a700:	40013800 	.word	0x40013800
 808a704:	40020000 	.word	0x40020000
 808a708:	40020400 	.word	0x40020400
 808a70c:	40020800 	.word	0x40020800
 808a710:	40020c00 	.word	0x40020c00
 808a714:	40021000 	.word	0x40021000
 808a718:	40021400 	.word	0x40021400
 808a71c:	40021800 	.word	0x40021800
 808a720:	40021c00 	.word	0x40021c00
 808a724:	40022000 	.word	0x40022000
 808a728:	40022400 	.word	0x40022400
 808a72c:	40013c00 	.word	0x40013c00

0808a730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 808a730:	b480      	push	{r7}
 808a732:	b085      	sub	sp, #20
 808a734:	af00      	add	r7, sp, #0
 808a736:	6078      	str	r0, [r7, #4]
 808a738:	460b      	mov	r3, r1
 808a73a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 808a73c:	687b      	ldr	r3, [r7, #4]
 808a73e:	691a      	ldr	r2, [r3, #16]
 808a740:	887b      	ldrh	r3, [r7, #2]
 808a742:	4013      	ands	r3, r2
 808a744:	2b00      	cmp	r3, #0
 808a746:	d002      	beq.n	808a74e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 808a748:	2301      	movs	r3, #1
 808a74a:	73fb      	strb	r3, [r7, #15]
 808a74c:	e001      	b.n	808a752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 808a74e:	2300      	movs	r3, #0
 808a750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 808a752:	7bfb      	ldrb	r3, [r7, #15]
}
 808a754:	4618      	mov	r0, r3
 808a756:	3714      	adds	r7, #20
 808a758:	46bd      	mov	sp, r7
 808a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a75e:	4770      	bx	lr

0808a760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 808a760:	b480      	push	{r7}
 808a762:	b083      	sub	sp, #12
 808a764:	af00      	add	r7, sp, #0
 808a766:	6078      	str	r0, [r7, #4]
 808a768:	460b      	mov	r3, r1
 808a76a:	807b      	strh	r3, [r7, #2]
 808a76c:	4613      	mov	r3, r2
 808a76e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 808a770:	787b      	ldrb	r3, [r7, #1]
 808a772:	2b00      	cmp	r3, #0
 808a774:	d003      	beq.n	808a77e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 808a776:	887a      	ldrh	r2, [r7, #2]
 808a778:	687b      	ldr	r3, [r7, #4]
 808a77a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 808a77c:	e003      	b.n	808a786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 808a77e:	887b      	ldrh	r3, [r7, #2]
 808a780:	041a      	lsls	r2, r3, #16
 808a782:	687b      	ldr	r3, [r7, #4]
 808a784:	619a      	str	r2, [r3, #24]
}
 808a786:	bf00      	nop
 808a788:	370c      	adds	r7, #12
 808a78a:	46bd      	mov	sp, r7
 808a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a790:	4770      	bx	lr
	...

0808a794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 808a794:	b580      	push	{r7, lr}
 808a796:	b082      	sub	sp, #8
 808a798:	af00      	add	r7, sp, #0
 808a79a:	4603      	mov	r3, r0
 808a79c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 808a79e:	4b08      	ldr	r3, [pc, #32]	; (808a7c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 808a7a0:	695a      	ldr	r2, [r3, #20]
 808a7a2:	88fb      	ldrh	r3, [r7, #6]
 808a7a4:	4013      	ands	r3, r2
 808a7a6:	2b00      	cmp	r3, #0
 808a7a8:	d006      	beq.n	808a7b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 808a7aa:	4a05      	ldr	r2, [pc, #20]	; (808a7c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 808a7ac:	88fb      	ldrh	r3, [r7, #6]
 808a7ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 808a7b0:	88fb      	ldrh	r3, [r7, #6]
 808a7b2:	4618      	mov	r0, r3
 808a7b4:	f011 f926 	bl	809ba04 <HAL_GPIO_EXTI_Callback>
  }
}
 808a7b8:	bf00      	nop
 808a7ba:	3708      	adds	r7, #8
 808a7bc:	46bd      	mov	sp, r7
 808a7be:	bd80      	pop	{r7, pc}
 808a7c0:	40013c00 	.word	0x40013c00

0808a7c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 808a7c4:	b580      	push	{r7, lr}
 808a7c6:	b082      	sub	sp, #8
 808a7c8:	af00      	add	r7, sp, #0
 808a7ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 808a7cc:	687b      	ldr	r3, [r7, #4]
 808a7ce:	2b00      	cmp	r3, #0
 808a7d0:	d101      	bne.n	808a7d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 808a7d2:	2301      	movs	r3, #1
 808a7d4:	e07f      	b.n	808a8d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 808a7d6:	687b      	ldr	r3, [r7, #4]
 808a7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808a7dc:	b2db      	uxtb	r3, r3
 808a7de:	2b00      	cmp	r3, #0
 808a7e0:	d106      	bne.n	808a7f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 808a7e2:	687b      	ldr	r3, [r7, #4]
 808a7e4:	2200      	movs	r2, #0
 808a7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 808a7ea:	6878      	ldr	r0, [r7, #4]
 808a7ec:	f000 f8a9 	bl	808a942 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 808a7f0:	687b      	ldr	r3, [r7, #4]
 808a7f2:	2224      	movs	r2, #36	; 0x24
 808a7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 808a7f8:	687b      	ldr	r3, [r7, #4]
 808a7fa:	681b      	ldr	r3, [r3, #0]
 808a7fc:	681a      	ldr	r2, [r3, #0]
 808a7fe:	687b      	ldr	r3, [r7, #4]
 808a800:	681b      	ldr	r3, [r3, #0]
 808a802:	f022 0201 	bic.w	r2, r2, #1
 808a806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 808a808:	687b      	ldr	r3, [r7, #4]
 808a80a:	685a      	ldr	r2, [r3, #4]
 808a80c:	687b      	ldr	r3, [r7, #4]
 808a80e:	681b      	ldr	r3, [r3, #0]
 808a810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 808a814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 808a816:	687b      	ldr	r3, [r7, #4]
 808a818:	681b      	ldr	r3, [r3, #0]
 808a81a:	689a      	ldr	r2, [r3, #8]
 808a81c:	687b      	ldr	r3, [r7, #4]
 808a81e:	681b      	ldr	r3, [r3, #0]
 808a820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808a824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 808a826:	687b      	ldr	r3, [r7, #4]
 808a828:	68db      	ldr	r3, [r3, #12]
 808a82a:	2b01      	cmp	r3, #1
 808a82c:	d107      	bne.n	808a83e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 808a82e:	687b      	ldr	r3, [r7, #4]
 808a830:	689a      	ldr	r2, [r3, #8]
 808a832:	687b      	ldr	r3, [r7, #4]
 808a834:	681b      	ldr	r3, [r3, #0]
 808a836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808a83a:	609a      	str	r2, [r3, #8]
 808a83c:	e006      	b.n	808a84c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 808a83e:	687b      	ldr	r3, [r7, #4]
 808a840:	689a      	ldr	r2, [r3, #8]
 808a842:	687b      	ldr	r3, [r7, #4]
 808a844:	681b      	ldr	r3, [r3, #0]
 808a846:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 808a84a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 808a84c:	687b      	ldr	r3, [r7, #4]
 808a84e:	68db      	ldr	r3, [r3, #12]
 808a850:	2b02      	cmp	r3, #2
 808a852:	d104      	bne.n	808a85e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 808a854:	687b      	ldr	r3, [r7, #4]
 808a856:	681b      	ldr	r3, [r3, #0]
 808a858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 808a85c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 808a85e:	687b      	ldr	r3, [r7, #4]
 808a860:	681b      	ldr	r3, [r3, #0]
 808a862:	6859      	ldr	r1, [r3, #4]
 808a864:	687b      	ldr	r3, [r7, #4]
 808a866:	681a      	ldr	r2, [r3, #0]
 808a868:	4b1d      	ldr	r3, [pc, #116]	; (808a8e0 <HAL_I2C_Init+0x11c>)
 808a86a:	430b      	orrs	r3, r1
 808a86c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 808a86e:	687b      	ldr	r3, [r7, #4]
 808a870:	681b      	ldr	r3, [r3, #0]
 808a872:	68da      	ldr	r2, [r3, #12]
 808a874:	687b      	ldr	r3, [r7, #4]
 808a876:	681b      	ldr	r3, [r3, #0]
 808a878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808a87c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 808a87e:	687b      	ldr	r3, [r7, #4]
 808a880:	691a      	ldr	r2, [r3, #16]
 808a882:	687b      	ldr	r3, [r7, #4]
 808a884:	695b      	ldr	r3, [r3, #20]
 808a886:	ea42 0103 	orr.w	r1, r2, r3
 808a88a:	687b      	ldr	r3, [r7, #4]
 808a88c:	699b      	ldr	r3, [r3, #24]
 808a88e:	021a      	lsls	r2, r3, #8
 808a890:	687b      	ldr	r3, [r7, #4]
 808a892:	681b      	ldr	r3, [r3, #0]
 808a894:	430a      	orrs	r2, r1
 808a896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 808a898:	687b      	ldr	r3, [r7, #4]
 808a89a:	69d9      	ldr	r1, [r3, #28]
 808a89c:	687b      	ldr	r3, [r7, #4]
 808a89e:	6a1a      	ldr	r2, [r3, #32]
 808a8a0:	687b      	ldr	r3, [r7, #4]
 808a8a2:	681b      	ldr	r3, [r3, #0]
 808a8a4:	430a      	orrs	r2, r1
 808a8a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 808a8a8:	687b      	ldr	r3, [r7, #4]
 808a8aa:	681b      	ldr	r3, [r3, #0]
 808a8ac:	681a      	ldr	r2, [r3, #0]
 808a8ae:	687b      	ldr	r3, [r7, #4]
 808a8b0:	681b      	ldr	r3, [r3, #0]
 808a8b2:	f042 0201 	orr.w	r2, r2, #1
 808a8b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 808a8b8:	687b      	ldr	r3, [r7, #4]
 808a8ba:	2200      	movs	r2, #0
 808a8bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 808a8be:	687b      	ldr	r3, [r7, #4]
 808a8c0:	2220      	movs	r2, #32
 808a8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 808a8c6:	687b      	ldr	r3, [r7, #4]
 808a8c8:	2200      	movs	r2, #0
 808a8ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 808a8cc:	687b      	ldr	r3, [r7, #4]
 808a8ce:	2200      	movs	r2, #0
 808a8d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 808a8d4:	2300      	movs	r3, #0
}
 808a8d6:	4618      	mov	r0, r3
 808a8d8:	3708      	adds	r7, #8
 808a8da:	46bd      	mov	sp, r7
 808a8dc:	bd80      	pop	{r7, pc}
 808a8de:	bf00      	nop
 808a8e0:	02008000 	.word	0x02008000

0808a8e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 808a8e4:	b580      	push	{r7, lr}
 808a8e6:	b082      	sub	sp, #8
 808a8e8:	af00      	add	r7, sp, #0
 808a8ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 808a8ec:	687b      	ldr	r3, [r7, #4]
 808a8ee:	2b00      	cmp	r3, #0
 808a8f0:	d101      	bne.n	808a8f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 808a8f2:	2301      	movs	r3, #1
 808a8f4:	e021      	b.n	808a93a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 808a8f6:	687b      	ldr	r3, [r7, #4]
 808a8f8:	2224      	movs	r2, #36	; 0x24
 808a8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 808a8fe:	687b      	ldr	r3, [r7, #4]
 808a900:	681b      	ldr	r3, [r3, #0]
 808a902:	681a      	ldr	r2, [r3, #0]
 808a904:	687b      	ldr	r3, [r7, #4]
 808a906:	681b      	ldr	r3, [r3, #0]
 808a908:	f022 0201 	bic.w	r2, r2, #1
 808a90c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 808a90e:	6878      	ldr	r0, [r7, #4]
 808a910:	f000 f821 	bl	808a956 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 808a914:	687b      	ldr	r3, [r7, #4]
 808a916:	2200      	movs	r2, #0
 808a918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 808a91a:	687b      	ldr	r3, [r7, #4]
 808a91c:	2200      	movs	r2, #0
 808a91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 808a922:	687b      	ldr	r3, [r7, #4]
 808a924:	2200      	movs	r2, #0
 808a926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 808a928:	687b      	ldr	r3, [r7, #4]
 808a92a:	2200      	movs	r2, #0
 808a92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 808a930:	687b      	ldr	r3, [r7, #4]
 808a932:	2200      	movs	r2, #0
 808a934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 808a938:	2300      	movs	r3, #0
}
 808a93a:	4618      	mov	r0, r3
 808a93c:	3708      	adds	r7, #8
 808a93e:	46bd      	mov	sp, r7
 808a940:	bd80      	pop	{r7, pc}

0808a942 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 808a942:	b480      	push	{r7}
 808a944:	b083      	sub	sp, #12
 808a946:	af00      	add	r7, sp, #0
 808a948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 808a94a:	bf00      	nop
 808a94c:	370c      	adds	r7, #12
 808a94e:	46bd      	mov	sp, r7
 808a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a954:	4770      	bx	lr

0808a956 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 808a956:	b480      	push	{r7}
 808a958:	b083      	sub	sp, #12
 808a95a:	af00      	add	r7, sp, #0
 808a95c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 808a95e:	bf00      	nop
 808a960:	370c      	adds	r7, #12
 808a962:	46bd      	mov	sp, r7
 808a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a968:	4770      	bx	lr
	...

0808a96c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 808a96c:	b580      	push	{r7, lr}
 808a96e:	b088      	sub	sp, #32
 808a970:	af02      	add	r7, sp, #8
 808a972:	60f8      	str	r0, [r7, #12]
 808a974:	4608      	mov	r0, r1
 808a976:	4611      	mov	r1, r2
 808a978:	461a      	mov	r2, r3
 808a97a:	4603      	mov	r3, r0
 808a97c:	817b      	strh	r3, [r7, #10]
 808a97e:	460b      	mov	r3, r1
 808a980:	813b      	strh	r3, [r7, #8]
 808a982:	4613      	mov	r3, r2
 808a984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 808a986:	2300      	movs	r3, #0
 808a988:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 808a98a:	68fb      	ldr	r3, [r7, #12]
 808a98c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808a990:	b2db      	uxtb	r3, r3
 808a992:	2b20      	cmp	r3, #32
 808a994:	f040 8109 	bne.w	808abaa <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 808a998:	6a3b      	ldr	r3, [r7, #32]
 808a99a:	2b00      	cmp	r3, #0
 808a99c:	d002      	beq.n	808a9a4 <HAL_I2C_Mem_Write+0x38>
 808a99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808a9a0:	2b00      	cmp	r3, #0
 808a9a2:	d101      	bne.n	808a9a8 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 808a9a4:	2301      	movs	r3, #1
 808a9a6:	e101      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 808a9a8:	68fb      	ldr	r3, [r7, #12]
 808a9aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808a9ae:	2b01      	cmp	r3, #1
 808a9b0:	d101      	bne.n	808a9b6 <HAL_I2C_Mem_Write+0x4a>
 808a9b2:	2302      	movs	r3, #2
 808a9b4:	e0fa      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
 808a9b6:	68fb      	ldr	r3, [r7, #12]
 808a9b8:	2201      	movs	r2, #1
 808a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 808a9be:	f7fe fbcf 	bl	8089160 <HAL_GetTick>
 808a9c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 808a9c4:	697b      	ldr	r3, [r7, #20]
 808a9c6:	9300      	str	r3, [sp, #0]
 808a9c8:	2319      	movs	r3, #25
 808a9ca:	2201      	movs	r2, #1
 808a9cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 808a9d0:	68f8      	ldr	r0, [r7, #12]
 808a9d2:	f000 fb09 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808a9d6:	4603      	mov	r3, r0
 808a9d8:	2b00      	cmp	r3, #0
 808a9da:	d001      	beq.n	808a9e0 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 808a9dc:	2303      	movs	r3, #3
 808a9de:	e0e5      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 808a9e0:	68fb      	ldr	r3, [r7, #12]
 808a9e2:	2221      	movs	r2, #33	; 0x21
 808a9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 808a9e8:	68fb      	ldr	r3, [r7, #12]
 808a9ea:	2240      	movs	r2, #64	; 0x40
 808a9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 808a9f0:	68fb      	ldr	r3, [r7, #12]
 808a9f2:	2200      	movs	r2, #0
 808a9f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 808a9f6:	68fb      	ldr	r3, [r7, #12]
 808a9f8:	6a3a      	ldr	r2, [r7, #32]
 808a9fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 808a9fc:	68fb      	ldr	r3, [r7, #12]
 808a9fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 808aa00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 808aa02:	68fb      	ldr	r3, [r7, #12]
 808aa04:	2200      	movs	r2, #0
 808aa06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 808aa08:	88f8      	ldrh	r0, [r7, #6]
 808aa0a:	893a      	ldrh	r2, [r7, #8]
 808aa0c:	8979      	ldrh	r1, [r7, #10]
 808aa0e:	697b      	ldr	r3, [r7, #20]
 808aa10:	9301      	str	r3, [sp, #4]
 808aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808aa14:	9300      	str	r3, [sp, #0]
 808aa16:	4603      	mov	r3, r0
 808aa18:	68f8      	ldr	r0, [r7, #12]
 808aa1a:	f000 fa01 	bl	808ae20 <I2C_RequestMemoryWrite>
 808aa1e:	4603      	mov	r3, r0
 808aa20:	2b00      	cmp	r3, #0
 808aa22:	d00f      	beq.n	808aa44 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808aa24:	68fb      	ldr	r3, [r7, #12]
 808aa26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808aa28:	2b04      	cmp	r3, #4
 808aa2a:	d105      	bne.n	808aa38 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808aa2c:	68fb      	ldr	r3, [r7, #12]
 808aa2e:	2200      	movs	r2, #0
 808aa30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 808aa34:	2301      	movs	r3, #1
 808aa36:	e0b9      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808aa38:	68fb      	ldr	r3, [r7, #12]
 808aa3a:	2200      	movs	r2, #0
 808aa3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 808aa40:	2303      	movs	r3, #3
 808aa42:	e0b3      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 808aa44:	68fb      	ldr	r3, [r7, #12]
 808aa46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808aa48:	b29b      	uxth	r3, r3
 808aa4a:	2bff      	cmp	r3, #255	; 0xff
 808aa4c:	d90e      	bls.n	808aa6c <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 808aa4e:	68fb      	ldr	r3, [r7, #12]
 808aa50:	22ff      	movs	r2, #255	; 0xff
 808aa52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 808aa54:	68fb      	ldr	r3, [r7, #12]
 808aa56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808aa58:	b2da      	uxtb	r2, r3
 808aa5a:	8979      	ldrh	r1, [r7, #10]
 808aa5c:	2300      	movs	r3, #0
 808aa5e:	9300      	str	r3, [sp, #0]
 808aa60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808aa64:	68f8      	ldr	r0, [r7, #12]
 808aa66:	f000 fbd3 	bl	808b210 <I2C_TransferConfig>
 808aa6a:	e00f      	b.n	808aa8c <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 808aa6c:	68fb      	ldr	r3, [r7, #12]
 808aa6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808aa70:	b29a      	uxth	r2, r3
 808aa72:	68fb      	ldr	r3, [r7, #12]
 808aa74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 808aa76:	68fb      	ldr	r3, [r7, #12]
 808aa78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808aa7a:	b2da      	uxtb	r2, r3
 808aa7c:	8979      	ldrh	r1, [r7, #10]
 808aa7e:	2300      	movs	r3, #0
 808aa80:	9300      	str	r3, [sp, #0]
 808aa82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 808aa86:	68f8      	ldr	r0, [r7, #12]
 808aa88:	f000 fbc2 	bl	808b210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 808aa8c:	697a      	ldr	r2, [r7, #20]
 808aa8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 808aa90:	68f8      	ldr	r0, [r7, #12]
 808aa92:	f000 fae3 	bl	808b05c <I2C_WaitOnTXISFlagUntilTimeout>
 808aa96:	4603      	mov	r3, r0
 808aa98:	2b00      	cmp	r3, #0
 808aa9a:	d007      	beq.n	808aaac <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808aa9c:	68fb      	ldr	r3, [r7, #12]
 808aa9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808aaa0:	2b04      	cmp	r3, #4
 808aaa2:	d101      	bne.n	808aaa8 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 808aaa4:	2301      	movs	r3, #1
 808aaa6:	e081      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 808aaa8:	2303      	movs	r3, #3
 808aaaa:	e07f      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 808aaac:	68fb      	ldr	r3, [r7, #12]
 808aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808aab0:	1c59      	adds	r1, r3, #1
 808aab2:	68fa      	ldr	r2, [r7, #12]
 808aab4:	6251      	str	r1, [r2, #36]	; 0x24
 808aab6:	781a      	ldrb	r2, [r3, #0]
 808aab8:	68fb      	ldr	r3, [r7, #12]
 808aaba:	681b      	ldr	r3, [r3, #0]
 808aabc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 808aabe:	68fb      	ldr	r3, [r7, #12]
 808aac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808aac2:	b29b      	uxth	r3, r3
 808aac4:	3b01      	subs	r3, #1
 808aac6:	b29a      	uxth	r2, r3
 808aac8:	68fb      	ldr	r3, [r7, #12]
 808aaca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 808aacc:	68fb      	ldr	r3, [r7, #12]
 808aace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808aad0:	3b01      	subs	r3, #1
 808aad2:	b29a      	uxth	r2, r3
 808aad4:	68fb      	ldr	r3, [r7, #12]
 808aad6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 808aad8:	68fb      	ldr	r3, [r7, #12]
 808aada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808aadc:	2b00      	cmp	r3, #0
 808aade:	d135      	bne.n	808ab4c <HAL_I2C_Mem_Write+0x1e0>
 808aae0:	68fb      	ldr	r3, [r7, #12]
 808aae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808aae4:	b29b      	uxth	r3, r3
 808aae6:	2b00      	cmp	r3, #0
 808aae8:	d030      	beq.n	808ab4c <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 808aaea:	697b      	ldr	r3, [r7, #20]
 808aaec:	9300      	str	r3, [sp, #0]
 808aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808aaf0:	2200      	movs	r2, #0
 808aaf2:	2180      	movs	r1, #128	; 0x80
 808aaf4:	68f8      	ldr	r0, [r7, #12]
 808aaf6:	f000 fa77 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808aafa:	4603      	mov	r3, r0
 808aafc:	2b00      	cmp	r3, #0
 808aafe:	d001      	beq.n	808ab04 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 808ab00:	2303      	movs	r3, #3
 808ab02:	e053      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 808ab04:	68fb      	ldr	r3, [r7, #12]
 808ab06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ab08:	b29b      	uxth	r3, r3
 808ab0a:	2bff      	cmp	r3, #255	; 0xff
 808ab0c:	d90e      	bls.n	808ab2c <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 808ab0e:	68fb      	ldr	r3, [r7, #12]
 808ab10:	22ff      	movs	r2, #255	; 0xff
 808ab12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 808ab14:	68fb      	ldr	r3, [r7, #12]
 808ab16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ab18:	b2da      	uxtb	r2, r3
 808ab1a:	8979      	ldrh	r1, [r7, #10]
 808ab1c:	2300      	movs	r3, #0
 808ab1e:	9300      	str	r3, [sp, #0]
 808ab20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808ab24:	68f8      	ldr	r0, [r7, #12]
 808ab26:	f000 fb73 	bl	808b210 <I2C_TransferConfig>
 808ab2a:	e00f      	b.n	808ab4c <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 808ab2c:	68fb      	ldr	r3, [r7, #12]
 808ab2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ab30:	b29a      	uxth	r2, r3
 808ab32:	68fb      	ldr	r3, [r7, #12]
 808ab34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 808ab36:	68fb      	ldr	r3, [r7, #12]
 808ab38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ab3a:	b2da      	uxtb	r2, r3
 808ab3c:	8979      	ldrh	r1, [r7, #10]
 808ab3e:	2300      	movs	r3, #0
 808ab40:	9300      	str	r3, [sp, #0]
 808ab42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 808ab46:	68f8      	ldr	r0, [r7, #12]
 808ab48:	f000 fb62 	bl	808b210 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 808ab4c:	68fb      	ldr	r3, [r7, #12]
 808ab4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ab50:	b29b      	uxth	r3, r3
 808ab52:	2b00      	cmp	r3, #0
 808ab54:	d19a      	bne.n	808aa8c <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 808ab56:	697a      	ldr	r2, [r7, #20]
 808ab58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 808ab5a:	68f8      	ldr	r0, [r7, #12]
 808ab5c:	f000 fabe 	bl	808b0dc <I2C_WaitOnSTOPFlagUntilTimeout>
 808ab60:	4603      	mov	r3, r0
 808ab62:	2b00      	cmp	r3, #0
 808ab64:	d007      	beq.n	808ab76 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808ab66:	68fb      	ldr	r3, [r7, #12]
 808ab68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ab6a:	2b04      	cmp	r3, #4
 808ab6c:	d101      	bne.n	808ab72 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 808ab6e:	2301      	movs	r3, #1
 808ab70:	e01c      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 808ab72:	2303      	movs	r3, #3
 808ab74:	e01a      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 808ab76:	68fb      	ldr	r3, [r7, #12]
 808ab78:	681b      	ldr	r3, [r3, #0]
 808ab7a:	2220      	movs	r2, #32
 808ab7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 808ab7e:	68fb      	ldr	r3, [r7, #12]
 808ab80:	681b      	ldr	r3, [r3, #0]
 808ab82:	6859      	ldr	r1, [r3, #4]
 808ab84:	68fb      	ldr	r3, [r7, #12]
 808ab86:	681a      	ldr	r2, [r3, #0]
 808ab88:	4b0a      	ldr	r3, [pc, #40]	; (808abb4 <HAL_I2C_Mem_Write+0x248>)
 808ab8a:	400b      	ands	r3, r1
 808ab8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 808ab8e:	68fb      	ldr	r3, [r7, #12]
 808ab90:	2220      	movs	r2, #32
 808ab92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 808ab96:	68fb      	ldr	r3, [r7, #12]
 808ab98:	2200      	movs	r2, #0
 808ab9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 808ab9e:	68fb      	ldr	r3, [r7, #12]
 808aba0:	2200      	movs	r2, #0
 808aba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 808aba6:	2300      	movs	r3, #0
 808aba8:	e000      	b.n	808abac <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 808abaa:	2302      	movs	r3, #2
  }
}
 808abac:	4618      	mov	r0, r3
 808abae:	3718      	adds	r7, #24
 808abb0:	46bd      	mov	sp, r7
 808abb2:	bd80      	pop	{r7, pc}
 808abb4:	fe00e800 	.word	0xfe00e800

0808abb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 808abb8:	b580      	push	{r7, lr}
 808abba:	b088      	sub	sp, #32
 808abbc:	af02      	add	r7, sp, #8
 808abbe:	60f8      	str	r0, [r7, #12]
 808abc0:	4608      	mov	r0, r1
 808abc2:	4611      	mov	r1, r2
 808abc4:	461a      	mov	r2, r3
 808abc6:	4603      	mov	r3, r0
 808abc8:	817b      	strh	r3, [r7, #10]
 808abca:	460b      	mov	r3, r1
 808abcc:	813b      	strh	r3, [r7, #8]
 808abce:	4613      	mov	r3, r2
 808abd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 808abd2:	2300      	movs	r3, #0
 808abd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 808abd6:	68fb      	ldr	r3, [r7, #12]
 808abd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808abdc:	b2db      	uxtb	r3, r3
 808abde:	2b20      	cmp	r3, #32
 808abe0:	f040 8107 	bne.w	808adf2 <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 808abe4:	6a3b      	ldr	r3, [r7, #32]
 808abe6:	2b00      	cmp	r3, #0
 808abe8:	d002      	beq.n	808abf0 <HAL_I2C_Mem_Read+0x38>
 808abea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 808abec:	2b00      	cmp	r3, #0
 808abee:	d101      	bne.n	808abf4 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 808abf0:	2301      	movs	r3, #1
 808abf2:	e0ff      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 808abf4:	68fb      	ldr	r3, [r7, #12]
 808abf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808abfa:	2b01      	cmp	r3, #1
 808abfc:	d101      	bne.n	808ac02 <HAL_I2C_Mem_Read+0x4a>
 808abfe:	2302      	movs	r3, #2
 808ac00:	e0f8      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
 808ac02:	68fb      	ldr	r3, [r7, #12]
 808ac04:	2201      	movs	r2, #1
 808ac06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 808ac0a:	f7fe faa9 	bl	8089160 <HAL_GetTick>
 808ac0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 808ac10:	697b      	ldr	r3, [r7, #20]
 808ac12:	9300      	str	r3, [sp, #0]
 808ac14:	2319      	movs	r3, #25
 808ac16:	2201      	movs	r2, #1
 808ac18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 808ac1c:	68f8      	ldr	r0, [r7, #12]
 808ac1e:	f000 f9e3 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808ac22:	4603      	mov	r3, r0
 808ac24:	2b00      	cmp	r3, #0
 808ac26:	d001      	beq.n	808ac2c <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 808ac28:	2303      	movs	r3, #3
 808ac2a:	e0e3      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 808ac2c:	68fb      	ldr	r3, [r7, #12]
 808ac2e:	2222      	movs	r2, #34	; 0x22
 808ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 808ac34:	68fb      	ldr	r3, [r7, #12]
 808ac36:	2240      	movs	r2, #64	; 0x40
 808ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 808ac3c:	68fb      	ldr	r3, [r7, #12]
 808ac3e:	2200      	movs	r2, #0
 808ac40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 808ac42:	68fb      	ldr	r3, [r7, #12]
 808ac44:	6a3a      	ldr	r2, [r7, #32]
 808ac46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 808ac48:	68fb      	ldr	r3, [r7, #12]
 808ac4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 808ac4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 808ac4e:	68fb      	ldr	r3, [r7, #12]
 808ac50:	2200      	movs	r2, #0
 808ac52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 808ac54:	88f8      	ldrh	r0, [r7, #6]
 808ac56:	893a      	ldrh	r2, [r7, #8]
 808ac58:	8979      	ldrh	r1, [r7, #10]
 808ac5a:	697b      	ldr	r3, [r7, #20]
 808ac5c:	9301      	str	r3, [sp, #4]
 808ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808ac60:	9300      	str	r3, [sp, #0]
 808ac62:	4603      	mov	r3, r0
 808ac64:	68f8      	ldr	r0, [r7, #12]
 808ac66:	f000 f93b 	bl	808aee0 <I2C_RequestMemoryRead>
 808ac6a:	4603      	mov	r3, r0
 808ac6c:	2b00      	cmp	r3, #0
 808ac6e:	d00f      	beq.n	808ac90 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808ac70:	68fb      	ldr	r3, [r7, #12]
 808ac72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ac74:	2b04      	cmp	r3, #4
 808ac76:	d105      	bne.n	808ac84 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808ac78:	68fb      	ldr	r3, [r7, #12]
 808ac7a:	2200      	movs	r2, #0
 808ac7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 808ac80:	2301      	movs	r3, #1
 808ac82:	e0b7      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808ac84:	68fb      	ldr	r3, [r7, #12]
 808ac86:	2200      	movs	r2, #0
 808ac88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 808ac8c:	2303      	movs	r3, #3
 808ac8e:	e0b1      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 808ac90:	68fb      	ldr	r3, [r7, #12]
 808ac92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ac94:	b29b      	uxth	r3, r3
 808ac96:	2bff      	cmp	r3, #255	; 0xff
 808ac98:	d90e      	bls.n	808acb8 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 808ac9a:	68fb      	ldr	r3, [r7, #12]
 808ac9c:	22ff      	movs	r2, #255	; 0xff
 808ac9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 808aca0:	68fb      	ldr	r3, [r7, #12]
 808aca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808aca4:	b2da      	uxtb	r2, r3
 808aca6:	8979      	ldrh	r1, [r7, #10]
 808aca8:	4b54      	ldr	r3, [pc, #336]	; (808adfc <HAL_I2C_Mem_Read+0x244>)
 808acaa:	9300      	str	r3, [sp, #0]
 808acac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808acb0:	68f8      	ldr	r0, [r7, #12]
 808acb2:	f000 faad 	bl	808b210 <I2C_TransferConfig>
 808acb6:	e00f      	b.n	808acd8 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 808acb8:	68fb      	ldr	r3, [r7, #12]
 808acba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808acbc:	b29a      	uxth	r2, r3
 808acbe:	68fb      	ldr	r3, [r7, #12]
 808acc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 808acc2:	68fb      	ldr	r3, [r7, #12]
 808acc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808acc6:	b2da      	uxtb	r2, r3
 808acc8:	8979      	ldrh	r1, [r7, #10]
 808acca:	4b4c      	ldr	r3, [pc, #304]	; (808adfc <HAL_I2C_Mem_Read+0x244>)
 808accc:	9300      	str	r3, [sp, #0]
 808acce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 808acd2:	68f8      	ldr	r0, [r7, #12]
 808acd4:	f000 fa9c 	bl	808b210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 808acd8:	697b      	ldr	r3, [r7, #20]
 808acda:	9300      	str	r3, [sp, #0]
 808acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808acde:	2200      	movs	r2, #0
 808ace0:	2104      	movs	r1, #4
 808ace2:	68f8      	ldr	r0, [r7, #12]
 808ace4:	f000 f980 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808ace8:	4603      	mov	r3, r0
 808acea:	2b00      	cmp	r3, #0
 808acec:	d001      	beq.n	808acf2 <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 808acee:	2303      	movs	r3, #3
 808acf0:	e080      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 808acf2:	68fb      	ldr	r3, [r7, #12]
 808acf4:	681b      	ldr	r3, [r3, #0]
 808acf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 808acf8:	68fb      	ldr	r3, [r7, #12]
 808acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808acfc:	1c59      	adds	r1, r3, #1
 808acfe:	68fa      	ldr	r2, [r7, #12]
 808ad00:	6251      	str	r1, [r2, #36]	; 0x24
 808ad02:	b2c2      	uxtb	r2, r0
 808ad04:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 808ad06:	68fb      	ldr	r3, [r7, #12]
 808ad08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ad0a:	3b01      	subs	r3, #1
 808ad0c:	b29a      	uxth	r2, r3
 808ad0e:	68fb      	ldr	r3, [r7, #12]
 808ad10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 808ad12:	68fb      	ldr	r3, [r7, #12]
 808ad14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ad16:	b29b      	uxth	r3, r3
 808ad18:	3b01      	subs	r3, #1
 808ad1a:	b29a      	uxth	r2, r3
 808ad1c:	68fb      	ldr	r3, [r7, #12]
 808ad1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 808ad20:	68fb      	ldr	r3, [r7, #12]
 808ad22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ad24:	2b00      	cmp	r3, #0
 808ad26:	d135      	bne.n	808ad94 <HAL_I2C_Mem_Read+0x1dc>
 808ad28:	68fb      	ldr	r3, [r7, #12]
 808ad2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ad2c:	b29b      	uxth	r3, r3
 808ad2e:	2b00      	cmp	r3, #0
 808ad30:	d030      	beq.n	808ad94 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 808ad32:	697b      	ldr	r3, [r7, #20]
 808ad34:	9300      	str	r3, [sp, #0]
 808ad36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808ad38:	2200      	movs	r2, #0
 808ad3a:	2180      	movs	r1, #128	; 0x80
 808ad3c:	68f8      	ldr	r0, [r7, #12]
 808ad3e:	f000 f953 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808ad42:	4603      	mov	r3, r0
 808ad44:	2b00      	cmp	r3, #0
 808ad46:	d001      	beq.n	808ad4c <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 808ad48:	2303      	movs	r3, #3
 808ad4a:	e053      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 808ad4c:	68fb      	ldr	r3, [r7, #12]
 808ad4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ad50:	b29b      	uxth	r3, r3
 808ad52:	2bff      	cmp	r3, #255	; 0xff
 808ad54:	d90e      	bls.n	808ad74 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 808ad56:	68fb      	ldr	r3, [r7, #12]
 808ad58:	22ff      	movs	r2, #255	; 0xff
 808ad5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 808ad5c:	68fb      	ldr	r3, [r7, #12]
 808ad5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ad60:	b2da      	uxtb	r2, r3
 808ad62:	8979      	ldrh	r1, [r7, #10]
 808ad64:	2300      	movs	r3, #0
 808ad66:	9300      	str	r3, [sp, #0]
 808ad68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808ad6c:	68f8      	ldr	r0, [r7, #12]
 808ad6e:	f000 fa4f 	bl	808b210 <I2C_TransferConfig>
 808ad72:	e00f      	b.n	808ad94 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 808ad74:	68fb      	ldr	r3, [r7, #12]
 808ad76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ad78:	b29a      	uxth	r2, r3
 808ad7a:	68fb      	ldr	r3, [r7, #12]
 808ad7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 808ad7e:	68fb      	ldr	r3, [r7, #12]
 808ad80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 808ad82:	b2da      	uxtb	r2, r3
 808ad84:	8979      	ldrh	r1, [r7, #10]
 808ad86:	2300      	movs	r3, #0
 808ad88:	9300      	str	r3, [sp, #0]
 808ad8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 808ad8e:	68f8      	ldr	r0, [r7, #12]
 808ad90:	f000 fa3e 	bl	808b210 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 808ad94:	68fb      	ldr	r3, [r7, #12]
 808ad96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 808ad98:	b29b      	uxth	r3, r3
 808ad9a:	2b00      	cmp	r3, #0
 808ad9c:	d19c      	bne.n	808acd8 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 808ad9e:	697a      	ldr	r2, [r7, #20]
 808ada0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 808ada2:	68f8      	ldr	r0, [r7, #12]
 808ada4:	f000 f99a 	bl	808b0dc <I2C_WaitOnSTOPFlagUntilTimeout>
 808ada8:	4603      	mov	r3, r0
 808adaa:	2b00      	cmp	r3, #0
 808adac:	d007      	beq.n	808adbe <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808adae:	68fb      	ldr	r3, [r7, #12]
 808adb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808adb2:	2b04      	cmp	r3, #4
 808adb4:	d101      	bne.n	808adba <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 808adb6:	2301      	movs	r3, #1
 808adb8:	e01c      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 808adba:	2303      	movs	r3, #3
 808adbc:	e01a      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 808adbe:	68fb      	ldr	r3, [r7, #12]
 808adc0:	681b      	ldr	r3, [r3, #0]
 808adc2:	2220      	movs	r2, #32
 808adc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 808adc6:	68fb      	ldr	r3, [r7, #12]
 808adc8:	681b      	ldr	r3, [r3, #0]
 808adca:	6859      	ldr	r1, [r3, #4]
 808adcc:	68fb      	ldr	r3, [r7, #12]
 808adce:	681a      	ldr	r2, [r3, #0]
 808add0:	4b0b      	ldr	r3, [pc, #44]	; (808ae00 <HAL_I2C_Mem_Read+0x248>)
 808add2:	400b      	ands	r3, r1
 808add4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 808add6:	68fb      	ldr	r3, [r7, #12]
 808add8:	2220      	movs	r2, #32
 808adda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 808adde:	68fb      	ldr	r3, [r7, #12]
 808ade0:	2200      	movs	r2, #0
 808ade2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 808ade6:	68fb      	ldr	r3, [r7, #12]
 808ade8:	2200      	movs	r2, #0
 808adea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 808adee:	2300      	movs	r3, #0
 808adf0:	e000      	b.n	808adf4 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 808adf2:	2302      	movs	r3, #2
  }
}
 808adf4:	4618      	mov	r0, r3
 808adf6:	3718      	adds	r7, #24
 808adf8:	46bd      	mov	sp, r7
 808adfa:	bd80      	pop	{r7, pc}
 808adfc:	80002400 	.word	0x80002400
 808ae00:	fe00e800 	.word	0xfe00e800

0808ae04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 808ae04:	b480      	push	{r7}
 808ae06:	b083      	sub	sp, #12
 808ae08:	af00      	add	r7, sp, #0
 808ae0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 808ae0c:	687b      	ldr	r3, [r7, #4]
 808ae0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808ae12:	b2db      	uxtb	r3, r3
}
 808ae14:	4618      	mov	r0, r3
 808ae16:	370c      	adds	r7, #12
 808ae18:	46bd      	mov	sp, r7
 808ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808ae1e:	4770      	bx	lr

0808ae20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 808ae20:	b580      	push	{r7, lr}
 808ae22:	b086      	sub	sp, #24
 808ae24:	af02      	add	r7, sp, #8
 808ae26:	60f8      	str	r0, [r7, #12]
 808ae28:	4608      	mov	r0, r1
 808ae2a:	4611      	mov	r1, r2
 808ae2c:	461a      	mov	r2, r3
 808ae2e:	4603      	mov	r3, r0
 808ae30:	817b      	strh	r3, [r7, #10]
 808ae32:	460b      	mov	r3, r1
 808ae34:	813b      	strh	r3, [r7, #8]
 808ae36:	4613      	mov	r3, r2
 808ae38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 808ae3a:	88fb      	ldrh	r3, [r7, #6]
 808ae3c:	b2da      	uxtb	r2, r3
 808ae3e:	8979      	ldrh	r1, [r7, #10]
 808ae40:	4b26      	ldr	r3, [pc, #152]	; (808aedc <I2C_RequestMemoryWrite+0xbc>)
 808ae42:	9300      	str	r3, [sp, #0]
 808ae44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808ae48:	68f8      	ldr	r0, [r7, #12]
 808ae4a:	f000 f9e1 	bl	808b210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 808ae4e:	69fa      	ldr	r2, [r7, #28]
 808ae50:	69b9      	ldr	r1, [r7, #24]
 808ae52:	68f8      	ldr	r0, [r7, #12]
 808ae54:	f000 f902 	bl	808b05c <I2C_WaitOnTXISFlagUntilTimeout>
 808ae58:	4603      	mov	r3, r0
 808ae5a:	2b00      	cmp	r3, #0
 808ae5c:	d007      	beq.n	808ae6e <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808ae5e:	68fb      	ldr	r3, [r7, #12]
 808ae60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ae62:	2b04      	cmp	r3, #4
 808ae64:	d101      	bne.n	808ae6a <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 808ae66:	2301      	movs	r3, #1
 808ae68:	e034      	b.n	808aed4 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 808ae6a:	2303      	movs	r3, #3
 808ae6c:	e032      	b.n	808aed4 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 808ae6e:	88fb      	ldrh	r3, [r7, #6]
 808ae70:	2b01      	cmp	r3, #1
 808ae72:	d105      	bne.n	808ae80 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 808ae74:	893b      	ldrh	r3, [r7, #8]
 808ae76:	b2da      	uxtb	r2, r3
 808ae78:	68fb      	ldr	r3, [r7, #12]
 808ae7a:	681b      	ldr	r3, [r3, #0]
 808ae7c:	629a      	str	r2, [r3, #40]	; 0x28
 808ae7e:	e01b      	b.n	808aeb8 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 808ae80:	893b      	ldrh	r3, [r7, #8]
 808ae82:	0a1b      	lsrs	r3, r3, #8
 808ae84:	b29b      	uxth	r3, r3
 808ae86:	b2da      	uxtb	r2, r3
 808ae88:	68fb      	ldr	r3, [r7, #12]
 808ae8a:	681b      	ldr	r3, [r3, #0]
 808ae8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 808ae8e:	69fa      	ldr	r2, [r7, #28]
 808ae90:	69b9      	ldr	r1, [r7, #24]
 808ae92:	68f8      	ldr	r0, [r7, #12]
 808ae94:	f000 f8e2 	bl	808b05c <I2C_WaitOnTXISFlagUntilTimeout>
 808ae98:	4603      	mov	r3, r0
 808ae9a:	2b00      	cmp	r3, #0
 808ae9c:	d007      	beq.n	808aeae <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808ae9e:	68fb      	ldr	r3, [r7, #12]
 808aea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808aea2:	2b04      	cmp	r3, #4
 808aea4:	d101      	bne.n	808aeaa <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 808aea6:	2301      	movs	r3, #1
 808aea8:	e014      	b.n	808aed4 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 808aeaa:	2303      	movs	r3, #3
 808aeac:	e012      	b.n	808aed4 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 808aeae:	893b      	ldrh	r3, [r7, #8]
 808aeb0:	b2da      	uxtb	r2, r3
 808aeb2:	68fb      	ldr	r3, [r7, #12]
 808aeb4:	681b      	ldr	r3, [r3, #0]
 808aeb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 808aeb8:	69fb      	ldr	r3, [r7, #28]
 808aeba:	9300      	str	r3, [sp, #0]
 808aebc:	69bb      	ldr	r3, [r7, #24]
 808aebe:	2200      	movs	r2, #0
 808aec0:	2180      	movs	r1, #128	; 0x80
 808aec2:	68f8      	ldr	r0, [r7, #12]
 808aec4:	f000 f890 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808aec8:	4603      	mov	r3, r0
 808aeca:	2b00      	cmp	r3, #0
 808aecc:	d001      	beq.n	808aed2 <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 808aece:	2303      	movs	r3, #3
 808aed0:	e000      	b.n	808aed4 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 808aed2:	2300      	movs	r3, #0
}
 808aed4:	4618      	mov	r0, r3
 808aed6:	3710      	adds	r7, #16
 808aed8:	46bd      	mov	sp, r7
 808aeda:	bd80      	pop	{r7, pc}
 808aedc:	80002000 	.word	0x80002000

0808aee0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 808aee0:	b580      	push	{r7, lr}
 808aee2:	b086      	sub	sp, #24
 808aee4:	af02      	add	r7, sp, #8
 808aee6:	60f8      	str	r0, [r7, #12]
 808aee8:	4608      	mov	r0, r1
 808aeea:	4611      	mov	r1, r2
 808aeec:	461a      	mov	r2, r3
 808aeee:	4603      	mov	r3, r0
 808aef0:	817b      	strh	r3, [r7, #10]
 808aef2:	460b      	mov	r3, r1
 808aef4:	813b      	strh	r3, [r7, #8]
 808aef6:	4613      	mov	r3, r2
 808aef8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 808aefa:	88fb      	ldrh	r3, [r7, #6]
 808aefc:	b2da      	uxtb	r2, r3
 808aefe:	8979      	ldrh	r1, [r7, #10]
 808af00:	4b26      	ldr	r3, [pc, #152]	; (808af9c <I2C_RequestMemoryRead+0xbc>)
 808af02:	9300      	str	r3, [sp, #0]
 808af04:	2300      	movs	r3, #0
 808af06:	68f8      	ldr	r0, [r7, #12]
 808af08:	f000 f982 	bl	808b210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 808af0c:	69fa      	ldr	r2, [r7, #28]
 808af0e:	69b9      	ldr	r1, [r7, #24]
 808af10:	68f8      	ldr	r0, [r7, #12]
 808af12:	f000 f8a3 	bl	808b05c <I2C_WaitOnTXISFlagUntilTimeout>
 808af16:	4603      	mov	r3, r0
 808af18:	2b00      	cmp	r3, #0
 808af1a:	d007      	beq.n	808af2c <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808af1c:	68fb      	ldr	r3, [r7, #12]
 808af1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808af20:	2b04      	cmp	r3, #4
 808af22:	d101      	bne.n	808af28 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 808af24:	2301      	movs	r3, #1
 808af26:	e034      	b.n	808af92 <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 808af28:	2303      	movs	r3, #3
 808af2a:	e032      	b.n	808af92 <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 808af2c:	88fb      	ldrh	r3, [r7, #6]
 808af2e:	2b01      	cmp	r3, #1
 808af30:	d105      	bne.n	808af3e <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 808af32:	893b      	ldrh	r3, [r7, #8]
 808af34:	b2da      	uxtb	r2, r3
 808af36:	68fb      	ldr	r3, [r7, #12]
 808af38:	681b      	ldr	r3, [r3, #0]
 808af3a:	629a      	str	r2, [r3, #40]	; 0x28
 808af3c:	e01b      	b.n	808af76 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 808af3e:	893b      	ldrh	r3, [r7, #8]
 808af40:	0a1b      	lsrs	r3, r3, #8
 808af42:	b29b      	uxth	r3, r3
 808af44:	b2da      	uxtb	r2, r3
 808af46:	68fb      	ldr	r3, [r7, #12]
 808af48:	681b      	ldr	r3, [r3, #0]
 808af4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 808af4c:	69fa      	ldr	r2, [r7, #28]
 808af4e:	69b9      	ldr	r1, [r7, #24]
 808af50:	68f8      	ldr	r0, [r7, #12]
 808af52:	f000 f883 	bl	808b05c <I2C_WaitOnTXISFlagUntilTimeout>
 808af56:	4603      	mov	r3, r0
 808af58:	2b00      	cmp	r3, #0
 808af5a:	d007      	beq.n	808af6c <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 808af5c:	68fb      	ldr	r3, [r7, #12]
 808af5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808af60:	2b04      	cmp	r3, #4
 808af62:	d101      	bne.n	808af68 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 808af64:	2301      	movs	r3, #1
 808af66:	e014      	b.n	808af92 <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 808af68:	2303      	movs	r3, #3
 808af6a:	e012      	b.n	808af92 <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 808af6c:	893b      	ldrh	r3, [r7, #8]
 808af6e:	b2da      	uxtb	r2, r3
 808af70:	68fb      	ldr	r3, [r7, #12]
 808af72:	681b      	ldr	r3, [r3, #0]
 808af74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 808af76:	69fb      	ldr	r3, [r7, #28]
 808af78:	9300      	str	r3, [sp, #0]
 808af7a:	69bb      	ldr	r3, [r7, #24]
 808af7c:	2200      	movs	r2, #0
 808af7e:	2140      	movs	r1, #64	; 0x40
 808af80:	68f8      	ldr	r0, [r7, #12]
 808af82:	f000 f831 	bl	808afe8 <I2C_WaitOnFlagUntilTimeout>
 808af86:	4603      	mov	r3, r0
 808af88:	2b00      	cmp	r3, #0
 808af8a:	d001      	beq.n	808af90 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 808af8c:	2303      	movs	r3, #3
 808af8e:	e000      	b.n	808af92 <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 808af90:	2300      	movs	r3, #0
}
 808af92:	4618      	mov	r0, r3
 808af94:	3710      	adds	r7, #16
 808af96:	46bd      	mov	sp, r7
 808af98:	bd80      	pop	{r7, pc}
 808af9a:	bf00      	nop
 808af9c:	80002000 	.word	0x80002000

0808afa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 808afa0:	b480      	push	{r7}
 808afa2:	b083      	sub	sp, #12
 808afa4:	af00      	add	r7, sp, #0
 808afa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 808afa8:	687b      	ldr	r3, [r7, #4]
 808afaa:	681b      	ldr	r3, [r3, #0]
 808afac:	699b      	ldr	r3, [r3, #24]
 808afae:	f003 0302 	and.w	r3, r3, #2
 808afb2:	2b02      	cmp	r3, #2
 808afb4:	d103      	bne.n	808afbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 808afb6:	687b      	ldr	r3, [r7, #4]
 808afb8:	681b      	ldr	r3, [r3, #0]
 808afba:	2200      	movs	r2, #0
 808afbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 808afbe:	687b      	ldr	r3, [r7, #4]
 808afc0:	681b      	ldr	r3, [r3, #0]
 808afc2:	699b      	ldr	r3, [r3, #24]
 808afc4:	f003 0301 	and.w	r3, r3, #1
 808afc8:	2b01      	cmp	r3, #1
 808afca:	d007      	beq.n	808afdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 808afcc:	687b      	ldr	r3, [r7, #4]
 808afce:	681b      	ldr	r3, [r3, #0]
 808afd0:	699a      	ldr	r2, [r3, #24]
 808afd2:	687b      	ldr	r3, [r7, #4]
 808afd4:	681b      	ldr	r3, [r3, #0]
 808afd6:	f042 0201 	orr.w	r2, r2, #1
 808afda:	619a      	str	r2, [r3, #24]
  }
}
 808afdc:	bf00      	nop
 808afde:	370c      	adds	r7, #12
 808afe0:	46bd      	mov	sp, r7
 808afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 808afe6:	4770      	bx	lr

0808afe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 808afe8:	b580      	push	{r7, lr}
 808afea:	b084      	sub	sp, #16
 808afec:	af00      	add	r7, sp, #0
 808afee:	60f8      	str	r0, [r7, #12]
 808aff0:	60b9      	str	r1, [r7, #8]
 808aff2:	603b      	str	r3, [r7, #0]
 808aff4:	4613      	mov	r3, r2
 808aff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 808aff8:	e01c      	b.n	808b034 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 808affa:	683b      	ldr	r3, [r7, #0]
 808affc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808b000:	d018      	beq.n	808b034 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808b002:	683b      	ldr	r3, [r7, #0]
 808b004:	2b00      	cmp	r3, #0
 808b006:	d007      	beq.n	808b018 <I2C_WaitOnFlagUntilTimeout+0x30>
 808b008:	f7fe f8aa 	bl	8089160 <HAL_GetTick>
 808b00c:	4602      	mov	r2, r0
 808b00e:	69bb      	ldr	r3, [r7, #24]
 808b010:	1ad3      	subs	r3, r2, r3
 808b012:	683a      	ldr	r2, [r7, #0]
 808b014:	429a      	cmp	r2, r3
 808b016:	d20d      	bcs.n	808b034 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 808b018:	68fb      	ldr	r3, [r7, #12]
 808b01a:	2220      	movs	r2, #32
 808b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 808b020:	68fb      	ldr	r3, [r7, #12]
 808b022:	2200      	movs	r2, #0
 808b024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808b028:	68fb      	ldr	r3, [r7, #12]
 808b02a:	2200      	movs	r2, #0
 808b02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 808b030:	2303      	movs	r3, #3
 808b032:	e00f      	b.n	808b054 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 808b034:	68fb      	ldr	r3, [r7, #12]
 808b036:	681b      	ldr	r3, [r3, #0]
 808b038:	699a      	ldr	r2, [r3, #24]
 808b03a:	68bb      	ldr	r3, [r7, #8]
 808b03c:	4013      	ands	r3, r2
 808b03e:	68ba      	ldr	r2, [r7, #8]
 808b040:	429a      	cmp	r2, r3
 808b042:	bf0c      	ite	eq
 808b044:	2301      	moveq	r3, #1
 808b046:	2300      	movne	r3, #0
 808b048:	b2db      	uxtb	r3, r3
 808b04a:	461a      	mov	r2, r3
 808b04c:	79fb      	ldrb	r3, [r7, #7]
 808b04e:	429a      	cmp	r2, r3
 808b050:	d0d3      	beq.n	808affa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 808b052:	2300      	movs	r3, #0
}
 808b054:	4618      	mov	r0, r3
 808b056:	3710      	adds	r7, #16
 808b058:	46bd      	mov	sp, r7
 808b05a:	bd80      	pop	{r7, pc}

0808b05c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 808b05c:	b580      	push	{r7, lr}
 808b05e:	b084      	sub	sp, #16
 808b060:	af00      	add	r7, sp, #0
 808b062:	60f8      	str	r0, [r7, #12]
 808b064:	60b9      	str	r1, [r7, #8]
 808b066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 808b068:	e02c      	b.n	808b0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 808b06a:	687a      	ldr	r2, [r7, #4]
 808b06c:	68b9      	ldr	r1, [r7, #8]
 808b06e:	68f8      	ldr	r0, [r7, #12]
 808b070:	f000 f870 	bl	808b154 <I2C_IsAcknowledgeFailed>
 808b074:	4603      	mov	r3, r0
 808b076:	2b00      	cmp	r3, #0
 808b078:	d001      	beq.n	808b07e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 808b07a:	2301      	movs	r3, #1
 808b07c:	e02a      	b.n	808b0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 808b07e:	68bb      	ldr	r3, [r7, #8]
 808b080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808b084:	d01e      	beq.n	808b0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808b086:	68bb      	ldr	r3, [r7, #8]
 808b088:	2b00      	cmp	r3, #0
 808b08a:	d007      	beq.n	808b09c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 808b08c:	f7fe f868 	bl	8089160 <HAL_GetTick>
 808b090:	4602      	mov	r2, r0
 808b092:	687b      	ldr	r3, [r7, #4]
 808b094:	1ad3      	subs	r3, r2, r3
 808b096:	68ba      	ldr	r2, [r7, #8]
 808b098:	429a      	cmp	r2, r3
 808b09a:	d213      	bcs.n	808b0c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 808b09c:	68fb      	ldr	r3, [r7, #12]
 808b09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808b0a0:	f043 0220 	orr.w	r2, r3, #32
 808b0a4:	68fb      	ldr	r3, [r7, #12]
 808b0a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 808b0a8:	68fb      	ldr	r3, [r7, #12]
 808b0aa:	2220      	movs	r2, #32
 808b0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 808b0b0:	68fb      	ldr	r3, [r7, #12]
 808b0b2:	2200      	movs	r2, #0
 808b0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 808b0b8:	68fb      	ldr	r3, [r7, #12]
 808b0ba:	2200      	movs	r2, #0
 808b0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 808b0c0:	2303      	movs	r3, #3
 808b0c2:	e007      	b.n	808b0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 808b0c4:	68fb      	ldr	r3, [r7, #12]
 808b0c6:	681b      	ldr	r3, [r3, #0]
 808b0c8:	699b      	ldr	r3, [r3, #24]
 808b0ca:	f003 0302 	and.w	r3, r3, #2
 808b0ce:	2b02      	cmp	r3, #2
 808b0d0:	d1cb      	bne.n	808b06a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 808b0d2:	2300      	movs	r3, #0
}
 808b0d4:	4618      	mov	r0, r3
 808b0d6:	3710      	adds	r7, #16
 808b0d8:	46bd      	mov	sp, r7
 808b0da:	bd80      	pop	{r7, pc}

0808b0dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 808b0dc:	b580      	push	{r7, lr}
 808b0de:	b084      	sub	sp, #16
 808b0e0:	af00      	add	r7, sp, #0
 808b0e2:	60f8      	str	r0, [r7, #12]
 808b0e4:	60b9      	str	r1, [r7, #8]
 808b0e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 808b0e8:	e028      	b.n	808b13c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 808b0ea:	687a      	ldr	r2, [r7, #4]
 808b0ec:	68b9      	ldr	r1, [r7, #8]
 808b0ee:	68f8      	ldr	r0, [r7, #12]
 808b0f0:	f000 f830 	bl	808b154 <I2C_IsAcknowledgeFailed>
 808b0f4:	4603      	mov	r3, r0
 808b0f6:	2b00      	cmp	r3, #0
 808b0f8:	d001      	beq.n	808b0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 808b0fa:	2301      	movs	r3, #1
 808b0fc:	e026      	b.n	808b14c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808b0fe:	68bb      	ldr	r3, [r7, #8]
 808b100:	2b00      	cmp	r3, #0
 808b102:	d007      	beq.n	808b114 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 808b104:	f7fe f82c 	bl	8089160 <HAL_GetTick>
 808b108:	4602      	mov	r2, r0
 808b10a:	687b      	ldr	r3, [r7, #4]
 808b10c:	1ad3      	subs	r3, r2, r3
 808b10e:	68ba      	ldr	r2, [r7, #8]
 808b110:	429a      	cmp	r2, r3
 808b112:	d213      	bcs.n	808b13c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 808b114:	68fb      	ldr	r3, [r7, #12]
 808b116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808b118:	f043 0220 	orr.w	r2, r3, #32
 808b11c:	68fb      	ldr	r3, [r7, #12]
 808b11e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 808b120:	68fb      	ldr	r3, [r7, #12]
 808b122:	2220      	movs	r2, #32
 808b124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 808b128:	68fb      	ldr	r3, [r7, #12]
 808b12a:	2200      	movs	r2, #0
 808b12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 808b130:	68fb      	ldr	r3, [r7, #12]
 808b132:	2200      	movs	r2, #0
 808b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 808b138:	2303      	movs	r3, #3
 808b13a:	e007      	b.n	808b14c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 808b13c:	68fb      	ldr	r3, [r7, #12]
 808b13e:	681b      	ldr	r3, [r3, #0]
 808b140:	699b      	ldr	r3, [r3, #24]
 808b142:	f003 0320 	and.w	r3, r3, #32
 808b146:	2b20      	cmp	r3, #32
 808b148:	d1cf      	bne.n	808b0ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 808b14a:	2300      	movs	r3, #0
}
 808b14c:	4618      	mov	r0, r3
 808b14e:	3710      	adds	r7, #16
 808b150:	46bd      	mov	sp, r7
 808b152:	bd80      	pop	{r7, pc}

0808b154 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 808b154:	b580      	push	{r7, lr}
 808b156:	b084      	sub	sp, #16
 808b158:	af00      	add	r7, sp, #0
 808b15a:	60f8      	str	r0, [r7, #12]
 808b15c:	60b9      	str	r1, [r7, #8]
 808b15e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 808b160:	68fb      	ldr	r3, [r7, #12]
 808b162:	681b      	ldr	r3, [r3, #0]
 808b164:	699b      	ldr	r3, [r3, #24]
 808b166:	f003 0310 	and.w	r3, r3, #16
 808b16a:	2b10      	cmp	r3, #16
 808b16c:	d148      	bne.n	808b200 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 808b16e:	e01c      	b.n	808b1aa <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 808b170:	68bb      	ldr	r3, [r7, #8]
 808b172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808b176:	d018      	beq.n	808b1aa <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808b178:	68bb      	ldr	r3, [r7, #8]
 808b17a:	2b00      	cmp	r3, #0
 808b17c:	d007      	beq.n	808b18e <I2C_IsAcknowledgeFailed+0x3a>
 808b17e:	f7fd ffef 	bl	8089160 <HAL_GetTick>
 808b182:	4602      	mov	r2, r0
 808b184:	687b      	ldr	r3, [r7, #4]
 808b186:	1ad3      	subs	r3, r2, r3
 808b188:	68ba      	ldr	r2, [r7, #8]
 808b18a:	429a      	cmp	r2, r3
 808b18c:	d20d      	bcs.n	808b1aa <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 808b18e:	68fb      	ldr	r3, [r7, #12]
 808b190:	2220      	movs	r2, #32
 808b192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 808b196:	68fb      	ldr	r3, [r7, #12]
 808b198:	2200      	movs	r2, #0
 808b19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 808b19e:	68fb      	ldr	r3, [r7, #12]
 808b1a0:	2200      	movs	r2, #0
 808b1a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 808b1a6:	2303      	movs	r3, #3
 808b1a8:	e02b      	b.n	808b202 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 808b1aa:	68fb      	ldr	r3, [r7, #12]
 808b1ac:	681b      	ldr	r3, [r3, #0]
 808b1ae:	699b      	ldr	r3, [r3, #24]
 808b1b0:	f003 0320 	and.w	r3, r3, #32
 808b1b4:	2b20      	cmp	r3, #32
 808b1b6:	d1db      	bne.n	808b170 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 808b1b8:	68fb      	ldr	r3, [r7, #12]
 808b1ba:	681b      	ldr	r3, [r3, #0]
 808b1bc:	2210      	movs	r2, #16
 808b1be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 808b1c0:	68fb      	ldr	r3, [r7, #12]
 808b1c2:	681b      	ldr	r3, [r3, #0]
 808b1c4:	2220      	movs	r2, #32
 808b1c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 808b1c8:	68f8      	ldr	r0, [r7, #12]
 808b1ca:	f7ff fee9 	bl	808afa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 808b1ce:	68fb      	ldr	r3, [r7, #12]
 808b1d0:	681b      	ldr	r3, [r3, #0]
 808b1d2:	6859      	ldr	r1, [r3, #4]
 808b1d4:	68fb      	ldr	r3, [r7, #12]
 808b1d6:	681a      	ldr	r2, [r3, #0]
 808b1d8:	4b0c      	ldr	r3, [pc, #48]	; (808b20c <I2C_IsAcknowledgeFailed+0xb8>)
 808b1da:	400b      	ands	r3, r1
 808b1dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 808b1de:	68fb      	ldr	r3, [r7, #12]
 808b1e0:	2204      	movs	r2, #4
 808b1e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 808b1e4:	68fb      	ldr	r3, [r7, #12]
 808b1e6:	2220      	movs	r2, #32
 808b1e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 808b1ec:	68fb      	ldr	r3, [r7, #12]
 808b1ee:	2200      	movs	r2, #0
 808b1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 808b1f4:	68fb      	ldr	r3, [r7, #12]
 808b1f6:	2200      	movs	r2, #0
 808b1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 808b1fc:	2301      	movs	r3, #1
 808b1fe:	e000      	b.n	808b202 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 808b200:	2300      	movs	r3, #0
}
 808b202:	4618      	mov	r0, r3
 808b204:	3710      	adds	r7, #16
 808b206:	46bd      	mov	sp, r7
 808b208:	bd80      	pop	{r7, pc}
 808b20a:	bf00      	nop
 808b20c:	fe00e800 	.word	0xfe00e800

0808b210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 808b210:	b480      	push	{r7}
 808b212:	b085      	sub	sp, #20
 808b214:	af00      	add	r7, sp, #0
 808b216:	60f8      	str	r0, [r7, #12]
 808b218:	607b      	str	r3, [r7, #4]
 808b21a:	460b      	mov	r3, r1
 808b21c:	817b      	strh	r3, [r7, #10]
 808b21e:	4613      	mov	r3, r2
 808b220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 808b222:	68fb      	ldr	r3, [r7, #12]
 808b224:	681b      	ldr	r3, [r3, #0]
 808b226:	685a      	ldr	r2, [r3, #4]
 808b228:	69bb      	ldr	r3, [r7, #24]
 808b22a:	0d5b      	lsrs	r3, r3, #21
 808b22c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 808b230:	4b0d      	ldr	r3, [pc, #52]	; (808b268 <I2C_TransferConfig+0x58>)
 808b232:	430b      	orrs	r3, r1
 808b234:	43db      	mvns	r3, r3
 808b236:	ea02 0103 	and.w	r1, r2, r3
 808b23a:	897b      	ldrh	r3, [r7, #10]
 808b23c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 808b240:	7a7b      	ldrb	r3, [r7, #9]
 808b242:	041b      	lsls	r3, r3, #16
 808b244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 808b248:	431a      	orrs	r2, r3
 808b24a:	687b      	ldr	r3, [r7, #4]
 808b24c:	431a      	orrs	r2, r3
 808b24e:	69bb      	ldr	r3, [r7, #24]
 808b250:	431a      	orrs	r2, r3
 808b252:	68fb      	ldr	r3, [r7, #12]
 808b254:	681b      	ldr	r3, [r3, #0]
 808b256:	430a      	orrs	r2, r1
 808b258:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 808b25a:	bf00      	nop
 808b25c:	3714      	adds	r7, #20
 808b25e:	46bd      	mov	sp, r7
 808b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b264:	4770      	bx	lr
 808b266:	bf00      	nop
 808b268:	03ff63ff 	.word	0x03ff63ff

0808b26c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 808b26c:	b480      	push	{r7}
 808b26e:	b083      	sub	sp, #12
 808b270:	af00      	add	r7, sp, #0
 808b272:	6078      	str	r0, [r7, #4]
 808b274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 808b276:	687b      	ldr	r3, [r7, #4]
 808b278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808b27c:	b2db      	uxtb	r3, r3
 808b27e:	2b20      	cmp	r3, #32
 808b280:	d138      	bne.n	808b2f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 808b282:	687b      	ldr	r3, [r7, #4]
 808b284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808b288:	2b01      	cmp	r3, #1
 808b28a:	d101      	bne.n	808b290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 808b28c:	2302      	movs	r3, #2
 808b28e:	e032      	b.n	808b2f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 808b290:	687b      	ldr	r3, [r7, #4]
 808b292:	2201      	movs	r2, #1
 808b294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 808b298:	687b      	ldr	r3, [r7, #4]
 808b29a:	2224      	movs	r2, #36	; 0x24
 808b29c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 808b2a0:	687b      	ldr	r3, [r7, #4]
 808b2a2:	681b      	ldr	r3, [r3, #0]
 808b2a4:	681a      	ldr	r2, [r3, #0]
 808b2a6:	687b      	ldr	r3, [r7, #4]
 808b2a8:	681b      	ldr	r3, [r3, #0]
 808b2aa:	f022 0201 	bic.w	r2, r2, #1
 808b2ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 808b2b0:	687b      	ldr	r3, [r7, #4]
 808b2b2:	681b      	ldr	r3, [r3, #0]
 808b2b4:	681a      	ldr	r2, [r3, #0]
 808b2b6:	687b      	ldr	r3, [r7, #4]
 808b2b8:	681b      	ldr	r3, [r3, #0]
 808b2ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 808b2be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 808b2c0:	687b      	ldr	r3, [r7, #4]
 808b2c2:	681b      	ldr	r3, [r3, #0]
 808b2c4:	6819      	ldr	r1, [r3, #0]
 808b2c6:	687b      	ldr	r3, [r7, #4]
 808b2c8:	681b      	ldr	r3, [r3, #0]
 808b2ca:	683a      	ldr	r2, [r7, #0]
 808b2cc:	430a      	orrs	r2, r1
 808b2ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 808b2d0:	687b      	ldr	r3, [r7, #4]
 808b2d2:	681b      	ldr	r3, [r3, #0]
 808b2d4:	681a      	ldr	r2, [r3, #0]
 808b2d6:	687b      	ldr	r3, [r7, #4]
 808b2d8:	681b      	ldr	r3, [r3, #0]
 808b2da:	f042 0201 	orr.w	r2, r2, #1
 808b2de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 808b2e0:	687b      	ldr	r3, [r7, #4]
 808b2e2:	2220      	movs	r2, #32
 808b2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 808b2e8:	687b      	ldr	r3, [r7, #4]
 808b2ea:	2200      	movs	r2, #0
 808b2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 808b2f0:	2300      	movs	r3, #0
 808b2f2:	e000      	b.n	808b2f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 808b2f4:	2302      	movs	r3, #2
  }
}
 808b2f6:	4618      	mov	r0, r3
 808b2f8:	370c      	adds	r7, #12
 808b2fa:	46bd      	mov	sp, r7
 808b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b300:	4770      	bx	lr
	...

0808b304 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 808b304:	b580      	push	{r7, lr}
 808b306:	b084      	sub	sp, #16
 808b308:	af00      	add	r7, sp, #0
 808b30a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 808b30c:	2300      	movs	r3, #0
 808b30e:	60fb      	str	r3, [r7, #12]
 808b310:	2300      	movs	r3, #0
 808b312:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 808b314:	687b      	ldr	r3, [r7, #4]
 808b316:	2b00      	cmp	r3, #0
 808b318:	d101      	bne.n	808b31e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 808b31a:	2301      	movs	r3, #1
 808b31c:	e0c7      	b.n	808b4ae <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 808b31e:	687b      	ldr	r3, [r7, #4]
 808b320:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 808b324:	b2db      	uxtb	r3, r3
 808b326:	2b00      	cmp	r3, #0
 808b328:	d106      	bne.n	808b338 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 808b32a:	687b      	ldr	r3, [r7, #4]
 808b32c:	2200      	movs	r2, #0
 808b32e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 808b332:	6878      	ldr	r0, [r7, #4]
 808b334:	f000 f8c2 	bl	808b4bc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 808b338:	687b      	ldr	r3, [r7, #4]
 808b33a:	2202      	movs	r2, #2
 808b33c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 808b340:	687b      	ldr	r3, [r7, #4]
 808b342:	681b      	ldr	r3, [r3, #0]
 808b344:	699a      	ldr	r2, [r3, #24]
 808b346:	687b      	ldr	r3, [r7, #4]
 808b348:	681b      	ldr	r3, [r3, #0]
 808b34a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 808b34e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 808b350:	687b      	ldr	r3, [r7, #4]
 808b352:	681b      	ldr	r3, [r3, #0]
 808b354:	6999      	ldr	r1, [r3, #24]
 808b356:	687b      	ldr	r3, [r7, #4]
 808b358:	685a      	ldr	r2, [r3, #4]
 808b35a:	687b      	ldr	r3, [r7, #4]
 808b35c:	689b      	ldr	r3, [r3, #8]
 808b35e:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 808b360:	687b      	ldr	r3, [r7, #4]
 808b362:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 808b364:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 808b366:	687b      	ldr	r3, [r7, #4]
 808b368:	691b      	ldr	r3, [r3, #16]
 808b36a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 808b36c:	687b      	ldr	r3, [r7, #4]
 808b36e:	681b      	ldr	r3, [r3, #0]
 808b370:	430a      	orrs	r2, r1
 808b372:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 808b374:	687b      	ldr	r3, [r7, #4]
 808b376:	681b      	ldr	r3, [r3, #0]
 808b378:	6899      	ldr	r1, [r3, #8]
 808b37a:	687b      	ldr	r3, [r7, #4]
 808b37c:	681a      	ldr	r2, [r3, #0]
 808b37e:	4b4e      	ldr	r3, [pc, #312]	; (808b4b8 <HAL_LTDC_Init+0x1b4>)
 808b380:	400b      	ands	r3, r1
 808b382:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 808b384:	687b      	ldr	r3, [r7, #4]
 808b386:	695b      	ldr	r3, [r3, #20]
 808b388:	041b      	lsls	r3, r3, #16
 808b38a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 808b38c:	687b      	ldr	r3, [r7, #4]
 808b38e:	681b      	ldr	r3, [r3, #0]
 808b390:	6899      	ldr	r1, [r3, #8]
 808b392:	687b      	ldr	r3, [r7, #4]
 808b394:	699a      	ldr	r2, [r3, #24]
 808b396:	68fb      	ldr	r3, [r7, #12]
 808b398:	431a      	orrs	r2, r3
 808b39a:	687b      	ldr	r3, [r7, #4]
 808b39c:	681b      	ldr	r3, [r3, #0]
 808b39e:	430a      	orrs	r2, r1
 808b3a0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 808b3a2:	687b      	ldr	r3, [r7, #4]
 808b3a4:	681b      	ldr	r3, [r3, #0]
 808b3a6:	68d9      	ldr	r1, [r3, #12]
 808b3a8:	687b      	ldr	r3, [r7, #4]
 808b3aa:	681a      	ldr	r2, [r3, #0]
 808b3ac:	4b42      	ldr	r3, [pc, #264]	; (808b4b8 <HAL_LTDC_Init+0x1b4>)
 808b3ae:	400b      	ands	r3, r1
 808b3b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 808b3b2:	687b      	ldr	r3, [r7, #4]
 808b3b4:	69db      	ldr	r3, [r3, #28]
 808b3b6:	041b      	lsls	r3, r3, #16
 808b3b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 808b3ba:	687b      	ldr	r3, [r7, #4]
 808b3bc:	681b      	ldr	r3, [r3, #0]
 808b3be:	68d9      	ldr	r1, [r3, #12]
 808b3c0:	687b      	ldr	r3, [r7, #4]
 808b3c2:	6a1a      	ldr	r2, [r3, #32]
 808b3c4:	68fb      	ldr	r3, [r7, #12]
 808b3c6:	431a      	orrs	r2, r3
 808b3c8:	687b      	ldr	r3, [r7, #4]
 808b3ca:	681b      	ldr	r3, [r3, #0]
 808b3cc:	430a      	orrs	r2, r1
 808b3ce:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 808b3d0:	687b      	ldr	r3, [r7, #4]
 808b3d2:	681b      	ldr	r3, [r3, #0]
 808b3d4:	6919      	ldr	r1, [r3, #16]
 808b3d6:	687b      	ldr	r3, [r7, #4]
 808b3d8:	681a      	ldr	r2, [r3, #0]
 808b3da:	4b37      	ldr	r3, [pc, #220]	; (808b4b8 <HAL_LTDC_Init+0x1b4>)
 808b3dc:	400b      	ands	r3, r1
 808b3de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 808b3e0:	687b      	ldr	r3, [r7, #4]
 808b3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808b3e4:	041b      	lsls	r3, r3, #16
 808b3e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 808b3e8:	687b      	ldr	r3, [r7, #4]
 808b3ea:	681b      	ldr	r3, [r3, #0]
 808b3ec:	6919      	ldr	r1, [r3, #16]
 808b3ee:	687b      	ldr	r3, [r7, #4]
 808b3f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 808b3f2:	68fb      	ldr	r3, [r7, #12]
 808b3f4:	431a      	orrs	r2, r3
 808b3f6:	687b      	ldr	r3, [r7, #4]
 808b3f8:	681b      	ldr	r3, [r3, #0]
 808b3fa:	430a      	orrs	r2, r1
 808b3fc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 808b3fe:	687b      	ldr	r3, [r7, #4]
 808b400:	681b      	ldr	r3, [r3, #0]
 808b402:	6959      	ldr	r1, [r3, #20]
 808b404:	687b      	ldr	r3, [r7, #4]
 808b406:	681a      	ldr	r2, [r3, #0]
 808b408:	4b2b      	ldr	r3, [pc, #172]	; (808b4b8 <HAL_LTDC_Init+0x1b4>)
 808b40a:	400b      	ands	r3, r1
 808b40c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 808b40e:	687b      	ldr	r3, [r7, #4]
 808b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808b412:	041b      	lsls	r3, r3, #16
 808b414:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 808b416:	687b      	ldr	r3, [r7, #4]
 808b418:	681b      	ldr	r3, [r3, #0]
 808b41a:	6959      	ldr	r1, [r3, #20]
 808b41c:	687b      	ldr	r3, [r7, #4]
 808b41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 808b420:	68fb      	ldr	r3, [r7, #12]
 808b422:	431a      	orrs	r2, r3
 808b424:	687b      	ldr	r3, [r7, #4]
 808b426:	681b      	ldr	r3, [r3, #0]
 808b428:	430a      	orrs	r2, r1
 808b42a:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 808b42c:	687b      	ldr	r3, [r7, #4]
 808b42e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 808b432:	021b      	lsls	r3, r3, #8
 808b434:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 808b436:	687b      	ldr	r3, [r7, #4]
 808b438:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 808b43c:	041b      	lsls	r3, r3, #16
 808b43e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 808b440:	687b      	ldr	r3, [r7, #4]
 808b442:	681b      	ldr	r3, [r3, #0]
 808b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808b446:	687b      	ldr	r3, [r7, #4]
 808b448:	681b      	ldr	r3, [r3, #0]
 808b44a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 808b44e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 808b450:	687b      	ldr	r3, [r7, #4]
 808b452:	681b      	ldr	r3, [r3, #0]
 808b454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 808b456:	68ba      	ldr	r2, [r7, #8]
 808b458:	68fb      	ldr	r3, [r7, #12]
 808b45a:	4313      	orrs	r3, r2
 808b45c:	687a      	ldr	r2, [r7, #4]
 808b45e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 808b462:	431a      	orrs	r2, r3
 808b464:	687b      	ldr	r3, [r7, #4]
 808b466:	681b      	ldr	r3, [r3, #0]
 808b468:	430a      	orrs	r2, r1
 808b46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 808b46c:	687b      	ldr	r3, [r7, #4]
 808b46e:	681b      	ldr	r3, [r3, #0]
 808b470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 808b472:	687b      	ldr	r3, [r7, #4]
 808b474:	681b      	ldr	r3, [r3, #0]
 808b476:	f042 0204 	orr.w	r2, r2, #4
 808b47a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 808b47c:	687b      	ldr	r3, [r7, #4]
 808b47e:	681b      	ldr	r3, [r3, #0]
 808b480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 808b482:	687b      	ldr	r3, [r7, #4]
 808b484:	681b      	ldr	r3, [r3, #0]
 808b486:	f042 0202 	orr.w	r2, r2, #2
 808b48a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 808b48c:	687b      	ldr	r3, [r7, #4]
 808b48e:	681b      	ldr	r3, [r3, #0]
 808b490:	699a      	ldr	r2, [r3, #24]
 808b492:	687b      	ldr	r3, [r7, #4]
 808b494:	681b      	ldr	r3, [r3, #0]
 808b496:	f042 0201 	orr.w	r2, r2, #1
 808b49a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 808b49c:	687b      	ldr	r3, [r7, #4]
 808b49e:	2200      	movs	r2, #0
 808b4a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 808b4a4:	687b      	ldr	r3, [r7, #4]
 808b4a6:	2201      	movs	r2, #1
 808b4a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 808b4ac:	2300      	movs	r3, #0
}
 808b4ae:	4618      	mov	r0, r3
 808b4b0:	3710      	adds	r7, #16
 808b4b2:	46bd      	mov	sp, r7
 808b4b4:	bd80      	pop	{r7, pc}
 808b4b6:	bf00      	nop
 808b4b8:	f000f800 	.word	0xf000f800

0808b4bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 808b4bc:	b480      	push	{r7}
 808b4be:	b083      	sub	sp, #12
 808b4c0:	af00      	add	r7, sp, #0
 808b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 808b4c4:	bf00      	nop
 808b4c6:	370c      	adds	r7, #12
 808b4c8:	46bd      	mov	sp, r7
 808b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b4ce:	4770      	bx	lr

0808b4d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 808b4d0:	b5b0      	push	{r4, r5, r7, lr}
 808b4d2:	b084      	sub	sp, #16
 808b4d4:	af00      	add	r7, sp, #0
 808b4d6:	60f8      	str	r0, [r7, #12]
 808b4d8:	60b9      	str	r1, [r7, #8]
 808b4da:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 808b4dc:	68fb      	ldr	r3, [r7, #12]
 808b4de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 808b4e2:	2b01      	cmp	r3, #1
 808b4e4:	d101      	bne.n	808b4ea <HAL_LTDC_ConfigLayer+0x1a>
 808b4e6:	2302      	movs	r3, #2
 808b4e8:	e02c      	b.n	808b544 <HAL_LTDC_ConfigLayer+0x74>
 808b4ea:	68fb      	ldr	r3, [r7, #12]
 808b4ec:	2201      	movs	r2, #1
 808b4ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 808b4f2:	68fb      	ldr	r3, [r7, #12]
 808b4f4:	2202      	movs	r2, #2
 808b4f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 808b4fa:	68fa      	ldr	r2, [r7, #12]
 808b4fc:	687b      	ldr	r3, [r7, #4]
 808b4fe:	2134      	movs	r1, #52	; 0x34
 808b500:	fb01 f303 	mul.w	r3, r1, r3
 808b504:	4413      	add	r3, r2
 808b506:	f103 0238 	add.w	r2, r3, #56	; 0x38
 808b50a:	68bb      	ldr	r3, [r7, #8]
 808b50c:	4614      	mov	r4, r2
 808b50e:	461d      	mov	r5, r3
 808b510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808b512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808b514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808b516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808b518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808b51a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808b51c:	682b      	ldr	r3, [r5, #0]
 808b51e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 808b520:	687a      	ldr	r2, [r7, #4]
 808b522:	68b9      	ldr	r1, [r7, #8]
 808b524:	68f8      	ldr	r0, [r7, #12]
 808b526:	f000 f89d 	bl	808b664 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 808b52a:	68fb      	ldr	r3, [r7, #12]
 808b52c:	681b      	ldr	r3, [r3, #0]
 808b52e:	2201      	movs	r2, #1
 808b530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 808b532:	68fb      	ldr	r3, [r7, #12]
 808b534:	2201      	movs	r2, #1
 808b536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 808b53a:	68fb      	ldr	r3, [r7, #12]
 808b53c:	2200      	movs	r2, #0
 808b53e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 808b542:	2300      	movs	r3, #0
}
 808b544:	4618      	mov	r0, r3
 808b546:	3710      	adds	r7, #16
 808b548:	46bd      	mov	sp, r7
 808b54a:	bdb0      	pop	{r4, r5, r7, pc}

0808b54c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 808b54c:	b480      	push	{r7}
 808b54e:	b085      	sub	sp, #20
 808b550:	af00      	add	r7, sp, #0
 808b552:	60f8      	str	r0, [r7, #12]
 808b554:	60b9      	str	r1, [r7, #8]
 808b556:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 808b558:	68fb      	ldr	r3, [r7, #12]
 808b55a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 808b55e:	2b01      	cmp	r3, #1
 808b560:	d101      	bne.n	808b566 <HAL_LTDC_ConfigColorKeying+0x1a>
 808b562:	2302      	movs	r3, #2
 808b564:	e030      	b.n	808b5c8 <HAL_LTDC_ConfigColorKeying+0x7c>
 808b566:	68fb      	ldr	r3, [r7, #12]
 808b568:	2201      	movs	r2, #1
 808b56a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 808b56e:	68fb      	ldr	r3, [r7, #12]
 808b570:	2202      	movs	r2, #2
 808b572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 808b576:	68fb      	ldr	r3, [r7, #12]
 808b578:	681b      	ldr	r3, [r3, #0]
 808b57a:	461a      	mov	r2, r3
 808b57c:	687b      	ldr	r3, [r7, #4]
 808b57e:	01db      	lsls	r3, r3, #7
 808b580:	4413      	add	r3, r2
 808b582:	3384      	adds	r3, #132	; 0x84
 808b584:	68db      	ldr	r3, [r3, #12]
 808b586:	68fa      	ldr	r2, [r7, #12]
 808b588:	6812      	ldr	r2, [r2, #0]
 808b58a:	4611      	mov	r1, r2
 808b58c:	687a      	ldr	r2, [r7, #4]
 808b58e:	01d2      	lsls	r2, r2, #7
 808b590:	440a      	add	r2, r1
 808b592:	3284      	adds	r2, #132	; 0x84
 808b594:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 808b598:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 808b59a:	68fb      	ldr	r3, [r7, #12]
 808b59c:	681b      	ldr	r3, [r3, #0]
 808b59e:	461a      	mov	r2, r3
 808b5a0:	687b      	ldr	r3, [r7, #4]
 808b5a2:	01db      	lsls	r3, r3, #7
 808b5a4:	4413      	add	r3, r2
 808b5a6:	3384      	adds	r3, #132	; 0x84
 808b5a8:	461a      	mov	r2, r3
 808b5aa:	68bb      	ldr	r3, [r7, #8]
 808b5ac:	60d3      	str	r3, [r2, #12]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 808b5ae:	68fb      	ldr	r3, [r7, #12]
 808b5b0:	681b      	ldr	r3, [r3, #0]
 808b5b2:	2201      	movs	r2, #1
 808b5b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 808b5b6:	68fb      	ldr	r3, [r7, #12]
 808b5b8:	2201      	movs	r2, #1
 808b5ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 808b5be:	68fb      	ldr	r3, [r7, #12]
 808b5c0:	2200      	movs	r2, #0
 808b5c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 808b5c6:	2300      	movs	r3, #0
}
 808b5c8:	4618      	mov	r0, r3
 808b5ca:	3714      	adds	r7, #20
 808b5cc:	46bd      	mov	sp, r7
 808b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b5d2:	4770      	bx	lr

0808b5d4 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 808b5d4:	b480      	push	{r7}
 808b5d6:	b083      	sub	sp, #12
 808b5d8:	af00      	add	r7, sp, #0
 808b5da:	6078      	str	r0, [r7, #4]
 808b5dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hltdc);
 808b5de:	687b      	ldr	r3, [r7, #4]
 808b5e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 808b5e4:	2b01      	cmp	r3, #1
 808b5e6:	d101      	bne.n	808b5ec <HAL_LTDC_EnableColorKeying+0x18>
 808b5e8:	2302      	movs	r3, #2
 808b5ea:	e026      	b.n	808b63a <HAL_LTDC_EnableColorKeying+0x66>
 808b5ec:	687b      	ldr	r3, [r7, #4]
 808b5ee:	2201      	movs	r2, #1
 808b5f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 808b5f4:	687b      	ldr	r3, [r7, #4]
 808b5f6:	2202      	movs	r2, #2
 808b5f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 808b5fc:	687b      	ldr	r3, [r7, #4]
 808b5fe:	681b      	ldr	r3, [r3, #0]
 808b600:	461a      	mov	r2, r3
 808b602:	683b      	ldr	r3, [r7, #0]
 808b604:	01db      	lsls	r3, r3, #7
 808b606:	4413      	add	r3, r2
 808b608:	3384      	adds	r3, #132	; 0x84
 808b60a:	681b      	ldr	r3, [r3, #0]
 808b60c:	687a      	ldr	r2, [r7, #4]
 808b60e:	6812      	ldr	r2, [r2, #0]
 808b610:	4611      	mov	r1, r2
 808b612:	683a      	ldr	r2, [r7, #0]
 808b614:	01d2      	lsls	r2, r2, #7
 808b616:	440a      	add	r2, r1
 808b618:	3284      	adds	r2, #132	; 0x84
 808b61a:	f043 0302 	orr.w	r3, r3, #2
 808b61e:	6013      	str	r3, [r2, #0]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 808b620:	687b      	ldr	r3, [r7, #4]
 808b622:	681b      	ldr	r3, [r3, #0]
 808b624:	2201      	movs	r2, #1
 808b626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 808b628:	687b      	ldr	r3, [r7, #4]
 808b62a:	2201      	movs	r2, #1
 808b62c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 808b630:	687b      	ldr	r3, [r7, #4]
 808b632:	2200      	movs	r2, #0
 808b634:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 808b638:	2300      	movs	r3, #0
}
 808b63a:	4618      	mov	r0, r3
 808b63c:	370c      	adds	r7, #12
 808b63e:	46bd      	mov	sp, r7
 808b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b644:	4770      	bx	lr

0808b646 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 808b646:	b480      	push	{r7}
 808b648:	b083      	sub	sp, #12
 808b64a:	af00      	add	r7, sp, #0
 808b64c:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 808b64e:	687b      	ldr	r3, [r7, #4]
 808b650:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 808b654:	b2db      	uxtb	r3, r3
}
 808b656:	4618      	mov	r0, r3
 808b658:	370c      	adds	r7, #12
 808b65a:	46bd      	mov	sp, r7
 808b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b660:	4770      	bx	lr
	...

0808b664 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 808b664:	b480      	push	{r7}
 808b666:	b089      	sub	sp, #36	; 0x24
 808b668:	af00      	add	r7, sp, #0
 808b66a:	60f8      	str	r0, [r7, #12]
 808b66c:	60b9      	str	r1, [r7, #8]
 808b66e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 808b670:	2300      	movs	r3, #0
 808b672:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 808b674:	2300      	movs	r3, #0
 808b676:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 808b678:	2300      	movs	r3, #0
 808b67a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 808b67c:	68bb      	ldr	r3, [r7, #8]
 808b67e:	685a      	ldr	r2, [r3, #4]
 808b680:	68fb      	ldr	r3, [r7, #12]
 808b682:	681b      	ldr	r3, [r3, #0]
 808b684:	68db      	ldr	r3, [r3, #12]
 808b686:	0c1b      	lsrs	r3, r3, #16
 808b688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 808b68c:	4413      	add	r3, r2
 808b68e:	041b      	lsls	r3, r3, #16
 808b690:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 808b692:	68fb      	ldr	r3, [r7, #12]
 808b694:	681b      	ldr	r3, [r3, #0]
 808b696:	461a      	mov	r2, r3
 808b698:	687b      	ldr	r3, [r7, #4]
 808b69a:	01db      	lsls	r3, r3, #7
 808b69c:	4413      	add	r3, r2
 808b69e:	3384      	adds	r3, #132	; 0x84
 808b6a0:	685b      	ldr	r3, [r3, #4]
 808b6a2:	68fa      	ldr	r2, [r7, #12]
 808b6a4:	6812      	ldr	r2, [r2, #0]
 808b6a6:	4611      	mov	r1, r2
 808b6a8:	687a      	ldr	r2, [r7, #4]
 808b6aa:	01d2      	lsls	r2, r2, #7
 808b6ac:	440a      	add	r2, r1
 808b6ae:	3284      	adds	r2, #132	; 0x84
 808b6b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 808b6b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 808b6b6:	68bb      	ldr	r3, [r7, #8]
 808b6b8:	681a      	ldr	r2, [r3, #0]
 808b6ba:	68fb      	ldr	r3, [r7, #12]
 808b6bc:	681b      	ldr	r3, [r3, #0]
 808b6be:	68db      	ldr	r3, [r3, #12]
 808b6c0:	0c1b      	lsrs	r3, r3, #16
 808b6c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 808b6c6:	4413      	add	r3, r2
 808b6c8:	1c5a      	adds	r2, r3, #1
 808b6ca:	68fb      	ldr	r3, [r7, #12]
 808b6cc:	681b      	ldr	r3, [r3, #0]
 808b6ce:	4619      	mov	r1, r3
 808b6d0:	687b      	ldr	r3, [r7, #4]
 808b6d2:	01db      	lsls	r3, r3, #7
 808b6d4:	440b      	add	r3, r1
 808b6d6:	3384      	adds	r3, #132	; 0x84
 808b6d8:	4619      	mov	r1, r3
 808b6da:	69fb      	ldr	r3, [r7, #28]
 808b6dc:	4313      	orrs	r3, r2
 808b6de:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 808b6e0:	68bb      	ldr	r3, [r7, #8]
 808b6e2:	68da      	ldr	r2, [r3, #12]
 808b6e4:	68fb      	ldr	r3, [r7, #12]
 808b6e6:	681b      	ldr	r3, [r3, #0]
 808b6e8:	68db      	ldr	r3, [r3, #12]
 808b6ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 808b6ee:	4413      	add	r3, r2
 808b6f0:	041b      	lsls	r3, r3, #16
 808b6f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 808b6f4:	68fb      	ldr	r3, [r7, #12]
 808b6f6:	681b      	ldr	r3, [r3, #0]
 808b6f8:	461a      	mov	r2, r3
 808b6fa:	687b      	ldr	r3, [r7, #4]
 808b6fc:	01db      	lsls	r3, r3, #7
 808b6fe:	4413      	add	r3, r2
 808b700:	3384      	adds	r3, #132	; 0x84
 808b702:	689b      	ldr	r3, [r3, #8]
 808b704:	68fa      	ldr	r2, [r7, #12]
 808b706:	6812      	ldr	r2, [r2, #0]
 808b708:	4611      	mov	r1, r2
 808b70a:	687a      	ldr	r2, [r7, #4]
 808b70c:	01d2      	lsls	r2, r2, #7
 808b70e:	440a      	add	r2, r1
 808b710:	3284      	adds	r2, #132	; 0x84
 808b712:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 808b716:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 808b718:	68bb      	ldr	r3, [r7, #8]
 808b71a:	689a      	ldr	r2, [r3, #8]
 808b71c:	68fb      	ldr	r3, [r7, #12]
 808b71e:	681b      	ldr	r3, [r3, #0]
 808b720:	68db      	ldr	r3, [r3, #12]
 808b722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 808b726:	4413      	add	r3, r2
 808b728:	1c5a      	adds	r2, r3, #1
 808b72a:	68fb      	ldr	r3, [r7, #12]
 808b72c:	681b      	ldr	r3, [r3, #0]
 808b72e:	4619      	mov	r1, r3
 808b730:	687b      	ldr	r3, [r7, #4]
 808b732:	01db      	lsls	r3, r3, #7
 808b734:	440b      	add	r3, r1
 808b736:	3384      	adds	r3, #132	; 0x84
 808b738:	4619      	mov	r1, r3
 808b73a:	69fb      	ldr	r3, [r7, #28]
 808b73c:	4313      	orrs	r3, r2
 808b73e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 808b740:	68fb      	ldr	r3, [r7, #12]
 808b742:	681b      	ldr	r3, [r3, #0]
 808b744:	461a      	mov	r2, r3
 808b746:	687b      	ldr	r3, [r7, #4]
 808b748:	01db      	lsls	r3, r3, #7
 808b74a:	4413      	add	r3, r2
 808b74c:	3384      	adds	r3, #132	; 0x84
 808b74e:	691b      	ldr	r3, [r3, #16]
 808b750:	68fa      	ldr	r2, [r7, #12]
 808b752:	6812      	ldr	r2, [r2, #0]
 808b754:	4611      	mov	r1, r2
 808b756:	687a      	ldr	r2, [r7, #4]
 808b758:	01d2      	lsls	r2, r2, #7
 808b75a:	440a      	add	r2, r1
 808b75c:	3284      	adds	r2, #132	; 0x84
 808b75e:	f023 0307 	bic.w	r3, r3, #7
 808b762:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 808b764:	68fb      	ldr	r3, [r7, #12]
 808b766:	681b      	ldr	r3, [r3, #0]
 808b768:	461a      	mov	r2, r3
 808b76a:	687b      	ldr	r3, [r7, #4]
 808b76c:	01db      	lsls	r3, r3, #7
 808b76e:	4413      	add	r3, r2
 808b770:	3384      	adds	r3, #132	; 0x84
 808b772:	461a      	mov	r2, r3
 808b774:	68bb      	ldr	r3, [r7, #8]
 808b776:	691b      	ldr	r3, [r3, #16]
 808b778:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 808b77a:	68bb      	ldr	r3, [r7, #8]
 808b77c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 808b780:	021b      	lsls	r3, r3, #8
 808b782:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 808b784:	68bb      	ldr	r3, [r7, #8]
 808b786:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 808b78a:	041b      	lsls	r3, r3, #16
 808b78c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 808b78e:	68bb      	ldr	r3, [r7, #8]
 808b790:	699b      	ldr	r3, [r3, #24]
 808b792:	061b      	lsls	r3, r3, #24
 808b794:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 808b796:	68fb      	ldr	r3, [r7, #12]
 808b798:	681b      	ldr	r3, [r3, #0]
 808b79a:	461a      	mov	r2, r3
 808b79c:	687b      	ldr	r3, [r7, #4]
 808b79e:	01db      	lsls	r3, r3, #7
 808b7a0:	4413      	add	r3, r2
 808b7a2:	3384      	adds	r3, #132	; 0x84
 808b7a4:	699b      	ldr	r3, [r3, #24]
 808b7a6:	68fb      	ldr	r3, [r7, #12]
 808b7a8:	681b      	ldr	r3, [r3, #0]
 808b7aa:	461a      	mov	r2, r3
 808b7ac:	687b      	ldr	r3, [r7, #4]
 808b7ae:	01db      	lsls	r3, r3, #7
 808b7b0:	4413      	add	r3, r2
 808b7b2:	3384      	adds	r3, #132	; 0x84
 808b7b4:	461a      	mov	r2, r3
 808b7b6:	2300      	movs	r3, #0
 808b7b8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 808b7ba:	68bb      	ldr	r3, [r7, #8]
 808b7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 808b7c0:	461a      	mov	r2, r3
 808b7c2:	69fb      	ldr	r3, [r7, #28]
 808b7c4:	431a      	orrs	r2, r3
 808b7c6:	69bb      	ldr	r3, [r7, #24]
 808b7c8:	431a      	orrs	r2, r3
 808b7ca:	68fb      	ldr	r3, [r7, #12]
 808b7cc:	681b      	ldr	r3, [r3, #0]
 808b7ce:	4619      	mov	r1, r3
 808b7d0:	687b      	ldr	r3, [r7, #4]
 808b7d2:	01db      	lsls	r3, r3, #7
 808b7d4:	440b      	add	r3, r1
 808b7d6:	3384      	adds	r3, #132	; 0x84
 808b7d8:	4619      	mov	r1, r3
 808b7da:	697b      	ldr	r3, [r7, #20]
 808b7dc:	4313      	orrs	r3, r2
 808b7de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 808b7e0:	68fb      	ldr	r3, [r7, #12]
 808b7e2:	681b      	ldr	r3, [r3, #0]
 808b7e4:	461a      	mov	r2, r3
 808b7e6:	687b      	ldr	r3, [r7, #4]
 808b7e8:	01db      	lsls	r3, r3, #7
 808b7ea:	4413      	add	r3, r2
 808b7ec:	3384      	adds	r3, #132	; 0x84
 808b7ee:	695b      	ldr	r3, [r3, #20]
 808b7f0:	68fa      	ldr	r2, [r7, #12]
 808b7f2:	6812      	ldr	r2, [r2, #0]
 808b7f4:	4611      	mov	r1, r2
 808b7f6:	687a      	ldr	r2, [r7, #4]
 808b7f8:	01d2      	lsls	r2, r2, #7
 808b7fa:	440a      	add	r2, r1
 808b7fc:	3284      	adds	r2, #132	; 0x84
 808b7fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 808b802:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 808b804:	68fb      	ldr	r3, [r7, #12]
 808b806:	681b      	ldr	r3, [r3, #0]
 808b808:	461a      	mov	r2, r3
 808b80a:	687b      	ldr	r3, [r7, #4]
 808b80c:	01db      	lsls	r3, r3, #7
 808b80e:	4413      	add	r3, r2
 808b810:	3384      	adds	r3, #132	; 0x84
 808b812:	461a      	mov	r2, r3
 808b814:	68bb      	ldr	r3, [r7, #8]
 808b816:	695b      	ldr	r3, [r3, #20]
 808b818:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 808b81a:	68fb      	ldr	r3, [r7, #12]
 808b81c:	681b      	ldr	r3, [r3, #0]
 808b81e:	461a      	mov	r2, r3
 808b820:	687b      	ldr	r3, [r7, #4]
 808b822:	01db      	lsls	r3, r3, #7
 808b824:	4413      	add	r3, r2
 808b826:	3384      	adds	r3, #132	; 0x84
 808b828:	69da      	ldr	r2, [r3, #28]
 808b82a:	68fb      	ldr	r3, [r7, #12]
 808b82c:	681b      	ldr	r3, [r3, #0]
 808b82e:	4619      	mov	r1, r3
 808b830:	687b      	ldr	r3, [r7, #4]
 808b832:	01db      	lsls	r3, r3, #7
 808b834:	440b      	add	r3, r1
 808b836:	3384      	adds	r3, #132	; 0x84
 808b838:	4619      	mov	r1, r3
 808b83a:	4b58      	ldr	r3, [pc, #352]	; (808b99c <LTDC_SetConfig+0x338>)
 808b83c:	4013      	ands	r3, r2
 808b83e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 808b840:	68bb      	ldr	r3, [r7, #8]
 808b842:	69da      	ldr	r2, [r3, #28]
 808b844:	68bb      	ldr	r3, [r7, #8]
 808b846:	6a1b      	ldr	r3, [r3, #32]
 808b848:	68f9      	ldr	r1, [r7, #12]
 808b84a:	6809      	ldr	r1, [r1, #0]
 808b84c:	4608      	mov	r0, r1
 808b84e:	6879      	ldr	r1, [r7, #4]
 808b850:	01c9      	lsls	r1, r1, #7
 808b852:	4401      	add	r1, r0
 808b854:	3184      	adds	r1, #132	; 0x84
 808b856:	4313      	orrs	r3, r2
 808b858:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 808b85a:	68fb      	ldr	r3, [r7, #12]
 808b85c:	681b      	ldr	r3, [r3, #0]
 808b85e:	461a      	mov	r2, r3
 808b860:	687b      	ldr	r3, [r7, #4]
 808b862:	01db      	lsls	r3, r3, #7
 808b864:	4413      	add	r3, r2
 808b866:	3384      	adds	r3, #132	; 0x84
 808b868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808b86a:	68fb      	ldr	r3, [r7, #12]
 808b86c:	681b      	ldr	r3, [r3, #0]
 808b86e:	461a      	mov	r2, r3
 808b870:	687b      	ldr	r3, [r7, #4]
 808b872:	01db      	lsls	r3, r3, #7
 808b874:	4413      	add	r3, r2
 808b876:	3384      	adds	r3, #132	; 0x84
 808b878:	461a      	mov	r2, r3
 808b87a:	2300      	movs	r3, #0
 808b87c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 808b87e:	68fb      	ldr	r3, [r7, #12]
 808b880:	681b      	ldr	r3, [r3, #0]
 808b882:	461a      	mov	r2, r3
 808b884:	687b      	ldr	r3, [r7, #4]
 808b886:	01db      	lsls	r3, r3, #7
 808b888:	4413      	add	r3, r2
 808b88a:	3384      	adds	r3, #132	; 0x84
 808b88c:	461a      	mov	r2, r3
 808b88e:	68bb      	ldr	r3, [r7, #8]
 808b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808b892:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 808b894:	68bb      	ldr	r3, [r7, #8]
 808b896:	691b      	ldr	r3, [r3, #16]
 808b898:	2b00      	cmp	r3, #0
 808b89a:	d102      	bne.n	808b8a2 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 808b89c:	2304      	movs	r3, #4
 808b89e:	61fb      	str	r3, [r7, #28]
 808b8a0:	e01b      	b.n	808b8da <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 808b8a2:	68bb      	ldr	r3, [r7, #8]
 808b8a4:	691b      	ldr	r3, [r3, #16]
 808b8a6:	2b01      	cmp	r3, #1
 808b8a8:	d102      	bne.n	808b8b0 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 808b8aa:	2303      	movs	r3, #3
 808b8ac:	61fb      	str	r3, [r7, #28]
 808b8ae:	e014      	b.n	808b8da <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 808b8b0:	68bb      	ldr	r3, [r7, #8]
 808b8b2:	691b      	ldr	r3, [r3, #16]
 808b8b4:	2b04      	cmp	r3, #4
 808b8b6:	d00b      	beq.n	808b8d0 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 808b8b8:	68bb      	ldr	r3, [r7, #8]
 808b8ba:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 808b8bc:	2b02      	cmp	r3, #2
 808b8be:	d007      	beq.n	808b8d0 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 808b8c0:	68bb      	ldr	r3, [r7, #8]
 808b8c2:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 808b8c4:	2b03      	cmp	r3, #3
 808b8c6:	d003      	beq.n	808b8d0 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 808b8c8:	68bb      	ldr	r3, [r7, #8]
 808b8ca:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 808b8cc:	2b07      	cmp	r3, #7
 808b8ce:	d102      	bne.n	808b8d6 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 808b8d0:	2302      	movs	r3, #2
 808b8d2:	61fb      	str	r3, [r7, #28]
 808b8d4:	e001      	b.n	808b8da <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 808b8d6:	2301      	movs	r3, #1
 808b8d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 808b8da:	68fb      	ldr	r3, [r7, #12]
 808b8dc:	681b      	ldr	r3, [r3, #0]
 808b8de:	461a      	mov	r2, r3
 808b8e0:	687b      	ldr	r3, [r7, #4]
 808b8e2:	01db      	lsls	r3, r3, #7
 808b8e4:	4413      	add	r3, r2
 808b8e6:	3384      	adds	r3, #132	; 0x84
 808b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808b8ea:	68fa      	ldr	r2, [r7, #12]
 808b8ec:	6812      	ldr	r2, [r2, #0]
 808b8ee:	4611      	mov	r1, r2
 808b8f0:	687a      	ldr	r2, [r7, #4]
 808b8f2:	01d2      	lsls	r2, r2, #7
 808b8f4:	440a      	add	r2, r1
 808b8f6:	3284      	adds	r2, #132	; 0x84
 808b8f8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 808b8fc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 808b8fe:	68bb      	ldr	r3, [r7, #8]
 808b900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808b902:	69fa      	ldr	r2, [r7, #28]
 808b904:	fb02 f303 	mul.w	r3, r2, r3
 808b908:	041a      	lsls	r2, r3, #16
 808b90a:	68bb      	ldr	r3, [r7, #8]
 808b90c:	6859      	ldr	r1, [r3, #4]
 808b90e:	68bb      	ldr	r3, [r7, #8]
 808b910:	681b      	ldr	r3, [r3, #0]
 808b912:	1acb      	subs	r3, r1, r3
 808b914:	69f9      	ldr	r1, [r7, #28]
 808b916:	fb01 f303 	mul.w	r3, r1, r3
 808b91a:	3303      	adds	r3, #3
 808b91c:	68f9      	ldr	r1, [r7, #12]
 808b91e:	6809      	ldr	r1, [r1, #0]
 808b920:	4608      	mov	r0, r1
 808b922:	6879      	ldr	r1, [r7, #4]
 808b924:	01c9      	lsls	r1, r1, #7
 808b926:	4401      	add	r1, r0
 808b928:	3184      	adds	r1, #132	; 0x84
 808b92a:	4313      	orrs	r3, r2
 808b92c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 808b92e:	68fb      	ldr	r3, [r7, #12]
 808b930:	681b      	ldr	r3, [r3, #0]
 808b932:	461a      	mov	r2, r3
 808b934:	687b      	ldr	r3, [r7, #4]
 808b936:	01db      	lsls	r3, r3, #7
 808b938:	4413      	add	r3, r2
 808b93a:	3384      	adds	r3, #132	; 0x84
 808b93c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 808b93e:	68fb      	ldr	r3, [r7, #12]
 808b940:	681b      	ldr	r3, [r3, #0]
 808b942:	4619      	mov	r1, r3
 808b944:	687b      	ldr	r3, [r7, #4]
 808b946:	01db      	lsls	r3, r3, #7
 808b948:	440b      	add	r3, r1
 808b94a:	3384      	adds	r3, #132	; 0x84
 808b94c:	4619      	mov	r1, r3
 808b94e:	4b14      	ldr	r3, [pc, #80]	; (808b9a0 <LTDC_SetConfig+0x33c>)
 808b950:	4013      	ands	r3, r2
 808b952:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 808b954:	68fb      	ldr	r3, [r7, #12]
 808b956:	681b      	ldr	r3, [r3, #0]
 808b958:	461a      	mov	r2, r3
 808b95a:	687b      	ldr	r3, [r7, #4]
 808b95c:	01db      	lsls	r3, r3, #7
 808b95e:	4413      	add	r3, r2
 808b960:	3384      	adds	r3, #132	; 0x84
 808b962:	461a      	mov	r2, r3
 808b964:	68bb      	ldr	r3, [r7, #8]
 808b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808b968:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 808b96a:	68fb      	ldr	r3, [r7, #12]
 808b96c:	681b      	ldr	r3, [r3, #0]
 808b96e:	461a      	mov	r2, r3
 808b970:	687b      	ldr	r3, [r7, #4]
 808b972:	01db      	lsls	r3, r3, #7
 808b974:	4413      	add	r3, r2
 808b976:	3384      	adds	r3, #132	; 0x84
 808b978:	681b      	ldr	r3, [r3, #0]
 808b97a:	68fa      	ldr	r2, [r7, #12]
 808b97c:	6812      	ldr	r2, [r2, #0]
 808b97e:	4611      	mov	r1, r2
 808b980:	687a      	ldr	r2, [r7, #4]
 808b982:	01d2      	lsls	r2, r2, #7
 808b984:	440a      	add	r2, r1
 808b986:	3284      	adds	r2, #132	; 0x84
 808b988:	f043 0301 	orr.w	r3, r3, #1
 808b98c:	6013      	str	r3, [r2, #0]
}
 808b98e:	bf00      	nop
 808b990:	3724      	adds	r7, #36	; 0x24
 808b992:	46bd      	mov	sp, r7
 808b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 808b998:	4770      	bx	lr
 808b99a:	bf00      	nop
 808b99c:	fffff8f8 	.word	0xfffff8f8
 808b9a0:	fffff800 	.word	0xfffff800

0808b9a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 808b9a4:	b580      	push	{r7, lr}
 808b9a6:	b082      	sub	sp, #8
 808b9a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 808b9aa:	2300      	movs	r3, #0
 808b9ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 808b9ae:	4b23      	ldr	r3, [pc, #140]	; (808ba3c <HAL_PWREx_EnableOverDrive+0x98>)
 808b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808b9b2:	4a22      	ldr	r2, [pc, #136]	; (808ba3c <HAL_PWREx_EnableOverDrive+0x98>)
 808b9b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808b9b8:	6413      	str	r3, [r2, #64]	; 0x40
 808b9ba:	4b20      	ldr	r3, [pc, #128]	; (808ba3c <HAL_PWREx_EnableOverDrive+0x98>)
 808b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808b9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808b9c2:	603b      	str	r3, [r7, #0]
 808b9c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 808b9c6:	4b1e      	ldr	r3, [pc, #120]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808b9c8:	681b      	ldr	r3, [r3, #0]
 808b9ca:	4a1d      	ldr	r2, [pc, #116]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808b9cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808b9d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 808b9d2:	f7fd fbc5 	bl	8089160 <HAL_GetTick>
 808b9d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 808b9d8:	e009      	b.n	808b9ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 808b9da:	f7fd fbc1 	bl	8089160 <HAL_GetTick>
 808b9de:	4602      	mov	r2, r0
 808b9e0:	687b      	ldr	r3, [r7, #4]
 808b9e2:	1ad3      	subs	r3, r2, r3
 808b9e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808b9e8:	d901      	bls.n	808b9ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 808b9ea:	2303      	movs	r3, #3
 808b9ec:	e022      	b.n	808ba34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 808b9ee:	4b14      	ldr	r3, [pc, #80]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808b9f0:	685b      	ldr	r3, [r3, #4]
 808b9f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808b9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808b9fa:	d1ee      	bne.n	808b9da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 808b9fc:	4b10      	ldr	r3, [pc, #64]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808b9fe:	681b      	ldr	r3, [r3, #0]
 808ba00:	4a0f      	ldr	r2, [pc, #60]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808ba02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 808ba06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 808ba08:	f7fd fbaa 	bl	8089160 <HAL_GetTick>
 808ba0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 808ba0e:	e009      	b.n	808ba24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 808ba10:	f7fd fba6 	bl	8089160 <HAL_GetTick>
 808ba14:	4602      	mov	r2, r0
 808ba16:	687b      	ldr	r3, [r7, #4]
 808ba18:	1ad3      	subs	r3, r2, r3
 808ba1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808ba1e:	d901      	bls.n	808ba24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 808ba20:	2303      	movs	r3, #3
 808ba22:	e007      	b.n	808ba34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 808ba24:	4b06      	ldr	r3, [pc, #24]	; (808ba40 <HAL_PWREx_EnableOverDrive+0x9c>)
 808ba26:	685b      	ldr	r3, [r3, #4]
 808ba28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808ba2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 808ba30:	d1ee      	bne.n	808ba10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 808ba32:	2300      	movs	r3, #0
}
 808ba34:	4618      	mov	r0, r3
 808ba36:	3708      	adds	r7, #8
 808ba38:	46bd      	mov	sp, r7
 808ba3a:	bd80      	pop	{r7, pc}
 808ba3c:	40023800 	.word	0x40023800
 808ba40:	40007000 	.word	0x40007000

0808ba44 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 808ba44:	b580      	push	{r7, lr}
 808ba46:	b086      	sub	sp, #24
 808ba48:	af02      	add	r7, sp, #8
 808ba4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 808ba4c:	2301      	movs	r3, #1
 808ba4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 808ba50:	f7fd fb86 	bl	8089160 <HAL_GetTick>
 808ba54:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 808ba56:	687b      	ldr	r3, [r7, #4]
 808ba58:	2b00      	cmp	r3, #0
 808ba5a:	d101      	bne.n	808ba60 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 808ba5c:	2301      	movs	r3, #1
 808ba5e:	e073      	b.n	808bb48 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 808ba60:	687b      	ldr	r3, [r7, #4]
 808ba62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808ba66:	b2db      	uxtb	r3, r3
 808ba68:	2b01      	cmp	r3, #1
 808ba6a:	d101      	bne.n	808ba70 <HAL_QSPI_Init+0x2c>
 808ba6c:	2302      	movs	r3, #2
 808ba6e:	e06b      	b.n	808bb48 <HAL_QSPI_Init+0x104>
 808ba70:	687b      	ldr	r3, [r7, #4]
 808ba72:	2201      	movs	r2, #1
 808ba74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 808ba78:	687b      	ldr	r3, [r7, #4]
 808ba7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808ba7e:	b2db      	uxtb	r3, r3
 808ba80:	2b00      	cmp	r3, #0
 808ba82:	d10b      	bne.n	808ba9c <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 808ba84:	687b      	ldr	r3, [r7, #4]
 808ba86:	2200      	movs	r2, #0
 808ba88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
     
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 808ba8c:	6878      	ldr	r0, [r7, #4]
 808ba8e:	f000 f893 	bl	808bbb8 <HAL_QSPI_MspInit>
             
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 808ba92:	f241 3188 	movw	r1, #5000	; 0x1388
 808ba96:	6878      	ldr	r0, [r7, #4]
 808ba98:	f000 fb79 	bl	808c18e <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 808ba9c:	687b      	ldr	r3, [r7, #4]
 808ba9e:	681b      	ldr	r3, [r3, #0]
 808baa0:	681b      	ldr	r3, [r3, #0]
 808baa2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 808baa6:	687b      	ldr	r3, [r7, #4]
 808baa8:	689b      	ldr	r3, [r3, #8]
 808baaa:	3b01      	subs	r3, #1
 808baac:	021a      	lsls	r2, r3, #8
 808baae:	687b      	ldr	r3, [r7, #4]
 808bab0:	681b      	ldr	r3, [r3, #0]
 808bab2:	430a      	orrs	r2, r1
 808bab4:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 808bab6:	687b      	ldr	r3, [r7, #4]
 808bab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808baba:	9300      	str	r3, [sp, #0]
 808babc:	68bb      	ldr	r3, [r7, #8]
 808babe:	2200      	movs	r2, #0
 808bac0:	2120      	movs	r1, #32
 808bac2:	6878      	ldr	r0, [r7, #4]
 808bac4:	f000 fb71 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bac8:	4603      	mov	r3, r0
 808baca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 808bacc:	7bfb      	ldrb	r3, [r7, #15]
 808bace:	2b00      	cmp	r3, #0
 808bad0:	d135      	bne.n	808bb3e <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 808bad2:	687b      	ldr	r3, [r7, #4]
 808bad4:	681b      	ldr	r3, [r3, #0]
 808bad6:	681a      	ldr	r2, [r3, #0]
 808bad8:	4b1d      	ldr	r3, [pc, #116]	; (808bb50 <HAL_QSPI_Init+0x10c>)
 808bada:	4013      	ands	r3, r2
 808badc:	687a      	ldr	r2, [r7, #4]
 808bade:	6852      	ldr	r2, [r2, #4]
 808bae0:	0611      	lsls	r1, r2, #24
 808bae2:	687a      	ldr	r2, [r7, #4]
 808bae4:	68d2      	ldr	r2, [r2, #12]
 808bae6:	4311      	orrs	r1, r2
 808bae8:	687a      	ldr	r2, [r7, #4]
 808baea:	69d2      	ldr	r2, [r2, #28]
 808baec:	4311      	orrs	r1, r2
 808baee:	687a      	ldr	r2, [r7, #4]
 808baf0:	6a12      	ldr	r2, [r2, #32]
 808baf2:	4311      	orrs	r1, r2
 808baf4:	687a      	ldr	r2, [r7, #4]
 808baf6:	6812      	ldr	r2, [r2, #0]
 808baf8:	430b      	orrs	r3, r1
 808bafa:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 808bafc:	687b      	ldr	r3, [r7, #4]
 808bafe:	681b      	ldr	r3, [r3, #0]
 808bb00:	685a      	ldr	r2, [r3, #4]
 808bb02:	4b14      	ldr	r3, [pc, #80]	; (808bb54 <HAL_QSPI_Init+0x110>)
 808bb04:	4013      	ands	r3, r2
 808bb06:	687a      	ldr	r2, [r7, #4]
 808bb08:	6912      	ldr	r2, [r2, #16]
 808bb0a:	0411      	lsls	r1, r2, #16
 808bb0c:	687a      	ldr	r2, [r7, #4]
 808bb0e:	6952      	ldr	r2, [r2, #20]
 808bb10:	4311      	orrs	r1, r2
 808bb12:	687a      	ldr	r2, [r7, #4]
 808bb14:	6992      	ldr	r2, [r2, #24]
 808bb16:	4311      	orrs	r1, r2
 808bb18:	687a      	ldr	r2, [r7, #4]
 808bb1a:	6812      	ldr	r2, [r2, #0]
 808bb1c:	430b      	orrs	r3, r1
 808bb1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 808bb20:	687b      	ldr	r3, [r7, #4]
 808bb22:	681b      	ldr	r3, [r3, #0]
 808bb24:	681a      	ldr	r2, [r3, #0]
 808bb26:	687b      	ldr	r3, [r7, #4]
 808bb28:	681b      	ldr	r3, [r3, #0]
 808bb2a:	f042 0201 	orr.w	r2, r2, #1
 808bb2e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 808bb30:	687b      	ldr	r3, [r7, #4]
 808bb32:	2200      	movs	r2, #0
 808bb34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 808bb36:	687b      	ldr	r3, [r7, #4]
 808bb38:	2201      	movs	r2, #1
 808bb3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 808bb3e:	687b      	ldr	r3, [r7, #4]
 808bb40:	2200      	movs	r2, #0
 808bb42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 808bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 808bb48:	4618      	mov	r0, r3
 808bb4a:	3710      	adds	r7, #16
 808bb4c:	46bd      	mov	sp, r7
 808bb4e:	bd80      	pop	{r7, pc}
 808bb50:	00ffff2f 	.word	0x00ffff2f
 808bb54:	ffe0f8fe 	.word	0xffe0f8fe

0808bb58 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 808bb58:	b580      	push	{r7, lr}
 808bb5a:	b082      	sub	sp, #8
 808bb5c:	af00      	add	r7, sp, #0
 808bb5e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 808bb60:	687b      	ldr	r3, [r7, #4]
 808bb62:	2b00      	cmp	r3, #0
 808bb64:	d101      	bne.n	808bb6a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 808bb66:	2301      	movs	r3, #1
 808bb68:	e022      	b.n	808bbb0 <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 808bb6a:	687b      	ldr	r3, [r7, #4]
 808bb6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808bb70:	b2db      	uxtb	r3, r3
 808bb72:	2b01      	cmp	r3, #1
 808bb74:	d101      	bne.n	808bb7a <HAL_QSPI_DeInit+0x22>
 808bb76:	2302      	movs	r3, #2
 808bb78:	e01a      	b.n	808bbb0 <HAL_QSPI_DeInit+0x58>
 808bb7a:	687b      	ldr	r3, [r7, #4]
 808bb7c:	2201      	movs	r2, #1
 808bb7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 808bb82:	687b      	ldr	r3, [r7, #4]
 808bb84:	681b      	ldr	r3, [r3, #0]
 808bb86:	681a      	ldr	r2, [r3, #0]
 808bb88:	687b      	ldr	r3, [r7, #4]
 808bb8a:	681b      	ldr	r3, [r3, #0]
 808bb8c:	f022 0201 	bic.w	r2, r2, #1
 808bb90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 808bb92:	6878      	ldr	r0, [r7, #4]
 808bb94:	f000 f81a 	bl	808bbcc <HAL_QSPI_MspDeInit>

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808bb98:	687b      	ldr	r3, [r7, #4]
 808bb9a:	2200      	movs	r2, #0
 808bb9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 808bb9e:	687b      	ldr	r3, [r7, #4]
 808bba0:	2200      	movs	r2, #0
 808bba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 808bba6:	687b      	ldr	r3, [r7, #4]
 808bba8:	2200      	movs	r2, #0
 808bbaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 808bbae:	2300      	movs	r3, #0
}
 808bbb0:	4618      	mov	r0, r3
 808bbb2:	3708      	adds	r7, #8
 808bbb4:	46bd      	mov	sp, r7
 808bbb6:	bd80      	pop	{r7, pc}

0808bbb8 <HAL_QSPI_MspInit>:
  * @brief QSPI MSP Init
  * @param hqspi QSPI handle
  * @retval None
  */
 __weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 808bbb8:	b480      	push	{r7}
 808bbba:	b083      	sub	sp, #12
 808bbbc:	af00      	add	r7, sp, #0
 808bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */ 
}
 808bbc0:	bf00      	nop
 808bbc2:	370c      	adds	r7, #12
 808bbc4:	46bd      	mov	sp, r7
 808bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 808bbca:	4770      	bx	lr

0808bbcc <HAL_QSPI_MspDeInit>:
  * @brief QSPI MSP DeInit
  * @param hqspi QSPI handle
  * @retval None
  */
 __weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 808bbcc:	b480      	push	{r7}
 808bbce:	b083      	sub	sp, #12
 808bbd0:	af00      	add	r7, sp, #0
 808bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */ 
}
 808bbd4:	bf00      	nop
 808bbd6:	370c      	adds	r7, #12
 808bbd8:	46bd      	mov	sp, r7
 808bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 808bbde:	4770      	bx	lr

0808bbe0 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 808bbe0:	b580      	push	{r7, lr}
 808bbe2:	b088      	sub	sp, #32
 808bbe4:	af02      	add	r7, sp, #8
 808bbe6:	60f8      	str	r0, [r7, #12]
 808bbe8:	60b9      	str	r1, [r7, #8]
 808bbea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 808bbec:	2301      	movs	r3, #1
 808bbee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 808bbf0:	f7fd fab6 	bl	8089160 <HAL_GetTick>
 808bbf4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 808bbf6:	68fb      	ldr	r3, [r7, #12]
 808bbf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808bbfc:	b2db      	uxtb	r3, r3
 808bbfe:	2b01      	cmp	r3, #1
 808bc00:	d101      	bne.n	808bc06 <HAL_QSPI_Command+0x26>
 808bc02:	2302      	movs	r3, #2
 808bc04:	e048      	b.n	808bc98 <HAL_QSPI_Command+0xb8>
 808bc06:	68fb      	ldr	r3, [r7, #12]
 808bc08:	2201      	movs	r2, #1
 808bc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 808bc0e:	68fb      	ldr	r3, [r7, #12]
 808bc10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808bc14:	b2db      	uxtb	r3, r3
 808bc16:	2b01      	cmp	r3, #1
 808bc18:	d137      	bne.n	808bc8a <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808bc1a:	68fb      	ldr	r3, [r7, #12]
 808bc1c:	2200      	movs	r2, #0
 808bc1e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 808bc20:	68fb      	ldr	r3, [r7, #12]
 808bc22:	2202      	movs	r2, #2
 808bc24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 808bc28:	687b      	ldr	r3, [r7, #4]
 808bc2a:	9300      	str	r3, [sp, #0]
 808bc2c:	693b      	ldr	r3, [r7, #16]
 808bc2e:	2200      	movs	r2, #0
 808bc30:	2120      	movs	r1, #32
 808bc32:	68f8      	ldr	r0, [r7, #12]
 808bc34:	f000 fab9 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bc38:	4603      	mov	r3, r0
 808bc3a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 808bc3c:	7dfb      	ldrb	r3, [r7, #23]
 808bc3e:	2b00      	cmp	r3, #0
 808bc40:	d125      	bne.n	808bc8e <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 808bc42:	2200      	movs	r2, #0
 808bc44:	68b9      	ldr	r1, [r7, #8]
 808bc46:	68f8      	ldr	r0, [r7, #12]
 808bc48:	f000 fae6 	bl	808c218 <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 808bc4c:	68bb      	ldr	r3, [r7, #8]
 808bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808bc50:	2b00      	cmp	r3, #0
 808bc52:	d115      	bne.n	808bc80 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 808bc54:	687b      	ldr	r3, [r7, #4]
 808bc56:	9300      	str	r3, [sp, #0]
 808bc58:	693b      	ldr	r3, [r7, #16]
 808bc5a:	2201      	movs	r2, #1
 808bc5c:	2102      	movs	r1, #2
 808bc5e:	68f8      	ldr	r0, [r7, #12]
 808bc60:	f000 faa3 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bc64:	4603      	mov	r3, r0
 808bc66:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 808bc68:	7dfb      	ldrb	r3, [r7, #23]
 808bc6a:	2b00      	cmp	r3, #0
 808bc6c:	d10f      	bne.n	808bc8e <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 808bc6e:	68fb      	ldr	r3, [r7, #12]
 808bc70:	681b      	ldr	r3, [r3, #0]
 808bc72:	2202      	movs	r2, #2
 808bc74:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 808bc76:	68fb      	ldr	r3, [r7, #12]
 808bc78:	2201      	movs	r2, #1
 808bc7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 808bc7e:	e006      	b.n	808bc8e <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 808bc80:	68fb      	ldr	r3, [r7, #12]
 808bc82:	2201      	movs	r2, #1
 808bc84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 808bc88:	e001      	b.n	808bc8e <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 808bc8a:	2302      	movs	r3, #2
 808bc8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 808bc8e:	68fb      	ldr	r3, [r7, #12]
 808bc90:	2200      	movs	r2, #0
 808bc92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 808bc96:	7dfb      	ldrb	r3, [r7, #23]
}
 808bc98:	4618      	mov	r0, r3
 808bc9a:	3718      	adds	r7, #24
 808bc9c:	46bd      	mov	sp, r7
 808bc9e:	bd80      	pop	{r7, pc}

0808bca0 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 808bca0:	b580      	push	{r7, lr}
 808bca2:	b08a      	sub	sp, #40	; 0x28
 808bca4:	af02      	add	r7, sp, #8
 808bca6:	60f8      	str	r0, [r7, #12]
 808bca8:	60b9      	str	r1, [r7, #8]
 808bcaa:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 808bcac:	2300      	movs	r3, #0
 808bcae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 808bcb0:	f7fd fa56 	bl	8089160 <HAL_GetTick>
 808bcb4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 808bcb6:	68fb      	ldr	r3, [r7, #12]
 808bcb8:	681b      	ldr	r3, [r3, #0]
 808bcba:	3320      	adds	r3, #32
 808bcbc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 808bcbe:	68fb      	ldr	r3, [r7, #12]
 808bcc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808bcc4:	b2db      	uxtb	r3, r3
 808bcc6:	2b01      	cmp	r3, #1
 808bcc8:	d101      	bne.n	808bcce <HAL_QSPI_Transmit+0x2e>
 808bcca:	2302      	movs	r3, #2
 808bccc:	e079      	b.n	808bdc2 <HAL_QSPI_Transmit+0x122>
 808bcce:	68fb      	ldr	r3, [r7, #12]
 808bcd0:	2201      	movs	r2, #1
 808bcd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 808bcd6:	68fb      	ldr	r3, [r7, #12]
 808bcd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808bcdc:	b2db      	uxtb	r3, r3
 808bcde:	2b01      	cmp	r3, #1
 808bce0:	d168      	bne.n	808bdb4 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808bce2:	68fb      	ldr	r3, [r7, #12]
 808bce4:	2200      	movs	r2, #0
 808bce6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 808bce8:	68bb      	ldr	r3, [r7, #8]
 808bcea:	2b00      	cmp	r3, #0
 808bcec:	d059      	beq.n	808bda2 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 808bcee:	68fb      	ldr	r3, [r7, #12]
 808bcf0:	2212      	movs	r2, #18
 808bcf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 808bcf6:	68fb      	ldr	r3, [r7, #12]
 808bcf8:	681b      	ldr	r3, [r3, #0]
 808bcfa:	691b      	ldr	r3, [r3, #16]
 808bcfc:	1c5a      	adds	r2, r3, #1
 808bcfe:	68fb      	ldr	r3, [r7, #12]
 808bd00:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 808bd02:	68fb      	ldr	r3, [r7, #12]
 808bd04:	681b      	ldr	r3, [r3, #0]
 808bd06:	691b      	ldr	r3, [r3, #16]
 808bd08:	1c5a      	adds	r2, r3, #1
 808bd0a:	68fb      	ldr	r3, [r7, #12]
 808bd0c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 808bd0e:	68fb      	ldr	r3, [r7, #12]
 808bd10:	68ba      	ldr	r2, [r7, #8]
 808bd12:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 808bd14:	68fb      	ldr	r3, [r7, #12]
 808bd16:	681b      	ldr	r3, [r3, #0]
 808bd18:	695a      	ldr	r2, [r3, #20]
 808bd1a:	68fb      	ldr	r3, [r7, #12]
 808bd1c:	681b      	ldr	r3, [r3, #0]
 808bd1e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 808bd22:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 808bd24:	e019      	b.n	808bd5a <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 808bd26:	687b      	ldr	r3, [r7, #4]
 808bd28:	9300      	str	r3, [sp, #0]
 808bd2a:	69bb      	ldr	r3, [r7, #24]
 808bd2c:	2201      	movs	r2, #1
 808bd2e:	2104      	movs	r1, #4
 808bd30:	68f8      	ldr	r0, [r7, #12]
 808bd32:	f000 fa3a 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bd36:	4603      	mov	r3, r0
 808bd38:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 808bd3a:	7ffb      	ldrb	r3, [r7, #31]
 808bd3c:	2b00      	cmp	r3, #0
 808bd3e:	d111      	bne.n	808bd64 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 808bd40:	68fb      	ldr	r3, [r7, #12]
 808bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808bd44:	1c59      	adds	r1, r3, #1
 808bd46:	68fa      	ldr	r2, [r7, #12]
 808bd48:	6251      	str	r1, [r2, #36]	; 0x24
 808bd4a:	781a      	ldrb	r2, [r3, #0]
 808bd4c:	697b      	ldr	r3, [r7, #20]
 808bd4e:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 808bd50:	68fb      	ldr	r3, [r7, #12]
 808bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808bd54:	1e5a      	subs	r2, r3, #1
 808bd56:	68fb      	ldr	r3, [r7, #12]
 808bd58:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 808bd5a:	68fb      	ldr	r3, [r7, #12]
 808bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808bd5e:	2b00      	cmp	r3, #0
 808bd60:	d1e1      	bne.n	808bd26 <HAL_QSPI_Transmit+0x86>
 808bd62:	e000      	b.n	808bd66 <HAL_QSPI_Transmit+0xc6>
          break;
 808bd64:	bf00      	nop
      }
    
      if (status == HAL_OK)
 808bd66:	7ffb      	ldrb	r3, [r7, #31]
 808bd68:	2b00      	cmp	r3, #0
 808bd6a:	d115      	bne.n	808bd98 <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 808bd6c:	687b      	ldr	r3, [r7, #4]
 808bd6e:	9300      	str	r3, [sp, #0]
 808bd70:	69bb      	ldr	r3, [r7, #24]
 808bd72:	2201      	movs	r2, #1
 808bd74:	2102      	movs	r1, #2
 808bd76:	68f8      	ldr	r0, [r7, #12]
 808bd78:	f000 fa17 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bd7c:	4603      	mov	r3, r0
 808bd7e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 808bd80:	7ffb      	ldrb	r3, [r7, #31]
 808bd82:	2b00      	cmp	r3, #0
 808bd84:	d108      	bne.n	808bd98 <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 808bd86:	68fb      	ldr	r3, [r7, #12]
 808bd88:	681b      	ldr	r3, [r3, #0]
 808bd8a:	2202      	movs	r2, #2
 808bd8c:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 808bd8e:	68f8      	ldr	r0, [r7, #12]
 808bd90:	f000 f998 	bl	808c0c4 <HAL_QSPI_Abort>
 808bd94:	4603      	mov	r3, r0
 808bd96:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 808bd98:	68fb      	ldr	r3, [r7, #12]
 808bd9a:	2201      	movs	r2, #1
 808bd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 808bda0:	e00a      	b.n	808bdb8 <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 808bda2:	68fb      	ldr	r3, [r7, #12]
 808bda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808bda6:	f043 0208 	orr.w	r2, r3, #8
 808bdaa:	68fb      	ldr	r3, [r7, #12]
 808bdac:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 808bdae:	2301      	movs	r3, #1
 808bdb0:	77fb      	strb	r3, [r7, #31]
 808bdb2:	e001      	b.n	808bdb8 <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 808bdb4:	2302      	movs	r3, #2
 808bdb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 808bdb8:	68fb      	ldr	r3, [r7, #12]
 808bdba:	2200      	movs	r2, #0
 808bdbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 808bdc0:	7ffb      	ldrb	r3, [r7, #31]
}
 808bdc2:	4618      	mov	r0, r3
 808bdc4:	3720      	adds	r7, #32
 808bdc6:	46bd      	mov	sp, r7
 808bdc8:	bd80      	pop	{r7, pc}

0808bdca <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 808bdca:	b580      	push	{r7, lr}
 808bdcc:	b08a      	sub	sp, #40	; 0x28
 808bdce:	af02      	add	r7, sp, #8
 808bdd0:	60f8      	str	r0, [r7, #12]
 808bdd2:	60b9      	str	r1, [r7, #8]
 808bdd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 808bdd6:	2300      	movs	r3, #0
 808bdd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 808bdda:	f7fd f9c1 	bl	8089160 <HAL_GetTick>
 808bdde:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 808bde0:	68fb      	ldr	r3, [r7, #12]
 808bde2:	681b      	ldr	r3, [r3, #0]
 808bde4:	699b      	ldr	r3, [r3, #24]
 808bde6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 808bde8:	68fb      	ldr	r3, [r7, #12]
 808bdea:	681b      	ldr	r3, [r3, #0]
 808bdec:	3320      	adds	r3, #32
 808bdee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 808bdf0:	68fb      	ldr	r3, [r7, #12]
 808bdf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808bdf6:	b2db      	uxtb	r3, r3
 808bdf8:	2b01      	cmp	r3, #1
 808bdfa:	d101      	bne.n	808be00 <HAL_QSPI_Receive+0x36>
 808bdfc:	2302      	movs	r3, #2
 808bdfe:	e080      	b.n	808bf02 <HAL_QSPI_Receive+0x138>
 808be00:	68fb      	ldr	r3, [r7, #12]
 808be02:	2201      	movs	r2, #1
 808be04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 808be08:	68fb      	ldr	r3, [r7, #12]
 808be0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808be0e:	b2db      	uxtb	r3, r3
 808be10:	2b01      	cmp	r3, #1
 808be12:	d16f      	bne.n	808bef4 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808be14:	68fb      	ldr	r3, [r7, #12]
 808be16:	2200      	movs	r2, #0
 808be18:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 808be1a:	68bb      	ldr	r3, [r7, #8]
 808be1c:	2b00      	cmp	r3, #0
 808be1e:	d060      	beq.n	808bee2 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 808be20:	68fb      	ldr	r3, [r7, #12]
 808be22:	2222      	movs	r2, #34	; 0x22
 808be24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 808be28:	68fb      	ldr	r3, [r7, #12]
 808be2a:	681b      	ldr	r3, [r3, #0]
 808be2c:	691b      	ldr	r3, [r3, #16]
 808be2e:	1c5a      	adds	r2, r3, #1
 808be30:	68fb      	ldr	r3, [r7, #12]
 808be32:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 808be34:	68fb      	ldr	r3, [r7, #12]
 808be36:	681b      	ldr	r3, [r3, #0]
 808be38:	691b      	ldr	r3, [r3, #16]
 808be3a:	1c5a      	adds	r2, r3, #1
 808be3c:	68fb      	ldr	r3, [r7, #12]
 808be3e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 808be40:	68fb      	ldr	r3, [r7, #12]
 808be42:	68ba      	ldr	r2, [r7, #8]
 808be44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 808be46:	68fb      	ldr	r3, [r7, #12]
 808be48:	681b      	ldr	r3, [r3, #0]
 808be4a:	695b      	ldr	r3, [r3, #20]
 808be4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 808be50:	68fb      	ldr	r3, [r7, #12]
 808be52:	681b      	ldr	r3, [r3, #0]
 808be54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 808be58:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 808be5a:	68fb      	ldr	r3, [r7, #12]
 808be5c:	681b      	ldr	r3, [r3, #0]
 808be5e:	697a      	ldr	r2, [r7, #20]
 808be60:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 808be62:	e01a      	b.n	808be9a <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 808be64:	687b      	ldr	r3, [r7, #4]
 808be66:	9300      	str	r3, [sp, #0]
 808be68:	69bb      	ldr	r3, [r7, #24]
 808be6a:	2201      	movs	r2, #1
 808be6c:	2106      	movs	r1, #6
 808be6e:	68f8      	ldr	r0, [r7, #12]
 808be70:	f000 f99b 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808be74:	4603      	mov	r3, r0
 808be76:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 808be78:	7ffb      	ldrb	r3, [r7, #31]
 808be7a:	2b00      	cmp	r3, #0
 808be7c:	d112      	bne.n	808bea4 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 808be7e:	68fb      	ldr	r3, [r7, #12]
 808be80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808be82:	1c59      	adds	r1, r3, #1
 808be84:	68fa      	ldr	r2, [r7, #12]
 808be86:	6311      	str	r1, [r2, #48]	; 0x30
 808be88:	693a      	ldr	r2, [r7, #16]
 808be8a:	7812      	ldrb	r2, [r2, #0]
 808be8c:	b2d2      	uxtb	r2, r2
 808be8e:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 808be90:	68fb      	ldr	r3, [r7, #12]
 808be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808be94:	1e5a      	subs	r2, r3, #1
 808be96:	68fb      	ldr	r3, [r7, #12]
 808be98:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 808be9a:	68fb      	ldr	r3, [r7, #12]
 808be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808be9e:	2b00      	cmp	r3, #0
 808bea0:	d1e0      	bne.n	808be64 <HAL_QSPI_Receive+0x9a>
 808bea2:	e000      	b.n	808bea6 <HAL_QSPI_Receive+0xdc>
          break;
 808bea4:	bf00      	nop
      }
    
      if (status == HAL_OK)
 808bea6:	7ffb      	ldrb	r3, [r7, #31]
 808bea8:	2b00      	cmp	r3, #0
 808beaa:	d115      	bne.n	808bed8 <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 808beac:	687b      	ldr	r3, [r7, #4]
 808beae:	9300      	str	r3, [sp, #0]
 808beb0:	69bb      	ldr	r3, [r7, #24]
 808beb2:	2201      	movs	r2, #1
 808beb4:	2102      	movs	r1, #2
 808beb6:	68f8      	ldr	r0, [r7, #12]
 808beb8:	f000 f977 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bebc:	4603      	mov	r3, r0
 808bebe:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 808bec0:	7ffb      	ldrb	r3, [r7, #31]
 808bec2:	2b00      	cmp	r3, #0
 808bec4:	d108      	bne.n	808bed8 <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 808bec6:	68fb      	ldr	r3, [r7, #12]
 808bec8:	681b      	ldr	r3, [r3, #0]
 808beca:	2202      	movs	r2, #2
 808becc:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 808bece:	68f8      	ldr	r0, [r7, #12]
 808bed0:	f000 f8f8 	bl	808c0c4 <HAL_QSPI_Abort>
 808bed4:	4603      	mov	r3, r0
 808bed6:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 808bed8:	68fb      	ldr	r3, [r7, #12]
 808beda:	2201      	movs	r2, #1
 808bedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 808bee0:	e00a      	b.n	808bef8 <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 808bee2:	68fb      	ldr	r3, [r7, #12]
 808bee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808bee6:	f043 0208 	orr.w	r2, r3, #8
 808beea:	68fb      	ldr	r3, [r7, #12]
 808beec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 808beee:	2301      	movs	r3, #1
 808bef0:	77fb      	strb	r3, [r7, #31]
 808bef2:	e001      	b.n	808bef8 <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 808bef4:	2302      	movs	r3, #2
 808bef6:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 808bef8:	68fb      	ldr	r3, [r7, #12]
 808befa:	2200      	movs	r2, #0
 808befc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 808bf00:	7ffb      	ldrb	r3, [r7, #31]
}
 808bf02:	4618      	mov	r0, r3
 808bf04:	3720      	adds	r7, #32
 808bf06:	46bd      	mov	sp, r7
 808bf08:	bd80      	pop	{r7, pc}

0808bf0a <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 808bf0a:	b580      	push	{r7, lr}
 808bf0c:	b088      	sub	sp, #32
 808bf0e:	af02      	add	r7, sp, #8
 808bf10:	60f8      	str	r0, [r7, #12]
 808bf12:	60b9      	str	r1, [r7, #8]
 808bf14:	607a      	str	r2, [r7, #4]
 808bf16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 808bf18:	2301      	movs	r3, #1
 808bf1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 808bf1c:	f7fd f920 	bl	8089160 <HAL_GetTick>
 808bf20:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 808bf22:	68fb      	ldr	r3, [r7, #12]
 808bf24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808bf28:	b2db      	uxtb	r3, r3
 808bf2a:	2b01      	cmp	r3, #1
 808bf2c:	d101      	bne.n	808bf32 <HAL_QSPI_AutoPolling+0x28>
 808bf2e:	2302      	movs	r3, #2
 808bf30:	e060      	b.n	808bff4 <HAL_QSPI_AutoPolling+0xea>
 808bf32:	68fb      	ldr	r3, [r7, #12]
 808bf34:	2201      	movs	r2, #1
 808bf36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 808bf3a:	68fb      	ldr	r3, [r7, #12]
 808bf3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808bf40:	b2db      	uxtb	r3, r3
 808bf42:	2b01      	cmp	r3, #1
 808bf44:	d14f      	bne.n	808bfe6 <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808bf46:	68fb      	ldr	r3, [r7, #12]
 808bf48:	2200      	movs	r2, #0
 808bf4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 808bf4c:	68fb      	ldr	r3, [r7, #12]
 808bf4e:	2242      	movs	r2, #66	; 0x42
 808bf50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 808bf54:	683b      	ldr	r3, [r7, #0]
 808bf56:	9300      	str	r3, [sp, #0]
 808bf58:	693b      	ldr	r3, [r7, #16]
 808bf5a:	2200      	movs	r2, #0
 808bf5c:	2120      	movs	r1, #32
 808bf5e:	68f8      	ldr	r0, [r7, #12]
 808bf60:	f000 f923 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bf64:	4603      	mov	r3, r0
 808bf66:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 808bf68:	7dfb      	ldrb	r3, [r7, #23]
 808bf6a:	2b00      	cmp	r3, #0
 808bf6c:	d13d      	bne.n	808bfea <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 808bf6e:	68fb      	ldr	r3, [r7, #12]
 808bf70:	681b      	ldr	r3, [r3, #0]
 808bf72:	687a      	ldr	r2, [r7, #4]
 808bf74:	6812      	ldr	r2, [r2, #0]
 808bf76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 808bf78:	68fb      	ldr	r3, [r7, #12]
 808bf7a:	681b      	ldr	r3, [r3, #0]
 808bf7c:	687a      	ldr	r2, [r7, #4]
 808bf7e:	6852      	ldr	r2, [r2, #4]
 808bf80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 808bf82:	68fb      	ldr	r3, [r7, #12]
 808bf84:	681b      	ldr	r3, [r3, #0]
 808bf86:	687a      	ldr	r2, [r7, #4]
 808bf88:	6892      	ldr	r2, [r2, #8]
 808bf8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 808bf8c:	68fb      	ldr	r3, [r7, #12]
 808bf8e:	681b      	ldr	r3, [r3, #0]
 808bf90:	681b      	ldr	r3, [r3, #0]
 808bf92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 808bf96:	687b      	ldr	r3, [r7, #4]
 808bf98:	691b      	ldr	r3, [r3, #16]
 808bf9a:	431a      	orrs	r2, r3
 808bf9c:	68fb      	ldr	r3, [r7, #12]
 808bf9e:	681b      	ldr	r3, [r3, #0]
 808bfa0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 808bfa4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 808bfa6:	687b      	ldr	r3, [r7, #4]
 808bfa8:	68da      	ldr	r2, [r3, #12]
 808bfaa:	68bb      	ldr	r3, [r7, #8]
 808bfac:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 808bfae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 808bfb2:	68b9      	ldr	r1, [r7, #8]
 808bfb4:	68f8      	ldr	r0, [r7, #12]
 808bfb6:	f000 f92f 	bl	808c218 <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 808bfba:	683b      	ldr	r3, [r7, #0]
 808bfbc:	9300      	str	r3, [sp, #0]
 808bfbe:	693b      	ldr	r3, [r7, #16]
 808bfc0:	2201      	movs	r2, #1
 808bfc2:	2108      	movs	r1, #8
 808bfc4:	68f8      	ldr	r0, [r7, #12]
 808bfc6:	f000 f8f0 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808bfca:	4603      	mov	r3, r0
 808bfcc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 808bfce:	7dfb      	ldrb	r3, [r7, #23]
 808bfd0:	2b00      	cmp	r3, #0
 808bfd2:	d10a      	bne.n	808bfea <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 808bfd4:	68fb      	ldr	r3, [r7, #12]
 808bfd6:	681b      	ldr	r3, [r3, #0]
 808bfd8:	2208      	movs	r2, #8
 808bfda:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 808bfdc:	68fb      	ldr	r3, [r7, #12]
 808bfde:	2201      	movs	r2, #1
 808bfe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 808bfe4:	e001      	b.n	808bfea <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 808bfe6:	2302      	movs	r3, #2
 808bfe8:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 808bfea:	68fb      	ldr	r3, [r7, #12]
 808bfec:	2200      	movs	r2, #0
 808bfee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 808bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 808bff4:	4618      	mov	r0, r3
 808bff6:	3718      	adds	r7, #24
 808bff8:	46bd      	mov	sp, r7
 808bffa:	bd80      	pop	{r7, pc}

0808bffc <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 808bffc:	b580      	push	{r7, lr}
 808bffe:	b088      	sub	sp, #32
 808c000:	af02      	add	r7, sp, #8
 808c002:	60f8      	str	r0, [r7, #12]
 808c004:	60b9      	str	r1, [r7, #8]
 808c006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 808c008:	2301      	movs	r3, #1
 808c00a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 808c00c:	f7fd f8a8 	bl	8089160 <HAL_GetTick>
 808c010:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 808c012:	68fb      	ldr	r3, [r7, #12]
 808c014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 808c018:	b2db      	uxtb	r3, r3
 808c01a:	2b01      	cmp	r3, #1
 808c01c:	d101      	bne.n	808c022 <HAL_QSPI_MemoryMapped+0x26>
 808c01e:	2302      	movs	r3, #2
 808c020:	e04c      	b.n	808c0bc <HAL_QSPI_MemoryMapped+0xc0>
 808c022:	68fb      	ldr	r3, [r7, #12]
 808c024:	2201      	movs	r2, #1
 808c026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 808c02a:	68fb      	ldr	r3, [r7, #12]
 808c02c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808c030:	b2db      	uxtb	r3, r3
 808c032:	2b01      	cmp	r3, #1
 808c034:	d13b      	bne.n	808c0ae <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 808c036:	68fb      	ldr	r3, [r7, #12]
 808c038:	2200      	movs	r2, #0
 808c03a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 808c03c:	68fb      	ldr	r3, [r7, #12]
 808c03e:	2282      	movs	r2, #130	; 0x82
 808c040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 808c044:	68fb      	ldr	r3, [r7, #12]
 808c046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808c048:	9300      	str	r3, [sp, #0]
 808c04a:	693b      	ldr	r3, [r7, #16]
 808c04c:	2200      	movs	r2, #0
 808c04e:	2120      	movs	r1, #32
 808c050:	68f8      	ldr	r0, [r7, #12]
 808c052:	f000 f8aa 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808c056:	4603      	mov	r3, r0
 808c058:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 808c05a:	7dfb      	ldrb	r3, [r7, #23]
 808c05c:	2b00      	cmp	r3, #0
 808c05e:	d128      	bne.n	808c0b2 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 808c060:	68fb      	ldr	r3, [r7, #12]
 808c062:	681b      	ldr	r3, [r3, #0]
 808c064:	681b      	ldr	r3, [r3, #0]
 808c066:	f023 0108 	bic.w	r1, r3, #8
 808c06a:	687b      	ldr	r3, [r7, #4]
 808c06c:	685a      	ldr	r2, [r3, #4]
 808c06e:	68fb      	ldr	r3, [r7, #12]
 808c070:	681b      	ldr	r3, [r3, #0]
 808c072:	430a      	orrs	r2, r1
 808c074:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 808c076:	687b      	ldr	r3, [r7, #4]
 808c078:	685b      	ldr	r3, [r3, #4]
 808c07a:	2b08      	cmp	r3, #8
 808c07c:	d110      	bne.n	808c0a0 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 808c07e:	68fb      	ldr	r3, [r7, #12]
 808c080:	681b      	ldr	r3, [r3, #0]
 808c082:	687a      	ldr	r2, [r7, #4]
 808c084:	6812      	ldr	r2, [r2, #0]
 808c086:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 808c088:	68fb      	ldr	r3, [r7, #12]
 808c08a:	681b      	ldr	r3, [r3, #0]
 808c08c:	2210      	movs	r2, #16
 808c08e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 808c090:	68fb      	ldr	r3, [r7, #12]
 808c092:	681b      	ldr	r3, [r3, #0]
 808c094:	681a      	ldr	r2, [r3, #0]
 808c096:	68fb      	ldr	r3, [r7, #12]
 808c098:	681b      	ldr	r3, [r3, #0]
 808c09a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808c09e:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 808c0a0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 808c0a4:	68b9      	ldr	r1, [r7, #8]
 808c0a6:	68f8      	ldr	r0, [r7, #12]
 808c0a8:	f000 f8b6 	bl	808c218 <QSPI_Config>
 808c0ac:	e001      	b.n	808c0b2 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 808c0ae:	2302      	movs	r3, #2
 808c0b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 808c0b2:	68fb      	ldr	r3, [r7, #12]
 808c0b4:	2200      	movs	r2, #0
 808c0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 808c0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 808c0bc:	4618      	mov	r0, r3
 808c0be:	3718      	adds	r7, #24
 808c0c0:	46bd      	mov	sp, r7
 808c0c2:	bd80      	pop	{r7, pc}

0808c0c4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 808c0c4:	b580      	push	{r7, lr}
 808c0c6:	b086      	sub	sp, #24
 808c0c8:	af02      	add	r7, sp, #8
 808c0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 808c0cc:	2300      	movs	r3, #0
 808c0ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 808c0d0:	f7fd f846 	bl	8089160 <HAL_GetTick>
 808c0d4:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 808c0d6:	687b      	ldr	r3, [r7, #4]
 808c0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 808c0dc:	b2db      	uxtb	r3, r3
 808c0de:	f003 0302 	and.w	r3, r3, #2
 808c0e2:	2b00      	cmp	r3, #0
 808c0e4:	d04e      	beq.n	808c184 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 808c0e6:	687b      	ldr	r3, [r7, #4]
 808c0e8:	2200      	movs	r2, #0
 808c0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 808c0ee:	687b      	ldr	r3, [r7, #4]
 808c0f0:	681b      	ldr	r3, [r3, #0]
 808c0f2:	681b      	ldr	r3, [r3, #0]
 808c0f4:	f003 0304 	and.w	r3, r3, #4
 808c0f8:	2b00      	cmp	r3, #0
 808c0fa:	d017      	beq.n	808c12c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 808c0fc:	687b      	ldr	r3, [r7, #4]
 808c0fe:	681b      	ldr	r3, [r3, #0]
 808c100:	681a      	ldr	r2, [r3, #0]
 808c102:	687b      	ldr	r3, [r7, #4]
 808c104:	681b      	ldr	r3, [r3, #0]
 808c106:	f022 0204 	bic.w	r2, r2, #4
 808c10a:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 808c10c:	687b      	ldr	r3, [r7, #4]
 808c10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808c110:	4618      	mov	r0, r3
 808c112:	f7fd fac5 	bl	80896a0 <HAL_DMA_Abort>
 808c116:	4603      	mov	r3, r0
 808c118:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 808c11a:	7bfb      	ldrb	r3, [r7, #15]
 808c11c:	2b00      	cmp	r3, #0
 808c11e:	d005      	beq.n	808c12c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 808c120:	687b      	ldr	r3, [r7, #4]
 808c122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808c124:	f043 0204 	orr.w	r2, r3, #4
 808c128:	687b      	ldr	r3, [r7, #4]
 808c12a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 808c12c:	687b      	ldr	r3, [r7, #4]
 808c12e:	681b      	ldr	r3, [r3, #0]
 808c130:	681a      	ldr	r2, [r3, #0]
 808c132:	687b      	ldr	r3, [r7, #4]
 808c134:	681b      	ldr	r3, [r3, #0]
 808c136:	f042 0202 	orr.w	r2, r2, #2
 808c13a:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 808c13c:	687b      	ldr	r3, [r7, #4]
 808c13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808c140:	9300      	str	r3, [sp, #0]
 808c142:	68bb      	ldr	r3, [r7, #8]
 808c144:	2201      	movs	r2, #1
 808c146:	2102      	movs	r1, #2
 808c148:	6878      	ldr	r0, [r7, #4]
 808c14a:	f000 f82e 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808c14e:	4603      	mov	r3, r0
 808c150:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 808c152:	7bfb      	ldrb	r3, [r7, #15]
 808c154:	2b00      	cmp	r3, #0
 808c156:	d10e      	bne.n	808c176 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 808c158:	687b      	ldr	r3, [r7, #4]
 808c15a:	681b      	ldr	r3, [r3, #0]
 808c15c:	2202      	movs	r2, #2
 808c15e:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 808c160:	687b      	ldr	r3, [r7, #4]
 808c162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808c164:	9300      	str	r3, [sp, #0]
 808c166:	68bb      	ldr	r3, [r7, #8]
 808c168:	2200      	movs	r2, #0
 808c16a:	2120      	movs	r1, #32
 808c16c:	6878      	ldr	r0, [r7, #4]
 808c16e:	f000 f81c 	bl	808c1aa <QSPI_WaitFlagStateUntilTimeout>
 808c172:	4603      	mov	r3, r0
 808c174:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 808c176:	7bfb      	ldrb	r3, [r7, #15]
 808c178:	2b00      	cmp	r3, #0
 808c17a:	d103      	bne.n	808c184 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 808c17c:	687b      	ldr	r3, [r7, #4]
 808c17e:	2201      	movs	r2, #1
 808c180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 808c184:	7bfb      	ldrb	r3, [r7, #15]
}
 808c186:	4618      	mov	r0, r3
 808c188:	3710      	adds	r7, #16
 808c18a:	46bd      	mov	sp, r7
 808c18c:	bd80      	pop	{r7, pc}

0808c18e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 808c18e:	b480      	push	{r7}
 808c190:	b083      	sub	sp, #12
 808c192:	af00      	add	r7, sp, #0
 808c194:	6078      	str	r0, [r7, #4]
 808c196:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 808c198:	687b      	ldr	r3, [r7, #4]
 808c19a:	683a      	ldr	r2, [r7, #0]
 808c19c:	649a      	str	r2, [r3, #72]	; 0x48
}
 808c19e:	bf00      	nop
 808c1a0:	370c      	adds	r7, #12
 808c1a2:	46bd      	mov	sp, r7
 808c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 808c1a8:	4770      	bx	lr

0808c1aa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 808c1aa:	b580      	push	{r7, lr}
 808c1ac:	b084      	sub	sp, #16
 808c1ae:	af00      	add	r7, sp, #0
 808c1b0:	60f8      	str	r0, [r7, #12]
 808c1b2:	60b9      	str	r1, [r7, #8]
 808c1b4:	603b      	str	r3, [r7, #0]
 808c1b6:	4613      	mov	r3, r2
 808c1b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 808c1ba:	e01a      	b.n	808c1f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 808c1bc:	69bb      	ldr	r3, [r7, #24]
 808c1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808c1c2:	d016      	beq.n	808c1f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 808c1c4:	69bb      	ldr	r3, [r7, #24]
 808c1c6:	2b00      	cmp	r3, #0
 808c1c8:	d007      	beq.n	808c1da <QSPI_WaitFlagStateUntilTimeout+0x30>
 808c1ca:	f7fc ffc9 	bl	8089160 <HAL_GetTick>
 808c1ce:	4602      	mov	r2, r0
 808c1d0:	683b      	ldr	r3, [r7, #0]
 808c1d2:	1ad3      	subs	r3, r2, r3
 808c1d4:	69ba      	ldr	r2, [r7, #24]
 808c1d6:	429a      	cmp	r2, r3
 808c1d8:	d20b      	bcs.n	808c1f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 808c1da:	68fb      	ldr	r3, [r7, #12]
 808c1dc:	2204      	movs	r2, #4
 808c1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 808c1e2:	68fb      	ldr	r3, [r7, #12]
 808c1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808c1e6:	f043 0201 	orr.w	r2, r3, #1
 808c1ea:	68fb      	ldr	r3, [r7, #12]
 808c1ec:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 808c1ee:	2301      	movs	r3, #1
 808c1f0:	e00e      	b.n	808c210 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 808c1f2:	68fb      	ldr	r3, [r7, #12]
 808c1f4:	681b      	ldr	r3, [r3, #0]
 808c1f6:	689a      	ldr	r2, [r3, #8]
 808c1f8:	68bb      	ldr	r3, [r7, #8]
 808c1fa:	4013      	ands	r3, r2
 808c1fc:	2b00      	cmp	r3, #0
 808c1fe:	bf14      	ite	ne
 808c200:	2301      	movne	r3, #1
 808c202:	2300      	moveq	r3, #0
 808c204:	b2db      	uxtb	r3, r3
 808c206:	461a      	mov	r2, r3
 808c208:	79fb      	ldrb	r3, [r7, #7]
 808c20a:	429a      	cmp	r2, r3
 808c20c:	d1d6      	bne.n	808c1bc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 808c20e:	2300      	movs	r3, #0
}
 808c210:	4618      	mov	r0, r3
 808c212:	3710      	adds	r7, #16
 808c214:	46bd      	mov	sp, r7
 808c216:	bd80      	pop	{r7, pc}

0808c218 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 808c218:	b480      	push	{r7}
 808c21a:	b085      	sub	sp, #20
 808c21c:	af00      	add	r7, sp, #0
 808c21e:	60f8      	str	r0, [r7, #12]
 808c220:	60b9      	str	r1, [r7, #8]
 808c222:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 808c224:	68bb      	ldr	r3, [r7, #8]
 808c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c228:	2b00      	cmp	r3, #0
 808c22a:	d009      	beq.n	808c240 <QSPI_Config+0x28>
 808c22c:	687b      	ldr	r3, [r7, #4]
 808c22e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 808c232:	d005      	beq.n	808c240 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 808c234:	68bb      	ldr	r3, [r7, #8]
 808c236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 808c238:	68fb      	ldr	r3, [r7, #12]
 808c23a:	681b      	ldr	r3, [r3, #0]
 808c23c:	3a01      	subs	r2, #1
 808c23e:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 808c240:	68bb      	ldr	r3, [r7, #8]
 808c242:	699b      	ldr	r3, [r3, #24]
 808c244:	2b00      	cmp	r3, #0
 808c246:	f000 80b9 	beq.w	808c3bc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 808c24a:	68bb      	ldr	r3, [r7, #8]
 808c24c:	6a1b      	ldr	r3, [r3, #32]
 808c24e:	2b00      	cmp	r3, #0
 808c250:	d05f      	beq.n	808c312 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 808c252:	68fb      	ldr	r3, [r7, #12]
 808c254:	681b      	ldr	r3, [r3, #0]
 808c256:	68ba      	ldr	r2, [r7, #8]
 808c258:	6892      	ldr	r2, [r2, #8]
 808c25a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 808c25c:	68bb      	ldr	r3, [r7, #8]
 808c25e:	69db      	ldr	r3, [r3, #28]
 808c260:	2b00      	cmp	r3, #0
 808c262:	d031      	beq.n	808c2c8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c264:	68bb      	ldr	r3, [r7, #8]
 808c266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c268:	68bb      	ldr	r3, [r7, #8]
 808c26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c26c:	431a      	orrs	r2, r3
 808c26e:	68bb      	ldr	r3, [r7, #8]
 808c270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c272:	431a      	orrs	r2, r3
 808c274:	68bb      	ldr	r3, [r7, #8]
 808c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c278:	431a      	orrs	r2, r3
 808c27a:	68bb      	ldr	r3, [r7, #8]
 808c27c:	695b      	ldr	r3, [r3, #20]
 808c27e:	049b      	lsls	r3, r3, #18
 808c280:	431a      	orrs	r2, r3
 808c282:	68bb      	ldr	r3, [r7, #8]
 808c284:	691b      	ldr	r3, [r3, #16]
 808c286:	431a      	orrs	r2, r3
 808c288:	68bb      	ldr	r3, [r7, #8]
 808c28a:	6a1b      	ldr	r3, [r3, #32]
 808c28c:	431a      	orrs	r2, r3
 808c28e:	68bb      	ldr	r3, [r7, #8]
 808c290:	68db      	ldr	r3, [r3, #12]
 808c292:	431a      	orrs	r2, r3
 808c294:	68bb      	ldr	r3, [r7, #8]
 808c296:	69db      	ldr	r3, [r3, #28]
 808c298:	431a      	orrs	r2, r3
 808c29a:	68bb      	ldr	r3, [r7, #8]
 808c29c:	699b      	ldr	r3, [r3, #24]
 808c29e:	431a      	orrs	r2, r3
 808c2a0:	68bb      	ldr	r3, [r7, #8]
 808c2a2:	681b      	ldr	r3, [r3, #0]
 808c2a4:	ea42 0103 	orr.w	r1, r2, r3
 808c2a8:	68fb      	ldr	r3, [r7, #12]
 808c2aa:	681b      	ldr	r3, [r3, #0]
 808c2ac:	687a      	ldr	r2, [r7, #4]
 808c2ae:	430a      	orrs	r2, r1
 808c2b0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 808c2b2:	687b      	ldr	r3, [r7, #4]
 808c2b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 808c2b8:	f000 812e 	beq.w	808c518 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 808c2bc:	68fb      	ldr	r3, [r7, #12]
 808c2be:	681b      	ldr	r3, [r3, #0]
 808c2c0:	68ba      	ldr	r2, [r7, #8]
 808c2c2:	6852      	ldr	r2, [r2, #4]
 808c2c4:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 808c2c6:	e127      	b.n	808c518 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c2c8:	68bb      	ldr	r3, [r7, #8]
 808c2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c2cc:	68bb      	ldr	r3, [r7, #8]
 808c2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c2d0:	431a      	orrs	r2, r3
 808c2d2:	68bb      	ldr	r3, [r7, #8]
 808c2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c2d6:	431a      	orrs	r2, r3
 808c2d8:	68bb      	ldr	r3, [r7, #8]
 808c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c2dc:	431a      	orrs	r2, r3
 808c2de:	68bb      	ldr	r3, [r7, #8]
 808c2e0:	695b      	ldr	r3, [r3, #20]
 808c2e2:	049b      	lsls	r3, r3, #18
 808c2e4:	431a      	orrs	r2, r3
 808c2e6:	68bb      	ldr	r3, [r7, #8]
 808c2e8:	691b      	ldr	r3, [r3, #16]
 808c2ea:	431a      	orrs	r2, r3
 808c2ec:	68bb      	ldr	r3, [r7, #8]
 808c2ee:	6a1b      	ldr	r3, [r3, #32]
 808c2f0:	431a      	orrs	r2, r3
 808c2f2:	68bb      	ldr	r3, [r7, #8]
 808c2f4:	69db      	ldr	r3, [r3, #28]
 808c2f6:	431a      	orrs	r2, r3
 808c2f8:	68bb      	ldr	r3, [r7, #8]
 808c2fa:	699b      	ldr	r3, [r3, #24]
 808c2fc:	431a      	orrs	r2, r3
 808c2fe:	68bb      	ldr	r3, [r7, #8]
 808c300:	681b      	ldr	r3, [r3, #0]
 808c302:	ea42 0103 	orr.w	r1, r2, r3
 808c306:	68fb      	ldr	r3, [r7, #12]
 808c308:	681b      	ldr	r3, [r3, #0]
 808c30a:	687a      	ldr	r2, [r7, #4]
 808c30c:	430a      	orrs	r2, r1
 808c30e:	615a      	str	r2, [r3, #20]
}
 808c310:	e102      	b.n	808c518 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 808c312:	68bb      	ldr	r3, [r7, #8]
 808c314:	69db      	ldr	r3, [r3, #28]
 808c316:	2b00      	cmp	r3, #0
 808c318:	d02e      	beq.n	808c378 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c31a:	68bb      	ldr	r3, [r7, #8]
 808c31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c31e:	68bb      	ldr	r3, [r7, #8]
 808c320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c322:	431a      	orrs	r2, r3
 808c324:	68bb      	ldr	r3, [r7, #8]
 808c326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c328:	431a      	orrs	r2, r3
 808c32a:	68bb      	ldr	r3, [r7, #8]
 808c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c32e:	431a      	orrs	r2, r3
 808c330:	68bb      	ldr	r3, [r7, #8]
 808c332:	695b      	ldr	r3, [r3, #20]
 808c334:	049b      	lsls	r3, r3, #18
 808c336:	431a      	orrs	r2, r3
 808c338:	68bb      	ldr	r3, [r7, #8]
 808c33a:	6a1b      	ldr	r3, [r3, #32]
 808c33c:	431a      	orrs	r2, r3
 808c33e:	68bb      	ldr	r3, [r7, #8]
 808c340:	68db      	ldr	r3, [r3, #12]
 808c342:	431a      	orrs	r2, r3
 808c344:	68bb      	ldr	r3, [r7, #8]
 808c346:	69db      	ldr	r3, [r3, #28]
 808c348:	431a      	orrs	r2, r3
 808c34a:	68bb      	ldr	r3, [r7, #8]
 808c34c:	699b      	ldr	r3, [r3, #24]
 808c34e:	431a      	orrs	r2, r3
 808c350:	68bb      	ldr	r3, [r7, #8]
 808c352:	681b      	ldr	r3, [r3, #0]
 808c354:	ea42 0103 	orr.w	r1, r2, r3
 808c358:	68fb      	ldr	r3, [r7, #12]
 808c35a:	681b      	ldr	r3, [r3, #0]
 808c35c:	687a      	ldr	r2, [r7, #4]
 808c35e:	430a      	orrs	r2, r1
 808c360:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 808c362:	687b      	ldr	r3, [r7, #4]
 808c364:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 808c368:	f000 80d6 	beq.w	808c518 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 808c36c:	68fb      	ldr	r3, [r7, #12]
 808c36e:	681b      	ldr	r3, [r3, #0]
 808c370:	68ba      	ldr	r2, [r7, #8]
 808c372:	6852      	ldr	r2, [r2, #4]
 808c374:	619a      	str	r2, [r3, #24]
}
 808c376:	e0cf      	b.n	808c518 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c378:	68bb      	ldr	r3, [r7, #8]
 808c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c37c:	68bb      	ldr	r3, [r7, #8]
 808c37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c380:	431a      	orrs	r2, r3
 808c382:	68bb      	ldr	r3, [r7, #8]
 808c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c386:	431a      	orrs	r2, r3
 808c388:	68bb      	ldr	r3, [r7, #8]
 808c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c38c:	431a      	orrs	r2, r3
 808c38e:	68bb      	ldr	r3, [r7, #8]
 808c390:	695b      	ldr	r3, [r3, #20]
 808c392:	049b      	lsls	r3, r3, #18
 808c394:	431a      	orrs	r2, r3
 808c396:	68bb      	ldr	r3, [r7, #8]
 808c398:	6a1b      	ldr	r3, [r3, #32]
 808c39a:	431a      	orrs	r2, r3
 808c39c:	68bb      	ldr	r3, [r7, #8]
 808c39e:	69db      	ldr	r3, [r3, #28]
 808c3a0:	431a      	orrs	r2, r3
 808c3a2:	68bb      	ldr	r3, [r7, #8]
 808c3a4:	699b      	ldr	r3, [r3, #24]
 808c3a6:	431a      	orrs	r2, r3
 808c3a8:	68bb      	ldr	r3, [r7, #8]
 808c3aa:	681b      	ldr	r3, [r3, #0]
 808c3ac:	ea42 0103 	orr.w	r1, r2, r3
 808c3b0:	68fb      	ldr	r3, [r7, #12]
 808c3b2:	681b      	ldr	r3, [r3, #0]
 808c3b4:	687a      	ldr	r2, [r7, #4]
 808c3b6:	430a      	orrs	r2, r1
 808c3b8:	615a      	str	r2, [r3, #20]
}
 808c3ba:	e0ad      	b.n	808c518 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 808c3bc:	68bb      	ldr	r3, [r7, #8]
 808c3be:	6a1b      	ldr	r3, [r3, #32]
 808c3c0:	2b00      	cmp	r3, #0
 808c3c2:	d058      	beq.n	808c476 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 808c3c4:	68fb      	ldr	r3, [r7, #12]
 808c3c6:	681b      	ldr	r3, [r3, #0]
 808c3c8:	68ba      	ldr	r2, [r7, #8]
 808c3ca:	6892      	ldr	r2, [r2, #8]
 808c3cc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 808c3ce:	68bb      	ldr	r3, [r7, #8]
 808c3d0:	69db      	ldr	r3, [r3, #28]
 808c3d2:	2b00      	cmp	r3, #0
 808c3d4:	d02d      	beq.n	808c432 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c3d6:	68bb      	ldr	r3, [r7, #8]
 808c3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c3da:	68bb      	ldr	r3, [r7, #8]
 808c3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c3de:	431a      	orrs	r2, r3
 808c3e0:	68bb      	ldr	r3, [r7, #8]
 808c3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c3e4:	431a      	orrs	r2, r3
 808c3e6:	68bb      	ldr	r3, [r7, #8]
 808c3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c3ea:	431a      	orrs	r2, r3
 808c3ec:	68bb      	ldr	r3, [r7, #8]
 808c3ee:	695b      	ldr	r3, [r3, #20]
 808c3f0:	049b      	lsls	r3, r3, #18
 808c3f2:	431a      	orrs	r2, r3
 808c3f4:	68bb      	ldr	r3, [r7, #8]
 808c3f6:	691b      	ldr	r3, [r3, #16]
 808c3f8:	431a      	orrs	r2, r3
 808c3fa:	68bb      	ldr	r3, [r7, #8]
 808c3fc:	6a1b      	ldr	r3, [r3, #32]
 808c3fe:	431a      	orrs	r2, r3
 808c400:	68bb      	ldr	r3, [r7, #8]
 808c402:	68db      	ldr	r3, [r3, #12]
 808c404:	431a      	orrs	r2, r3
 808c406:	68bb      	ldr	r3, [r7, #8]
 808c408:	69db      	ldr	r3, [r3, #28]
 808c40a:	431a      	orrs	r2, r3
 808c40c:	68bb      	ldr	r3, [r7, #8]
 808c40e:	699b      	ldr	r3, [r3, #24]
 808c410:	ea42 0103 	orr.w	r1, r2, r3
 808c414:	68fb      	ldr	r3, [r7, #12]
 808c416:	681b      	ldr	r3, [r3, #0]
 808c418:	687a      	ldr	r2, [r7, #4]
 808c41a:	430a      	orrs	r2, r1
 808c41c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 808c41e:	687b      	ldr	r3, [r7, #4]
 808c420:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 808c424:	d078      	beq.n	808c518 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 808c426:	68fb      	ldr	r3, [r7, #12]
 808c428:	681b      	ldr	r3, [r3, #0]
 808c42a:	68ba      	ldr	r2, [r7, #8]
 808c42c:	6852      	ldr	r2, [r2, #4]
 808c42e:	619a      	str	r2, [r3, #24]
}
 808c430:	e072      	b.n	808c518 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c432:	68bb      	ldr	r3, [r7, #8]
 808c434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c436:	68bb      	ldr	r3, [r7, #8]
 808c438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c43a:	431a      	orrs	r2, r3
 808c43c:	68bb      	ldr	r3, [r7, #8]
 808c43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c440:	431a      	orrs	r2, r3
 808c442:	68bb      	ldr	r3, [r7, #8]
 808c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c446:	431a      	orrs	r2, r3
 808c448:	68bb      	ldr	r3, [r7, #8]
 808c44a:	695b      	ldr	r3, [r3, #20]
 808c44c:	049b      	lsls	r3, r3, #18
 808c44e:	431a      	orrs	r2, r3
 808c450:	68bb      	ldr	r3, [r7, #8]
 808c452:	691b      	ldr	r3, [r3, #16]
 808c454:	431a      	orrs	r2, r3
 808c456:	68bb      	ldr	r3, [r7, #8]
 808c458:	6a1b      	ldr	r3, [r3, #32]
 808c45a:	431a      	orrs	r2, r3
 808c45c:	68bb      	ldr	r3, [r7, #8]
 808c45e:	69db      	ldr	r3, [r3, #28]
 808c460:	431a      	orrs	r2, r3
 808c462:	68bb      	ldr	r3, [r7, #8]
 808c464:	699b      	ldr	r3, [r3, #24]
 808c466:	ea42 0103 	orr.w	r1, r2, r3
 808c46a:	68fb      	ldr	r3, [r7, #12]
 808c46c:	681b      	ldr	r3, [r3, #0]
 808c46e:	687a      	ldr	r2, [r7, #4]
 808c470:	430a      	orrs	r2, r1
 808c472:	615a      	str	r2, [r3, #20]
}
 808c474:	e050      	b.n	808c518 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 808c476:	68bb      	ldr	r3, [r7, #8]
 808c478:	69db      	ldr	r3, [r3, #28]
 808c47a:	2b00      	cmp	r3, #0
 808c47c:	d02a      	beq.n	808c4d4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c47e:	68bb      	ldr	r3, [r7, #8]
 808c480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c482:	68bb      	ldr	r3, [r7, #8]
 808c484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c486:	431a      	orrs	r2, r3
 808c488:	68bb      	ldr	r3, [r7, #8]
 808c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c48c:	431a      	orrs	r2, r3
 808c48e:	68bb      	ldr	r3, [r7, #8]
 808c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c492:	431a      	orrs	r2, r3
 808c494:	68bb      	ldr	r3, [r7, #8]
 808c496:	695b      	ldr	r3, [r3, #20]
 808c498:	049b      	lsls	r3, r3, #18
 808c49a:	431a      	orrs	r2, r3
 808c49c:	68bb      	ldr	r3, [r7, #8]
 808c49e:	6a1b      	ldr	r3, [r3, #32]
 808c4a0:	431a      	orrs	r2, r3
 808c4a2:	68bb      	ldr	r3, [r7, #8]
 808c4a4:	68db      	ldr	r3, [r3, #12]
 808c4a6:	431a      	orrs	r2, r3
 808c4a8:	68bb      	ldr	r3, [r7, #8]
 808c4aa:	69db      	ldr	r3, [r3, #28]
 808c4ac:	431a      	orrs	r2, r3
 808c4ae:	68bb      	ldr	r3, [r7, #8]
 808c4b0:	699b      	ldr	r3, [r3, #24]
 808c4b2:	ea42 0103 	orr.w	r1, r2, r3
 808c4b6:	68fb      	ldr	r3, [r7, #12]
 808c4b8:	681b      	ldr	r3, [r3, #0]
 808c4ba:	687a      	ldr	r2, [r7, #4]
 808c4bc:	430a      	orrs	r2, r1
 808c4be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 808c4c0:	687b      	ldr	r3, [r7, #4]
 808c4c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 808c4c6:	d027      	beq.n	808c518 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 808c4c8:	68fb      	ldr	r3, [r7, #12]
 808c4ca:	681b      	ldr	r3, [r3, #0]
 808c4cc:	68ba      	ldr	r2, [r7, #8]
 808c4ce:	6852      	ldr	r2, [r2, #4]
 808c4d0:	619a      	str	r2, [r3, #24]
}
 808c4d2:	e021      	b.n	808c518 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 808c4d4:	68bb      	ldr	r3, [r7, #8]
 808c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c4d8:	2b00      	cmp	r3, #0
 808c4da:	d01d      	beq.n	808c518 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 808c4dc:	68bb      	ldr	r3, [r7, #8]
 808c4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 808c4e0:	68bb      	ldr	r3, [r7, #8]
 808c4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808c4e4:	431a      	orrs	r2, r3
 808c4e6:	68bb      	ldr	r3, [r7, #8]
 808c4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808c4ea:	431a      	orrs	r2, r3
 808c4ec:	68bb      	ldr	r3, [r7, #8]
 808c4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c4f0:	431a      	orrs	r2, r3
 808c4f2:	68bb      	ldr	r3, [r7, #8]
 808c4f4:	695b      	ldr	r3, [r3, #20]
 808c4f6:	049b      	lsls	r3, r3, #18
 808c4f8:	431a      	orrs	r2, r3
 808c4fa:	68bb      	ldr	r3, [r7, #8]
 808c4fc:	6a1b      	ldr	r3, [r3, #32]
 808c4fe:	431a      	orrs	r2, r3
 808c500:	68bb      	ldr	r3, [r7, #8]
 808c502:	69db      	ldr	r3, [r3, #28]
 808c504:	431a      	orrs	r2, r3
 808c506:	68bb      	ldr	r3, [r7, #8]
 808c508:	699b      	ldr	r3, [r3, #24]
 808c50a:	ea42 0103 	orr.w	r1, r2, r3
 808c50e:	68fb      	ldr	r3, [r7, #12]
 808c510:	681b      	ldr	r3, [r3, #0]
 808c512:	687a      	ldr	r2, [r7, #4]
 808c514:	430a      	orrs	r2, r1
 808c516:	615a      	str	r2, [r3, #20]
}
 808c518:	bf00      	nop
 808c51a:	3714      	adds	r7, #20
 808c51c:	46bd      	mov	sp, r7
 808c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 808c522:	4770      	bx	lr

0808c524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 808c524:	b580      	push	{r7, lr}
 808c526:	b086      	sub	sp, #24
 808c528:	af00      	add	r7, sp, #0
 808c52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 808c52c:	2300      	movs	r3, #0
 808c52e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 808c530:	687b      	ldr	r3, [r7, #4]
 808c532:	2b00      	cmp	r3, #0
 808c534:	d101      	bne.n	808c53a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 808c536:	2301      	movs	r3, #1
 808c538:	e25c      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 808c53a:	687b      	ldr	r3, [r7, #4]
 808c53c:	681b      	ldr	r3, [r3, #0]
 808c53e:	f003 0301 	and.w	r3, r3, #1
 808c542:	2b00      	cmp	r3, #0
 808c544:	f000 8087 	beq.w	808c656 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 808c548:	4b96      	ldr	r3, [pc, #600]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c54a:	689b      	ldr	r3, [r3, #8]
 808c54c:	f003 030c 	and.w	r3, r3, #12
 808c550:	2b04      	cmp	r3, #4
 808c552:	d00c      	beq.n	808c56e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 808c554:	4b93      	ldr	r3, [pc, #588]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c556:	689b      	ldr	r3, [r3, #8]
 808c558:	f003 030c 	and.w	r3, r3, #12
 808c55c:	2b08      	cmp	r3, #8
 808c55e:	d112      	bne.n	808c586 <HAL_RCC_OscConfig+0x62>
 808c560:	4b90      	ldr	r3, [pc, #576]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c562:	685b      	ldr	r3, [r3, #4]
 808c564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808c568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 808c56c:	d10b      	bne.n	808c586 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 808c56e:	4b8d      	ldr	r3, [pc, #564]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c570:	681b      	ldr	r3, [r3, #0]
 808c572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808c576:	2b00      	cmp	r3, #0
 808c578:	d06c      	beq.n	808c654 <HAL_RCC_OscConfig+0x130>
 808c57a:	687b      	ldr	r3, [r7, #4]
 808c57c:	685b      	ldr	r3, [r3, #4]
 808c57e:	2b00      	cmp	r3, #0
 808c580:	d168      	bne.n	808c654 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 808c582:	2301      	movs	r3, #1
 808c584:	e236      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 808c586:	687b      	ldr	r3, [r7, #4]
 808c588:	685b      	ldr	r3, [r3, #4]
 808c58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808c58e:	d106      	bne.n	808c59e <HAL_RCC_OscConfig+0x7a>
 808c590:	4b84      	ldr	r3, [pc, #528]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c592:	681b      	ldr	r3, [r3, #0]
 808c594:	4a83      	ldr	r2, [pc, #524]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808c59a:	6013      	str	r3, [r2, #0]
 808c59c:	e02e      	b.n	808c5fc <HAL_RCC_OscConfig+0xd8>
 808c59e:	687b      	ldr	r3, [r7, #4]
 808c5a0:	685b      	ldr	r3, [r3, #4]
 808c5a2:	2b00      	cmp	r3, #0
 808c5a4:	d10c      	bne.n	808c5c0 <HAL_RCC_OscConfig+0x9c>
 808c5a6:	4b7f      	ldr	r3, [pc, #508]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5a8:	681b      	ldr	r3, [r3, #0]
 808c5aa:	4a7e      	ldr	r2, [pc, #504]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 808c5b0:	6013      	str	r3, [r2, #0]
 808c5b2:	4b7c      	ldr	r3, [pc, #496]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5b4:	681b      	ldr	r3, [r3, #0]
 808c5b6:	4a7b      	ldr	r2, [pc, #492]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 808c5bc:	6013      	str	r3, [r2, #0]
 808c5be:	e01d      	b.n	808c5fc <HAL_RCC_OscConfig+0xd8>
 808c5c0:	687b      	ldr	r3, [r7, #4]
 808c5c2:	685b      	ldr	r3, [r3, #4]
 808c5c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 808c5c8:	d10c      	bne.n	808c5e4 <HAL_RCC_OscConfig+0xc0>
 808c5ca:	4b76      	ldr	r3, [pc, #472]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5cc:	681b      	ldr	r3, [r3, #0]
 808c5ce:	4a75      	ldr	r2, [pc, #468]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 808c5d4:	6013      	str	r3, [r2, #0]
 808c5d6:	4b73      	ldr	r3, [pc, #460]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5d8:	681b      	ldr	r3, [r3, #0]
 808c5da:	4a72      	ldr	r2, [pc, #456]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808c5e0:	6013      	str	r3, [r2, #0]
 808c5e2:	e00b      	b.n	808c5fc <HAL_RCC_OscConfig+0xd8>
 808c5e4:	4b6f      	ldr	r3, [pc, #444]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5e6:	681b      	ldr	r3, [r3, #0]
 808c5e8:	4a6e      	ldr	r2, [pc, #440]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 808c5ee:	6013      	str	r3, [r2, #0]
 808c5f0:	4b6c      	ldr	r3, [pc, #432]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5f2:	681b      	ldr	r3, [r3, #0]
 808c5f4:	4a6b      	ldr	r2, [pc, #428]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c5f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 808c5fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 808c5fc:	687b      	ldr	r3, [r7, #4]
 808c5fe:	685b      	ldr	r3, [r3, #4]
 808c600:	2b00      	cmp	r3, #0
 808c602:	d013      	beq.n	808c62c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c604:	f7fc fdac 	bl	8089160 <HAL_GetTick>
 808c608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808c60a:	e008      	b.n	808c61e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 808c60c:	f7fc fda8 	bl	8089160 <HAL_GetTick>
 808c610:	4602      	mov	r2, r0
 808c612:	693b      	ldr	r3, [r7, #16]
 808c614:	1ad3      	subs	r3, r2, r3
 808c616:	2b64      	cmp	r3, #100	; 0x64
 808c618:	d901      	bls.n	808c61e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 808c61a:	2303      	movs	r3, #3
 808c61c:	e1ea      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808c61e:	4b61      	ldr	r3, [pc, #388]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c620:	681b      	ldr	r3, [r3, #0]
 808c622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808c626:	2b00      	cmp	r3, #0
 808c628:	d0f0      	beq.n	808c60c <HAL_RCC_OscConfig+0xe8>
 808c62a:	e014      	b.n	808c656 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c62c:	f7fc fd98 	bl	8089160 <HAL_GetTick>
 808c630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 808c632:	e008      	b.n	808c646 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 808c634:	f7fc fd94 	bl	8089160 <HAL_GetTick>
 808c638:	4602      	mov	r2, r0
 808c63a:	693b      	ldr	r3, [r7, #16]
 808c63c:	1ad3      	subs	r3, r2, r3
 808c63e:	2b64      	cmp	r3, #100	; 0x64
 808c640:	d901      	bls.n	808c646 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 808c642:	2303      	movs	r3, #3
 808c644:	e1d6      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 808c646:	4b57      	ldr	r3, [pc, #348]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c648:	681b      	ldr	r3, [r3, #0]
 808c64a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808c64e:	2b00      	cmp	r3, #0
 808c650:	d1f0      	bne.n	808c634 <HAL_RCC_OscConfig+0x110>
 808c652:	e000      	b.n	808c656 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 808c654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 808c656:	687b      	ldr	r3, [r7, #4]
 808c658:	681b      	ldr	r3, [r3, #0]
 808c65a:	f003 0302 	and.w	r3, r3, #2
 808c65e:	2b00      	cmp	r3, #0
 808c660:	d069      	beq.n	808c736 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 808c662:	4b50      	ldr	r3, [pc, #320]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c664:	689b      	ldr	r3, [r3, #8]
 808c666:	f003 030c 	and.w	r3, r3, #12
 808c66a:	2b00      	cmp	r3, #0
 808c66c:	d00b      	beq.n	808c686 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 808c66e:	4b4d      	ldr	r3, [pc, #308]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c670:	689b      	ldr	r3, [r3, #8]
 808c672:	f003 030c 	and.w	r3, r3, #12
 808c676:	2b08      	cmp	r3, #8
 808c678:	d11c      	bne.n	808c6b4 <HAL_RCC_OscConfig+0x190>
 808c67a:	4b4a      	ldr	r3, [pc, #296]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c67c:	685b      	ldr	r3, [r3, #4]
 808c67e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808c682:	2b00      	cmp	r3, #0
 808c684:	d116      	bne.n	808c6b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 808c686:	4b47      	ldr	r3, [pc, #284]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c688:	681b      	ldr	r3, [r3, #0]
 808c68a:	f003 0302 	and.w	r3, r3, #2
 808c68e:	2b00      	cmp	r3, #0
 808c690:	d005      	beq.n	808c69e <HAL_RCC_OscConfig+0x17a>
 808c692:	687b      	ldr	r3, [r7, #4]
 808c694:	68db      	ldr	r3, [r3, #12]
 808c696:	2b01      	cmp	r3, #1
 808c698:	d001      	beq.n	808c69e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 808c69a:	2301      	movs	r3, #1
 808c69c:	e1aa      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 808c69e:	4b41      	ldr	r3, [pc, #260]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6a0:	681b      	ldr	r3, [r3, #0]
 808c6a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 808c6a6:	687b      	ldr	r3, [r7, #4]
 808c6a8:	691b      	ldr	r3, [r3, #16]
 808c6aa:	00db      	lsls	r3, r3, #3
 808c6ac:	493d      	ldr	r1, [pc, #244]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6ae:	4313      	orrs	r3, r2
 808c6b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 808c6b2:	e040      	b.n	808c736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 808c6b4:	687b      	ldr	r3, [r7, #4]
 808c6b6:	68db      	ldr	r3, [r3, #12]
 808c6b8:	2b00      	cmp	r3, #0
 808c6ba:	d023      	beq.n	808c704 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 808c6bc:	4b39      	ldr	r3, [pc, #228]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6be:	681b      	ldr	r3, [r3, #0]
 808c6c0:	4a38      	ldr	r2, [pc, #224]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6c2:	f043 0301 	orr.w	r3, r3, #1
 808c6c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c6c8:	f7fc fd4a 	bl	8089160 <HAL_GetTick>
 808c6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808c6ce:	e008      	b.n	808c6e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 808c6d0:	f7fc fd46 	bl	8089160 <HAL_GetTick>
 808c6d4:	4602      	mov	r2, r0
 808c6d6:	693b      	ldr	r3, [r7, #16]
 808c6d8:	1ad3      	subs	r3, r2, r3
 808c6da:	2b02      	cmp	r3, #2
 808c6dc:	d901      	bls.n	808c6e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 808c6de:	2303      	movs	r3, #3
 808c6e0:	e188      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808c6e2:	4b30      	ldr	r3, [pc, #192]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6e4:	681b      	ldr	r3, [r3, #0]
 808c6e6:	f003 0302 	and.w	r3, r3, #2
 808c6ea:	2b00      	cmp	r3, #0
 808c6ec:	d0f0      	beq.n	808c6d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 808c6ee:	4b2d      	ldr	r3, [pc, #180]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6f0:	681b      	ldr	r3, [r3, #0]
 808c6f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 808c6f6:	687b      	ldr	r3, [r7, #4]
 808c6f8:	691b      	ldr	r3, [r3, #16]
 808c6fa:	00db      	lsls	r3, r3, #3
 808c6fc:	4929      	ldr	r1, [pc, #164]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c6fe:	4313      	orrs	r3, r2
 808c700:	600b      	str	r3, [r1, #0]
 808c702:	e018      	b.n	808c736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 808c704:	4b27      	ldr	r3, [pc, #156]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c706:	681b      	ldr	r3, [r3, #0]
 808c708:	4a26      	ldr	r2, [pc, #152]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c70a:	f023 0301 	bic.w	r3, r3, #1
 808c70e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c710:	f7fc fd26 	bl	8089160 <HAL_GetTick>
 808c714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808c716:	e008      	b.n	808c72a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 808c718:	f7fc fd22 	bl	8089160 <HAL_GetTick>
 808c71c:	4602      	mov	r2, r0
 808c71e:	693b      	ldr	r3, [r7, #16]
 808c720:	1ad3      	subs	r3, r2, r3
 808c722:	2b02      	cmp	r3, #2
 808c724:	d901      	bls.n	808c72a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 808c726:	2303      	movs	r3, #3
 808c728:	e164      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808c72a:	4b1e      	ldr	r3, [pc, #120]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c72c:	681b      	ldr	r3, [r3, #0]
 808c72e:	f003 0302 	and.w	r3, r3, #2
 808c732:	2b00      	cmp	r3, #0
 808c734:	d1f0      	bne.n	808c718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 808c736:	687b      	ldr	r3, [r7, #4]
 808c738:	681b      	ldr	r3, [r3, #0]
 808c73a:	f003 0308 	and.w	r3, r3, #8
 808c73e:	2b00      	cmp	r3, #0
 808c740:	d038      	beq.n	808c7b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 808c742:	687b      	ldr	r3, [r7, #4]
 808c744:	695b      	ldr	r3, [r3, #20]
 808c746:	2b00      	cmp	r3, #0
 808c748:	d019      	beq.n	808c77e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 808c74a:	4b16      	ldr	r3, [pc, #88]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c74c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808c74e:	4a15      	ldr	r2, [pc, #84]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c750:	f043 0301 	orr.w	r3, r3, #1
 808c754:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808c756:	f7fc fd03 	bl	8089160 <HAL_GetTick>
 808c75a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 808c75c:	e008      	b.n	808c770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 808c75e:	f7fc fcff 	bl	8089160 <HAL_GetTick>
 808c762:	4602      	mov	r2, r0
 808c764:	693b      	ldr	r3, [r7, #16]
 808c766:	1ad3      	subs	r3, r2, r3
 808c768:	2b02      	cmp	r3, #2
 808c76a:	d901      	bls.n	808c770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 808c76c:	2303      	movs	r3, #3
 808c76e:	e141      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 808c770:	4b0c      	ldr	r3, [pc, #48]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808c774:	f003 0302 	and.w	r3, r3, #2
 808c778:	2b00      	cmp	r3, #0
 808c77a:	d0f0      	beq.n	808c75e <HAL_RCC_OscConfig+0x23a>
 808c77c:	e01a      	b.n	808c7b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 808c77e:	4b09      	ldr	r3, [pc, #36]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808c782:	4a08      	ldr	r2, [pc, #32]	; (808c7a4 <HAL_RCC_OscConfig+0x280>)
 808c784:	f023 0301 	bic.w	r3, r3, #1
 808c788:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808c78a:	f7fc fce9 	bl	8089160 <HAL_GetTick>
 808c78e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 808c790:	e00a      	b.n	808c7a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 808c792:	f7fc fce5 	bl	8089160 <HAL_GetTick>
 808c796:	4602      	mov	r2, r0
 808c798:	693b      	ldr	r3, [r7, #16]
 808c79a:	1ad3      	subs	r3, r2, r3
 808c79c:	2b02      	cmp	r3, #2
 808c79e:	d903      	bls.n	808c7a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 808c7a0:	2303      	movs	r3, #3
 808c7a2:	e127      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
 808c7a4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 808c7a8:	4b94      	ldr	r3, [pc, #592]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808c7ac:	f003 0302 	and.w	r3, r3, #2
 808c7b0:	2b00      	cmp	r3, #0
 808c7b2:	d1ee      	bne.n	808c792 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 808c7b4:	687b      	ldr	r3, [r7, #4]
 808c7b6:	681b      	ldr	r3, [r3, #0]
 808c7b8:	f003 0304 	and.w	r3, r3, #4
 808c7bc:	2b00      	cmp	r3, #0
 808c7be:	f000 80a4 	beq.w	808c90a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 808c7c2:	4b8e      	ldr	r3, [pc, #568]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808c7c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808c7ca:	2b00      	cmp	r3, #0
 808c7cc:	d10d      	bne.n	808c7ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 808c7ce:	4b8b      	ldr	r3, [pc, #556]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808c7d2:	4a8a      	ldr	r2, [pc, #552]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808c7d8:	6413      	str	r3, [r2, #64]	; 0x40
 808c7da:	4b88      	ldr	r3, [pc, #544]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808c7de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808c7e2:	60fb      	str	r3, [r7, #12]
 808c7e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 808c7e6:	2301      	movs	r3, #1
 808c7e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 808c7ea:	4b85      	ldr	r3, [pc, #532]	; (808ca00 <HAL_RCC_OscConfig+0x4dc>)
 808c7ec:	681b      	ldr	r3, [r3, #0]
 808c7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808c7f2:	2b00      	cmp	r3, #0
 808c7f4:	d118      	bne.n	808c828 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 808c7f6:	4b82      	ldr	r3, [pc, #520]	; (808ca00 <HAL_RCC_OscConfig+0x4dc>)
 808c7f8:	681b      	ldr	r3, [r3, #0]
 808c7fa:	4a81      	ldr	r2, [pc, #516]	; (808ca00 <HAL_RCC_OscConfig+0x4dc>)
 808c7fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808c800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 808c802:	f7fc fcad 	bl	8089160 <HAL_GetTick>
 808c806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 808c808:	e008      	b.n	808c81c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 808c80a:	f7fc fca9 	bl	8089160 <HAL_GetTick>
 808c80e:	4602      	mov	r2, r0
 808c810:	693b      	ldr	r3, [r7, #16]
 808c812:	1ad3      	subs	r3, r2, r3
 808c814:	2b64      	cmp	r3, #100	; 0x64
 808c816:	d901      	bls.n	808c81c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 808c818:	2303      	movs	r3, #3
 808c81a:	e0eb      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 808c81c:	4b78      	ldr	r3, [pc, #480]	; (808ca00 <HAL_RCC_OscConfig+0x4dc>)
 808c81e:	681b      	ldr	r3, [r3, #0]
 808c820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808c824:	2b00      	cmp	r3, #0
 808c826:	d0f0      	beq.n	808c80a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 808c828:	687b      	ldr	r3, [r7, #4]
 808c82a:	689b      	ldr	r3, [r3, #8]
 808c82c:	2b01      	cmp	r3, #1
 808c82e:	d106      	bne.n	808c83e <HAL_RCC_OscConfig+0x31a>
 808c830:	4b72      	ldr	r3, [pc, #456]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c834:	4a71      	ldr	r2, [pc, #452]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c836:	f043 0301 	orr.w	r3, r3, #1
 808c83a:	6713      	str	r3, [r2, #112]	; 0x70
 808c83c:	e02d      	b.n	808c89a <HAL_RCC_OscConfig+0x376>
 808c83e:	687b      	ldr	r3, [r7, #4]
 808c840:	689b      	ldr	r3, [r3, #8]
 808c842:	2b00      	cmp	r3, #0
 808c844:	d10c      	bne.n	808c860 <HAL_RCC_OscConfig+0x33c>
 808c846:	4b6d      	ldr	r3, [pc, #436]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c84a:	4a6c      	ldr	r2, [pc, #432]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c84c:	f023 0301 	bic.w	r3, r3, #1
 808c850:	6713      	str	r3, [r2, #112]	; 0x70
 808c852:	4b6a      	ldr	r3, [pc, #424]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c856:	4a69      	ldr	r2, [pc, #420]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c858:	f023 0304 	bic.w	r3, r3, #4
 808c85c:	6713      	str	r3, [r2, #112]	; 0x70
 808c85e:	e01c      	b.n	808c89a <HAL_RCC_OscConfig+0x376>
 808c860:	687b      	ldr	r3, [r7, #4]
 808c862:	689b      	ldr	r3, [r3, #8]
 808c864:	2b05      	cmp	r3, #5
 808c866:	d10c      	bne.n	808c882 <HAL_RCC_OscConfig+0x35e>
 808c868:	4b64      	ldr	r3, [pc, #400]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c86c:	4a63      	ldr	r2, [pc, #396]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c86e:	f043 0304 	orr.w	r3, r3, #4
 808c872:	6713      	str	r3, [r2, #112]	; 0x70
 808c874:	4b61      	ldr	r3, [pc, #388]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c878:	4a60      	ldr	r2, [pc, #384]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c87a:	f043 0301 	orr.w	r3, r3, #1
 808c87e:	6713      	str	r3, [r2, #112]	; 0x70
 808c880:	e00b      	b.n	808c89a <HAL_RCC_OscConfig+0x376>
 808c882:	4b5e      	ldr	r3, [pc, #376]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c886:	4a5d      	ldr	r2, [pc, #372]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c888:	f023 0301 	bic.w	r3, r3, #1
 808c88c:	6713      	str	r3, [r2, #112]	; 0x70
 808c88e:	4b5b      	ldr	r3, [pc, #364]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c892:	4a5a      	ldr	r2, [pc, #360]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c894:	f023 0304 	bic.w	r3, r3, #4
 808c898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 808c89a:	687b      	ldr	r3, [r7, #4]
 808c89c:	689b      	ldr	r3, [r3, #8]
 808c89e:	2b00      	cmp	r3, #0
 808c8a0:	d015      	beq.n	808c8ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808c8a2:	f7fc fc5d 	bl	8089160 <HAL_GetTick>
 808c8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 808c8a8:	e00a      	b.n	808c8c0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 808c8aa:	f7fc fc59 	bl	8089160 <HAL_GetTick>
 808c8ae:	4602      	mov	r2, r0
 808c8b0:	693b      	ldr	r3, [r7, #16]
 808c8b2:	1ad3      	subs	r3, r2, r3
 808c8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 808c8b8:	4293      	cmp	r3, r2
 808c8ba:	d901      	bls.n	808c8c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 808c8bc:	2303      	movs	r3, #3
 808c8be:	e099      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 808c8c0:	4b4e      	ldr	r3, [pc, #312]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c8c4:	f003 0302 	and.w	r3, r3, #2
 808c8c8:	2b00      	cmp	r3, #0
 808c8ca:	d0ee      	beq.n	808c8aa <HAL_RCC_OscConfig+0x386>
 808c8cc:	e014      	b.n	808c8f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808c8ce:	f7fc fc47 	bl	8089160 <HAL_GetTick>
 808c8d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 808c8d4:	e00a      	b.n	808c8ec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 808c8d6:	f7fc fc43 	bl	8089160 <HAL_GetTick>
 808c8da:	4602      	mov	r2, r0
 808c8dc:	693b      	ldr	r3, [r7, #16]
 808c8de:	1ad3      	subs	r3, r2, r3
 808c8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 808c8e4:	4293      	cmp	r3, r2
 808c8e6:	d901      	bls.n	808c8ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 808c8e8:	2303      	movs	r3, #3
 808c8ea:	e083      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 808c8ec:	4b43      	ldr	r3, [pc, #268]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808c8f0:	f003 0302 	and.w	r3, r3, #2
 808c8f4:	2b00      	cmp	r3, #0
 808c8f6:	d1ee      	bne.n	808c8d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 808c8f8:	7dfb      	ldrb	r3, [r7, #23]
 808c8fa:	2b01      	cmp	r3, #1
 808c8fc:	d105      	bne.n	808c90a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 808c8fe:	4b3f      	ldr	r3, [pc, #252]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808c902:	4a3e      	ldr	r2, [pc, #248]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 808c908:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 808c90a:	687b      	ldr	r3, [r7, #4]
 808c90c:	699b      	ldr	r3, [r3, #24]
 808c90e:	2b00      	cmp	r3, #0
 808c910:	d06f      	beq.n	808c9f2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 808c912:	4b3a      	ldr	r3, [pc, #232]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c914:	689b      	ldr	r3, [r3, #8]
 808c916:	f003 030c 	and.w	r3, r3, #12
 808c91a:	2b08      	cmp	r3, #8
 808c91c:	d067      	beq.n	808c9ee <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 808c91e:	687b      	ldr	r3, [r7, #4]
 808c920:	699b      	ldr	r3, [r3, #24]
 808c922:	2b02      	cmp	r3, #2
 808c924:	d149      	bne.n	808c9ba <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 808c926:	4b35      	ldr	r3, [pc, #212]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c928:	681b      	ldr	r3, [r3, #0]
 808c92a:	4a34      	ldr	r2, [pc, #208]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c92c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 808c930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c932:	f7fc fc15 	bl	8089160 <HAL_GetTick>
 808c936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808c938:	e008      	b.n	808c94c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808c93a:	f7fc fc11 	bl	8089160 <HAL_GetTick>
 808c93e:	4602      	mov	r2, r0
 808c940:	693b      	ldr	r3, [r7, #16]
 808c942:	1ad3      	subs	r3, r2, r3
 808c944:	2b02      	cmp	r3, #2
 808c946:	d901      	bls.n	808c94c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 808c948:	2303      	movs	r3, #3
 808c94a:	e053      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808c94c:	4b2b      	ldr	r3, [pc, #172]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c94e:	681b      	ldr	r3, [r3, #0]
 808c950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808c954:	2b00      	cmp	r3, #0
 808c956:	d1f0      	bne.n	808c93a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 808c958:	687b      	ldr	r3, [r7, #4]
 808c95a:	69da      	ldr	r2, [r3, #28]
 808c95c:	687b      	ldr	r3, [r7, #4]
 808c95e:	6a1b      	ldr	r3, [r3, #32]
 808c960:	431a      	orrs	r2, r3
 808c962:	687b      	ldr	r3, [r7, #4]
 808c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808c966:	019b      	lsls	r3, r3, #6
 808c968:	431a      	orrs	r2, r3
 808c96a:	687b      	ldr	r3, [r7, #4]
 808c96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808c96e:	085b      	lsrs	r3, r3, #1
 808c970:	3b01      	subs	r3, #1
 808c972:	041b      	lsls	r3, r3, #16
 808c974:	431a      	orrs	r2, r3
 808c976:	687b      	ldr	r3, [r7, #4]
 808c978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808c97a:	061b      	lsls	r3, r3, #24
 808c97c:	4313      	orrs	r3, r2
 808c97e:	4a1f      	ldr	r2, [pc, #124]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 808c984:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 808c986:	4b1d      	ldr	r3, [pc, #116]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c988:	681b      	ldr	r3, [r3, #0]
 808c98a:	4a1c      	ldr	r2, [pc, #112]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c98c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 808c990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c992:	f7fc fbe5 	bl	8089160 <HAL_GetTick>
 808c996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808c998:	e008      	b.n	808c9ac <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808c99a:	f7fc fbe1 	bl	8089160 <HAL_GetTick>
 808c99e:	4602      	mov	r2, r0
 808c9a0:	693b      	ldr	r3, [r7, #16]
 808c9a2:	1ad3      	subs	r3, r2, r3
 808c9a4:	2b02      	cmp	r3, #2
 808c9a6:	d901      	bls.n	808c9ac <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 808c9a8:	2303      	movs	r3, #3
 808c9aa:	e023      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808c9ac:	4b13      	ldr	r3, [pc, #76]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c9ae:	681b      	ldr	r3, [r3, #0]
 808c9b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808c9b4:	2b00      	cmp	r3, #0
 808c9b6:	d0f0      	beq.n	808c99a <HAL_RCC_OscConfig+0x476>
 808c9b8:	e01b      	b.n	808c9f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 808c9ba:	4b10      	ldr	r3, [pc, #64]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c9bc:	681b      	ldr	r3, [r3, #0]
 808c9be:	4a0f      	ldr	r2, [pc, #60]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c9c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 808c9c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808c9c6:	f7fc fbcb 	bl	8089160 <HAL_GetTick>
 808c9ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808c9cc:	e008      	b.n	808c9e0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808c9ce:	f7fc fbc7 	bl	8089160 <HAL_GetTick>
 808c9d2:	4602      	mov	r2, r0
 808c9d4:	693b      	ldr	r3, [r7, #16]
 808c9d6:	1ad3      	subs	r3, r2, r3
 808c9d8:	2b02      	cmp	r3, #2
 808c9da:	d901      	bls.n	808c9e0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 808c9dc:	2303      	movs	r3, #3
 808c9de:	e009      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808c9e0:	4b06      	ldr	r3, [pc, #24]	; (808c9fc <HAL_RCC_OscConfig+0x4d8>)
 808c9e2:	681b      	ldr	r3, [r3, #0]
 808c9e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808c9e8:	2b00      	cmp	r3, #0
 808c9ea:	d1f0      	bne.n	808c9ce <HAL_RCC_OscConfig+0x4aa>
 808c9ec:	e001      	b.n	808c9f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 808c9ee:	2301      	movs	r3, #1
 808c9f0:	e000      	b.n	808c9f4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 808c9f2:	2300      	movs	r3, #0
}
 808c9f4:	4618      	mov	r0, r3
 808c9f6:	3718      	adds	r7, #24
 808c9f8:	46bd      	mov	sp, r7
 808c9fa:	bd80      	pop	{r7, pc}
 808c9fc:	40023800 	.word	0x40023800
 808ca00:	40007000 	.word	0x40007000

0808ca04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 808ca04:	b580      	push	{r7, lr}
 808ca06:	b084      	sub	sp, #16
 808ca08:	af00      	add	r7, sp, #0
 808ca0a:	6078      	str	r0, [r7, #4]
 808ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 808ca0e:	2300      	movs	r3, #0
 808ca10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 808ca12:	687b      	ldr	r3, [r7, #4]
 808ca14:	2b00      	cmp	r3, #0
 808ca16:	d101      	bne.n	808ca1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 808ca18:	2301      	movs	r3, #1
 808ca1a:	e0ce      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 808ca1c:	4b69      	ldr	r3, [pc, #420]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808ca1e:	681b      	ldr	r3, [r3, #0]
 808ca20:	f003 030f 	and.w	r3, r3, #15
 808ca24:	683a      	ldr	r2, [r7, #0]
 808ca26:	429a      	cmp	r2, r3
 808ca28:	d910      	bls.n	808ca4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 808ca2a:	4b66      	ldr	r3, [pc, #408]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808ca2c:	681b      	ldr	r3, [r3, #0]
 808ca2e:	f023 020f 	bic.w	r2, r3, #15
 808ca32:	4964      	ldr	r1, [pc, #400]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808ca34:	683b      	ldr	r3, [r7, #0]
 808ca36:	4313      	orrs	r3, r2
 808ca38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 808ca3a:	4b62      	ldr	r3, [pc, #392]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808ca3c:	681b      	ldr	r3, [r3, #0]
 808ca3e:	f003 030f 	and.w	r3, r3, #15
 808ca42:	683a      	ldr	r2, [r7, #0]
 808ca44:	429a      	cmp	r2, r3
 808ca46:	d001      	beq.n	808ca4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 808ca48:	2301      	movs	r3, #1
 808ca4a:	e0b6      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 808ca4c:	687b      	ldr	r3, [r7, #4]
 808ca4e:	681b      	ldr	r3, [r3, #0]
 808ca50:	f003 0302 	and.w	r3, r3, #2
 808ca54:	2b00      	cmp	r3, #0
 808ca56:	d020      	beq.n	808ca9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 808ca58:	687b      	ldr	r3, [r7, #4]
 808ca5a:	681b      	ldr	r3, [r3, #0]
 808ca5c:	f003 0304 	and.w	r3, r3, #4
 808ca60:	2b00      	cmp	r3, #0
 808ca62:	d005      	beq.n	808ca70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 808ca64:	4b58      	ldr	r3, [pc, #352]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca66:	689b      	ldr	r3, [r3, #8]
 808ca68:	4a57      	ldr	r2, [pc, #348]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 808ca6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 808ca70:	687b      	ldr	r3, [r7, #4]
 808ca72:	681b      	ldr	r3, [r3, #0]
 808ca74:	f003 0308 	and.w	r3, r3, #8
 808ca78:	2b00      	cmp	r3, #0
 808ca7a:	d005      	beq.n	808ca88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 808ca7c:	4b52      	ldr	r3, [pc, #328]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca7e:	689b      	ldr	r3, [r3, #8]
 808ca80:	4a51      	ldr	r2, [pc, #324]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 808ca86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 808ca88:	4b4f      	ldr	r3, [pc, #316]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca8a:	689b      	ldr	r3, [r3, #8]
 808ca8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 808ca90:	687b      	ldr	r3, [r7, #4]
 808ca92:	689b      	ldr	r3, [r3, #8]
 808ca94:	494c      	ldr	r1, [pc, #304]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808ca96:	4313      	orrs	r3, r2
 808ca98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 808ca9a:	687b      	ldr	r3, [r7, #4]
 808ca9c:	681b      	ldr	r3, [r3, #0]
 808ca9e:	f003 0301 	and.w	r3, r3, #1
 808caa2:	2b00      	cmp	r3, #0
 808caa4:	d040      	beq.n	808cb28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 808caa6:	687b      	ldr	r3, [r7, #4]
 808caa8:	685b      	ldr	r3, [r3, #4]
 808caaa:	2b01      	cmp	r3, #1
 808caac:	d107      	bne.n	808cabe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808caae:	4b46      	ldr	r3, [pc, #280]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cab0:	681b      	ldr	r3, [r3, #0]
 808cab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808cab6:	2b00      	cmp	r3, #0
 808cab8:	d115      	bne.n	808cae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 808caba:	2301      	movs	r3, #1
 808cabc:	e07d      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 808cabe:	687b      	ldr	r3, [r7, #4]
 808cac0:	685b      	ldr	r3, [r3, #4]
 808cac2:	2b02      	cmp	r3, #2
 808cac4:	d107      	bne.n	808cad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808cac6:	4b40      	ldr	r3, [pc, #256]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cac8:	681b      	ldr	r3, [r3, #0]
 808caca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808cace:	2b00      	cmp	r3, #0
 808cad0:	d109      	bne.n	808cae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 808cad2:	2301      	movs	r3, #1
 808cad4:	e071      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808cad6:	4b3c      	ldr	r3, [pc, #240]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cad8:	681b      	ldr	r3, [r3, #0]
 808cada:	f003 0302 	and.w	r3, r3, #2
 808cade:	2b00      	cmp	r3, #0
 808cae0:	d101      	bne.n	808cae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 808cae2:	2301      	movs	r3, #1
 808cae4:	e069      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 808cae6:	4b38      	ldr	r3, [pc, #224]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cae8:	689b      	ldr	r3, [r3, #8]
 808caea:	f023 0203 	bic.w	r2, r3, #3
 808caee:	687b      	ldr	r3, [r7, #4]
 808caf0:	685b      	ldr	r3, [r3, #4]
 808caf2:	4935      	ldr	r1, [pc, #212]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808caf4:	4313      	orrs	r3, r2
 808caf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808caf8:	f7fc fb32 	bl	8089160 <HAL_GetTick>
 808cafc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808cafe:	e00a      	b.n	808cb16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 808cb00:	f7fc fb2e 	bl	8089160 <HAL_GetTick>
 808cb04:	4602      	mov	r2, r0
 808cb06:	68fb      	ldr	r3, [r7, #12]
 808cb08:	1ad3      	subs	r3, r2, r3
 808cb0a:	f241 3288 	movw	r2, #5000	; 0x1388
 808cb0e:	4293      	cmp	r3, r2
 808cb10:	d901      	bls.n	808cb16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 808cb12:	2303      	movs	r3, #3
 808cb14:	e051      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808cb16:	4b2c      	ldr	r3, [pc, #176]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb18:	689b      	ldr	r3, [r3, #8]
 808cb1a:	f003 020c 	and.w	r2, r3, #12
 808cb1e:	687b      	ldr	r3, [r7, #4]
 808cb20:	685b      	ldr	r3, [r3, #4]
 808cb22:	009b      	lsls	r3, r3, #2
 808cb24:	429a      	cmp	r2, r3
 808cb26:	d1eb      	bne.n	808cb00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 808cb28:	4b26      	ldr	r3, [pc, #152]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808cb2a:	681b      	ldr	r3, [r3, #0]
 808cb2c:	f003 030f 	and.w	r3, r3, #15
 808cb30:	683a      	ldr	r2, [r7, #0]
 808cb32:	429a      	cmp	r2, r3
 808cb34:	d210      	bcs.n	808cb58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 808cb36:	4b23      	ldr	r3, [pc, #140]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808cb38:	681b      	ldr	r3, [r3, #0]
 808cb3a:	f023 020f 	bic.w	r2, r3, #15
 808cb3e:	4921      	ldr	r1, [pc, #132]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808cb40:	683b      	ldr	r3, [r7, #0]
 808cb42:	4313      	orrs	r3, r2
 808cb44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 808cb46:	4b1f      	ldr	r3, [pc, #124]	; (808cbc4 <HAL_RCC_ClockConfig+0x1c0>)
 808cb48:	681b      	ldr	r3, [r3, #0]
 808cb4a:	f003 030f 	and.w	r3, r3, #15
 808cb4e:	683a      	ldr	r2, [r7, #0]
 808cb50:	429a      	cmp	r2, r3
 808cb52:	d001      	beq.n	808cb58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 808cb54:	2301      	movs	r3, #1
 808cb56:	e030      	b.n	808cbba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 808cb58:	687b      	ldr	r3, [r7, #4]
 808cb5a:	681b      	ldr	r3, [r3, #0]
 808cb5c:	f003 0304 	and.w	r3, r3, #4
 808cb60:	2b00      	cmp	r3, #0
 808cb62:	d008      	beq.n	808cb76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 808cb64:	4b18      	ldr	r3, [pc, #96]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb66:	689b      	ldr	r3, [r3, #8]
 808cb68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 808cb6c:	687b      	ldr	r3, [r7, #4]
 808cb6e:	68db      	ldr	r3, [r3, #12]
 808cb70:	4915      	ldr	r1, [pc, #84]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb72:	4313      	orrs	r3, r2
 808cb74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 808cb76:	687b      	ldr	r3, [r7, #4]
 808cb78:	681b      	ldr	r3, [r3, #0]
 808cb7a:	f003 0308 	and.w	r3, r3, #8
 808cb7e:	2b00      	cmp	r3, #0
 808cb80:	d009      	beq.n	808cb96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 808cb82:	4b11      	ldr	r3, [pc, #68]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb84:	689b      	ldr	r3, [r3, #8]
 808cb86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 808cb8a:	687b      	ldr	r3, [r7, #4]
 808cb8c:	691b      	ldr	r3, [r3, #16]
 808cb8e:	00db      	lsls	r3, r3, #3
 808cb90:	490d      	ldr	r1, [pc, #52]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb92:	4313      	orrs	r3, r2
 808cb94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 808cb96:	f000 f81d 	bl	808cbd4 <HAL_RCC_GetSysClockFreq>
 808cb9a:	4601      	mov	r1, r0
 808cb9c:	4b0a      	ldr	r3, [pc, #40]	; (808cbc8 <HAL_RCC_ClockConfig+0x1c4>)
 808cb9e:	689b      	ldr	r3, [r3, #8]
 808cba0:	091b      	lsrs	r3, r3, #4
 808cba2:	f003 030f 	and.w	r3, r3, #15
 808cba6:	4a09      	ldr	r2, [pc, #36]	; (808cbcc <HAL_RCC_ClockConfig+0x1c8>)
 808cba8:	5cd3      	ldrb	r3, [r2, r3]
 808cbaa:	fa21 f303 	lsr.w	r3, r1, r3
 808cbae:	4a08      	ldr	r2, [pc, #32]	; (808cbd0 <HAL_RCC_ClockConfig+0x1cc>)
 808cbb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 808cbb2:	200f      	movs	r0, #15
 808cbb4:	f004 faea 	bl	809118c <HAL_InitTick>

  return HAL_OK;
 808cbb8:	2300      	movs	r3, #0
}
 808cbba:	4618      	mov	r0, r3
 808cbbc:	3710      	adds	r7, #16
 808cbbe:	46bd      	mov	sp, r7
 808cbc0:	bd80      	pop	{r7, pc}
 808cbc2:	bf00      	nop
 808cbc4:	40023c00 	.word	0x40023c00
 808cbc8:	40023800 	.word	0x40023800
 808cbcc:	080a545c 	.word	0x080a545c
 808cbd0:	2000b374 	.word	0x2000b374

0808cbd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 808cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cbd6:	b085      	sub	sp, #20
 808cbd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 808cbda:	2300      	movs	r3, #0
 808cbdc:	607b      	str	r3, [r7, #4]
 808cbde:	2300      	movs	r3, #0
 808cbe0:	60fb      	str	r3, [r7, #12]
 808cbe2:	2300      	movs	r3, #0
 808cbe4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 808cbe6:	2300      	movs	r3, #0
 808cbe8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 808cbea:	4b50      	ldr	r3, [pc, #320]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cbec:	689b      	ldr	r3, [r3, #8]
 808cbee:	f003 030c 	and.w	r3, r3, #12
 808cbf2:	2b04      	cmp	r3, #4
 808cbf4:	d007      	beq.n	808cc06 <HAL_RCC_GetSysClockFreq+0x32>
 808cbf6:	2b08      	cmp	r3, #8
 808cbf8:	d008      	beq.n	808cc0c <HAL_RCC_GetSysClockFreq+0x38>
 808cbfa:	2b00      	cmp	r3, #0
 808cbfc:	f040 808d 	bne.w	808cd1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 808cc00:	4b4b      	ldr	r3, [pc, #300]	; (808cd30 <HAL_RCC_GetSysClockFreq+0x15c>)
 808cc02:	60bb      	str	r3, [r7, #8]
       break;
 808cc04:	e08c      	b.n	808cd20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 808cc06:	4b4b      	ldr	r3, [pc, #300]	; (808cd34 <HAL_RCC_GetSysClockFreq+0x160>)
 808cc08:	60bb      	str	r3, [r7, #8]
      break;
 808cc0a:	e089      	b.n	808cd20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 808cc0c:	4b47      	ldr	r3, [pc, #284]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cc0e:	685b      	ldr	r3, [r3, #4]
 808cc10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808cc14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 808cc16:	4b45      	ldr	r3, [pc, #276]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cc18:	685b      	ldr	r3, [r3, #4]
 808cc1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808cc1e:	2b00      	cmp	r3, #0
 808cc20:	d023      	beq.n	808cc6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 808cc22:	4b42      	ldr	r3, [pc, #264]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cc24:	685b      	ldr	r3, [r3, #4]
 808cc26:	099b      	lsrs	r3, r3, #6
 808cc28:	f04f 0400 	mov.w	r4, #0
 808cc2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 808cc30:	f04f 0200 	mov.w	r2, #0
 808cc34:	ea03 0501 	and.w	r5, r3, r1
 808cc38:	ea04 0602 	and.w	r6, r4, r2
 808cc3c:	4a3d      	ldr	r2, [pc, #244]	; (808cd34 <HAL_RCC_GetSysClockFreq+0x160>)
 808cc3e:	fb02 f106 	mul.w	r1, r2, r6
 808cc42:	2200      	movs	r2, #0
 808cc44:	fb02 f205 	mul.w	r2, r2, r5
 808cc48:	440a      	add	r2, r1
 808cc4a:	493a      	ldr	r1, [pc, #232]	; (808cd34 <HAL_RCC_GetSysClockFreq+0x160>)
 808cc4c:	fba5 0101 	umull	r0, r1, r5, r1
 808cc50:	1853      	adds	r3, r2, r1
 808cc52:	4619      	mov	r1, r3
 808cc54:	687b      	ldr	r3, [r7, #4]
 808cc56:	f04f 0400 	mov.w	r4, #0
 808cc5a:	461a      	mov	r2, r3
 808cc5c:	4623      	mov	r3, r4
 808cc5e:	f7f3 ff33 	bl	8080ac8 <__aeabi_uldivmod>
 808cc62:	4603      	mov	r3, r0
 808cc64:	460c      	mov	r4, r1
 808cc66:	60fb      	str	r3, [r7, #12]
 808cc68:	e049      	b.n	808ccfe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 808cc6a:	4b30      	ldr	r3, [pc, #192]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cc6c:	685b      	ldr	r3, [r3, #4]
 808cc6e:	099b      	lsrs	r3, r3, #6
 808cc70:	f04f 0400 	mov.w	r4, #0
 808cc74:	f240 11ff 	movw	r1, #511	; 0x1ff
 808cc78:	f04f 0200 	mov.w	r2, #0
 808cc7c:	ea03 0501 	and.w	r5, r3, r1
 808cc80:	ea04 0602 	and.w	r6, r4, r2
 808cc84:	4629      	mov	r1, r5
 808cc86:	4632      	mov	r2, r6
 808cc88:	f04f 0300 	mov.w	r3, #0
 808cc8c:	f04f 0400 	mov.w	r4, #0
 808cc90:	0154      	lsls	r4, r2, #5
 808cc92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 808cc96:	014b      	lsls	r3, r1, #5
 808cc98:	4619      	mov	r1, r3
 808cc9a:	4622      	mov	r2, r4
 808cc9c:	1b49      	subs	r1, r1, r5
 808cc9e:	eb62 0206 	sbc.w	r2, r2, r6
 808cca2:	f04f 0300 	mov.w	r3, #0
 808cca6:	f04f 0400 	mov.w	r4, #0
 808ccaa:	0194      	lsls	r4, r2, #6
 808ccac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 808ccb0:	018b      	lsls	r3, r1, #6
 808ccb2:	1a5b      	subs	r3, r3, r1
 808ccb4:	eb64 0402 	sbc.w	r4, r4, r2
 808ccb8:	f04f 0100 	mov.w	r1, #0
 808ccbc:	f04f 0200 	mov.w	r2, #0
 808ccc0:	00e2      	lsls	r2, r4, #3
 808ccc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 808ccc6:	00d9      	lsls	r1, r3, #3
 808ccc8:	460b      	mov	r3, r1
 808ccca:	4614      	mov	r4, r2
 808cccc:	195b      	adds	r3, r3, r5
 808ccce:	eb44 0406 	adc.w	r4, r4, r6
 808ccd2:	f04f 0100 	mov.w	r1, #0
 808ccd6:	f04f 0200 	mov.w	r2, #0
 808ccda:	02a2      	lsls	r2, r4, #10
 808ccdc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 808cce0:	0299      	lsls	r1, r3, #10
 808cce2:	460b      	mov	r3, r1
 808cce4:	4614      	mov	r4, r2
 808cce6:	4618      	mov	r0, r3
 808cce8:	4621      	mov	r1, r4
 808ccea:	687b      	ldr	r3, [r7, #4]
 808ccec:	f04f 0400 	mov.w	r4, #0
 808ccf0:	461a      	mov	r2, r3
 808ccf2:	4623      	mov	r3, r4
 808ccf4:	f7f3 fee8 	bl	8080ac8 <__aeabi_uldivmod>
 808ccf8:	4603      	mov	r3, r0
 808ccfa:	460c      	mov	r4, r1
 808ccfc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 808ccfe:	4b0b      	ldr	r3, [pc, #44]	; (808cd2c <HAL_RCC_GetSysClockFreq+0x158>)
 808cd00:	685b      	ldr	r3, [r3, #4]
 808cd02:	0c1b      	lsrs	r3, r3, #16
 808cd04:	f003 0303 	and.w	r3, r3, #3
 808cd08:	3301      	adds	r3, #1
 808cd0a:	005b      	lsls	r3, r3, #1
 808cd0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 808cd0e:	68fa      	ldr	r2, [r7, #12]
 808cd10:	683b      	ldr	r3, [r7, #0]
 808cd12:	fbb2 f3f3 	udiv	r3, r2, r3
 808cd16:	60bb      	str	r3, [r7, #8]
      break;
 808cd18:	e002      	b.n	808cd20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 808cd1a:	4b05      	ldr	r3, [pc, #20]	; (808cd30 <HAL_RCC_GetSysClockFreq+0x15c>)
 808cd1c:	60bb      	str	r3, [r7, #8]
      break;
 808cd1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 808cd20:	68bb      	ldr	r3, [r7, #8]
}
 808cd22:	4618      	mov	r0, r3
 808cd24:	3714      	adds	r7, #20
 808cd26:	46bd      	mov	sp, r7
 808cd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cd2a:	bf00      	nop
 808cd2c:	40023800 	.word	0x40023800
 808cd30:	00f42400 	.word	0x00f42400
 808cd34:	017d7840 	.word	0x017d7840

0808cd38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 808cd38:	b480      	push	{r7}
 808cd3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 808cd3c:	4b03      	ldr	r3, [pc, #12]	; (808cd4c <HAL_RCC_GetHCLKFreq+0x14>)
 808cd3e:	681b      	ldr	r3, [r3, #0]
}
 808cd40:	4618      	mov	r0, r3
 808cd42:	46bd      	mov	sp, r7
 808cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 808cd48:	4770      	bx	lr
 808cd4a:	bf00      	nop
 808cd4c:	2000b374 	.word	0x2000b374

0808cd50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 808cd50:	b580      	push	{r7, lr}
 808cd52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 808cd54:	f7ff fff0 	bl	808cd38 <HAL_RCC_GetHCLKFreq>
 808cd58:	4601      	mov	r1, r0
 808cd5a:	4b05      	ldr	r3, [pc, #20]	; (808cd70 <HAL_RCC_GetPCLK1Freq+0x20>)
 808cd5c:	689b      	ldr	r3, [r3, #8]
 808cd5e:	0a9b      	lsrs	r3, r3, #10
 808cd60:	f003 0307 	and.w	r3, r3, #7
 808cd64:	4a03      	ldr	r2, [pc, #12]	; (808cd74 <HAL_RCC_GetPCLK1Freq+0x24>)
 808cd66:	5cd3      	ldrb	r3, [r2, r3]
 808cd68:	fa21 f303 	lsr.w	r3, r1, r3
}
 808cd6c:	4618      	mov	r0, r3
 808cd6e:	bd80      	pop	{r7, pc}
 808cd70:	40023800 	.word	0x40023800
 808cd74:	080a546c 	.word	0x080a546c

0808cd78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 808cd78:	b580      	push	{r7, lr}
 808cd7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 808cd7c:	f7ff ffdc 	bl	808cd38 <HAL_RCC_GetHCLKFreq>
 808cd80:	4601      	mov	r1, r0
 808cd82:	4b05      	ldr	r3, [pc, #20]	; (808cd98 <HAL_RCC_GetPCLK2Freq+0x20>)
 808cd84:	689b      	ldr	r3, [r3, #8]
 808cd86:	0b5b      	lsrs	r3, r3, #13
 808cd88:	f003 0307 	and.w	r3, r3, #7
 808cd8c:	4a03      	ldr	r2, [pc, #12]	; (808cd9c <HAL_RCC_GetPCLK2Freq+0x24>)
 808cd8e:	5cd3      	ldrb	r3, [r2, r3]
 808cd90:	fa21 f303 	lsr.w	r3, r1, r3
}
 808cd94:	4618      	mov	r0, r3
 808cd96:	bd80      	pop	{r7, pc}
 808cd98:	40023800 	.word	0x40023800
 808cd9c:	080a546c 	.word	0x080a546c

0808cda0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 808cda0:	b480      	push	{r7}
 808cda2:	b083      	sub	sp, #12
 808cda4:	af00      	add	r7, sp, #0
 808cda6:	6078      	str	r0, [r7, #4]
 808cda8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 808cdaa:	687b      	ldr	r3, [r7, #4]
 808cdac:	220f      	movs	r2, #15
 808cdae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 808cdb0:	4b12      	ldr	r3, [pc, #72]	; (808cdfc <HAL_RCC_GetClockConfig+0x5c>)
 808cdb2:	689b      	ldr	r3, [r3, #8]
 808cdb4:	f003 0203 	and.w	r2, r3, #3
 808cdb8:	687b      	ldr	r3, [r7, #4]
 808cdba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 808cdbc:	4b0f      	ldr	r3, [pc, #60]	; (808cdfc <HAL_RCC_GetClockConfig+0x5c>)
 808cdbe:	689b      	ldr	r3, [r3, #8]
 808cdc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 808cdc4:	687b      	ldr	r3, [r7, #4]
 808cdc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 808cdc8:	4b0c      	ldr	r3, [pc, #48]	; (808cdfc <HAL_RCC_GetClockConfig+0x5c>)
 808cdca:	689b      	ldr	r3, [r3, #8]
 808cdcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 808cdd0:	687b      	ldr	r3, [r7, #4]
 808cdd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 808cdd4:	4b09      	ldr	r3, [pc, #36]	; (808cdfc <HAL_RCC_GetClockConfig+0x5c>)
 808cdd6:	689b      	ldr	r3, [r3, #8]
 808cdd8:	08db      	lsrs	r3, r3, #3
 808cdda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 808cdde:	687b      	ldr	r3, [r7, #4]
 808cde0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 808cde2:	4b07      	ldr	r3, [pc, #28]	; (808ce00 <HAL_RCC_GetClockConfig+0x60>)
 808cde4:	681b      	ldr	r3, [r3, #0]
 808cde6:	f003 020f 	and.w	r2, r3, #15
 808cdea:	683b      	ldr	r3, [r7, #0]
 808cdec:	601a      	str	r2, [r3, #0]
}
 808cdee:	bf00      	nop
 808cdf0:	370c      	adds	r7, #12
 808cdf2:	46bd      	mov	sp, r7
 808cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 808cdf8:	4770      	bx	lr
 808cdfa:	bf00      	nop
 808cdfc:	40023800 	.word	0x40023800
 808ce00:	40023c00 	.word	0x40023c00

0808ce04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 808ce04:	b580      	push	{r7, lr}
 808ce06:	b088      	sub	sp, #32
 808ce08:	af00      	add	r7, sp, #0
 808ce0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 808ce0c:	2300      	movs	r3, #0
 808ce0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 808ce10:	2300      	movs	r3, #0
 808ce12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 808ce14:	2300      	movs	r3, #0
 808ce16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 808ce18:	2300      	movs	r3, #0
 808ce1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 808ce1c:	2300      	movs	r3, #0
 808ce1e:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 808ce20:	687b      	ldr	r3, [r7, #4]
 808ce22:	681b      	ldr	r3, [r3, #0]
 808ce24:	f003 0301 	and.w	r3, r3, #1
 808ce28:	2b00      	cmp	r3, #0
 808ce2a:	d012      	beq.n	808ce52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 808ce2c:	4b69      	ldr	r3, [pc, #420]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce2e:	689b      	ldr	r3, [r3, #8]
 808ce30:	4a68      	ldr	r2, [pc, #416]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 808ce36:	6093      	str	r3, [r2, #8]
 808ce38:	4b66      	ldr	r3, [pc, #408]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce3a:	689a      	ldr	r2, [r3, #8]
 808ce3c:	687b      	ldr	r3, [r7, #4]
 808ce3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ce40:	4964      	ldr	r1, [pc, #400]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce42:	4313      	orrs	r3, r2
 808ce44:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 808ce46:	687b      	ldr	r3, [r7, #4]
 808ce48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ce4a:	2b00      	cmp	r3, #0
 808ce4c:	d101      	bne.n	808ce52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 808ce4e:	2301      	movs	r3, #1
 808ce50:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 808ce52:	687b      	ldr	r3, [r7, #4]
 808ce54:	681b      	ldr	r3, [r3, #0]
 808ce56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 808ce5a:	2b00      	cmp	r3, #0
 808ce5c:	d017      	beq.n	808ce8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 808ce5e:	4b5d      	ldr	r3, [pc, #372]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808ce64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 808ce68:	687b      	ldr	r3, [r7, #4]
 808ce6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808ce6c:	4959      	ldr	r1, [pc, #356]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce6e:	4313      	orrs	r3, r2
 808ce70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 808ce74:	687b      	ldr	r3, [r7, #4]
 808ce76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808ce78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 808ce7c:	d101      	bne.n	808ce82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 808ce7e:	2301      	movs	r3, #1
 808ce80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 808ce82:	687b      	ldr	r3, [r7, #4]
 808ce84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808ce86:	2b00      	cmp	r3, #0
 808ce88:	d101      	bne.n	808ce8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 808ce8a:	2301      	movs	r3, #1
 808ce8c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 808ce8e:	687b      	ldr	r3, [r7, #4]
 808ce90:	681b      	ldr	r3, [r3, #0]
 808ce92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 808ce96:	2b00      	cmp	r3, #0
 808ce98:	d017      	beq.n	808ceca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 808ce9a:	4b4e      	ldr	r3, [pc, #312]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ce9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808cea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 808cea4:	687b      	ldr	r3, [r7, #4]
 808cea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808cea8:	494a      	ldr	r1, [pc, #296]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ceaa:	4313      	orrs	r3, r2
 808ceac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 808ceb0:	687b      	ldr	r3, [r7, #4]
 808ceb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ceb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 808ceb8:	d101      	bne.n	808cebe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 808ceba:	2301      	movs	r3, #1
 808cebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 808cebe:	687b      	ldr	r3, [r7, #4]
 808cec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808cec2:	2b00      	cmp	r3, #0
 808cec4:	d101      	bne.n	808ceca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 808cec6:	2301      	movs	r3, #1
 808cec8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 808ceca:	687b      	ldr	r3, [r7, #4]
 808cecc:	681b      	ldr	r3, [r3, #0]
 808cece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808ced2:	2b00      	cmp	r3, #0
 808ced4:	d001      	beq.n	808ceda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 808ced6:	2301      	movs	r3, #1
 808ced8:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 808ceda:	687b      	ldr	r3, [r7, #4]
 808cedc:	681b      	ldr	r3, [r3, #0]
 808cede:	f003 0320 	and.w	r3, r3, #32
 808cee2:	2b00      	cmp	r3, #0
 808cee4:	f000 808b 	beq.w	808cffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 808cee8:	4b3a      	ldr	r3, [pc, #232]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ceec:	4a39      	ldr	r2, [pc, #228]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808ceee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808cef2:	6413      	str	r3, [r2, #64]	; 0x40
 808cef4:	4b37      	ldr	r3, [pc, #220]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808cef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808cefc:	60bb      	str	r3, [r7, #8]
 808cefe:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 808cf00:	4b35      	ldr	r3, [pc, #212]	; (808cfd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 808cf02:	681b      	ldr	r3, [r3, #0]
 808cf04:	4a34      	ldr	r2, [pc, #208]	; (808cfd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 808cf06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808cf0a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808cf0c:	f7fc f928 	bl	8089160 <HAL_GetTick>
 808cf10:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 808cf12:	e008      	b.n	808cf26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 808cf14:	f7fc f924 	bl	8089160 <HAL_GetTick>
 808cf18:	4602      	mov	r2, r0
 808cf1a:	697b      	ldr	r3, [r7, #20]
 808cf1c:	1ad3      	subs	r3, r2, r3
 808cf1e:	2b64      	cmp	r3, #100	; 0x64
 808cf20:	d901      	bls.n	808cf26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 808cf22:	2303      	movs	r3, #3
 808cf24:	e355      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 808cf26:	4b2c      	ldr	r3, [pc, #176]	; (808cfd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 808cf28:	681b      	ldr	r3, [r3, #0]
 808cf2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808cf2e:	2b00      	cmp	r3, #0
 808cf30:	d0f0      	beq.n	808cf14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 808cf32:	4b28      	ldr	r3, [pc, #160]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 808cf3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 808cf3c:	693b      	ldr	r3, [r7, #16]
 808cf3e:	2b00      	cmp	r3, #0
 808cf40:	d035      	beq.n	808cfae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 808cf42:	687b      	ldr	r3, [r7, #4]
 808cf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808cf46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 808cf4a:	693a      	ldr	r2, [r7, #16]
 808cf4c:	429a      	cmp	r2, r3
 808cf4e:	d02e      	beq.n	808cfae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 808cf50:	4b20      	ldr	r3, [pc, #128]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 808cf58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 808cf5a:	4b1e      	ldr	r3, [pc, #120]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf5e:	4a1d      	ldr	r2, [pc, #116]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808cf64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 808cf66:	4b1b      	ldr	r3, [pc, #108]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf6a:	4a1a      	ldr	r2, [pc, #104]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 808cf70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 808cf72:	4a18      	ldr	r2, [pc, #96]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf74:	693b      	ldr	r3, [r7, #16]
 808cf76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 808cf78:	4b16      	ldr	r3, [pc, #88]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cf7c:	f003 0301 	and.w	r3, r3, #1
 808cf80:	2b00      	cmp	r3, #0
 808cf82:	d014      	beq.n	808cfae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808cf84:	f7fc f8ec 	bl	8089160 <HAL_GetTick>
 808cf88:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 808cf8a:	e00a      	b.n	808cfa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 808cf8c:	f7fc f8e8 	bl	8089160 <HAL_GetTick>
 808cf90:	4602      	mov	r2, r0
 808cf92:	697b      	ldr	r3, [r7, #20]
 808cf94:	1ad3      	subs	r3, r2, r3
 808cf96:	f241 3288 	movw	r2, #5000	; 0x1388
 808cf9a:	4293      	cmp	r3, r2
 808cf9c:	d901      	bls.n	808cfa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 808cf9e:	2303      	movs	r3, #3
 808cfa0:	e317      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 808cfa2:	4b0c      	ldr	r3, [pc, #48]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cfa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808cfa6:	f003 0302 	and.w	r3, r3, #2
 808cfaa:	2b00      	cmp	r3, #0
 808cfac:	d0ee      	beq.n	808cf8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 808cfae:	687b      	ldr	r3, [r7, #4]
 808cfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808cfb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 808cfb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 808cfba:	d111      	bne.n	808cfe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 808cfbc:	4b05      	ldr	r3, [pc, #20]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cfbe:	689b      	ldr	r3, [r3, #8]
 808cfc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 808cfc4:	687b      	ldr	r3, [r7, #4]
 808cfc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 808cfc8:	4b04      	ldr	r3, [pc, #16]	; (808cfdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 808cfca:	400b      	ands	r3, r1
 808cfcc:	4901      	ldr	r1, [pc, #4]	; (808cfd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 808cfce:	4313      	orrs	r3, r2
 808cfd0:	608b      	str	r3, [r1, #8]
 808cfd2:	e00b      	b.n	808cfec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 808cfd4:	40023800 	.word	0x40023800
 808cfd8:	40007000 	.word	0x40007000
 808cfdc:	0ffffcff 	.word	0x0ffffcff
 808cfe0:	4bb0      	ldr	r3, [pc, #704]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808cfe2:	689b      	ldr	r3, [r3, #8]
 808cfe4:	4aaf      	ldr	r2, [pc, #700]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808cfe6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 808cfea:	6093      	str	r3, [r2, #8]
 808cfec:	4bad      	ldr	r3, [pc, #692]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808cfee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 808cff0:	687b      	ldr	r3, [r7, #4]
 808cff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808cff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 808cff8:	49aa      	ldr	r1, [pc, #680]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808cffa:	4313      	orrs	r3, r2
 808cffc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 808cffe:	687b      	ldr	r3, [r7, #4]
 808d000:	681b      	ldr	r3, [r3, #0]
 808d002:	f003 0310 	and.w	r3, r3, #16
 808d006:	2b00      	cmp	r3, #0
 808d008:	d010      	beq.n	808d02c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 808d00a:	4ba6      	ldr	r3, [pc, #664]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d010:	4aa4      	ldr	r2, [pc, #656]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 808d016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 808d01a:	4ba2      	ldr	r3, [pc, #648]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d01c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 808d020:	687b      	ldr	r3, [r7, #4]
 808d022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808d024:	499f      	ldr	r1, [pc, #636]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d026:	4313      	orrs	r3, r2
 808d028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 808d02c:	687b      	ldr	r3, [r7, #4]
 808d02e:	681b      	ldr	r3, [r3, #0]
 808d030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808d034:	2b00      	cmp	r3, #0
 808d036:	d00a      	beq.n	808d04e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 808d038:	4b9a      	ldr	r3, [pc, #616]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d03e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 808d042:	687b      	ldr	r3, [r7, #4]
 808d044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808d046:	4997      	ldr	r1, [pc, #604]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d048:	4313      	orrs	r3, r2
 808d04a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 808d04e:	687b      	ldr	r3, [r7, #4]
 808d050:	681b      	ldr	r3, [r3, #0]
 808d052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 808d056:	2b00      	cmp	r3, #0
 808d058:	d00a      	beq.n	808d070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 808d05a:	4b92      	ldr	r3, [pc, #584]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 808d064:	687b      	ldr	r3, [r7, #4]
 808d066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808d068:	498e      	ldr	r1, [pc, #568]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d06a:	4313      	orrs	r3, r2
 808d06c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 808d070:	687b      	ldr	r3, [r7, #4]
 808d072:	681b      	ldr	r3, [r3, #0]
 808d074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808d078:	2b00      	cmp	r3, #0
 808d07a:	d00a      	beq.n	808d092 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 808d07c:	4b89      	ldr	r3, [pc, #548]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 808d086:	687b      	ldr	r3, [r7, #4]
 808d088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808d08a:	4986      	ldr	r1, [pc, #536]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d08c:	4313      	orrs	r3, r2
 808d08e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 808d092:	687b      	ldr	r3, [r7, #4]
 808d094:	681b      	ldr	r3, [r3, #0]
 808d096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808d09a:	2b00      	cmp	r3, #0
 808d09c:	d00a      	beq.n	808d0b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 808d09e:	4b81      	ldr	r3, [pc, #516]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d0a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 808d0a8:	687b      	ldr	r3, [r7, #4]
 808d0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808d0ac:	497d      	ldr	r1, [pc, #500]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0ae:	4313      	orrs	r3, r2
 808d0b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 808d0b4:	687b      	ldr	r3, [r7, #4]
 808d0b6:	681b      	ldr	r3, [r3, #0]
 808d0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808d0bc:	2b00      	cmp	r3, #0
 808d0be:	d00a      	beq.n	808d0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 808d0c0:	4b78      	ldr	r3, [pc, #480]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d0c6:	f023 0203 	bic.w	r2, r3, #3
 808d0ca:	687b      	ldr	r3, [r7, #4]
 808d0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808d0ce:	4975      	ldr	r1, [pc, #468]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0d0:	4313      	orrs	r3, r2
 808d0d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 808d0d6:	687b      	ldr	r3, [r7, #4]
 808d0d8:	681b      	ldr	r3, [r3, #0]
 808d0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808d0de:	2b00      	cmp	r3, #0
 808d0e0:	d00a      	beq.n	808d0f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 808d0e2:	4b70      	ldr	r3, [pc, #448]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d0e8:	f023 020c 	bic.w	r2, r3, #12
 808d0ec:	687b      	ldr	r3, [r7, #4]
 808d0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808d0f0:	496c      	ldr	r1, [pc, #432]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d0f2:	4313      	orrs	r3, r2
 808d0f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 808d0f8:	687b      	ldr	r3, [r7, #4]
 808d0fa:	681b      	ldr	r3, [r3, #0]
 808d0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808d100:	2b00      	cmp	r3, #0
 808d102:	d00a      	beq.n	808d11a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 808d104:	4b67      	ldr	r3, [pc, #412]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d10a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 808d10e:	687b      	ldr	r3, [r7, #4]
 808d110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808d112:	4964      	ldr	r1, [pc, #400]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d114:	4313      	orrs	r3, r2
 808d116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 808d11a:	687b      	ldr	r3, [r7, #4]
 808d11c:	681b      	ldr	r3, [r3, #0]
 808d11e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 808d122:	2b00      	cmp	r3, #0
 808d124:	d00a      	beq.n	808d13c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 808d126:	4b5f      	ldr	r3, [pc, #380]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d12c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 808d130:	687b      	ldr	r3, [r7, #4]
 808d132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808d134:	495b      	ldr	r1, [pc, #364]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d136:	4313      	orrs	r3, r2
 808d138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 808d13c:	687b      	ldr	r3, [r7, #4]
 808d13e:	681b      	ldr	r3, [r3, #0]
 808d140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 808d144:	2b00      	cmp	r3, #0
 808d146:	d00a      	beq.n	808d15e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 808d148:	4b56      	ldr	r3, [pc, #344]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d14e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 808d152:	687b      	ldr	r3, [r7, #4]
 808d154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808d156:	4953      	ldr	r1, [pc, #332]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d158:	4313      	orrs	r3, r2
 808d15a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 808d15e:	687b      	ldr	r3, [r7, #4]
 808d160:	681b      	ldr	r3, [r3, #0]
 808d162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 808d166:	2b00      	cmp	r3, #0
 808d168:	d00a      	beq.n	808d180 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 808d16a:	4b4e      	ldr	r3, [pc, #312]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d170:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 808d174:	687b      	ldr	r3, [r7, #4]
 808d176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808d178:	494a      	ldr	r1, [pc, #296]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d17a:	4313      	orrs	r3, r2
 808d17c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 808d180:	687b      	ldr	r3, [r7, #4]
 808d182:	681b      	ldr	r3, [r3, #0]
 808d184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 808d188:	2b00      	cmp	r3, #0
 808d18a:	d00a      	beq.n	808d1a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 808d18c:	4b45      	ldr	r3, [pc, #276]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 808d196:	687b      	ldr	r3, [r7, #4]
 808d198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808d19a:	4942      	ldr	r1, [pc, #264]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d19c:	4313      	orrs	r3, r2
 808d19e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 808d1a2:	687b      	ldr	r3, [r7, #4]
 808d1a4:	681b      	ldr	r3, [r3, #0]
 808d1a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 808d1aa:	2b00      	cmp	r3, #0
 808d1ac:	d00a      	beq.n	808d1c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 808d1ae:	4b3d      	ldr	r3, [pc, #244]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d1b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 808d1b8:	687b      	ldr	r3, [r7, #4]
 808d1ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808d1bc:	4939      	ldr	r1, [pc, #228]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d1be:	4313      	orrs	r3, r2
 808d1c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 808d1c4:	687b      	ldr	r3, [r7, #4]
 808d1c6:	681b      	ldr	r3, [r3, #0]
 808d1c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808d1cc:	2b00      	cmp	r3, #0
 808d1ce:	d00a      	beq.n	808d1e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 808d1d0:	4b34      	ldr	r3, [pc, #208]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d1d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 808d1da:	687b      	ldr	r3, [r7, #4]
 808d1dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 808d1de:	4931      	ldr	r1, [pc, #196]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d1e0:	4313      	orrs	r3, r2
 808d1e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 808d1e6:	687b      	ldr	r3, [r7, #4]
 808d1e8:	681b      	ldr	r3, [r3, #0]
 808d1ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808d1ee:	2b00      	cmp	r3, #0
 808d1f0:	d011      	beq.n	808d216 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 808d1f2:	4b2c      	ldr	r3, [pc, #176]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d1f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 808d1fc:	687b      	ldr	r3, [r7, #4]
 808d1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 808d200:	4928      	ldr	r1, [pc, #160]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d202:	4313      	orrs	r3, r2
 808d204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 808d208:	687b      	ldr	r3, [r7, #4]
 808d20a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 808d20c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 808d210:	d101      	bne.n	808d216 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 808d212:	2301      	movs	r3, #1
 808d214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 808d216:	687b      	ldr	r3, [r7, #4]
 808d218:	681b      	ldr	r3, [r3, #0]
 808d21a:	f003 0308 	and.w	r3, r3, #8
 808d21e:	2b00      	cmp	r3, #0
 808d220:	d001      	beq.n	808d226 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 808d222:	2301      	movs	r3, #1
 808d224:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 808d226:	687b      	ldr	r3, [r7, #4]
 808d228:	681b      	ldr	r3, [r3, #0]
 808d22a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 808d22e:	2b00      	cmp	r3, #0
 808d230:	d00a      	beq.n	808d248 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 808d232:	4b1c      	ldr	r3, [pc, #112]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d238:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 808d23c:	687b      	ldr	r3, [r7, #4]
 808d23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808d240:	4918      	ldr	r1, [pc, #96]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d242:	4313      	orrs	r3, r2
 808d244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 808d248:	687b      	ldr	r3, [r7, #4]
 808d24a:	681b      	ldr	r3, [r3, #0]
 808d24c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 808d250:	2b00      	cmp	r3, #0
 808d252:	d00b      	beq.n	808d26c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 808d254:	4b13      	ldr	r3, [pc, #76]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d25a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 808d25e:	687b      	ldr	r3, [r7, #4]
 808d260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 808d264:	490f      	ldr	r1, [pc, #60]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d266:	4313      	orrs	r3, r2
 808d268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 808d26c:	69fb      	ldr	r3, [r7, #28]
 808d26e:	2b01      	cmp	r3, #1
 808d270:	d005      	beq.n	808d27e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 808d272:	687b      	ldr	r3, [r7, #4]
 808d274:	681b      	ldr	r3, [r3, #0]
 808d276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 808d27a:	f040 80d8 	bne.w	808d42e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 808d27e:	4b09      	ldr	r3, [pc, #36]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d280:	681b      	ldr	r3, [r3, #0]
 808d282:	4a08      	ldr	r2, [pc, #32]	; (808d2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 808d284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 808d288:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808d28a:	f7fb ff69 	bl	8089160 <HAL_GetTick>
 808d28e:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 808d290:	e00a      	b.n	808d2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 808d292:	f7fb ff65 	bl	8089160 <HAL_GetTick>
 808d296:	4602      	mov	r2, r0
 808d298:	697b      	ldr	r3, [r7, #20]
 808d29a:	1ad3      	subs	r3, r2, r3
 808d29c:	2b64      	cmp	r3, #100	; 0x64
 808d29e:	d903      	bls.n	808d2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 808d2a0:	2303      	movs	r3, #3
 808d2a2:	e196      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 808d2a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 808d2a8:	4b6c      	ldr	r3, [pc, #432]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d2aa:	681b      	ldr	r3, [r3, #0]
 808d2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 808d2b0:	2b00      	cmp	r3, #0
 808d2b2:	d1ee      	bne.n	808d292 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 808d2b4:	687b      	ldr	r3, [r7, #4]
 808d2b6:	681b      	ldr	r3, [r3, #0]
 808d2b8:	f003 0301 	and.w	r3, r3, #1
 808d2bc:	2b00      	cmp	r3, #0
 808d2be:	d021      	beq.n	808d304 <HAL_RCCEx_PeriphCLKConfig+0x500>
 808d2c0:	687b      	ldr	r3, [r7, #4]
 808d2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808d2c4:	2b00      	cmp	r3, #0
 808d2c6:	d11d      	bne.n	808d304 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 808d2c8:	4b64      	ldr	r3, [pc, #400]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d2ce:	0c1b      	lsrs	r3, r3, #16
 808d2d0:	f003 0303 	and.w	r3, r3, #3
 808d2d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 808d2d6:	4b61      	ldr	r3, [pc, #388]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d2dc:	0e1b      	lsrs	r3, r3, #24
 808d2de:	f003 030f 	and.w	r3, r3, #15
 808d2e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 808d2e4:	687b      	ldr	r3, [r7, #4]
 808d2e6:	685b      	ldr	r3, [r3, #4]
 808d2e8:	019a      	lsls	r2, r3, #6
 808d2ea:	693b      	ldr	r3, [r7, #16]
 808d2ec:	041b      	lsls	r3, r3, #16
 808d2ee:	431a      	orrs	r2, r3
 808d2f0:	68fb      	ldr	r3, [r7, #12]
 808d2f2:	061b      	lsls	r3, r3, #24
 808d2f4:	431a      	orrs	r2, r3
 808d2f6:	687b      	ldr	r3, [r7, #4]
 808d2f8:	689b      	ldr	r3, [r3, #8]
 808d2fa:	071b      	lsls	r3, r3, #28
 808d2fc:	4957      	ldr	r1, [pc, #348]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d2fe:	4313      	orrs	r3, r2
 808d300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 808d304:	687b      	ldr	r3, [r7, #4]
 808d306:	681b      	ldr	r3, [r3, #0]
 808d308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 808d30c:	2b00      	cmp	r3, #0
 808d30e:	d004      	beq.n	808d31a <HAL_RCCEx_PeriphCLKConfig+0x516>
 808d310:	687b      	ldr	r3, [r7, #4]
 808d312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808d314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 808d318:	d00a      	beq.n	808d330 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 808d31a:	687b      	ldr	r3, [r7, #4]
 808d31c:	681b      	ldr	r3, [r3, #0]
 808d31e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 808d322:	2b00      	cmp	r3, #0
 808d324:	d02e      	beq.n	808d384 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 808d326:	687b      	ldr	r3, [r7, #4]
 808d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808d32a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 808d32e:	d129      	bne.n	808d384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 808d330:	4b4a      	ldr	r3, [pc, #296]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d336:	0c1b      	lsrs	r3, r3, #16
 808d338:	f003 0303 	and.w	r3, r3, #3
 808d33c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 808d33e:	4b47      	ldr	r3, [pc, #284]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d344:	0f1b      	lsrs	r3, r3, #28
 808d346:	f003 0307 	and.w	r3, r3, #7
 808d34a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 808d34c:	687b      	ldr	r3, [r7, #4]
 808d34e:	685b      	ldr	r3, [r3, #4]
 808d350:	019a      	lsls	r2, r3, #6
 808d352:	693b      	ldr	r3, [r7, #16]
 808d354:	041b      	lsls	r3, r3, #16
 808d356:	431a      	orrs	r2, r3
 808d358:	687b      	ldr	r3, [r7, #4]
 808d35a:	68db      	ldr	r3, [r3, #12]
 808d35c:	061b      	lsls	r3, r3, #24
 808d35e:	431a      	orrs	r2, r3
 808d360:	68fb      	ldr	r3, [r7, #12]
 808d362:	071b      	lsls	r3, r3, #28
 808d364:	493d      	ldr	r1, [pc, #244]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d366:	4313      	orrs	r3, r2
 808d368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 808d36c:	4b3b      	ldr	r3, [pc, #236]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d372:	f023 021f 	bic.w	r2, r3, #31
 808d376:	687b      	ldr	r3, [r7, #4]
 808d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808d37a:	3b01      	subs	r3, #1
 808d37c:	4937      	ldr	r1, [pc, #220]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d37e:	4313      	orrs	r3, r2
 808d380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 808d384:	687b      	ldr	r3, [r7, #4]
 808d386:	681b      	ldr	r3, [r3, #0]
 808d388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808d38c:	2b00      	cmp	r3, #0
 808d38e:	d01d      	beq.n	808d3cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 808d390:	4b32      	ldr	r3, [pc, #200]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d396:	0e1b      	lsrs	r3, r3, #24
 808d398:	f003 030f 	and.w	r3, r3, #15
 808d39c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 808d39e:	4b2f      	ldr	r3, [pc, #188]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d3a4:	0f1b      	lsrs	r3, r3, #28
 808d3a6:	f003 0307 	and.w	r3, r3, #7
 808d3aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 808d3ac:	687b      	ldr	r3, [r7, #4]
 808d3ae:	685b      	ldr	r3, [r3, #4]
 808d3b0:	019a      	lsls	r2, r3, #6
 808d3b2:	687b      	ldr	r3, [r7, #4]
 808d3b4:	691b      	ldr	r3, [r3, #16]
 808d3b6:	041b      	lsls	r3, r3, #16
 808d3b8:	431a      	orrs	r2, r3
 808d3ba:	693b      	ldr	r3, [r7, #16]
 808d3bc:	061b      	lsls	r3, r3, #24
 808d3be:	431a      	orrs	r2, r3
 808d3c0:	68fb      	ldr	r3, [r7, #12]
 808d3c2:	071b      	lsls	r3, r3, #28
 808d3c4:	4925      	ldr	r1, [pc, #148]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d3c6:	4313      	orrs	r3, r2
 808d3c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 808d3cc:	687b      	ldr	r3, [r7, #4]
 808d3ce:	681b      	ldr	r3, [r3, #0]
 808d3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808d3d4:	2b00      	cmp	r3, #0
 808d3d6:	d011      	beq.n	808d3fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 808d3d8:	687b      	ldr	r3, [r7, #4]
 808d3da:	685b      	ldr	r3, [r3, #4]
 808d3dc:	019a      	lsls	r2, r3, #6
 808d3de:	687b      	ldr	r3, [r7, #4]
 808d3e0:	691b      	ldr	r3, [r3, #16]
 808d3e2:	041b      	lsls	r3, r3, #16
 808d3e4:	431a      	orrs	r2, r3
 808d3e6:	687b      	ldr	r3, [r7, #4]
 808d3e8:	68db      	ldr	r3, [r3, #12]
 808d3ea:	061b      	lsls	r3, r3, #24
 808d3ec:	431a      	orrs	r2, r3
 808d3ee:	687b      	ldr	r3, [r7, #4]
 808d3f0:	689b      	ldr	r3, [r3, #8]
 808d3f2:	071b      	lsls	r3, r3, #28
 808d3f4:	4919      	ldr	r1, [pc, #100]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d3f6:	4313      	orrs	r3, r2
 808d3f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 808d3fc:	4b17      	ldr	r3, [pc, #92]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d3fe:	681b      	ldr	r3, [r3, #0]
 808d400:	4a16      	ldr	r2, [pc, #88]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 808d406:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808d408:	f7fb feaa 	bl	8089160 <HAL_GetTick>
 808d40c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 808d40e:	e008      	b.n	808d422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 808d410:	f7fb fea6 	bl	8089160 <HAL_GetTick>
 808d414:	4602      	mov	r2, r0
 808d416:	697b      	ldr	r3, [r7, #20]
 808d418:	1ad3      	subs	r3, r2, r3
 808d41a:	2b64      	cmp	r3, #100	; 0x64
 808d41c:	d901      	bls.n	808d422 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 808d41e:	2303      	movs	r3, #3
 808d420:	e0d7      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 808d422:	4b0e      	ldr	r3, [pc, #56]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d424:	681b      	ldr	r3, [r3, #0]
 808d426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 808d42a:	2b00      	cmp	r3, #0
 808d42c:	d0f0      	beq.n	808d410 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 808d42e:	69bb      	ldr	r3, [r7, #24]
 808d430:	2b01      	cmp	r3, #1
 808d432:	f040 80cd 	bne.w	808d5d0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 808d436:	4b09      	ldr	r3, [pc, #36]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d438:	681b      	ldr	r3, [r3, #0]
 808d43a:	4a08      	ldr	r2, [pc, #32]	; (808d45c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 808d43c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 808d440:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808d442:	f7fb fe8d 	bl	8089160 <HAL_GetTick>
 808d446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 808d448:	e00a      	b.n	808d460 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 808d44a:	f7fb fe89 	bl	8089160 <HAL_GetTick>
 808d44e:	4602      	mov	r2, r0
 808d450:	697b      	ldr	r3, [r7, #20]
 808d452:	1ad3      	subs	r3, r2, r3
 808d454:	2b64      	cmp	r3, #100	; 0x64
 808d456:	d903      	bls.n	808d460 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 808d458:	2303      	movs	r3, #3
 808d45a:	e0ba      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 808d45c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 808d460:	4b5e      	ldr	r3, [pc, #376]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d462:	681b      	ldr	r3, [r3, #0]
 808d464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 808d468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 808d46c:	d0ed      	beq.n	808d44a <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 808d46e:	687b      	ldr	r3, [r7, #4]
 808d470:	681b      	ldr	r3, [r3, #0]
 808d472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 808d476:	2b00      	cmp	r3, #0
 808d478:	d003      	beq.n	808d482 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 808d47a:	687b      	ldr	r3, [r7, #4]
 808d47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808d47e:	2b00      	cmp	r3, #0
 808d480:	d009      	beq.n	808d496 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 808d482:	687b      	ldr	r3, [r7, #4]
 808d484:	681b      	ldr	r3, [r3, #0]
 808d486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 808d48a:	2b00      	cmp	r3, #0
 808d48c:	d02e      	beq.n	808d4ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 808d48e:	687b      	ldr	r3, [r7, #4]
 808d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808d492:	2b00      	cmp	r3, #0
 808d494:	d12a      	bne.n	808d4ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 808d496:	4b51      	ldr	r3, [pc, #324]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d49c:	0c1b      	lsrs	r3, r3, #16
 808d49e:	f003 0303 	and.w	r3, r3, #3
 808d4a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 808d4a4:	4b4d      	ldr	r3, [pc, #308]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d4aa:	0f1b      	lsrs	r3, r3, #28
 808d4ac:	f003 0307 	and.w	r3, r3, #7
 808d4b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 808d4b2:	687b      	ldr	r3, [r7, #4]
 808d4b4:	695b      	ldr	r3, [r3, #20]
 808d4b6:	019a      	lsls	r2, r3, #6
 808d4b8:	693b      	ldr	r3, [r7, #16]
 808d4ba:	041b      	lsls	r3, r3, #16
 808d4bc:	431a      	orrs	r2, r3
 808d4be:	687b      	ldr	r3, [r7, #4]
 808d4c0:	699b      	ldr	r3, [r3, #24]
 808d4c2:	061b      	lsls	r3, r3, #24
 808d4c4:	431a      	orrs	r2, r3
 808d4c6:	68fb      	ldr	r3, [r7, #12]
 808d4c8:	071b      	lsls	r3, r3, #28
 808d4ca:	4944      	ldr	r1, [pc, #272]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d4cc:	4313      	orrs	r3, r2
 808d4ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 808d4d2:	4b42      	ldr	r3, [pc, #264]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d4d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 808d4dc:	687b      	ldr	r3, [r7, #4]
 808d4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808d4e0:	3b01      	subs	r3, #1
 808d4e2:	021b      	lsls	r3, r3, #8
 808d4e4:	493d      	ldr	r1, [pc, #244]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d4e6:	4313      	orrs	r3, r2
 808d4e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 808d4ec:	687b      	ldr	r3, [r7, #4]
 808d4ee:	681b      	ldr	r3, [r3, #0]
 808d4f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808d4f4:	2b00      	cmp	r3, #0
 808d4f6:	d022      	beq.n	808d53e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 808d4f8:	687b      	ldr	r3, [r7, #4]
 808d4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 808d4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 808d500:	d11d      	bne.n	808d53e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 808d502:	4b36      	ldr	r3, [pc, #216]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d508:	0e1b      	lsrs	r3, r3, #24
 808d50a:	f003 030f 	and.w	r3, r3, #15
 808d50e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 808d510:	4b32      	ldr	r3, [pc, #200]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d516:	0f1b      	lsrs	r3, r3, #28
 808d518:	f003 0307 	and.w	r3, r3, #7
 808d51c:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 808d51e:	687b      	ldr	r3, [r7, #4]
 808d520:	695b      	ldr	r3, [r3, #20]
 808d522:	019a      	lsls	r2, r3, #6
 808d524:	687b      	ldr	r3, [r7, #4]
 808d526:	6a1b      	ldr	r3, [r3, #32]
 808d528:	041b      	lsls	r3, r3, #16
 808d52a:	431a      	orrs	r2, r3
 808d52c:	693b      	ldr	r3, [r7, #16]
 808d52e:	061b      	lsls	r3, r3, #24
 808d530:	431a      	orrs	r2, r3
 808d532:	68fb      	ldr	r3, [r7, #12]
 808d534:	071b      	lsls	r3, r3, #28
 808d536:	4929      	ldr	r1, [pc, #164]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d538:	4313      	orrs	r3, r2
 808d53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 808d53e:	687b      	ldr	r3, [r7, #4]
 808d540:	681b      	ldr	r3, [r3, #0]
 808d542:	f003 0308 	and.w	r3, r3, #8
 808d546:	2b00      	cmp	r3, #0
 808d548:	d028      	beq.n	808d59c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 808d54a:	4b24      	ldr	r3, [pc, #144]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d550:	0e1b      	lsrs	r3, r3, #24
 808d552:	f003 030f 	and.w	r3, r3, #15
 808d556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 808d558:	4b20      	ldr	r3, [pc, #128]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d55e:	0c1b      	lsrs	r3, r3, #16
 808d560:	f003 0303 	and.w	r3, r3, #3
 808d564:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 808d566:	687b      	ldr	r3, [r7, #4]
 808d568:	695b      	ldr	r3, [r3, #20]
 808d56a:	019a      	lsls	r2, r3, #6
 808d56c:	68fb      	ldr	r3, [r7, #12]
 808d56e:	041b      	lsls	r3, r3, #16
 808d570:	431a      	orrs	r2, r3
 808d572:	693b      	ldr	r3, [r7, #16]
 808d574:	061b      	lsls	r3, r3, #24
 808d576:	431a      	orrs	r2, r3
 808d578:	687b      	ldr	r3, [r7, #4]
 808d57a:	69db      	ldr	r3, [r3, #28]
 808d57c:	071b      	lsls	r3, r3, #28
 808d57e:	4917      	ldr	r1, [pc, #92]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d580:	4313      	orrs	r3, r2
 808d582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 808d586:	4b15      	ldr	r3, [pc, #84]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d58c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 808d590:	687b      	ldr	r3, [r7, #4]
 808d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808d594:	4911      	ldr	r1, [pc, #68]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d596:	4313      	orrs	r3, r2
 808d598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 808d59c:	4b0f      	ldr	r3, [pc, #60]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d59e:	681b      	ldr	r3, [r3, #0]
 808d5a0:	4a0e      	ldr	r2, [pc, #56]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808d5a6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808d5a8:	f7fb fdda 	bl	8089160 <HAL_GetTick>
 808d5ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 808d5ae:	e008      	b.n	808d5c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 808d5b0:	f7fb fdd6 	bl	8089160 <HAL_GetTick>
 808d5b4:	4602      	mov	r2, r0
 808d5b6:	697b      	ldr	r3, [r7, #20]
 808d5b8:	1ad3      	subs	r3, r2, r3
 808d5ba:	2b64      	cmp	r3, #100	; 0x64
 808d5bc:	d901      	bls.n	808d5c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 808d5be:	2303      	movs	r3, #3
 808d5c0:	e007      	b.n	808d5d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 808d5c2:	4b06      	ldr	r3, [pc, #24]	; (808d5dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 808d5c4:	681b      	ldr	r3, [r3, #0]
 808d5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 808d5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 808d5ce:	d1ef      	bne.n	808d5b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 808d5d0:	2300      	movs	r3, #0
}
 808d5d2:	4618      	mov	r0, r3
 808d5d4:	3720      	adds	r7, #32
 808d5d6:	46bd      	mov	sp, r7
 808d5d8:	bd80      	pop	{r7, pc}
 808d5da:	bf00      	nop
 808d5dc:	40023800 	.word	0x40023800

0808d5e0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 808d5e0:	b480      	push	{r7}
 808d5e2:	b085      	sub	sp, #20
 808d5e4:	af00      	add	r7, sp, #0
 808d5e6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 808d5e8:	2300      	movs	r3, #0
 808d5ea:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 808d5ec:	687b      	ldr	r3, [r7, #4]
 808d5ee:	4a80      	ldr	r2, [pc, #512]	; (808d7f0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 808d5f0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 808d5f2:	4b80      	ldr	r3, [pc, #512]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d5f8:	099b      	lsrs	r3, r3, #6
 808d5fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 808d5fe:	687b      	ldr	r3, [r7, #4]
 808d600:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 808d602:	4b7c      	ldr	r3, [pc, #496]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d608:	0c1b      	lsrs	r3, r3, #16
 808d60a:	f003 0203 	and.w	r2, r3, #3
 808d60e:	687b      	ldr	r3, [r7, #4]
 808d610:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 808d612:	4b78      	ldr	r3, [pc, #480]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d618:	0e1b      	lsrs	r3, r3, #24
 808d61a:	f003 020f 	and.w	r2, r3, #15
 808d61e:	687b      	ldr	r3, [r7, #4]
 808d620:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 808d622:	4b74      	ldr	r3, [pc, #464]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d628:	0f1b      	lsrs	r3, r3, #28
 808d62a:	f003 0207 	and.w	r2, r3, #7
 808d62e:	687b      	ldr	r3, [r7, #4]
 808d630:	609a      	str	r2, [r3, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 808d632:	4b70      	ldr	r3, [pc, #448]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d638:	099b      	lsrs	r3, r3, #6
 808d63a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 808d63e:	687b      	ldr	r3, [r7, #4]
 808d640:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 808d642:	4b6c      	ldr	r3, [pc, #432]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d648:	0c1b      	lsrs	r3, r3, #16
 808d64a:	f003 0203 	and.w	r2, r3, #3
 808d64e:	687b      	ldr	r3, [r7, #4]
 808d650:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos); 
 808d652:	4b68      	ldr	r3, [pc, #416]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d658:	0e1b      	lsrs	r3, r3, #24
 808d65a:	f003 020f 	and.w	r2, r3, #15
 808d65e:	687b      	ldr	r3, [r7, #4]
 808d660:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos); 
 808d662:	4b64      	ldr	r3, [pc, #400]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d668:	0f1b      	lsrs	r3, r3, #28
 808d66a:	f003 0207 	and.w	r2, r3, #7
 808d66e:	687b      	ldr	r3, [r7, #4]
 808d670:	61da      	str	r2, [r3, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 808d672:	4b60      	ldr	r3, [pc, #384]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d678:	f003 021f 	and.w	r2, r3, #31
 808d67c:	687b      	ldr	r3, [r7, #4]
 808d67e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 808d680:	4b5c      	ldr	r3, [pc, #368]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d686:	0a1b      	lsrs	r3, r3, #8
 808d688:	f003 021f 	and.w	r2, r3, #31
 808d68c:	687b      	ldr	r3, [r7, #4]
 808d68e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 808d690:	4b58      	ldr	r3, [pc, #352]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d696:	0c1b      	lsrs	r3, r3, #16
 808d698:	f003 0203 	and.w	r2, r3, #3
 808d69c:	687b      	ldr	r3, [r7, #4]
 808d69e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 808d6a0:	4b54      	ldr	r3, [pc, #336]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d6a6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 808d6aa:	687b      	ldr	r3, [r7, #4]
 808d6ac:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 808d6ae:	4b51      	ldr	r3, [pc, #324]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d6b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 808d6b8:	687b      	ldr	r3, [r7, #4]
 808d6ba:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 808d6bc:	4b4d      	ldr	r3, [pc, #308]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6be:	689b      	ldr	r3, [r3, #8]
 808d6c0:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 808d6c4:	687b      	ldr	r3, [r7, #4]
 808d6c6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 808d6c8:	4b4a      	ldr	r3, [pc, #296]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d6ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 808d6d2:	687b      	ldr	r3, [r7, #4]
 808d6d4:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 808d6d6:	4b47      	ldr	r3, [pc, #284]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d6dc:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 808d6e0:	687b      	ldr	r3, [r7, #4]
 808d6e2:	669a      	str	r2, [r3, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 808d6e4:	4b43      	ldr	r3, [pc, #268]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d6ea:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 808d6ee:	687b      	ldr	r3, [r7, #4]
 808d6f0:	66da      	str	r2, [r3, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 808d6f2:	4b40      	ldr	r3, [pc, #256]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d6f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 808d6fc:	687b      	ldr	r3, [r7, #4]
 808d6fe:	671a      	str	r2, [r3, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 808d700:	4b3c      	ldr	r3, [pc, #240]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d706:	f003 0203 	and.w	r2, r3, #3
 808d70a:	687b      	ldr	r3, [r7, #4]
 808d70c:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 808d70e:	4b39      	ldr	r3, [pc, #228]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d714:	f003 020c 	and.w	r2, r3, #12
 808d718:	687b      	ldr	r3, [r7, #4]
 808d71a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 808d71c:	4b35      	ldr	r3, [pc, #212]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d722:	f003 0230 	and.w	r2, r3, #48	; 0x30
 808d726:	687b      	ldr	r3, [r7, #4]
 808d728:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 808d72a:	4b32      	ldr	r3, [pc, #200]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d730:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 808d734:	687b      	ldr	r3, [r7, #4]
 808d736:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 808d738:	4b2e      	ldr	r3, [pc, #184]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d73e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 808d742:	687b      	ldr	r3, [r7, #4]
 808d744:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 808d746:	4b2b      	ldr	r3, [pc, #172]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d74c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 808d750:	687b      	ldr	r3, [r7, #4]
 808d752:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 808d754:	4b27      	ldr	r3, [pc, #156]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d75a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 808d75e:	687b      	ldr	r3, [r7, #4]
 808d760:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 808d762:	4b24      	ldr	r3, [pc, #144]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d768:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 808d76c:	687b      	ldr	r3, [r7, #4]
 808d76e:	661a      	str	r2, [r3, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 808d770:	4b20      	ldr	r3, [pc, #128]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d776:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 808d77a:	687b      	ldr	r3, [r7, #4]
 808d77c:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 808d77e:	4b1d      	ldr	r3, [pc, #116]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d784:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 808d788:	687b      	ldr	r3, [r7, #4]
 808d78a:	679a      	str	r2, [r3, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 808d78c:	4b19      	ldr	r3, [pc, #100]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d792:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 808d796:	687b      	ldr	r3, [r7, #4]
 808d798:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 808d79a:	4b16      	ldr	r3, [pc, #88]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808d7a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 808d7a4:	687b      	ldr	r3, [r7, #4]
 808d7a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 808d7aa:	4b12      	ldr	r3, [pc, #72]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d7ac:	689b      	ldr	r3, [r3, #8]
 808d7ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 808d7b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 808d7b4:	4b0f      	ldr	r3, [pc, #60]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808d7b8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 808d7bc:	68fb      	ldr	r3, [r7, #12]
 808d7be:	431a      	orrs	r2, r3
 808d7c0:	687b      	ldr	r3, [r7, #4]
 808d7c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 808d7c4:	4b0b      	ldr	r3, [pc, #44]	; (808d7f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 808d7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d7ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808d7ce:	2b00      	cmp	r3, #0
 808d7d0:	d103      	bne.n	808d7da <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 808d7d2:	687b      	ldr	r3, [r7, #4]
 808d7d4:	2200      	movs	r2, #0
 808d7d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 808d7d8:	e003      	b.n	808d7e2 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 808d7da:	687b      	ldr	r3, [r7, #4]
 808d7dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 808d7e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 808d7e2:	bf00      	nop
 808d7e4:	3714      	adds	r7, #20
 808d7e6:	46bd      	mov	sp, r7
 808d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 808d7ec:	4770      	bx	lr
 808d7ee:	bf00      	nop
 808d7f0:	00fffff1 	.word	0x00fffff1
 808d7f4:	40023800 	.word	0x40023800

0808d7f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 808d7f8:	b480      	push	{r7}
 808d7fa:	b087      	sub	sp, #28
 808d7fc:	af00      	add	r7, sp, #0
 808d7fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 808d800:	2300      	movs	r3, #0
 808d802:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 808d804:	2300      	movs	r3, #0
 808d806:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 808d808:	2300      	movs	r3, #0
 808d80a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 808d80c:	2300      	movs	r3, #0
 808d80e:	60bb      	str	r3, [r7, #8]
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 808d810:	687b      	ldr	r3, [r7, #4]
 808d812:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 808d816:	f040 8086 	bne.w	808d926 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;   
 808d81a:	4b8d      	ldr	r3, [pc, #564]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d820:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 808d822:	68bb      	ldr	r3, [r7, #8]
 808d824:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 808d828:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 808d82a:	68bb      	ldr	r3, [r7, #8]
 808d82c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 808d830:	d03e      	beq.n	808d8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 808d832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 808d836:	d073      	beq.n	808d920 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 808d838:	2b00      	cmp	r3, #0
 808d83a:	d000      	beq.n	808d83e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 808d83c:	e074      	b.n	808d928 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 808d83e:	4b84      	ldr	r3, [pc, #528]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d840:	685b      	ldr	r3, [r3, #4]
 808d842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808d846:	2b00      	cmp	r3, #0
 808d848:	d108      	bne.n	808d85c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 808d84a:	4b81      	ldr	r3, [pc, #516]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d84c:	685b      	ldr	r3, [r3, #4]
 808d84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d852:	4a80      	ldr	r2, [pc, #512]	; (808da54 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 808d854:	fbb2 f3f3 	udiv	r3, r2, r3
 808d858:	613b      	str	r3, [r7, #16]
 808d85a:	e007      	b.n	808d86c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 808d85c:	4b7c      	ldr	r3, [pc, #496]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d85e:	685b      	ldr	r3, [r3, #4]
 808d860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d864:	4a7c      	ldr	r2, [pc, #496]	; (808da58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 808d866:	fbb2 f3f3 	udiv	r3, r2, r3
 808d86a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 808d86c:	4b78      	ldr	r3, [pc, #480]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d872:	0e1b      	lsrs	r3, r3, #24
 808d874:	f003 030f 	and.w	r3, r3, #15
 808d878:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 808d87a:	4b75      	ldr	r3, [pc, #468]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d880:	099b      	lsrs	r3, r3, #6
 808d882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808d886:	693a      	ldr	r2, [r7, #16]
 808d888:	fb02 f203 	mul.w	r2, r2, r3
 808d88c:	68fb      	ldr	r3, [r7, #12]
 808d88e:	fbb2 f3f3 	udiv	r3, r2, r3
 808d892:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 808d894:	4b6e      	ldr	r3, [pc, #440]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d89a:	0a1b      	lsrs	r3, r3, #8
 808d89c:	f003 031f 	and.w	r3, r3, #31
 808d8a0:	3301      	adds	r3, #1
 808d8a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 808d8a4:	697a      	ldr	r2, [r7, #20]
 808d8a6:	68fb      	ldr	r3, [r7, #12]
 808d8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 808d8ac:	617b      	str	r3, [r7, #20]
        break;       
 808d8ae:	e03b      	b.n	808d928 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 808d8b0:	4b67      	ldr	r3, [pc, #412]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d8b2:	685b      	ldr	r3, [r3, #4]
 808d8b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808d8b8:	2b00      	cmp	r3, #0
 808d8ba:	d108      	bne.n	808d8ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 808d8bc:	4b64      	ldr	r3, [pc, #400]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d8be:	685b      	ldr	r3, [r3, #4]
 808d8c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d8c4:	4a63      	ldr	r2, [pc, #396]	; (808da54 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 808d8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 808d8ca:	613b      	str	r3, [r7, #16]
 808d8cc:	e007      	b.n	808d8de <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 808d8ce:	4b60      	ldr	r3, [pc, #384]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d8d0:	685b      	ldr	r3, [r3, #4]
 808d8d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d8d6:	4a60      	ldr	r2, [pc, #384]	; (808da58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 808d8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 808d8dc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 808d8de:	4b5c      	ldr	r3, [pc, #368]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d8e4:	0e1b      	lsrs	r3, r3, #24
 808d8e6:	f003 030f 	and.w	r3, r3, #15
 808d8ea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 808d8ec:	4b58      	ldr	r3, [pc, #352]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d8f2:	099b      	lsrs	r3, r3, #6
 808d8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808d8f8:	693a      	ldr	r2, [r7, #16]
 808d8fa:	fb02 f203 	mul.w	r2, r2, r3
 808d8fe:	68fb      	ldr	r3, [r7, #12]
 808d900:	fbb2 f3f3 	udiv	r3, r2, r3
 808d904:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 808d906:	4b52      	ldr	r3, [pc, #328]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d90c:	f003 031f 	and.w	r3, r3, #31
 808d910:	3301      	adds	r3, #1
 808d912:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 808d914:	697a      	ldr	r2, [r7, #20]
 808d916:	68fb      	ldr	r3, [r7, #12]
 808d918:	fbb2 f3f3 	udiv	r3, r2, r3
 808d91c:	617b      	str	r3, [r7, #20]
        break;
 808d91e:	e003      	b.n	808d928 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 808d920:	4b4e      	ldr	r3, [pc, #312]	; (808da5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 808d922:	617b      	str	r3, [r7, #20]
        break;       
 808d924:	e000      	b.n	808d928 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 808d926:	bf00      	nop
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 808d928:	687b      	ldr	r3, [r7, #4]
 808d92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 808d92e:	f040 8086 	bne.w	808da3e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;   
 808d932:	4b47      	ldr	r3, [pc, #284]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d938:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 808d93a:	68bb      	ldr	r3, [r7, #8]
 808d93c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 808d940:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 808d942:	68bb      	ldr	r3, [r7, #8]
 808d944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 808d948:	d03e      	beq.n	808d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 808d94a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 808d94e:	d073      	beq.n	808da38 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 808d950:	2b00      	cmp	r3, #0
 808d952:	d000      	beq.n	808d956 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;       
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */      
    default :
      {
        break;
 808d954:	e074      	b.n	808da40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 808d956:	4b3e      	ldr	r3, [pc, #248]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d958:	685b      	ldr	r3, [r3, #4]
 808d95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808d95e:	2b00      	cmp	r3, #0
 808d960:	d108      	bne.n	808d974 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 808d962:	4b3b      	ldr	r3, [pc, #236]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d964:	685b      	ldr	r3, [r3, #4]
 808d966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d96a:	4a3a      	ldr	r2, [pc, #232]	; (808da54 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 808d96c:	fbb2 f3f3 	udiv	r3, r2, r3
 808d970:	613b      	str	r3, [r7, #16]
 808d972:	e007      	b.n	808d984 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 808d974:	4b36      	ldr	r3, [pc, #216]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d976:	685b      	ldr	r3, [r3, #4]
 808d978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d97c:	4a36      	ldr	r2, [pc, #216]	; (808da58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 808d97e:	fbb2 f3f3 	udiv	r3, r2, r3
 808d982:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 808d984:	4b32      	ldr	r3, [pc, #200]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d98a:	0e1b      	lsrs	r3, r3, #24
 808d98c:	f003 030f 	and.w	r3, r3, #15
 808d990:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 808d992:	4b2f      	ldr	r3, [pc, #188]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808d998:	099b      	lsrs	r3, r3, #6
 808d99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808d99e:	693a      	ldr	r2, [r7, #16]
 808d9a0:	fb02 f203 	mul.w	r2, r2, r3
 808d9a4:	68fb      	ldr	r3, [r7, #12]
 808d9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 808d9aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 808d9ac:	4b28      	ldr	r3, [pc, #160]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808d9b2:	0a1b      	lsrs	r3, r3, #8
 808d9b4:	f003 031f 	and.w	r3, r3, #31
 808d9b8:	3301      	adds	r3, #1
 808d9ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg); 
 808d9bc:	697a      	ldr	r2, [r7, #20]
 808d9be:	68fb      	ldr	r3, [r7, #12]
 808d9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 808d9c4:	617b      	str	r3, [r7, #20]
        break;       
 808d9c6:	e03b      	b.n	808da40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 808d9c8:	4b21      	ldr	r3, [pc, #132]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d9ca:	685b      	ldr	r3, [r3, #4]
 808d9cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808d9d0:	2b00      	cmp	r3, #0
 808d9d2:	d108      	bne.n	808d9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 808d9d4:	4b1e      	ldr	r3, [pc, #120]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d9d6:	685b      	ldr	r3, [r3, #4]
 808d9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d9dc:	4a1d      	ldr	r2, [pc, #116]	; (808da54 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 808d9de:	fbb2 f3f3 	udiv	r3, r2, r3
 808d9e2:	613b      	str	r3, [r7, #16]
 808d9e4:	e007      	b.n	808d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 808d9e6:	4b1a      	ldr	r3, [pc, #104]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d9e8:	685b      	ldr	r3, [r3, #4]
 808d9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808d9ee:	4a1a      	ldr	r2, [pc, #104]	; (808da58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 808d9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 808d9f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 808d9f6:	4b16      	ldr	r3, [pc, #88]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808d9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808d9fc:	0e1b      	lsrs	r3, r3, #24
 808d9fe:	f003 030f 	and.w	r3, r3, #15
 808da02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 808da04:	4b12      	ldr	r3, [pc, #72]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808da06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 808da0a:	099b      	lsrs	r3, r3, #6
 808da0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808da10:	693a      	ldr	r2, [r7, #16]
 808da12:	fb02 f203 	mul.w	r2, r2, r3
 808da16:	68fb      	ldr	r3, [r7, #12]
 808da18:	fbb2 f3f3 	udiv	r3, r2, r3
 808da1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 808da1e:	4b0c      	ldr	r3, [pc, #48]	; (808da50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 808da20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 808da24:	f003 031f 	and.w	r3, r3, #31
 808da28:	3301      	adds	r3, #1
 808da2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 808da2c:	697a      	ldr	r2, [r7, #20]
 808da2e:	68fb      	ldr	r3, [r7, #12]
 808da30:	fbb2 f3f3 	udiv	r3, r2, r3
 808da34:	617b      	str	r3, [r7, #20]
        break;
 808da36:	e003      	b.n	808da40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 808da38:	4b08      	ldr	r3, [pc, #32]	; (808da5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 808da3a:	617b      	str	r3, [r7, #20]
        break;       
 808da3c:	e000      	b.n	808da40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 808da3e:	bf00      	nop
  
  return frequency;
 808da40:	697b      	ldr	r3, [r7, #20]
}
 808da42:	4618      	mov	r0, r3
 808da44:	371c      	adds	r7, #28
 808da46:	46bd      	mov	sp, r7
 808da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 808da4c:	4770      	bx	lr
 808da4e:	bf00      	nop
 808da50:	40023800 	.word	0x40023800
 808da54:	00f42400 	.word	0x00f42400
 808da58:	017d7840 	.word	0x017d7840
 808da5c:	00bb8000 	.word	0x00bb8000

0808da60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 808da60:	b580      	push	{r7, lr}
 808da62:	b082      	sub	sp, #8
 808da64:	af00      	add	r7, sp, #0
 808da66:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 808da68:	687b      	ldr	r3, [r7, #4]
 808da6a:	2b00      	cmp	r3, #0
 808da6c:	d101      	bne.n	808da72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 808da6e:	2301      	movs	r3, #1
 808da70:	e019      	b.n	808daa6 <HAL_RNG_Init+0x46>
  }

  if(hrng->State == HAL_RNG_STATE_RESET)
 808da72:	687b      	ldr	r3, [r7, #4]
 808da74:	7a5b      	ldrb	r3, [r3, #9]
 808da76:	b2db      	uxtb	r3, r3
 808da78:	2b00      	cmp	r3, #0
 808da7a:	d105      	bne.n	808da88 <HAL_RNG_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 808da7c:	687b      	ldr	r3, [r7, #4]
 808da7e:	2200      	movs	r2, #0
 808da80:	721a      	strb	r2, [r3, #8]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 808da82:	6878      	ldr	r0, [r7, #4]
 808da84:	f7fa fbb8 	bl	80881f8 <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 808da88:	687b      	ldr	r3, [r7, #4]
 808da8a:	2202      	movs	r2, #2
 808da8c:	725a      	strb	r2, [r3, #9]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 808da8e:	687b      	ldr	r3, [r7, #4]
 808da90:	681b      	ldr	r3, [r3, #0]
 808da92:	681a      	ldr	r2, [r3, #0]
 808da94:	687b      	ldr	r3, [r7, #4]
 808da96:	681b      	ldr	r3, [r3, #0]
 808da98:	f042 0204 	orr.w	r2, r2, #4
 808da9c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 808da9e:	687b      	ldr	r3, [r7, #4]
 808daa0:	2201      	movs	r2, #1
 808daa2:	725a      	strb	r2, [r3, #9]

  /* Return function status */
  return HAL_OK;
 808daa4:	2300      	movs	r3, #0
}
 808daa6:	4618      	mov	r0, r3
 808daa8:	3708      	adds	r7, #8
 808daaa:	46bd      	mov	sp, r7
 808daac:	bd80      	pop	{r7, pc}

0808daae <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 808daae:	b580      	push	{r7, lr}
 808dab0:	b084      	sub	sp, #16
 808dab2:	af00      	add	r7, sp, #0
 808dab4:	6078      	str	r0, [r7, #4]
 808dab6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;    
 808dab8:	2300      	movs	r3, #0
 808daba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 808dabc:	2300      	movs	r3, #0
 808dabe:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng); 
 808dac0:	687b      	ldr	r3, [r7, #4]
 808dac2:	7a1b      	ldrb	r3, [r3, #8]
 808dac4:	2b01      	cmp	r3, #1
 808dac6:	d101      	bne.n	808dacc <HAL_RNG_GenerateRandomNumber+0x1e>
 808dac8:	2302      	movs	r3, #2
 808daca:	e037      	b.n	808db3c <HAL_RNG_GenerateRandomNumber+0x8e>
 808dacc:	687b      	ldr	r3, [r7, #4]
 808dace:	2201      	movs	r2, #1
 808dad0:	721a      	strb	r2, [r3, #8]
  
  /* Check RNG peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 808dad2:	687b      	ldr	r3, [r7, #4]
 808dad4:	7a5b      	ldrb	r3, [r3, #9]
 808dad6:	b2db      	uxtb	r3, r3
 808dad8:	2b01      	cmp	r3, #1
 808dada:	d129      	bne.n	808db30 <HAL_RNG_GenerateRandomNumber+0x82>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 808dadc:	687b      	ldr	r3, [r7, #4]
 808dade:	2202      	movs	r2, #2
 808dae0:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 808dae2:	f7fb fb3d 	bl	8089160 <HAL_GetTick>
 808dae6:	60b8      	str	r0, [r7, #8]
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 808dae8:	e00e      	b.n	808db08 <HAL_RNG_GenerateRandomNumber+0x5a>
    {
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 808daea:	f7fb fb39 	bl	8089160 <HAL_GetTick>
 808daee:	4602      	mov	r2, r0
 808daf0:	68bb      	ldr	r3, [r7, #8]
 808daf2:	1ad3      	subs	r3, r2, r3
 808daf4:	2b02      	cmp	r3, #2
 808daf6:	d907      	bls.n	808db08 <HAL_RNG_GenerateRandomNumber+0x5a>
      {    
        hrng->State = HAL_RNG_STATE_ERROR;
 808daf8:	687b      	ldr	r3, [r7, #4]
 808dafa:	2204      	movs	r2, #4
 808dafc:	725a      	strb	r2, [r3, #9]

        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 808dafe:	687b      	ldr	r3, [r7, #4]
 808db00:	2200      	movs	r2, #0
 808db02:	721a      	strb	r2, [r3, #8]
      
        return HAL_TIMEOUT;
 808db04:	2303      	movs	r3, #3
 808db06:	e019      	b.n	808db3c <HAL_RNG_GenerateRandomNumber+0x8e>
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 808db08:	687b      	ldr	r3, [r7, #4]
 808db0a:	681b      	ldr	r3, [r3, #0]
 808db0c:	685b      	ldr	r3, [r3, #4]
 808db0e:	f003 0301 	and.w	r3, r3, #1
 808db12:	2b01      	cmp	r3, #1
 808db14:	d1e9      	bne.n	808daea <HAL_RNG_GenerateRandomNumber+0x3c>
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 808db16:	687b      	ldr	r3, [r7, #4]
 808db18:	681b      	ldr	r3, [r3, #0]
 808db1a:	689a      	ldr	r2, [r3, #8]
 808db1c:	687b      	ldr	r3, [r7, #4]
 808db1e:	605a      	str	r2, [r3, #4]
    *random32bit = hrng->RandomNumber;
 808db20:	687b      	ldr	r3, [r7, #4]
 808db22:	685a      	ldr	r2, [r3, #4]
 808db24:	683b      	ldr	r3, [r7, #0]
 808db26:	601a      	str	r2, [r3, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 808db28:	687b      	ldr	r3, [r7, #4]
 808db2a:	2201      	movs	r2, #1
 808db2c:	725a      	strb	r2, [r3, #9]
 808db2e:	e001      	b.n	808db34 <HAL_RNG_GenerateRandomNumber+0x86>
  }
  else
  {
    status = HAL_ERROR;
 808db30:	2301      	movs	r3, #1
 808db32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 808db34:	687b      	ldr	r3, [r7, #4]
 808db36:	2200      	movs	r2, #0
 808db38:	721a      	strb	r2, [r3, #8]
  
  return status;
 808db3a:	7bfb      	ldrb	r3, [r7, #15]
}
 808db3c:	4618      	mov	r0, r3
 808db3e:	3710      	adds	r7, #16
 808db40:	46bd      	mov	sp, r7
 808db42:	bd80      	pop	{r7, pc}

0808db44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 808db44:	b580      	push	{r7, lr}
 808db46:	b088      	sub	sp, #32
 808db48:	af00      	add	r7, sp, #0
 808db4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 808db4c:	2300      	movs	r3, #0
 808db4e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 808db50:	2300      	movs	r3, #0
 808db52:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 808db54:	2300      	movs	r3, #0
 808db56:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 808db58:	687b      	ldr	r3, [r7, #4]
 808db5a:	2b00      	cmp	r3, #0
 808db5c:	d101      	bne.n	808db62 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 808db5e:	2301      	movs	r3, #1
 808db60:	e149      	b.n	808ddf6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 808db62:	687b      	ldr	r3, [r7, #4]
 808db64:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808db68:	b2db      	uxtb	r3, r3
 808db6a:	2b00      	cmp	r3, #0
 808db6c:	d106      	bne.n	808db7c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 808db6e:	687b      	ldr	r3, [r7, #4]
 808db70:	2200      	movs	r2, #0
 808db72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 808db76:	6878      	ldr	r0, [r7, #4]
 808db78:	f000 f98b 	bl	808de92 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 808db7c:	687b      	ldr	r3, [r7, #4]
 808db7e:	2202      	movs	r2, #2
 808db80:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 808db84:	6878      	ldr	r0, [r7, #4]
 808db86:	f000 fbbf 	bl	808e308 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 808db8a:	687b      	ldr	r3, [r7, #4]
 808db8c:	68db      	ldr	r3, [r3, #12]
 808db8e:	2b01      	cmp	r3, #1
 808db90:	d007      	beq.n	808dba2 <HAL_SAI_Init+0x5e>
 808db92:	2b01      	cmp	r3, #1
 808db94:	d302      	bcc.n	808db9c <HAL_SAI_Init+0x58>
 808db96:	2b02      	cmp	r3, #2
 808db98:	d006      	beq.n	808dba8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 808db9a:	e008      	b.n	808dbae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 808db9c:	2300      	movs	r3, #0
 808db9e:	61fb      	str	r3, [r7, #28]
      break;
 808dba0:	e005      	b.n	808dbae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 808dba2:	2310      	movs	r3, #16
 808dba4:	61fb      	str	r3, [r7, #28]
      break;
 808dba6:	e002      	b.n	808dbae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 808dba8:	2320      	movs	r3, #32
 808dbaa:	61fb      	str	r3, [r7, #28]
      break;
 808dbac:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 808dbae:	687b      	ldr	r3, [r7, #4]
 808dbb0:	689b      	ldr	r3, [r3, #8]
 808dbb2:	2b03      	cmp	r3, #3
 808dbb4:	d81d      	bhi.n	808dbf2 <HAL_SAI_Init+0xae>
 808dbb6:	a201      	add	r2, pc, #4	; (adr r2, 808dbbc <HAL_SAI_Init+0x78>)
 808dbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808dbbc:	0808dbcd 	.word	0x0808dbcd
 808dbc0:	0808dbd3 	.word	0x0808dbd3
 808dbc4:	0808dbdb 	.word	0x0808dbdb
 808dbc8:	0808dbe3 	.word	0x0808dbe3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 808dbcc:	2300      	movs	r3, #0
 808dbce:	617b      	str	r3, [r7, #20]
      }
      break;
 808dbd0:	e010      	b.n	808dbf4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 808dbd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808dbd6:	617b      	str	r3, [r7, #20]
      }
      break;
 808dbd8:	e00c      	b.n	808dbf4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 808dbda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808dbde:	617b      	str	r3, [r7, #20]
      }
      break;
 808dbe0:	e008      	b.n	808dbf4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 808dbe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808dbe6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 808dbe8:	69fb      	ldr	r3, [r7, #28]
 808dbea:	f043 0301 	orr.w	r3, r3, #1
 808dbee:	61fb      	str	r3, [r7, #28]
      }
      break;
 808dbf0:	e000      	b.n	808dbf4 <HAL_SAI_Init+0xb0>
  default:
    break;      
 808dbf2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 808dbf4:	687b      	ldr	r3, [r7, #4]
 808dbf6:	681b      	ldr	r3, [r3, #0]
 808dbf8:	4a81      	ldr	r2, [pc, #516]	; (808de00 <HAL_SAI_Init+0x2bc>)
 808dbfa:	4293      	cmp	r3, r2
 808dbfc:	d004      	beq.n	808dc08 <HAL_SAI_Init+0xc4>
 808dbfe:	687b      	ldr	r3, [r7, #4]
 808dc00:	681b      	ldr	r3, [r3, #0]
 808dc02:	4a80      	ldr	r2, [pc, #512]	; (808de04 <HAL_SAI_Init+0x2c0>)
 808dc04:	4293      	cmp	r3, r2
 808dc06:	d103      	bne.n	808dc10 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 808dc08:	4a7f      	ldr	r2, [pc, #508]	; (808de08 <HAL_SAI_Init+0x2c4>)
 808dc0a:	69fb      	ldr	r3, [r7, #28]
 808dc0c:	6013      	str	r3, [r2, #0]
 808dc0e:	e002      	b.n	808dc16 <HAL_SAI_Init+0xd2>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 808dc10:	4a7e      	ldr	r2, [pc, #504]	; (808de0c <HAL_SAI_Init+0x2c8>)
 808dc12:	69fb      	ldr	r3, [r7, #28]
 808dc14:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 808dc16:	687b      	ldr	r3, [r7, #4]
 808dc18:	69db      	ldr	r3, [r3, #28]
 808dc1a:	2b00      	cmp	r3, #0
 808dc1c:	d043      	beq.n	808dca6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 808dc1e:	2300      	movs	r3, #0
 808dc20:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 808dc22:	687b      	ldr	r3, [r7, #4]
 808dc24:	681b      	ldr	r3, [r3, #0]
 808dc26:	4a76      	ldr	r2, [pc, #472]	; (808de00 <HAL_SAI_Init+0x2bc>)
 808dc28:	4293      	cmp	r3, r2
 808dc2a:	d004      	beq.n	808dc36 <HAL_SAI_Init+0xf2>
 808dc2c:	687b      	ldr	r3, [r7, #4]
 808dc2e:	681b      	ldr	r3, [r3, #0]
 808dc30:	4a74      	ldr	r2, [pc, #464]	; (808de04 <HAL_SAI_Init+0x2c0>)
 808dc32:	4293      	cmp	r3, r2
 808dc34:	d104      	bne.n	808dc40 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 808dc36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 808dc3a:	f7ff fddd 	bl	808d7f8 <HAL_RCCEx_GetPeriphCLKFreq>
 808dc3e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 808dc40:	687b      	ldr	r3, [r7, #4]
 808dc42:	681b      	ldr	r3, [r3, #0]
 808dc44:	4a72      	ldr	r2, [pc, #456]	; (808de10 <HAL_SAI_Init+0x2cc>)
 808dc46:	4293      	cmp	r3, r2
 808dc48:	d004      	beq.n	808dc54 <HAL_SAI_Init+0x110>
 808dc4a:	687b      	ldr	r3, [r7, #4]
 808dc4c:	681b      	ldr	r3, [r3, #0]
 808dc4e:	4a71      	ldr	r2, [pc, #452]	; (808de14 <HAL_SAI_Init+0x2d0>)
 808dc50:	4293      	cmp	r3, r2
 808dc52:	d104      	bne.n	808dc5e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 808dc54:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808dc58:	f7ff fdce 	bl	808d7f8 <HAL_RCCEx_GetPeriphCLKFreq>
 808dc5c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 808dc5e:	693a      	ldr	r2, [r7, #16]
 808dc60:	4613      	mov	r3, r2
 808dc62:	009b      	lsls	r3, r3, #2
 808dc64:	4413      	add	r3, r2
 808dc66:	005b      	lsls	r3, r3, #1
 808dc68:	461a      	mov	r2, r3
 808dc6a:	687b      	ldr	r3, [r7, #4]
 808dc6c:	69db      	ldr	r3, [r3, #28]
 808dc6e:	025b      	lsls	r3, r3, #9
 808dc70:	fbb2 f3f3 	udiv	r3, r2, r3
 808dc74:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 808dc76:	68fb      	ldr	r3, [r7, #12]
 808dc78:	4a67      	ldr	r2, [pc, #412]	; (808de18 <HAL_SAI_Init+0x2d4>)
 808dc7a:	fba2 2303 	umull	r2, r3, r2, r3
 808dc7e:	08da      	lsrs	r2, r3, #3
 808dc80:	687b      	ldr	r3, [r7, #4]
 808dc82:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 808dc84:	68f9      	ldr	r1, [r7, #12]
 808dc86:	4b64      	ldr	r3, [pc, #400]	; (808de18 <HAL_SAI_Init+0x2d4>)
 808dc88:	fba3 2301 	umull	r2, r3, r3, r1
 808dc8c:	08da      	lsrs	r2, r3, #3
 808dc8e:	4613      	mov	r3, r2
 808dc90:	009b      	lsls	r3, r3, #2
 808dc92:	4413      	add	r3, r2
 808dc94:	005b      	lsls	r3, r3, #1
 808dc96:	1aca      	subs	r2, r1, r3
 808dc98:	2a08      	cmp	r2, #8
 808dc9a:	d904      	bls.n	808dca6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 808dc9c:	687b      	ldr	r3, [r7, #4]
 808dc9e:	6a1b      	ldr	r3, [r3, #32]
 808dca0:	1c5a      	adds	r2, r3, #1
 808dca2:	687b      	ldr	r3, [r7, #4]
 808dca4:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 808dca6:	687b      	ldr	r3, [r7, #4]
 808dca8:	685b      	ldr	r3, [r3, #4]
 808dcaa:	2b00      	cmp	r3, #0
 808dcac:	d003      	beq.n	808dcb6 <HAL_SAI_Init+0x172>
 808dcae:	687b      	ldr	r3, [r7, #4]
 808dcb0:	685b      	ldr	r3, [r3, #4]
 808dcb2:	2b02      	cmp	r3, #2
 808dcb4:	d109      	bne.n	808dcca <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 808dcb6:	687b      	ldr	r3, [r7, #4]
 808dcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808dcba:	2b01      	cmp	r3, #1
 808dcbc:	d101      	bne.n	808dcc2 <HAL_SAI_Init+0x17e>
 808dcbe:	2300      	movs	r3, #0
 808dcc0:	e001      	b.n	808dcc6 <HAL_SAI_Init+0x182>
 808dcc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 808dcc6:	61bb      	str	r3, [r7, #24]
 808dcc8:	e008      	b.n	808dcdc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 808dcca:	687b      	ldr	r3, [r7, #4]
 808dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808dcce:	2b01      	cmp	r3, #1
 808dcd0:	d102      	bne.n	808dcd8 <HAL_SAI_Init+0x194>
 808dcd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 808dcd6:	e000      	b.n	808dcda <HAL_SAI_Init+0x196>
 808dcd8:	2300      	movs	r3, #0
 808dcda:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 808dcdc:	687b      	ldr	r3, [r7, #4]
 808dcde:	681b      	ldr	r3, [r3, #0]
 808dce0:	6819      	ldr	r1, [r3, #0]
 808dce2:	687b      	ldr	r3, [r7, #4]
 808dce4:	681a      	ldr	r2, [r3, #0]
 808dce6:	4b4d      	ldr	r3, [pc, #308]	; (808de1c <HAL_SAI_Init+0x2d8>)
 808dce8:	400b      	ands	r3, r1
 808dcea:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 808dcec:	687b      	ldr	r3, [r7, #4]
 808dcee:	681b      	ldr	r3, [r3, #0]
 808dcf0:	6819      	ldr	r1, [r3, #0]
 808dcf2:	687b      	ldr	r3, [r7, #4]
 808dcf4:	685a      	ldr	r2, [r3, #4]
 808dcf6:	687b      	ldr	r3, [r7, #4]
 808dcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808dcfa:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 808dcfc:	687b      	ldr	r3, [r7, #4]
 808dcfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 808dd00:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 808dd02:	687b      	ldr	r3, [r7, #4]
 808dd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808dd06:	431a      	orrs	r2, r3
 808dd08:	69bb      	ldr	r3, [r7, #24]
 808dd0a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 808dd0c:	697b      	ldr	r3, [r7, #20]
 808dd0e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 808dd10:	687b      	ldr	r3, [r7, #4]
 808dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 808dd14:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 808dd16:	687b      	ldr	r3, [r7, #4]
 808dd18:	691b      	ldr	r3, [r3, #16]
 808dd1a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 808dd1c:	687b      	ldr	r3, [r7, #4]
 808dd1e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 808dd20:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 808dd22:	687b      	ldr	r3, [r7, #4]
 808dd24:	6a1b      	ldr	r3, [r3, #32]
 808dd26:	051b      	lsls	r3, r3, #20
 808dd28:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 808dd2a:	687b      	ldr	r3, [r7, #4]
 808dd2c:	681b      	ldr	r3, [r3, #0]
 808dd2e:	430a      	orrs	r2, r1
 808dd30:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 808dd32:	687b      	ldr	r3, [r7, #4]
 808dd34:	681b      	ldr	r3, [r3, #0]
 808dd36:	6859      	ldr	r1, [r3, #4]
 808dd38:	687b      	ldr	r3, [r7, #4]
 808dd3a:	681a      	ldr	r2, [r3, #0]
 808dd3c:	4b38      	ldr	r3, [pc, #224]	; (808de20 <HAL_SAI_Init+0x2dc>)
 808dd3e:	400b      	ands	r3, r1
 808dd40:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 808dd42:	687b      	ldr	r3, [r7, #4]
 808dd44:	681b      	ldr	r3, [r3, #0]
 808dd46:	6859      	ldr	r1, [r3, #4]
 808dd48:	687b      	ldr	r3, [r7, #4]
 808dd4a:	699a      	ldr	r2, [r3, #24]
 808dd4c:	687b      	ldr	r3, [r7, #4]
 808dd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808dd50:	431a      	orrs	r2, r3
 808dd52:	687b      	ldr	r3, [r7, #4]
 808dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808dd56:	431a      	orrs	r2, r3
 808dd58:	687b      	ldr	r3, [r7, #4]
 808dd5a:	681b      	ldr	r3, [r3, #0]
 808dd5c:	430a      	orrs	r2, r1
 808dd5e:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 808dd60:	687b      	ldr	r3, [r7, #4]
 808dd62:	681b      	ldr	r3, [r3, #0]
 808dd64:	6899      	ldr	r1, [r3, #8]
 808dd66:	687b      	ldr	r3, [r7, #4]
 808dd68:	681a      	ldr	r2, [r3, #0]
 808dd6a:	4b2e      	ldr	r3, [pc, #184]	; (808de24 <HAL_SAI_Init+0x2e0>)
 808dd6c:	400b      	ands	r3, r1
 808dd6e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 808dd70:	687b      	ldr	r3, [r7, #4]
 808dd72:	681b      	ldr	r3, [r3, #0]
 808dd74:	6899      	ldr	r1, [r3, #8]
 808dd76:	687b      	ldr	r3, [r7, #4]
 808dd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808dd7a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 808dd7c:	687b      	ldr	r3, [r7, #4]
 808dd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 808dd80:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 808dd82:	687b      	ldr	r3, [r7, #4]
 808dd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 808dd86:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 808dd88:	687b      	ldr	r3, [r7, #4]
 808dd8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 808dd8c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 808dd8e:	687b      	ldr	r3, [r7, #4]
 808dd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808dd92:	3b01      	subs	r3, #1
 808dd94:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 808dd96:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 808dd98:	687b      	ldr	r3, [r7, #4]
 808dd9a:	681b      	ldr	r3, [r3, #0]
 808dd9c:	430a      	orrs	r2, r1
 808dd9e:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 808dda0:	687b      	ldr	r3, [r7, #4]
 808dda2:	681b      	ldr	r3, [r3, #0]
 808dda4:	68d9      	ldr	r1, [r3, #12]
 808dda6:	687b      	ldr	r3, [r7, #4]
 808dda8:	681a      	ldr	r2, [r3, #0]
 808ddaa:	f24f 0320 	movw	r3, #61472	; 0xf020
 808ddae:	400b      	ands	r3, r1
 808ddb0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 808ddb2:	687b      	ldr	r3, [r7, #4]
 808ddb4:	681b      	ldr	r3, [r3, #0]
 808ddb6:	68d9      	ldr	r1, [r3, #12]
 808ddb8:	687b      	ldr	r3, [r7, #4]
 808ddba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 808ddbc:	687b      	ldr	r3, [r7, #4]
 808ddbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808ddc0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 808ddc2:	687b      	ldr	r3, [r7, #4]
 808ddc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808ddc6:	041b      	lsls	r3, r3, #16
 808ddc8:	431a      	orrs	r2, r3
 808ddca:	687b      	ldr	r3, [r7, #4]
 808ddcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808ddce:	3b01      	subs	r3, #1
 808ddd0:	021b      	lsls	r3, r3, #8
 808ddd2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 808ddd4:	687b      	ldr	r3, [r7, #4]
 808ddd6:	681b      	ldr	r3, [r3, #0]
 808ddd8:	430a      	orrs	r2, r1
 808ddda:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 808dddc:	687b      	ldr	r3, [r7, #4]
 808ddde:	2200      	movs	r2, #0
 808dde0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 808dde4:	687b      	ldr	r3, [r7, #4]
 808dde6:	2201      	movs	r2, #1
 808dde8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 808ddec:	687b      	ldr	r3, [r7, #4]
 808ddee:	2200      	movs	r2, #0
 808ddf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 808ddf4:	2300      	movs	r3, #0
}
 808ddf6:	4618      	mov	r0, r3
 808ddf8:	3720      	adds	r7, #32
 808ddfa:	46bd      	mov	sp, r7
 808ddfc:	bd80      	pop	{r7, pc}
 808ddfe:	bf00      	nop
 808de00:	40015804 	.word	0x40015804
 808de04:	40015824 	.word	0x40015824
 808de08:	40015800 	.word	0x40015800
 808de0c:	40015c00 	.word	0x40015c00
 808de10:	40015c04 	.word	0x40015c04
 808de14:	40015c24 	.word	0x40015c24
 808de18:	cccccccd 	.word	0xcccccccd
 808de1c:	ff05c010 	.word	0xff05c010
 808de20:	ffff1ff0 	.word	0xffff1ff0
 808de24:	fff88000 	.word	0xfff88000

0808de28 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 808de28:	b580      	push	{r7, lr}
 808de2a:	b082      	sub	sp, #8
 808de2c:	af00      	add	r7, sp, #0
 808de2e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 808de30:	687b      	ldr	r3, [r7, #4]
 808de32:	2b00      	cmp	r3, #0
 808de34:	d101      	bne.n	808de3a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 808de36:	2301      	movs	r3, #1
 808de38:	e027      	b.n	808de8a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 808de3a:	687b      	ldr	r3, [r7, #4]
 808de3c:	2202      	movs	r2, #2
 808de3e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 808de42:	687b      	ldr	r3, [r7, #4]
 808de44:	681b      	ldr	r3, [r3, #0]
 808de46:	2200      	movs	r2, #0
 808de48:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 808de4a:	687b      	ldr	r3, [r7, #4]
 808de4c:	681b      	ldr	r3, [r3, #0]
 808de4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 808de52:	619a      	str	r2, [r3, #24]
  
  /* Disable the SAI */
  SAI_Disable(hsai);
 808de54:	6878      	ldr	r0, [r7, #4]
 808de56:	f000 fa57 	bl	808e308 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 808de5a:	687b      	ldr	r3, [r7, #4]
 808de5c:	681b      	ldr	r3, [r3, #0]
 808de5e:	685a      	ldr	r2, [r3, #4]
 808de60:	687b      	ldr	r3, [r7, #4]
 808de62:	681b      	ldr	r3, [r3, #0]
 808de64:	f042 0208 	orr.w	r2, r2, #8
 808de68:	605a      	str	r2, [r3, #4]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 808de6a:	6878      	ldr	r0, [r7, #4]
 808de6c:	f000 f81b 	bl	808dea6 <HAL_SAI_MspDeInit>

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 808de70:	687b      	ldr	r3, [r7, #4]
 808de72:	2200      	movs	r2, #0
 808de74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 808de78:	687b      	ldr	r3, [r7, #4]
 808de7a:	2200      	movs	r2, #0
 808de7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 808de80:	687b      	ldr	r3, [r7, #4]
 808de82:	2200      	movs	r2, #0
 808de84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 808de88:	2300      	movs	r3, #0
}
 808de8a:	4618      	mov	r0, r3
 808de8c:	3708      	adds	r7, #8
 808de8e:	46bd      	mov	sp, r7
 808de90:	bd80      	pop	{r7, pc}

0808de92 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 808de92:	b480      	push	{r7}
 808de94:	b083      	sub	sp, #12
 808de96:	af00      	add	r7, sp, #0
 808de98:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 808de9a:	bf00      	nop
 808de9c:	370c      	adds	r7, #12
 808de9e:	46bd      	mov	sp, r7
 808dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 808dea4:	4770      	bx	lr

0808dea6 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 808dea6:	b480      	push	{r7}
 808dea8:	b083      	sub	sp, #12
 808deaa:	af00      	add	r7, sp, #0
 808deac:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 808deae:	bf00      	nop
 808deb0:	370c      	adds	r7, #12
 808deb2:	46bd      	mov	sp, r7
 808deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 808deb8:	4770      	bx	lr

0808deba <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 808deba:	b480      	push	{r7}
 808debc:	b083      	sub	sp, #12
 808debe:	af00      	add	r7, sp, #0
 808dec0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 808dec2:	687b      	ldr	r3, [r7, #4]
 808dec4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 808dec8:	2b01      	cmp	r3, #1
 808deca:	d101      	bne.n	808ded0 <HAL_SAI_DMAPause+0x16>
 808decc:	2302      	movs	r3, #2
 808dece:	e010      	b.n	808def2 <HAL_SAI_DMAPause+0x38>
 808ded0:	687b      	ldr	r3, [r7, #4]
 808ded2:	2201      	movs	r2, #1
 808ded4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 808ded8:	687b      	ldr	r3, [r7, #4]
 808deda:	681b      	ldr	r3, [r3, #0]
 808dedc:	681a      	ldr	r2, [r3, #0]
 808dede:	687b      	ldr	r3, [r7, #4]
 808dee0:	681b      	ldr	r3, [r3, #0]
 808dee2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 808dee6:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 808dee8:	687b      	ldr	r3, [r7, #4]
 808deea:	2200      	movs	r2, #0
 808deec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 808def0:	2300      	movs	r3, #0
}
 808def2:	4618      	mov	r0, r3
 808def4:	370c      	adds	r7, #12
 808def6:	46bd      	mov	sp, r7
 808def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 808defc:	4770      	bx	lr

0808defe <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 808defe:	b480      	push	{r7}
 808df00:	b083      	sub	sp, #12
 808df02:	af00      	add	r7, sp, #0
 808df04:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 808df06:	687b      	ldr	r3, [r7, #4]
 808df08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 808df0c:	2b01      	cmp	r3, #1
 808df0e:	d101      	bne.n	808df14 <HAL_SAI_DMAResume+0x16>
 808df10:	2302      	movs	r3, #2
 808df12:	e01f      	b.n	808df54 <HAL_SAI_DMAResume+0x56>
 808df14:	687b      	ldr	r3, [r7, #4]
 808df16:	2201      	movs	r2, #1
 808df18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 808df1c:	687b      	ldr	r3, [r7, #4]
 808df1e:	681b      	ldr	r3, [r3, #0]
 808df20:	681a      	ldr	r2, [r3, #0]
 808df22:	687b      	ldr	r3, [r7, #4]
 808df24:	681b      	ldr	r3, [r3, #0]
 808df26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 808df2a:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 808df2c:	687b      	ldr	r3, [r7, #4]
 808df2e:	681b      	ldr	r3, [r3, #0]
 808df30:	681b      	ldr	r3, [r3, #0]
 808df32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808df36:	2b00      	cmp	r3, #0
 808df38:	d107      	bne.n	808df4a <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 808df3a:	687b      	ldr	r3, [r7, #4]
 808df3c:	681b      	ldr	r3, [r3, #0]
 808df3e:	681a      	ldr	r2, [r3, #0]
 808df40:	687b      	ldr	r3, [r7, #4]
 808df42:	681b      	ldr	r3, [r3, #0]
 808df44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 808df48:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 808df4a:	687b      	ldr	r3, [r7, #4]
 808df4c:	2200      	movs	r2, #0
 808df4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 808df52:	2300      	movs	r3, #0
}
 808df54:	4618      	mov	r0, r3
 808df56:	370c      	adds	r7, #12
 808df58:	46bd      	mov	sp, r7
 808df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808df5e:	4770      	bx	lr

0808df60 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 808df60:	b580      	push	{r7, lr}
 808df62:	b084      	sub	sp, #16
 808df64:	af00      	add	r7, sp, #0
 808df66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 808df68:	2300      	movs	r3, #0
 808df6a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 808df6c:	687b      	ldr	r3, [r7, #4]
 808df6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 808df72:	2b01      	cmp	r3, #1
 808df74:	d101      	bne.n	808df7a <HAL_SAI_DMAStop+0x1a>
 808df76:	2302      	movs	r3, #2
 808df78:	e061      	b.n	808e03e <HAL_SAI_DMAStop+0xde>
 808df7a:	687b      	ldr	r3, [r7, #4]
 808df7c:	2201      	movs	r2, #1
 808df7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 808df82:	687b      	ldr	r3, [r7, #4]
 808df84:	681b      	ldr	r3, [r3, #0]
 808df86:	681a      	ldr	r2, [r3, #0]
 808df88:	687b      	ldr	r3, [r7, #4]
 808df8a:	681b      	ldr	r3, [r3, #0]
 808df8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 808df90:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 808df92:	687b      	ldr	r3, [r7, #4]
 808df94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808df96:	2b00      	cmp	r3, #0
 808df98:	d01c      	beq.n	808dfd4 <HAL_SAI_DMAStop+0x74>
 808df9a:	687b      	ldr	r3, [r7, #4]
 808df9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808dfa0:	b2db      	uxtb	r3, r3
 808dfa2:	2b12      	cmp	r3, #18
 808dfa4:	d116      	bne.n	808dfd4 <HAL_SAI_DMAStop+0x74>
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 808dfa6:	687b      	ldr	r3, [r7, #4]
 808dfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808dfaa:	4618      	mov	r0, r3
 808dfac:	f7fb fb78 	bl	80896a0 <HAL_DMA_Abort>
 808dfb0:	4603      	mov	r3, r0
 808dfb2:	2b00      	cmp	r3, #0
 808dfb4:	d00e      	beq.n	808dfd4 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 808dfb6:	687b      	ldr	r3, [r7, #4]
 808dfb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808dfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808dfbc:	2b80      	cmp	r3, #128	; 0x80
 808dfbe:	d009      	beq.n	808dfd4 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 808dfc0:	2301      	movs	r3, #1
 808dfc2:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 808dfc4:	687b      	ldr	r3, [r7, #4]
 808dfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 808dfca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 808dfce:	687b      	ldr	r3, [r7, #4]
 808dfd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 808dfd4:	687b      	ldr	r3, [r7, #4]
 808dfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808dfd8:	2b00      	cmp	r3, #0
 808dfda:	d01c      	beq.n	808e016 <HAL_SAI_DMAStop+0xb6>
 808dfdc:	687b      	ldr	r3, [r7, #4]
 808dfde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808dfe2:	b2db      	uxtb	r3, r3
 808dfe4:	2b22      	cmp	r3, #34	; 0x22
 808dfe6:	d116      	bne.n	808e016 <HAL_SAI_DMAStop+0xb6>
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 808dfe8:	687b      	ldr	r3, [r7, #4]
 808dfea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808dfec:	4618      	mov	r0, r3
 808dfee:	f7fb fb57 	bl	80896a0 <HAL_DMA_Abort>
 808dff2:	4603      	mov	r3, r0
 808dff4:	2b00      	cmp	r3, #0
 808dff6:	d00e      	beq.n	808e016 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 808dff8:	687b      	ldr	r3, [r7, #4]
 808dffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808dffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808dffe:	2b80      	cmp	r3, #128	; 0x80
 808e000:	d009      	beq.n	808e016 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 808e002:	2301      	movs	r3, #1
 808e004:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 808e006:	687b      	ldr	r3, [r7, #4]
 808e008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 808e00c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 808e010:	687b      	ldr	r3, [r7, #4]
 808e012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 808e016:	6878      	ldr	r0, [r7, #4]
 808e018:	f000 f976 	bl	808e308 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 808e01c:	687b      	ldr	r3, [r7, #4]
 808e01e:	681b      	ldr	r3, [r3, #0]
 808e020:	685a      	ldr	r2, [r3, #4]
 808e022:	687b      	ldr	r3, [r7, #4]
 808e024:	681b      	ldr	r3, [r3, #0]
 808e026:	f042 0208 	orr.w	r2, r2, #8
 808e02a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 808e02c:	687b      	ldr	r3, [r7, #4]
 808e02e:	2201      	movs	r2, #1
 808e030:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 808e034:	687b      	ldr	r3, [r7, #4]
 808e036:	2200      	movs	r2, #0
 808e038:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 808e03c:	7bfb      	ldrb	r3, [r7, #15]
}
 808e03e:	4618      	mov	r0, r3
 808e040:	3710      	adds	r7, #16
 808e042:	46bd      	mov	sp, r7
 808e044:	bd80      	pop	{r7, pc}
	...

0808e048 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 808e048:	b580      	push	{r7, lr}
 808e04a:	b084      	sub	sp, #16
 808e04c:	af00      	add	r7, sp, #0
 808e04e:	60f8      	str	r0, [r7, #12]
 808e050:	60b9      	str	r1, [r7, #8]
 808e052:	4613      	mov	r3, r2
 808e054:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 808e056:	68bb      	ldr	r3, [r7, #8]
 808e058:	2b00      	cmp	r3, #0
 808e05a:	d002      	beq.n	808e062 <HAL_SAI_Transmit_DMA+0x1a>
 808e05c:	88fb      	ldrh	r3, [r7, #6]
 808e05e:	2b00      	cmp	r3, #0
 808e060:	d101      	bne.n	808e066 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 808e062:	2301      	movs	r3, #1
 808e064:	e074      	b.n	808e150 <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 808e066:	68fb      	ldr	r3, [r7, #12]
 808e068:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808e06c:	b2db      	uxtb	r3, r3
 808e06e:	2b01      	cmp	r3, #1
 808e070:	d16d      	bne.n	808e14e <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 808e072:	68fb      	ldr	r3, [r7, #12]
 808e074:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 808e078:	2b01      	cmp	r3, #1
 808e07a:	d101      	bne.n	808e080 <HAL_SAI_Transmit_DMA+0x38>
 808e07c:	2302      	movs	r3, #2
 808e07e:	e067      	b.n	808e150 <HAL_SAI_Transmit_DMA+0x108>
 808e080:	68fb      	ldr	r3, [r7, #12]
 808e082:	2201      	movs	r2, #1
 808e084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 808e088:	68fb      	ldr	r3, [r7, #12]
 808e08a:	68ba      	ldr	r2, [r7, #8]
 808e08c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 808e08e:	68fb      	ldr	r3, [r7, #12]
 808e090:	88fa      	ldrh	r2, [r7, #6]
 808e092:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 808e096:	68fb      	ldr	r3, [r7, #12]
 808e098:	88fa      	ldrh	r2, [r7, #6]
 808e09a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 808e09e:	68fb      	ldr	r3, [r7, #12]
 808e0a0:	2200      	movs	r2, #0
 808e0a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 808e0a6:	68fb      	ldr	r3, [r7, #12]
 808e0a8:	2212      	movs	r2, #18
 808e0aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 808e0ae:	68fb      	ldr	r3, [r7, #12]
 808e0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808e0b2:	4a29      	ldr	r2, [pc, #164]	; (808e158 <HAL_SAI_Transmit_DMA+0x110>)
 808e0b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 808e0b6:	68fb      	ldr	r3, [r7, #12]
 808e0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808e0ba:	4a28      	ldr	r2, [pc, #160]	; (808e15c <HAL_SAI_Transmit_DMA+0x114>)
 808e0bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 808e0be:	68fb      	ldr	r3, [r7, #12]
 808e0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808e0c2:	4a27      	ldr	r2, [pc, #156]	; (808e160 <HAL_SAI_Transmit_DMA+0x118>)
 808e0c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 808e0c6:	68fb      	ldr	r3, [r7, #12]
 808e0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808e0ca:	2200      	movs	r2, #0
 808e0cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 808e0ce:	68fb      	ldr	r3, [r7, #12]
 808e0d0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 808e0d2:	68fb      	ldr	r3, [r7, #12]
 808e0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808e0d6:	4619      	mov	r1, r3
 808e0d8:	68fb      	ldr	r3, [r7, #12]
 808e0da:	681b      	ldr	r3, [r3, #0]
 808e0dc:	331c      	adds	r3, #28
 808e0de:	461a      	mov	r2, r3
 808e0e0:	68fb      	ldr	r3, [r7, #12]
 808e0e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 808e0e6:	f7fb fa7b 	bl	80895e0 <HAL_DMA_Start_IT>
 808e0ea:	4603      	mov	r3, r0
 808e0ec:	2b00      	cmp	r3, #0
 808e0ee:	d005      	beq.n	808e0fc <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 808e0f0:	68fb      	ldr	r3, [r7, #12]
 808e0f2:	2200      	movs	r2, #0
 808e0f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 808e0f8:	2301      	movs	r3, #1
 808e0fa:	e029      	b.n	808e150 <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 808e0fc:	68fb      	ldr	r3, [r7, #12]
 808e0fe:	681b      	ldr	r3, [r3, #0]
 808e100:	681b      	ldr	r3, [r3, #0]
 808e102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808e106:	2b00      	cmp	r3, #0
 808e108:	d107      	bne.n	808e11a <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 808e10a:	68fb      	ldr	r3, [r7, #12]
 808e10c:	681b      	ldr	r3, [r3, #0]
 808e10e:	681a      	ldr	r2, [r3, #0]
 808e110:	68fb      	ldr	r3, [r7, #12]
 808e112:	681b      	ldr	r3, [r3, #0]
 808e114:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 808e118:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 808e11a:	2100      	movs	r1, #0
 808e11c:	68f8      	ldr	r0, [r7, #12]
 808e11e:	f000 f8bd 	bl	808e29c <SAI_InterruptFlag>
 808e122:	4601      	mov	r1, r0
 808e124:	68fb      	ldr	r3, [r7, #12]
 808e126:	681b      	ldr	r3, [r3, #0]
 808e128:	691a      	ldr	r2, [r3, #16]
 808e12a:	68fb      	ldr	r3, [r7, #12]
 808e12c:	681b      	ldr	r3, [r3, #0]
 808e12e:	430a      	orrs	r2, r1
 808e130:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 808e132:	68fb      	ldr	r3, [r7, #12]
 808e134:	681b      	ldr	r3, [r3, #0]
 808e136:	681a      	ldr	r2, [r3, #0]
 808e138:	68fb      	ldr	r3, [r7, #12]
 808e13a:	681b      	ldr	r3, [r3, #0]
 808e13c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 808e140:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 808e142:	68fb      	ldr	r3, [r7, #12]
 808e144:	2200      	movs	r2, #0
 808e146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 808e14a:	2300      	movs	r3, #0
 808e14c:	e000      	b.n	808e150 <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 808e14e:	2302      	movs	r3, #2
  }
}
 808e150:	4618      	mov	r0, r3
 808e152:	3710      	adds	r7, #16
 808e154:	46bd      	mov	sp, r7
 808e156:	bd80      	pop	{r7, pc}
 808e158:	0808e3d9 	.word	0x0808e3d9
 808e15c:	0808e375 	.word	0x0808e375
 808e160:	0808e475 	.word	0x0808e475

0808e164 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 808e164:	b580      	push	{r7, lr}
 808e166:	b084      	sub	sp, #16
 808e168:	af00      	add	r7, sp, #0
 808e16a:	60f8      	str	r0, [r7, #12]
 808e16c:	60b9      	str	r1, [r7, #8]
 808e16e:	4613      	mov	r3, r2
 808e170:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 808e172:	68bb      	ldr	r3, [r7, #8]
 808e174:	2b00      	cmp	r3, #0
 808e176:	d002      	beq.n	808e17e <HAL_SAI_Receive_DMA+0x1a>
 808e178:	88fb      	ldrh	r3, [r7, #6]
 808e17a:	2b00      	cmp	r3, #0
 808e17c:	d101      	bne.n	808e182 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 808e17e:	2301      	movs	r3, #1
 808e180:	e074      	b.n	808e26c <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 808e182:	68fb      	ldr	r3, [r7, #12]
 808e184:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808e188:	b2db      	uxtb	r3, r3
 808e18a:	2b01      	cmp	r3, #1
 808e18c:	d16d      	bne.n	808e26a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 808e18e:	68fb      	ldr	r3, [r7, #12]
 808e190:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 808e194:	2b01      	cmp	r3, #1
 808e196:	d101      	bne.n	808e19c <HAL_SAI_Receive_DMA+0x38>
 808e198:	2302      	movs	r3, #2
 808e19a:	e067      	b.n	808e26c <HAL_SAI_Receive_DMA+0x108>
 808e19c:	68fb      	ldr	r3, [r7, #12]
 808e19e:	2201      	movs	r2, #1
 808e1a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 808e1a4:	68fb      	ldr	r3, [r7, #12]
 808e1a6:	68ba      	ldr	r2, [r7, #8]
 808e1a8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 808e1aa:	68fb      	ldr	r3, [r7, #12]
 808e1ac:	88fa      	ldrh	r2, [r7, #6]
 808e1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 808e1b2:	68fb      	ldr	r3, [r7, #12]
 808e1b4:	88fa      	ldrh	r2, [r7, #6]
 808e1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 808e1ba:	68fb      	ldr	r3, [r7, #12]
 808e1bc:	2200      	movs	r2, #0
 808e1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 808e1c2:	68fb      	ldr	r3, [r7, #12]
 808e1c4:	2222      	movs	r2, #34	; 0x22
 808e1c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 808e1ca:	68fb      	ldr	r3, [r7, #12]
 808e1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808e1ce:	4a29      	ldr	r2, [pc, #164]	; (808e274 <HAL_SAI_Receive_DMA+0x110>)
 808e1d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 808e1d2:	68fb      	ldr	r3, [r7, #12]
 808e1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808e1d6:	4a28      	ldr	r2, [pc, #160]	; (808e278 <HAL_SAI_Receive_DMA+0x114>)
 808e1d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 808e1da:	68fb      	ldr	r3, [r7, #12]
 808e1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808e1de:	4a27      	ldr	r2, [pc, #156]	; (808e27c <HAL_SAI_Receive_DMA+0x118>)
 808e1e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 808e1e2:	68fb      	ldr	r3, [r7, #12]
 808e1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808e1e6:	2200      	movs	r2, #0
 808e1e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 808e1ea:	68fb      	ldr	r3, [r7, #12]
 808e1ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 808e1ee:	68fb      	ldr	r3, [r7, #12]
 808e1f0:	681b      	ldr	r3, [r3, #0]
 808e1f2:	331c      	adds	r3, #28
 808e1f4:	4619      	mov	r1, r3
 808e1f6:	68fb      	ldr	r3, [r7, #12]
 808e1f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808e1fa:	461a      	mov	r2, r3
 808e1fc:	68fb      	ldr	r3, [r7, #12]
 808e1fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 808e202:	f7fb f9ed 	bl	80895e0 <HAL_DMA_Start_IT>
 808e206:	4603      	mov	r3, r0
 808e208:	2b00      	cmp	r3, #0
 808e20a:	d005      	beq.n	808e218 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 808e20c:	68fb      	ldr	r3, [r7, #12]
 808e20e:	2200      	movs	r2, #0
 808e210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 808e214:	2301      	movs	r3, #1
 808e216:	e029      	b.n	808e26c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 808e218:	68fb      	ldr	r3, [r7, #12]
 808e21a:	681b      	ldr	r3, [r3, #0]
 808e21c:	681b      	ldr	r3, [r3, #0]
 808e21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808e222:	2b00      	cmp	r3, #0
 808e224:	d107      	bne.n	808e236 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 808e226:	68fb      	ldr	r3, [r7, #12]
 808e228:	681b      	ldr	r3, [r3, #0]
 808e22a:	681a      	ldr	r2, [r3, #0]
 808e22c:	68fb      	ldr	r3, [r7, #12]
 808e22e:	681b      	ldr	r3, [r3, #0]
 808e230:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 808e234:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 808e236:	2100      	movs	r1, #0
 808e238:	68f8      	ldr	r0, [r7, #12]
 808e23a:	f000 f82f 	bl	808e29c <SAI_InterruptFlag>
 808e23e:	4601      	mov	r1, r0
 808e240:	68fb      	ldr	r3, [r7, #12]
 808e242:	681b      	ldr	r3, [r3, #0]
 808e244:	691a      	ldr	r2, [r3, #16]
 808e246:	68fb      	ldr	r3, [r7, #12]
 808e248:	681b      	ldr	r3, [r3, #0]
 808e24a:	430a      	orrs	r2, r1
 808e24c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 808e24e:	68fb      	ldr	r3, [r7, #12]
 808e250:	681b      	ldr	r3, [r3, #0]
 808e252:	681a      	ldr	r2, [r3, #0]
 808e254:	68fb      	ldr	r3, [r7, #12]
 808e256:	681b      	ldr	r3, [r3, #0]
 808e258:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 808e25c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 808e25e:	68fb      	ldr	r3, [r7, #12]
 808e260:	2200      	movs	r2, #0
 808e262:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 808e266:	2300      	movs	r3, #0
 808e268:	e000      	b.n	808e26c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 808e26a:	2302      	movs	r3, #2
  }
}
 808e26c:	4618      	mov	r0, r3
 808e26e:	3710      	adds	r7, #16
 808e270:	46bd      	mov	sp, r7
 808e272:	bd80      	pop	{r7, pc}
 808e274:	0808e459 	.word	0x0808e459
 808e278:	0808e3f5 	.word	0x0808e3f5
 808e27c:	0808e475 	.word	0x0808e475

0808e280 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 808e280:	b480      	push	{r7}
 808e282:	b083      	sub	sp, #12
 808e284:	af00      	add	r7, sp, #0
 808e286:	6078      	str	r0, [r7, #4]
  return hsai->State;
 808e288:	687b      	ldr	r3, [r7, #4]
 808e28a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 808e28e:	b2db      	uxtb	r3, r3
}
 808e290:	4618      	mov	r0, r3
 808e292:	370c      	adds	r7, #12
 808e294:	46bd      	mov	sp, r7
 808e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 808e29a:	4770      	bx	lr

0808e29c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 808e29c:	b480      	push	{r7}
 808e29e:	b085      	sub	sp, #20
 808e2a0:	af00      	add	r7, sp, #0
 808e2a2:	6078      	str	r0, [r7, #4]
 808e2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 808e2a6:	2301      	movs	r3, #1
 808e2a8:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 808e2aa:	683b      	ldr	r3, [r7, #0]
 808e2ac:	2b01      	cmp	r3, #1
 808e2ae:	d103      	bne.n	808e2b8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 808e2b0:	68fb      	ldr	r3, [r7, #12]
 808e2b2:	f043 0308 	orr.w	r3, r3, #8
 808e2b6:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 808e2b8:	687b      	ldr	r3, [r7, #4]
 808e2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808e2bc:	2b08      	cmp	r3, #8
 808e2be:	d10b      	bne.n	808e2d8 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 808e2c0:	687b      	ldr	r3, [r7, #4]
 808e2c2:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 808e2c4:	2b03      	cmp	r3, #3
 808e2c6:	d003      	beq.n	808e2d0 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 808e2c8:	687b      	ldr	r3, [r7, #4]
 808e2ca:	685b      	ldr	r3, [r3, #4]
 808e2cc:	2b01      	cmp	r3, #1
 808e2ce:	d103      	bne.n	808e2d8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 808e2d0:	68fb      	ldr	r3, [r7, #12]
 808e2d2:	f043 0310 	orr.w	r3, r3, #16
 808e2d6:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 808e2d8:	687b      	ldr	r3, [r7, #4]
 808e2da:	685b      	ldr	r3, [r3, #4]
 808e2dc:	2b03      	cmp	r3, #3
 808e2de:	d003      	beq.n	808e2e8 <SAI_InterruptFlag+0x4c>
 808e2e0:	687b      	ldr	r3, [r7, #4]
 808e2e2:	685b      	ldr	r3, [r3, #4]
 808e2e4:	2b02      	cmp	r3, #2
 808e2e6:	d104      	bne.n	808e2f2 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 808e2e8:	68fb      	ldr	r3, [r7, #12]
 808e2ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 808e2ee:	60fb      	str	r3, [r7, #12]
 808e2f0:	e003      	b.n	808e2fa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 808e2f2:	68fb      	ldr	r3, [r7, #12]
 808e2f4:	f043 0304 	orr.w	r3, r3, #4
 808e2f8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 808e2fa:	68fb      	ldr	r3, [r7, #12]
}
 808e2fc:	4618      	mov	r0, r3
 808e2fe:	3714      	adds	r7, #20
 808e300:	46bd      	mov	sp, r7
 808e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 808e306:	4770      	bx	lr

0808e308 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 808e308:	b490      	push	{r4, r7}
 808e30a:	b084      	sub	sp, #16
 808e30c:	af00      	add	r7, sp, #0
 808e30e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 808e310:	4b16      	ldr	r3, [pc, #88]	; (808e36c <SAI_Disable+0x64>)
 808e312:	681b      	ldr	r3, [r3, #0]
 808e314:	4a16      	ldr	r2, [pc, #88]	; (808e370 <SAI_Disable+0x68>)
 808e316:	fba2 2303 	umull	r2, r3, r2, r3
 808e31a:	0b1b      	lsrs	r3, r3, #12
 808e31c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 808e31e:	2300      	movs	r3, #0
 808e320:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 808e322:	687b      	ldr	r3, [r7, #4]
 808e324:	681b      	ldr	r3, [r3, #0]
 808e326:	681a      	ldr	r2, [r3, #0]
 808e328:	687b      	ldr	r3, [r7, #4]
 808e32a:	681b      	ldr	r3, [r3, #0]
 808e32c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 808e330:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 808e332:	4623      	mov	r3, r4
 808e334:	1e5c      	subs	r4, r3, #1
 808e336:	2b00      	cmp	r3, #0
 808e338:	d10a      	bne.n	808e350 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 808e33a:	687b      	ldr	r3, [r7, #4]
 808e33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 808e340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 808e344:	687b      	ldr	r3, [r7, #4]
 808e346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 808e34a:	2303      	movs	r3, #3
 808e34c:	73fb      	strb	r3, [r7, #15]
      break;
 808e34e:	e006      	b.n	808e35e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 808e350:	687b      	ldr	r3, [r7, #4]
 808e352:	681b      	ldr	r3, [r3, #0]
 808e354:	681b      	ldr	r3, [r3, #0]
 808e356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808e35a:	2b00      	cmp	r3, #0
 808e35c:	d1e9      	bne.n	808e332 <SAI_Disable+0x2a>

  return status;
 808e35e:	7bfb      	ldrb	r3, [r7, #15]
}
 808e360:	4618      	mov	r0, r3
 808e362:	3710      	adds	r7, #16
 808e364:	46bd      	mov	sp, r7
 808e366:	bc90      	pop	{r4, r7}
 808e368:	4770      	bx	lr
 808e36a:	bf00      	nop
 808e36c:	2000b374 	.word	0x2000b374
 808e370:	95cbec1b 	.word	0x95cbec1b

0808e374 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 808e374:	b580      	push	{r7, lr}
 808e376:	b084      	sub	sp, #16
 808e378:	af00      	add	r7, sp, #0
 808e37a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 808e37c:	687b      	ldr	r3, [r7, #4]
 808e37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e380:	60fb      	str	r3, [r7, #12]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 808e382:	687b      	ldr	r3, [r7, #4]
 808e384:	681b      	ldr	r3, [r3, #0]
 808e386:	681b      	ldr	r3, [r3, #0]
 808e388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808e38c:	2b00      	cmp	r3, #0
 808e38e:	d11c      	bne.n	808e3ca <SAI_DMATxCplt+0x56>
  {
    hsai->XferCount = 0;
 808e390:	68fb      	ldr	r3, [r7, #12]
 808e392:	2200      	movs	r2, #0
 808e394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 808e398:	68fb      	ldr	r3, [r7, #12]
 808e39a:	681b      	ldr	r3, [r3, #0]
 808e39c:	681a      	ldr	r2, [r3, #0]
 808e39e:	68fb      	ldr	r3, [r7, #12]
 808e3a0:	681b      	ldr	r3, [r3, #0]
 808e3a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 808e3a6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 808e3a8:	2100      	movs	r1, #0
 808e3aa:	68f8      	ldr	r0, [r7, #12]
 808e3ac:	f7ff ff76 	bl	808e29c <SAI_InterruptFlag>
 808e3b0:	4603      	mov	r3, r0
 808e3b2:	43d9      	mvns	r1, r3
 808e3b4:	68fb      	ldr	r3, [r7, #12]
 808e3b6:	681b      	ldr	r3, [r3, #0]
 808e3b8:	691a      	ldr	r2, [r3, #16]
 808e3ba:	68fb      	ldr	r3, [r7, #12]
 808e3bc:	681b      	ldr	r3, [r3, #0]
 808e3be:	400a      	ands	r2, r1
 808e3c0:	611a      	str	r2, [r3, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 808e3c2:	68fb      	ldr	r3, [r7, #12]
 808e3c4:	2201      	movs	r2, #1
 808e3c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 808e3ca:	68f8      	ldr	r0, [r7, #12]
 808e3cc:	f7f6 fbc0 	bl	8084b50 <HAL_SAI_TxCpltCallback>
}
 808e3d0:	bf00      	nop
 808e3d2:	3710      	adds	r7, #16
 808e3d4:	46bd      	mov	sp, r7
 808e3d6:	bd80      	pop	{r7, pc}

0808e3d8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 808e3d8:	b580      	push	{r7, lr}
 808e3da:	b084      	sub	sp, #16
 808e3dc:	af00      	add	r7, sp, #0
 808e3de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 808e3e0:	687b      	ldr	r3, [r7, #4]
 808e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e3e4:	60fb      	str	r3, [r7, #12]

  HAL_SAI_TxHalfCpltCallback(hsai);
 808e3e6:	68f8      	ldr	r0, [r7, #12]
 808e3e8:	f7f6 fbbc 	bl	8084b64 <HAL_SAI_TxHalfCpltCallback>
}
 808e3ec:	bf00      	nop
 808e3ee:	3710      	adds	r7, #16
 808e3f0:	46bd      	mov	sp, r7
 808e3f2:	bd80      	pop	{r7, pc}

0808e3f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 808e3f4:	b580      	push	{r7, lr}
 808e3f6:	b084      	sub	sp, #16
 808e3f8:	af00      	add	r7, sp, #0
 808e3fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 808e3fc:	687b      	ldr	r3, [r7, #4]
 808e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e400:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 808e402:	687b      	ldr	r3, [r7, #4]
 808e404:	681b      	ldr	r3, [r3, #0]
 808e406:	681b      	ldr	r3, [r3, #0]
 808e408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808e40c:	2b00      	cmp	r3, #0
 808e40e:	d11c      	bne.n	808e44a <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 808e410:	68fb      	ldr	r3, [r7, #12]
 808e412:	681b      	ldr	r3, [r3, #0]
 808e414:	681a      	ldr	r2, [r3, #0]
 808e416:	68fb      	ldr	r3, [r7, #12]
 808e418:	681b      	ldr	r3, [r3, #0]
 808e41a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 808e41e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 808e420:	68fb      	ldr	r3, [r7, #12]
 808e422:	2200      	movs	r2, #0
 808e424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 808e428:	2100      	movs	r1, #0
 808e42a:	68f8      	ldr	r0, [r7, #12]
 808e42c:	f7ff ff36 	bl	808e29c <SAI_InterruptFlag>
 808e430:	4603      	mov	r3, r0
 808e432:	43d9      	mvns	r1, r3
 808e434:	68fb      	ldr	r3, [r7, #12]
 808e436:	681b      	ldr	r3, [r3, #0]
 808e438:	691a      	ldr	r2, [r3, #16]
 808e43a:	68fb      	ldr	r3, [r7, #12]
 808e43c:	681b      	ldr	r3, [r3, #0]
 808e43e:	400a      	ands	r2, r1
 808e440:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 808e442:	68fb      	ldr	r3, [r7, #12]
 808e444:	2201      	movs	r2, #1
 808e446:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 808e44a:	68f8      	ldr	r0, [r7, #12]
 808e44c:	f7f6 fec0 	bl	80851d0 <HAL_SAI_RxCpltCallback>
}
 808e450:	bf00      	nop
 808e452:	3710      	adds	r7, #16
 808e454:	46bd      	mov	sp, r7
 808e456:	bd80      	pop	{r7, pc}

0808e458 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 808e458:	b580      	push	{r7, lr}
 808e45a:	b084      	sub	sp, #16
 808e45c:	af00      	add	r7, sp, #0
 808e45e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 808e460:	687b      	ldr	r3, [r7, #4]
 808e462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e464:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 808e466:	68f8      	ldr	r0, [r7, #12]
 808e468:	f7f6 febc 	bl	80851e4 <HAL_SAI_RxHalfCpltCallback>
}
 808e46c:	bf00      	nop
 808e46e:	3710      	adds	r7, #16
 808e470:	46bd      	mov	sp, r7
 808e472:	bd80      	pop	{r7, pc}

0808e474 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 808e474:	b580      	push	{r7, lr}
 808e476:	b084      	sub	sp, #16
 808e478:	af00      	add	r7, sp, #0
 808e47a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 808e47c:	687b      	ldr	r3, [r7, #4]
 808e47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e480:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 808e482:	68fb      	ldr	r3, [r7, #12]
 808e484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 808e488:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 808e48c:	68fb      	ldr	r3, [r7, #12]
 808e48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 808e492:	68fb      	ldr	r3, [r7, #12]
 808e494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808e496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808e498:	2b01      	cmp	r3, #1
 808e49a:	d004      	beq.n	808e4a6 <SAI_DMAError+0x32>
 808e49c:	68fb      	ldr	r3, [r7, #12]
 808e49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808e4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808e4a2:	2b01      	cmp	r3, #1
 808e4a4:	d112      	bne.n	808e4cc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 808e4a6:	68fb      	ldr	r3, [r7, #12]
 808e4a8:	681b      	ldr	r3, [r3, #0]
 808e4aa:	681a      	ldr	r2, [r3, #0]
 808e4ac:	68fb      	ldr	r3, [r7, #12]
 808e4ae:	681b      	ldr	r3, [r3, #0]
 808e4b0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 808e4b4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 808e4b6:	68f8      	ldr	r0, [r7, #12]
 808e4b8:	f7ff ff26 	bl	808e308 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 808e4bc:	68fb      	ldr	r3, [r7, #12]
 808e4be:	2201      	movs	r2, #1
 808e4c0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 808e4c4:	68fb      	ldr	r3, [r7, #12]
 808e4c6:	2200      	movs	r2, #0
 808e4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 808e4cc:	68f8      	ldr	r0, [r7, #12]
 808e4ce:	f7f6 fb53 	bl	8084b78 <HAL_SAI_ErrorCallback>
}
 808e4d2:	bf00      	nop
 808e4d4:	3710      	adds	r7, #16
 808e4d6:	46bd      	mov	sp, r7
 808e4d8:	bd80      	pop	{r7, pc}

0808e4da <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 808e4da:	b580      	push	{r7, lr}
 808e4dc:	b082      	sub	sp, #8
 808e4de:	af00      	add	r7, sp, #0
 808e4e0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 808e4e2:	687b      	ldr	r3, [r7, #4]
 808e4e4:	2b00      	cmp	r3, #0
 808e4e6:	d101      	bne.n	808e4ec <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 808e4e8:	2301      	movs	r3, #1
 808e4ea:	e01d      	b.n	808e528 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 808e4ec:	687b      	ldr	r3, [r7, #4]
 808e4ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808e4f2:	b2db      	uxtb	r3, r3
 808e4f4:	2b00      	cmp	r3, #0
 808e4f6:	d105      	bne.n	808e504 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 808e4f8:	687b      	ldr	r3, [r7, #4]
 808e4fa:	2200      	movs	r2, #0
 808e4fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 808e4fe:	6878      	ldr	r0, [r7, #4]
 808e500:	f000 f87a 	bl	808e5f8 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 808e504:	687b      	ldr	r3, [r7, #4]
 808e506:	2203      	movs	r2, #3
 808e508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 808e50c:	6878      	ldr	r0, [r7, #4]
 808e50e:	f000 f80f 	bl	808e530 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 808e512:	687b      	ldr	r3, [r7, #4]
 808e514:	2200      	movs	r2, #0
 808e516:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 808e518:	687b      	ldr	r3, [r7, #4]
 808e51a:	2200      	movs	r2, #0
 808e51c:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 808e51e:	687b      	ldr	r3, [r7, #4]
 808e520:	2201      	movs	r2, #1
 808e522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 808e526:	2300      	movs	r3, #0
}
 808e528:	4618      	mov	r0, r3
 808e52a:	3708      	adds	r7, #8
 808e52c:	46bd      	mov	sp, r7
 808e52e:	bd80      	pop	{r7, pc}

0808e530 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 808e530:	b5b0      	push	{r4, r5, r7, lr}
 808e532:	b08e      	sub	sp, #56	; 0x38
 808e534:	af04      	add	r7, sp, #16
 808e536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808e538:	2300      	movs	r3, #0
 808e53a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 808e53c:	2300      	movs	r3, #0
 808e53e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 808e540:	2300      	movs	r3, #0
 808e542:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 808e544:	2300      	movs	r3, #0
 808e546:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 808e548:	2300      	movs	r3, #0
 808e54a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 808e54c:	2300      	movs	r3, #0
 808e54e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 808e550:	2376      	movs	r3, #118	; 0x76
 808e552:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 808e554:	687b      	ldr	r3, [r7, #4]
 808e556:	681d      	ldr	r5, [r3, #0]
 808e558:	466c      	mov	r4, sp
 808e55a:	f107 0318 	add.w	r3, r7, #24
 808e55e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 808e562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 808e566:	f107 030c 	add.w	r3, r7, #12
 808e56a:	cb0e      	ldmia	r3, {r1, r2, r3}
 808e56c:	4628      	mov	r0, r5
 808e56e:	f003 ff19 	bl	80923a4 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 808e572:	687b      	ldr	r3, [r7, #4]
 808e574:	681b      	ldr	r3, [r3, #0]
 808e576:	685a      	ldr	r2, [r3, #4]
 808e578:	687b      	ldr	r3, [r7, #4]
 808e57a:	681b      	ldr	r3, [r3, #0]
 808e57c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 808e580:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 808e582:	687b      	ldr	r3, [r7, #4]
 808e584:	681b      	ldr	r3, [r3, #0]
 808e586:	4618      	mov	r0, r3
 808e588:	f003 ff56 	bl	8092438 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 808e58c:	687b      	ldr	r3, [r7, #4]
 808e58e:	681b      	ldr	r3, [r3, #0]
 808e590:	685a      	ldr	r2, [r3, #4]
 808e592:	687b      	ldr	r3, [r7, #4]
 808e594:	681b      	ldr	r3, [r3, #0]
 808e596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 808e59a:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 808e59c:	2002      	movs	r0, #2
 808e59e:	f7fa fdeb 	bl	8089178 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 808e5a2:	6878      	ldr	r0, [r7, #4]
 808e5a4:	f000 ffa7 	bl	808f4f6 <SD_PowerON>
 808e5a8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 808e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808e5ac:	2b00      	cmp	r3, #0
 808e5ae:	d00b      	beq.n	808e5c8 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 808e5b0:	687b      	ldr	r3, [r7, #4]
 808e5b2:	2201      	movs	r2, #1
 808e5b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 808e5b8:	687b      	ldr	r3, [r7, #4]
 808e5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808e5be:	431a      	orrs	r2, r3
 808e5c0:	687b      	ldr	r3, [r7, #4]
 808e5c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808e5c4:	2301      	movs	r3, #1
 808e5c6:	e013      	b.n	808e5f0 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 808e5c8:	6878      	ldr	r0, [r7, #4]
 808e5ca:	f000 fecb 	bl	808f364 <SD_InitCard>
 808e5ce:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 808e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808e5d2:	2b00      	cmp	r3, #0
 808e5d4:	d00b      	beq.n	808e5ee <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 808e5d6:	687b      	ldr	r3, [r7, #4]
 808e5d8:	2201      	movs	r2, #1
 808e5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 808e5de:	687b      	ldr	r3, [r7, #4]
 808e5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808e5e4:	431a      	orrs	r2, r3
 808e5e6:	687b      	ldr	r3, [r7, #4]
 808e5e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808e5ea:	2301      	movs	r3, #1
 808e5ec:	e000      	b.n	808e5f0 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 808e5ee:	2300      	movs	r3, #0
}
 808e5f0:	4618      	mov	r0, r3
 808e5f2:	3728      	adds	r7, #40	; 0x28
 808e5f4:	46bd      	mov	sp, r7
 808e5f6:	bdb0      	pop	{r4, r5, r7, pc}

0808e5f8 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 808e5f8:	b480      	push	{r7}
 808e5fa:	b083      	sub	sp, #12
 808e5fc:	af00      	add	r7, sp, #0
 808e5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 808e600:	bf00      	nop
 808e602:	370c      	adds	r7, #12
 808e604:	46bd      	mov	sp, r7
 808e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 808e60a:	4770      	bx	lr

0808e60c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 808e60c:	b590      	push	{r4, r7, lr}
 808e60e:	b08f      	sub	sp, #60	; 0x3c
 808e610:	af00      	add	r7, sp, #0
 808e612:	60f8      	str	r0, [r7, #12]
 808e614:	60b9      	str	r1, [r7, #8]
 808e616:	607a      	str	r2, [r7, #4]
 808e618:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808e61a:	2300      	movs	r3, #0
 808e61c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 808e61e:	f7fa fd9f 	bl	8089160 <HAL_GetTick>
 808e622:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 808e624:	2300      	movs	r3, #0
 808e626:	633b      	str	r3, [r7, #48]	; 0x30
 808e628:	68bb      	ldr	r3, [r7, #8]
 808e62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 808e62c:	68bb      	ldr	r3, [r7, #8]
 808e62e:	2b00      	cmp	r3, #0
 808e630:	d107      	bne.n	808e642 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 808e632:	68fb      	ldr	r3, [r7, #12]
 808e634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e636:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 808e63a:	68fb      	ldr	r3, [r7, #12]
 808e63c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808e63e:	2301      	movs	r3, #1
 808e640:	e176      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 808e642:	68fb      	ldr	r3, [r7, #12]
 808e644:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808e648:	b2db      	uxtb	r3, r3
 808e64a:	2b01      	cmp	r3, #1
 808e64c:	f040 8169 	bne.w	808e922 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 808e650:	68fb      	ldr	r3, [r7, #12]
 808e652:	2200      	movs	r2, #0
 808e654:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 808e656:	687a      	ldr	r2, [r7, #4]
 808e658:	683b      	ldr	r3, [r7, #0]
 808e65a:	441a      	add	r2, r3
 808e65c:	68fb      	ldr	r3, [r7, #12]
 808e65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808e660:	429a      	cmp	r2, r3
 808e662:	d907      	bls.n	808e674 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 808e664:	68fb      	ldr	r3, [r7, #12]
 808e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e668:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 808e66c:	68fb      	ldr	r3, [r7, #12]
 808e66e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 808e670:	2301      	movs	r3, #1
 808e672:	e15d      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 808e674:	68fb      	ldr	r3, [r7, #12]
 808e676:	2203      	movs	r2, #3
 808e678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 808e67c:	68fb      	ldr	r3, [r7, #12]
 808e67e:	681b      	ldr	r3, [r3, #0]
 808e680:	2200      	movs	r2, #0
 808e682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 808e684:	68fb      	ldr	r3, [r7, #12]
 808e686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808e688:	2b01      	cmp	r3, #1
 808e68a:	d002      	beq.n	808e692 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 808e68c:	687b      	ldr	r3, [r7, #4]
 808e68e:	025b      	lsls	r3, r3, #9
 808e690:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 808e692:	68fb      	ldr	r3, [r7, #12]
 808e694:	681b      	ldr	r3, [r3, #0]
 808e696:	f44f 7100 	mov.w	r1, #512	; 0x200
 808e69a:	4618      	mov	r0, r3
 808e69c:	f003 ff60 	bl	8092560 <SDMMC_CmdBlockLength>
 808e6a0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 808e6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e6a4:	2b00      	cmp	r3, #0
 808e6a6:	d010      	beq.n	808e6ca <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 808e6a8:	68fb      	ldr	r3, [r7, #12]
 808e6aa:	681b      	ldr	r3, [r3, #0]
 808e6ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e6b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808e6b2:	68fb      	ldr	r3, [r7, #12]
 808e6b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e6b8:	431a      	orrs	r2, r3
 808e6ba:	68fb      	ldr	r3, [r7, #12]
 808e6bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e6be:	68fb      	ldr	r3, [r7, #12]
 808e6c0:	2201      	movs	r2, #1
 808e6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e6c6:	2301      	movs	r3, #1
 808e6c8:	e132      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 808e6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808e6ce:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 808e6d0:	683b      	ldr	r3, [r7, #0]
 808e6d2:	025b      	lsls	r3, r3, #9
 808e6d4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 808e6d6:	2390      	movs	r3, #144	; 0x90
 808e6d8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 808e6da:	2302      	movs	r3, #2
 808e6dc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 808e6de:	2300      	movs	r3, #0
 808e6e0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 808e6e2:	2301      	movs	r3, #1
 808e6e4:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 808e6e6:	68fb      	ldr	r3, [r7, #12]
 808e6e8:	681b      	ldr	r3, [r3, #0]
 808e6ea:	f107 0210 	add.w	r2, r7, #16
 808e6ee:	4611      	mov	r1, r2
 808e6f0:	4618      	mov	r0, r3
 808e6f2:	f003 ff09 	bl	8092508 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 808e6f6:	683b      	ldr	r3, [r7, #0]
 808e6f8:	2b01      	cmp	r3, #1
 808e6fa:	d90a      	bls.n	808e712 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 808e6fc:	68fb      	ldr	r3, [r7, #12]
 808e6fe:	2202      	movs	r2, #2
 808e700:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 808e702:	68fb      	ldr	r3, [r7, #12]
 808e704:	681b      	ldr	r3, [r3, #0]
 808e706:	6879      	ldr	r1, [r7, #4]
 808e708:	4618      	mov	r0, r3
 808e70a:	f003 ff71 	bl	80925f0 <SDMMC_CmdReadMultiBlock>
 808e70e:	6378      	str	r0, [r7, #52]	; 0x34
 808e710:	e009      	b.n	808e726 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 808e712:	68fb      	ldr	r3, [r7, #12]
 808e714:	2201      	movs	r2, #1
 808e716:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 808e718:	68fb      	ldr	r3, [r7, #12]
 808e71a:	681b      	ldr	r3, [r3, #0]
 808e71c:	6879      	ldr	r1, [r7, #4]
 808e71e:	4618      	mov	r0, r3
 808e720:	f003 ff42 	bl	80925a8 <SDMMC_CmdReadSingleBlock>
 808e724:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 808e726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e728:	2b00      	cmp	r3, #0
 808e72a:	d04a      	beq.n	808e7c2 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e72c:	68fb      	ldr	r3, [r7, #12]
 808e72e:	681b      	ldr	r3, [r3, #0]
 808e730:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e734:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808e736:	68fb      	ldr	r3, [r7, #12]
 808e738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e73c:	431a      	orrs	r2, r3
 808e73e:	68fb      	ldr	r3, [r7, #12]
 808e740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e742:	68fb      	ldr	r3, [r7, #12]
 808e744:	2201      	movs	r2, #1
 808e746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e74a:	2301      	movs	r3, #1
 808e74c:	e0f0      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 808e74e:	68fb      	ldr	r3, [r7, #12]
 808e750:	681b      	ldr	r3, [r3, #0]
 808e752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 808e758:	2b00      	cmp	r3, #0
 808e75a:	d016      	beq.n	808e78a <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 808e75c:	2300      	movs	r3, #0
 808e75e:	633b      	str	r3, [r7, #48]	; 0x30
 808e760:	e00d      	b.n	808e77e <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 808e762:	68fb      	ldr	r3, [r7, #12]
 808e764:	6819      	ldr	r1, [r3, #0]
 808e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808e768:	009b      	lsls	r3, r3, #2
 808e76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 808e76c:	18d4      	adds	r4, r2, r3
 808e76e:	4608      	mov	r0, r1
 808e770:	f003 fe44 	bl	80923fc <SDMMC_ReadFIFO>
 808e774:	4603      	mov	r3, r0
 808e776:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 808e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808e77a:	3301      	adds	r3, #1
 808e77c:	633b      	str	r3, [r7, #48]	; 0x30
 808e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808e780:	2b07      	cmp	r3, #7
 808e782:	d9ee      	bls.n	808e762 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 808e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808e786:	3320      	adds	r3, #32
 808e788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 808e78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 808e78c:	2b00      	cmp	r3, #0
 808e78e:	d007      	beq.n	808e7a0 <HAL_SD_ReadBlocks+0x194>
 808e790:	f7fa fce6 	bl	8089160 <HAL_GetTick>
 808e794:	4602      	mov	r2, r0
 808e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808e798:	1ad3      	subs	r3, r2, r3
 808e79a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 808e79c:	429a      	cmp	r2, r3
 808e79e:	d810      	bhi.n	808e7c2 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e7a0:	68fb      	ldr	r3, [r7, #12]
 808e7a2:	681b      	ldr	r3, [r3, #0]
 808e7a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e7a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 808e7aa:	68fb      	ldr	r3, [r7, #12]
 808e7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e7ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 808e7b2:	68fb      	ldr	r3, [r7, #12]
 808e7b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 808e7b6:	68fb      	ldr	r3, [r7, #12]
 808e7b8:	2201      	movs	r2, #1
 808e7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 808e7be:	2303      	movs	r3, #3
 808e7c0:	e0b6      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 808e7c2:	68fb      	ldr	r3, [r7, #12]
 808e7c4:	681b      	ldr	r3, [r3, #0]
 808e7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e7c8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 808e7cc:	2b00      	cmp	r3, #0
 808e7ce:	d0be      	beq.n	808e74e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 808e7d0:	68fb      	ldr	r3, [r7, #12]
 808e7d2:	681b      	ldr	r3, [r3, #0]
 808e7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808e7da:	2b00      	cmp	r3, #0
 808e7dc:	d020      	beq.n	808e820 <HAL_SD_ReadBlocks+0x214>
 808e7de:	683b      	ldr	r3, [r7, #0]
 808e7e0:	2b01      	cmp	r3, #1
 808e7e2:	d91d      	bls.n	808e820 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 808e7e4:	68fb      	ldr	r3, [r7, #12]
 808e7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808e7e8:	2b03      	cmp	r3, #3
 808e7ea:	d019      	beq.n	808e820 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 808e7ec:	68fb      	ldr	r3, [r7, #12]
 808e7ee:	681b      	ldr	r3, [r3, #0]
 808e7f0:	4618      	mov	r0, r3
 808e7f2:	f003 ffd5 	bl	80927a0 <SDMMC_CmdStopTransfer>
 808e7f6:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 808e7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e7fa:	2b00      	cmp	r3, #0
 808e7fc:	d010      	beq.n	808e820 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e7fe:	68fb      	ldr	r3, [r7, #12]
 808e800:	681b      	ldr	r3, [r3, #0]
 808e802:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e806:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 808e808:	68fb      	ldr	r3, [r7, #12]
 808e80a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808e80e:	431a      	orrs	r2, r3
 808e810:	68fb      	ldr	r3, [r7, #12]
 808e812:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 808e814:	68fb      	ldr	r3, [r7, #12]
 808e816:	2201      	movs	r2, #1
 808e818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 808e81c:	2301      	movs	r3, #1
 808e81e:	e087      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 808e820:	68fb      	ldr	r3, [r7, #12]
 808e822:	681b      	ldr	r3, [r3, #0]
 808e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e826:	f003 0308 	and.w	r3, r3, #8
 808e82a:	2b00      	cmp	r3, #0
 808e82c:	d010      	beq.n	808e850 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e82e:	68fb      	ldr	r3, [r7, #12]
 808e830:	681b      	ldr	r3, [r3, #0]
 808e832:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e836:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 808e838:	68fb      	ldr	r3, [r7, #12]
 808e83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e83c:	f043 0208 	orr.w	r2, r3, #8
 808e840:	68fb      	ldr	r3, [r7, #12]
 808e842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e844:	68fb      	ldr	r3, [r7, #12]
 808e846:	2201      	movs	r2, #1
 808e848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e84c:	2301      	movs	r3, #1
 808e84e:	e06f      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 808e850:	68fb      	ldr	r3, [r7, #12]
 808e852:	681b      	ldr	r3, [r3, #0]
 808e854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e856:	f003 0302 	and.w	r3, r3, #2
 808e85a:	2b00      	cmp	r3, #0
 808e85c:	d010      	beq.n	808e880 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e85e:	68fb      	ldr	r3, [r7, #12]
 808e860:	681b      	ldr	r3, [r3, #0]
 808e862:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 808e868:	68fb      	ldr	r3, [r7, #12]
 808e86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e86c:	f043 0202 	orr.w	r2, r3, #2
 808e870:	68fb      	ldr	r3, [r7, #12]
 808e872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e874:	68fb      	ldr	r3, [r7, #12]
 808e876:	2201      	movs	r2, #1
 808e878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e87c:	2301      	movs	r3, #1
 808e87e:	e057      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 808e880:	68fb      	ldr	r3, [r7, #12]
 808e882:	681b      	ldr	r3, [r3, #0]
 808e884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e886:	f003 0320 	and.w	r3, r3, #32
 808e88a:	2b00      	cmp	r3, #0
 808e88c:	d037      	beq.n	808e8fe <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e88e:	68fb      	ldr	r3, [r7, #12]
 808e890:	681b      	ldr	r3, [r3, #0]
 808e892:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 808e898:	68fb      	ldr	r3, [r7, #12]
 808e89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e89c:	f043 0220 	orr.w	r2, r3, #32
 808e8a0:	68fb      	ldr	r3, [r7, #12]
 808e8a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e8a4:	68fb      	ldr	r3, [r7, #12]
 808e8a6:	2201      	movs	r2, #1
 808e8a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e8ac:	2301      	movs	r3, #1
 808e8ae:	e03f      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 808e8b0:	68fb      	ldr	r3, [r7, #12]
 808e8b2:	681b      	ldr	r3, [r3, #0]
 808e8b4:	4618      	mov	r0, r3
 808e8b6:	f003 fda1 	bl	80923fc <SDMMC_ReadFIFO>
 808e8ba:	4602      	mov	r2, r0
 808e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808e8be:	601a      	str	r2, [r3, #0]
      tempbuff++;
 808e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808e8c2:	3304      	adds	r3, #4
 808e8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 808e8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 808e8c8:	2b00      	cmp	r3, #0
 808e8ca:	d007      	beq.n	808e8dc <HAL_SD_ReadBlocks+0x2d0>
 808e8cc:	f7fa fc48 	bl	8089160 <HAL_GetTick>
 808e8d0:	4602      	mov	r2, r0
 808e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808e8d4:	1ad3      	subs	r3, r2, r3
 808e8d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 808e8d8:	429a      	cmp	r2, r3
 808e8da:	d810      	bhi.n	808e8fe <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 808e8dc:	68fb      	ldr	r3, [r7, #12]
 808e8de:	681b      	ldr	r3, [r3, #0]
 808e8e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e8e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 808e8e6:	68fb      	ldr	r3, [r7, #12]
 808e8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e8ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 808e8ee:	68fb      	ldr	r3, [r7, #12]
 808e8f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 808e8f2:	68fb      	ldr	r3, [r7, #12]
 808e8f4:	2201      	movs	r2, #1
 808e8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 808e8fa:	2301      	movs	r3, #1
 808e8fc:	e018      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 808e8fe:	68fb      	ldr	r3, [r7, #12]
 808e900:	681b      	ldr	r3, [r3, #0]
 808e902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808e904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808e908:	2b00      	cmp	r3, #0
 808e90a:	d1d1      	bne.n	808e8b0 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808e90c:	68fb      	ldr	r3, [r7, #12]
 808e90e:	681b      	ldr	r3, [r3, #0]
 808e910:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e914:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 808e916:	68fb      	ldr	r3, [r7, #12]
 808e918:	2201      	movs	r2, #1
 808e91a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 808e91e:	2300      	movs	r3, #0
 808e920:	e006      	b.n	808e930 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 808e922:	68fb      	ldr	r3, [r7, #12]
 808e924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 808e92a:	68fb      	ldr	r3, [r7, #12]
 808e92c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808e92e:	2301      	movs	r3, #1
  }
}
 808e930:	4618      	mov	r0, r3
 808e932:	373c      	adds	r7, #60	; 0x3c
 808e934:	46bd      	mov	sp, r7
 808e936:	bd90      	pop	{r4, r7, pc}

0808e938 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 808e938:	b580      	push	{r7, lr}
 808e93a:	b090      	sub	sp, #64	; 0x40
 808e93c:	af00      	add	r7, sp, #0
 808e93e:	60f8      	str	r0, [r7, #12]
 808e940:	60b9      	str	r1, [r7, #8]
 808e942:	607a      	str	r2, [r7, #4]
 808e944:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808e946:	2300      	movs	r3, #0
 808e948:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t tickstart = HAL_GetTick();
 808e94a:	f7fa fc09 	bl	8089160 <HAL_GetTick>
 808e94e:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count = 0;
 808e950:	2300      	movs	r3, #0
 808e952:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *tempbuff = (uint32_t *)pData;
 808e954:	68bb      	ldr	r3, [r7, #8]
 808e956:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t supercount =0;
 808e958:	2300      	movs	r3, #0
 808e95a:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(NULL == pData)
 808e95c:	68bb      	ldr	r3, [r7, #8]
 808e95e:	2b00      	cmp	r3, #0
 808e960:	d107      	bne.n	808e972 <HAL_SD_WriteBlocks+0x3a>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 808e962:	68fb      	ldr	r3, [r7, #12]
 808e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e966:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 808e96a:	68fb      	ldr	r3, [r7, #12]
 808e96c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808e96e:	2301      	movs	r3, #1
 808e970:	e156      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 808e972:	68fb      	ldr	r3, [r7, #12]
 808e974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808e978:	b2db      	uxtb	r3, r3
 808e97a:	2b01      	cmp	r3, #1
 808e97c:	f040 8149 	bne.w	808ec12 <HAL_SD_WriteBlocks+0x2da>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 808e980:	68fb      	ldr	r3, [r7, #12]
 808e982:	2200      	movs	r2, #0
 808e984:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 808e986:	687a      	ldr	r2, [r7, #4]
 808e988:	683b      	ldr	r3, [r7, #0]
 808e98a:	441a      	add	r2, r3
 808e98c:	68fb      	ldr	r3, [r7, #12]
 808e98e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808e990:	429a      	cmp	r2, r3
 808e992:	d907      	bls.n	808e9a4 <HAL_SD_WriteBlocks+0x6c>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 808e994:	68fb      	ldr	r3, [r7, #12]
 808e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808e998:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 808e99c:	68fb      	ldr	r3, [r7, #12]
 808e99e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 808e9a0:	2301      	movs	r3, #1
 808e9a2:	e13d      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 808e9a4:	68fb      	ldr	r3, [r7, #12]
 808e9a6:	2203      	movs	r2, #3
 808e9a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 808e9ac:	68fb      	ldr	r3, [r7, #12]
 808e9ae:	681b      	ldr	r3, [r3, #0]
 808e9b0:	2200      	movs	r2, #0
 808e9b2:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 808e9b4:	68fb      	ldr	r3, [r7, #12]
 808e9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808e9b8:	2b01      	cmp	r3, #1
 808e9ba:	d002      	beq.n	808e9c2 <HAL_SD_WriteBlocks+0x8a>
    {
      BlockAdd *= 512;
 808e9bc:	687b      	ldr	r3, [r7, #4]
 808e9be:	025b      	lsls	r3, r3, #9
 808e9c0:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 808e9c2:	68fb      	ldr	r3, [r7, #12]
 808e9c4:	681b      	ldr	r3, [r3, #0]
 808e9c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 808e9ca:	4618      	mov	r0, r3
 808e9cc:	f003 fdc8 	bl	8092560 <SDMMC_CmdBlockLength>
 808e9d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 808e9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808e9d4:	2b00      	cmp	r3, #0
 808e9d6:	d010      	beq.n	808e9fa <HAL_SD_WriteBlocks+0xc2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 808e9d8:	68fb      	ldr	r3, [r7, #12]
 808e9da:	681b      	ldr	r3, [r3, #0]
 808e9dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808e9e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808e9e2:	68fb      	ldr	r3, [r7, #12]
 808e9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808e9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808e9e8:	431a      	orrs	r2, r3
 808e9ea:	68fb      	ldr	r3, [r7, #12]
 808e9ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808e9ee:	68fb      	ldr	r3, [r7, #12]
 808e9f0:	2201      	movs	r2, #1
 808e9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808e9f6:	2301      	movs	r3, #1
 808e9f8:	e112      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 808e9fa:	683b      	ldr	r3, [r7, #0]
 808e9fc:	2b01      	cmp	r3, #1
 808e9fe:	d90a      	bls.n	808ea16 <HAL_SD_WriteBlocks+0xde>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 808ea00:	68fb      	ldr	r3, [r7, #12]
 808ea02:	2220      	movs	r2, #32
 808ea04:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 808ea06:	68fb      	ldr	r3, [r7, #12]
 808ea08:	681b      	ldr	r3, [r3, #0]
 808ea0a:	6879      	ldr	r1, [r7, #4]
 808ea0c:	4618      	mov	r0, r3
 808ea0e:	f003 fe37 	bl	8092680 <SDMMC_CmdWriteMultiBlock>
 808ea12:	63f8      	str	r0, [r7, #60]	; 0x3c
 808ea14:	e009      	b.n	808ea2a <HAL_SD_WriteBlocks+0xf2>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 808ea16:	68fb      	ldr	r3, [r7, #12]
 808ea18:	2210      	movs	r2, #16
 808ea1a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 808ea1c:	68fb      	ldr	r3, [r7, #12]
 808ea1e:	681b      	ldr	r3, [r3, #0]
 808ea20:	6879      	ldr	r1, [r7, #4]
 808ea22:	4618      	mov	r0, r3
 808ea24:	f003 fe08 	bl	8092638 <SDMMC_CmdWriteSingleBlock>
 808ea28:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 808ea2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808ea2c:	2b00      	cmp	r3, #0
 808ea2e:	d010      	beq.n	808ea52 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 808ea30:	68fb      	ldr	r3, [r7, #12]
 808ea32:	681b      	ldr	r3, [r3, #0]
 808ea34:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ea38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808ea3a:	68fb      	ldr	r3, [r7, #12]
 808ea3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808ea3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808ea40:	431a      	orrs	r2, r3
 808ea42:	68fb      	ldr	r3, [r7, #12]
 808ea44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808ea46:	68fb      	ldr	r3, [r7, #12]
 808ea48:	2201      	movs	r2, #1
 808ea4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808ea4e:	2301      	movs	r3, #1
 808ea50:	e0e6      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 808ea52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808ea56:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 808ea58:	683b      	ldr	r3, [r7, #0]
 808ea5a:	025b      	lsls	r3, r3, #9
 808ea5c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 808ea5e:	2390      	movs	r3, #144	; 0x90
 808ea60:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 808ea62:	2300      	movs	r3, #0
 808ea64:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 808ea66:	2300      	movs	r3, #0
 808ea68:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 808ea6a:	2301      	movs	r3, #1
 808ea6c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 808ea6e:	68fb      	ldr	r3, [r7, #12]
 808ea70:	681b      	ldr	r3, [r3, #0]
 808ea72:	f107 0214 	add.w	r2, r7, #20
 808ea76:	4611      	mov	r1, r2
 808ea78:	4618      	mov	r0, r3
 808ea7a:	f003 fd45 	bl	8092508 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 808ea7e:	e046      	b.n	808eb0e <HAL_SD_WriteBlocks+0x1d6>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 808ea80:	68fb      	ldr	r3, [r7, #12]
 808ea82:	681b      	ldr	r3, [r3, #0]
 808ea84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ea86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808ea8a:	2b00      	cmp	r3, #0
 808ea8c:	d01d      	beq.n	808eaca <HAL_SD_WriteBlocks+0x192>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 808ea8e:	2300      	movs	r3, #0
 808ea90:	63bb      	str	r3, [r7, #56]	; 0x38
 808ea92:	e00b      	b.n	808eaac <HAL_SD_WriteBlocks+0x174>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 808ea94:	68fb      	ldr	r3, [r7, #12]
 808ea96:	6818      	ldr	r0, [r3, #0]
 808ea98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808ea9a:	009b      	lsls	r3, r3, #2
 808ea9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 808ea9e:	4413      	add	r3, r2
 808eaa0:	4619      	mov	r1, r3
 808eaa2:	f003 fcb8 	bl	8092416 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 808eaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808eaa8:	3301      	adds	r3, #1
 808eaaa:	63bb      	str	r3, [r7, #56]	; 0x38
 808eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808eaae:	2b07      	cmp	r3, #7
 808eab0:	d9f0      	bls.n	808ea94 <HAL_SD_WriteBlocks+0x15c>
        }
        tempbuff += 8U;
 808eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808eab4:	3320      	adds	r3, #32
 808eab6:	637b      	str	r3, [r7, #52]	; 0x34
        supercount +=8;
 808eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808eaba:	3308      	adds	r3, #8
 808eabc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((int)tempbuff >= (0x20050000-8))
 808eabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808eac0:	4a59      	ldr	r2, [pc, #356]	; (808ec28 <HAL_SD_WriteBlocks+0x2f0>)
 808eac2:	4293      	cmp	r3, r2
 808eac4:	dd01      	ble.n	808eaca <HAL_SD_WriteBlocks+0x192>
        {
        	return HAL_OK;
 808eac6:	2300      	movs	r3, #0
 808eac8:	e0aa      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
        }
      }

      if (supercount>config.DataLength)
 808eaca:	69bb      	ldr	r3, [r7, #24]
 808eacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808eace:	429a      	cmp	r2, r3
 808ead0:	d901      	bls.n	808ead6 <HAL_SD_WriteBlocks+0x19e>
      {
    	  return HAL_OK;
 808ead2:	2300      	movs	r3, #0
 808ead4:	e0a4      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 808ead6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 808ead8:	2b00      	cmp	r3, #0
 808eada:	d007      	beq.n	808eaec <HAL_SD_WriteBlocks+0x1b4>
 808eadc:	f7fa fb40 	bl	8089160 <HAL_GetTick>
 808eae0:	4602      	mov	r2, r0
 808eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808eae4:	1ad3      	subs	r3, r2, r3
 808eae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 808eae8:	429a      	cmp	r2, r3
 808eaea:	d810      	bhi.n	808eb0e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 808eaec:	68fb      	ldr	r3, [r7, #12]
 808eaee:	681b      	ldr	r3, [r3, #0]
 808eaf0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808eaf4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 808eaf6:	68fb      	ldr	r3, [r7, #12]
 808eaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808eafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808eafc:	431a      	orrs	r2, r3
 808eafe:	68fb      	ldr	r3, [r7, #12]
 808eb00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 808eb02:	68fb      	ldr	r3, [r7, #12]
 808eb04:	2201      	movs	r2, #1
 808eb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 808eb0a:	2303      	movs	r3, #3
 808eb0c:	e088      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 808eb0e:	68fb      	ldr	r3, [r7, #12]
 808eb10:	681b      	ldr	r3, [r3, #0]
 808eb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808eb14:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 808eb18:	2b00      	cmp	r3, #0
 808eb1a:	d0b1      	beq.n	808ea80 <HAL_SD_WriteBlocks+0x148>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 808eb1c:	68fb      	ldr	r3, [r7, #12]
 808eb1e:	681b      	ldr	r3, [r3, #0]
 808eb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808eb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808eb26:	2b00      	cmp	r3, #0
 808eb28:	d020      	beq.n	808eb6c <HAL_SD_WriteBlocks+0x234>
 808eb2a:	683b      	ldr	r3, [r7, #0]
 808eb2c:	2b01      	cmp	r3, #1
 808eb2e:	d91d      	bls.n	808eb6c <HAL_SD_WriteBlocks+0x234>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 808eb30:	68fb      	ldr	r3, [r7, #12]
 808eb32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808eb34:	2b03      	cmp	r3, #3
 808eb36:	d019      	beq.n	808eb6c <HAL_SD_WriteBlocks+0x234>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 808eb38:	68fb      	ldr	r3, [r7, #12]
 808eb3a:	681b      	ldr	r3, [r3, #0]
 808eb3c:	4618      	mov	r0, r3
 808eb3e:	f003 fe2f 	bl	80927a0 <SDMMC_CmdStopTransfer>
 808eb42:	63f8      	str	r0, [r7, #60]	; 0x3c
        if(errorstate != HAL_SD_ERROR_NONE)
 808eb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808eb46:	2b00      	cmp	r3, #0
 808eb48:	d010      	beq.n	808eb6c <HAL_SD_WriteBlocks+0x234>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 808eb4a:	68fb      	ldr	r3, [r7, #12]
 808eb4c:	681b      	ldr	r3, [r3, #0]
 808eb4e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808eb52:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 808eb54:	68fb      	ldr	r3, [r7, #12]
 808eb56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808eb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808eb5a:	431a      	orrs	r2, r3
 808eb5c:	68fb      	ldr	r3, [r7, #12]
 808eb5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 808eb60:	68fb      	ldr	r3, [r7, #12]
 808eb62:	2201      	movs	r2, #1
 808eb64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 808eb68:	2301      	movs	r3, #1
 808eb6a:	e059      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 808eb6c:	68fb      	ldr	r3, [r7, #12]
 808eb6e:	681b      	ldr	r3, [r3, #0]
 808eb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808eb72:	f003 0308 	and.w	r3, r3, #8
 808eb76:	2b00      	cmp	r3, #0
 808eb78:	d010      	beq.n	808eb9c <HAL_SD_WriteBlocks+0x264>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808eb7a:	68fb      	ldr	r3, [r7, #12]
 808eb7c:	681b      	ldr	r3, [r3, #0]
 808eb7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808eb82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 808eb84:	68fb      	ldr	r3, [r7, #12]
 808eb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808eb88:	f043 0208 	orr.w	r2, r3, #8
 808eb8c:	68fb      	ldr	r3, [r7, #12]
 808eb8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808eb90:	68fb      	ldr	r3, [r7, #12]
 808eb92:	2201      	movs	r2, #1
 808eb94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808eb98:	2301      	movs	r3, #1
 808eb9a:	e041      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 808eb9c:	68fb      	ldr	r3, [r7, #12]
 808eb9e:	681b      	ldr	r3, [r3, #0]
 808eba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808eba2:	f003 0302 	and.w	r3, r3, #2
 808eba6:	2b00      	cmp	r3, #0
 808eba8:	d010      	beq.n	808ebcc <HAL_SD_WriteBlocks+0x294>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808ebaa:	68fb      	ldr	r3, [r7, #12]
 808ebac:	681b      	ldr	r3, [r3, #0]
 808ebae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ebb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 808ebb4:	68fb      	ldr	r3, [r7, #12]
 808ebb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ebb8:	f043 0202 	orr.w	r2, r3, #2
 808ebbc:	68fb      	ldr	r3, [r7, #12]
 808ebbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808ebc0:	68fb      	ldr	r3, [r7, #12]
 808ebc2:	2201      	movs	r2, #1
 808ebc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808ebc8:	2301      	movs	r3, #1
 808ebca:	e029      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 808ebcc:	68fb      	ldr	r3, [r7, #12]
 808ebce:	681b      	ldr	r3, [r3, #0]
 808ebd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ebd2:	f003 0310 	and.w	r3, r3, #16
 808ebd6:	2b00      	cmp	r3, #0
 808ebd8:	d010      	beq.n	808ebfc <HAL_SD_WriteBlocks+0x2c4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808ebda:	68fb      	ldr	r3, [r7, #12]
 808ebdc:	681b      	ldr	r3, [r3, #0]
 808ebde:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ebe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 808ebe4:	68fb      	ldr	r3, [r7, #12]
 808ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ebe8:	f043 0210 	orr.w	r2, r3, #16
 808ebec:	68fb      	ldr	r3, [r7, #12]
 808ebee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808ebf0:	68fb      	ldr	r3, [r7, #12]
 808ebf2:	2201      	movs	r2, #1
 808ebf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808ebf8:	2301      	movs	r3, #1
 808ebfa:	e011      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808ebfc:	68fb      	ldr	r3, [r7, #12]
 808ebfe:	681b      	ldr	r3, [r3, #0]
 808ec00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ec04:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 808ec06:	68fb      	ldr	r3, [r7, #12]
 808ec08:	2201      	movs	r2, #1
 808ec0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 808ec0e:	2300      	movs	r3, #0
 808ec10:	e006      	b.n	808ec20 <HAL_SD_WriteBlocks+0x2e8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 808ec12:	68fb      	ldr	r3, [r7, #12]
 808ec14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ec16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 808ec1a:	68fb      	ldr	r3, [r7, #12]
 808ec1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808ec1e:	2301      	movs	r3, #1
  }
}
 808ec20:	4618      	mov	r0, r3
 808ec22:	3740      	adds	r7, #64	; 0x40
 808ec24:	46bd      	mov	sp, r7
 808ec26:	bd80      	pop	{r7, pc}
 808ec28:	2004fff7 	.word	0x2004fff7

0808ec2c <HAL_SD_Erase>:
  * @param  BlockStartAdd Start Block address
  * @param  BlockEndAdd End Block address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Erase(SD_HandleTypeDef *hsd, uint32_t BlockStartAdd, uint32_t BlockEndAdd)
{
 808ec2c:	b580      	push	{r7, lr}
 808ec2e:	b086      	sub	sp, #24
 808ec30:	af00      	add	r7, sp, #0
 808ec32:	60f8      	str	r0, [r7, #12]
 808ec34:	60b9      	str	r1, [r7, #8]
 808ec36:	607a      	str	r2, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808ec38:	2300      	movs	r3, #0
 808ec3a:	617b      	str	r3, [r7, #20]
  
  if(hsd->State == HAL_SD_STATE_READY)
 808ec3c:	68fb      	ldr	r3, [r7, #12]
 808ec3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808ec42:	b2db      	uxtb	r3, r3
 808ec44:	2b01      	cmp	r3, #1
 808ec46:	f040 80b8 	bne.w	808edba <HAL_SD_Erase+0x18e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 808ec4a:	68fb      	ldr	r3, [r7, #12]
 808ec4c:	2200      	movs	r2, #0
 808ec4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if(BlockEndAdd < BlockStartAdd)
 808ec50:	687a      	ldr	r2, [r7, #4]
 808ec52:	68bb      	ldr	r3, [r7, #8]
 808ec54:	429a      	cmp	r2, r3
 808ec56:	d207      	bcs.n	808ec68 <HAL_SD_Erase+0x3c>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 808ec58:	68fb      	ldr	r3, [r7, #12]
 808ec5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ec5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 808ec60:	68fb      	ldr	r3, [r7, #12]
 808ec62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 808ec64:	2301      	movs	r3, #1
 808ec66:	e0a9      	b.n	808edbc <HAL_SD_Erase+0x190>
    }
    
    if(BlockEndAdd > (hsd->SdCard.LogBlockNbr))
 808ec68:	68fb      	ldr	r3, [r7, #12]
 808ec6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808ec6c:	687a      	ldr	r2, [r7, #4]
 808ec6e:	429a      	cmp	r2, r3
 808ec70:	d907      	bls.n	808ec82 <HAL_SD_Erase+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 808ec72:	68fb      	ldr	r3, [r7, #12]
 808ec74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ec76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 808ec7a:	68fb      	ldr	r3, [r7, #12]
 808ec7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 808ec7e:	2301      	movs	r3, #1
 808ec80:	e09c      	b.n	808edbc <HAL_SD_Erase+0x190>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 808ec82:	68fb      	ldr	r3, [r7, #12]
 808ec84:	2203      	movs	r2, #3
 808ec86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Check if the card command class supports erase command */
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 808ec8a:	68fb      	ldr	r3, [r7, #12]
 808ec8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808ec8e:	f003 0320 	and.w	r3, r3, #32
 808ec92:	2b00      	cmp	r3, #0
 808ec94:	d110      	bne.n	808ecb8 <HAL_SD_Erase+0x8c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808ec96:	68fb      	ldr	r3, [r7, #12]
 808ec98:	681b      	ldr	r3, [r3, #0]
 808ec9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ec9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 808eca0:	68fb      	ldr	r3, [r7, #12]
 808eca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808eca4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 808eca8:	68fb      	ldr	r3, [r7, #12]
 808ecaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808ecac:	68fb      	ldr	r3, [r7, #12]
 808ecae:	2201      	movs	r2, #1
 808ecb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808ecb4:	2301      	movs	r3, #1
 808ecb6:	e081      	b.n	808edbc <HAL_SD_Erase+0x190>
    }
    
    if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 808ecb8:	68fb      	ldr	r3, [r7, #12]
 808ecba:	681b      	ldr	r3, [r3, #0]
 808ecbc:	2100      	movs	r1, #0
 808ecbe:	4618      	mov	r0, r3
 808ecc0:	f003 fc0d 	bl	80924de <SDMMC_GetResponse>
 808ecc4:	4603      	mov	r3, r0
 808ecc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808ecca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 808ecce:	d110      	bne.n	808ecf2 <HAL_SD_Erase+0xc6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 808ecd0:	68fb      	ldr	r3, [r7, #12]
 808ecd2:	681b      	ldr	r3, [r3, #0]
 808ecd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ecd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 808ecda:	68fb      	ldr	r3, [r7, #12]
 808ecdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808ecde:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 808ece2:	68fb      	ldr	r3, [r7, #12]
 808ece4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808ece6:	68fb      	ldr	r3, [r7, #12]
 808ece8:	2201      	movs	r2, #1
 808ecea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808ecee:	2301      	movs	r3, #1
 808ecf0:	e064      	b.n	808edbc <HAL_SD_Erase+0x190>
    }
    
    /* Get start and end block for high capacity cards */
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 808ecf2:	68fb      	ldr	r3, [r7, #12]
 808ecf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ecf6:	2b01      	cmp	r3, #1
 808ecf8:	d005      	beq.n	808ed06 <HAL_SD_Erase+0xda>
    {
      BlockStartAdd *= 512U;
 808ecfa:	68bb      	ldr	r3, [r7, #8]
 808ecfc:	025b      	lsls	r3, r3, #9
 808ecfe:	60bb      	str	r3, [r7, #8]
      BlockEndAdd   *= 512U;
 808ed00:	687b      	ldr	r3, [r7, #4]
 808ed02:	025b      	lsls	r3, r3, #9
 808ed04:	607b      	str	r3, [r7, #4]
    }
    
    /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
    if(hsd->SdCard.CardType != CARD_SECURED)
 808ed06:	68fb      	ldr	r3, [r7, #12]
 808ed08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ed0a:	2b03      	cmp	r3, #3
 808ed0c:	d035      	beq.n	808ed7a <HAL_SD_Erase+0x14e>
    {
      /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
      errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, BlockStartAdd);
 808ed0e:	68fb      	ldr	r3, [r7, #12]
 808ed10:	681b      	ldr	r3, [r3, #0]
 808ed12:	68b9      	ldr	r1, [r7, #8]
 808ed14:	4618      	mov	r0, r3
 808ed16:	f003 fcd7 	bl	80926c8 <SDMMC_CmdSDEraseStartAdd>
 808ed1a:	6178      	str	r0, [r7, #20]
      if(errorstate != HAL_SD_ERROR_NONE)
 808ed1c:	697b      	ldr	r3, [r7, #20]
 808ed1e:	2b00      	cmp	r3, #0
 808ed20:	d010      	beq.n	808ed44 <HAL_SD_Erase+0x118>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 808ed22:	68fb      	ldr	r3, [r7, #12]
 808ed24:	681b      	ldr	r3, [r3, #0]
 808ed26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ed2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 808ed2c:	68fb      	ldr	r3, [r7, #12]
 808ed2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808ed30:	697b      	ldr	r3, [r7, #20]
 808ed32:	431a      	orrs	r2, r3
 808ed34:	68fb      	ldr	r3, [r7, #12]
 808ed36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 808ed38:	68fb      	ldr	r3, [r7, #12]
 808ed3a:	2201      	movs	r2, #1
 808ed3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 808ed40:	2301      	movs	r3, #1
 808ed42:	e03b      	b.n	808edbc <HAL_SD_Erase+0x190>
      }
      
      /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
      errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, BlockEndAdd);
 808ed44:	68fb      	ldr	r3, [r7, #12]
 808ed46:	681b      	ldr	r3, [r3, #0]
 808ed48:	6879      	ldr	r1, [r7, #4]
 808ed4a:	4618      	mov	r0, r3
 808ed4c:	f003 fce0 	bl	8092710 <SDMMC_CmdSDEraseEndAdd>
 808ed50:	6178      	str	r0, [r7, #20]
      if(errorstate != HAL_SD_ERROR_NONE)
 808ed52:	697b      	ldr	r3, [r7, #20]
 808ed54:	2b00      	cmp	r3, #0
 808ed56:	d010      	beq.n	808ed7a <HAL_SD_Erase+0x14e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 808ed58:	68fb      	ldr	r3, [r7, #12]
 808ed5a:	681b      	ldr	r3, [r3, #0]
 808ed5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ed60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 808ed62:	68fb      	ldr	r3, [r7, #12]
 808ed64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808ed66:	697b      	ldr	r3, [r7, #20]
 808ed68:	431a      	orrs	r2, r3
 808ed6a:	68fb      	ldr	r3, [r7, #12]
 808ed6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 808ed6e:	68fb      	ldr	r3, [r7, #12]
 808ed70:	2201      	movs	r2, #1
 808ed72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 808ed76:	2301      	movs	r3, #1
 808ed78:	e020      	b.n	808edbc <HAL_SD_Erase+0x190>
      }
    }
    
    /* Send CMD38 ERASE */
    errorstate = SDMMC_CmdErase(hsd->Instance);
 808ed7a:	68fb      	ldr	r3, [r7, #12]
 808ed7c:	681b      	ldr	r3, [r3, #0]
 808ed7e:	4618      	mov	r0, r3
 808ed80:	f003 fcea 	bl	8092758 <SDMMC_CmdErase>
 808ed84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 808ed86:	697b      	ldr	r3, [r7, #20]
 808ed88:	2b00      	cmp	r3, #0
 808ed8a:	d010      	beq.n	808edae <HAL_SD_Erase+0x182>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 808ed8c:	68fb      	ldr	r3, [r7, #12]
 808ed8e:	681b      	ldr	r3, [r3, #0]
 808ed90:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808ed94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808ed96:	68fb      	ldr	r3, [r7, #12]
 808ed98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808ed9a:	697b      	ldr	r3, [r7, #20]
 808ed9c:	431a      	orrs	r2, r3
 808ed9e:	68fb      	ldr	r3, [r7, #12]
 808eda0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808eda2:	68fb      	ldr	r3, [r7, #12]
 808eda4:	2201      	movs	r2, #1
 808eda6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 808edaa:	2301      	movs	r3, #1
 808edac:	e006      	b.n	808edbc <HAL_SD_Erase+0x190>
    }
    
    hsd->State = HAL_SD_STATE_READY;
 808edae:	68fb      	ldr	r3, [r7, #12]
 808edb0:	2201      	movs	r2, #1
 808edb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 808edb6:	2300      	movs	r3, #0
 808edb8:	e000      	b.n	808edbc <HAL_SD_Erase+0x190>
  }
  else
  {
    return HAL_BUSY;
 808edba:	2302      	movs	r3, #2
  }
}
 808edbc:	4618      	mov	r0, r3
 808edbe:	3718      	adds	r7, #24
 808edc0:	46bd      	mov	sp, r7
 808edc2:	bd80      	pop	{r7, pc}

0808edc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 808edc4:	b480      	push	{r7}
 808edc6:	b085      	sub	sp, #20
 808edc8:	af00      	add	r7, sp, #0
 808edca:	6078      	str	r0, [r7, #4]
 808edcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 808edce:	2300      	movs	r3, #0
 808edd0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 808edd2:	687b      	ldr	r3, [r7, #4]
 808edd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808edd6:	0e1b      	lsrs	r3, r3, #24
 808edd8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 808edda:	68fb      	ldr	r3, [r7, #12]
 808eddc:	099b      	lsrs	r3, r3, #6
 808edde:	b2db      	uxtb	r3, r3
 808ede0:	f003 0303 	and.w	r3, r3, #3
 808ede4:	b2da      	uxtb	r2, r3
 808ede6:	683b      	ldr	r3, [r7, #0]
 808ede8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 808edea:	68fb      	ldr	r3, [r7, #12]
 808edec:	089b      	lsrs	r3, r3, #2
 808edee:	b2db      	uxtb	r3, r3
 808edf0:	f003 030f 	and.w	r3, r3, #15
 808edf4:	b2da      	uxtb	r2, r3
 808edf6:	683b      	ldr	r3, [r7, #0]
 808edf8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 808edfa:	68fb      	ldr	r3, [r7, #12]
 808edfc:	b2db      	uxtb	r3, r3
 808edfe:	f003 0303 	and.w	r3, r3, #3
 808ee02:	b2da      	uxtb	r2, r3
 808ee04:	683b      	ldr	r3, [r7, #0]
 808ee06:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 808ee08:	687b      	ldr	r3, [r7, #4]
 808ee0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808ee0c:	0c1b      	lsrs	r3, r3, #16
 808ee0e:	b2db      	uxtb	r3, r3
 808ee10:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 808ee12:	68fb      	ldr	r3, [r7, #12]
 808ee14:	b2da      	uxtb	r2, r3
 808ee16:	683b      	ldr	r3, [r7, #0]
 808ee18:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 808ee1a:	687b      	ldr	r3, [r7, #4]
 808ee1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808ee1e:	0a1b      	lsrs	r3, r3, #8
 808ee20:	b2db      	uxtb	r3, r3
 808ee22:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 808ee24:	68fb      	ldr	r3, [r7, #12]
 808ee26:	b2da      	uxtb	r2, r3
 808ee28:	683b      	ldr	r3, [r7, #0]
 808ee2a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 808ee2c:	687b      	ldr	r3, [r7, #4]
 808ee2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808ee30:	b2db      	uxtb	r3, r3
 808ee32:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 808ee34:	68fb      	ldr	r3, [r7, #12]
 808ee36:	b2da      	uxtb	r2, r3
 808ee38:	683b      	ldr	r3, [r7, #0]
 808ee3a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 808ee3c:	687b      	ldr	r3, [r7, #4]
 808ee3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808ee40:	0e1b      	lsrs	r3, r3, #24
 808ee42:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 808ee44:	68fb      	ldr	r3, [r7, #12]
 808ee46:	b29b      	uxth	r3, r3
 808ee48:	011b      	lsls	r3, r3, #4
 808ee4a:	b29a      	uxth	r2, r3
 808ee4c:	683b      	ldr	r3, [r7, #0]
 808ee4e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 808ee50:	687b      	ldr	r3, [r7, #4]
 808ee52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808ee54:	0c1b      	lsrs	r3, r3, #16
 808ee56:	b2db      	uxtb	r3, r3
 808ee58:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 808ee5a:	683b      	ldr	r3, [r7, #0]
 808ee5c:	88db      	ldrh	r3, [r3, #6]
 808ee5e:	b29a      	uxth	r2, r3
 808ee60:	68fb      	ldr	r3, [r7, #12]
 808ee62:	091b      	lsrs	r3, r3, #4
 808ee64:	b29b      	uxth	r3, r3
 808ee66:	f003 030f 	and.w	r3, r3, #15
 808ee6a:	b29b      	uxth	r3, r3
 808ee6c:	4313      	orrs	r3, r2
 808ee6e:	b29a      	uxth	r2, r3
 808ee70:	683b      	ldr	r3, [r7, #0]
 808ee72:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 808ee74:	68fb      	ldr	r3, [r7, #12]
 808ee76:	b2db      	uxtb	r3, r3
 808ee78:	f003 030f 	and.w	r3, r3, #15
 808ee7c:	b2da      	uxtb	r2, r3
 808ee7e:	683b      	ldr	r3, [r7, #0]
 808ee80:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 808ee82:	687b      	ldr	r3, [r7, #4]
 808ee84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808ee86:	0a1b      	lsrs	r3, r3, #8
 808ee88:	b2db      	uxtb	r3, r3
 808ee8a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 808ee8c:	68fb      	ldr	r3, [r7, #12]
 808ee8e:	09db      	lsrs	r3, r3, #7
 808ee90:	b2db      	uxtb	r3, r3
 808ee92:	f003 0301 	and.w	r3, r3, #1
 808ee96:	b2da      	uxtb	r2, r3
 808ee98:	683b      	ldr	r3, [r7, #0]
 808ee9a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 808ee9c:	68fb      	ldr	r3, [r7, #12]
 808ee9e:	099b      	lsrs	r3, r3, #6
 808eea0:	b2db      	uxtb	r3, r3
 808eea2:	f003 0301 	and.w	r3, r3, #1
 808eea6:	b2da      	uxtb	r2, r3
 808eea8:	683b      	ldr	r3, [r7, #0]
 808eeaa:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 808eeac:	68fb      	ldr	r3, [r7, #12]
 808eeae:	095b      	lsrs	r3, r3, #5
 808eeb0:	b2db      	uxtb	r3, r3
 808eeb2:	f003 0301 	and.w	r3, r3, #1
 808eeb6:	b2da      	uxtb	r2, r3
 808eeb8:	683b      	ldr	r3, [r7, #0]
 808eeba:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 808eebc:	68fb      	ldr	r3, [r7, #12]
 808eebe:	091b      	lsrs	r3, r3, #4
 808eec0:	b2db      	uxtb	r3, r3
 808eec2:	f003 0301 	and.w	r3, r3, #1
 808eec6:	b2da      	uxtb	r2, r3
 808eec8:	683b      	ldr	r3, [r7, #0]
 808eeca:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 808eecc:	683b      	ldr	r3, [r7, #0]
 808eece:	2200      	movs	r2, #0
 808eed0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 808eed2:	687b      	ldr	r3, [r7, #4]
 808eed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808eed6:	2b00      	cmp	r3, #0
 808eed8:	f040 8086 	bne.w	808efe8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 808eedc:	68fb      	ldr	r3, [r7, #12]
 808eede:	029b      	lsls	r3, r3, #10
 808eee0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 808eee4:	683b      	ldr	r3, [r7, #0]
 808eee6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 808eee8:	687b      	ldr	r3, [r7, #4]
 808eeea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808eeec:	b2db      	uxtb	r3, r3
 808eeee:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 808eef0:	683b      	ldr	r3, [r7, #0]
 808eef2:	691a      	ldr	r2, [r3, #16]
 808eef4:	68fb      	ldr	r3, [r7, #12]
 808eef6:	009b      	lsls	r3, r3, #2
 808eef8:	431a      	orrs	r2, r3
 808eefa:	683b      	ldr	r3, [r7, #0]
 808eefc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 808eefe:	687b      	ldr	r3, [r7, #4]
 808ef00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808ef02:	0e1b      	lsrs	r3, r3, #24
 808ef04:	b2db      	uxtb	r3, r3
 808ef06:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 808ef08:	683b      	ldr	r3, [r7, #0]
 808ef0a:	691a      	ldr	r2, [r3, #16]
 808ef0c:	68fb      	ldr	r3, [r7, #12]
 808ef0e:	099b      	lsrs	r3, r3, #6
 808ef10:	f003 0303 	and.w	r3, r3, #3
 808ef14:	431a      	orrs	r2, r3
 808ef16:	683b      	ldr	r3, [r7, #0]
 808ef18:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 808ef1a:	68fb      	ldr	r3, [r7, #12]
 808ef1c:	08db      	lsrs	r3, r3, #3
 808ef1e:	b2db      	uxtb	r3, r3
 808ef20:	f003 0307 	and.w	r3, r3, #7
 808ef24:	b2da      	uxtb	r2, r3
 808ef26:	683b      	ldr	r3, [r7, #0]
 808ef28:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 808ef2a:	68fb      	ldr	r3, [r7, #12]
 808ef2c:	b2db      	uxtb	r3, r3
 808ef2e:	f003 0307 	and.w	r3, r3, #7
 808ef32:	b2da      	uxtb	r2, r3
 808ef34:	683b      	ldr	r3, [r7, #0]
 808ef36:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 808ef38:	687b      	ldr	r3, [r7, #4]
 808ef3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808ef3c:	0c1b      	lsrs	r3, r3, #16
 808ef3e:	b2db      	uxtb	r3, r3
 808ef40:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 808ef42:	68fb      	ldr	r3, [r7, #12]
 808ef44:	095b      	lsrs	r3, r3, #5
 808ef46:	b2db      	uxtb	r3, r3
 808ef48:	f003 0307 	and.w	r3, r3, #7
 808ef4c:	b2da      	uxtb	r2, r3
 808ef4e:	683b      	ldr	r3, [r7, #0]
 808ef50:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 808ef52:	68fb      	ldr	r3, [r7, #12]
 808ef54:	089b      	lsrs	r3, r3, #2
 808ef56:	b2db      	uxtb	r3, r3
 808ef58:	f003 0307 	and.w	r3, r3, #7
 808ef5c:	b2da      	uxtb	r2, r3
 808ef5e:	683b      	ldr	r3, [r7, #0]
 808ef60:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 808ef62:	68fb      	ldr	r3, [r7, #12]
 808ef64:	b2db      	uxtb	r3, r3
 808ef66:	005b      	lsls	r3, r3, #1
 808ef68:	b2db      	uxtb	r3, r3
 808ef6a:	f003 0306 	and.w	r3, r3, #6
 808ef6e:	b2da      	uxtb	r2, r3
 808ef70:	683b      	ldr	r3, [r7, #0]
 808ef72:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 808ef74:	687b      	ldr	r3, [r7, #4]
 808ef76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808ef78:	0a1b      	lsrs	r3, r3, #8
 808ef7a:	b2db      	uxtb	r3, r3
 808ef7c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 808ef7e:	683b      	ldr	r3, [r7, #0]
 808ef80:	7e1b      	ldrb	r3, [r3, #24]
 808ef82:	b2da      	uxtb	r2, r3
 808ef84:	68fb      	ldr	r3, [r7, #12]
 808ef86:	09db      	lsrs	r3, r3, #7
 808ef88:	b2db      	uxtb	r3, r3
 808ef8a:	f003 0301 	and.w	r3, r3, #1
 808ef8e:	b2db      	uxtb	r3, r3
 808ef90:	4313      	orrs	r3, r2
 808ef92:	b2da      	uxtb	r2, r3
 808ef94:	683b      	ldr	r3, [r7, #0]
 808ef96:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 808ef98:	683b      	ldr	r3, [r7, #0]
 808ef9a:	691b      	ldr	r3, [r3, #16]
 808ef9c:	1c5a      	adds	r2, r3, #1
 808ef9e:	687b      	ldr	r3, [r7, #4]
 808efa0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 808efa2:	683b      	ldr	r3, [r7, #0]
 808efa4:	7e1b      	ldrb	r3, [r3, #24]
 808efa6:	b2db      	uxtb	r3, r3
 808efa8:	3302      	adds	r3, #2
 808efaa:	2201      	movs	r2, #1
 808efac:	409a      	lsls	r2, r3
 808efae:	687b      	ldr	r3, [r7, #4]
 808efb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808efb2:	fb02 f203 	mul.w	r2, r2, r3
 808efb6:	687b      	ldr	r3, [r7, #4]
 808efb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 808efba:	683b      	ldr	r3, [r7, #0]
 808efbc:	7a1b      	ldrb	r3, [r3, #8]
 808efbe:	b2db      	uxtb	r3, r3
 808efc0:	461a      	mov	r2, r3
 808efc2:	2301      	movs	r3, #1
 808efc4:	4093      	lsls	r3, r2
 808efc6:	461a      	mov	r2, r3
 808efc8:	687b      	ldr	r3, [r7, #4]
 808efca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 808efcc:	687b      	ldr	r3, [r7, #4]
 808efce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808efd0:	687a      	ldr	r2, [r7, #4]
 808efd2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 808efd4:	0a52      	lsrs	r2, r2, #9
 808efd6:	fb02 f203 	mul.w	r2, r2, r3
 808efda:	687b      	ldr	r3, [r7, #4]
 808efdc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 808efde:	687b      	ldr	r3, [r7, #4]
 808efe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 808efe4:	661a      	str	r2, [r3, #96]	; 0x60
 808efe6:	e04d      	b.n	808f084 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 808efe8:	687b      	ldr	r3, [r7, #4]
 808efea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808efec:	2b01      	cmp	r3, #1
 808efee:	d138      	bne.n	808f062 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 808eff0:	687b      	ldr	r3, [r7, #4]
 808eff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808eff4:	b2db      	uxtb	r3, r3
 808eff6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 808eff8:	68fb      	ldr	r3, [r7, #12]
 808effa:	041b      	lsls	r3, r3, #16
 808effc:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 808f000:	683b      	ldr	r3, [r7, #0]
 808f002:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 808f004:	687b      	ldr	r3, [r7, #4]
 808f006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808f008:	0e1b      	lsrs	r3, r3, #24
 808f00a:	b2db      	uxtb	r3, r3
 808f00c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 808f00e:	683b      	ldr	r3, [r7, #0]
 808f010:	691a      	ldr	r2, [r3, #16]
 808f012:	68fb      	ldr	r3, [r7, #12]
 808f014:	021b      	lsls	r3, r3, #8
 808f016:	431a      	orrs	r2, r3
 808f018:	683b      	ldr	r3, [r7, #0]
 808f01a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 808f01c:	687b      	ldr	r3, [r7, #4]
 808f01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808f020:	0c1b      	lsrs	r3, r3, #16
 808f022:	b2db      	uxtb	r3, r3
 808f024:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 808f026:	683b      	ldr	r3, [r7, #0]
 808f028:	691a      	ldr	r2, [r3, #16]
 808f02a:	68fb      	ldr	r3, [r7, #12]
 808f02c:	431a      	orrs	r2, r3
 808f02e:	683b      	ldr	r3, [r7, #0]
 808f030:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 808f032:	687b      	ldr	r3, [r7, #4]
 808f034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808f036:	0a1b      	lsrs	r3, r3, #8
 808f038:	b2db      	uxtb	r3, r3
 808f03a:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 808f03c:	683b      	ldr	r3, [r7, #0]
 808f03e:	691b      	ldr	r3, [r3, #16]
 808f040:	3301      	adds	r3, #1
 808f042:	029a      	lsls	r2, r3, #10
 808f044:	687b      	ldr	r3, [r7, #4]
 808f046:	655a      	str	r2, [r3, #84]	; 0x54
 808f048:	687b      	ldr	r3, [r7, #4]
 808f04a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 808f04c:	687b      	ldr	r3, [r7, #4]
 808f04e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 808f050:	687b      	ldr	r3, [r7, #4]
 808f052:	f44f 7200 	mov.w	r2, #512	; 0x200
 808f056:	659a      	str	r2, [r3, #88]	; 0x58
 808f058:	687b      	ldr	r3, [r7, #4]
 808f05a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 808f05c:	687b      	ldr	r3, [r7, #4]
 808f05e:	661a      	str	r2, [r3, #96]	; 0x60
 808f060:	e010      	b.n	808f084 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 808f062:	687b      	ldr	r3, [r7, #4]
 808f064:	681b      	ldr	r3, [r3, #0]
 808f066:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808f06a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808f06c:	687b      	ldr	r3, [r7, #4]
 808f06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 808f074:	687b      	ldr	r3, [r7, #4]
 808f076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 808f078:	687b      	ldr	r3, [r7, #4]
 808f07a:	2201      	movs	r2, #1
 808f07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 808f080:	2301      	movs	r3, #1
 808f082:	e0c1      	b.n	808f208 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 808f084:	68fb      	ldr	r3, [r7, #12]
 808f086:	099b      	lsrs	r3, r3, #6
 808f088:	b2db      	uxtb	r3, r3
 808f08a:	f003 0301 	and.w	r3, r3, #1
 808f08e:	b2da      	uxtb	r2, r3
 808f090:	683b      	ldr	r3, [r7, #0]
 808f092:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 808f094:	68fb      	ldr	r3, [r7, #12]
 808f096:	b2db      	uxtb	r3, r3
 808f098:	005b      	lsls	r3, r3, #1
 808f09a:	b2db      	uxtb	r3, r3
 808f09c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 808f0a0:	b2da      	uxtb	r2, r3
 808f0a2:	683b      	ldr	r3, [r7, #0]
 808f0a4:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 808f0a6:	687b      	ldr	r3, [r7, #4]
 808f0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808f0aa:	b2db      	uxtb	r3, r3
 808f0ac:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 808f0ae:	683b      	ldr	r3, [r7, #0]
 808f0b0:	7e9b      	ldrb	r3, [r3, #26]
 808f0b2:	b2da      	uxtb	r2, r3
 808f0b4:	68fb      	ldr	r3, [r7, #12]
 808f0b6:	09db      	lsrs	r3, r3, #7
 808f0b8:	b2db      	uxtb	r3, r3
 808f0ba:	f003 0301 	and.w	r3, r3, #1
 808f0be:	b2db      	uxtb	r3, r3
 808f0c0:	4313      	orrs	r3, r2
 808f0c2:	b2da      	uxtb	r2, r3
 808f0c4:	683b      	ldr	r3, [r7, #0]
 808f0c6:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 808f0c8:	68fb      	ldr	r3, [r7, #12]
 808f0ca:	b2db      	uxtb	r3, r3
 808f0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808f0d0:	b2da      	uxtb	r2, r3
 808f0d2:	683b      	ldr	r3, [r7, #0]
 808f0d4:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 808f0d6:	687b      	ldr	r3, [r7, #4]
 808f0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808f0da:	0e1b      	lsrs	r3, r3, #24
 808f0dc:	b2db      	uxtb	r3, r3
 808f0de:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 808f0e0:	68fb      	ldr	r3, [r7, #12]
 808f0e2:	09db      	lsrs	r3, r3, #7
 808f0e4:	b2db      	uxtb	r3, r3
 808f0e6:	f003 0301 	and.w	r3, r3, #1
 808f0ea:	b2da      	uxtb	r2, r3
 808f0ec:	683b      	ldr	r3, [r7, #0]
 808f0ee:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 808f0f0:	68fb      	ldr	r3, [r7, #12]
 808f0f2:	095b      	lsrs	r3, r3, #5
 808f0f4:	b2db      	uxtb	r3, r3
 808f0f6:	f003 0303 	and.w	r3, r3, #3
 808f0fa:	b2da      	uxtb	r2, r3
 808f0fc:	683b      	ldr	r3, [r7, #0]
 808f0fe:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 808f100:	68fb      	ldr	r3, [r7, #12]
 808f102:	089b      	lsrs	r3, r3, #2
 808f104:	b2db      	uxtb	r3, r3
 808f106:	f003 0307 	and.w	r3, r3, #7
 808f10a:	b2da      	uxtb	r2, r3
 808f10c:	683b      	ldr	r3, [r7, #0]
 808f10e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 808f110:	68fb      	ldr	r3, [r7, #12]
 808f112:	b2db      	uxtb	r3, r3
 808f114:	009b      	lsls	r3, r3, #2
 808f116:	b2db      	uxtb	r3, r3
 808f118:	f003 030c 	and.w	r3, r3, #12
 808f11c:	b2da      	uxtb	r2, r3
 808f11e:	683b      	ldr	r3, [r7, #0]
 808f120:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 808f122:	687b      	ldr	r3, [r7, #4]
 808f124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808f126:	0c1b      	lsrs	r3, r3, #16
 808f128:	b2db      	uxtb	r3, r3
 808f12a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 808f12c:	683b      	ldr	r3, [r7, #0]
 808f12e:	7fdb      	ldrb	r3, [r3, #31]
 808f130:	b2da      	uxtb	r2, r3
 808f132:	68fb      	ldr	r3, [r7, #12]
 808f134:	099b      	lsrs	r3, r3, #6
 808f136:	b2db      	uxtb	r3, r3
 808f138:	f003 0303 	and.w	r3, r3, #3
 808f13c:	b2db      	uxtb	r3, r3
 808f13e:	4313      	orrs	r3, r2
 808f140:	b2da      	uxtb	r2, r3
 808f142:	683b      	ldr	r3, [r7, #0]
 808f144:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 808f146:	68fb      	ldr	r3, [r7, #12]
 808f148:	095b      	lsrs	r3, r3, #5
 808f14a:	b2db      	uxtb	r3, r3
 808f14c:	f003 0301 	and.w	r3, r3, #1
 808f150:	b2da      	uxtb	r2, r3
 808f152:	683b      	ldr	r3, [r7, #0]
 808f154:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 808f158:	683b      	ldr	r3, [r7, #0]
 808f15a:	2200      	movs	r2, #0
 808f15c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 808f160:	68fb      	ldr	r3, [r7, #12]
 808f162:	b2db      	uxtb	r3, r3
 808f164:	f003 0301 	and.w	r3, r3, #1
 808f168:	b2da      	uxtb	r2, r3
 808f16a:	683b      	ldr	r3, [r7, #0]
 808f16c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 808f170:	687b      	ldr	r3, [r7, #4]
 808f172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808f174:	0a1b      	lsrs	r3, r3, #8
 808f176:	b2db      	uxtb	r3, r3
 808f178:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 808f17a:	68fb      	ldr	r3, [r7, #12]
 808f17c:	09db      	lsrs	r3, r3, #7
 808f17e:	b2db      	uxtb	r3, r3
 808f180:	f003 0301 	and.w	r3, r3, #1
 808f184:	b2da      	uxtb	r2, r3
 808f186:	683b      	ldr	r3, [r7, #0]
 808f188:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 808f18c:	68fb      	ldr	r3, [r7, #12]
 808f18e:	099b      	lsrs	r3, r3, #6
 808f190:	b2db      	uxtb	r3, r3
 808f192:	f003 0301 	and.w	r3, r3, #1
 808f196:	b2da      	uxtb	r2, r3
 808f198:	683b      	ldr	r3, [r7, #0]
 808f19a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 808f19e:	68fb      	ldr	r3, [r7, #12]
 808f1a0:	095b      	lsrs	r3, r3, #5
 808f1a2:	b2db      	uxtb	r3, r3
 808f1a4:	f003 0301 	and.w	r3, r3, #1
 808f1a8:	b2da      	uxtb	r2, r3
 808f1aa:	683b      	ldr	r3, [r7, #0]
 808f1ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 808f1b0:	68fb      	ldr	r3, [r7, #12]
 808f1b2:	091b      	lsrs	r3, r3, #4
 808f1b4:	b2db      	uxtb	r3, r3
 808f1b6:	f003 0301 	and.w	r3, r3, #1
 808f1ba:	b2da      	uxtb	r2, r3
 808f1bc:	683b      	ldr	r3, [r7, #0]
 808f1be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 808f1c2:	68fb      	ldr	r3, [r7, #12]
 808f1c4:	089b      	lsrs	r3, r3, #2
 808f1c6:	b2db      	uxtb	r3, r3
 808f1c8:	f003 0303 	and.w	r3, r3, #3
 808f1cc:	b2da      	uxtb	r2, r3
 808f1ce:	683b      	ldr	r3, [r7, #0]
 808f1d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 808f1d4:	68fb      	ldr	r3, [r7, #12]
 808f1d6:	b2db      	uxtb	r3, r3
 808f1d8:	f003 0303 	and.w	r3, r3, #3
 808f1dc:	b2da      	uxtb	r2, r3
 808f1de:	683b      	ldr	r3, [r7, #0]
 808f1e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 808f1e4:	687b      	ldr	r3, [r7, #4]
 808f1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808f1e8:	b2db      	uxtb	r3, r3
 808f1ea:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 808f1ec:	68fb      	ldr	r3, [r7, #12]
 808f1ee:	085b      	lsrs	r3, r3, #1
 808f1f0:	b2db      	uxtb	r3, r3
 808f1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808f1f6:	b2da      	uxtb	r2, r3
 808f1f8:	683b      	ldr	r3, [r7, #0]
 808f1fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 808f1fe:	683b      	ldr	r3, [r7, #0]
 808f200:	2201      	movs	r2, #1
 808f202:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 808f206:	2300      	movs	r3, #0
}
 808f208:	4618      	mov	r0, r3
 808f20a:	3714      	adds	r7, #20
 808f20c:	46bd      	mov	sp, r7
 808f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 808f212:	4770      	bx	lr

0808f214 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 808f214:	b480      	push	{r7}
 808f216:	b083      	sub	sp, #12
 808f218:	af00      	add	r7, sp, #0
 808f21a:	6078      	str	r0, [r7, #4]
 808f21c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 808f21e:	687b      	ldr	r3, [r7, #4]
 808f220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 808f222:	683b      	ldr	r3, [r7, #0]
 808f224:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 808f226:	687b      	ldr	r3, [r7, #4]
 808f228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 808f22a:	683b      	ldr	r3, [r7, #0]
 808f22c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 808f22e:	687b      	ldr	r3, [r7, #4]
 808f230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 808f232:	683b      	ldr	r3, [r7, #0]
 808f234:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 808f236:	687b      	ldr	r3, [r7, #4]
 808f238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 808f23a:	683b      	ldr	r3, [r7, #0]
 808f23c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 808f23e:	687b      	ldr	r3, [r7, #4]
 808f240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 808f242:	683b      	ldr	r3, [r7, #0]
 808f244:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 808f246:	687b      	ldr	r3, [r7, #4]
 808f248:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 808f24a:	683b      	ldr	r3, [r7, #0]
 808f24c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 808f24e:	687b      	ldr	r3, [r7, #4]
 808f250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 808f252:	683b      	ldr	r3, [r7, #0]
 808f254:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 808f256:	687b      	ldr	r3, [r7, #4]
 808f258:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 808f25a:	683b      	ldr	r3, [r7, #0]
 808f25c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 808f25e:	2300      	movs	r3, #0
}
 808f260:	4618      	mov	r0, r3
 808f262:	370c      	adds	r7, #12
 808f264:	46bd      	mov	sp, r7
 808f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 808f26a:	4770      	bx	lr

0808f26c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 808f26c:	b5b0      	push	{r4, r5, r7, lr}
 808f26e:	b08e      	sub	sp, #56	; 0x38
 808f270:	af04      	add	r7, sp, #16
 808f272:	6078      	str	r0, [r7, #4]
 808f274:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f276:	2300      	movs	r3, #0
 808f278:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 808f27a:	687b      	ldr	r3, [r7, #4]
 808f27c:	2203      	movs	r2, #3
 808f27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 808f282:	687b      	ldr	r3, [r7, #4]
 808f284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808f286:	2b03      	cmp	r3, #3
 808f288:	d02e      	beq.n	808f2e8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 808f28a:	683b      	ldr	r3, [r7, #0]
 808f28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808f290:	d106      	bne.n	808f2a0 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808f292:	687b      	ldr	r3, [r7, #4]
 808f294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f296:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 808f29a:	687b      	ldr	r3, [r7, #4]
 808f29c:	639a      	str	r2, [r3, #56]	; 0x38
 808f29e:	e029      	b.n	808f2f4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 808f2a0:	683b      	ldr	r3, [r7, #0]
 808f2a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808f2a6:	d10a      	bne.n	808f2be <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 808f2a8:	6878      	ldr	r0, [r7, #4]
 808f2aa:	f000 f9cc 	bl	808f646 <SD_WideBus_Enable>
 808f2ae:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 808f2b0:	687b      	ldr	r3, [r7, #4]
 808f2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808f2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808f2b6:	431a      	orrs	r2, r3
 808f2b8:	687b      	ldr	r3, [r7, #4]
 808f2ba:	639a      	str	r2, [r3, #56]	; 0x38
 808f2bc:	e01a      	b.n	808f2f4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 808f2be:	683b      	ldr	r3, [r7, #0]
 808f2c0:	2b00      	cmp	r3, #0
 808f2c2:	d10a      	bne.n	808f2da <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 808f2c4:	6878      	ldr	r0, [r7, #4]
 808f2c6:	f000 fa0b 	bl	808f6e0 <SD_WideBus_Disable>
 808f2ca:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 808f2cc:	687b      	ldr	r3, [r7, #4]
 808f2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808f2d2:	431a      	orrs	r2, r3
 808f2d4:	687b      	ldr	r3, [r7, #4]
 808f2d6:	639a      	str	r2, [r3, #56]	; 0x38
 808f2d8:	e00c      	b.n	808f2f4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 808f2da:	687b      	ldr	r3, [r7, #4]
 808f2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f2de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 808f2e2:	687b      	ldr	r3, [r7, #4]
 808f2e4:	639a      	str	r2, [r3, #56]	; 0x38
 808f2e6:	e005      	b.n	808f2f4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808f2e8:	687b      	ldr	r3, [r7, #4]
 808f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f2ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 808f2f0:	687b      	ldr	r3, [r7, #4]
 808f2f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 808f2f4:	687b      	ldr	r3, [r7, #4]
 808f2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808f2f8:	2b00      	cmp	r3, #0
 808f2fa:	d00a      	beq.n	808f312 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808f2fc:	687b      	ldr	r3, [r7, #4]
 808f2fe:	681b      	ldr	r3, [r3, #0]
 808f300:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808f304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 808f306:	687b      	ldr	r3, [r7, #4]
 808f308:	2201      	movs	r2, #1
 808f30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 808f30e:	2301      	movs	r3, #1
 808f310:	e024      	b.n	808f35c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 808f312:	687b      	ldr	r3, [r7, #4]
 808f314:	685b      	ldr	r3, [r3, #4]
 808f316:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 808f318:	687b      	ldr	r3, [r7, #4]
 808f31a:	689b      	ldr	r3, [r3, #8]
 808f31c:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 808f31e:	687b      	ldr	r3, [r7, #4]
 808f320:	68db      	ldr	r3, [r3, #12]
 808f322:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 808f324:	683b      	ldr	r3, [r7, #0]
 808f326:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 808f328:	687b      	ldr	r3, [r7, #4]
 808f32a:	695b      	ldr	r3, [r3, #20]
 808f32c:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 808f32e:	687b      	ldr	r3, [r7, #4]
 808f330:	699b      	ldr	r3, [r3, #24]
 808f332:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 808f334:	687b      	ldr	r3, [r7, #4]
 808f336:	681d      	ldr	r5, [r3, #0]
 808f338:	466c      	mov	r4, sp
 808f33a:	f107 0318 	add.w	r3, r7, #24
 808f33e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 808f342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 808f346:	f107 030c 	add.w	r3, r7, #12
 808f34a:	cb0e      	ldmia	r3, {r1, r2, r3}
 808f34c:	4628      	mov	r0, r5
 808f34e:	f003 f829 	bl	80923a4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 808f352:	687b      	ldr	r3, [r7, #4]
 808f354:	2201      	movs	r2, #1
 808f356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 808f35a:	2300      	movs	r3, #0
}
 808f35c:	4618      	mov	r0, r3
 808f35e:	3728      	adds	r7, #40	; 0x28
 808f360:	46bd      	mov	sp, r7
 808f362:	bdb0      	pop	{r4, r5, r7, pc}

0808f364 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 808f364:	b5b0      	push	{r4, r5, r7, lr}
 808f366:	b094      	sub	sp, #80	; 0x50
 808f368:	af04      	add	r7, sp, #16
 808f36a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f36c:	2300      	movs	r3, #0
 808f36e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 808f370:	2301      	movs	r3, #1
 808f372:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 808f374:	687b      	ldr	r3, [r7, #4]
 808f376:	681b      	ldr	r3, [r3, #0]
 808f378:	4618      	mov	r0, r3
 808f37a:	f003 f86b 	bl	8092454 <SDMMC_GetPowerState>
 808f37e:	4603      	mov	r3, r0
 808f380:	2b00      	cmp	r3, #0
 808f382:	d102      	bne.n	808f38a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 808f384:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 808f388:	e0b1      	b.n	808f4ee <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 808f38a:	687b      	ldr	r3, [r7, #4]
 808f38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808f38e:	2b03      	cmp	r3, #3
 808f390:	d02f      	beq.n	808f3f2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 808f392:	687b      	ldr	r3, [r7, #4]
 808f394:	681b      	ldr	r3, [r3, #0]
 808f396:	4618      	mov	r0, r3
 808f398:	f003 fb1d 	bl	80929d6 <SDMMC_CmdSendCID>
 808f39c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 808f39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f3a0:	2b00      	cmp	r3, #0
 808f3a2:	d001      	beq.n	808f3a8 <SD_InitCard+0x44>
    {
      return errorstate;
 808f3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f3a6:	e0a2      	b.n	808f4ee <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 808f3a8:	687b      	ldr	r3, [r7, #4]
 808f3aa:	681b      	ldr	r3, [r3, #0]
 808f3ac:	2100      	movs	r1, #0
 808f3ae:	4618      	mov	r0, r3
 808f3b0:	f003 f895 	bl	80924de <SDMMC_GetResponse>
 808f3b4:	4602      	mov	r2, r0
 808f3b6:	687b      	ldr	r3, [r7, #4]
 808f3b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 808f3ba:	687b      	ldr	r3, [r7, #4]
 808f3bc:	681b      	ldr	r3, [r3, #0]
 808f3be:	2104      	movs	r1, #4
 808f3c0:	4618      	mov	r0, r3
 808f3c2:	f003 f88c 	bl	80924de <SDMMC_GetResponse>
 808f3c6:	4602      	mov	r2, r0
 808f3c8:	687b      	ldr	r3, [r7, #4]
 808f3ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 808f3cc:	687b      	ldr	r3, [r7, #4]
 808f3ce:	681b      	ldr	r3, [r3, #0]
 808f3d0:	2108      	movs	r1, #8
 808f3d2:	4618      	mov	r0, r3
 808f3d4:	f003 f883 	bl	80924de <SDMMC_GetResponse>
 808f3d8:	4602      	mov	r2, r0
 808f3da:	687b      	ldr	r3, [r7, #4]
 808f3dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 808f3de:	687b      	ldr	r3, [r7, #4]
 808f3e0:	681b      	ldr	r3, [r3, #0]
 808f3e2:	210c      	movs	r1, #12
 808f3e4:	4618      	mov	r0, r3
 808f3e6:	f003 f87a 	bl	80924de <SDMMC_GetResponse>
 808f3ea:	4602      	mov	r2, r0
 808f3ec:	687b      	ldr	r3, [r7, #4]
 808f3ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 808f3f2:	687b      	ldr	r3, [r7, #4]
 808f3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808f3f6:	2b03      	cmp	r3, #3
 808f3f8:	d00d      	beq.n	808f416 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 808f3fa:	687b      	ldr	r3, [r7, #4]
 808f3fc:	681b      	ldr	r3, [r3, #0]
 808f3fe:	f107 020e 	add.w	r2, r7, #14
 808f402:	4611      	mov	r1, r2
 808f404:	4618      	mov	r0, r3
 808f406:	f003 fb27 	bl	8092a58 <SDMMC_CmdSetRelAdd>
 808f40a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 808f40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f40e:	2b00      	cmp	r3, #0
 808f410:	d001      	beq.n	808f416 <SD_InitCard+0xb2>
    {
      return errorstate;
 808f412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f414:	e06b      	b.n	808f4ee <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 808f416:	687b      	ldr	r3, [r7, #4]
 808f418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808f41a:	2b03      	cmp	r3, #3
 808f41c:	d036      	beq.n	808f48c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 808f41e:	89fb      	ldrh	r3, [r7, #14]
 808f420:	461a      	mov	r2, r3
 808f422:	687b      	ldr	r3, [r7, #4]
 808f424:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 808f426:	687b      	ldr	r3, [r7, #4]
 808f428:	681a      	ldr	r2, [r3, #0]
 808f42a:	687b      	ldr	r3, [r7, #4]
 808f42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808f42e:	041b      	lsls	r3, r3, #16
 808f430:	4619      	mov	r1, r3
 808f432:	4610      	mov	r0, r2
 808f434:	f003 faef 	bl	8092a16 <SDMMC_CmdSendCSD>
 808f438:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 808f43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f43c:	2b00      	cmp	r3, #0
 808f43e:	d001      	beq.n	808f444 <SD_InitCard+0xe0>
    {
      return errorstate;
 808f440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f442:	e054      	b.n	808f4ee <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 808f444:	687b      	ldr	r3, [r7, #4]
 808f446:	681b      	ldr	r3, [r3, #0]
 808f448:	2100      	movs	r1, #0
 808f44a:	4618      	mov	r0, r3
 808f44c:	f003 f847 	bl	80924de <SDMMC_GetResponse>
 808f450:	4602      	mov	r2, r0
 808f452:	687b      	ldr	r3, [r7, #4]
 808f454:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 808f456:	687b      	ldr	r3, [r7, #4]
 808f458:	681b      	ldr	r3, [r3, #0]
 808f45a:	2104      	movs	r1, #4
 808f45c:	4618      	mov	r0, r3
 808f45e:	f003 f83e 	bl	80924de <SDMMC_GetResponse>
 808f462:	4602      	mov	r2, r0
 808f464:	687b      	ldr	r3, [r7, #4]
 808f466:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 808f468:	687b      	ldr	r3, [r7, #4]
 808f46a:	681b      	ldr	r3, [r3, #0]
 808f46c:	2108      	movs	r1, #8
 808f46e:	4618      	mov	r0, r3
 808f470:	f003 f835 	bl	80924de <SDMMC_GetResponse>
 808f474:	4602      	mov	r2, r0
 808f476:	687b      	ldr	r3, [r7, #4]
 808f478:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 808f47a:	687b      	ldr	r3, [r7, #4]
 808f47c:	681b      	ldr	r3, [r3, #0]
 808f47e:	210c      	movs	r1, #12
 808f480:	4618      	mov	r0, r3
 808f482:	f003 f82c 	bl	80924de <SDMMC_GetResponse>
 808f486:	4602      	mov	r2, r0
 808f488:	687b      	ldr	r3, [r7, #4]
 808f48a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 808f48c:	687b      	ldr	r3, [r7, #4]
 808f48e:	681b      	ldr	r3, [r3, #0]
 808f490:	2104      	movs	r1, #4
 808f492:	4618      	mov	r0, r3
 808f494:	f003 f823 	bl	80924de <SDMMC_GetResponse>
 808f498:	4603      	mov	r3, r0
 808f49a:	0d1a      	lsrs	r2, r3, #20
 808f49c:	687b      	ldr	r3, [r7, #4]
 808f49e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 808f4a0:	f107 0310 	add.w	r3, r7, #16
 808f4a4:	4619      	mov	r1, r3
 808f4a6:	6878      	ldr	r0, [r7, #4]
 808f4a8:	f7ff fc8c 	bl	808edc4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 808f4ac:	687b      	ldr	r3, [r7, #4]
 808f4ae:	6819      	ldr	r1, [r3, #0]
 808f4b0:	687b      	ldr	r3, [r7, #4]
 808f4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808f4b4:	041b      	lsls	r3, r3, #16
 808f4b6:	f04f 0400 	mov.w	r4, #0
 808f4ba:	461a      	mov	r2, r3
 808f4bc:	4623      	mov	r3, r4
 808f4be:	4608      	mov	r0, r1
 808f4c0:	f003 f992 	bl	80927e8 <SDMMC_CmdSelDesel>
 808f4c4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 808f4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f4c8:	2b00      	cmp	r3, #0
 808f4ca:	d001      	beq.n	808f4d0 <SD_InitCard+0x16c>
  {
    return errorstate;
 808f4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808f4ce:	e00e      	b.n	808f4ee <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 808f4d0:	687b      	ldr	r3, [r7, #4]
 808f4d2:	681d      	ldr	r5, [r3, #0]
 808f4d4:	687b      	ldr	r3, [r7, #4]
 808f4d6:	466c      	mov	r4, sp
 808f4d8:	f103 0210 	add.w	r2, r3, #16
 808f4dc:	ca07      	ldmia	r2, {r0, r1, r2}
 808f4de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 808f4e2:	3304      	adds	r3, #4
 808f4e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 808f4e6:	4628      	mov	r0, r5
 808f4e8:	f002 ff5c 	bl	80923a4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 808f4ec:	2300      	movs	r3, #0
}
 808f4ee:	4618      	mov	r0, r3
 808f4f0:	3740      	adds	r7, #64	; 0x40
 808f4f2:	46bd      	mov	sp, r7
 808f4f4:	bdb0      	pop	{r4, r5, r7, pc}

0808f4f6 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 808f4f6:	b580      	push	{r7, lr}
 808f4f8:	b086      	sub	sp, #24
 808f4fa:	af00      	add	r7, sp, #0
 808f4fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 808f4fe:	2300      	movs	r3, #0
 808f500:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 808f502:	2300      	movs	r3, #0
 808f504:	617b      	str	r3, [r7, #20]
 808f506:	2300      	movs	r3, #0
 808f508:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f50a:	2300      	movs	r3, #0
 808f50c:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 808f50e:	687b      	ldr	r3, [r7, #4]
 808f510:	681b      	ldr	r3, [r3, #0]
 808f512:	4618      	mov	r0, r3
 808f514:	f003 f98d 	bl	8092832 <SDMMC_CmdGoIdleState>
 808f518:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 808f51a:	68fb      	ldr	r3, [r7, #12]
 808f51c:	2b00      	cmp	r3, #0
 808f51e:	d001      	beq.n	808f524 <SD_PowerON+0x2e>
  {
    return errorstate;
 808f520:	68fb      	ldr	r3, [r7, #12]
 808f522:	e08c      	b.n	808f63e <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 808f524:	687b      	ldr	r3, [r7, #4]
 808f526:	681b      	ldr	r3, [r3, #0]
 808f528:	4618      	mov	r0, r3
 808f52a:	f003 f9a2 	bl	8092872 <SDMMC_CmdOperCond>
 808f52e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 808f530:	68fb      	ldr	r3, [r7, #12]
 808f532:	2b00      	cmp	r3, #0
 808f534:	d03d      	beq.n	808f5b2 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 808f536:	687b      	ldr	r3, [r7, #4]
 808f538:	2200      	movs	r2, #0
 808f53a:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 808f53c:	e032      	b.n	808f5a4 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 808f53e:	68bb      	ldr	r3, [r7, #8]
 808f540:	1c5a      	adds	r2, r3, #1
 808f542:	60ba      	str	r2, [r7, #8]
 808f544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808f548:	4293      	cmp	r3, r2
 808f54a:	d102      	bne.n	808f552 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 808f54c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808f550:	e075      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 808f552:	687b      	ldr	r3, [r7, #4]
 808f554:	681b      	ldr	r3, [r3, #0]
 808f556:	2100      	movs	r1, #0
 808f558:	4618      	mov	r0, r3
 808f55a:	f003 f9ab 	bl	80928b4 <SDMMC_CmdAppCommand>
 808f55e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 808f560:	68fb      	ldr	r3, [r7, #12]
 808f562:	2b00      	cmp	r3, #0
 808f564:	d002      	beq.n	808f56c <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808f566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808f56a:	e068      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 808f56c:	687b      	ldr	r3, [r7, #4]
 808f56e:	681b      	ldr	r3, [r3, #0]
 808f570:	2100      	movs	r1, #0
 808f572:	4618      	mov	r0, r3
 808f574:	f003 f9c2 	bl	80928fc <SDMMC_CmdAppOperCommand>
 808f578:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 808f57a:	68fb      	ldr	r3, [r7, #12]
 808f57c:	2b00      	cmp	r3, #0
 808f57e:	d002      	beq.n	808f586 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808f580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808f584:	e05b      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 808f586:	687b      	ldr	r3, [r7, #4]
 808f588:	681b      	ldr	r3, [r3, #0]
 808f58a:	2100      	movs	r1, #0
 808f58c:	4618      	mov	r0, r3
 808f58e:	f002 ffa6 	bl	80924de <SDMMC_GetResponse>
 808f592:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 808f594:	697b      	ldr	r3, [r7, #20]
 808f596:	0fdb      	lsrs	r3, r3, #31
 808f598:	2b01      	cmp	r3, #1
 808f59a:	bf0c      	ite	eq
 808f59c:	2301      	moveq	r3, #1
 808f59e:	2300      	movne	r3, #0
 808f5a0:	b2db      	uxtb	r3, r3
 808f5a2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 808f5a4:	693b      	ldr	r3, [r7, #16]
 808f5a6:	2b00      	cmp	r3, #0
 808f5a8:	d0c9      	beq.n	808f53e <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 808f5aa:	687b      	ldr	r3, [r7, #4]
 808f5ac:	2200      	movs	r2, #0
 808f5ae:	645a      	str	r2, [r3, #68]	; 0x44
 808f5b0:	e044      	b.n	808f63c <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 808f5b2:	687b      	ldr	r3, [r7, #4]
 808f5b4:	2201      	movs	r2, #1
 808f5b6:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 808f5b8:	e031      	b.n	808f61e <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 808f5ba:	68bb      	ldr	r3, [r7, #8]
 808f5bc:	1c5a      	adds	r2, r3, #1
 808f5be:	60ba      	str	r2, [r7, #8]
 808f5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808f5c4:	4293      	cmp	r3, r2
 808f5c6:	d102      	bne.n	808f5ce <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 808f5c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 808f5cc:	e037      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 808f5ce:	687b      	ldr	r3, [r7, #4]
 808f5d0:	681b      	ldr	r3, [r3, #0]
 808f5d2:	2100      	movs	r1, #0
 808f5d4:	4618      	mov	r0, r3
 808f5d6:	f003 f96d 	bl	80928b4 <SDMMC_CmdAppCommand>
 808f5da:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 808f5dc:	68fb      	ldr	r3, [r7, #12]
 808f5de:	2b00      	cmp	r3, #0
 808f5e0:	d001      	beq.n	808f5e6 <SD_PowerON+0xf0>
      {
        return errorstate;
 808f5e2:	68fb      	ldr	r3, [r7, #12]
 808f5e4:	e02b      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 808f5e6:	687b      	ldr	r3, [r7, #4]
 808f5e8:	681b      	ldr	r3, [r3, #0]
 808f5ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 808f5ee:	4618      	mov	r0, r3
 808f5f0:	f003 f984 	bl	80928fc <SDMMC_CmdAppOperCommand>
 808f5f4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 808f5f6:	68fb      	ldr	r3, [r7, #12]
 808f5f8:	2b00      	cmp	r3, #0
 808f5fa:	d001      	beq.n	808f600 <SD_PowerON+0x10a>
      {
        return errorstate;
 808f5fc:	68fb      	ldr	r3, [r7, #12]
 808f5fe:	e01e      	b.n	808f63e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 808f600:	687b      	ldr	r3, [r7, #4]
 808f602:	681b      	ldr	r3, [r3, #0]
 808f604:	2100      	movs	r1, #0
 808f606:	4618      	mov	r0, r3
 808f608:	f002 ff69 	bl	80924de <SDMMC_GetResponse>
 808f60c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 808f60e:	697b      	ldr	r3, [r7, #20]
 808f610:	0fdb      	lsrs	r3, r3, #31
 808f612:	2b01      	cmp	r3, #1
 808f614:	bf0c      	ite	eq
 808f616:	2301      	moveq	r3, #1
 808f618:	2300      	movne	r3, #0
 808f61a:	b2db      	uxtb	r3, r3
 808f61c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 808f61e:	693b      	ldr	r3, [r7, #16]
 808f620:	2b00      	cmp	r3, #0
 808f622:	d0ca      	beq.n	808f5ba <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 808f624:	697b      	ldr	r3, [r7, #20]
 808f626:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 808f62a:	2b00      	cmp	r3, #0
 808f62c:	d003      	beq.n	808f636 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 808f62e:	687b      	ldr	r3, [r7, #4]
 808f630:	2201      	movs	r2, #1
 808f632:	645a      	str	r2, [r3, #68]	; 0x44
 808f634:	e002      	b.n	808f63c <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 808f636:	687b      	ldr	r3, [r7, #4]
 808f638:	2200      	movs	r2, #0
 808f63a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 808f63c:	2300      	movs	r3, #0
}
 808f63e:	4618      	mov	r0, r3
 808f640:	3718      	adds	r7, #24
 808f642:	46bd      	mov	sp, r7
 808f644:	bd80      	pop	{r7, pc}

0808f646 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 808f646:	b580      	push	{r7, lr}
 808f648:	b086      	sub	sp, #24
 808f64a:	af00      	add	r7, sp, #0
 808f64c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 808f64e:	2300      	movs	r3, #0
 808f650:	60fb      	str	r3, [r7, #12]
 808f652:	2300      	movs	r3, #0
 808f654:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f656:	2300      	movs	r3, #0
 808f658:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 808f65a:	687b      	ldr	r3, [r7, #4]
 808f65c:	681b      	ldr	r3, [r3, #0]
 808f65e:	2100      	movs	r1, #0
 808f660:	4618      	mov	r0, r3
 808f662:	f002 ff3c 	bl	80924de <SDMMC_GetResponse>
 808f666:	4603      	mov	r3, r0
 808f668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808f66c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 808f670:	d102      	bne.n	808f678 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 808f672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808f676:	e02f      	b.n	808f6d8 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 808f678:	f107 030c 	add.w	r3, r7, #12
 808f67c:	4619      	mov	r1, r3
 808f67e:	6878      	ldr	r0, [r7, #4]
 808f680:	f000 f87b 	bl	808f77a <SD_FindSCR>
 808f684:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 808f686:	697b      	ldr	r3, [r7, #20]
 808f688:	2b00      	cmp	r3, #0
 808f68a:	d001      	beq.n	808f690 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 808f68c:	697b      	ldr	r3, [r7, #20]
 808f68e:	e023      	b.n	808f6d8 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 808f690:	693b      	ldr	r3, [r7, #16]
 808f692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 808f696:	2b00      	cmp	r3, #0
 808f698:	d01c      	beq.n	808f6d4 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 808f69a:	687b      	ldr	r3, [r7, #4]
 808f69c:	681a      	ldr	r2, [r3, #0]
 808f69e:	687b      	ldr	r3, [r7, #4]
 808f6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808f6a2:	041b      	lsls	r3, r3, #16
 808f6a4:	4619      	mov	r1, r3
 808f6a6:	4610      	mov	r0, r2
 808f6a8:	f003 f904 	bl	80928b4 <SDMMC_CmdAppCommand>
 808f6ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 808f6ae:	697b      	ldr	r3, [r7, #20]
 808f6b0:	2b00      	cmp	r3, #0
 808f6b2:	d001      	beq.n	808f6b8 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 808f6b4:	697b      	ldr	r3, [r7, #20]
 808f6b6:	e00f      	b.n	808f6d8 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 808f6b8:	687b      	ldr	r3, [r7, #4]
 808f6ba:	681b      	ldr	r3, [r3, #0]
 808f6bc:	2102      	movs	r1, #2
 808f6be:	4618      	mov	r0, r3
 808f6c0:	f003 f942 	bl	8092948 <SDMMC_CmdBusWidth>
 808f6c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 808f6c6:	697b      	ldr	r3, [r7, #20]
 808f6c8:	2b00      	cmp	r3, #0
 808f6ca:	d001      	beq.n	808f6d0 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 808f6cc:	697b      	ldr	r3, [r7, #20]
 808f6ce:	e003      	b.n	808f6d8 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 808f6d0:	2300      	movs	r3, #0
 808f6d2:	e001      	b.n	808f6d8 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 808f6d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 808f6d8:	4618      	mov	r0, r3
 808f6da:	3718      	adds	r7, #24
 808f6dc:	46bd      	mov	sp, r7
 808f6de:	bd80      	pop	{r7, pc}

0808f6e0 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 808f6e0:	b580      	push	{r7, lr}
 808f6e2:	b086      	sub	sp, #24
 808f6e4:	af00      	add	r7, sp, #0
 808f6e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 808f6e8:	2300      	movs	r3, #0
 808f6ea:	60fb      	str	r3, [r7, #12]
 808f6ec:	2300      	movs	r3, #0
 808f6ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f6f0:	2300      	movs	r3, #0
 808f6f2:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 808f6f4:	687b      	ldr	r3, [r7, #4]
 808f6f6:	681b      	ldr	r3, [r3, #0]
 808f6f8:	2100      	movs	r1, #0
 808f6fa:	4618      	mov	r0, r3
 808f6fc:	f002 feef 	bl	80924de <SDMMC_GetResponse>
 808f700:	4603      	mov	r3, r0
 808f702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808f706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 808f70a:	d102      	bne.n	808f712 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 808f70c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808f710:	e02f      	b.n	808f772 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 808f712:	f107 030c 	add.w	r3, r7, #12
 808f716:	4619      	mov	r1, r3
 808f718:	6878      	ldr	r0, [r7, #4]
 808f71a:	f000 f82e 	bl	808f77a <SD_FindSCR>
 808f71e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 808f720:	697b      	ldr	r3, [r7, #20]
 808f722:	2b00      	cmp	r3, #0
 808f724:	d001      	beq.n	808f72a <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 808f726:	697b      	ldr	r3, [r7, #20]
 808f728:	e023      	b.n	808f772 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 808f72a:	693b      	ldr	r3, [r7, #16]
 808f72c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808f730:	2b00      	cmp	r3, #0
 808f732:	d01c      	beq.n	808f76e <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 808f734:	687b      	ldr	r3, [r7, #4]
 808f736:	681a      	ldr	r2, [r3, #0]
 808f738:	687b      	ldr	r3, [r7, #4]
 808f73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808f73c:	041b      	lsls	r3, r3, #16
 808f73e:	4619      	mov	r1, r3
 808f740:	4610      	mov	r0, r2
 808f742:	f003 f8b7 	bl	80928b4 <SDMMC_CmdAppCommand>
 808f746:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 808f748:	697b      	ldr	r3, [r7, #20]
 808f74a:	2b00      	cmp	r3, #0
 808f74c:	d001      	beq.n	808f752 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 808f74e:	697b      	ldr	r3, [r7, #20]
 808f750:	e00f      	b.n	808f772 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 808f752:	687b      	ldr	r3, [r7, #4]
 808f754:	681b      	ldr	r3, [r3, #0]
 808f756:	2100      	movs	r1, #0
 808f758:	4618      	mov	r0, r3
 808f75a:	f003 f8f5 	bl	8092948 <SDMMC_CmdBusWidth>
 808f75e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 808f760:	697b      	ldr	r3, [r7, #20]
 808f762:	2b00      	cmp	r3, #0
 808f764:	d001      	beq.n	808f76a <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 808f766:	697b      	ldr	r3, [r7, #20]
 808f768:	e003      	b.n	808f772 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 808f76a:	2300      	movs	r3, #0
 808f76c:	e001      	b.n	808f772 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 808f76e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 808f772:	4618      	mov	r0, r3
 808f774:	3718      	adds	r7, #24
 808f776:	46bd      	mov	sp, r7
 808f778:	bd80      	pop	{r7, pc}

0808f77a <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 808f77a:	b590      	push	{r4, r7, lr}
 808f77c:	b08f      	sub	sp, #60	; 0x3c
 808f77e:	af00      	add	r7, sp, #0
 808f780:	6078      	str	r0, [r7, #4]
 808f782:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 808f784:	2300      	movs	r3, #0
 808f786:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 808f788:	f7f9 fcea 	bl	8089160 <HAL_GetTick>
 808f78c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 808f78e:	2300      	movs	r3, #0
 808f790:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 808f792:	2300      	movs	r3, #0
 808f794:	60fb      	str	r3, [r7, #12]
 808f796:	2300      	movs	r3, #0
 808f798:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 808f79a:	687b      	ldr	r3, [r7, #4]
 808f79c:	681b      	ldr	r3, [r3, #0]
 808f79e:	2108      	movs	r1, #8
 808f7a0:	4618      	mov	r0, r3
 808f7a2:	f002 fedd 	bl	8092560 <SDMMC_CmdBlockLength>
 808f7a6:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 808f7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f7aa:	2b00      	cmp	r3, #0
 808f7ac:	d001      	beq.n	808f7b2 <SD_FindSCR+0x38>
  {
    return errorstate;
 808f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f7b0:	e0a8      	b.n	808f904 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 808f7b2:	687b      	ldr	r3, [r7, #4]
 808f7b4:	681a      	ldr	r2, [r3, #0]
 808f7b6:	687b      	ldr	r3, [r7, #4]
 808f7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808f7ba:	041b      	lsls	r3, r3, #16
 808f7bc:	4619      	mov	r1, r3
 808f7be:	4610      	mov	r0, r2
 808f7c0:	f003 f878 	bl	80928b4 <SDMMC_CmdAppCommand>
 808f7c4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 808f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f7c8:	2b00      	cmp	r3, #0
 808f7ca:	d001      	beq.n	808f7d0 <SD_FindSCR+0x56>
  {
    return errorstate;
 808f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f7ce:	e099      	b.n	808f904 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 808f7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808f7d4:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 808f7d6:	2308      	movs	r3, #8
 808f7d8:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 808f7da:	2330      	movs	r3, #48	; 0x30
 808f7dc:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 808f7de:	2302      	movs	r3, #2
 808f7e0:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 808f7e2:	2300      	movs	r3, #0
 808f7e4:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 808f7e6:	2301      	movs	r3, #1
 808f7e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 808f7ea:	687b      	ldr	r3, [r7, #4]
 808f7ec:	681b      	ldr	r3, [r3, #0]
 808f7ee:	f107 0214 	add.w	r2, r7, #20
 808f7f2:	4611      	mov	r1, r2
 808f7f4:	4618      	mov	r0, r3
 808f7f6:	f002 fe87 	bl	8092508 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 808f7fa:	687b      	ldr	r3, [r7, #4]
 808f7fc:	681b      	ldr	r3, [r3, #0]
 808f7fe:	4618      	mov	r0, r3
 808f800:	f003 f8c6 	bl	8092990 <SDMMC_CmdSendSCR>
 808f804:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 808f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f808:	2b00      	cmp	r3, #0
 808f80a:	d022      	beq.n	808f852 <SD_FindSCR+0xd8>
  {
    return errorstate;
 808f80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808f80e:	e079      	b.n	808f904 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 808f810:	687b      	ldr	r3, [r7, #4]
 808f812:	681b      	ldr	r3, [r3, #0]
 808f814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808f816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808f81a:	2b00      	cmp	r3, #0
 808f81c:	d00e      	beq.n	808f83c <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 808f81e:	687b      	ldr	r3, [r7, #4]
 808f820:	6819      	ldr	r1, [r3, #0]
 808f822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808f824:	009b      	lsls	r3, r3, #2
 808f826:	f107 020c 	add.w	r2, r7, #12
 808f82a:	18d4      	adds	r4, r2, r3
 808f82c:	4608      	mov	r0, r1
 808f82e:	f002 fde5 	bl	80923fc <SDMMC_ReadFIFO>
 808f832:	4603      	mov	r3, r0
 808f834:	6023      	str	r3, [r4, #0]
      index++;
 808f836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808f838:	3301      	adds	r3, #1
 808f83a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 808f83c:	f7f9 fc90 	bl	8089160 <HAL_GetTick>
 808f840:	4602      	mov	r2, r0
 808f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808f844:	1ad3      	subs	r3, r2, r3
 808f846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808f84a:	d102      	bne.n	808f852 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 808f84c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 808f850:	e058      	b.n	808f904 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 808f852:	687b      	ldr	r3, [r7, #4]
 808f854:	681b      	ldr	r3, [r3, #0]
 808f856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 808f858:	f240 432a 	movw	r3, #1066	; 0x42a
 808f85c:	4013      	ands	r3, r2
 808f85e:	2b00      	cmp	r3, #0
 808f860:	d0d6      	beq.n	808f810 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 808f862:	687b      	ldr	r3, [r7, #4]
 808f864:	681b      	ldr	r3, [r3, #0]
 808f866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808f868:	f003 0308 	and.w	r3, r3, #8
 808f86c:	2b00      	cmp	r3, #0
 808f86e:	d005      	beq.n	808f87c <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 808f870:	687b      	ldr	r3, [r7, #4]
 808f872:	681b      	ldr	r3, [r3, #0]
 808f874:	2208      	movs	r2, #8
 808f876:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 808f878:	2308      	movs	r3, #8
 808f87a:	e043      	b.n	808f904 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 808f87c:	687b      	ldr	r3, [r7, #4]
 808f87e:	681b      	ldr	r3, [r3, #0]
 808f880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808f882:	f003 0302 	and.w	r3, r3, #2
 808f886:	2b00      	cmp	r3, #0
 808f888:	d005      	beq.n	808f896 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 808f88a:	687b      	ldr	r3, [r7, #4]
 808f88c:	681b      	ldr	r3, [r3, #0]
 808f88e:	2202      	movs	r2, #2
 808f890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 808f892:	2302      	movs	r3, #2
 808f894:	e036      	b.n	808f904 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 808f896:	687b      	ldr	r3, [r7, #4]
 808f898:	681b      	ldr	r3, [r3, #0]
 808f89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808f89c:	f003 0320 	and.w	r3, r3, #32
 808f8a0:	2b00      	cmp	r3, #0
 808f8a2:	d005      	beq.n	808f8b0 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 808f8a4:	687b      	ldr	r3, [r7, #4]
 808f8a6:	681b      	ldr	r3, [r3, #0]
 808f8a8:	2220      	movs	r2, #32
 808f8aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 808f8ac:	2320      	movs	r3, #32
 808f8ae:	e029      	b.n	808f904 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 808f8b0:	687b      	ldr	r3, [r7, #4]
 808f8b2:	681b      	ldr	r3, [r3, #0]
 808f8b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 808f8b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 808f8ba:	68fb      	ldr	r3, [r7, #12]
 808f8bc:	061a      	lsls	r2, r3, #24
 808f8be:	68fb      	ldr	r3, [r7, #12]
 808f8c0:	021b      	lsls	r3, r3, #8
 808f8c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 808f8c6:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 808f8c8:	68fb      	ldr	r3, [r7, #12]
 808f8ca:	0a1b      	lsrs	r3, r3, #8
 808f8cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 808f8d0:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 808f8d4:	68fb      	ldr	r3, [r7, #12]
 808f8d6:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 808f8d8:	683b      	ldr	r3, [r7, #0]
 808f8da:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 808f8dc:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 808f8de:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 808f8e0:	693b      	ldr	r3, [r7, #16]
 808f8e2:	061a      	lsls	r2, r3, #24
 808f8e4:	693b      	ldr	r3, [r7, #16]
 808f8e6:	021b      	lsls	r3, r3, #8
 808f8e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 808f8ec:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 808f8ee:	693b      	ldr	r3, [r7, #16]
 808f8f0:	0a1b      	lsrs	r3, r3, #8
 808f8f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 808f8f6:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 808f8f8:	693b      	ldr	r3, [r7, #16]
 808f8fa:	0e1b      	lsrs	r3, r3, #24
 808f8fc:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 808f8fe:	683b      	ldr	r3, [r7, #0]
 808f900:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 808f902:	2300      	movs	r3, #0
}
 808f904:	4618      	mov	r0, r3
 808f906:	373c      	adds	r7, #60	; 0x3c
 808f908:	46bd      	mov	sp, r7
 808f90a:	bd90      	pop	{r4, r7, pc}

0808f90c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 808f90c:	b580      	push	{r7, lr}
 808f90e:	b082      	sub	sp, #8
 808f910:	af00      	add	r7, sp, #0
 808f912:	6078      	str	r0, [r7, #4]
 808f914:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 808f916:	687b      	ldr	r3, [r7, #4]
 808f918:	2b00      	cmp	r3, #0
 808f91a:	d101      	bne.n	808f920 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 808f91c:	2301      	movs	r3, #1
 808f91e:	e025      	b.n	808f96c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 808f920:	687b      	ldr	r3, [r7, #4]
 808f922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808f926:	b2db      	uxtb	r3, r3
 808f928:	2b00      	cmp	r3, #0
 808f92a:	d106      	bne.n	808f93a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 808f92c:	687b      	ldr	r3, [r7, #4]
 808f92e:	2200      	movs	r2, #0
 808f930:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 808f934:	6878      	ldr	r0, [r7, #4]
 808f936:	f000 f81d 	bl	808f974 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 808f93a:	687b      	ldr	r3, [r7, #4]
 808f93c:	2202      	movs	r2, #2
 808f93e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 808f942:	687b      	ldr	r3, [r7, #4]
 808f944:	681a      	ldr	r2, [r3, #0]
 808f946:	687b      	ldr	r3, [r7, #4]
 808f948:	3304      	adds	r3, #4
 808f94a:	4619      	mov	r1, r3
 808f94c:	4610      	mov	r0, r2
 808f94e:	f002 fc03 	bl	8092158 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 808f952:	687b      	ldr	r3, [r7, #4]
 808f954:	6818      	ldr	r0, [r3, #0]
 808f956:	687b      	ldr	r3, [r7, #4]
 808f958:	685b      	ldr	r3, [r3, #4]
 808f95a:	461a      	mov	r2, r3
 808f95c:	6839      	ldr	r1, [r7, #0]
 808f95e:	f002 fc6d 	bl	809223c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 808f962:	687b      	ldr	r3, [r7, #4]
 808f964:	2201      	movs	r2, #1
 808f966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 808f96a:	2300      	movs	r3, #0
}
 808f96c:	4618      	mov	r0, r3
 808f96e:	3708      	adds	r7, #8
 808f970:	46bd      	mov	sp, r7
 808f972:	bd80      	pop	{r7, pc}

0808f974 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 808f974:	b480      	push	{r7}
 808f976:	b083      	sub	sp, #12
 808f978:	af00      	add	r7, sp, #0
 808f97a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 808f97c:	bf00      	nop
 808f97e:	370c      	adds	r7, #12
 808f980:	46bd      	mov	sp, r7
 808f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 808f986:	4770      	bx	lr

0808f988 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 808f988:	b480      	push	{r7}
 808f98a:	b087      	sub	sp, #28
 808f98c:	af00      	add	r7, sp, #0
 808f98e:	60f8      	str	r0, [r7, #12]
 808f990:	60b9      	str	r1, [r7, #8]
 808f992:	607a      	str	r2, [r7, #4]
 808f994:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 808f996:	68bb      	ldr	r3, [r7, #8]
 808f998:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 808f99a:	68fb      	ldr	r3, [r7, #12]
 808f99c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808f9a0:	2b01      	cmp	r3, #1
 808f9a2:	d101      	bne.n	808f9a8 <HAL_SDRAM_Read_32b+0x20>
 808f9a4:	2302      	movs	r3, #2
 808f9a6:	e028      	b.n	808f9fa <HAL_SDRAM_Read_32b+0x72>
 808f9a8:	68fb      	ldr	r3, [r7, #12]
 808f9aa:	2201      	movs	r2, #1
 808f9ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 808f9b0:	68fb      	ldr	r3, [r7, #12]
 808f9b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808f9b6:	b2db      	uxtb	r3, r3
 808f9b8:	2b02      	cmp	r3, #2
 808f9ba:	d101      	bne.n	808f9c0 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 808f9bc:	2302      	movs	r3, #2
 808f9be:	e01c      	b.n	808f9fa <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 808f9c0:	68fb      	ldr	r3, [r7, #12]
 808f9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808f9c6:	b2db      	uxtb	r3, r3
 808f9c8:	2b05      	cmp	r3, #5
 808f9ca:	d10e      	bne.n	808f9ea <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 808f9cc:	2301      	movs	r3, #1
 808f9ce:	e014      	b.n	808f9fa <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 808f9d0:	697b      	ldr	r3, [r7, #20]
 808f9d2:	681a      	ldr	r2, [r3, #0]
 808f9d4:	687b      	ldr	r3, [r7, #4]
 808f9d6:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 808f9d8:	687b      	ldr	r3, [r7, #4]
 808f9da:	3304      	adds	r3, #4
 808f9dc:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 808f9de:	697b      	ldr	r3, [r7, #20]
 808f9e0:	3304      	adds	r3, #4
 808f9e2:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 808f9e4:	683b      	ldr	r3, [r7, #0]
 808f9e6:	3b01      	subs	r3, #1
 808f9e8:	603b      	str	r3, [r7, #0]
 808f9ea:	683b      	ldr	r3, [r7, #0]
 808f9ec:	2b00      	cmp	r3, #0
 808f9ee:	d1ef      	bne.n	808f9d0 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 808f9f0:	68fb      	ldr	r3, [r7, #12]
 808f9f2:	2200      	movs	r2, #0
 808f9f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 808f9f8:	2300      	movs	r3, #0
}
 808f9fa:	4618      	mov	r0, r3
 808f9fc:	371c      	adds	r7, #28
 808f9fe:	46bd      	mov	sp, r7
 808fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 808fa04:	4770      	bx	lr

0808fa06 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 808fa06:	b480      	push	{r7}
 808fa08:	b087      	sub	sp, #28
 808fa0a:	af00      	add	r7, sp, #0
 808fa0c:	60f8      	str	r0, [r7, #12]
 808fa0e:	60b9      	str	r1, [r7, #8]
 808fa10:	607a      	str	r2, [r7, #4]
 808fa12:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 808fa14:	68bb      	ldr	r3, [r7, #8]
 808fa16:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 808fa18:	2300      	movs	r3, #0
 808fa1a:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 808fa1c:	68fb      	ldr	r3, [r7, #12]
 808fa1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808fa22:	2b01      	cmp	r3, #1
 808fa24:	d101      	bne.n	808fa2a <HAL_SDRAM_Write_32b+0x24>
 808fa26:	2302      	movs	r3, #2
 808fa28:	e02a      	b.n	808fa80 <HAL_SDRAM_Write_32b+0x7a>
 808fa2a:	68fb      	ldr	r3, [r7, #12]
 808fa2c:	2201      	movs	r2, #1
 808fa2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 808fa32:	68fb      	ldr	r3, [r7, #12]
 808fa34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808fa38:	b2db      	uxtb	r3, r3
 808fa3a:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 808fa3c:	693b      	ldr	r3, [r7, #16]
 808fa3e:	2b02      	cmp	r3, #2
 808fa40:	d101      	bne.n	808fa46 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 808fa42:	2302      	movs	r3, #2
 808fa44:	e01c      	b.n	808fa80 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 808fa46:	693b      	ldr	r3, [r7, #16]
 808fa48:	2b05      	cmp	r3, #5
 808fa4a:	d002      	beq.n	808fa52 <HAL_SDRAM_Write_32b+0x4c>
 808fa4c:	693b      	ldr	r3, [r7, #16]
 808fa4e:	2b04      	cmp	r3, #4
 808fa50:	d10e      	bne.n	808fa70 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 808fa52:	2301      	movs	r3, #1
 808fa54:	e014      	b.n	808fa80 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 808fa56:	687b      	ldr	r3, [r7, #4]
 808fa58:	681a      	ldr	r2, [r3, #0]
 808fa5a:	697b      	ldr	r3, [r7, #20]
 808fa5c:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 808fa5e:	687b      	ldr	r3, [r7, #4]
 808fa60:	3304      	adds	r3, #4
 808fa62:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 808fa64:	697b      	ldr	r3, [r7, #20]
 808fa66:	3304      	adds	r3, #4
 808fa68:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 808fa6a:	683b      	ldr	r3, [r7, #0]
 808fa6c:	3b01      	subs	r3, #1
 808fa6e:	603b      	str	r3, [r7, #0]
 808fa70:	683b      	ldr	r3, [r7, #0]
 808fa72:	2b00      	cmp	r3, #0
 808fa74:	d1ef      	bne.n	808fa56 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 808fa76:	68fb      	ldr	r3, [r7, #12]
 808fa78:	2200      	movs	r2, #0
 808fa7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 808fa7e:	2300      	movs	r3, #0
}
 808fa80:	4618      	mov	r0, r3
 808fa82:	371c      	adds	r7, #28
 808fa84:	46bd      	mov	sp, r7
 808fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 808fa8a:	4770      	bx	lr

0808fa8c <HAL_SDRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 808fa8c:	b580      	push	{r7, lr}
 808fa8e:	b086      	sub	sp, #24
 808fa90:	af00      	add	r7, sp, #0
 808fa92:	60f8      	str	r0, [r7, #12]
 808fa94:	60b9      	str	r1, [r7, #8]
 808fa96:	607a      	str	r2, [r7, #4]
 808fa98:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 808fa9a:	2300      	movs	r3, #0
 808fa9c:	617b      	str	r3, [r7, #20]
    
  /* Process Locked */
  __HAL_LOCK(hsdram);
 808fa9e:	68fb      	ldr	r3, [r7, #12]
 808faa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808faa4:	2b01      	cmp	r3, #1
 808faa6:	d101      	bne.n	808faac <HAL_SDRAM_Read_DMA+0x20>
 808faa8:	2302      	movs	r3, #2
 808faaa:	e026      	b.n	808fafa <HAL_SDRAM_Read_DMA+0x6e>
 808faac:	68fb      	ldr	r3, [r7, #12]
 808faae:	2201      	movs	r2, #1
 808fab0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */  
  tmp = hsdram->State;
 808fab4:	68fb      	ldr	r3, [r7, #12]
 808fab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808faba:	b2db      	uxtb	r3, r3
 808fabc:	617b      	str	r3, [r7, #20]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 808fabe:	697b      	ldr	r3, [r7, #20]
 808fac0:	2b02      	cmp	r3, #2
 808fac2:	d101      	bne.n	808fac8 <HAL_SDRAM_Read_DMA+0x3c>
  {
    return HAL_BUSY;
 808fac4:	2302      	movs	r3, #2
 808fac6:	e018      	b.n	808fafa <HAL_SDRAM_Read_DMA+0x6e>
  }
  else if(tmp == HAL_SDRAM_STATE_PRECHARGED)
 808fac8:	697b      	ldr	r3, [r7, #20]
 808faca:	2b05      	cmp	r3, #5
 808facc:	d101      	bne.n	808fad2 <HAL_SDRAM_Read_DMA+0x46>
  {
    return  HAL_ERROR; 
 808face:	2301      	movs	r3, #1
 808fad0:	e013      	b.n	808fafa <HAL_SDRAM_Read_DMA+0x6e>
  }  
  
  /* Configure DMA user callbacks */
  hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 808fad2:	68fb      	ldr	r3, [r7, #12]
 808fad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fad6:	4a0b      	ldr	r2, [pc, #44]	; (808fb04 <HAL_SDRAM_Read_DMA+0x78>)
 808fad8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 808fada:	68fb      	ldr	r3, [r7, #12]
 808fadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fade:	4a0a      	ldr	r2, [pc, #40]	; (808fb08 <HAL_SDRAM_Read_DMA+0x7c>)
 808fae0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 808fae2:	68fb      	ldr	r3, [r7, #12]
 808fae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 808fae6:	68b9      	ldr	r1, [r7, #8]
 808fae8:	687a      	ldr	r2, [r7, #4]
 808faea:	683b      	ldr	r3, [r7, #0]
 808faec:	f7f9 fd78 	bl	80895e0 <HAL_DMA_Start_IT>
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);  
 808faf0:	68fb      	ldr	r3, [r7, #12]
 808faf2:	2200      	movs	r2, #0
 808faf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 808faf8:	2300      	movs	r3, #0
}
 808fafa:	4618      	mov	r0, r3
 808fafc:	3718      	adds	r7, #24
 808fafe:	46bd      	mov	sp, r7
 808fb00:	bd80      	pop	{r7, pc}
 808fb02:	bf00      	nop
 808fb04:	0809a715 	.word	0x0809a715
 808fb08:	0809a735 	.word	0x0809a735

0808fb0c <HAL_SDRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 808fb0c:	b580      	push	{r7, lr}
 808fb0e:	b086      	sub	sp, #24
 808fb10:	af00      	add	r7, sp, #0
 808fb12:	60f8      	str	r0, [r7, #12]
 808fb14:	60b9      	str	r1, [r7, #8]
 808fb16:	607a      	str	r2, [r7, #4]
 808fb18:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 808fb1a:	2300      	movs	r3, #0
 808fb1c:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 808fb1e:	68fb      	ldr	r3, [r7, #12]
 808fb20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 808fb24:	2b01      	cmp	r3, #1
 808fb26:	d101      	bne.n	808fb2c <HAL_SDRAM_Write_DMA+0x20>
 808fb28:	2302      	movs	r3, #2
 808fb2a:	e029      	b.n	808fb80 <HAL_SDRAM_Write_DMA+0x74>
 808fb2c:	68fb      	ldr	r3, [r7, #12]
 808fb2e:	2201      	movs	r2, #1
 808fb30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */  
  tmp = hsdram->State;
 808fb34:	68fb      	ldr	r3, [r7, #12]
 808fb36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808fb3a:	b2db      	uxtb	r3, r3
 808fb3c:	617b      	str	r3, [r7, #20]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 808fb3e:	697b      	ldr	r3, [r7, #20]
 808fb40:	2b02      	cmp	r3, #2
 808fb42:	d101      	bne.n	808fb48 <HAL_SDRAM_Write_DMA+0x3c>
  {
    return HAL_BUSY;
 808fb44:	2302      	movs	r3, #2
 808fb46:	e01b      	b.n	808fb80 <HAL_SDRAM_Write_DMA+0x74>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 808fb48:	697b      	ldr	r3, [r7, #20]
 808fb4a:	2b05      	cmp	r3, #5
 808fb4c:	d002      	beq.n	808fb54 <HAL_SDRAM_Write_DMA+0x48>
 808fb4e:	697b      	ldr	r3, [r7, #20]
 808fb50:	2b04      	cmp	r3, #4
 808fb52:	d101      	bne.n	808fb58 <HAL_SDRAM_Write_DMA+0x4c>
  {
    return  HAL_ERROR; 
 808fb54:	2301      	movs	r3, #1
 808fb56:	e013      	b.n	808fb80 <HAL_SDRAM_Write_DMA+0x74>
  }  
  
  /* Configure DMA user callbacks */
  hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 808fb58:	68fb      	ldr	r3, [r7, #12]
 808fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fb5c:	4a0a      	ldr	r2, [pc, #40]	; (808fb88 <HAL_SDRAM_Write_DMA+0x7c>)
 808fb5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 808fb60:	68fb      	ldr	r3, [r7, #12]
 808fb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fb64:	4a09      	ldr	r2, [pc, #36]	; (808fb8c <HAL_SDRAM_Write_DMA+0x80>)
 808fb66:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 808fb68:	68fb      	ldr	r3, [r7, #12]
 808fb6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 808fb6c:	6879      	ldr	r1, [r7, #4]
 808fb6e:	68ba      	ldr	r2, [r7, #8]
 808fb70:	683b      	ldr	r3, [r7, #0]
 808fb72:	f7f9 fd35 	bl	80895e0 <HAL_DMA_Start_IT>
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);
 808fb76:	68fb      	ldr	r3, [r7, #12]
 808fb78:	2200      	movs	r2, #0
 808fb7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;
 808fb7e:	2300      	movs	r3, #0
}
 808fb80:	4618      	mov	r0, r3
 808fb82:	3718      	adds	r7, #24
 808fb84:	46bd      	mov	sp, r7
 808fb86:	bd80      	pop	{r7, pc}
 808fb88:	0809a715 	.word	0x0809a715
 808fb8c:	0809a735 	.word	0x0809a735

0808fb90 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 808fb90:	b580      	push	{r7, lr}
 808fb92:	b084      	sub	sp, #16
 808fb94:	af00      	add	r7, sp, #0
 808fb96:	60f8      	str	r0, [r7, #12]
 808fb98:	60b9      	str	r1, [r7, #8]
 808fb9a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 808fb9c:	68fb      	ldr	r3, [r7, #12]
 808fb9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808fba2:	b2db      	uxtb	r3, r3
 808fba4:	2b02      	cmp	r3, #2
 808fba6:	d101      	bne.n	808fbac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 808fba8:	2302      	movs	r3, #2
 808fbaa:	e018      	b.n	808fbde <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 808fbac:	68fb      	ldr	r3, [r7, #12]
 808fbae:	2202      	movs	r2, #2
 808fbb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 808fbb4:	68fb      	ldr	r3, [r7, #12]
 808fbb6:	681b      	ldr	r3, [r3, #0]
 808fbb8:	687a      	ldr	r2, [r7, #4]
 808fbba:	68b9      	ldr	r1, [r7, #8]
 808fbbc:	4618      	mov	r0, r3
 808fbbe:	f002 fbbd 	bl	809233c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 808fbc2:	68bb      	ldr	r3, [r7, #8]
 808fbc4:	681b      	ldr	r3, [r3, #0]
 808fbc6:	2b02      	cmp	r3, #2
 808fbc8:	d104      	bne.n	808fbd4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 808fbca:	68fb      	ldr	r3, [r7, #12]
 808fbcc:	2205      	movs	r2, #5
 808fbce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 808fbd2:	e003      	b.n	808fbdc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 808fbd4:	68fb      	ldr	r3, [r7, #12]
 808fbd6:	2201      	movs	r2, #1
 808fbd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 808fbdc:	2300      	movs	r3, #0
}
 808fbde:	4618      	mov	r0, r3
 808fbe0:	3710      	adds	r7, #16
 808fbe2:	46bd      	mov	sp, r7
 808fbe4:	bd80      	pop	{r7, pc}

0808fbe6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 808fbe6:	b580      	push	{r7, lr}
 808fbe8:	b082      	sub	sp, #8
 808fbea:	af00      	add	r7, sp, #0
 808fbec:	6078      	str	r0, [r7, #4]
 808fbee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 808fbf0:	687b      	ldr	r3, [r7, #4]
 808fbf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 808fbf6:	b2db      	uxtb	r3, r3
 808fbf8:	2b02      	cmp	r3, #2
 808fbfa:	d101      	bne.n	808fc00 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 808fbfc:	2302      	movs	r3, #2
 808fbfe:	e00e      	b.n	808fc1e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 808fc00:	687b      	ldr	r3, [r7, #4]
 808fc02:	2202      	movs	r2, #2
 808fc04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 808fc08:	687b      	ldr	r3, [r7, #4]
 808fc0a:	681b      	ldr	r3, [r3, #0]
 808fc0c:	6839      	ldr	r1, [r7, #0]
 808fc0e:	4618      	mov	r0, r3
 808fc10:	f002 fbb5 	bl	809237e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 808fc14:	687b      	ldr	r3, [r7, #4]
 808fc16:	2201      	movs	r2, #1
 808fc18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 808fc1c:	2300      	movs	r3, #0
}
 808fc1e:	4618      	mov	r0, r3
 808fc20:	3708      	adds	r7, #8
 808fc22:	46bd      	mov	sp, r7
 808fc24:	bd80      	pop	{r7, pc}

0808fc26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 808fc26:	b580      	push	{r7, lr}
 808fc28:	b084      	sub	sp, #16
 808fc2a:	af00      	add	r7, sp, #0
 808fc2c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 808fc2e:	687b      	ldr	r3, [r7, #4]
 808fc30:	2b00      	cmp	r3, #0
 808fc32:	d101      	bne.n	808fc38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 808fc34:	2301      	movs	r3, #1
 808fc36:	e097      	b.n	808fd68 <HAL_SPI_Init+0x142>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 808fc38:	687b      	ldr	r3, [r7, #4]
 808fc3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808fc3e:	b2db      	uxtb	r3, r3
 808fc40:	2b00      	cmp	r3, #0
 808fc42:	d106      	bne.n	808fc52 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 808fc44:	687b      	ldr	r3, [r7, #4]
 808fc46:	2200      	movs	r2, #0
 808fc48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 808fc4c:	6878      	ldr	r0, [r7, #4]
 808fc4e:	f000 f8b7 	bl	808fdc0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 808fc52:	687b      	ldr	r3, [r7, #4]
 808fc54:	2202      	movs	r2, #2
 808fc56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 808fc5a:	687b      	ldr	r3, [r7, #4]
 808fc5c:	681b      	ldr	r3, [r3, #0]
 808fc5e:	681a      	ldr	r2, [r3, #0]
 808fc60:	687b      	ldr	r3, [r7, #4]
 808fc62:	681b      	ldr	r3, [r3, #0]
 808fc64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 808fc68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 808fc6a:	687b      	ldr	r3, [r7, #4]
 808fc6c:	68db      	ldr	r3, [r3, #12]
 808fc6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 808fc72:	d902      	bls.n	808fc7a <HAL_SPI_Init+0x54>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 808fc74:	2300      	movs	r3, #0
 808fc76:	60fb      	str	r3, [r7, #12]
 808fc78:	e002      	b.n	808fc80 <HAL_SPI_Init+0x5a>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 808fc7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 808fc7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 808fc80:	687b      	ldr	r3, [r7, #4]
 808fc82:	68db      	ldr	r3, [r3, #12]
 808fc84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 808fc88:	d007      	beq.n	808fc9a <HAL_SPI_Init+0x74>
 808fc8a:	687b      	ldr	r3, [r7, #4]
 808fc8c:	68db      	ldr	r3, [r3, #12]
 808fc8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 808fc92:	d002      	beq.n	808fc9a <HAL_SPI_Init+0x74>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 808fc94:	687b      	ldr	r3, [r7, #4]
 808fc96:	2200      	movs	r2, #0
 808fc98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 808fc9a:	687b      	ldr	r3, [r7, #4]
 808fc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fc9e:	2b00      	cmp	r3, #0
 808fca0:	d10b      	bne.n	808fcba <HAL_SPI_Init+0x94>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 808fca2:	687b      	ldr	r3, [r7, #4]
 808fca4:	68db      	ldr	r3, [r3, #12]
 808fca6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 808fcaa:	d903      	bls.n	808fcb4 <HAL_SPI_Init+0x8e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 808fcac:	687b      	ldr	r3, [r7, #4]
 808fcae:	2202      	movs	r2, #2
 808fcb0:	631a      	str	r2, [r3, #48]	; 0x30
 808fcb2:	e002      	b.n	808fcba <HAL_SPI_Init+0x94>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 808fcb4:	687b      	ldr	r3, [r7, #4]
 808fcb6:	2201      	movs	r2, #1
 808fcb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 808fcba:	687b      	ldr	r3, [r7, #4]
 808fcbc:	685a      	ldr	r2, [r3, #4]
 808fcbe:	687b      	ldr	r3, [r7, #4]
 808fcc0:	689b      	ldr	r3, [r3, #8]
 808fcc2:	431a      	orrs	r2, r3
 808fcc4:	687b      	ldr	r3, [r7, #4]
 808fcc6:	691b      	ldr	r3, [r3, #16]
 808fcc8:	431a      	orrs	r2, r3
 808fcca:	687b      	ldr	r3, [r7, #4]
 808fccc:	695b      	ldr	r3, [r3, #20]
 808fcce:	431a      	orrs	r2, r3
 808fcd0:	687b      	ldr	r3, [r7, #4]
 808fcd2:	699b      	ldr	r3, [r3, #24]
 808fcd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 808fcd8:	431a      	orrs	r2, r3
 808fcda:	687b      	ldr	r3, [r7, #4]
 808fcdc:	69db      	ldr	r3, [r3, #28]
 808fcde:	431a      	orrs	r2, r3
 808fce0:	687b      	ldr	r3, [r7, #4]
 808fce2:	6a1b      	ldr	r3, [r3, #32]
 808fce4:	ea42 0103 	orr.w	r1, r2, r3
 808fce8:	687b      	ldr	r3, [r7, #4]
 808fcea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 808fcec:	687b      	ldr	r3, [r7, #4]
 808fcee:	681b      	ldr	r3, [r3, #0]
 808fcf0:	430a      	orrs	r2, r1
 808fcf2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));
#if (USE_SPI_CRC != 0U)
  /* Configure : CRC Length */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 808fcf4:	687b      	ldr	r3, [r7, #4]
 808fcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808fcf8:	2b02      	cmp	r3, #2
 808fcfa:	d107      	bne.n	808fd0c <HAL_SPI_Init+0xe6>
  {
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 808fcfc:	687b      	ldr	r3, [r7, #4]
 808fcfe:	681b      	ldr	r3, [r3, #0]
 808fd00:	681a      	ldr	r2, [r3, #0]
 808fd02:	687b      	ldr	r3, [r7, #4]
 808fd04:	681b      	ldr	r3, [r3, #0]
 808fd06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808fd0a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 808fd0c:	687b      	ldr	r3, [r7, #4]
 808fd0e:	699b      	ldr	r3, [r3, #24]
 808fd10:	0c1b      	lsrs	r3, r3, #16
 808fd12:	f003 0204 	and.w	r2, r3, #4
 808fd16:	687b      	ldr	r3, [r7, #4]
 808fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808fd1a:	431a      	orrs	r2, r3
 808fd1c:	687b      	ldr	r3, [r7, #4]
 808fd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808fd20:	431a      	orrs	r2, r3
 808fd22:	687b      	ldr	r3, [r7, #4]
 808fd24:	68db      	ldr	r3, [r3, #12]
 808fd26:	ea42 0103 	orr.w	r1, r2, r3
 808fd2a:	687b      	ldr	r3, [r7, #4]
 808fd2c:	681b      	ldr	r3, [r3, #0]
 808fd2e:	68fa      	ldr	r2, [r7, #12]
 808fd30:	430a      	orrs	r2, r1
 808fd32:	605a      	str	r2, [r3, #4]
                                  hspi->Init.NSSPMode | hspi->Init.DataSize) | frxth);

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 808fd34:	687b      	ldr	r3, [r7, #4]
 808fd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808fd38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808fd3c:	d104      	bne.n	808fd48 <HAL_SPI_Init+0x122>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 808fd3e:	687b      	ldr	r3, [r7, #4]
 808fd40:	681b      	ldr	r3, [r3, #0]
 808fd42:	687a      	ldr	r2, [r7, #4]
 808fd44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 808fd46:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 808fd48:	687b      	ldr	r3, [r7, #4]
 808fd4a:	681b      	ldr	r3, [r3, #0]
 808fd4c:	69da      	ldr	r2, [r3, #28]
 808fd4e:	687b      	ldr	r3, [r7, #4]
 808fd50:	681b      	ldr	r3, [r3, #0]
 808fd52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 808fd56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 808fd58:	687b      	ldr	r3, [r7, #4]
 808fd5a:	2200      	movs	r2, #0
 808fd5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 808fd5e:	687b      	ldr	r3, [r7, #4]
 808fd60:	2201      	movs	r2, #1
 808fd62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 808fd66:	2300      	movs	r3, #0
}
 808fd68:	4618      	mov	r0, r3
 808fd6a:	3710      	adds	r7, #16
 808fd6c:	46bd      	mov	sp, r7
 808fd6e:	bd80      	pop	{r7, pc}

0808fd70 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 808fd70:	b580      	push	{r7, lr}
 808fd72:	b082      	sub	sp, #8
 808fd74:	af00      	add	r7, sp, #0
 808fd76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 808fd78:	687b      	ldr	r3, [r7, #4]
 808fd7a:	2b00      	cmp	r3, #0
 808fd7c:	d101      	bne.n	808fd82 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 808fd7e:	2301      	movs	r3, #1
 808fd80:	e01a      	b.n	808fdb8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 808fd82:	687b      	ldr	r3, [r7, #4]
 808fd84:	2202      	movs	r2, #2
 808fd86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 808fd8a:	687b      	ldr	r3, [r7, #4]
 808fd8c:	681b      	ldr	r3, [r3, #0]
 808fd8e:	681a      	ldr	r2, [r3, #0]
 808fd90:	687b      	ldr	r3, [r7, #4]
 808fd92:	681b      	ldr	r3, [r3, #0]
 808fd94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 808fd98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 808fd9a:	6878      	ldr	r0, [r7, #4]
 808fd9c:	f000 f81a 	bl	808fdd4 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 808fda0:	687b      	ldr	r3, [r7, #4]
 808fda2:	2200      	movs	r2, #0
 808fda4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 808fda6:	687b      	ldr	r3, [r7, #4]
 808fda8:	2200      	movs	r2, #0
 808fdaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 808fdae:	687b      	ldr	r3, [r7, #4]
 808fdb0:	2200      	movs	r2, #0
 808fdb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 808fdb6:	2300      	movs	r3, #0
}
 808fdb8:	4618      	mov	r0, r3
 808fdba:	3708      	adds	r7, #8
 808fdbc:	46bd      	mov	sp, r7
 808fdbe:	bd80      	pop	{r7, pc}

0808fdc0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 808fdc0:	b480      	push	{r7}
 808fdc2:	b083      	sub	sp, #12
 808fdc4:	af00      	add	r7, sp, #0
 808fdc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 808fdc8:	bf00      	nop
 808fdca:	370c      	adds	r7, #12
 808fdcc:	46bd      	mov	sp, r7
 808fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 808fdd2:	4770      	bx	lr

0808fdd4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 808fdd4:	b480      	push	{r7}
 808fdd6:	b083      	sub	sp, #12
 808fdd8:	af00      	add	r7, sp, #0
 808fdda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 808fddc:	bf00      	nop
 808fdde:	370c      	adds	r7, #12
 808fde0:	46bd      	mov	sp, r7
 808fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 808fde6:	4770      	bx	lr

0808fde8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 808fde8:	b580      	push	{r7, lr}
 808fdea:	b088      	sub	sp, #32
 808fdec:	af00      	add	r7, sp, #0
 808fdee:	60f8      	str	r0, [r7, #12]
 808fdf0:	60b9      	str	r1, [r7, #8]
 808fdf2:	603b      	str	r3, [r7, #0]
 808fdf4:	4613      	mov	r3, r2
 808fdf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 808fdf8:	2300      	movs	r3, #0
 808fdfa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 808fdfc:	2300      	movs	r3, #0
 808fdfe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 808fe00:	68fb      	ldr	r3, [r7, #12]
 808fe02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 808fe06:	2b01      	cmp	r3, #1
 808fe08:	d101      	bne.n	808fe0e <HAL_SPI_Transmit+0x26>
 808fe0a:	2302      	movs	r3, #2
 808fe0c:	e11b      	b.n	8090046 <HAL_SPI_Transmit+0x25e>
 808fe0e:	68fb      	ldr	r3, [r7, #12]
 808fe10:	2201      	movs	r2, #1
 808fe12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 808fe16:	f7f9 f9a3 	bl	8089160 <HAL_GetTick>
 808fe1a:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 808fe1c:	68fb      	ldr	r3, [r7, #12]
 808fe1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808fe22:	b2db      	uxtb	r3, r3
 808fe24:	2b01      	cmp	r3, #1
 808fe26:	d002      	beq.n	808fe2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 808fe28:	2302      	movs	r3, #2
 808fe2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 808fe2c:	e102      	b.n	8090034 <HAL_SPI_Transmit+0x24c>
  }

  if ((pData == NULL) || (Size == 0U))
 808fe2e:	68bb      	ldr	r3, [r7, #8]
 808fe30:	2b00      	cmp	r3, #0
 808fe32:	d002      	beq.n	808fe3a <HAL_SPI_Transmit+0x52>
 808fe34:	88fb      	ldrh	r3, [r7, #6]
 808fe36:	2b00      	cmp	r3, #0
 808fe38:	d102      	bne.n	808fe40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 808fe3a:	2301      	movs	r3, #1
 808fe3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 808fe3e:	e0f9      	b.n	8090034 <HAL_SPI_Transmit+0x24c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 808fe40:	68fb      	ldr	r3, [r7, #12]
 808fe42:	2203      	movs	r2, #3
 808fe44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 808fe48:	68fb      	ldr	r3, [r7, #12]
 808fe4a:	2200      	movs	r2, #0
 808fe4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 808fe4e:	68fb      	ldr	r3, [r7, #12]
 808fe50:	68ba      	ldr	r2, [r7, #8]
 808fe52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 808fe54:	68fb      	ldr	r3, [r7, #12]
 808fe56:	88fa      	ldrh	r2, [r7, #6]
 808fe58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 808fe5a:	68fb      	ldr	r3, [r7, #12]
 808fe5c:	88fa      	ldrh	r2, [r7, #6]
 808fe5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 808fe60:	68fb      	ldr	r3, [r7, #12]
 808fe62:	2200      	movs	r2, #0
 808fe64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 808fe66:	68fb      	ldr	r3, [r7, #12]
 808fe68:	2200      	movs	r2, #0
 808fe6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 808fe6e:	68fb      	ldr	r3, [r7, #12]
 808fe70:	2200      	movs	r2, #0
 808fe72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 808fe76:	68fb      	ldr	r3, [r7, #12]
 808fe78:	2200      	movs	r2, #0
 808fe7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 808fe7c:	68fb      	ldr	r3, [r7, #12]
 808fe7e:	2200      	movs	r2, #0
 808fe80:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 808fe82:	68fb      	ldr	r3, [r7, #12]
 808fe84:	689b      	ldr	r3, [r3, #8]
 808fe86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 808fe8a:	d107      	bne.n	808fe9c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 808fe8c:	68fb      	ldr	r3, [r7, #12]
 808fe8e:	681b      	ldr	r3, [r3, #0]
 808fe90:	681a      	ldr	r2, [r3, #0]
 808fe92:	68fb      	ldr	r3, [r7, #12]
 808fe94:	681b      	ldr	r3, [r3, #0]
 808fe96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 808fe9a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 808fe9c:	68fb      	ldr	r3, [r7, #12]
 808fe9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808fea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808fea4:	d110      	bne.n	808fec8 <HAL_SPI_Transmit+0xe0>
  {
    SPI_RESET_CRC(hspi);
 808fea6:	68fb      	ldr	r3, [r7, #12]
 808fea8:	681b      	ldr	r3, [r3, #0]
 808feaa:	6819      	ldr	r1, [r3, #0]
 808feac:	68fb      	ldr	r3, [r7, #12]
 808feae:	681a      	ldr	r2, [r3, #0]
 808feb0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 808feb4:	400b      	ands	r3, r1
 808feb6:	6013      	str	r3, [r2, #0]
 808feb8:	68fb      	ldr	r3, [r7, #12]
 808feba:	681b      	ldr	r3, [r3, #0]
 808febc:	681a      	ldr	r2, [r3, #0]
 808febe:	68fb      	ldr	r3, [r7, #12]
 808fec0:	681b      	ldr	r3, [r3, #0]
 808fec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 808fec6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 808fec8:	68fb      	ldr	r3, [r7, #12]
 808feca:	681b      	ldr	r3, [r3, #0]
 808fecc:	681b      	ldr	r3, [r3, #0]
 808fece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808fed2:	2b40      	cmp	r3, #64	; 0x40
 808fed4:	d007      	beq.n	808fee6 <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 808fed6:	68fb      	ldr	r3, [r7, #12]
 808fed8:	681b      	ldr	r3, [r3, #0]
 808feda:	681a      	ldr	r2, [r3, #0]
 808fedc:	68fb      	ldr	r3, [r7, #12]
 808fede:	681b      	ldr	r3, [r3, #0]
 808fee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808fee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 808fee6:	68fb      	ldr	r3, [r7, #12]
 808fee8:	68db      	ldr	r3, [r3, #12]
 808feea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 808feee:	d96d      	bls.n	808ffcc <HAL_SPI_Transmit+0x1e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 808fef0:	e028      	b.n	808ff44 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 808fef2:	68fb      	ldr	r3, [r7, #12]
 808fef4:	681b      	ldr	r3, [r3, #0]
 808fef6:	689b      	ldr	r3, [r3, #8]
 808fef8:	f003 0302 	and.w	r3, r3, #2
 808fefc:	2b02      	cmp	r3, #2
 808fefe:	d10f      	bne.n	808ff20 <HAL_SPI_Transmit+0x138>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 808ff00:	68bb      	ldr	r3, [r7, #8]
 808ff02:	881a      	ldrh	r2, [r3, #0]
 808ff04:	68fb      	ldr	r3, [r7, #12]
 808ff06:	681b      	ldr	r3, [r3, #0]
 808ff08:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 808ff0a:	68bb      	ldr	r3, [r7, #8]
 808ff0c:	3302      	adds	r3, #2
 808ff0e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 808ff10:	68fb      	ldr	r3, [r7, #12]
 808ff12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ff14:	b29b      	uxth	r3, r3
 808ff16:	3b01      	subs	r3, #1
 808ff18:	b29a      	uxth	r2, r3
 808ff1a:	68fb      	ldr	r3, [r7, #12]
 808ff1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 808ff1e:	e011      	b.n	808ff44 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 808ff20:	683b      	ldr	r3, [r7, #0]
 808ff22:	2b00      	cmp	r3, #0
 808ff24:	d00b      	beq.n	808ff3e <HAL_SPI_Transmit+0x156>
 808ff26:	683b      	ldr	r3, [r7, #0]
 808ff28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808ff2c:	d00a      	beq.n	808ff44 <HAL_SPI_Transmit+0x15c>
 808ff2e:	f7f9 f917 	bl	8089160 <HAL_GetTick>
 808ff32:	4602      	mov	r2, r0
 808ff34:	69bb      	ldr	r3, [r7, #24]
 808ff36:	1ad3      	subs	r3, r2, r3
 808ff38:	683a      	ldr	r2, [r7, #0]
 808ff3a:	429a      	cmp	r2, r3
 808ff3c:	d802      	bhi.n	808ff44 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 808ff3e:	2303      	movs	r3, #3
 808ff40:	77fb      	strb	r3, [r7, #31]
          goto error;
 808ff42:	e077      	b.n	8090034 <HAL_SPI_Transmit+0x24c>
    while (hspi->TxXferCount > 0U)
 808ff44:	68fb      	ldr	r3, [r7, #12]
 808ff46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ff48:	b29b      	uxth	r3, r3
 808ff4a:	2b00      	cmp	r3, #0
 808ff4c:	d1d1      	bne.n	808fef2 <HAL_SPI_Transmit+0x10a>
 808ff4e:	e042      	b.n	808ffd6 <HAL_SPI_Transmit+0x1ee>
  else
  {
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 808ff50:	68fb      	ldr	r3, [r7, #12]
 808ff52:	681b      	ldr	r3, [r3, #0]
 808ff54:	689b      	ldr	r3, [r3, #8]
 808ff56:	f003 0302 	and.w	r3, r3, #2
 808ff5a:	2b02      	cmp	r3, #2
 808ff5c:	d124      	bne.n	808ffa8 <HAL_SPI_Transmit+0x1c0>
      {
        if (hspi->TxXferCount > 1U)
 808ff5e:	68fb      	ldr	r3, [r7, #12]
 808ff60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ff62:	b29b      	uxth	r3, r3
 808ff64:	2b01      	cmp	r3, #1
 808ff66:	d90f      	bls.n	808ff88 <HAL_SPI_Transmit+0x1a0>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 808ff68:	68bb      	ldr	r3, [r7, #8]
 808ff6a:	881a      	ldrh	r2, [r3, #0]
 808ff6c:	68fb      	ldr	r3, [r7, #12]
 808ff6e:	681b      	ldr	r3, [r3, #0]
 808ff70:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 808ff72:	68bb      	ldr	r3, [r7, #8]
 808ff74:	3302      	adds	r3, #2
 808ff76:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 808ff78:	68fb      	ldr	r3, [r7, #12]
 808ff7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ff7c:	b29b      	uxth	r3, r3
 808ff7e:	3b02      	subs	r3, #2
 808ff80:	b29a      	uxth	r2, r3
 808ff82:	68fb      	ldr	r3, [r7, #12]
 808ff84:	87da      	strh	r2, [r3, #62]	; 0x3e
 808ff86:	e021      	b.n	808ffcc <HAL_SPI_Transmit+0x1e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 808ff88:	68bb      	ldr	r3, [r7, #8]
 808ff8a:	1c5a      	adds	r2, r3, #1
 808ff8c:	60ba      	str	r2, [r7, #8]
 808ff8e:	68fa      	ldr	r2, [r7, #12]
 808ff90:	6812      	ldr	r2, [r2, #0]
 808ff92:	320c      	adds	r2, #12
 808ff94:	781b      	ldrb	r3, [r3, #0]
 808ff96:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 808ff98:	68fb      	ldr	r3, [r7, #12]
 808ff9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ff9c:	b29b      	uxth	r3, r3
 808ff9e:	3b01      	subs	r3, #1
 808ffa0:	b29a      	uxth	r2, r3
 808ffa2:	68fb      	ldr	r3, [r7, #12]
 808ffa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 808ffa6:	e011      	b.n	808ffcc <HAL_SPI_Transmit+0x1e4>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 808ffa8:	683b      	ldr	r3, [r7, #0]
 808ffaa:	2b00      	cmp	r3, #0
 808ffac:	d00b      	beq.n	808ffc6 <HAL_SPI_Transmit+0x1de>
 808ffae:	683b      	ldr	r3, [r7, #0]
 808ffb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808ffb4:	d00a      	beq.n	808ffcc <HAL_SPI_Transmit+0x1e4>
 808ffb6:	f7f9 f8d3 	bl	8089160 <HAL_GetTick>
 808ffba:	4602      	mov	r2, r0
 808ffbc:	69bb      	ldr	r3, [r7, #24]
 808ffbe:	1ad3      	subs	r3, r2, r3
 808ffc0:	683a      	ldr	r2, [r7, #0]
 808ffc2:	429a      	cmp	r2, r3
 808ffc4:	d802      	bhi.n	808ffcc <HAL_SPI_Transmit+0x1e4>
        {
          errorcode = HAL_TIMEOUT;
 808ffc6:	2303      	movs	r3, #3
 808ffc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 808ffca:	e033      	b.n	8090034 <HAL_SPI_Transmit+0x24c>
    while (hspi->TxXferCount > 0U)
 808ffcc:	68fb      	ldr	r3, [r7, #12]
 808ffce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 808ffd0:	b29b      	uxth	r3, r3
 808ffd2:	2b00      	cmp	r3, #0
 808ffd4:	d1bc      	bne.n	808ff50 <HAL_SPI_Transmit+0x168>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 808ffd6:	68fb      	ldr	r3, [r7, #12]
 808ffd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808ffda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808ffde:	d107      	bne.n	808fff0 <HAL_SPI_Transmit+0x208>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 808ffe0:	68fb      	ldr	r3, [r7, #12]
 808ffe2:	681b      	ldr	r3, [r3, #0]
 808ffe4:	681a      	ldr	r2, [r3, #0]
 808ffe6:	68fb      	ldr	r3, [r7, #12]
 808ffe8:	681b      	ldr	r3, [r3, #0]
 808ffea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 808ffee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 808fff0:	69ba      	ldr	r2, [r7, #24]
 808fff2:	6839      	ldr	r1, [r7, #0]
 808fff4:	68f8      	ldr	r0, [r7, #12]
 808fff6:	f000 fde2 	bl	8090bbe <SPI_EndRxTxTransaction>
 808fffa:	4603      	mov	r3, r0
 808fffc:	2b00      	cmp	r3, #0
 808fffe:	d002      	beq.n	8090006 <HAL_SPI_Transmit+0x21e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8090000:	68fb      	ldr	r3, [r7, #12]
 8090002:	2220      	movs	r2, #32
 8090004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8090006:	68fb      	ldr	r3, [r7, #12]
 8090008:	689b      	ldr	r3, [r3, #8]
 809000a:	2b00      	cmp	r3, #0
 809000c:	d10a      	bne.n	8090024 <HAL_SPI_Transmit+0x23c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 809000e:	2300      	movs	r3, #0
 8090010:	617b      	str	r3, [r7, #20]
 8090012:	68fb      	ldr	r3, [r7, #12]
 8090014:	681b      	ldr	r3, [r3, #0]
 8090016:	68db      	ldr	r3, [r3, #12]
 8090018:	617b      	str	r3, [r7, #20]
 809001a:	68fb      	ldr	r3, [r7, #12]
 809001c:	681b      	ldr	r3, [r3, #0]
 809001e:	689b      	ldr	r3, [r3, #8]
 8090020:	617b      	str	r3, [r7, #20]
 8090022:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8090024:	68fb      	ldr	r3, [r7, #12]
 8090026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090028:	2b00      	cmp	r3, #0
 809002a:	d002      	beq.n	8090032 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 809002c:	2301      	movs	r3, #1
 809002e:	77fb      	strb	r3, [r7, #31]
 8090030:	e000      	b.n	8090034 <HAL_SPI_Transmit+0x24c>
  }

error:
 8090032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8090034:	68fb      	ldr	r3, [r7, #12]
 8090036:	2201      	movs	r2, #1
 8090038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 809003c:	68fb      	ldr	r3, [r7, #12]
 809003e:	2200      	movs	r2, #0
 8090040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8090044:	7ffb      	ldrb	r3, [r7, #31]
}
 8090046:	4618      	mov	r0, r3
 8090048:	3720      	adds	r7, #32
 809004a:	46bd      	mov	sp, r7
 809004c:	bd80      	pop	{r7, pc}

0809004e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 809004e:	b580      	push	{r7, lr}
 8090050:	b08a      	sub	sp, #40	; 0x28
 8090052:	af02      	add	r7, sp, #8
 8090054:	60f8      	str	r0, [r7, #12]
 8090056:	60b9      	str	r1, [r7, #8]
 8090058:	603b      	str	r3, [r7, #0]
 809005a:	4613      	mov	r3, r2
 809005c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 809005e:	2300      	movs	r3, #0
 8090060:	82fb      	strh	r3, [r7, #22]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8090062:	2300      	movs	r3, #0
 8090064:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8090066:	2300      	movs	r3, #0
 8090068:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 809006a:	68fb      	ldr	r3, [r7, #12]
 809006c:	685b      	ldr	r3, [r3, #4]
 809006e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8090072:	d112      	bne.n	809009a <HAL_SPI_Receive+0x4c>
 8090074:	68fb      	ldr	r3, [r7, #12]
 8090076:	689b      	ldr	r3, [r3, #8]
 8090078:	2b00      	cmp	r3, #0
 809007a:	d10e      	bne.n	809009a <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 809007c:	68fb      	ldr	r3, [r7, #12]
 809007e:	2204      	movs	r2, #4
 8090080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8090084:	88fa      	ldrh	r2, [r7, #6]
 8090086:	683b      	ldr	r3, [r7, #0]
 8090088:	9300      	str	r3, [sp, #0]
 809008a:	4613      	mov	r3, r2
 809008c:	68ba      	ldr	r2, [r7, #8]
 809008e:	68b9      	ldr	r1, [r7, #8]
 8090090:	68f8      	ldr	r0, [r7, #12]
 8090092:	f000 f9ad 	bl	80903f0 <HAL_SPI_TransmitReceive>
 8090096:	4603      	mov	r3, r0
 8090098:	e1a6      	b.n	80903e8 <HAL_SPI_Receive+0x39a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 809009a:	68fb      	ldr	r3, [r7, #12]
 809009c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80900a0:	2b01      	cmp	r3, #1
 80900a2:	d101      	bne.n	80900a8 <HAL_SPI_Receive+0x5a>
 80900a4:	2302      	movs	r3, #2
 80900a6:	e19f      	b.n	80903e8 <HAL_SPI_Receive+0x39a>
 80900a8:	68fb      	ldr	r3, [r7, #12]
 80900aa:	2201      	movs	r2, #1
 80900ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80900b0:	f7f9 f856 	bl	8089160 <HAL_GetTick>
 80900b4:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80900b6:	68fb      	ldr	r3, [r7, #12]
 80900b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80900bc:	b2db      	uxtb	r3, r3
 80900be:	2b01      	cmp	r3, #1
 80900c0:	d002      	beq.n	80900c8 <HAL_SPI_Receive+0x7a>
  {
    errorcode = HAL_BUSY;
 80900c2:	2302      	movs	r3, #2
 80900c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80900c6:	e186      	b.n	80903d6 <HAL_SPI_Receive+0x388>
  }

  if ((pData == NULL) || (Size == 0U))
 80900c8:	68bb      	ldr	r3, [r7, #8]
 80900ca:	2b00      	cmp	r3, #0
 80900cc:	d002      	beq.n	80900d4 <HAL_SPI_Receive+0x86>
 80900ce:	88fb      	ldrh	r3, [r7, #6]
 80900d0:	2b00      	cmp	r3, #0
 80900d2:	d102      	bne.n	80900da <HAL_SPI_Receive+0x8c>
  {
    errorcode = HAL_ERROR;
 80900d4:	2301      	movs	r3, #1
 80900d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80900d8:	e17d      	b.n	80903d6 <HAL_SPI_Receive+0x388>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80900da:	68fb      	ldr	r3, [r7, #12]
 80900dc:	2204      	movs	r2, #4
 80900de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80900e2:	68fb      	ldr	r3, [r7, #12]
 80900e4:	2200      	movs	r2, #0
 80900e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80900e8:	68fb      	ldr	r3, [r7, #12]
 80900ea:	68ba      	ldr	r2, [r7, #8]
 80900ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80900ee:	68fb      	ldr	r3, [r7, #12]
 80900f0:	88fa      	ldrh	r2, [r7, #6]
 80900f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80900f6:	68fb      	ldr	r3, [r7, #12]
 80900f8:	88fa      	ldrh	r2, [r7, #6]
 80900fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80900fe:	68fb      	ldr	r3, [r7, #12]
 8090100:	2200      	movs	r2, #0
 8090102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8090104:	68fb      	ldr	r3, [r7, #12]
 8090106:	2200      	movs	r2, #0
 8090108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 809010a:	68fb      	ldr	r3, [r7, #12]
 809010c:	2200      	movs	r2, #0
 809010e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8090110:	68fb      	ldr	r3, [r7, #12]
 8090112:	2200      	movs	r2, #0
 8090114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8090116:	68fb      	ldr	r3, [r7, #12]
 8090118:	2200      	movs	r2, #0
 809011a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 809011c:	68fb      	ldr	r3, [r7, #12]
 809011e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8090124:	d119      	bne.n	809015a <HAL_SPI_Receive+0x10c>
  {
    SPI_RESET_CRC(hspi);
 8090126:	68fb      	ldr	r3, [r7, #12]
 8090128:	681b      	ldr	r3, [r3, #0]
 809012a:	6819      	ldr	r1, [r3, #0]
 809012c:	68fb      	ldr	r3, [r7, #12]
 809012e:	681a      	ldr	r2, [r3, #0]
 8090130:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8090134:	400b      	ands	r3, r1
 8090136:	6013      	str	r3, [r2, #0]
 8090138:	68fb      	ldr	r3, [r7, #12]
 809013a:	681b      	ldr	r3, [r3, #0]
 809013c:	681a      	ldr	r2, [r3, #0]
 809013e:	68fb      	ldr	r3, [r7, #12]
 8090140:	681b      	ldr	r3, [r3, #0]
 8090142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8090146:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8090148:	68fb      	ldr	r3, [r7, #12]
 809014a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 809014e:	b29b      	uxth	r3, r3
 8090150:	3b01      	subs	r3, #1
 8090152:	b29a      	uxth	r2, r3
 8090154:	68fb      	ldr	r3, [r7, #12]
 8090156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 809015a:	68fb      	ldr	r3, [r7, #12]
 809015c:	68db      	ldr	r3, [r3, #12]
 809015e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8090162:	d908      	bls.n	8090176 <HAL_SPI_Receive+0x128>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8090164:	68fb      	ldr	r3, [r7, #12]
 8090166:	681b      	ldr	r3, [r3, #0]
 8090168:	685a      	ldr	r2, [r3, #4]
 809016a:	68fb      	ldr	r3, [r7, #12]
 809016c:	681b      	ldr	r3, [r3, #0]
 809016e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8090172:	605a      	str	r2, [r3, #4]
 8090174:	e007      	b.n	8090186 <HAL_SPI_Receive+0x138>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8090176:	68fb      	ldr	r3, [r7, #12]
 8090178:	681b      	ldr	r3, [r3, #0]
 809017a:	685a      	ldr	r2, [r3, #4]
 809017c:	68fb      	ldr	r3, [r7, #12]
 809017e:	681b      	ldr	r3, [r3, #0]
 8090180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8090184:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8090186:	68fb      	ldr	r3, [r7, #12]
 8090188:	689b      	ldr	r3, [r3, #8]
 809018a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 809018e:	d107      	bne.n	80901a0 <HAL_SPI_Receive+0x152>
  {
    SPI_1LINE_RX(hspi);
 8090190:	68fb      	ldr	r3, [r7, #12]
 8090192:	681b      	ldr	r3, [r3, #0]
 8090194:	681a      	ldr	r2, [r3, #0]
 8090196:	68fb      	ldr	r3, [r7, #12]
 8090198:	681b      	ldr	r3, [r3, #0]
 809019a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 809019e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80901a0:	68fb      	ldr	r3, [r7, #12]
 80901a2:	681b      	ldr	r3, [r3, #0]
 80901a4:	681b      	ldr	r3, [r3, #0]
 80901a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80901aa:	2b40      	cmp	r3, #64	; 0x40
 80901ac:	d007      	beq.n	80901be <HAL_SPI_Receive+0x170>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80901ae:	68fb      	ldr	r3, [r7, #12]
 80901b0:	681b      	ldr	r3, [r3, #0]
 80901b2:	681a      	ldr	r2, [r3, #0]
 80901b4:	68fb      	ldr	r3, [r7, #12]
 80901b6:	681b      	ldr	r3, [r3, #0]
 80901b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80901bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80901be:	68fb      	ldr	r3, [r7, #12]
 80901c0:	68db      	ldr	r3, [r3, #12]
 80901c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80901c6:	d860      	bhi.n	809028a <HAL_SPI_Receive+0x23c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80901c8:	e02c      	b.n	8090224 <HAL_SPI_Receive+0x1d6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80901ca:	68fb      	ldr	r3, [r7, #12]
 80901cc:	681b      	ldr	r3, [r3, #0]
 80901ce:	689b      	ldr	r3, [r3, #8]
 80901d0:	f003 0301 	and.w	r3, r3, #1
 80901d4:	2b01      	cmp	r3, #1
 80901d6:	d113      	bne.n	8090200 <HAL_SPI_Receive+0x1b2>
      {
        /* read the received data */
        (*pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80901d8:	68fb      	ldr	r3, [r7, #12]
 80901da:	681b      	ldr	r3, [r3, #0]
 80901dc:	330c      	adds	r3, #12
 80901de:	781b      	ldrb	r3, [r3, #0]
 80901e0:	b2da      	uxtb	r2, r3
 80901e2:	68bb      	ldr	r3, [r7, #8]
 80901e4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80901e6:	68bb      	ldr	r3, [r7, #8]
 80901e8:	3301      	adds	r3, #1
 80901ea:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80901ec:	68fb      	ldr	r3, [r7, #12]
 80901ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80901f2:	b29b      	uxth	r3, r3
 80901f4:	3b01      	subs	r3, #1
 80901f6:	b29a      	uxth	r2, r3
 80901f8:	68fb      	ldr	r3, [r7, #12]
 80901fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80901fe:	e011      	b.n	8090224 <HAL_SPI_Receive+0x1d6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8090200:	683b      	ldr	r3, [r7, #0]
 8090202:	2b00      	cmp	r3, #0
 8090204:	d00b      	beq.n	809021e <HAL_SPI_Receive+0x1d0>
 8090206:	683b      	ldr	r3, [r7, #0]
 8090208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 809020c:	d00a      	beq.n	8090224 <HAL_SPI_Receive+0x1d6>
 809020e:	f7f8 ffa7 	bl	8089160 <HAL_GetTick>
 8090212:	4602      	mov	r2, r0
 8090214:	69bb      	ldr	r3, [r7, #24]
 8090216:	1ad3      	subs	r3, r2, r3
 8090218:	683a      	ldr	r2, [r7, #0]
 809021a:	429a      	cmp	r2, r3
 809021c:	d802      	bhi.n	8090224 <HAL_SPI_Receive+0x1d6>
        {
          errorcode = HAL_TIMEOUT;
 809021e:	2303      	movs	r3, #3
 8090220:	77fb      	strb	r3, [r7, #31]
          goto error;
 8090222:	e0d8      	b.n	80903d6 <HAL_SPI_Receive+0x388>
    while (hspi->RxXferCount > 0U)
 8090224:	68fb      	ldr	r3, [r7, #12]
 8090226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 809022a:	b29b      	uxth	r3, r3
 809022c:	2b00      	cmp	r3, #0
 809022e:	d1cc      	bne.n	80901ca <HAL_SPI_Receive+0x17c>
 8090230:	e031      	b.n	8090296 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8090232:	68fb      	ldr	r3, [r7, #12]
 8090234:	681b      	ldr	r3, [r3, #0]
 8090236:	689b      	ldr	r3, [r3, #8]
 8090238:	f003 0301 	and.w	r3, r3, #1
 809023c:	2b01      	cmp	r3, #1
 809023e:	d112      	bne.n	8090266 <HAL_SPI_Receive+0x218>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8090240:	68fb      	ldr	r3, [r7, #12]
 8090242:	681b      	ldr	r3, [r3, #0]
 8090244:	68db      	ldr	r3, [r3, #12]
 8090246:	b29a      	uxth	r2, r3
 8090248:	68bb      	ldr	r3, [r7, #8]
 809024a:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 809024c:	68bb      	ldr	r3, [r7, #8]
 809024e:	3302      	adds	r3, #2
 8090250:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8090252:	68fb      	ldr	r3, [r7, #12]
 8090254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090258:	b29b      	uxth	r3, r3
 809025a:	3b01      	subs	r3, #1
 809025c:	b29a      	uxth	r2, r3
 809025e:	68fb      	ldr	r3, [r7, #12]
 8090260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8090264:	e011      	b.n	809028a <HAL_SPI_Receive+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8090266:	683b      	ldr	r3, [r7, #0]
 8090268:	2b00      	cmp	r3, #0
 809026a:	d00b      	beq.n	8090284 <HAL_SPI_Receive+0x236>
 809026c:	683b      	ldr	r3, [r7, #0]
 809026e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8090272:	d00a      	beq.n	809028a <HAL_SPI_Receive+0x23c>
 8090274:	f7f8 ff74 	bl	8089160 <HAL_GetTick>
 8090278:	4602      	mov	r2, r0
 809027a:	69bb      	ldr	r3, [r7, #24]
 809027c:	1ad3      	subs	r3, r2, r3
 809027e:	683a      	ldr	r2, [r7, #0]
 8090280:	429a      	cmp	r2, r3
 8090282:	d802      	bhi.n	809028a <HAL_SPI_Receive+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8090284:	2303      	movs	r3, #3
 8090286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8090288:	e0a5      	b.n	80903d6 <HAL_SPI_Receive+0x388>
    while (hspi->RxXferCount > 0U)
 809028a:	68fb      	ldr	r3, [r7, #12]
 809028c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090290:	b29b      	uxth	r3, r3
 8090292:	2b00      	cmp	r3, #0
 8090294:	d1cd      	bne.n	8090232 <HAL_SPI_Receive+0x1e4>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8090296:	68fb      	ldr	r3, [r7, #12]
 8090298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 809029a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 809029e:	d175      	bne.n	809038c <HAL_SPI_Receive+0x33e>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80902a0:	68fb      	ldr	r3, [r7, #12]
 80902a2:	681b      	ldr	r3, [r3, #0]
 80902a4:	681a      	ldr	r2, [r3, #0]
 80902a6:	68fb      	ldr	r3, [r7, #12]
 80902a8:	681b      	ldr	r3, [r3, #0]
 80902aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80902ae:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80902b0:	69bb      	ldr	r3, [r7, #24]
 80902b2:	9300      	str	r3, [sp, #0]
 80902b4:	683b      	ldr	r3, [r7, #0]
 80902b6:	2201      	movs	r2, #1
 80902b8:	2101      	movs	r1, #1
 80902ba:	68f8      	ldr	r0, [r7, #12]
 80902bc:	f000 fb53 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 80902c0:	4603      	mov	r3, r0
 80902c2:	2b00      	cmp	r3, #0
 80902c4:	d002      	beq.n	80902cc <HAL_SPI_Receive+0x27e>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80902c6:	2303      	movs	r3, #3
 80902c8:	77fb      	strb	r3, [r7, #31]
      goto error;
 80902ca:	e084      	b.n	80903d6 <HAL_SPI_Receive+0x388>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80902cc:	68fb      	ldr	r3, [r7, #12]
 80902ce:	68db      	ldr	r3, [r3, #12]
 80902d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80902d4:	d906      	bls.n	80902e4 <HAL_SPI_Receive+0x296>
    {
      *((uint16_t *)pData) = hspi->Instance->DR;
 80902d6:	68fb      	ldr	r3, [r7, #12]
 80902d8:	681b      	ldr	r3, [r3, #0]
 80902da:	68db      	ldr	r3, [r3, #12]
 80902dc:	b29a      	uxth	r2, r3
 80902de:	68bb      	ldr	r3, [r7, #8]
 80902e0:	801a      	strh	r2, [r3, #0]
 80902e2:	e006      	b.n	80902f2 <HAL_SPI_Receive+0x2a4>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80902e4:	68fb      	ldr	r3, [r7, #12]
 80902e6:	681b      	ldr	r3, [r3, #0]
 80902e8:	330c      	adds	r3, #12
 80902ea:	781b      	ldrb	r3, [r3, #0]
 80902ec:	b2da      	uxtb	r2, r3
 80902ee:	68bb      	ldr	r3, [r7, #8]
 80902f0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80902f2:	69bb      	ldr	r3, [r7, #24]
 80902f4:	9300      	str	r3, [sp, #0]
 80902f6:	683b      	ldr	r3, [r7, #0]
 80902f8:	2201      	movs	r2, #1
 80902fa:	2101      	movs	r1, #1
 80902fc:	68f8      	ldr	r0, [r7, #12]
 80902fe:	f000 fb32 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 8090302:	4603      	mov	r3, r0
 8090304:	2b00      	cmp	r3, #0
 8090306:	d008      	beq.n	809031a <HAL_SPI_Receive+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8090308:	68fb      	ldr	r3, [r7, #12]
 809030a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 809030c:	f043 0202 	orr.w	r2, r3, #2
 8090310:	68fb      	ldr	r3, [r7, #12]
 8090312:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8090314:	2303      	movs	r3, #3
 8090316:	77fb      	strb	r3, [r7, #31]
      goto error;
 8090318:	e05d      	b.n	80903d6 <HAL_SPI_Receive+0x388>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 809031a:	68fb      	ldr	r3, [r7, #12]
 809031c:	68db      	ldr	r3, [r3, #12]
 809031e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8090322:	d106      	bne.n	8090332 <HAL_SPI_Receive+0x2e4>
    {
      tmpreg = hspi->Instance->DR;
 8090324:	68fb      	ldr	r3, [r7, #12]
 8090326:	681b      	ldr	r3, [r3, #0]
 8090328:	68db      	ldr	r3, [r3, #12]
 809032a:	b29b      	uxth	r3, r3
 809032c:	82fb      	strh	r3, [r7, #22]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 809032e:	8afb      	ldrh	r3, [r7, #22]
 8090330:	e02c      	b.n	809038c <HAL_SPI_Receive+0x33e>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8090332:	68fb      	ldr	r3, [r7, #12]
 8090334:	681b      	ldr	r3, [r3, #0]
 8090336:	330c      	adds	r3, #12
 8090338:	781b      	ldrb	r3, [r3, #0]
 809033a:	b2db      	uxtb	r3, r3
 809033c:	b29b      	uxth	r3, r3
 809033e:	82fb      	strh	r3, [r7, #22]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8090340:	8afb      	ldrh	r3, [r7, #22]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8090342:	68fb      	ldr	r3, [r7, #12]
 8090344:	68db      	ldr	r3, [r3, #12]
 8090346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 809034a:	d11f      	bne.n	809038c <HAL_SPI_Receive+0x33e>
 809034c:	68fb      	ldr	r3, [r7, #12]
 809034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090350:	2b02      	cmp	r3, #2
 8090352:	d11b      	bne.n	809038c <HAL_SPI_Receive+0x33e>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
 8090354:	69bb      	ldr	r3, [r7, #24]
 8090356:	9300      	str	r3, [sp, #0]
 8090358:	683b      	ldr	r3, [r7, #0]
 809035a:	2201      	movs	r2, #1
 809035c:	2101      	movs	r1, #1
 809035e:	68f8      	ldr	r0, [r7, #12]
 8090360:	f000 fb01 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 8090364:	4603      	mov	r3, r0
 8090366:	2b00      	cmp	r3, #0
 8090368:	d008      	beq.n	809037c <HAL_SPI_Receive+0x32e>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 809036a:	68fb      	ldr	r3, [r7, #12]
 809036c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 809036e:	f043 0202 	orr.w	r2, r3, #2
 8090372:	68fb      	ldr	r3, [r7, #12]
 8090374:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8090376:	2303      	movs	r3, #3
 8090378:	77fb      	strb	r3, [r7, #31]
          goto error;
 809037a:	e02c      	b.n	80903d6 <HAL_SPI_Receive+0x388>
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 809037c:	68fb      	ldr	r3, [r7, #12]
 809037e:	681b      	ldr	r3, [r3, #0]
 8090380:	330c      	adds	r3, #12
 8090382:	781b      	ldrb	r3, [r3, #0]
 8090384:	b2db      	uxtb	r3, r3
 8090386:	b29b      	uxth	r3, r3
 8090388:	82fb      	strh	r3, [r7, #22]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 809038a:	8afb      	ldrh	r3, [r7, #22]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 809038c:	69ba      	ldr	r2, [r7, #24]
 809038e:	6839      	ldr	r1, [r7, #0]
 8090390:	68f8      	ldr	r0, [r7, #12]
 8090392:	f000 fbbc 	bl	8090b0e <SPI_EndRxTransaction>
 8090396:	4603      	mov	r3, r0
 8090398:	2b00      	cmp	r3, #0
 809039a:	d002      	beq.n	80903a2 <HAL_SPI_Receive+0x354>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 809039c:	68fb      	ldr	r3, [r7, #12]
 809039e:	2220      	movs	r2, #32
 80903a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80903a2:	68fb      	ldr	r3, [r7, #12]
 80903a4:	681b      	ldr	r3, [r3, #0]
 80903a6:	689b      	ldr	r3, [r3, #8]
 80903a8:	f003 0310 	and.w	r3, r3, #16
 80903ac:	2b10      	cmp	r3, #16
 80903ae:	d10a      	bne.n	80903c6 <HAL_SPI_Receive+0x378>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80903b0:	68fb      	ldr	r3, [r7, #12]
 80903b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80903b4:	f043 0202 	orr.w	r2, r3, #2
 80903b8:	68fb      	ldr	r3, [r7, #12]
 80903ba:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80903bc:	68fb      	ldr	r3, [r7, #12]
 80903be:	681b      	ldr	r3, [r3, #0]
 80903c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80903c4:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80903c6:	68fb      	ldr	r3, [r7, #12]
 80903c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80903ca:	2b00      	cmp	r3, #0
 80903cc:	d002      	beq.n	80903d4 <HAL_SPI_Receive+0x386>
  {
    errorcode = HAL_ERROR;
 80903ce:	2301      	movs	r3, #1
 80903d0:	77fb      	strb	r3, [r7, #31]
 80903d2:	e000      	b.n	80903d6 <HAL_SPI_Receive+0x388>
  }

error :
 80903d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80903d6:	68fb      	ldr	r3, [r7, #12]
 80903d8:	2201      	movs	r2, #1
 80903da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80903de:	68fb      	ldr	r3, [r7, #12]
 80903e0:	2200      	movs	r2, #0
 80903e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80903e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80903e8:	4618      	mov	r0, r3
 80903ea:	3720      	adds	r7, #32
 80903ec:	46bd      	mov	sp, r7
 80903ee:	bd80      	pop	{r7, pc}

080903f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80903f0:	b580      	push	{r7, lr}
 80903f2:	b08c      	sub	sp, #48	; 0x30
 80903f4:	af02      	add	r7, sp, #8
 80903f6:	60f8      	str	r0, [r7, #12]
 80903f8:	60b9      	str	r1, [r7, #8]
 80903fa:	607a      	str	r2, [r7, #4]
 80903fc:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80903fe:	2300      	movs	r3, #0
 8090400:	61fb      	str	r3, [r7, #28]
 8090402:	2300      	movs	r3, #0
 8090404:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 8090406:	2300      	movs	r3, #0
 8090408:	827b      	strh	r3, [r7, #18]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 809040a:	2300      	movs	r3, #0
 809040c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 809040e:	2301      	movs	r3, #1
 8090410:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8090412:	2300      	movs	r3, #0
 8090414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8090418:	68fb      	ldr	r3, [r7, #12]
 809041a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 809041e:	2b01      	cmp	r3, #1
 8090420:	d101      	bne.n	8090426 <HAL_SPI_TransmitReceive+0x36>
 8090422:	2302      	movs	r3, #2
 8090424:	e29b      	b.n	809095e <HAL_SPI_TransmitReceive+0x56e>
 8090426:	68fb      	ldr	r3, [r7, #12]
 8090428:	2201      	movs	r2, #1
 809042a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 809042e:	f7f8 fe97 	bl	8089160 <HAL_GetTick>
 8090432:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8090434:	68fb      	ldr	r3, [r7, #12]
 8090436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 809043a:	b2db      	uxtb	r3, r3
 809043c:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 809043e:	68fb      	ldr	r3, [r7, #12]
 8090440:	685b      	ldr	r3, [r3, #4]
 8090442:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8090444:	69fb      	ldr	r3, [r7, #28]
 8090446:	2b01      	cmp	r3, #1
 8090448:	d00e      	beq.n	8090468 <HAL_SPI_TransmitReceive+0x78>
 809044a:	69bb      	ldr	r3, [r7, #24]
 809044c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8090450:	d106      	bne.n	8090460 <HAL_SPI_TransmitReceive+0x70>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8090452:	68fb      	ldr	r3, [r7, #12]
 8090454:	689b      	ldr	r3, [r3, #8]
 8090456:	2b00      	cmp	r3, #0
 8090458:	d102      	bne.n	8090460 <HAL_SPI_TransmitReceive+0x70>
 809045a:	69fb      	ldr	r3, [r7, #28]
 809045c:	2b04      	cmp	r3, #4
 809045e:	d003      	beq.n	8090468 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8090460:	2302      	movs	r3, #2
 8090462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8090466:	e270      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8090468:	68bb      	ldr	r3, [r7, #8]
 809046a:	2b00      	cmp	r3, #0
 809046c:	d005      	beq.n	809047a <HAL_SPI_TransmitReceive+0x8a>
 809046e:	687b      	ldr	r3, [r7, #4]
 8090470:	2b00      	cmp	r3, #0
 8090472:	d002      	beq.n	809047a <HAL_SPI_TransmitReceive+0x8a>
 8090474:	887b      	ldrh	r3, [r7, #2]
 8090476:	2b00      	cmp	r3, #0
 8090478:	d103      	bne.n	8090482 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 809047a:	2301      	movs	r3, #1
 809047c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8090480:	e263      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8090482:	68fb      	ldr	r3, [r7, #12]
 8090484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8090488:	b2db      	uxtb	r3, r3
 809048a:	2b04      	cmp	r3, #4
 809048c:	d003      	beq.n	8090496 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 809048e:	68fb      	ldr	r3, [r7, #12]
 8090490:	2205      	movs	r2, #5
 8090492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8090496:	68fb      	ldr	r3, [r7, #12]
 8090498:	2200      	movs	r2, #0
 809049a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 809049c:	68fb      	ldr	r3, [r7, #12]
 809049e:	687a      	ldr	r2, [r7, #4]
 80904a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80904a2:	68fb      	ldr	r3, [r7, #12]
 80904a4:	887a      	ldrh	r2, [r7, #2]
 80904a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80904aa:	68fb      	ldr	r3, [r7, #12]
 80904ac:	887a      	ldrh	r2, [r7, #2]
 80904ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80904b2:	68fb      	ldr	r3, [r7, #12]
 80904b4:	68ba      	ldr	r2, [r7, #8]
 80904b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80904b8:	68fb      	ldr	r3, [r7, #12]
 80904ba:	887a      	ldrh	r2, [r7, #2]
 80904bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80904be:	68fb      	ldr	r3, [r7, #12]
 80904c0:	887a      	ldrh	r2, [r7, #2]
 80904c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80904c4:	68fb      	ldr	r3, [r7, #12]
 80904c6:	2200      	movs	r2, #0
 80904c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80904ca:	68fb      	ldr	r3, [r7, #12]
 80904cc:	2200      	movs	r2, #0
 80904ce:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80904d0:	68fb      	ldr	r3, [r7, #12]
 80904d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80904d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80904d8:	d110      	bne.n	80904fc <HAL_SPI_TransmitReceive+0x10c>
  {
    SPI_RESET_CRC(hspi);
 80904da:	68fb      	ldr	r3, [r7, #12]
 80904dc:	681b      	ldr	r3, [r3, #0]
 80904de:	6819      	ldr	r1, [r3, #0]
 80904e0:	68fb      	ldr	r3, [r7, #12]
 80904e2:	681a      	ldr	r2, [r3, #0]
 80904e4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80904e8:	400b      	ands	r3, r1
 80904ea:	6013      	str	r3, [r2, #0]
 80904ec:	68fb      	ldr	r3, [r7, #12]
 80904ee:	681b      	ldr	r3, [r3, #0]
 80904f0:	681a      	ldr	r2, [r3, #0]
 80904f2:	68fb      	ldr	r3, [r7, #12]
 80904f4:	681b      	ldr	r3, [r3, #0]
 80904f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80904fa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 80904fc:	68fb      	ldr	r3, [r7, #12]
 80904fe:	68db      	ldr	r3, [r3, #12]
 8090500:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8090504:	d805      	bhi.n	8090512 <HAL_SPI_TransmitReceive+0x122>
 8090506:	68fb      	ldr	r3, [r7, #12]
 8090508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 809050c:	b29b      	uxth	r3, r3
 809050e:	2b01      	cmp	r3, #1
 8090510:	d908      	bls.n	8090524 <HAL_SPI_TransmitReceive+0x134>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8090512:	68fb      	ldr	r3, [r7, #12]
 8090514:	681b      	ldr	r3, [r3, #0]
 8090516:	685a      	ldr	r2, [r3, #4]
 8090518:	68fb      	ldr	r3, [r7, #12]
 809051a:	681b      	ldr	r3, [r3, #0]
 809051c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8090520:	605a      	str	r2, [r3, #4]
 8090522:	e007      	b.n	8090534 <HAL_SPI_TransmitReceive+0x144>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8090524:	68fb      	ldr	r3, [r7, #12]
 8090526:	681b      	ldr	r3, [r3, #0]
 8090528:	685a      	ldr	r2, [r3, #4]
 809052a:	68fb      	ldr	r3, [r7, #12]
 809052c:	681b      	ldr	r3, [r3, #0]
 809052e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8090532:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8090534:	68fb      	ldr	r3, [r7, #12]
 8090536:	681b      	ldr	r3, [r3, #0]
 8090538:	681b      	ldr	r3, [r3, #0]
 809053a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 809053e:	2b40      	cmp	r3, #64	; 0x40
 8090540:	d007      	beq.n	8090552 <HAL_SPI_TransmitReceive+0x162>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8090542:	68fb      	ldr	r3, [r7, #12]
 8090544:	681b      	ldr	r3, [r3, #0]
 8090546:	681a      	ldr	r2, [r3, #0]
 8090548:	68fb      	ldr	r3, [r7, #12]
 809054a:	681b      	ldr	r3, [r3, #0]
 809054c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8090550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8090552:	68fb      	ldr	r3, [r7, #12]
 8090554:	68db      	ldr	r3, [r3, #12]
 8090556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 809055a:	f240 80a0 	bls.w	809069e <HAL_SPI_TransmitReceive+0x2ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 809055e:	68fb      	ldr	r3, [r7, #12]
 8090560:	685b      	ldr	r3, [r3, #4]
 8090562:	2b00      	cmp	r3, #0
 8090564:	d005      	beq.n	8090572 <HAL_SPI_TransmitReceive+0x182>
 8090566:	68fb      	ldr	r3, [r7, #12]
 8090568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 809056a:	b29b      	uxth	r3, r3
 809056c:	2b01      	cmp	r3, #1
 809056e:	f040 8089 	bne.w	8090684 <HAL_SPI_TransmitReceive+0x294>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8090572:	68bb      	ldr	r3, [r7, #8]
 8090574:	881a      	ldrh	r2, [r3, #0]
 8090576:	68fb      	ldr	r3, [r7, #12]
 8090578:	681b      	ldr	r3, [r3, #0]
 809057a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 809057c:	68bb      	ldr	r3, [r7, #8]
 809057e:	3302      	adds	r3, #2
 8090580:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8090582:	68fb      	ldr	r3, [r7, #12]
 8090584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090586:	b29b      	uxth	r3, r3
 8090588:	3b01      	subs	r3, #1
 809058a:	b29a      	uxth	r2, r3
 809058c:	68fb      	ldr	r3, [r7, #12]
 809058e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8090590:	e078      	b.n	8090684 <HAL_SPI_TransmitReceive+0x294>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8090592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8090594:	2b00      	cmp	r3, #0
 8090596:	d044      	beq.n	8090622 <HAL_SPI_TransmitReceive+0x232>
 8090598:	68fb      	ldr	r3, [r7, #12]
 809059a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 809059c:	b29b      	uxth	r3, r3
 809059e:	2b00      	cmp	r3, #0
 80905a0:	d03f      	beq.n	8090622 <HAL_SPI_TransmitReceive+0x232>
 80905a2:	68fb      	ldr	r3, [r7, #12]
 80905a4:	681b      	ldr	r3, [r3, #0]
 80905a6:	689b      	ldr	r3, [r3, #8]
 80905a8:	f003 0302 	and.w	r3, r3, #2
 80905ac:	2b02      	cmp	r3, #2
 80905ae:	d138      	bne.n	8090622 <HAL_SPI_TransmitReceive+0x232>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80905b0:	68bb      	ldr	r3, [r7, #8]
 80905b2:	881a      	ldrh	r2, [r3, #0]
 80905b4:	68fb      	ldr	r3, [r7, #12]
 80905b6:	681b      	ldr	r3, [r3, #0]
 80905b8:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80905ba:	68bb      	ldr	r3, [r7, #8]
 80905bc:	3302      	adds	r3, #2
 80905be:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80905c0:	68fb      	ldr	r3, [r7, #12]
 80905c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80905c4:	b29b      	uxth	r3, r3
 80905c6:	3b01      	subs	r3, #1
 80905c8:	b29a      	uxth	r2, r3
 80905ca:	68fb      	ldr	r3, [r7, #12]
 80905cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80905ce:	2300      	movs	r3, #0
 80905d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80905d2:	68fb      	ldr	r3, [r7, #12]
 80905d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80905d6:	b29b      	uxth	r3, r3
 80905d8:	2b00      	cmp	r3, #0
 80905da:	d122      	bne.n	8090622 <HAL_SPI_TransmitReceive+0x232>
 80905dc:	68fb      	ldr	r3, [r7, #12]
 80905de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80905e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80905e4:	d11d      	bne.n	8090622 <HAL_SPI_TransmitReceive+0x232>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80905e6:	68fb      	ldr	r3, [r7, #12]
 80905e8:	681b      	ldr	r3, [r3, #0]
 80905ea:	681b      	ldr	r3, [r3, #0]
 80905ec:	f003 0304 	and.w	r3, r3, #4
 80905f0:	2b00      	cmp	r3, #0
 80905f2:	d10e      	bne.n	8090612 <HAL_SPI_TransmitReceive+0x222>
 80905f4:	68fb      	ldr	r3, [r7, #12]
 80905f6:	681b      	ldr	r3, [r3, #0]
 80905f8:	685b      	ldr	r3, [r3, #4]
 80905fa:	f003 0308 	and.w	r3, r3, #8
 80905fe:	2b08      	cmp	r3, #8
 8090600:	d107      	bne.n	8090612 <HAL_SPI_TransmitReceive+0x222>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8090602:	68fb      	ldr	r3, [r7, #12]
 8090604:	681b      	ldr	r3, [r3, #0]
 8090606:	681a      	ldr	r2, [r3, #0]
 8090608:	68fb      	ldr	r3, [r7, #12]
 809060a:	681b      	ldr	r3, [r3, #0]
 809060c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8090610:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8090612:	68fb      	ldr	r3, [r7, #12]
 8090614:	681b      	ldr	r3, [r3, #0]
 8090616:	681a      	ldr	r2, [r3, #0]
 8090618:	68fb      	ldr	r3, [r7, #12]
 809061a:	681b      	ldr	r3, [r3, #0]
 809061c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8090620:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8090622:	68fb      	ldr	r3, [r7, #12]
 8090624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090628:	b29b      	uxth	r3, r3
 809062a:	2b00      	cmp	r3, #0
 809062c:	d01a      	beq.n	8090664 <HAL_SPI_TransmitReceive+0x274>
 809062e:	68fb      	ldr	r3, [r7, #12]
 8090630:	681b      	ldr	r3, [r3, #0]
 8090632:	689b      	ldr	r3, [r3, #8]
 8090634:	f003 0301 	and.w	r3, r3, #1
 8090638:	2b01      	cmp	r3, #1
 809063a:	d113      	bne.n	8090664 <HAL_SPI_TransmitReceive+0x274>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 809063c:	68fb      	ldr	r3, [r7, #12]
 809063e:	681b      	ldr	r3, [r3, #0]
 8090640:	68db      	ldr	r3, [r3, #12]
 8090642:	b29a      	uxth	r2, r3
 8090644:	687b      	ldr	r3, [r7, #4]
 8090646:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8090648:	687b      	ldr	r3, [r7, #4]
 809064a:	3302      	adds	r3, #2
 809064c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 809064e:	68fb      	ldr	r3, [r7, #12]
 8090650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090654:	b29b      	uxth	r3, r3
 8090656:	3b01      	subs	r3, #1
 8090658:	b29a      	uxth	r2, r3
 809065a:	68fb      	ldr	r3, [r7, #12]
 809065c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8090660:	2301      	movs	r3, #1
 8090662:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8090664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8090666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 809066a:	d00b      	beq.n	8090684 <HAL_SPI_TransmitReceive+0x294>
 809066c:	f7f8 fd78 	bl	8089160 <HAL_GetTick>
 8090670:	4602      	mov	r2, r0
 8090672:	697b      	ldr	r3, [r7, #20]
 8090674:	1ad3      	subs	r3, r2, r3
 8090676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8090678:	429a      	cmp	r2, r3
 809067a:	d803      	bhi.n	8090684 <HAL_SPI_TransmitReceive+0x294>
      {
        errorcode = HAL_TIMEOUT;
 809067c:	2303      	movs	r3, #3
 809067e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8090682:	e162      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8090684:	68fb      	ldr	r3, [r7, #12]
 8090686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090688:	b29b      	uxth	r3, r3
 809068a:	2b00      	cmp	r3, #0
 809068c:	d181      	bne.n	8090592 <HAL_SPI_TransmitReceive+0x1a2>
 809068e:	68fb      	ldr	r3, [r7, #12]
 8090690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090694:	b29b      	uxth	r3, r3
 8090696:	2b00      	cmp	r3, #0
 8090698:	f47f af7b 	bne.w	8090592 <HAL_SPI_TransmitReceive+0x1a2>
 809069c:	e0dd      	b.n	809085a <HAL_SPI_TransmitReceive+0x46a>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 809069e:	68fb      	ldr	r3, [r7, #12]
 80906a0:	685b      	ldr	r3, [r3, #4]
 80906a2:	2b00      	cmp	r3, #0
 80906a4:	d005      	beq.n	80906b2 <HAL_SPI_TransmitReceive+0x2c2>
 80906a6:	68fb      	ldr	r3, [r7, #12]
 80906a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80906aa:	b29b      	uxth	r3, r3
 80906ac:	2b01      	cmp	r3, #1
 80906ae:	f040 80c7 	bne.w	8090840 <HAL_SPI_TransmitReceive+0x450>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
 80906b2:	68fb      	ldr	r3, [r7, #12]
 80906b4:	681b      	ldr	r3, [r3, #0]
 80906b6:	330c      	adds	r3, #12
 80906b8:	68ba      	ldr	r2, [r7, #8]
 80906ba:	7812      	ldrb	r2, [r2, #0]
 80906bc:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80906be:	68bb      	ldr	r3, [r7, #8]
 80906c0:	3301      	adds	r3, #1
 80906c2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80906c4:	68fb      	ldr	r3, [r7, #12]
 80906c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80906c8:	b29b      	uxth	r3, r3
 80906ca:	3b01      	subs	r3, #1
 80906cc:	b29a      	uxth	r2, r3
 80906ce:	68fb      	ldr	r3, [r7, #12]
 80906d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80906d2:	e0b5      	b.n	8090840 <HAL_SPI_TransmitReceive+0x450>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80906d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80906d6:	2b00      	cmp	r3, #0
 80906d8:	d059      	beq.n	809078e <HAL_SPI_TransmitReceive+0x39e>
 80906da:	68fb      	ldr	r3, [r7, #12]
 80906dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80906de:	b29b      	uxth	r3, r3
 80906e0:	2b00      	cmp	r3, #0
 80906e2:	d054      	beq.n	809078e <HAL_SPI_TransmitReceive+0x39e>
 80906e4:	68fb      	ldr	r3, [r7, #12]
 80906e6:	681b      	ldr	r3, [r3, #0]
 80906e8:	689b      	ldr	r3, [r3, #8]
 80906ea:	f003 0302 	and.w	r3, r3, #2
 80906ee:	2b02      	cmp	r3, #2
 80906f0:	d14d      	bne.n	809078e <HAL_SPI_TransmitReceive+0x39e>
      {
        if (hspi->TxXferCount > 1U)
 80906f2:	68fb      	ldr	r3, [r7, #12]
 80906f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80906f6:	b29b      	uxth	r3, r3
 80906f8:	2b01      	cmp	r3, #1
 80906fa:	d90f      	bls.n	809071c <HAL_SPI_TransmitReceive+0x32c>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80906fc:	68bb      	ldr	r3, [r7, #8]
 80906fe:	881a      	ldrh	r2, [r3, #0]
 8090700:	68fb      	ldr	r3, [r7, #12]
 8090702:	681b      	ldr	r3, [r3, #0]
 8090704:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8090706:	68bb      	ldr	r3, [r7, #8]
 8090708:	3302      	adds	r3, #2
 809070a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 809070c:	68fb      	ldr	r3, [r7, #12]
 809070e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090710:	b29b      	uxth	r3, r3
 8090712:	3b02      	subs	r3, #2
 8090714:	b29a      	uxth	r2, r3
 8090716:	68fb      	ldr	r3, [r7, #12]
 8090718:	87da      	strh	r2, [r3, #62]	; 0x3e
 809071a:	e00e      	b.n	809073a <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 809071c:	68bb      	ldr	r3, [r7, #8]
 809071e:	1c5a      	adds	r2, r3, #1
 8090720:	60ba      	str	r2, [r7, #8]
 8090722:	68fa      	ldr	r2, [r7, #12]
 8090724:	6812      	ldr	r2, [r2, #0]
 8090726:	320c      	adds	r2, #12
 8090728:	781b      	ldrb	r3, [r3, #0]
 809072a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 809072c:	68fb      	ldr	r3, [r7, #12]
 809072e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090730:	b29b      	uxth	r3, r3
 8090732:	3b01      	subs	r3, #1
 8090734:	b29a      	uxth	r2, r3
 8090736:	68fb      	ldr	r3, [r7, #12]
 8090738:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 809073a:	2300      	movs	r3, #0
 809073c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 809073e:	68fb      	ldr	r3, [r7, #12]
 8090740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090742:	b29b      	uxth	r3, r3
 8090744:	2b00      	cmp	r3, #0
 8090746:	d122      	bne.n	809078e <HAL_SPI_TransmitReceive+0x39e>
 8090748:	68fb      	ldr	r3, [r7, #12]
 809074a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 809074c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8090750:	d11d      	bne.n	809078e <HAL_SPI_TransmitReceive+0x39e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8090752:	68fb      	ldr	r3, [r7, #12]
 8090754:	681b      	ldr	r3, [r3, #0]
 8090756:	681b      	ldr	r3, [r3, #0]
 8090758:	f003 0304 	and.w	r3, r3, #4
 809075c:	2b00      	cmp	r3, #0
 809075e:	d10e      	bne.n	809077e <HAL_SPI_TransmitReceive+0x38e>
 8090760:	68fb      	ldr	r3, [r7, #12]
 8090762:	681b      	ldr	r3, [r3, #0]
 8090764:	685b      	ldr	r3, [r3, #4]
 8090766:	f003 0308 	and.w	r3, r3, #8
 809076a:	2b08      	cmp	r3, #8
 809076c:	d107      	bne.n	809077e <HAL_SPI_TransmitReceive+0x38e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 809076e:	68fb      	ldr	r3, [r7, #12]
 8090770:	681b      	ldr	r3, [r3, #0]
 8090772:	681a      	ldr	r2, [r3, #0]
 8090774:	68fb      	ldr	r3, [r7, #12]
 8090776:	681b      	ldr	r3, [r3, #0]
 8090778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 809077c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 809077e:	68fb      	ldr	r3, [r7, #12]
 8090780:	681b      	ldr	r3, [r3, #0]
 8090782:	681a      	ldr	r2, [r3, #0]
 8090784:	68fb      	ldr	r3, [r7, #12]
 8090786:	681b      	ldr	r3, [r3, #0]
 8090788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 809078c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 809078e:	68fb      	ldr	r3, [r7, #12]
 8090790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090794:	b29b      	uxth	r3, r3
 8090796:	2b00      	cmp	r3, #0
 8090798:	d042      	beq.n	8090820 <HAL_SPI_TransmitReceive+0x430>
 809079a:	68fb      	ldr	r3, [r7, #12]
 809079c:	681b      	ldr	r3, [r3, #0]
 809079e:	689b      	ldr	r3, [r3, #8]
 80907a0:	f003 0301 	and.w	r3, r3, #1
 80907a4:	2b01      	cmp	r3, #1
 80907a6:	d13b      	bne.n	8090820 <HAL_SPI_TransmitReceive+0x430>
      {
        if (hspi->RxXferCount > 1U)
 80907a8:	68fb      	ldr	r3, [r7, #12]
 80907aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80907ae:	b29b      	uxth	r3, r3
 80907b0:	2b01      	cmp	r3, #1
 80907b2:	d920      	bls.n	80907f6 <HAL_SPI_TransmitReceive+0x406>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80907b4:	68fb      	ldr	r3, [r7, #12]
 80907b6:	681b      	ldr	r3, [r3, #0]
 80907b8:	68db      	ldr	r3, [r3, #12]
 80907ba:	b29a      	uxth	r2, r3
 80907bc:	687b      	ldr	r3, [r7, #4]
 80907be:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80907c0:	687b      	ldr	r3, [r7, #4]
 80907c2:	3302      	adds	r3, #2
 80907c4:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80907c6:	68fb      	ldr	r3, [r7, #12]
 80907c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80907cc:	b29b      	uxth	r3, r3
 80907ce:	3b02      	subs	r3, #2
 80907d0:	b29a      	uxth	r2, r3
 80907d2:	68fb      	ldr	r3, [r7, #12]
 80907d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80907d8:	68fb      	ldr	r3, [r7, #12]
 80907da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80907de:	b29b      	uxth	r3, r3
 80907e0:	2b01      	cmp	r3, #1
 80907e2:	d81b      	bhi.n	809081c <HAL_SPI_TransmitReceive+0x42c>
          {
            /* set fiforxthreshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80907e4:	68fb      	ldr	r3, [r7, #12]
 80907e6:	681b      	ldr	r3, [r3, #0]
 80907e8:	685a      	ldr	r2, [r3, #4]
 80907ea:	68fb      	ldr	r3, [r7, #12]
 80907ec:	681b      	ldr	r3, [r3, #0]
 80907ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80907f2:	605a      	str	r2, [r3, #4]
 80907f4:	e012      	b.n	809081c <HAL_SPI_TransmitReceive+0x42c>
          }
        }
        else
        {
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80907f6:	68fb      	ldr	r3, [r7, #12]
 80907f8:	681b      	ldr	r3, [r3, #0]
 80907fa:	f103 020c 	add.w	r2, r3, #12
 80907fe:	687b      	ldr	r3, [r7, #4]
 8090800:	1c59      	adds	r1, r3, #1
 8090802:	6079      	str	r1, [r7, #4]
 8090804:	7812      	ldrb	r2, [r2, #0]
 8090806:	b2d2      	uxtb	r2, r2
 8090808:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 809080a:	68fb      	ldr	r3, [r7, #12]
 809080c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090810:	b29b      	uxth	r3, r3
 8090812:	3b01      	subs	r3, #1
 8090814:	b29a      	uxth	r2, r3
 8090816:	68fb      	ldr	r3, [r7, #12]
 8090818:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 809081c:	2301      	movs	r3, #1
 809081e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8090820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8090822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8090826:	d00b      	beq.n	8090840 <HAL_SPI_TransmitReceive+0x450>
 8090828:	f7f8 fc9a 	bl	8089160 <HAL_GetTick>
 809082c:	4602      	mov	r2, r0
 809082e:	697b      	ldr	r3, [r7, #20]
 8090830:	1ad3      	subs	r3, r2, r3
 8090832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8090834:	429a      	cmp	r2, r3
 8090836:	d803      	bhi.n	8090840 <HAL_SPI_TransmitReceive+0x450>
      {
        errorcode = HAL_TIMEOUT;
 8090838:	2303      	movs	r3, #3
 809083a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 809083e:	e084      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8090840:	68fb      	ldr	r3, [r7, #12]
 8090842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8090844:	b29b      	uxth	r3, r3
 8090846:	2b00      	cmp	r3, #0
 8090848:	f47f af44 	bne.w	80906d4 <HAL_SPI_TransmitReceive+0x2e4>
 809084c:	68fb      	ldr	r3, [r7, #12]
 809084e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8090852:	b29b      	uxth	r3, r3
 8090854:	2b00      	cmp	r3, #0
 8090856:	f47f af3d 	bne.w	80906d4 <HAL_SPI_TransmitReceive+0x2e4>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 809085a:	68fb      	ldr	r3, [r7, #12]
 809085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 809085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8090862:	d149      	bne.n	80908f8 <HAL_SPI_TransmitReceive+0x508>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8090864:	697b      	ldr	r3, [r7, #20]
 8090866:	9300      	str	r3, [sp, #0]
 8090868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 809086a:	2201      	movs	r2, #1
 809086c:	2101      	movs	r1, #1
 809086e:	68f8      	ldr	r0, [r7, #12]
 8090870:	f000 f879 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 8090874:	4603      	mov	r3, r0
 8090876:	2b00      	cmp	r3, #0
 8090878:	d009      	beq.n	809088e <HAL_SPI_TransmitReceive+0x49e>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 809087a:	68fb      	ldr	r3, [r7, #12]
 809087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 809087e:	f043 0202 	orr.w	r2, r3, #2
 8090882:	68fb      	ldr	r3, [r7, #12]
 8090884:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8090886:	2303      	movs	r3, #3
 8090888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      goto error;
 809088c:	e05d      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 809088e:	68fb      	ldr	r3, [r7, #12]
 8090890:	68db      	ldr	r3, [r3, #12]
 8090892:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8090896:	d106      	bne.n	80908a6 <HAL_SPI_TransmitReceive+0x4b6>
    {
      tmpreg = hspi->Instance->DR;
 8090898:	68fb      	ldr	r3, [r7, #12]
 809089a:	681b      	ldr	r3, [r3, #0]
 809089c:	68db      	ldr	r3, [r3, #12]
 809089e:	b29b      	uxth	r3, r3
 80908a0:	827b      	strh	r3, [r7, #18]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80908a2:	8a7b      	ldrh	r3, [r7, #18]
 80908a4:	e028      	b.n	80908f8 <HAL_SPI_TransmitReceive+0x508>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80908a6:	68fb      	ldr	r3, [r7, #12]
 80908a8:	681b      	ldr	r3, [r3, #0]
 80908aa:	330c      	adds	r3, #12
 80908ac:	781b      	ldrb	r3, [r3, #0]
 80908ae:	b2db      	uxtb	r3, r3
 80908b0:	b29b      	uxth	r3, r3
 80908b2:	827b      	strh	r3, [r7, #18]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80908b4:	8a7b      	ldrh	r3, [r7, #18]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80908b6:	68fb      	ldr	r3, [r7, #12]
 80908b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80908ba:	2b02      	cmp	r3, #2
 80908bc:	d11c      	bne.n	80908f8 <HAL_SPI_TransmitReceive+0x508>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80908be:	697b      	ldr	r3, [r7, #20]
 80908c0:	9300      	str	r3, [sp, #0]
 80908c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80908c4:	2201      	movs	r2, #1
 80908c6:	2101      	movs	r1, #1
 80908c8:	68f8      	ldr	r0, [r7, #12]
 80908ca:	f000 f84c 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 80908ce:	4603      	mov	r3, r0
 80908d0:	2b00      	cmp	r3, #0
 80908d2:	d009      	beq.n	80908e8 <HAL_SPI_TransmitReceive+0x4f8>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80908d4:	68fb      	ldr	r3, [r7, #12]
 80908d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80908d8:	f043 0202 	orr.w	r2, r3, #2
 80908dc:	68fb      	ldr	r3, [r7, #12]
 80908de:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80908e0:	2303      	movs	r3, #3
 80908e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
          goto error;
 80908e6:	e030      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80908e8:	68fb      	ldr	r3, [r7, #12]
 80908ea:	681b      	ldr	r3, [r3, #0]
 80908ec:	330c      	adds	r3, #12
 80908ee:	781b      	ldrb	r3, [r3, #0]
 80908f0:	b2db      	uxtb	r3, r3
 80908f2:	b29b      	uxth	r3, r3
 80908f4:	827b      	strh	r3, [r7, #18]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 80908f6:	8a7b      	ldrh	r3, [r7, #18]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80908f8:	68fb      	ldr	r3, [r7, #12]
 80908fa:	681b      	ldr	r3, [r3, #0]
 80908fc:	689b      	ldr	r3, [r3, #8]
 80908fe:	f003 0310 	and.w	r3, r3, #16
 8090902:	2b10      	cmp	r3, #16
 8090904:	d10d      	bne.n	8090922 <HAL_SPI_TransmitReceive+0x532>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8090906:	68fb      	ldr	r3, [r7, #12]
 8090908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 809090a:	f043 0202 	orr.w	r2, r3, #2
 809090e:	68fb      	ldr	r3, [r7, #12]
 8090910:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8090912:	68fb      	ldr	r3, [r7, #12]
 8090914:	681b      	ldr	r3, [r3, #0]
 8090916:	f64f 72ef 	movw	r2, #65519	; 0xffef
 809091a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 809091c:	2301      	movs	r3, #1
 809091e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8090922:	697a      	ldr	r2, [r7, #20]
 8090924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8090926:	68f8      	ldr	r0, [r7, #12]
 8090928:	f000 f949 	bl	8090bbe <SPI_EndRxTxTransaction>
 809092c:	4603      	mov	r3, r0
 809092e:	2b00      	cmp	r3, #0
 8090930:	d002      	beq.n	8090938 <HAL_SPI_TransmitReceive+0x548>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8090932:	68fb      	ldr	r3, [r7, #12]
 8090934:	2220      	movs	r2, #32
 8090936:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8090938:	68fb      	ldr	r3, [r7, #12]
 809093a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 809093c:	2b00      	cmp	r3, #0
 809093e:	d003      	beq.n	8090948 <HAL_SPI_TransmitReceive+0x558>
  {
    errorcode = HAL_ERROR;
 8090940:	2301      	movs	r3, #1
 8090942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8090946:	e000      	b.n	809094a <HAL_SPI_TransmitReceive+0x55a>
  }

error :
 8090948:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 809094a:	68fb      	ldr	r3, [r7, #12]
 809094c:	2201      	movs	r2, #1
 809094e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8090952:	68fb      	ldr	r3, [r7, #12]
 8090954:	2200      	movs	r2, #0
 8090956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 809095a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 809095e:	4618      	mov	r0, r3
 8090960:	3728      	adds	r7, #40	; 0x28
 8090962:	46bd      	mov	sp, r7
 8090964:	bd80      	pop	{r7, pc}

08090966 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8090966:	b580      	push	{r7, lr}
 8090968:	b084      	sub	sp, #16
 809096a:	af00      	add	r7, sp, #0
 809096c:	60f8      	str	r0, [r7, #12]
 809096e:	60b9      	str	r1, [r7, #8]
 8090970:	607a      	str	r2, [r7, #4]
 8090972:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Flag) != State)
 8090974:	e04d      	b.n	8090a12 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8090976:	683b      	ldr	r3, [r7, #0]
 8090978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 809097c:	d049      	beq.n	8090a12 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 809097e:	683b      	ldr	r3, [r7, #0]
 8090980:	2b00      	cmp	r3, #0
 8090982:	d007      	beq.n	8090994 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8090984:	f7f8 fbec 	bl	8089160 <HAL_GetTick>
 8090988:	4602      	mov	r2, r0
 809098a:	69bb      	ldr	r3, [r7, #24]
 809098c:	1ad3      	subs	r3, r2, r3
 809098e:	683a      	ldr	r2, [r7, #0]
 8090990:	429a      	cmp	r2, r3
 8090992:	d83e      	bhi.n	8090a12 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8090994:	68fb      	ldr	r3, [r7, #12]
 8090996:	681b      	ldr	r3, [r3, #0]
 8090998:	685a      	ldr	r2, [r3, #4]
 809099a:	68fb      	ldr	r3, [r7, #12]
 809099c:	681b      	ldr	r3, [r3, #0]
 809099e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80909a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80909a4:	68fb      	ldr	r3, [r7, #12]
 80909a6:	685b      	ldr	r3, [r3, #4]
 80909a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80909ac:	d111      	bne.n	80909d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80909ae:	68fb      	ldr	r3, [r7, #12]
 80909b0:	689b      	ldr	r3, [r3, #8]
 80909b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80909b6:	d004      	beq.n	80909c2 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80909b8:	68fb      	ldr	r3, [r7, #12]
 80909ba:	689b      	ldr	r3, [r3, #8]
 80909bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80909c0:	d107      	bne.n	80909d2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80909c2:	68fb      	ldr	r3, [r7, #12]
 80909c4:	681b      	ldr	r3, [r3, #0]
 80909c6:	681a      	ldr	r2, [r3, #0]
 80909c8:	68fb      	ldr	r3, [r7, #12]
 80909ca:	681b      	ldr	r3, [r3, #0]
 80909cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80909d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80909d2:	68fb      	ldr	r3, [r7, #12]
 80909d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80909d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80909da:	d110      	bne.n	80909fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80909dc:	68fb      	ldr	r3, [r7, #12]
 80909de:	681b      	ldr	r3, [r3, #0]
 80909e0:	6819      	ldr	r1, [r3, #0]
 80909e2:	68fb      	ldr	r3, [r7, #12]
 80909e4:	681a      	ldr	r2, [r3, #0]
 80909e6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80909ea:	400b      	ands	r3, r1
 80909ec:	6013      	str	r3, [r2, #0]
 80909ee:	68fb      	ldr	r3, [r7, #12]
 80909f0:	681b      	ldr	r3, [r3, #0]
 80909f2:	681a      	ldr	r2, [r3, #0]
 80909f4:	68fb      	ldr	r3, [r7, #12]
 80909f6:	681b      	ldr	r3, [r3, #0]
 80909f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80909fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80909fe:	68fb      	ldr	r3, [r7, #12]
 8090a00:	2201      	movs	r2, #1
 8090a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8090a06:	68fb      	ldr	r3, [r7, #12]
 8090a08:	2200      	movs	r2, #0
 8090a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8090a0e:	2303      	movs	r3, #3
 8090a10:	e008      	b.n	8090a24 <SPI_WaitFlagStateUntilTimeout+0xbe>
  while ((hspi->Instance->SR & Flag) != State)
 8090a12:	68fb      	ldr	r3, [r7, #12]
 8090a14:	681b      	ldr	r3, [r3, #0]
 8090a16:	689a      	ldr	r2, [r3, #8]
 8090a18:	68bb      	ldr	r3, [r7, #8]
 8090a1a:	4013      	ands	r3, r2
 8090a1c:	687a      	ldr	r2, [r7, #4]
 8090a1e:	429a      	cmp	r2, r3
 8090a20:	d1a9      	bne.n	8090976 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8090a22:	2300      	movs	r3, #0
}
 8090a24:	4618      	mov	r0, r3
 8090a26:	3710      	adds	r7, #16
 8090a28:	46bd      	mov	sp, r7
 8090a2a:	bd80      	pop	{r7, pc}

08090a2c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8090a2c:	b580      	push	{r7, lr}
 8090a2e:	b086      	sub	sp, #24
 8090a30:	af00      	add	r7, sp, #0
 8090a32:	60f8      	str	r0, [r7, #12]
 8090a34:	60b9      	str	r1, [r7, #8]
 8090a36:	607a      	str	r2, [r7, #4]
 8090a38:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8090a3a:	e05b      	b.n	8090af4 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8090a3c:	68bb      	ldr	r3, [r7, #8]
 8090a3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8090a42:	d109      	bne.n	8090a58 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8090a44:	687b      	ldr	r3, [r7, #4]
 8090a46:	2b00      	cmp	r3, #0
 8090a48:	d106      	bne.n	8090a58 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8090a4a:	68fb      	ldr	r3, [r7, #12]
 8090a4c:	681b      	ldr	r3, [r3, #0]
 8090a4e:	330c      	adds	r3, #12
 8090a50:	781b      	ldrb	r3, [r3, #0]
 8090a52:	b2db      	uxtb	r3, r3
 8090a54:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8090a56:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8090a58:	683b      	ldr	r3, [r7, #0]
 8090a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8090a5e:	d049      	beq.n	8090af4 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8090a60:	683b      	ldr	r3, [r7, #0]
 8090a62:	2b00      	cmp	r3, #0
 8090a64:	d007      	beq.n	8090a76 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8090a66:	f7f8 fb7b 	bl	8089160 <HAL_GetTick>
 8090a6a:	4602      	mov	r2, r0
 8090a6c:	6a3b      	ldr	r3, [r7, #32]
 8090a6e:	1ad3      	subs	r3, r2, r3
 8090a70:	683a      	ldr	r2, [r7, #0]
 8090a72:	429a      	cmp	r2, r3
 8090a74:	d83e      	bhi.n	8090af4 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8090a76:	68fb      	ldr	r3, [r7, #12]
 8090a78:	681b      	ldr	r3, [r3, #0]
 8090a7a:	685a      	ldr	r2, [r3, #4]
 8090a7c:	68fb      	ldr	r3, [r7, #12]
 8090a7e:	681b      	ldr	r3, [r3, #0]
 8090a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8090a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8090a86:	68fb      	ldr	r3, [r7, #12]
 8090a88:	685b      	ldr	r3, [r3, #4]
 8090a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8090a8e:	d111      	bne.n	8090ab4 <SPI_WaitFifoStateUntilTimeout+0x88>
 8090a90:	68fb      	ldr	r3, [r7, #12]
 8090a92:	689b      	ldr	r3, [r3, #8]
 8090a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8090a98:	d004      	beq.n	8090aa4 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8090a9a:	68fb      	ldr	r3, [r7, #12]
 8090a9c:	689b      	ldr	r3, [r3, #8]
 8090a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8090aa2:	d107      	bne.n	8090ab4 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8090aa4:	68fb      	ldr	r3, [r7, #12]
 8090aa6:	681b      	ldr	r3, [r3, #0]
 8090aa8:	681a      	ldr	r2, [r3, #0]
 8090aaa:	68fb      	ldr	r3, [r7, #12]
 8090aac:	681b      	ldr	r3, [r3, #0]
 8090aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8090ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8090ab4:	68fb      	ldr	r3, [r7, #12]
 8090ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8090abc:	d110      	bne.n	8090ae0 <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 8090abe:	68fb      	ldr	r3, [r7, #12]
 8090ac0:	681b      	ldr	r3, [r3, #0]
 8090ac2:	6819      	ldr	r1, [r3, #0]
 8090ac4:	68fb      	ldr	r3, [r7, #12]
 8090ac6:	681a      	ldr	r2, [r3, #0]
 8090ac8:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8090acc:	400b      	ands	r3, r1
 8090ace:	6013      	str	r3, [r2, #0]
 8090ad0:	68fb      	ldr	r3, [r7, #12]
 8090ad2:	681b      	ldr	r3, [r3, #0]
 8090ad4:	681a      	ldr	r2, [r3, #0]
 8090ad6:	68fb      	ldr	r3, [r7, #12]
 8090ad8:	681b      	ldr	r3, [r3, #0]
 8090ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8090ade:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8090ae0:	68fb      	ldr	r3, [r7, #12]
 8090ae2:	2201      	movs	r2, #1
 8090ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8090ae8:	68fb      	ldr	r3, [r7, #12]
 8090aea:	2200      	movs	r2, #0
 8090aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8090af0:	2303      	movs	r3, #3
 8090af2:	e008      	b.n	8090b06 <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8090af4:	68fb      	ldr	r3, [r7, #12]
 8090af6:	681b      	ldr	r3, [r3, #0]
 8090af8:	689a      	ldr	r2, [r3, #8]
 8090afa:	68bb      	ldr	r3, [r7, #8]
 8090afc:	4013      	ands	r3, r2
 8090afe:	687a      	ldr	r2, [r7, #4]
 8090b00:	429a      	cmp	r2, r3
 8090b02:	d19b      	bne.n	8090a3c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8090b04:	2300      	movs	r3, #0
}
 8090b06:	4618      	mov	r0, r3
 8090b08:	3718      	adds	r7, #24
 8090b0a:	46bd      	mov	sp, r7
 8090b0c:	bd80      	pop	{r7, pc}

08090b0e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval None.
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8090b0e:	b580      	push	{r7, lr}
 8090b10:	b086      	sub	sp, #24
 8090b12:	af02      	add	r7, sp, #8
 8090b14:	60f8      	str	r0, [r7, #12]
 8090b16:	60b9      	str	r1, [r7, #8]
 8090b18:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8090b1a:	68fb      	ldr	r3, [r7, #12]
 8090b1c:	685b      	ldr	r3, [r3, #4]
 8090b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8090b22:	d111      	bne.n	8090b48 <SPI_EndRxTransaction+0x3a>
 8090b24:	68fb      	ldr	r3, [r7, #12]
 8090b26:	689b      	ldr	r3, [r3, #8]
 8090b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8090b2c:	d004      	beq.n	8090b38 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8090b2e:	68fb      	ldr	r3, [r7, #12]
 8090b30:	689b      	ldr	r3, [r3, #8]
 8090b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8090b36:	d107      	bne.n	8090b48 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8090b38:	68fb      	ldr	r3, [r7, #12]
 8090b3a:	681b      	ldr	r3, [r3, #0]
 8090b3c:	681a      	ldr	r2, [r3, #0]
 8090b3e:	68fb      	ldr	r3, [r7, #12]
 8090b40:	681b      	ldr	r3, [r3, #0]
 8090b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8090b46:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8090b48:	687b      	ldr	r3, [r7, #4]
 8090b4a:	9300      	str	r3, [sp, #0]
 8090b4c:	68bb      	ldr	r3, [r7, #8]
 8090b4e:	2200      	movs	r2, #0
 8090b50:	2180      	movs	r1, #128	; 0x80
 8090b52:	68f8      	ldr	r0, [r7, #12]
 8090b54:	f7ff ff07 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 8090b58:	4603      	mov	r3, r0
 8090b5a:	2b00      	cmp	r3, #0
 8090b5c:	d007      	beq.n	8090b6e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8090b5e:	68fb      	ldr	r3, [r7, #12]
 8090b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090b62:	f043 0220 	orr.w	r2, r3, #32
 8090b66:	68fb      	ldr	r3, [r7, #12]
 8090b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8090b6a:	2303      	movs	r3, #3
 8090b6c:	e023      	b.n	8090bb6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8090b6e:	68fb      	ldr	r3, [r7, #12]
 8090b70:	685b      	ldr	r3, [r3, #4]
 8090b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8090b76:	d11d      	bne.n	8090bb4 <SPI_EndRxTransaction+0xa6>
 8090b78:	68fb      	ldr	r3, [r7, #12]
 8090b7a:	689b      	ldr	r3, [r3, #8]
 8090b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8090b80:	d004      	beq.n	8090b8c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8090b82:	68fb      	ldr	r3, [r7, #12]
 8090b84:	689b      	ldr	r3, [r3, #8]
 8090b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8090b8a:	d113      	bne.n	8090bb4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8090b8c:	687b      	ldr	r3, [r7, #4]
 8090b8e:	9300      	str	r3, [sp, #0]
 8090b90:	68bb      	ldr	r3, [r7, #8]
 8090b92:	2200      	movs	r2, #0
 8090b94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8090b98:	68f8      	ldr	r0, [r7, #12]
 8090b9a:	f7ff ff47 	bl	8090a2c <SPI_WaitFifoStateUntilTimeout>
 8090b9e:	4603      	mov	r3, r0
 8090ba0:	2b00      	cmp	r3, #0
 8090ba2:	d007      	beq.n	8090bb4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8090ba4:	68fb      	ldr	r3, [r7, #12]
 8090ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090ba8:	f043 0220 	orr.w	r2, r3, #32
 8090bac:	68fb      	ldr	r3, [r7, #12]
 8090bae:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8090bb0:	2303      	movs	r3, #3
 8090bb2:	e000      	b.n	8090bb6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8090bb4:	2300      	movs	r3, #0
}
 8090bb6:	4618      	mov	r0, r3
 8090bb8:	3710      	adds	r7, #16
 8090bba:	46bd      	mov	sp, r7
 8090bbc:	bd80      	pop	{r7, pc}

08090bbe <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8090bbe:	b580      	push	{r7, lr}
 8090bc0:	b086      	sub	sp, #24
 8090bc2:	af02      	add	r7, sp, #8
 8090bc4:	60f8      	str	r0, [r7, #12]
 8090bc6:	60b9      	str	r1, [r7, #8]
 8090bc8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8090bca:	687b      	ldr	r3, [r7, #4]
 8090bcc:	9300      	str	r3, [sp, #0]
 8090bce:	68bb      	ldr	r3, [r7, #8]
 8090bd0:	2200      	movs	r2, #0
 8090bd2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8090bd6:	68f8      	ldr	r0, [r7, #12]
 8090bd8:	f7ff ff28 	bl	8090a2c <SPI_WaitFifoStateUntilTimeout>
 8090bdc:	4603      	mov	r3, r0
 8090bde:	2b00      	cmp	r3, #0
 8090be0:	d007      	beq.n	8090bf2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8090be2:	68fb      	ldr	r3, [r7, #12]
 8090be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090be6:	f043 0220 	orr.w	r2, r3, #32
 8090bea:	68fb      	ldr	r3, [r7, #12]
 8090bec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8090bee:	2303      	movs	r3, #3
 8090bf0:	e027      	b.n	8090c42 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8090bf2:	687b      	ldr	r3, [r7, #4]
 8090bf4:	9300      	str	r3, [sp, #0]
 8090bf6:	68bb      	ldr	r3, [r7, #8]
 8090bf8:	2200      	movs	r2, #0
 8090bfa:	2180      	movs	r1, #128	; 0x80
 8090bfc:	68f8      	ldr	r0, [r7, #12]
 8090bfe:	f7ff feb2 	bl	8090966 <SPI_WaitFlagStateUntilTimeout>
 8090c02:	4603      	mov	r3, r0
 8090c04:	2b00      	cmp	r3, #0
 8090c06:	d007      	beq.n	8090c18 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8090c08:	68fb      	ldr	r3, [r7, #12]
 8090c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090c0c:	f043 0220 	orr.w	r2, r3, #32
 8090c10:	68fb      	ldr	r3, [r7, #12]
 8090c12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8090c14:	2303      	movs	r3, #3
 8090c16:	e014      	b.n	8090c42 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8090c18:	687b      	ldr	r3, [r7, #4]
 8090c1a:	9300      	str	r3, [sp, #0]
 8090c1c:	68bb      	ldr	r3, [r7, #8]
 8090c1e:	2200      	movs	r2, #0
 8090c20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8090c24:	68f8      	ldr	r0, [r7, #12]
 8090c26:	f7ff ff01 	bl	8090a2c <SPI_WaitFifoStateUntilTimeout>
 8090c2a:	4603      	mov	r3, r0
 8090c2c:	2b00      	cmp	r3, #0
 8090c2e:	d007      	beq.n	8090c40 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8090c30:	68fb      	ldr	r3, [r7, #12]
 8090c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8090c34:	f043 0220 	orr.w	r2, r3, #32
 8090c38:	68fb      	ldr	r3, [r7, #12]
 8090c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8090c3c:	2303      	movs	r3, #3
 8090c3e:	e000      	b.n	8090c42 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8090c40:	2300      	movs	r3, #0
}
 8090c42:	4618      	mov	r0, r3
 8090c44:	3710      	adds	r7, #16
 8090c46:	46bd      	mov	sp, r7
 8090c48:	bd80      	pop	{r7, pc}

08090c4a <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8090c4a:	b580      	push	{r7, lr}
 8090c4c:	b082      	sub	sp, #8
 8090c4e:	af00      	add	r7, sp, #0
 8090c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8090c52:	687b      	ldr	r3, [r7, #4]
 8090c54:	2b00      	cmp	r3, #0
 8090c56:	d101      	bne.n	8090c5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8090c58:	2301      	movs	r3, #1
 8090c5a:	e01d      	b.n	8090c98 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8090c5c:	687b      	ldr	r3, [r7, #4]
 8090c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8090c62:	b2db      	uxtb	r3, r3
 8090c64:	2b00      	cmp	r3, #0
 8090c66:	d106      	bne.n	8090c76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8090c68:	687b      	ldr	r3, [r7, #4]
 8090c6a:	2200      	movs	r2, #0
 8090c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8090c70:	6878      	ldr	r0, [r7, #4]
 8090c72:	f000 f815 	bl	8090ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8090c76:	687b      	ldr	r3, [r7, #4]
 8090c78:	2202      	movs	r2, #2
 8090c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8090c7e:	687b      	ldr	r3, [r7, #4]
 8090c80:	681a      	ldr	r2, [r3, #0]
 8090c82:	687b      	ldr	r3, [r7, #4]
 8090c84:	3304      	adds	r3, #4
 8090c86:	4619      	mov	r1, r3
 8090c88:	4610      	mov	r0, r2
 8090c8a:	f000 f9bb 	bl	8091004 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8090c8e:	687b      	ldr	r3, [r7, #4]
 8090c90:	2201      	movs	r2, #1
 8090c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8090c96:	2300      	movs	r3, #0
}
 8090c98:	4618      	mov	r0, r3
 8090c9a:	3708      	adds	r7, #8
 8090c9c:	46bd      	mov	sp, r7
 8090c9e:	bd80      	pop	{r7, pc}

08090ca0 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8090ca0:	b480      	push	{r7}
 8090ca2:	b083      	sub	sp, #12
 8090ca4:	af00      	add	r7, sp, #0
 8090ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8090ca8:	bf00      	nop
 8090caa:	370c      	adds	r7, #12
 8090cac:	46bd      	mov	sp, r7
 8090cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090cb2:	4770      	bx	lr

08090cb4 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8090cb4:	b480      	push	{r7}
 8090cb6:	b083      	sub	sp, #12
 8090cb8:	af00      	add	r7, sp, #0
 8090cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8090cbc:	687b      	ldr	r3, [r7, #4]
 8090cbe:	2202      	movs	r2, #2
 8090cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8090cc4:	687b      	ldr	r3, [r7, #4]
 8090cc6:	681b      	ldr	r3, [r3, #0]
 8090cc8:	681a      	ldr	r2, [r3, #0]
 8090cca:	687b      	ldr	r3, [r7, #4]
 8090ccc:	681b      	ldr	r3, [r3, #0]
 8090cce:	f042 0201 	orr.w	r2, r2, #1
 8090cd2:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8090cd4:	687b      	ldr	r3, [r7, #4]
 8090cd6:	2201      	movs	r2, #1
 8090cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8090cdc:	2300      	movs	r3, #0
}
 8090cde:	4618      	mov	r0, r3
 8090ce0:	370c      	adds	r7, #12
 8090ce2:	46bd      	mov	sp, r7
 8090ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090ce8:	4770      	bx	lr

08090cea <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8090cea:	b480      	push	{r7}
 8090cec:	b083      	sub	sp, #12
 8090cee:	af00      	add	r7, sp, #0
 8090cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8090cf2:	687b      	ldr	r3, [r7, #4]
 8090cf4:	681b      	ldr	r3, [r3, #0]
 8090cf6:	68da      	ldr	r2, [r3, #12]
 8090cf8:	687b      	ldr	r3, [r7, #4]
 8090cfa:	681b      	ldr	r3, [r3, #0]
 8090cfc:	f042 0201 	orr.w	r2, r2, #1
 8090d00:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8090d02:	687b      	ldr	r3, [r7, #4]
 8090d04:	681b      	ldr	r3, [r3, #0]
 8090d06:	681a      	ldr	r2, [r3, #0]
 8090d08:	687b      	ldr	r3, [r7, #4]
 8090d0a:	681b      	ldr	r3, [r3, #0]
 8090d0c:	f042 0201 	orr.w	r2, r2, #1
 8090d10:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8090d12:	2300      	movs	r3, #0
}
 8090d14:	4618      	mov	r0, r3
 8090d16:	370c      	adds	r7, #12
 8090d18:	46bd      	mov	sp, r7
 8090d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090d1e:	4770      	bx	lr

08090d20 <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8090d20:	b480      	push	{r7}
 8090d22:	b083      	sub	sp, #12
 8090d24:	af00      	add	r7, sp, #0
 8090d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8090d28:	687b      	ldr	r3, [r7, #4]
 8090d2a:	681b      	ldr	r3, [r3, #0]
 8090d2c:	68da      	ldr	r2, [r3, #12]
 8090d2e:	687b      	ldr	r3, [r7, #4]
 8090d30:	681b      	ldr	r3, [r3, #0]
 8090d32:	f022 0201 	bic.w	r2, r2, #1
 8090d36:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8090d38:	687b      	ldr	r3, [r7, #4]
 8090d3a:	681b      	ldr	r3, [r3, #0]
 8090d3c:	6a1a      	ldr	r2, [r3, #32]
 8090d3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8090d42:	4013      	ands	r3, r2
 8090d44:	2b00      	cmp	r3, #0
 8090d46:	d10f      	bne.n	8090d68 <HAL_TIM_Base_Stop_IT+0x48>
 8090d48:	687b      	ldr	r3, [r7, #4]
 8090d4a:	681b      	ldr	r3, [r3, #0]
 8090d4c:	6a1a      	ldr	r2, [r3, #32]
 8090d4e:	f240 4344 	movw	r3, #1092	; 0x444
 8090d52:	4013      	ands	r3, r2
 8090d54:	2b00      	cmp	r3, #0
 8090d56:	d107      	bne.n	8090d68 <HAL_TIM_Base_Stop_IT+0x48>
 8090d58:	687b      	ldr	r3, [r7, #4]
 8090d5a:	681b      	ldr	r3, [r3, #0]
 8090d5c:	681a      	ldr	r2, [r3, #0]
 8090d5e:	687b      	ldr	r3, [r7, #4]
 8090d60:	681b      	ldr	r3, [r3, #0]
 8090d62:	f022 0201 	bic.w	r2, r2, #1
 8090d66:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8090d68:	2300      	movs	r3, #0
}
 8090d6a:	4618      	mov	r0, r3
 8090d6c:	370c      	adds	r7, #12
 8090d6e:	46bd      	mov	sp, r7
 8090d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090d74:	4770      	bx	lr

08090d76 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8090d76:	b580      	push	{r7, lr}
 8090d78:	b082      	sub	sp, #8
 8090d7a:	af00      	add	r7, sp, #0
 8090d7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8090d7e:	687b      	ldr	r3, [r7, #4]
 8090d80:	681b      	ldr	r3, [r3, #0]
 8090d82:	691b      	ldr	r3, [r3, #16]
 8090d84:	f003 0302 	and.w	r3, r3, #2
 8090d88:	2b02      	cmp	r3, #2
 8090d8a:	d122      	bne.n	8090dd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8090d8c:	687b      	ldr	r3, [r7, #4]
 8090d8e:	681b      	ldr	r3, [r3, #0]
 8090d90:	68db      	ldr	r3, [r3, #12]
 8090d92:	f003 0302 	and.w	r3, r3, #2
 8090d96:	2b02      	cmp	r3, #2
 8090d98:	d11b      	bne.n	8090dd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8090d9a:	687b      	ldr	r3, [r7, #4]
 8090d9c:	681b      	ldr	r3, [r3, #0]
 8090d9e:	f06f 0202 	mvn.w	r2, #2
 8090da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8090da4:	687b      	ldr	r3, [r7, #4]
 8090da6:	2201      	movs	r2, #1
 8090da8:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8090daa:	687b      	ldr	r3, [r7, #4]
 8090dac:	681b      	ldr	r3, [r3, #0]
 8090dae:	699b      	ldr	r3, [r3, #24]
 8090db0:	f003 0303 	and.w	r3, r3, #3
 8090db4:	2b00      	cmp	r3, #0
 8090db6:	d003      	beq.n	8090dc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8090db8:	6878      	ldr	r0, [r7, #4]
 8090dba:	f000 f905 	bl	8090fc8 <HAL_TIM_IC_CaptureCallback>
 8090dbe:	e005      	b.n	8090dcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8090dc0:	6878      	ldr	r0, [r7, #4]
 8090dc2:	f000 f8f7 	bl	8090fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8090dc6:	6878      	ldr	r0, [r7, #4]
 8090dc8:	f000 f908 	bl	8090fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8090dcc:	687b      	ldr	r3, [r7, #4]
 8090dce:	2200      	movs	r2, #0
 8090dd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8090dd2:	687b      	ldr	r3, [r7, #4]
 8090dd4:	681b      	ldr	r3, [r3, #0]
 8090dd6:	691b      	ldr	r3, [r3, #16]
 8090dd8:	f003 0304 	and.w	r3, r3, #4
 8090ddc:	2b04      	cmp	r3, #4
 8090dde:	d122      	bne.n	8090e26 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8090de0:	687b      	ldr	r3, [r7, #4]
 8090de2:	681b      	ldr	r3, [r3, #0]
 8090de4:	68db      	ldr	r3, [r3, #12]
 8090de6:	f003 0304 	and.w	r3, r3, #4
 8090dea:	2b04      	cmp	r3, #4
 8090dec:	d11b      	bne.n	8090e26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8090dee:	687b      	ldr	r3, [r7, #4]
 8090df0:	681b      	ldr	r3, [r3, #0]
 8090df2:	f06f 0204 	mvn.w	r2, #4
 8090df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8090df8:	687b      	ldr	r3, [r7, #4]
 8090dfa:	2202      	movs	r2, #2
 8090dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8090dfe:	687b      	ldr	r3, [r7, #4]
 8090e00:	681b      	ldr	r3, [r3, #0]
 8090e02:	699b      	ldr	r3, [r3, #24]
 8090e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8090e08:	2b00      	cmp	r3, #0
 8090e0a:	d003      	beq.n	8090e14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8090e0c:	6878      	ldr	r0, [r7, #4]
 8090e0e:	f000 f8db 	bl	8090fc8 <HAL_TIM_IC_CaptureCallback>
 8090e12:	e005      	b.n	8090e20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8090e14:	6878      	ldr	r0, [r7, #4]
 8090e16:	f000 f8cd 	bl	8090fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8090e1a:	6878      	ldr	r0, [r7, #4]
 8090e1c:	f000 f8de 	bl	8090fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8090e20:	687b      	ldr	r3, [r7, #4]
 8090e22:	2200      	movs	r2, #0
 8090e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8090e26:	687b      	ldr	r3, [r7, #4]
 8090e28:	681b      	ldr	r3, [r3, #0]
 8090e2a:	691b      	ldr	r3, [r3, #16]
 8090e2c:	f003 0308 	and.w	r3, r3, #8
 8090e30:	2b08      	cmp	r3, #8
 8090e32:	d122      	bne.n	8090e7a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8090e34:	687b      	ldr	r3, [r7, #4]
 8090e36:	681b      	ldr	r3, [r3, #0]
 8090e38:	68db      	ldr	r3, [r3, #12]
 8090e3a:	f003 0308 	and.w	r3, r3, #8
 8090e3e:	2b08      	cmp	r3, #8
 8090e40:	d11b      	bne.n	8090e7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8090e42:	687b      	ldr	r3, [r7, #4]
 8090e44:	681b      	ldr	r3, [r3, #0]
 8090e46:	f06f 0208 	mvn.w	r2, #8
 8090e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8090e4c:	687b      	ldr	r3, [r7, #4]
 8090e4e:	2204      	movs	r2, #4
 8090e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8090e52:	687b      	ldr	r3, [r7, #4]
 8090e54:	681b      	ldr	r3, [r3, #0]
 8090e56:	69db      	ldr	r3, [r3, #28]
 8090e58:	f003 0303 	and.w	r3, r3, #3
 8090e5c:	2b00      	cmp	r3, #0
 8090e5e:	d003      	beq.n	8090e68 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8090e60:	6878      	ldr	r0, [r7, #4]
 8090e62:	f000 f8b1 	bl	8090fc8 <HAL_TIM_IC_CaptureCallback>
 8090e66:	e005      	b.n	8090e74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8090e68:	6878      	ldr	r0, [r7, #4]
 8090e6a:	f000 f8a3 	bl	8090fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8090e6e:	6878      	ldr	r0, [r7, #4]
 8090e70:	f000 f8b4 	bl	8090fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8090e74:	687b      	ldr	r3, [r7, #4]
 8090e76:	2200      	movs	r2, #0
 8090e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8090e7a:	687b      	ldr	r3, [r7, #4]
 8090e7c:	681b      	ldr	r3, [r3, #0]
 8090e7e:	691b      	ldr	r3, [r3, #16]
 8090e80:	f003 0310 	and.w	r3, r3, #16
 8090e84:	2b10      	cmp	r3, #16
 8090e86:	d122      	bne.n	8090ece <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8090e88:	687b      	ldr	r3, [r7, #4]
 8090e8a:	681b      	ldr	r3, [r3, #0]
 8090e8c:	68db      	ldr	r3, [r3, #12]
 8090e8e:	f003 0310 	and.w	r3, r3, #16
 8090e92:	2b10      	cmp	r3, #16
 8090e94:	d11b      	bne.n	8090ece <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8090e96:	687b      	ldr	r3, [r7, #4]
 8090e98:	681b      	ldr	r3, [r3, #0]
 8090e9a:	f06f 0210 	mvn.w	r2, #16
 8090e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8090ea0:	687b      	ldr	r3, [r7, #4]
 8090ea2:	2208      	movs	r2, #8
 8090ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8090ea6:	687b      	ldr	r3, [r7, #4]
 8090ea8:	681b      	ldr	r3, [r3, #0]
 8090eaa:	69db      	ldr	r3, [r3, #28]
 8090eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8090eb0:	2b00      	cmp	r3, #0
 8090eb2:	d003      	beq.n	8090ebc <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8090eb4:	6878      	ldr	r0, [r7, #4]
 8090eb6:	f000 f887 	bl	8090fc8 <HAL_TIM_IC_CaptureCallback>
 8090eba:	e005      	b.n	8090ec8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8090ebc:	6878      	ldr	r0, [r7, #4]
 8090ebe:	f000 f879 	bl	8090fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8090ec2:	6878      	ldr	r0, [r7, #4]
 8090ec4:	f000 f88a 	bl	8090fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8090ec8:	687b      	ldr	r3, [r7, #4]
 8090eca:	2200      	movs	r2, #0
 8090ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8090ece:	687b      	ldr	r3, [r7, #4]
 8090ed0:	681b      	ldr	r3, [r3, #0]
 8090ed2:	691b      	ldr	r3, [r3, #16]
 8090ed4:	f003 0301 	and.w	r3, r3, #1
 8090ed8:	2b01      	cmp	r3, #1
 8090eda:	d10e      	bne.n	8090efa <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8090edc:	687b      	ldr	r3, [r7, #4]
 8090ede:	681b      	ldr	r3, [r3, #0]
 8090ee0:	68db      	ldr	r3, [r3, #12]
 8090ee2:	f003 0301 	and.w	r3, r3, #1
 8090ee6:	2b01      	cmp	r3, #1
 8090ee8:	d107      	bne.n	8090efa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8090eea:	687b      	ldr	r3, [r7, #4]
 8090eec:	681b      	ldr	r3, [r3, #0]
 8090eee:	f06f 0201 	mvn.w	r2, #1
 8090ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8090ef4:	6878      	ldr	r0, [r7, #4]
 8090ef6:	f000 f9ad 	bl	8091254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8090efa:	687b      	ldr	r3, [r7, #4]
 8090efc:	681b      	ldr	r3, [r3, #0]
 8090efe:	691b      	ldr	r3, [r3, #16]
 8090f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8090f04:	2b80      	cmp	r3, #128	; 0x80
 8090f06:	d10e      	bne.n	8090f26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8090f08:	687b      	ldr	r3, [r7, #4]
 8090f0a:	681b      	ldr	r3, [r3, #0]
 8090f0c:	68db      	ldr	r3, [r3, #12]
 8090f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8090f12:	2b80      	cmp	r3, #128	; 0x80
 8090f14:	d107      	bne.n	8090f26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8090f16:	687b      	ldr	r3, [r7, #4]
 8090f18:	681b      	ldr	r3, [r3, #0]
 8090f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8090f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8090f20:	6878      	ldr	r0, [r7, #4]
 8090f22:	f000 f929 	bl	8091178 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8090f26:	687b      	ldr	r3, [r7, #4]
 8090f28:	681b      	ldr	r3, [r3, #0]
 8090f2a:	691b      	ldr	r3, [r3, #16]
 8090f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8090f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8090f34:	d10e      	bne.n	8090f54 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8090f36:	687b      	ldr	r3, [r7, #4]
 8090f38:	681b      	ldr	r3, [r3, #0]
 8090f3a:	68db      	ldr	r3, [r3, #12]
 8090f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8090f40:	2b80      	cmp	r3, #128	; 0x80
 8090f42:	d107      	bne.n	8090f54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8090f44:	687b      	ldr	r3, [r7, #4]
 8090f46:	681b      	ldr	r3, [r3, #0]
 8090f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8090f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8090f4e:	6878      	ldr	r0, [r7, #4]
 8090f50:	f000 f912 	bl	8091178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8090f54:	687b      	ldr	r3, [r7, #4]
 8090f56:	681b      	ldr	r3, [r3, #0]
 8090f58:	691b      	ldr	r3, [r3, #16]
 8090f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8090f5e:	2b40      	cmp	r3, #64	; 0x40
 8090f60:	d10e      	bne.n	8090f80 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8090f62:	687b      	ldr	r3, [r7, #4]
 8090f64:	681b      	ldr	r3, [r3, #0]
 8090f66:	68db      	ldr	r3, [r3, #12]
 8090f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8090f6c:	2b40      	cmp	r3, #64	; 0x40
 8090f6e:	d107      	bne.n	8090f80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8090f70:	687b      	ldr	r3, [r7, #4]
 8090f72:	681b      	ldr	r3, [r3, #0]
 8090f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8090f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8090f7a:	6878      	ldr	r0, [r7, #4]
 8090f7c:	f000 f838 	bl	8090ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8090f80:	687b      	ldr	r3, [r7, #4]
 8090f82:	681b      	ldr	r3, [r3, #0]
 8090f84:	691b      	ldr	r3, [r3, #16]
 8090f86:	f003 0320 	and.w	r3, r3, #32
 8090f8a:	2b20      	cmp	r3, #32
 8090f8c:	d10e      	bne.n	8090fac <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8090f8e:	687b      	ldr	r3, [r7, #4]
 8090f90:	681b      	ldr	r3, [r3, #0]
 8090f92:	68db      	ldr	r3, [r3, #12]
 8090f94:	f003 0320 	and.w	r3, r3, #32
 8090f98:	2b20      	cmp	r3, #32
 8090f9a:	d107      	bne.n	8090fac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8090f9c:	687b      	ldr	r3, [r7, #4]
 8090f9e:	681b      	ldr	r3, [r3, #0]
 8090fa0:	f06f 0220 	mvn.w	r2, #32
 8090fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8090fa6:	6878      	ldr	r0, [r7, #4]
 8090fa8:	f000 f8dc 	bl	8091164 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8090fac:	bf00      	nop
 8090fae:	3708      	adds	r7, #8
 8090fb0:	46bd      	mov	sp, r7
 8090fb2:	bd80      	pop	{r7, pc}

08090fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8090fb4:	b480      	push	{r7}
 8090fb6:	b083      	sub	sp, #12
 8090fb8:	af00      	add	r7, sp, #0
 8090fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8090fbc:	bf00      	nop
 8090fbe:	370c      	adds	r7, #12
 8090fc0:	46bd      	mov	sp, r7
 8090fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090fc6:	4770      	bx	lr

08090fc8 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8090fc8:	b480      	push	{r7}
 8090fca:	b083      	sub	sp, #12
 8090fcc:	af00      	add	r7, sp, #0
 8090fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8090fd0:	bf00      	nop
 8090fd2:	370c      	adds	r7, #12
 8090fd4:	46bd      	mov	sp, r7
 8090fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090fda:	4770      	bx	lr

08090fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8090fdc:	b480      	push	{r7}
 8090fde:	b083      	sub	sp, #12
 8090fe0:	af00      	add	r7, sp, #0
 8090fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8090fe4:	bf00      	nop
 8090fe6:	370c      	adds	r7, #12
 8090fe8:	46bd      	mov	sp, r7
 8090fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8090fee:	4770      	bx	lr

08090ff0 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8090ff0:	b480      	push	{r7}
 8090ff2:	b083      	sub	sp, #12
 8090ff4:	af00      	add	r7, sp, #0
 8090ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8090ff8:	bf00      	nop
 8090ffa:	370c      	adds	r7, #12
 8090ffc:	46bd      	mov	sp, r7
 8090ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8091002:	4770      	bx	lr

08091004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8091004:	b480      	push	{r7}
 8091006:	b085      	sub	sp, #20
 8091008:	af00      	add	r7, sp, #0
 809100a:	6078      	str	r0, [r7, #4]
 809100c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 809100e:	2300      	movs	r3, #0
 8091010:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8091012:	687b      	ldr	r3, [r7, #4]
 8091014:	681b      	ldr	r3, [r3, #0]
 8091016:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8091018:	687b      	ldr	r3, [r7, #4]
 809101a:	4a47      	ldr	r2, [pc, #284]	; (8091138 <TIM_Base_SetConfig+0x134>)
 809101c:	4293      	cmp	r3, r2
 809101e:	d013      	beq.n	8091048 <TIM_Base_SetConfig+0x44>
 8091020:	687b      	ldr	r3, [r7, #4]
 8091022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8091026:	d00f      	beq.n	8091048 <TIM_Base_SetConfig+0x44>
 8091028:	687b      	ldr	r3, [r7, #4]
 809102a:	4a44      	ldr	r2, [pc, #272]	; (809113c <TIM_Base_SetConfig+0x138>)
 809102c:	4293      	cmp	r3, r2
 809102e:	d00b      	beq.n	8091048 <TIM_Base_SetConfig+0x44>
 8091030:	687b      	ldr	r3, [r7, #4]
 8091032:	4a43      	ldr	r2, [pc, #268]	; (8091140 <TIM_Base_SetConfig+0x13c>)
 8091034:	4293      	cmp	r3, r2
 8091036:	d007      	beq.n	8091048 <TIM_Base_SetConfig+0x44>
 8091038:	687b      	ldr	r3, [r7, #4]
 809103a:	4a42      	ldr	r2, [pc, #264]	; (8091144 <TIM_Base_SetConfig+0x140>)
 809103c:	4293      	cmp	r3, r2
 809103e:	d003      	beq.n	8091048 <TIM_Base_SetConfig+0x44>
 8091040:	687b      	ldr	r3, [r7, #4]
 8091042:	4a41      	ldr	r2, [pc, #260]	; (8091148 <TIM_Base_SetConfig+0x144>)
 8091044:	4293      	cmp	r3, r2
 8091046:	d101      	bne.n	809104c <TIM_Base_SetConfig+0x48>
 8091048:	2301      	movs	r3, #1
 809104a:	e000      	b.n	809104e <TIM_Base_SetConfig+0x4a>
 809104c:	2300      	movs	r3, #0
 809104e:	2b00      	cmp	r3, #0
 8091050:	d008      	beq.n	8091064 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8091052:	68fb      	ldr	r3, [r7, #12]
 8091054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8091058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 809105a:	683b      	ldr	r3, [r7, #0]
 809105c:	685b      	ldr	r3, [r3, #4]
 809105e:	68fa      	ldr	r2, [r7, #12]
 8091060:	4313      	orrs	r3, r2
 8091062:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8091064:	687b      	ldr	r3, [r7, #4]
 8091066:	4a34      	ldr	r2, [pc, #208]	; (8091138 <TIM_Base_SetConfig+0x134>)
 8091068:	4293      	cmp	r3, r2
 809106a:	d02b      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 809106c:	687b      	ldr	r3, [r7, #4]
 809106e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8091072:	d027      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 8091074:	687b      	ldr	r3, [r7, #4]
 8091076:	4a31      	ldr	r2, [pc, #196]	; (809113c <TIM_Base_SetConfig+0x138>)
 8091078:	4293      	cmp	r3, r2
 809107a:	d023      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 809107c:	687b      	ldr	r3, [r7, #4]
 809107e:	4a30      	ldr	r2, [pc, #192]	; (8091140 <TIM_Base_SetConfig+0x13c>)
 8091080:	4293      	cmp	r3, r2
 8091082:	d01f      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 8091084:	687b      	ldr	r3, [r7, #4]
 8091086:	4a2f      	ldr	r2, [pc, #188]	; (8091144 <TIM_Base_SetConfig+0x140>)
 8091088:	4293      	cmp	r3, r2
 809108a:	d01b      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 809108c:	687b      	ldr	r3, [r7, #4]
 809108e:	4a2e      	ldr	r2, [pc, #184]	; (8091148 <TIM_Base_SetConfig+0x144>)
 8091090:	4293      	cmp	r3, r2
 8091092:	d017      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 8091094:	687b      	ldr	r3, [r7, #4]
 8091096:	4a2d      	ldr	r2, [pc, #180]	; (809114c <TIM_Base_SetConfig+0x148>)
 8091098:	4293      	cmp	r3, r2
 809109a:	d013      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 809109c:	687b      	ldr	r3, [r7, #4]
 809109e:	4a2c      	ldr	r2, [pc, #176]	; (8091150 <TIM_Base_SetConfig+0x14c>)
 80910a0:	4293      	cmp	r3, r2
 80910a2:	d00f      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 80910a4:	687b      	ldr	r3, [r7, #4]
 80910a6:	4a2b      	ldr	r2, [pc, #172]	; (8091154 <TIM_Base_SetConfig+0x150>)
 80910a8:	4293      	cmp	r3, r2
 80910aa:	d00b      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 80910ac:	687b      	ldr	r3, [r7, #4]
 80910ae:	4a2a      	ldr	r2, [pc, #168]	; (8091158 <TIM_Base_SetConfig+0x154>)
 80910b0:	4293      	cmp	r3, r2
 80910b2:	d007      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 80910b4:	687b      	ldr	r3, [r7, #4]
 80910b6:	4a29      	ldr	r2, [pc, #164]	; (809115c <TIM_Base_SetConfig+0x158>)
 80910b8:	4293      	cmp	r3, r2
 80910ba:	d003      	beq.n	80910c4 <TIM_Base_SetConfig+0xc0>
 80910bc:	687b      	ldr	r3, [r7, #4]
 80910be:	4a28      	ldr	r2, [pc, #160]	; (8091160 <TIM_Base_SetConfig+0x15c>)
 80910c0:	4293      	cmp	r3, r2
 80910c2:	d101      	bne.n	80910c8 <TIM_Base_SetConfig+0xc4>
 80910c4:	2301      	movs	r3, #1
 80910c6:	e000      	b.n	80910ca <TIM_Base_SetConfig+0xc6>
 80910c8:	2300      	movs	r3, #0
 80910ca:	2b00      	cmp	r3, #0
 80910cc:	d008      	beq.n	80910e0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80910ce:	68fb      	ldr	r3, [r7, #12]
 80910d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80910d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80910d6:	683b      	ldr	r3, [r7, #0]
 80910d8:	68db      	ldr	r3, [r3, #12]
 80910da:	68fa      	ldr	r2, [r7, #12]
 80910dc:	4313      	orrs	r3, r2
 80910de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80910e0:	68fb      	ldr	r3, [r7, #12]
 80910e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80910e6:	683b      	ldr	r3, [r7, #0]
 80910e8:	695b      	ldr	r3, [r3, #20]
 80910ea:	4313      	orrs	r3, r2
 80910ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80910ee:	687b      	ldr	r3, [r7, #4]
 80910f0:	68fa      	ldr	r2, [r7, #12]
 80910f2:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80910f4:	683b      	ldr	r3, [r7, #0]
 80910f6:	689a      	ldr	r2, [r3, #8]
 80910f8:	687b      	ldr	r3, [r7, #4]
 80910fa:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80910fc:	683b      	ldr	r3, [r7, #0]
 80910fe:	681a      	ldr	r2, [r3, #0]
 8091100:	687b      	ldr	r3, [r7, #4]
 8091102:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8091104:	687b      	ldr	r3, [r7, #4]
 8091106:	4a0c      	ldr	r2, [pc, #48]	; (8091138 <TIM_Base_SetConfig+0x134>)
 8091108:	4293      	cmp	r3, r2
 809110a:	d003      	beq.n	8091114 <TIM_Base_SetConfig+0x110>
 809110c:	687b      	ldr	r3, [r7, #4]
 809110e:	4a0e      	ldr	r2, [pc, #56]	; (8091148 <TIM_Base_SetConfig+0x144>)
 8091110:	4293      	cmp	r3, r2
 8091112:	d101      	bne.n	8091118 <TIM_Base_SetConfig+0x114>
 8091114:	2301      	movs	r3, #1
 8091116:	e000      	b.n	809111a <TIM_Base_SetConfig+0x116>
 8091118:	2300      	movs	r3, #0
 809111a:	2b00      	cmp	r3, #0
 809111c:	d003      	beq.n	8091126 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 809111e:	683b      	ldr	r3, [r7, #0]
 8091120:	691a      	ldr	r2, [r3, #16]
 8091122:	687b      	ldr	r3, [r7, #4]
 8091124:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8091126:	687b      	ldr	r3, [r7, #4]
 8091128:	2201      	movs	r2, #1
 809112a:	615a      	str	r2, [r3, #20]
}
 809112c:	bf00      	nop
 809112e:	3714      	adds	r7, #20
 8091130:	46bd      	mov	sp, r7
 8091132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8091136:	4770      	bx	lr
 8091138:	40010000 	.word	0x40010000
 809113c:	40000400 	.word	0x40000400
 8091140:	40000800 	.word	0x40000800
 8091144:	40000c00 	.word	0x40000c00
 8091148:	40010400 	.word	0x40010400
 809114c:	40014000 	.word	0x40014000
 8091150:	40014400 	.word	0x40014400
 8091154:	40014800 	.word	0x40014800
 8091158:	40001800 	.word	0x40001800
 809115c:	40001c00 	.word	0x40001c00
 8091160:	40002000 	.word	0x40002000

08091164 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8091164:	b480      	push	{r7}
 8091166:	b083      	sub	sp, #12
 8091168:	af00      	add	r7, sp, #0
 809116a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 809116c:	bf00      	nop
 809116e:	370c      	adds	r7, #12
 8091170:	46bd      	mov	sp, r7
 8091172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8091176:	4770      	bx	lr

08091178 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8091178:	b480      	push	{r7}
 809117a:	b083      	sub	sp, #12
 809117c:	af00      	add	r7, sp, #0
 809117e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8091180:	bf00      	nop
 8091182:	370c      	adds	r7, #12
 8091184:	46bd      	mov	sp, r7
 8091186:	f85d 7b04 	ldr.w	r7, [sp], #4
 809118a:	4770      	bx	lr

0809118c <HAL_InitTick>:
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 809118c:	b580      	push	{r7, lr}
 809118e:	b08c      	sub	sp, #48	; 0x30
 8091190:	af00      	add	r7, sp, #0
 8091192:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef    clkconfig;
	uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8091194:	2300      	movs	r3, #0
 8091196:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t              uwPrescalerValue = 0U;
 8091198:	2300      	movs	r3, #0
 809119a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t              pFLatency;

	/*Configure the TIM6 IRQ priority */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 809119c:	2200      	movs	r2, #0
 809119e:	6879      	ldr	r1, [r7, #4]
 80911a0:	2036      	movs	r0, #54	; 0x36
 80911a2:	f7f8 f8d9 	bl	8089358 <HAL_NVIC_SetPriority>

	/* Enable the TIM6 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80911a6:	2036      	movs	r0, #54	; 0x36
 80911a8:	f7f8 f8f2 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable TIM6 clock */
	__HAL_RCC_TIM6_CLK_ENABLE();
 80911ac:	4b25      	ldr	r3, [pc, #148]	; (8091244 <HAL_InitTick+0xb8>)
 80911ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80911b0:	4a24      	ldr	r2, [pc, #144]	; (8091244 <HAL_InitTick+0xb8>)
 80911b2:	f043 0310 	orr.w	r3, r3, #16
 80911b6:	6413      	str	r3, [r2, #64]	; 0x40
 80911b8:	4b22      	ldr	r3, [pc, #136]	; (8091244 <HAL_InitTick+0xb8>)
 80911ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80911bc:	f003 0310 	and.w	r3, r3, #16
 80911c0:	60bb      	str	r3, [r7, #8]
 80911c2:	68bb      	ldr	r3, [r7, #8]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80911c4:	f107 020c 	add.w	r2, r7, #12
 80911c8:	f107 0310 	add.w	r3, r7, #16
 80911cc:	4611      	mov	r1, r2
 80911ce:	4618      	mov	r0, r3
 80911d0:	f7fb fde6 	bl	808cda0 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80911d4:	69fb      	ldr	r3, [r7, #28]
 80911d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Compute TIM6 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80911d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80911da:	2b00      	cmp	r3, #0
 80911dc:	d103      	bne.n	80911e6 <HAL_InitTick+0x5a>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80911de:	f7fb fdb7 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 80911e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80911e4:	e004      	b.n	80911f0 <HAL_InitTick+0x64>
	}
	else
	{
		uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80911e6:	f7fb fdb3 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 80911ea:	4603      	mov	r3, r0
 80911ec:	005b      	lsls	r3, r3, #1
 80911ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80911f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80911f2:	4a15      	ldr	r2, [pc, #84]	; (8091248 <HAL_InitTick+0xbc>)
 80911f4:	fba2 2303 	umull	r2, r3, r2, r3
 80911f8:	0c9b      	lsrs	r3, r3, #18
 80911fa:	3b01      	subs	r3, #1
 80911fc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Initialize TIM6 */
	TimHandle.Instance = TIM6;
 80911fe:	4b13      	ldr	r3, [pc, #76]	; (809124c <HAL_InitTick+0xc0>)
 8091200:	4a13      	ldr	r2, [pc, #76]	; (8091250 <HAL_InitTick+0xc4>)
 8091202:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
	 */
	TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8091204:	4b11      	ldr	r3, [pc, #68]	; (809124c <HAL_InitTick+0xc0>)
 8091206:	f240 32e7 	movw	r2, #999	; 0x3e7
 809120a:	60da      	str	r2, [r3, #12]
	TimHandle.Init.Prescaler = uwPrescalerValue;
 809120c:	4a0f      	ldr	r2, [pc, #60]	; (809124c <HAL_InitTick+0xc0>)
 809120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8091210:	6053      	str	r3, [r2, #4]
	TimHandle.Init.ClockDivision = 0;
 8091212:	4b0e      	ldr	r3, [pc, #56]	; (809124c <HAL_InitTick+0xc0>)
 8091214:	2200      	movs	r2, #0
 8091216:	611a      	str	r2, [r3, #16]
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8091218:	4b0c      	ldr	r3, [pc, #48]	; (809124c <HAL_InitTick+0xc0>)
 809121a:	2200      	movs	r2, #0
 809121c:	609a      	str	r2, [r3, #8]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 809121e:	4b0b      	ldr	r3, [pc, #44]	; (809124c <HAL_InitTick+0xc0>)
 8091220:	2200      	movs	r2, #0
 8091222:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8091224:	4809      	ldr	r0, [pc, #36]	; (809124c <HAL_InitTick+0xc0>)
 8091226:	f7ff fd10 	bl	8090c4a <HAL_TIM_Base_Init>
 809122a:	4603      	mov	r3, r0
 809122c:	2b00      	cmp	r3, #0
 809122e:	d104      	bne.n	809123a <HAL_InitTick+0xae>
	{
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&TimHandle);
 8091230:	4806      	ldr	r0, [pc, #24]	; (809124c <HAL_InitTick+0xc0>)
 8091232:	f7ff fd5a 	bl	8090cea <HAL_TIM_Base_Start_IT>
 8091236:	4603      	mov	r3, r0
 8091238:	e000      	b.n	809123c <HAL_InitTick+0xb0>
	}

	/* Return function status */
	return HAL_ERROR;
 809123a:	2301      	movs	r3, #1
}
 809123c:	4618      	mov	r0, r3
 809123e:	3730      	adds	r7, #48	; 0x30
 8091240:	46bd      	mov	sp, r7
 8091242:	bd80      	pop	{r7, pc}
 8091244:	40023800 	.word	0x40023800
 8091248:	431bde83 	.word	0x431bde83
 809124c:	2002db64 	.word	0x2002db64
 8091250:	40001000 	.word	0x40001000

08091254 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim  TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8091254:	b580      	push	{r7, lr}
 8091256:	b082      	sub	sp, #8
 8091258:	af00      	add	r7, sp, #0
 809125a:	6078      	str	r0, [r7, #4]
	if (htim == &TimHandle) { // must be incremented only in case of TIM 6
 809125c:	687b      	ldr	r3, [r7, #4]
 809125e:	4a04      	ldr	r2, [pc, #16]	; (8091270 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8091260:	4293      	cmp	r3, r2
 8091262:	d101      	bne.n	8091268 <HAL_TIM_PeriodElapsedCallback+0x14>
		HAL_IncTick();
 8091264:	f7f7 ff68 	bl	8089138 <HAL_IncTick>
	}
}
 8091268:	bf00      	nop
 809126a:	3708      	adds	r7, #8
 809126c:	46bd      	mov	sp, r7
 809126e:	bd80      	pop	{r7, pc}
 8091270:	2002db64 	.word	0x2002db64

08091274 <TIM6_DAC_IRQHandler>:
/**
 * @brief  This function handles TIM interrupt request.
 * @retval None
 */
void TIM6_DAC_IRQHandler(void)
{
 8091274:	b580      	push	{r7, lr}
 8091276:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8091278:	4802      	ldr	r0, [pc, #8]	; (8091284 <TIM6_DAC_IRQHandler+0x10>)
 809127a:	f7ff fd7c 	bl	8090d76 <HAL_TIM_IRQHandler>
}
 809127e:	bf00      	nop
 8091280:	bd80      	pop	{r7, pc}
 8091282:	bf00      	nop
 8091284:	2002db64 	.word	0x2002db64

08091288 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8091288:	b580      	push	{r7, lr}
 809128a:	b082      	sub	sp, #8
 809128c:	af00      	add	r7, sp, #0
 809128e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8091290:	687b      	ldr	r3, [r7, #4]
 8091292:	2b00      	cmp	r3, #0
 8091294:	d101      	bne.n	809129a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8091296:	2301      	movs	r3, #1
 8091298:	e043      	b.n	8091322 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 809129a:	687b      	ldr	r3, [r7, #4]
 809129c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80912a0:	b2db      	uxtb	r3, r3
 80912a2:	2b00      	cmp	r3, #0
 80912a4:	d106      	bne.n	80912b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80912a6:	687b      	ldr	r3, [r7, #4]
 80912a8:	2200      	movs	r2, #0
 80912aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80912ae:	6878      	ldr	r0, [r7, #4]
 80912b0:	f000 f873 	bl	809139a <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80912b4:	687b      	ldr	r3, [r7, #4]
 80912b6:	2224      	movs	r2, #36	; 0x24
 80912b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80912bc:	687b      	ldr	r3, [r7, #4]
 80912be:	681b      	ldr	r3, [r3, #0]
 80912c0:	681a      	ldr	r2, [r3, #0]
 80912c2:	687b      	ldr	r3, [r7, #4]
 80912c4:	681b      	ldr	r3, [r3, #0]
 80912c6:	f022 0201 	bic.w	r2, r2, #1
 80912ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80912cc:	6878      	ldr	r0, [r7, #4]
 80912ce:	f000 fbfd 	bl	8091acc <UART_SetConfig>
 80912d2:	4603      	mov	r3, r0
 80912d4:	2b01      	cmp	r3, #1
 80912d6:	d101      	bne.n	80912dc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80912d8:	2301      	movs	r3, #1
 80912da:	e022      	b.n	8091322 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80912dc:	687b      	ldr	r3, [r7, #4]
 80912de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80912e0:	2b00      	cmp	r3, #0
 80912e2:	d002      	beq.n	80912ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80912e4:	6878      	ldr	r0, [r7, #4]
 80912e6:	f000 fe61 	bl	8091fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80912ea:	687b      	ldr	r3, [r7, #4]
 80912ec:	681b      	ldr	r3, [r3, #0]
 80912ee:	685a      	ldr	r2, [r3, #4]
 80912f0:	687b      	ldr	r3, [r7, #4]
 80912f2:	681b      	ldr	r3, [r3, #0]
 80912f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80912f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80912fa:	687b      	ldr	r3, [r7, #4]
 80912fc:	681b      	ldr	r3, [r3, #0]
 80912fe:	689a      	ldr	r2, [r3, #8]
 8091300:	687b      	ldr	r3, [r7, #4]
 8091302:	681b      	ldr	r3, [r3, #0]
 8091304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8091308:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 809130a:	687b      	ldr	r3, [r7, #4]
 809130c:	681b      	ldr	r3, [r3, #0]
 809130e:	681a      	ldr	r2, [r3, #0]
 8091310:	687b      	ldr	r3, [r7, #4]
 8091312:	681b      	ldr	r3, [r3, #0]
 8091314:	f042 0201 	orr.w	r2, r2, #1
 8091318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 809131a:	6878      	ldr	r0, [r7, #4]
 809131c:	f000 fee8 	bl	80920f0 <UART_CheckIdleState>
 8091320:	4603      	mov	r3, r0
}
 8091322:	4618      	mov	r0, r3
 8091324:	3708      	adds	r7, #8
 8091326:	46bd      	mov	sp, r7
 8091328:	bd80      	pop	{r7, pc}

0809132a <HAL_UART_DeInit>:
  * @brief DeInitializes the UART peripheral
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 809132a:	b580      	push	{r7, lr}
 809132c:	b082      	sub	sp, #8
 809132e:	af00      	add	r7, sp, #0
 8091330:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8091332:	687b      	ldr	r3, [r7, #4]
 8091334:	2b00      	cmp	r3, #0
 8091336:	d101      	bne.n	809133c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8091338:	2301      	movs	r3, #1
 809133a:	e02a      	b.n	8091392 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 809133c:	687b      	ldr	r3, [r7, #4]
 809133e:	2224      	movs	r2, #36	; 0x24
 8091340:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8091344:	687b      	ldr	r3, [r7, #4]
 8091346:	681b      	ldr	r3, [r3, #0]
 8091348:	681a      	ldr	r2, [r3, #0]
 809134a:	687b      	ldr	r3, [r7, #4]
 809134c:	681b      	ldr	r3, [r3, #0]
 809134e:	f022 0201 	bic.w	r2, r2, #1
 8091352:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8091354:	687b      	ldr	r3, [r7, #4]
 8091356:	681b      	ldr	r3, [r3, #0]
 8091358:	2200      	movs	r2, #0
 809135a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 809135c:	687b      	ldr	r3, [r7, #4]
 809135e:	681b      	ldr	r3, [r3, #0]
 8091360:	2200      	movs	r2, #0
 8091362:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8091364:	687b      	ldr	r3, [r7, #4]
 8091366:	681b      	ldr	r3, [r3, #0]
 8091368:	2200      	movs	r2, #0
 809136a:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 809136c:	6878      	ldr	r0, [r7, #4]
 809136e:	f000 f81e 	bl	80913ae <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8091372:	687b      	ldr	r3, [r7, #4]
 8091374:	2200      	movs	r2, #0
 8091376:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8091378:	687b      	ldr	r3, [r7, #4]
 809137a:	2200      	movs	r2, #0
 809137c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8091380:	687b      	ldr	r3, [r7, #4]
 8091382:	2200      	movs	r2, #0
 8091384:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8091388:	687b      	ldr	r3, [r7, #4]
 809138a:	2200      	movs	r2, #0
 809138c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8091390:	2300      	movs	r3, #0
}
 8091392:	4618      	mov	r0, r3
 8091394:	3708      	adds	r7, #8
 8091396:	46bd      	mov	sp, r7
 8091398:	bd80      	pop	{r7, pc}

0809139a <HAL_UART_MspInit>:
  * @brief UART MSP Init
  * @param huart uart handle
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 809139a:	b480      	push	{r7}
 809139c:	b083      	sub	sp, #12
 809139e:	af00      	add	r7, sp, #0
 80913a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80913a2:	bf00      	nop
 80913a4:	370c      	adds	r7, #12
 80913a6:	46bd      	mov	sp, r7
 80913a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80913ac:	4770      	bx	lr

080913ae <HAL_UART_MspDeInit>:
  * @brief UART MSP DeInit
  * @param huart uart handle
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80913ae:	b480      	push	{r7}
 80913b0:	b083      	sub	sp, #12
 80913b2:	af00      	add	r7, sp, #0
 80913b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80913b6:	bf00      	nop
 80913b8:	370c      	adds	r7, #12
 80913ba:	46bd      	mov	sp, r7
 80913bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80913c0:	4770      	bx	lr

080913c2 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80913c2:	b580      	push	{r7, lr}
 80913c4:	b088      	sub	sp, #32
 80913c6:	af02      	add	r7, sp, #8
 80913c8:	60f8      	str	r0, [r7, #12]
 80913ca:	60b9      	str	r1, [r7, #8]
 80913cc:	603b      	str	r3, [r7, #0]
 80913ce:	4613      	mov	r3, r2
 80913d0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80913d2:	2300      	movs	r3, #0
 80913d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80913d6:	68fb      	ldr	r3, [r7, #12]
 80913d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80913dc:	b2db      	uxtb	r3, r3
 80913de:	2b20      	cmp	r3, #32
 80913e0:	d176      	bne.n	80914d0 <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 80913e2:	68bb      	ldr	r3, [r7, #8]
 80913e4:	2b00      	cmp	r3, #0
 80913e6:	d002      	beq.n	80913ee <HAL_UART_Transmit+0x2c>
 80913e8:	88fb      	ldrh	r3, [r7, #6]
 80913ea:	2b00      	cmp	r3, #0
 80913ec:	d101      	bne.n	80913f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80913ee:	2301      	movs	r3, #1
 80913f0:	e06f      	b.n	80914d2 <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80913f2:	68fb      	ldr	r3, [r7, #12]
 80913f4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80913f8:	2b01      	cmp	r3, #1
 80913fa:	d101      	bne.n	8091400 <HAL_UART_Transmit+0x3e>
 80913fc:	2302      	movs	r3, #2
 80913fe:	e068      	b.n	80914d2 <HAL_UART_Transmit+0x110>
 8091400:	68fb      	ldr	r3, [r7, #12]
 8091402:	2201      	movs	r2, #1
 8091404:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8091408:	68fb      	ldr	r3, [r7, #12]
 809140a:	2200      	movs	r2, #0
 809140c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 809140e:	68fb      	ldr	r3, [r7, #12]
 8091410:	2221      	movs	r2, #33	; 0x21
 8091412:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8091416:	f7f7 fea3 	bl	8089160 <HAL_GetTick>
 809141a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 809141c:	68fb      	ldr	r3, [r7, #12]
 809141e:	88fa      	ldrh	r2, [r7, #6]
 8091420:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8091424:	68fb      	ldr	r3, [r7, #12]
 8091426:	88fa      	ldrh	r2, [r7, #6]
 8091428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 809142c:	e033      	b.n	8091496 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 809142e:	68fb      	ldr	r3, [r7, #12]
 8091430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8091434:	b29b      	uxth	r3, r3
 8091436:	3b01      	subs	r3, #1
 8091438:	b29a      	uxth	r2, r3
 809143a:	68fb      	ldr	r3, [r7, #12]
 809143c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8091440:	683b      	ldr	r3, [r7, #0]
 8091442:	9300      	str	r3, [sp, #0]
 8091444:	697b      	ldr	r3, [r7, #20]
 8091446:	2200      	movs	r2, #0
 8091448:	2180      	movs	r1, #128	; 0x80
 809144a:	68f8      	ldr	r0, [r7, #12]
 809144c:	f000 f9d2 	bl	80917f4 <UART_WaitOnFlagUntilTimeout>
 8091450:	4603      	mov	r3, r0
 8091452:	2b00      	cmp	r3, #0
 8091454:	d001      	beq.n	809145a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8091456:	2303      	movs	r3, #3
 8091458:	e03b      	b.n	80914d2 <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 809145a:	68fb      	ldr	r3, [r7, #12]
 809145c:	689b      	ldr	r3, [r3, #8]
 809145e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8091462:	d111      	bne.n	8091488 <HAL_UART_Transmit+0xc6>
 8091464:	68fb      	ldr	r3, [r7, #12]
 8091466:	691b      	ldr	r3, [r3, #16]
 8091468:	2b00      	cmp	r3, #0
 809146a:	d10d      	bne.n	8091488 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 809146c:	68bb      	ldr	r3, [r7, #8]
 809146e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8091470:	693b      	ldr	r3, [r7, #16]
 8091472:	881b      	ldrh	r3, [r3, #0]
 8091474:	461a      	mov	r2, r3
 8091476:	68fb      	ldr	r3, [r7, #12]
 8091478:	681b      	ldr	r3, [r3, #0]
 809147a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 809147e:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8091480:	68bb      	ldr	r3, [r7, #8]
 8091482:	3302      	adds	r3, #2
 8091484:	60bb      	str	r3, [r7, #8]
 8091486:	e006      	b.n	8091496 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8091488:	68bb      	ldr	r3, [r7, #8]
 809148a:	1c5a      	adds	r2, r3, #1
 809148c:	60ba      	str	r2, [r7, #8]
 809148e:	781a      	ldrb	r2, [r3, #0]
 8091490:	68fb      	ldr	r3, [r7, #12]
 8091492:	681b      	ldr	r3, [r3, #0]
 8091494:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8091496:	68fb      	ldr	r3, [r7, #12]
 8091498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 809149c:	b29b      	uxth	r3, r3
 809149e:	2b00      	cmp	r3, #0
 80914a0:	d1c5      	bne.n	809142e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80914a2:	683b      	ldr	r3, [r7, #0]
 80914a4:	9300      	str	r3, [sp, #0]
 80914a6:	697b      	ldr	r3, [r7, #20]
 80914a8:	2200      	movs	r2, #0
 80914aa:	2140      	movs	r1, #64	; 0x40
 80914ac:	68f8      	ldr	r0, [r7, #12]
 80914ae:	f000 f9a1 	bl	80917f4 <UART_WaitOnFlagUntilTimeout>
 80914b2:	4603      	mov	r3, r0
 80914b4:	2b00      	cmp	r3, #0
 80914b6:	d001      	beq.n	80914bc <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 80914b8:	2303      	movs	r3, #3
 80914ba:	e00a      	b.n	80914d2 <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80914bc:	68fb      	ldr	r3, [r7, #12]
 80914be:	2220      	movs	r2, #32
 80914c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80914c4:	68fb      	ldr	r3, [r7, #12]
 80914c6:	2200      	movs	r2, #0
 80914c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80914cc:	2300      	movs	r3, #0
 80914ce:	e000      	b.n	80914d2 <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 80914d0:	2302      	movs	r3, #2
  }
}
 80914d2:	4618      	mov	r0, r3
 80914d4:	3718      	adds	r7, #24
 80914d6:	46bd      	mov	sp, r7
 80914d8:	bd80      	pop	{r7, pc}

080914da <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80914da:	b480      	push	{r7}
 80914dc:	b085      	sub	sp, #20
 80914de:	af00      	add	r7, sp, #0
 80914e0:	60f8      	str	r0, [r7, #12]
 80914e2:	60b9      	str	r1, [r7, #8]
 80914e4:	4613      	mov	r3, r2
 80914e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80914e8:	68fb      	ldr	r3, [r7, #12]
 80914ea:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80914ee:	b2db      	uxtb	r3, r3
 80914f0:	2b20      	cmp	r3, #32
 80914f2:	d172      	bne.n	80915da <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0U))
 80914f4:	68bb      	ldr	r3, [r7, #8]
 80914f6:	2b00      	cmp	r3, #0
 80914f8:	d002      	beq.n	8091500 <HAL_UART_Receive_IT+0x26>
 80914fa:	88fb      	ldrh	r3, [r7, #6]
 80914fc:	2b00      	cmp	r3, #0
 80914fe:	d101      	bne.n	8091504 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8091500:	2301      	movs	r3, #1
 8091502:	e06b      	b.n	80915dc <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8091504:	68fb      	ldr	r3, [r7, #12]
 8091506:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 809150a:	2b01      	cmp	r3, #1
 809150c:	d101      	bne.n	8091512 <HAL_UART_Receive_IT+0x38>
 809150e:	2302      	movs	r3, #2
 8091510:	e064      	b.n	80915dc <HAL_UART_Receive_IT+0x102>
 8091512:	68fb      	ldr	r3, [r7, #12]
 8091514:	2201      	movs	r2, #1
 8091516:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 809151a:	68fb      	ldr	r3, [r7, #12]
 809151c:	68ba      	ldr	r2, [r7, #8]
 809151e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8091520:	68fb      	ldr	r3, [r7, #12]
 8091522:	88fa      	ldrh	r2, [r7, #6]
 8091524:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8091528:	68fb      	ldr	r3, [r7, #12]
 809152a:	88fa      	ldrh	r2, [r7, #6]
 809152c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8091530:	68fb      	ldr	r3, [r7, #12]
 8091532:	689b      	ldr	r3, [r3, #8]
 8091534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8091538:	d10e      	bne.n	8091558 <HAL_UART_Receive_IT+0x7e>
 809153a:	68fb      	ldr	r3, [r7, #12]
 809153c:	691b      	ldr	r3, [r3, #16]
 809153e:	2b00      	cmp	r3, #0
 8091540:	d105      	bne.n	809154e <HAL_UART_Receive_IT+0x74>
 8091542:	68fb      	ldr	r3, [r7, #12]
 8091544:	f240 12ff 	movw	r2, #511	; 0x1ff
 8091548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 809154c:	e028      	b.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 809154e:	68fb      	ldr	r3, [r7, #12]
 8091550:	22ff      	movs	r2, #255	; 0xff
 8091552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8091556:	e023      	b.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 8091558:	68fb      	ldr	r3, [r7, #12]
 809155a:	689b      	ldr	r3, [r3, #8]
 809155c:	2b00      	cmp	r3, #0
 809155e:	d10d      	bne.n	809157c <HAL_UART_Receive_IT+0xa2>
 8091560:	68fb      	ldr	r3, [r7, #12]
 8091562:	691b      	ldr	r3, [r3, #16]
 8091564:	2b00      	cmp	r3, #0
 8091566:	d104      	bne.n	8091572 <HAL_UART_Receive_IT+0x98>
 8091568:	68fb      	ldr	r3, [r7, #12]
 809156a:	22ff      	movs	r2, #255	; 0xff
 809156c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8091570:	e016      	b.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 8091572:	68fb      	ldr	r3, [r7, #12]
 8091574:	227f      	movs	r2, #127	; 0x7f
 8091576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 809157a:	e011      	b.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 809157c:	68fb      	ldr	r3, [r7, #12]
 809157e:	689b      	ldr	r3, [r3, #8]
 8091580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8091584:	d10c      	bne.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 8091586:	68fb      	ldr	r3, [r7, #12]
 8091588:	691b      	ldr	r3, [r3, #16]
 809158a:	2b00      	cmp	r3, #0
 809158c:	d104      	bne.n	8091598 <HAL_UART_Receive_IT+0xbe>
 809158e:	68fb      	ldr	r3, [r7, #12]
 8091590:	227f      	movs	r2, #127	; 0x7f
 8091592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8091596:	e003      	b.n	80915a0 <HAL_UART_Receive_IT+0xc6>
 8091598:	68fb      	ldr	r3, [r7, #12]
 809159a:	223f      	movs	r2, #63	; 0x3f
 809159c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80915a0:	68fb      	ldr	r3, [r7, #12]
 80915a2:	2200      	movs	r2, #0
 80915a4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80915a6:	68fb      	ldr	r3, [r7, #12]
 80915a8:	2222      	movs	r2, #34	; 0x22
 80915aa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80915ae:	68fb      	ldr	r3, [r7, #12]
 80915b0:	2200      	movs	r2, #0
 80915b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80915b6:	68fb      	ldr	r3, [r7, #12]
 80915b8:	681b      	ldr	r3, [r3, #0]
 80915ba:	689a      	ldr	r2, [r3, #8]
 80915bc:	68fb      	ldr	r3, [r7, #12]
 80915be:	681b      	ldr	r3, [r3, #0]
 80915c0:	f042 0201 	orr.w	r2, r2, #1
 80915c4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80915c6:	68fb      	ldr	r3, [r7, #12]
 80915c8:	681b      	ldr	r3, [r3, #0]
 80915ca:	681a      	ldr	r2, [r3, #0]
 80915cc:	68fb      	ldr	r3, [r7, #12]
 80915ce:	681b      	ldr	r3, [r3, #0]
 80915d0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80915d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80915d6:	2300      	movs	r3, #0
 80915d8:	e000      	b.n	80915dc <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 80915da:	2302      	movs	r3, #2
  }
}
 80915dc:	4618      	mov	r0, r3
 80915de:	3714      	adds	r7, #20
 80915e0:	46bd      	mov	sp, r7
 80915e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80915e6:	4770      	bx	lr

080915e8 <HAL_UART_IRQHandler>:
  * @brief This function handles UART interrupt request.
  * @param huart uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80915e8:	b580      	push	{r7, lr}
 80915ea:	b086      	sub	sp, #24
 80915ec:	af00      	add	r7, sp, #0
 80915ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80915f0:	687b      	ldr	r3, [r7, #4]
 80915f2:	681b      	ldr	r3, [r3, #0]
 80915f4:	69db      	ldr	r3, [r3, #28]
 80915f6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80915f8:	687b      	ldr	r3, [r7, #4]
 80915fa:	681b      	ldr	r3, [r3, #0]
 80915fc:	681b      	ldr	r3, [r3, #0]
 80915fe:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8091600:	687b      	ldr	r3, [r7, #4]
 8091602:	681b      	ldr	r3, [r3, #0]
 8091604:	689b      	ldr	r3, [r3, #8]
 8091606:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8091608:	697b      	ldr	r3, [r7, #20]
 809160a:	f003 030f 	and.w	r3, r3, #15
 809160e:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8091610:	68bb      	ldr	r3, [r7, #8]
 8091612:	2b00      	cmp	r3, #0
 8091614:	d10d      	bne.n	8091632 <HAL_UART_IRQHandler+0x4a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8091616:	697b      	ldr	r3, [r7, #20]
 8091618:	f003 0320 	and.w	r3, r3, #32
 809161c:	2b00      	cmp	r3, #0
 809161e:	d008      	beq.n	8091632 <HAL_UART_IRQHandler+0x4a>
 8091620:	693b      	ldr	r3, [r7, #16]
 8091622:	f003 0320 	and.w	r3, r3, #32
 8091626:	2b00      	cmp	r3, #0
 8091628:	d003      	beq.n	8091632 <HAL_UART_IRQHandler+0x4a>
    {
      UART_Receive_IT(huart);
 809162a:	6878      	ldr	r0, [r7, #4]
 809162c:	f000 f9c5 	bl	80919ba <UART_Receive_IT>
      return;
 8091630:	e0da      	b.n	80917e8 <HAL_UART_IRQHandler+0x200>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 8091632:	68bb      	ldr	r3, [r7, #8]
 8091634:	2b00      	cmp	r3, #0
 8091636:	f000 80b9 	beq.w	80917ac <HAL_UART_IRQHandler+0x1c4>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 809163a:	68fb      	ldr	r3, [r7, #12]
 809163c:	f003 0301 	and.w	r3, r3, #1
 8091640:	2b00      	cmp	r3, #0
 8091642:	d105      	bne.n	8091650 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8091644:	693b      	ldr	r3, [r7, #16]
 8091646:	f403 7390 	and.w	r3, r3, #288	; 0x120
 809164a:	2b00      	cmp	r3, #0
 809164c:	f000 80ae 	beq.w	80917ac <HAL_UART_IRQHandler+0x1c4>
  {

    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8091650:	697b      	ldr	r3, [r7, #20]
 8091652:	f003 0301 	and.w	r3, r3, #1
 8091656:	2b00      	cmp	r3, #0
 8091658:	d00e      	beq.n	8091678 <HAL_UART_IRQHandler+0x90>
 809165a:	693b      	ldr	r3, [r7, #16]
 809165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8091660:	2b00      	cmp	r3, #0
 8091662:	d009      	beq.n	8091678 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8091664:	687b      	ldr	r3, [r7, #4]
 8091666:	681b      	ldr	r3, [r3, #0]
 8091668:	2201      	movs	r2, #1
 809166a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 809166c:	687b      	ldr	r3, [r7, #4]
 809166e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8091670:	f043 0201 	orr.w	r2, r3, #1
 8091674:	687b      	ldr	r3, [r7, #4]
 8091676:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8091678:	697b      	ldr	r3, [r7, #20]
 809167a:	f003 0302 	and.w	r3, r3, #2
 809167e:	2b00      	cmp	r3, #0
 8091680:	d00e      	beq.n	80916a0 <HAL_UART_IRQHandler+0xb8>
 8091682:	68fb      	ldr	r3, [r7, #12]
 8091684:	f003 0301 	and.w	r3, r3, #1
 8091688:	2b00      	cmp	r3, #0
 809168a:	d009      	beq.n	80916a0 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 809168c:	687b      	ldr	r3, [r7, #4]
 809168e:	681b      	ldr	r3, [r3, #0]
 8091690:	2202      	movs	r2, #2
 8091692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8091694:	687b      	ldr	r3, [r7, #4]
 8091696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8091698:	f043 0204 	orr.w	r2, r3, #4
 809169c:	687b      	ldr	r3, [r7, #4]
 809169e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80916a0:	697b      	ldr	r3, [r7, #20]
 80916a2:	f003 0304 	and.w	r3, r3, #4
 80916a6:	2b00      	cmp	r3, #0
 80916a8:	d00e      	beq.n	80916c8 <HAL_UART_IRQHandler+0xe0>
 80916aa:	68fb      	ldr	r3, [r7, #12]
 80916ac:	f003 0301 	and.w	r3, r3, #1
 80916b0:	2b00      	cmp	r3, #0
 80916b2:	d009      	beq.n	80916c8 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80916b4:	687b      	ldr	r3, [r7, #4]
 80916b6:	681b      	ldr	r3, [r3, #0]
 80916b8:	2204      	movs	r2, #4
 80916ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80916bc:	687b      	ldr	r3, [r7, #4]
 80916be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80916c0:	f043 0202 	orr.w	r2, r3, #2
 80916c4:	687b      	ldr	r3, [r7, #4]
 80916c6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80916c8:	697b      	ldr	r3, [r7, #20]
 80916ca:	f003 0308 	and.w	r3, r3, #8
 80916ce:	2b00      	cmp	r3, #0
 80916d0:	d013      	beq.n	80916fa <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80916d2:	693b      	ldr	r3, [r7, #16]
 80916d4:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80916d8:	2b00      	cmp	r3, #0
 80916da:	d104      	bne.n	80916e6 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80916dc:	68fb      	ldr	r3, [r7, #12]
 80916de:	f003 0301 	and.w	r3, r3, #1
 80916e2:	2b00      	cmp	r3, #0
 80916e4:	d009      	beq.n	80916fa <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80916e6:	687b      	ldr	r3, [r7, #4]
 80916e8:	681b      	ldr	r3, [r3, #0]
 80916ea:	2208      	movs	r2, #8
 80916ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80916ee:	687b      	ldr	r3, [r7, #4]
 80916f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80916f2:	f043 0208 	orr.w	r2, r3, #8
 80916f6:	687b      	ldr	r3, [r7, #4]
 80916f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80916fa:	687b      	ldr	r3, [r7, #4]
 80916fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80916fe:	2b00      	cmp	r3, #0
 8091700:	d071      	beq.n	80917e6 <HAL_UART_IRQHandler+0x1fe>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8091702:	697b      	ldr	r3, [r7, #20]
 8091704:	f003 0320 	and.w	r3, r3, #32
 8091708:	2b00      	cmp	r3, #0
 809170a:	d007      	beq.n	809171c <HAL_UART_IRQHandler+0x134>
 809170c:	693b      	ldr	r3, [r7, #16]
 809170e:	f003 0320 	and.w	r3, r3, #32
 8091712:	2b00      	cmp	r3, #0
 8091714:	d002      	beq.n	809171c <HAL_UART_IRQHandler+0x134>
      {
        UART_Receive_IT(huart);
 8091716:	6878      	ldr	r0, [r7, #4]
 8091718:	f000 f94f 	bl	80919ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 809171c:	687b      	ldr	r3, [r7, #4]
 809171e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8091720:	f003 0308 	and.w	r3, r3, #8
 8091724:	2b00      	cmp	r3, #0
 8091726:	d106      	bne.n	8091736 <HAL_UART_IRQHandler+0x14e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8091728:	687b      	ldr	r3, [r7, #4]
 809172a:	681b      	ldr	r3, [r3, #0]
 809172c:	689b      	ldr	r3, [r3, #8]
 809172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8091732:	2b00      	cmp	r3, #0
 8091734:	d031      	beq.n	809179a <HAL_UART_IRQHandler+0x1b2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8091736:	6878      	ldr	r0, [r7, #4]
 8091738:	f000 f9aa 	bl	8091a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 809173c:	687b      	ldr	r3, [r7, #4]
 809173e:	681b      	ldr	r3, [r3, #0]
 8091740:	689b      	ldr	r3, [r3, #8]
 8091742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8091746:	2b00      	cmp	r3, #0
 8091748:	d023      	beq.n	8091792 <HAL_UART_IRQHandler+0x1aa>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 809174a:	687b      	ldr	r3, [r7, #4]
 809174c:	681b      	ldr	r3, [r3, #0]
 809174e:	689a      	ldr	r2, [r3, #8]
 8091750:	687b      	ldr	r3, [r7, #4]
 8091752:	681b      	ldr	r3, [r3, #0]
 8091754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8091758:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 809175a:	687b      	ldr	r3, [r7, #4]
 809175c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 809175e:	2b00      	cmp	r3, #0
 8091760:	d013      	beq.n	809178a <HAL_UART_IRQHandler+0x1a2>
          {
            /* Set the UART DMA Abort callback :
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8091762:	687b      	ldr	r3, [r7, #4]
 8091764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8091766:	4a22      	ldr	r2, [pc, #136]	; (80917f0 <HAL_UART_IRQHandler+0x208>)
 8091768:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 809176a:	687b      	ldr	r3, [r7, #4]
 809176c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 809176e:	4618      	mov	r0, r3
 8091770:	f7f8 f806 	bl	8089780 <HAL_DMA_Abort_IT>
 8091774:	4603      	mov	r3, r0
 8091776:	2b00      	cmp	r3, #0
 8091778:	d016      	beq.n	80917a8 <HAL_UART_IRQHandler+0x1c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 809177a:	687b      	ldr	r3, [r7, #4]
 809177c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 809177e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8091780:	687a      	ldr	r2, [r7, #4]
 8091782:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8091784:	4610      	mov	r0, r2
 8091786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8091788:	e00e      	b.n	80917a8 <HAL_UART_IRQHandler+0x1c0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 809178a:	6878      	ldr	r0, [r7, #4]
 809178c:	f000 f89c 	bl	80918c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8091790:	e00a      	b.n	80917a8 <HAL_UART_IRQHandler+0x1c0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8091792:	6878      	ldr	r0, [r7, #4]
 8091794:	f000 f898 	bl	80918c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8091798:	e006      	b.n	80917a8 <HAL_UART_IRQHandler+0x1c0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 809179a:	6878      	ldr	r0, [r7, #4]
 809179c:	f000 f894 	bl	80918c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80917a0:	687b      	ldr	r3, [r7, #4]
 80917a2:	2200      	movs	r2, #0
 80917a4:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80917a6:	e01e      	b.n	80917e6 <HAL_UART_IRQHandler+0x1fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80917a8:	bf00      	nop
    return;
 80917aa:	e01c      	b.n	80917e6 <HAL_UART_IRQHandler+0x1fe>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80917ac:	697b      	ldr	r3, [r7, #20]
 80917ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80917b2:	2b00      	cmp	r3, #0
 80917b4:	d008      	beq.n	80917c8 <HAL_UART_IRQHandler+0x1e0>
 80917b6:	693b      	ldr	r3, [r7, #16]
 80917b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80917bc:	2b00      	cmp	r3, #0
 80917be:	d003      	beq.n	80917c8 <HAL_UART_IRQHandler+0x1e0>
  {
    UART_Transmit_IT(huart);
 80917c0:	6878      	ldr	r0, [r7, #4]
 80917c2:	f000 f88b 	bl	80918dc <UART_Transmit_IT>
    return;
 80917c6:	e00f      	b.n	80917e8 <HAL_UART_IRQHandler+0x200>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80917c8:	697b      	ldr	r3, [r7, #20]
 80917ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80917ce:	2b00      	cmp	r3, #0
 80917d0:	d00a      	beq.n	80917e8 <HAL_UART_IRQHandler+0x200>
 80917d2:	693b      	ldr	r3, [r7, #16]
 80917d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80917d8:	2b00      	cmp	r3, #0
 80917da:	d005      	beq.n	80917e8 <HAL_UART_IRQHandler+0x200>
  {
    UART_EndTransmit_IT(huart);
 80917dc:	6878      	ldr	r0, [r7, #4]
 80917de:	f000 f8d4 	bl	809198a <UART_EndTransmit_IT>
    return;
 80917e2:	bf00      	nop
 80917e4:	e000      	b.n	80917e8 <HAL_UART_IRQHandler+0x200>
    return;
 80917e6:	bf00      	nop
  }

}
 80917e8:	3718      	adds	r7, #24
 80917ea:	46bd      	mov	sp, r7
 80917ec:	bd80      	pop	{r7, pc}
 80917ee:	bf00      	nop
 80917f0:	08091889 	.word	0x08091889

080917f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80917f4:	b580      	push	{r7, lr}
 80917f6:	b084      	sub	sp, #16
 80917f8:	af00      	add	r7, sp, #0
 80917fa:	60f8      	str	r0, [r7, #12]
 80917fc:	60b9      	str	r1, [r7, #8]
 80917fe:	603b      	str	r3, [r7, #0]
 8091800:	4613      	mov	r3, r2
 8091802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8091804:	e02c      	b.n	8091860 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8091806:	69bb      	ldr	r3, [r7, #24]
 8091808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 809180c:	d028      	beq.n	8091860 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 809180e:	69bb      	ldr	r3, [r7, #24]
 8091810:	2b00      	cmp	r3, #0
 8091812:	d007      	beq.n	8091824 <UART_WaitOnFlagUntilTimeout+0x30>
 8091814:	f7f7 fca4 	bl	8089160 <HAL_GetTick>
 8091818:	4602      	mov	r2, r0
 809181a:	683b      	ldr	r3, [r7, #0]
 809181c:	1ad3      	subs	r3, r2, r3
 809181e:	69ba      	ldr	r2, [r7, #24]
 8091820:	429a      	cmp	r2, r3
 8091822:	d81d      	bhi.n	8091860 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8091824:	68fb      	ldr	r3, [r7, #12]
 8091826:	681b      	ldr	r3, [r3, #0]
 8091828:	681a      	ldr	r2, [r3, #0]
 809182a:	68fb      	ldr	r3, [r7, #12]
 809182c:	681b      	ldr	r3, [r3, #0]
 809182e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8091832:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8091834:	68fb      	ldr	r3, [r7, #12]
 8091836:	681b      	ldr	r3, [r3, #0]
 8091838:	689a      	ldr	r2, [r3, #8]
 809183a:	68fb      	ldr	r3, [r7, #12]
 809183c:	681b      	ldr	r3, [r3, #0]
 809183e:	f022 0201 	bic.w	r2, r2, #1
 8091842:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8091844:	68fb      	ldr	r3, [r7, #12]
 8091846:	2220      	movs	r2, #32
 8091848:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 809184c:	68fb      	ldr	r3, [r7, #12]
 809184e:	2220      	movs	r2, #32
 8091850:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8091854:	68fb      	ldr	r3, [r7, #12]
 8091856:	2200      	movs	r2, #0
 8091858:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 809185c:	2303      	movs	r3, #3
 809185e:	e00f      	b.n	8091880 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8091860:	68fb      	ldr	r3, [r7, #12]
 8091862:	681b      	ldr	r3, [r3, #0]
 8091864:	69da      	ldr	r2, [r3, #28]
 8091866:	68bb      	ldr	r3, [r7, #8]
 8091868:	4013      	ands	r3, r2
 809186a:	68ba      	ldr	r2, [r7, #8]
 809186c:	429a      	cmp	r2, r3
 809186e:	bf0c      	ite	eq
 8091870:	2301      	moveq	r3, #1
 8091872:	2300      	movne	r3, #0
 8091874:	b2db      	uxtb	r3, r3
 8091876:	461a      	mov	r2, r3
 8091878:	79fb      	ldrb	r3, [r7, #7]
 809187a:	429a      	cmp	r2, r3
 809187c:	d0c3      	beq.n	8091806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 809187e:	2300      	movs	r3, #0
}
 8091880:	4618      	mov	r0, r3
 8091882:	3710      	adds	r7, #16
 8091884:	46bd      	mov	sp, r7
 8091886:	bd80      	pop	{r7, pc}

08091888 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8091888:	b580      	push	{r7, lr}
 809188a:	b084      	sub	sp, #16
 809188c:	af00      	add	r7, sp, #0
 809188e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8091890:	687b      	ldr	r3, [r7, #4]
 8091892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8091894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8091896:	68fb      	ldr	r3, [r7, #12]
 8091898:	2200      	movs	r2, #0
 809189a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 809189e:	68fb      	ldr	r3, [r7, #12]
 80918a0:	2200      	movs	r2, #0
 80918a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80918a6:	68f8      	ldr	r0, [r7, #12]
 80918a8:	f000 f80e 	bl	80918c8 <HAL_UART_ErrorCallback>
}
 80918ac:	bf00      	nop
 80918ae:	3710      	adds	r7, #16
 80918b0:	46bd      	mov	sp, r7
 80918b2:	bd80      	pop	{r7, pc}

080918b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80918b4:	b480      	push	{r7}
 80918b6:	b083      	sub	sp, #12
 80918b8:	af00      	add	r7, sp, #0
 80918ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file
   */
}
 80918bc:	bf00      	nop
 80918be:	370c      	adds	r7, #12
 80918c0:	46bd      	mov	sp, r7
 80918c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80918c6:	4770      	bx	lr

080918c8 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80918c8:	b480      	push	{r7}
 80918ca:	b083      	sub	sp, #12
 80918cc:	af00      	add	r7, sp, #0
 80918ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */
}
 80918d0:	bf00      	nop
 80918d2:	370c      	adds	r7, #12
 80918d4:	46bd      	mov	sp, r7
 80918d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80918da:	4770      	bx	lr

080918dc <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80918dc:	b480      	push	{r7}
 80918de:	b085      	sub	sp, #20
 80918e0:	af00      	add	r7, sp, #0
 80918e2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80918e4:	687b      	ldr	r3, [r7, #4]
 80918e6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80918ea:	b2db      	uxtb	r3, r3
 80918ec:	2b21      	cmp	r3, #33	; 0x21
 80918ee:	d145      	bne.n	809197c <UART_Transmit_IT+0xa0>
  {

    if(huart->TxXferCount == 0U)
 80918f0:	687b      	ldr	r3, [r7, #4]
 80918f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80918f6:	b29b      	uxth	r3, r3
 80918f8:	2b00      	cmp	r3, #0
 80918fa:	d111      	bne.n	8091920 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80918fc:	687b      	ldr	r3, [r7, #4]
 80918fe:	681b      	ldr	r3, [r3, #0]
 8091900:	681a      	ldr	r2, [r3, #0]
 8091902:	687b      	ldr	r3, [r7, #4]
 8091904:	681b      	ldr	r3, [r3, #0]
 8091906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 809190a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 809190c:	687b      	ldr	r3, [r7, #4]
 809190e:	681b      	ldr	r3, [r3, #0]
 8091910:	681a      	ldr	r2, [r3, #0]
 8091912:	687b      	ldr	r3, [r7, #4]
 8091914:	681b      	ldr	r3, [r3, #0]
 8091916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 809191a:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 809191c:	2300      	movs	r3, #0
 809191e:	e02e      	b.n	809197e <UART_Transmit_IT+0xa2>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8091920:	687b      	ldr	r3, [r7, #4]
 8091922:	689b      	ldr	r3, [r3, #8]
 8091924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8091928:	d114      	bne.n	8091954 <UART_Transmit_IT+0x78>
 809192a:	687b      	ldr	r3, [r7, #4]
 809192c:	691b      	ldr	r3, [r3, #16]
 809192e:	2b00      	cmp	r3, #0
 8091930:	d110      	bne.n	8091954 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8091932:	687b      	ldr	r3, [r7, #4]
 8091934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8091936:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8091938:	68fb      	ldr	r3, [r7, #12]
 809193a:	881b      	ldrh	r3, [r3, #0]
 809193c:	461a      	mov	r2, r3
 809193e:	687b      	ldr	r3, [r7, #4]
 8091940:	681b      	ldr	r3, [r3, #0]
 8091942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8091946:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8091948:	687b      	ldr	r3, [r7, #4]
 809194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 809194c:	1c9a      	adds	r2, r3, #2
 809194e:	687b      	ldr	r3, [r7, #4]
 8091950:	64da      	str	r2, [r3, #76]	; 0x4c
 8091952:	e008      	b.n	8091966 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8091954:	687b      	ldr	r3, [r7, #4]
 8091956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8091958:	1c59      	adds	r1, r3, #1
 809195a:	687a      	ldr	r2, [r7, #4]
 809195c:	64d1      	str	r1, [r2, #76]	; 0x4c
 809195e:	781a      	ldrb	r2, [r3, #0]
 8091960:	687b      	ldr	r3, [r7, #4]
 8091962:	681b      	ldr	r3, [r3, #0]
 8091964:	629a      	str	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 8091966:	687b      	ldr	r3, [r7, #4]
 8091968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 809196c:	b29b      	uxth	r3, r3
 809196e:	3b01      	subs	r3, #1
 8091970:	b29a      	uxth	r2, r3
 8091972:	687b      	ldr	r3, [r7, #4]
 8091974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8091978:	2300      	movs	r3, #0
 809197a:	e000      	b.n	809197e <UART_Transmit_IT+0xa2>
    }
  }
  else
  {
    return HAL_BUSY;
 809197c:	2302      	movs	r3, #2
  }
}
 809197e:	4618      	mov	r0, r3
 8091980:	3714      	adds	r7, #20
 8091982:	46bd      	mov	sp, r7
 8091984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8091988:	4770      	bx	lr

0809198a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 809198a:	b580      	push	{r7, lr}
 809198c:	b082      	sub	sp, #8
 809198e:	af00      	add	r7, sp, #0
 8091990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8091992:	687b      	ldr	r3, [r7, #4]
 8091994:	681b      	ldr	r3, [r3, #0]
 8091996:	681a      	ldr	r2, [r3, #0]
 8091998:	687b      	ldr	r3, [r7, #4]
 809199a:	681b      	ldr	r3, [r3, #0]
 809199c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80919a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80919a2:	687b      	ldr	r3, [r7, #4]
 80919a4:	2220      	movs	r2, #32
 80919a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80919aa:	6878      	ldr	r0, [r7, #4]
 80919ac:	f7ff ff82 	bl	80918b4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80919b0:	2300      	movs	r3, #0
}
 80919b2:	4618      	mov	r0, r3
 80919b4:	3708      	adds	r7, #8
 80919b6:	46bd      	mov	sp, r7
 80919b8:	bd80      	pop	{r7, pc}

080919ba <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80919ba:	b590      	push	{r4, r7, lr}
 80919bc:	b085      	sub	sp, #20
 80919be:	af00      	add	r7, sp, #0
 80919c0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80919c2:	687b      	ldr	r3, [r7, #4]
 80919c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80919c8:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80919ca:	687b      	ldr	r3, [r7, #4]
 80919cc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80919d0:	b2db      	uxtb	r3, r3
 80919d2:	2b22      	cmp	r3, #34	; 0x22
 80919d4:	d14f      	bne.n	8091a76 <UART_Receive_IT+0xbc>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80919d6:	687b      	ldr	r3, [r7, #4]
 80919d8:	689b      	ldr	r3, [r3, #8]
 80919da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80919de:	d115      	bne.n	8091a0c <UART_Receive_IT+0x52>
 80919e0:	687b      	ldr	r3, [r7, #4]
 80919e2:	691b      	ldr	r3, [r3, #16]
 80919e4:	2b00      	cmp	r3, #0
 80919e6:	d111      	bne.n	8091a0c <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80919e8:	687b      	ldr	r3, [r7, #4]
 80919ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80919ec:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80919ee:	687b      	ldr	r3, [r7, #4]
 80919f0:	681b      	ldr	r3, [r3, #0]
 80919f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80919f4:	b29a      	uxth	r2, r3
 80919f6:	89fb      	ldrh	r3, [r7, #14]
 80919f8:	4013      	ands	r3, r2
 80919fa:	b29a      	uxth	r2, r3
 80919fc:	68bb      	ldr	r3, [r7, #8]
 80919fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8091a00:	687b      	ldr	r3, [r7, #4]
 8091a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8091a04:	1c9a      	adds	r2, r3, #2
 8091a06:	687b      	ldr	r3, [r7, #4]
 8091a08:	655a      	str	r2, [r3, #84]	; 0x54
 8091a0a:	e00d      	b.n	8091a28 <UART_Receive_IT+0x6e>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8091a0c:	687b      	ldr	r3, [r7, #4]
 8091a0e:	681b      	ldr	r3, [r3, #0]
 8091a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091a12:	b2d9      	uxtb	r1, r3
 8091a14:	89fb      	ldrh	r3, [r7, #14]
 8091a16:	b2da      	uxtb	r2, r3
 8091a18:	687b      	ldr	r3, [r7, #4]
 8091a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8091a1c:	1c5c      	adds	r4, r3, #1
 8091a1e:	6878      	ldr	r0, [r7, #4]
 8091a20:	6544      	str	r4, [r0, #84]	; 0x54
 8091a22:	400a      	ands	r2, r1
 8091a24:	b2d2      	uxtb	r2, r2
 8091a26:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8091a28:	687b      	ldr	r3, [r7, #4]
 8091a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8091a2e:	b29b      	uxth	r3, r3
 8091a30:	3b01      	subs	r3, #1
 8091a32:	b29b      	uxth	r3, r3
 8091a34:	687a      	ldr	r2, [r7, #4]
 8091a36:	4619      	mov	r1, r3
 8091a38:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8091a3c:	2b00      	cmp	r3, #0
 8091a3e:	d118      	bne.n	8091a72 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8091a40:	687b      	ldr	r3, [r7, #4]
 8091a42:	681b      	ldr	r3, [r3, #0]
 8091a44:	681a      	ldr	r2, [r3, #0]
 8091a46:	687b      	ldr	r3, [r7, #4]
 8091a48:	681b      	ldr	r3, [r3, #0]
 8091a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8091a4e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8091a50:	687b      	ldr	r3, [r7, #4]
 8091a52:	681b      	ldr	r3, [r3, #0]
 8091a54:	689a      	ldr	r2, [r3, #8]
 8091a56:	687b      	ldr	r3, [r7, #4]
 8091a58:	681b      	ldr	r3, [r3, #0]
 8091a5a:	f022 0201 	bic.w	r2, r2, #1
 8091a5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8091a60:	687b      	ldr	r3, [r7, #4]
 8091a62:	2220      	movs	r2, #32
 8091a64:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8091a68:	6878      	ldr	r0, [r7, #4]
 8091a6a:	f7f2 fd01 	bl	8084470 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8091a6e:	2300      	movs	r3, #0
 8091a70:	e00a      	b.n	8091a88 <UART_Receive_IT+0xce>
    }

    return HAL_OK;
 8091a72:	2300      	movs	r3, #0
 8091a74:	e008      	b.n	8091a88 <UART_Receive_IT+0xce>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8091a76:	687b      	ldr	r3, [r7, #4]
 8091a78:	681b      	ldr	r3, [r3, #0]
 8091a7a:	699a      	ldr	r2, [r3, #24]
 8091a7c:	687b      	ldr	r3, [r7, #4]
 8091a7e:	681b      	ldr	r3, [r3, #0]
 8091a80:	f042 0208 	orr.w	r2, r2, #8
 8091a84:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8091a86:	2302      	movs	r3, #2
  }
}
 8091a88:	4618      	mov	r0, r3
 8091a8a:	3714      	adds	r7, #20
 8091a8c:	46bd      	mov	sp, r7
 8091a8e:	bd90      	pop	{r4, r7, pc}

08091a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8091a90:	b480      	push	{r7}
 8091a92:	b083      	sub	sp, #12
 8091a94:	af00      	add	r7, sp, #0
 8091a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8091a98:	687b      	ldr	r3, [r7, #4]
 8091a9a:	681b      	ldr	r3, [r3, #0]
 8091a9c:	681a      	ldr	r2, [r3, #0]
 8091a9e:	687b      	ldr	r3, [r7, #4]
 8091aa0:	681b      	ldr	r3, [r3, #0]
 8091aa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8091aa6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8091aa8:	687b      	ldr	r3, [r7, #4]
 8091aaa:	681b      	ldr	r3, [r3, #0]
 8091aac:	689a      	ldr	r2, [r3, #8]
 8091aae:	687b      	ldr	r3, [r7, #4]
 8091ab0:	681b      	ldr	r3, [r3, #0]
 8091ab2:	f022 0201 	bic.w	r2, r2, #1
 8091ab6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8091ab8:	687b      	ldr	r3, [r7, #4]
 8091aba:	2220      	movs	r2, #32
 8091abc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8091ac0:	bf00      	nop
 8091ac2:	370c      	adds	r7, #12
 8091ac4:	46bd      	mov	sp, r7
 8091ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8091aca:	4770      	bx	lr

08091acc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8091acc:	b580      	push	{r7, lr}
 8091ace:	b086      	sub	sp, #24
 8091ad0:	af00      	add	r7, sp, #0
 8091ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8091ad4:	2300      	movs	r3, #0
 8091ad6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8091ad8:	2310      	movs	r3, #16
 8091ada:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8091adc:	2300      	movs	r3, #0
 8091ade:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8091ae0:	2300      	movs	r3, #0
 8091ae2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8091ae4:	2300      	movs	r3, #0
 8091ae6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8091ae8:	687b      	ldr	r3, [r7, #4]
 8091aea:	689a      	ldr	r2, [r3, #8]
 8091aec:	687b      	ldr	r3, [r7, #4]
 8091aee:	691b      	ldr	r3, [r3, #16]
 8091af0:	431a      	orrs	r2, r3
 8091af2:	687b      	ldr	r3, [r7, #4]
 8091af4:	695b      	ldr	r3, [r3, #20]
 8091af6:	431a      	orrs	r2, r3
 8091af8:	687b      	ldr	r3, [r7, #4]
 8091afa:	69db      	ldr	r3, [r3, #28]
 8091afc:	4313      	orrs	r3, r2
 8091afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8091b00:	687b      	ldr	r3, [r7, #4]
 8091b02:	681b      	ldr	r3, [r3, #0]
 8091b04:	681a      	ldr	r2, [r3, #0]
 8091b06:	4bad      	ldr	r3, [pc, #692]	; (8091dbc <UART_SetConfig+0x2f0>)
 8091b08:	4013      	ands	r3, r2
 8091b0a:	687a      	ldr	r2, [r7, #4]
 8091b0c:	6812      	ldr	r2, [r2, #0]
 8091b0e:	68f9      	ldr	r1, [r7, #12]
 8091b10:	430b      	orrs	r3, r1
 8091b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8091b14:	687b      	ldr	r3, [r7, #4]
 8091b16:	681b      	ldr	r3, [r3, #0]
 8091b18:	685b      	ldr	r3, [r3, #4]
 8091b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8091b1e:	687b      	ldr	r3, [r7, #4]
 8091b20:	68da      	ldr	r2, [r3, #12]
 8091b22:	687b      	ldr	r3, [r7, #4]
 8091b24:	681b      	ldr	r3, [r3, #0]
 8091b26:	430a      	orrs	r2, r1
 8091b28:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8091b2a:	687b      	ldr	r3, [r7, #4]
 8091b2c:	699a      	ldr	r2, [r3, #24]
 8091b2e:	687b      	ldr	r3, [r7, #4]
 8091b30:	6a1b      	ldr	r3, [r3, #32]
 8091b32:	4313      	orrs	r3, r2
 8091b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8091b36:	687b      	ldr	r3, [r7, #4]
 8091b38:	681b      	ldr	r3, [r3, #0]
 8091b3a:	689b      	ldr	r3, [r3, #8]
 8091b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8091b40:	687b      	ldr	r3, [r7, #4]
 8091b42:	681b      	ldr	r3, [r3, #0]
 8091b44:	68fa      	ldr	r2, [r7, #12]
 8091b46:	430a      	orrs	r2, r1
 8091b48:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8091b4a:	687b      	ldr	r3, [r7, #4]
 8091b4c:	681b      	ldr	r3, [r3, #0]
 8091b4e:	4a9c      	ldr	r2, [pc, #624]	; (8091dc0 <UART_SetConfig+0x2f4>)
 8091b50:	4293      	cmp	r3, r2
 8091b52:	d11f      	bne.n	8091b94 <UART_SetConfig+0xc8>
 8091b54:	4b9b      	ldr	r3, [pc, #620]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091b5a:	f003 0303 	and.w	r3, r3, #3
 8091b5e:	2b03      	cmp	r3, #3
 8091b60:	f200 8129 	bhi.w	8091db6 <UART_SetConfig+0x2ea>
 8091b64:	a201      	add	r2, pc, #4	; (adr r2, 8091b6c <UART_SetConfig+0xa0>)
 8091b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8091b6a:	bf00      	nop
 8091b6c:	08091b7d 	.word	0x08091b7d
 8091b70:	08091b89 	.word	0x08091b89
 8091b74:	08091b83 	.word	0x08091b83
 8091b78:	08091b8f 	.word	0x08091b8f
 8091b7c:	2301      	movs	r3, #1
 8091b7e:	75fb      	strb	r3, [r7, #23]
 8091b80:	e119      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091b82:	2302      	movs	r3, #2
 8091b84:	75fb      	strb	r3, [r7, #23]
 8091b86:	e116      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091b88:	2304      	movs	r3, #4
 8091b8a:	75fb      	strb	r3, [r7, #23]
 8091b8c:	e113      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091b8e:	2308      	movs	r3, #8
 8091b90:	75fb      	strb	r3, [r7, #23]
 8091b92:	e110      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091b94:	687b      	ldr	r3, [r7, #4]
 8091b96:	681b      	ldr	r3, [r3, #0]
 8091b98:	4a8b      	ldr	r2, [pc, #556]	; (8091dc8 <UART_SetConfig+0x2fc>)
 8091b9a:	4293      	cmp	r3, r2
 8091b9c:	d130      	bne.n	8091c00 <UART_SetConfig+0x134>
 8091b9e:	4b89      	ldr	r3, [pc, #548]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091ba4:	f003 030c 	and.w	r3, r3, #12
 8091ba8:	2b0c      	cmp	r3, #12
 8091baa:	f200 8104 	bhi.w	8091db6 <UART_SetConfig+0x2ea>
 8091bae:	a201      	add	r2, pc, #4	; (adr r2, 8091bb4 <UART_SetConfig+0xe8>)
 8091bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8091bb4:	08091be9 	.word	0x08091be9
 8091bb8:	08091db7 	.word	0x08091db7
 8091bbc:	08091db7 	.word	0x08091db7
 8091bc0:	08091db7 	.word	0x08091db7
 8091bc4:	08091bf5 	.word	0x08091bf5
 8091bc8:	08091db7 	.word	0x08091db7
 8091bcc:	08091db7 	.word	0x08091db7
 8091bd0:	08091db7 	.word	0x08091db7
 8091bd4:	08091bef 	.word	0x08091bef
 8091bd8:	08091db7 	.word	0x08091db7
 8091bdc:	08091db7 	.word	0x08091db7
 8091be0:	08091db7 	.word	0x08091db7
 8091be4:	08091bfb 	.word	0x08091bfb
 8091be8:	2300      	movs	r3, #0
 8091bea:	75fb      	strb	r3, [r7, #23]
 8091bec:	e0e3      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091bee:	2302      	movs	r3, #2
 8091bf0:	75fb      	strb	r3, [r7, #23]
 8091bf2:	e0e0      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091bf4:	2304      	movs	r3, #4
 8091bf6:	75fb      	strb	r3, [r7, #23]
 8091bf8:	e0dd      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091bfa:	2308      	movs	r3, #8
 8091bfc:	75fb      	strb	r3, [r7, #23]
 8091bfe:	e0da      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c00:	687b      	ldr	r3, [r7, #4]
 8091c02:	681b      	ldr	r3, [r3, #0]
 8091c04:	4a71      	ldr	r2, [pc, #452]	; (8091dcc <UART_SetConfig+0x300>)
 8091c06:	4293      	cmp	r3, r2
 8091c08:	d11c      	bne.n	8091c44 <UART_SetConfig+0x178>
 8091c0a:	4b6e      	ldr	r3, [pc, #440]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8091c14:	2b10      	cmp	r3, #16
 8091c16:	d00f      	beq.n	8091c38 <UART_SetConfig+0x16c>
 8091c18:	2b10      	cmp	r3, #16
 8091c1a:	d802      	bhi.n	8091c22 <UART_SetConfig+0x156>
 8091c1c:	2b00      	cmp	r3, #0
 8091c1e:	d005      	beq.n	8091c2c <UART_SetConfig+0x160>
 8091c20:	e0c9      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c22:	2b20      	cmp	r3, #32
 8091c24:	d005      	beq.n	8091c32 <UART_SetConfig+0x166>
 8091c26:	2b30      	cmp	r3, #48	; 0x30
 8091c28:	d009      	beq.n	8091c3e <UART_SetConfig+0x172>
 8091c2a:	e0c4      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c2c:	2300      	movs	r3, #0
 8091c2e:	75fb      	strb	r3, [r7, #23]
 8091c30:	e0c1      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c32:	2302      	movs	r3, #2
 8091c34:	75fb      	strb	r3, [r7, #23]
 8091c36:	e0be      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c38:	2304      	movs	r3, #4
 8091c3a:	75fb      	strb	r3, [r7, #23]
 8091c3c:	e0bb      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c3e:	2308      	movs	r3, #8
 8091c40:	75fb      	strb	r3, [r7, #23]
 8091c42:	e0b8      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c44:	687b      	ldr	r3, [r7, #4]
 8091c46:	681b      	ldr	r3, [r3, #0]
 8091c48:	4a61      	ldr	r2, [pc, #388]	; (8091dd0 <UART_SetConfig+0x304>)
 8091c4a:	4293      	cmp	r3, r2
 8091c4c:	d11c      	bne.n	8091c88 <UART_SetConfig+0x1bc>
 8091c4e:	4b5d      	ldr	r3, [pc, #372]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8091c58:	2b40      	cmp	r3, #64	; 0x40
 8091c5a:	d00f      	beq.n	8091c7c <UART_SetConfig+0x1b0>
 8091c5c:	2b40      	cmp	r3, #64	; 0x40
 8091c5e:	d802      	bhi.n	8091c66 <UART_SetConfig+0x19a>
 8091c60:	2b00      	cmp	r3, #0
 8091c62:	d005      	beq.n	8091c70 <UART_SetConfig+0x1a4>
 8091c64:	e0a7      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c66:	2b80      	cmp	r3, #128	; 0x80
 8091c68:	d005      	beq.n	8091c76 <UART_SetConfig+0x1aa>
 8091c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8091c6c:	d009      	beq.n	8091c82 <UART_SetConfig+0x1b6>
 8091c6e:	e0a2      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c70:	2300      	movs	r3, #0
 8091c72:	75fb      	strb	r3, [r7, #23]
 8091c74:	e09f      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c76:	2302      	movs	r3, #2
 8091c78:	75fb      	strb	r3, [r7, #23]
 8091c7a:	e09c      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c7c:	2304      	movs	r3, #4
 8091c7e:	75fb      	strb	r3, [r7, #23]
 8091c80:	e099      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c82:	2308      	movs	r3, #8
 8091c84:	75fb      	strb	r3, [r7, #23]
 8091c86:	e096      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091c88:	687b      	ldr	r3, [r7, #4]
 8091c8a:	681b      	ldr	r3, [r3, #0]
 8091c8c:	4a51      	ldr	r2, [pc, #324]	; (8091dd4 <UART_SetConfig+0x308>)
 8091c8e:	4293      	cmp	r3, r2
 8091c90:	d120      	bne.n	8091cd4 <UART_SetConfig+0x208>
 8091c92:	4b4c      	ldr	r3, [pc, #304]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8091c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8091ca0:	d012      	beq.n	8091cc8 <UART_SetConfig+0x1fc>
 8091ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8091ca6:	d802      	bhi.n	8091cae <UART_SetConfig+0x1e2>
 8091ca8:	2b00      	cmp	r3, #0
 8091caa:	d007      	beq.n	8091cbc <UART_SetConfig+0x1f0>
 8091cac:	e083      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8091cb2:	d006      	beq.n	8091cc2 <UART_SetConfig+0x1f6>
 8091cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8091cb8:	d009      	beq.n	8091cce <UART_SetConfig+0x202>
 8091cba:	e07c      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cbc:	2300      	movs	r3, #0
 8091cbe:	75fb      	strb	r3, [r7, #23]
 8091cc0:	e079      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cc2:	2302      	movs	r3, #2
 8091cc4:	75fb      	strb	r3, [r7, #23]
 8091cc6:	e076      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cc8:	2304      	movs	r3, #4
 8091cca:	75fb      	strb	r3, [r7, #23]
 8091ccc:	e073      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cce:	2308      	movs	r3, #8
 8091cd0:	75fb      	strb	r3, [r7, #23]
 8091cd2:	e070      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cd4:	687b      	ldr	r3, [r7, #4]
 8091cd6:	681b      	ldr	r3, [r3, #0]
 8091cd8:	4a3f      	ldr	r2, [pc, #252]	; (8091dd8 <UART_SetConfig+0x30c>)
 8091cda:	4293      	cmp	r3, r2
 8091cdc:	d120      	bne.n	8091d20 <UART_SetConfig+0x254>
 8091cde:	4b39      	ldr	r3, [pc, #228]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091ce4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8091ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8091cec:	d012      	beq.n	8091d14 <UART_SetConfig+0x248>
 8091cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8091cf2:	d802      	bhi.n	8091cfa <UART_SetConfig+0x22e>
 8091cf4:	2b00      	cmp	r3, #0
 8091cf6:	d007      	beq.n	8091d08 <UART_SetConfig+0x23c>
 8091cf8:	e05d      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8091cfe:	d006      	beq.n	8091d0e <UART_SetConfig+0x242>
 8091d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8091d04:	d009      	beq.n	8091d1a <UART_SetConfig+0x24e>
 8091d06:	e056      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d08:	2301      	movs	r3, #1
 8091d0a:	75fb      	strb	r3, [r7, #23]
 8091d0c:	e053      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d0e:	2302      	movs	r3, #2
 8091d10:	75fb      	strb	r3, [r7, #23]
 8091d12:	e050      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d14:	2304      	movs	r3, #4
 8091d16:	75fb      	strb	r3, [r7, #23]
 8091d18:	e04d      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d1a:	2308      	movs	r3, #8
 8091d1c:	75fb      	strb	r3, [r7, #23]
 8091d1e:	e04a      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d20:	687b      	ldr	r3, [r7, #4]
 8091d22:	681b      	ldr	r3, [r3, #0]
 8091d24:	4a2d      	ldr	r2, [pc, #180]	; (8091ddc <UART_SetConfig+0x310>)
 8091d26:	4293      	cmp	r3, r2
 8091d28:	d120      	bne.n	8091d6c <UART_SetConfig+0x2a0>
 8091d2a:	4b26      	ldr	r3, [pc, #152]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091d30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8091d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8091d38:	d012      	beq.n	8091d60 <UART_SetConfig+0x294>
 8091d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8091d3e:	d802      	bhi.n	8091d46 <UART_SetConfig+0x27a>
 8091d40:	2b00      	cmp	r3, #0
 8091d42:	d007      	beq.n	8091d54 <UART_SetConfig+0x288>
 8091d44:	e037      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8091d4a:	d006      	beq.n	8091d5a <UART_SetConfig+0x28e>
 8091d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8091d50:	d009      	beq.n	8091d66 <UART_SetConfig+0x29a>
 8091d52:	e030      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d54:	2300      	movs	r3, #0
 8091d56:	75fb      	strb	r3, [r7, #23]
 8091d58:	e02d      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d5a:	2302      	movs	r3, #2
 8091d5c:	75fb      	strb	r3, [r7, #23]
 8091d5e:	e02a      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d60:	2304      	movs	r3, #4
 8091d62:	75fb      	strb	r3, [r7, #23]
 8091d64:	e027      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d66:	2308      	movs	r3, #8
 8091d68:	75fb      	strb	r3, [r7, #23]
 8091d6a:	e024      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d6c:	687b      	ldr	r3, [r7, #4]
 8091d6e:	681b      	ldr	r3, [r3, #0]
 8091d70:	4a1b      	ldr	r2, [pc, #108]	; (8091de0 <UART_SetConfig+0x314>)
 8091d72:	4293      	cmp	r3, r2
 8091d74:	d136      	bne.n	8091de4 <UART_SetConfig+0x318>
 8091d76:	4b13      	ldr	r3, [pc, #76]	; (8091dc4 <UART_SetConfig+0x2f8>)
 8091d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8091d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8091d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8091d84:	d012      	beq.n	8091dac <UART_SetConfig+0x2e0>
 8091d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8091d8a:	d802      	bhi.n	8091d92 <UART_SetConfig+0x2c6>
 8091d8c:	2b00      	cmp	r3, #0
 8091d8e:	d007      	beq.n	8091da0 <UART_SetConfig+0x2d4>
 8091d90:	e011      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8091d96:	d006      	beq.n	8091da6 <UART_SetConfig+0x2da>
 8091d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8091d9c:	d009      	beq.n	8091db2 <UART_SetConfig+0x2e6>
 8091d9e:	e00a      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091da0:	2300      	movs	r3, #0
 8091da2:	75fb      	strb	r3, [r7, #23]
 8091da4:	e007      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091da6:	2302      	movs	r3, #2
 8091da8:	75fb      	strb	r3, [r7, #23]
 8091daa:	e004      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091dac:	2304      	movs	r3, #4
 8091dae:	75fb      	strb	r3, [r7, #23]
 8091db0:	e001      	b.n	8091db6 <UART_SetConfig+0x2ea>
 8091db2:	2308      	movs	r3, #8
 8091db4:	75fb      	strb	r3, [r7, #23]
 8091db6:	bf00      	nop
 8091db8:	e015      	b.n	8091de6 <UART_SetConfig+0x31a>
 8091dba:	bf00      	nop
 8091dbc:	efff69f3 	.word	0xefff69f3
 8091dc0:	40011000 	.word	0x40011000
 8091dc4:	40023800 	.word	0x40023800
 8091dc8:	40004400 	.word	0x40004400
 8091dcc:	40004800 	.word	0x40004800
 8091dd0:	40004c00 	.word	0x40004c00
 8091dd4:	40005000 	.word	0x40005000
 8091dd8:	40011400 	.word	0x40011400
 8091ddc:	40007800 	.word	0x40007800
 8091de0:	40007c00 	.word	0x40007c00
 8091de4:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8091de6:	687b      	ldr	r3, [r7, #4]
 8091de8:	69db      	ldr	r3, [r3, #28]
 8091dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8091dee:	d16c      	bne.n	8091eca <UART_SetConfig+0x3fe>
  {
    switch (clocksource)
 8091df0:	7dfb      	ldrb	r3, [r7, #23]
 8091df2:	2b08      	cmp	r3, #8
 8091df4:	d854      	bhi.n	8091ea0 <UART_SetConfig+0x3d4>
 8091df6:	a201      	add	r2, pc, #4	; (adr r2, 8091dfc <UART_SetConfig+0x330>)
 8091df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8091dfc:	08091e21 	.word	0x08091e21
 8091e00:	08091e3d 	.word	0x08091e3d
 8091e04:	08091e59 	.word	0x08091e59
 8091e08:	08091ea1 	.word	0x08091ea1
 8091e0c:	08091e6f 	.word	0x08091e6f
 8091e10:	08091ea1 	.word	0x08091ea1
 8091e14:	08091ea1 	.word	0x08091ea1
 8091e18:	08091ea1 	.word	0x08091ea1
 8091e1c:	08091e8b 	.word	0x08091e8b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8091e20:	f7fa ff96 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 8091e24:	4603      	mov	r3, r0
 8091e26:	005a      	lsls	r2, r3, #1
 8091e28:	687b      	ldr	r3, [r7, #4]
 8091e2a:	685b      	ldr	r3, [r3, #4]
 8091e2c:	085b      	lsrs	r3, r3, #1
 8091e2e:	441a      	add	r2, r3
 8091e30:	687b      	ldr	r3, [r7, #4]
 8091e32:	685b      	ldr	r3, [r3, #4]
 8091e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8091e38:	82bb      	strh	r3, [r7, #20]
      break;
 8091e3a:	e034      	b.n	8091ea6 <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8091e3c:	f7fa ff9c 	bl	808cd78 <HAL_RCC_GetPCLK2Freq>
 8091e40:	4603      	mov	r3, r0
 8091e42:	005a      	lsls	r2, r3, #1
 8091e44:	687b      	ldr	r3, [r7, #4]
 8091e46:	685b      	ldr	r3, [r3, #4]
 8091e48:	085b      	lsrs	r3, r3, #1
 8091e4a:	441a      	add	r2, r3
 8091e4c:	687b      	ldr	r3, [r7, #4]
 8091e4e:	685b      	ldr	r3, [r3, #4]
 8091e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8091e54:	82bb      	strh	r3, [r7, #20]
      break;
 8091e56:	e026      	b.n	8091ea6 <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8091e58:	687b      	ldr	r3, [r7, #4]
 8091e5a:	685b      	ldr	r3, [r3, #4]
 8091e5c:	085a      	lsrs	r2, r3, #1
 8091e5e:	4b51      	ldr	r3, [pc, #324]	; (8091fa4 <UART_SetConfig+0x4d8>)
 8091e60:	4413      	add	r3, r2
 8091e62:	687a      	ldr	r2, [r7, #4]
 8091e64:	6852      	ldr	r2, [r2, #4]
 8091e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8091e6a:	82bb      	strh	r3, [r7, #20]
      break;
 8091e6c:	e01b      	b.n	8091ea6 <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8091e6e:	f7fa feb1 	bl	808cbd4 <HAL_RCC_GetSysClockFreq>
 8091e72:	4603      	mov	r3, r0
 8091e74:	005a      	lsls	r2, r3, #1
 8091e76:	687b      	ldr	r3, [r7, #4]
 8091e78:	685b      	ldr	r3, [r3, #4]
 8091e7a:	085b      	lsrs	r3, r3, #1
 8091e7c:	441a      	add	r2, r3
 8091e7e:	687b      	ldr	r3, [r7, #4]
 8091e80:	685b      	ldr	r3, [r3, #4]
 8091e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8091e86:	82bb      	strh	r3, [r7, #20]
      break;
 8091e88:	e00d      	b.n	8091ea6 <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8091e8a:	687b      	ldr	r3, [r7, #4]
 8091e8c:	685b      	ldr	r3, [r3, #4]
 8091e8e:	085b      	lsrs	r3, r3, #1
 8091e90:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8091e94:	687b      	ldr	r3, [r7, #4]
 8091e96:	685b      	ldr	r3, [r3, #4]
 8091e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8091e9c:	82bb      	strh	r3, [r7, #20]
      break;
 8091e9e:	e002      	b.n	8091ea6 <UART_SetConfig+0x3da>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8091ea0:	2301      	movs	r3, #1
 8091ea2:	74fb      	strb	r3, [r7, #19]
      break;
 8091ea4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8091ea6:	8abb      	ldrh	r3, [r7, #20]
 8091ea8:	f023 030f 	bic.w	r3, r3, #15
 8091eac:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8091eae:	8abb      	ldrh	r3, [r7, #20]
 8091eb0:	105b      	asrs	r3, r3, #1
 8091eb2:	b29b      	uxth	r3, r3
 8091eb4:	f003 0307 	and.w	r3, r3, #7
 8091eb8:	b29a      	uxth	r2, r3
 8091eba:	897b      	ldrh	r3, [r7, #10]
 8091ebc:	4313      	orrs	r3, r2
 8091ebe:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8091ec0:	687b      	ldr	r3, [r7, #4]
 8091ec2:	681b      	ldr	r3, [r3, #0]
 8091ec4:	897a      	ldrh	r2, [r7, #10]
 8091ec6:	60da      	str	r2, [r3, #12]
 8091ec8:	e067      	b.n	8091f9a <UART_SetConfig+0x4ce>
  }
  else
  {
    switch (clocksource)
 8091eca:	7dfb      	ldrb	r3, [r7, #23]
 8091ecc:	2b08      	cmp	r3, #8
 8091ece:	d861      	bhi.n	8091f94 <UART_SetConfig+0x4c8>
 8091ed0:	a201      	add	r2, pc, #4	; (adr r2, 8091ed8 <UART_SetConfig+0x40c>)
 8091ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8091ed6:	bf00      	nop
 8091ed8:	08091efd 	.word	0x08091efd
 8091edc:	08091f1d 	.word	0x08091f1d
 8091ee0:	08091f3d 	.word	0x08091f3d
 8091ee4:	08091f95 	.word	0x08091f95
 8091ee8:	08091f59 	.word	0x08091f59
 8091eec:	08091f95 	.word	0x08091f95
 8091ef0:	08091f95 	.word	0x08091f95
 8091ef4:	08091f95 	.word	0x08091f95
 8091ef8:	08091f79 	.word	0x08091f79
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8091efc:	f7fa ff28 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 8091f00:	4602      	mov	r2, r0
 8091f02:	687b      	ldr	r3, [r7, #4]
 8091f04:	685b      	ldr	r3, [r3, #4]
 8091f06:	085b      	lsrs	r3, r3, #1
 8091f08:	441a      	add	r2, r3
 8091f0a:	687b      	ldr	r3, [r7, #4]
 8091f0c:	685b      	ldr	r3, [r3, #4]
 8091f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8091f12:	b29a      	uxth	r2, r3
 8091f14:	687b      	ldr	r3, [r7, #4]
 8091f16:	681b      	ldr	r3, [r3, #0]
 8091f18:	60da      	str	r2, [r3, #12]
      break;
 8091f1a:	e03e      	b.n	8091f9a <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8091f1c:	f7fa ff2c 	bl	808cd78 <HAL_RCC_GetPCLK2Freq>
 8091f20:	4602      	mov	r2, r0
 8091f22:	687b      	ldr	r3, [r7, #4]
 8091f24:	685b      	ldr	r3, [r3, #4]
 8091f26:	085b      	lsrs	r3, r3, #1
 8091f28:	441a      	add	r2, r3
 8091f2a:	687b      	ldr	r3, [r7, #4]
 8091f2c:	685b      	ldr	r3, [r3, #4]
 8091f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8091f32:	b29a      	uxth	r2, r3
 8091f34:	687b      	ldr	r3, [r7, #4]
 8091f36:	681b      	ldr	r3, [r3, #0]
 8091f38:	60da      	str	r2, [r3, #12]
      break;
 8091f3a:	e02e      	b.n	8091f9a <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8091f3c:	687b      	ldr	r3, [r7, #4]
 8091f3e:	685b      	ldr	r3, [r3, #4]
 8091f40:	085a      	lsrs	r2, r3, #1
 8091f42:	4b19      	ldr	r3, [pc, #100]	; (8091fa8 <UART_SetConfig+0x4dc>)
 8091f44:	4413      	add	r3, r2
 8091f46:	687a      	ldr	r2, [r7, #4]
 8091f48:	6852      	ldr	r2, [r2, #4]
 8091f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8091f4e:	b29a      	uxth	r2, r3
 8091f50:	687b      	ldr	r3, [r7, #4]
 8091f52:	681b      	ldr	r3, [r3, #0]
 8091f54:	60da      	str	r2, [r3, #12]
      break;
 8091f56:	e020      	b.n	8091f9a <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8091f58:	f7fa fe3c 	bl	808cbd4 <HAL_RCC_GetSysClockFreq>
 8091f5c:	4602      	mov	r2, r0
 8091f5e:	687b      	ldr	r3, [r7, #4]
 8091f60:	685b      	ldr	r3, [r3, #4]
 8091f62:	085b      	lsrs	r3, r3, #1
 8091f64:	441a      	add	r2, r3
 8091f66:	687b      	ldr	r3, [r7, #4]
 8091f68:	685b      	ldr	r3, [r3, #4]
 8091f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8091f6e:	b29a      	uxth	r2, r3
 8091f70:	687b      	ldr	r3, [r7, #4]
 8091f72:	681b      	ldr	r3, [r3, #0]
 8091f74:	60da      	str	r2, [r3, #12]
      break;
 8091f76:	e010      	b.n	8091f9a <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8091f78:	687b      	ldr	r3, [r7, #4]
 8091f7a:	685b      	ldr	r3, [r3, #4]
 8091f7c:	085b      	lsrs	r3, r3, #1
 8091f7e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8091f82:	687b      	ldr	r3, [r7, #4]
 8091f84:	685b      	ldr	r3, [r3, #4]
 8091f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8091f8a:	b29a      	uxth	r2, r3
 8091f8c:	687b      	ldr	r3, [r7, #4]
 8091f8e:	681b      	ldr	r3, [r3, #0]
 8091f90:	60da      	str	r2, [r3, #12]
      break;
 8091f92:	e002      	b.n	8091f9a <UART_SetConfig+0x4ce>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8091f94:	2301      	movs	r3, #1
 8091f96:	74fb      	strb	r3, [r7, #19]
      break;
 8091f98:	bf00      	nop
    }
  }

  return ret;
 8091f9a:	7cfb      	ldrb	r3, [r7, #19]

}
 8091f9c:	4618      	mov	r0, r3
 8091f9e:	3718      	adds	r7, #24
 8091fa0:	46bd      	mov	sp, r7
 8091fa2:	bd80      	pop	{r7, pc}
 8091fa4:	01e84800 	.word	0x01e84800
 8091fa8:	00f42400 	.word	0x00f42400

08091fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8091fac:	b480      	push	{r7}
 8091fae:	b083      	sub	sp, #12
 8091fb0:	af00      	add	r7, sp, #0
 8091fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8091fb4:	687b      	ldr	r3, [r7, #4]
 8091fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091fb8:	f003 0301 	and.w	r3, r3, #1
 8091fbc:	2b00      	cmp	r3, #0
 8091fbe:	d00a      	beq.n	8091fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8091fc0:	687b      	ldr	r3, [r7, #4]
 8091fc2:	681b      	ldr	r3, [r3, #0]
 8091fc4:	685b      	ldr	r3, [r3, #4]
 8091fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8091fca:	687b      	ldr	r3, [r7, #4]
 8091fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8091fce:	687b      	ldr	r3, [r7, #4]
 8091fd0:	681b      	ldr	r3, [r3, #0]
 8091fd2:	430a      	orrs	r2, r1
 8091fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8091fd6:	687b      	ldr	r3, [r7, #4]
 8091fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091fda:	f003 0302 	and.w	r3, r3, #2
 8091fde:	2b00      	cmp	r3, #0
 8091fe0:	d00a      	beq.n	8091ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8091fe2:	687b      	ldr	r3, [r7, #4]
 8091fe4:	681b      	ldr	r3, [r3, #0]
 8091fe6:	685b      	ldr	r3, [r3, #4]
 8091fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8091fec:	687b      	ldr	r3, [r7, #4]
 8091fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8091ff0:	687b      	ldr	r3, [r7, #4]
 8091ff2:	681b      	ldr	r3, [r3, #0]
 8091ff4:	430a      	orrs	r2, r1
 8091ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8091ff8:	687b      	ldr	r3, [r7, #4]
 8091ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091ffc:	f003 0304 	and.w	r3, r3, #4
 8092000:	2b00      	cmp	r3, #0
 8092002:	d00a      	beq.n	809201a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8092004:	687b      	ldr	r3, [r7, #4]
 8092006:	681b      	ldr	r3, [r3, #0]
 8092008:	685b      	ldr	r3, [r3, #4]
 809200a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 809200e:	687b      	ldr	r3, [r7, #4]
 8092010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8092012:	687b      	ldr	r3, [r7, #4]
 8092014:	681b      	ldr	r3, [r3, #0]
 8092016:	430a      	orrs	r2, r1
 8092018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 809201a:	687b      	ldr	r3, [r7, #4]
 809201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 809201e:	f003 0308 	and.w	r3, r3, #8
 8092022:	2b00      	cmp	r3, #0
 8092024:	d00a      	beq.n	809203c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8092026:	687b      	ldr	r3, [r7, #4]
 8092028:	681b      	ldr	r3, [r3, #0]
 809202a:	685b      	ldr	r3, [r3, #4]
 809202c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8092030:	687b      	ldr	r3, [r7, #4]
 8092032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8092034:	687b      	ldr	r3, [r7, #4]
 8092036:	681b      	ldr	r3, [r3, #0]
 8092038:	430a      	orrs	r2, r1
 809203a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 809203c:	687b      	ldr	r3, [r7, #4]
 809203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8092040:	f003 0310 	and.w	r3, r3, #16
 8092044:	2b00      	cmp	r3, #0
 8092046:	d00a      	beq.n	809205e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8092048:	687b      	ldr	r3, [r7, #4]
 809204a:	681b      	ldr	r3, [r3, #0]
 809204c:	689b      	ldr	r3, [r3, #8]
 809204e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8092052:	687b      	ldr	r3, [r7, #4]
 8092054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8092056:	687b      	ldr	r3, [r7, #4]
 8092058:	681b      	ldr	r3, [r3, #0]
 809205a:	430a      	orrs	r2, r1
 809205c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 809205e:	687b      	ldr	r3, [r7, #4]
 8092060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8092062:	f003 0320 	and.w	r3, r3, #32
 8092066:	2b00      	cmp	r3, #0
 8092068:	d00a      	beq.n	8092080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 809206a:	687b      	ldr	r3, [r7, #4]
 809206c:	681b      	ldr	r3, [r3, #0]
 809206e:	689b      	ldr	r3, [r3, #8]
 8092070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8092074:	687b      	ldr	r3, [r7, #4]
 8092076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8092078:	687b      	ldr	r3, [r7, #4]
 809207a:	681b      	ldr	r3, [r3, #0]
 809207c:	430a      	orrs	r2, r1
 809207e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8092080:	687b      	ldr	r3, [r7, #4]
 8092082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8092084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8092088:	2b00      	cmp	r3, #0
 809208a:	d01a      	beq.n	80920c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 809208c:	687b      	ldr	r3, [r7, #4]
 809208e:	681b      	ldr	r3, [r3, #0]
 8092090:	685b      	ldr	r3, [r3, #4]
 8092092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8092096:	687b      	ldr	r3, [r7, #4]
 8092098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 809209a:	687b      	ldr	r3, [r7, #4]
 809209c:	681b      	ldr	r3, [r3, #0]
 809209e:	430a      	orrs	r2, r1
 80920a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80920a2:	687b      	ldr	r3, [r7, #4]
 80920a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80920a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80920aa:	d10a      	bne.n	80920c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80920ac:	687b      	ldr	r3, [r7, #4]
 80920ae:	681b      	ldr	r3, [r3, #0]
 80920b0:	685b      	ldr	r3, [r3, #4]
 80920b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80920b6:	687b      	ldr	r3, [r7, #4]
 80920b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80920ba:	687b      	ldr	r3, [r7, #4]
 80920bc:	681b      	ldr	r3, [r3, #0]
 80920be:	430a      	orrs	r2, r1
 80920c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80920c2:	687b      	ldr	r3, [r7, #4]
 80920c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80920c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80920ca:	2b00      	cmp	r3, #0
 80920cc:	d00a      	beq.n	80920e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80920ce:	687b      	ldr	r3, [r7, #4]
 80920d0:	681b      	ldr	r3, [r3, #0]
 80920d2:	685b      	ldr	r3, [r3, #4]
 80920d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80920d8:	687b      	ldr	r3, [r7, #4]
 80920da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80920dc:	687b      	ldr	r3, [r7, #4]
 80920de:	681b      	ldr	r3, [r3, #0]
 80920e0:	430a      	orrs	r2, r1
 80920e2:	605a      	str	r2, [r3, #4]
  }
}
 80920e4:	bf00      	nop
 80920e6:	370c      	adds	r7, #12
 80920e8:	46bd      	mov	sp, r7
 80920ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80920ee:	4770      	bx	lr

080920f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80920f0:	b580      	push	{r7, lr}
 80920f2:	b086      	sub	sp, #24
 80920f4:	af02      	add	r7, sp, #8
 80920f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80920f8:	2300      	movs	r3, #0
 80920fa:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80920fc:	687b      	ldr	r3, [r7, #4]
 80920fe:	2200      	movs	r2, #0
 8092100:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8092102:	f7f7 f82d 	bl	8089160 <HAL_GetTick>
 8092106:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8092108:	687b      	ldr	r3, [r7, #4]
 809210a:	681b      	ldr	r3, [r3, #0]
 809210c:	681b      	ldr	r3, [r3, #0]
 809210e:	f003 0308 	and.w	r3, r3, #8
 8092112:	2b08      	cmp	r3, #8
 8092114:	d10e      	bne.n	8092134 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8092116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 809211a:	9300      	str	r3, [sp, #0]
 809211c:	68fb      	ldr	r3, [r7, #12]
 809211e:	2200      	movs	r2, #0
 8092120:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8092124:	6878      	ldr	r0, [r7, #4]
 8092126:	f7ff fb65 	bl	80917f4 <UART_WaitOnFlagUntilTimeout>
 809212a:	4603      	mov	r3, r0
 809212c:	2b00      	cmp	r3, #0
 809212e:	d001      	beq.n	8092134 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8092130:	2303      	movs	r3, #3
 8092132:	e00c      	b.n	809214e <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8092134:	687b      	ldr	r3, [r7, #4]
 8092136:	2220      	movs	r2, #32
 8092138:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 809213c:	687b      	ldr	r3, [r7, #4]
 809213e:	2220      	movs	r2, #32
 8092140:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8092144:	687b      	ldr	r3, [r7, #4]
 8092146:	2200      	movs	r2, #0
 8092148:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 809214c:	2300      	movs	r3, #0
}
 809214e:	4618      	mov	r0, r3
 8092150:	3710      	adds	r7, #16
 8092152:	46bd      	mov	sp, r7
 8092154:	bd80      	pop	{r7, pc}
	...

08092158 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8092158:	b480      	push	{r7}
 809215a:	b085      	sub	sp, #20
 809215c:	af00      	add	r7, sp, #0
 809215e:	6078      	str	r0, [r7, #4]
 8092160:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8092162:	2300      	movs	r3, #0
 8092164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8092166:	2300      	movs	r3, #0
 8092168:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 809216a:	683b      	ldr	r3, [r7, #0]
 809216c:	681b      	ldr	r3, [r3, #0]
 809216e:	2b01      	cmp	r3, #1
 8092170:	d027      	beq.n	80921c2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8092172:	687b      	ldr	r3, [r7, #4]
 8092174:	681b      	ldr	r3, [r3, #0]
 8092176:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8092178:	68fa      	ldr	r2, [r7, #12]
 809217a:	4b2f      	ldr	r3, [pc, #188]	; (8092238 <FMC_SDRAM_Init+0xe0>)
 809217c:	4013      	ands	r3, r2
 809217e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8092180:	683b      	ldr	r3, [r7, #0]
 8092182:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8092184:	683b      	ldr	r3, [r7, #0]
 8092186:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8092188:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 809218a:	683b      	ldr	r3, [r7, #0]
 809218c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 809218e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8092190:	683b      	ldr	r3, [r7, #0]
 8092192:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8092194:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8092196:	683b      	ldr	r3, [r7, #0]
 8092198:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 809219a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 809219c:	683b      	ldr	r3, [r7, #0]
 809219e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80921a0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80921a2:	683b      	ldr	r3, [r7, #0]
 80921a4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80921a6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80921a8:	683b      	ldr	r3, [r7, #0]
 80921aa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80921ac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80921ae:	683b      	ldr	r3, [r7, #0]
 80921b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80921b2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80921b4:	68fa      	ldr	r2, [r7, #12]
 80921b6:	4313      	orrs	r3, r2
 80921b8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80921ba:	687b      	ldr	r3, [r7, #4]
 80921bc:	68fa      	ldr	r2, [r7, #12]
 80921be:	601a      	str	r2, [r3, #0]
 80921c0:	e032      	b.n	8092228 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80921c2:	687b      	ldr	r3, [r7, #4]
 80921c4:	681b      	ldr	r3, [r3, #0]
 80921c6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80921c8:	68fb      	ldr	r3, [r7, #12]
 80921ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80921ce:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80921d0:	683b      	ldr	r3, [r7, #0]
 80921d2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80921d4:	683b      	ldr	r3, [r7, #0]
 80921d6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80921d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80921da:	683b      	ldr	r3, [r7, #0]
 80921dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80921de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80921e0:	68fa      	ldr	r2, [r7, #12]
 80921e2:	4313      	orrs	r3, r2
 80921e4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80921e6:	687b      	ldr	r3, [r7, #4]
 80921e8:	685b      	ldr	r3, [r3, #4]
 80921ea:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80921ec:	68ba      	ldr	r2, [r7, #8]
 80921ee:	4b12      	ldr	r3, [pc, #72]	; (8092238 <FMC_SDRAM_Init+0xe0>)
 80921f0:	4013      	ands	r3, r2
 80921f2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80921f4:	683b      	ldr	r3, [r7, #0]
 80921f6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80921f8:	683b      	ldr	r3, [r7, #0]
 80921fa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80921fc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80921fe:	683b      	ldr	r3, [r7, #0]
 8092200:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8092202:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8092204:	683b      	ldr	r3, [r7, #0]
 8092206:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8092208:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 809220a:	683b      	ldr	r3, [r7, #0]
 809220c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 809220e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8092210:	683b      	ldr	r3, [r7, #0]
 8092212:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8092214:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8092216:	68ba      	ldr	r2, [r7, #8]
 8092218:	4313      	orrs	r3, r2
 809221a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 809221c:	687b      	ldr	r3, [r7, #4]
 809221e:	68fa      	ldr	r2, [r7, #12]
 8092220:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8092222:	687b      	ldr	r3, [r7, #4]
 8092224:	68ba      	ldr	r2, [r7, #8]
 8092226:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8092228:	2300      	movs	r3, #0
}
 809222a:	4618      	mov	r0, r3
 809222c:	3714      	adds	r7, #20
 809222e:	46bd      	mov	sp, r7
 8092230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092234:	4770      	bx	lr
 8092236:	bf00      	nop
 8092238:	ffff8000 	.word	0xffff8000

0809223c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 809223c:	b480      	push	{r7}
 809223e:	b087      	sub	sp, #28
 8092240:	af00      	add	r7, sp, #0
 8092242:	60f8      	str	r0, [r7, #12]
 8092244:	60b9      	str	r1, [r7, #8]
 8092246:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8092248:	2300      	movs	r3, #0
 809224a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 809224c:	2300      	movs	r3, #0
 809224e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8092250:	687b      	ldr	r3, [r7, #4]
 8092252:	2b01      	cmp	r3, #1
 8092254:	d02e      	beq.n	80922b4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8092256:	68fb      	ldr	r3, [r7, #12]
 8092258:	689b      	ldr	r3, [r3, #8]
 809225a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 809225c:	697b      	ldr	r3, [r7, #20]
 809225e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8092262:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8092264:	68bb      	ldr	r3, [r7, #8]
 8092266:	681b      	ldr	r3, [r3, #0]
 8092268:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 809226a:	68bb      	ldr	r3, [r7, #8]
 809226c:	685b      	ldr	r3, [r3, #4]
 809226e:	3b01      	subs	r3, #1
 8092270:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8092272:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8092274:	68bb      	ldr	r3, [r7, #8]
 8092276:	689b      	ldr	r3, [r3, #8]
 8092278:	3b01      	subs	r3, #1
 809227a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 809227c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 809227e:	68bb      	ldr	r3, [r7, #8]
 8092280:	68db      	ldr	r3, [r3, #12]
 8092282:	3b01      	subs	r3, #1
 8092284:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8092286:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8092288:	68bb      	ldr	r3, [r7, #8]
 809228a:	691b      	ldr	r3, [r3, #16]
 809228c:	3b01      	subs	r3, #1
 809228e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8092290:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8092292:	68bb      	ldr	r3, [r7, #8]
 8092294:	695b      	ldr	r3, [r3, #20]
 8092296:	3b01      	subs	r3, #1
 8092298:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 809229a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 809229c:	68bb      	ldr	r3, [r7, #8]
 809229e:	699b      	ldr	r3, [r3, #24]
 80922a0:	3b01      	subs	r3, #1
 80922a2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80922a4:	4313      	orrs	r3, r2
 80922a6:	697a      	ldr	r2, [r7, #20]
 80922a8:	4313      	orrs	r3, r2
 80922aa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80922ac:	68fb      	ldr	r3, [r7, #12]
 80922ae:	697a      	ldr	r2, [r7, #20]
 80922b0:	609a      	str	r2, [r3, #8]
 80922b2:	e039      	b.n	8092328 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80922b4:	68fb      	ldr	r3, [r7, #12]
 80922b6:	689b      	ldr	r3, [r3, #8]
 80922b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80922ba:	697a      	ldr	r2, [r7, #20]
 80922bc:	4b1e      	ldr	r3, [pc, #120]	; (8092338 <FMC_SDRAM_Timing_Init+0xfc>)
 80922be:	4013      	ands	r3, r2
 80922c0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80922c2:	68bb      	ldr	r3, [r7, #8]
 80922c4:	68db      	ldr	r3, [r3, #12]
 80922c6:	3b01      	subs	r3, #1
 80922c8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80922ca:	68bb      	ldr	r3, [r7, #8]
 80922cc:	695b      	ldr	r3, [r3, #20]
 80922ce:	3b01      	subs	r3, #1
 80922d0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80922d2:	4313      	orrs	r3, r2
 80922d4:	697a      	ldr	r2, [r7, #20]
 80922d6:	4313      	orrs	r3, r2
 80922d8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80922da:	68fb      	ldr	r3, [r7, #12]
 80922dc:	68db      	ldr	r3, [r3, #12]
 80922de:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80922e0:	693b      	ldr	r3, [r7, #16]
 80922e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80922e6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80922e8:	68bb      	ldr	r3, [r7, #8]
 80922ea:	681b      	ldr	r3, [r3, #0]
 80922ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80922ee:	68bb      	ldr	r3, [r7, #8]
 80922f0:	685b      	ldr	r3, [r3, #4]
 80922f2:	3b01      	subs	r3, #1
 80922f4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80922f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80922f8:	68bb      	ldr	r3, [r7, #8]
 80922fa:	689b      	ldr	r3, [r3, #8]
 80922fc:	3b01      	subs	r3, #1
 80922fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8092300:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8092302:	68bb      	ldr	r3, [r7, #8]
 8092304:	691b      	ldr	r3, [r3, #16]
 8092306:	3b01      	subs	r3, #1
 8092308:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 809230a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 809230c:	68bb      	ldr	r3, [r7, #8]
 809230e:	699b      	ldr	r3, [r3, #24]
 8092310:	3b01      	subs	r3, #1
 8092312:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8092314:	4313      	orrs	r3, r2
 8092316:	693a      	ldr	r2, [r7, #16]
 8092318:	4313      	orrs	r3, r2
 809231a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 809231c:	68fb      	ldr	r3, [r7, #12]
 809231e:	697a      	ldr	r2, [r7, #20]
 8092320:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8092322:	68fb      	ldr	r3, [r7, #12]
 8092324:	693a      	ldr	r2, [r7, #16]
 8092326:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8092328:	2300      	movs	r3, #0
}
 809232a:	4618      	mov	r0, r3
 809232c:	371c      	adds	r7, #28
 809232e:	46bd      	mov	sp, r7
 8092330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092334:	4770      	bx	lr
 8092336:	bf00      	nop
 8092338:	ff0f0fff 	.word	0xff0f0fff

0809233c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 809233c:	b480      	push	{r7}
 809233e:	b087      	sub	sp, #28
 8092340:	af00      	add	r7, sp, #0
 8092342:	60f8      	str	r0, [r7, #12]
 8092344:	60b9      	str	r1, [r7, #8]
 8092346:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8092348:	2300      	movs	r3, #0
 809234a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 809234c:	68bb      	ldr	r3, [r7, #8]
 809234e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8092350:	68bb      	ldr	r3, [r7, #8]
 8092352:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8092354:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8092356:	68bb      	ldr	r3, [r7, #8]
 8092358:	689b      	ldr	r3, [r3, #8]
 809235a:	3b01      	subs	r3, #1
 809235c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 809235e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8092360:	68bb      	ldr	r3, [r7, #8]
 8092362:	68db      	ldr	r3, [r3, #12]
 8092364:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8092366:	4313      	orrs	r3, r2
 8092368:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 809236a:	697a      	ldr	r2, [r7, #20]
 809236c:	68fb      	ldr	r3, [r7, #12]
 809236e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8092370:	2300      	movs	r3, #0
}
 8092372:	4618      	mov	r0, r3
 8092374:	371c      	adds	r7, #28
 8092376:	46bd      	mov	sp, r7
 8092378:	f85d 7b04 	ldr.w	r7, [sp], #4
 809237c:	4770      	bx	lr

0809237e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 809237e:	b480      	push	{r7}
 8092380:	b083      	sub	sp, #12
 8092382:	af00      	add	r7, sp, #0
 8092384:	6078      	str	r0, [r7, #4]
 8092386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8092388:	687b      	ldr	r3, [r7, #4]
 809238a:	695a      	ldr	r2, [r3, #20]
 809238c:	683b      	ldr	r3, [r7, #0]
 809238e:	005b      	lsls	r3, r3, #1
 8092390:	431a      	orrs	r2, r3
 8092392:	687b      	ldr	r3, [r7, #4]
 8092394:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8092396:	2300      	movs	r3, #0
}
 8092398:	4618      	mov	r0, r3
 809239a:	370c      	adds	r7, #12
 809239c:	46bd      	mov	sp, r7
 809239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80923a2:	4770      	bx	lr

080923a4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80923a4:	b084      	sub	sp, #16
 80923a6:	b480      	push	{r7}
 80923a8:	b085      	sub	sp, #20
 80923aa:	af00      	add	r7, sp, #0
 80923ac:	6078      	str	r0, [r7, #4]
 80923ae:	f107 001c 	add.w	r0, r7, #28
 80923b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80923b6:	2300      	movs	r3, #0
 80923b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80923ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80923bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80923be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80923c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80923c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80923c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80923c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80923c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80923ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80923cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80923ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80923d0:	68fa      	ldr	r2, [r7, #12]
 80923d2:	4313      	orrs	r3, r2
 80923d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80923d6:	687b      	ldr	r3, [r7, #4]
 80923d8:	685a      	ldr	r2, [r3, #4]
 80923da:	4b07      	ldr	r3, [pc, #28]	; (80923f8 <SDMMC_Init+0x54>)
 80923dc:	4013      	ands	r3, r2
 80923de:	68fa      	ldr	r2, [r7, #12]
 80923e0:	431a      	orrs	r2, r3
 80923e2:	687b      	ldr	r3, [r7, #4]
 80923e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80923e6:	2300      	movs	r3, #0
}
 80923e8:	4618      	mov	r0, r3
 80923ea:	3714      	adds	r7, #20
 80923ec:	46bd      	mov	sp, r7
 80923ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80923f2:	b004      	add	sp, #16
 80923f4:	4770      	bx	lr
 80923f6:	bf00      	nop
 80923f8:	ffff8100 	.word	0xffff8100

080923fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80923fc:	b480      	push	{r7}
 80923fe:	b083      	sub	sp, #12
 8092400:	af00      	add	r7, sp, #0
 8092402:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8092404:	687b      	ldr	r3, [r7, #4]
 8092406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 809240a:	4618      	mov	r0, r3
 809240c:	370c      	adds	r7, #12
 809240e:	46bd      	mov	sp, r7
 8092410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092414:	4770      	bx	lr

08092416 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8092416:	b480      	push	{r7}
 8092418:	b083      	sub	sp, #12
 809241a:	af00      	add	r7, sp, #0
 809241c:	6078      	str	r0, [r7, #4]
 809241e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8092420:	683b      	ldr	r3, [r7, #0]
 8092422:	681a      	ldr	r2, [r3, #0]
 8092424:	687b      	ldr	r3, [r7, #4]
 8092426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 809242a:	2300      	movs	r3, #0
}
 809242c:	4618      	mov	r0, r3
 809242e:	370c      	adds	r7, #12
 8092430:	46bd      	mov	sp, r7
 8092432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092436:	4770      	bx	lr

08092438 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8092438:	b480      	push	{r7}
 809243a:	b083      	sub	sp, #12
 809243c:	af00      	add	r7, sp, #0
 809243e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8092440:	687b      	ldr	r3, [r7, #4]
 8092442:	2203      	movs	r2, #3
 8092444:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8092446:	2300      	movs	r3, #0
}
 8092448:	4618      	mov	r0, r3
 809244a:	370c      	adds	r7, #12
 809244c:	46bd      	mov	sp, r7
 809244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092452:	4770      	bx	lr

08092454 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8092454:	b480      	push	{r7}
 8092456:	b083      	sub	sp, #12
 8092458:	af00      	add	r7, sp, #0
 809245a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 809245c:	687b      	ldr	r3, [r7, #4]
 809245e:	681b      	ldr	r3, [r3, #0]
 8092460:	f003 0303 	and.w	r3, r3, #3
}
 8092464:	4618      	mov	r0, r3
 8092466:	370c      	adds	r7, #12
 8092468:	46bd      	mov	sp, r7
 809246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809246e:	4770      	bx	lr

08092470 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8092470:	b480      	push	{r7}
 8092472:	b085      	sub	sp, #20
 8092474:	af00      	add	r7, sp, #0
 8092476:	6078      	str	r0, [r7, #4]
 8092478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 809247a:	2300      	movs	r3, #0
 809247c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 809247e:	683b      	ldr	r3, [r7, #0]
 8092480:	681a      	ldr	r2, [r3, #0]
 8092482:	687b      	ldr	r3, [r7, #4]
 8092484:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8092486:	683b      	ldr	r3, [r7, #0]
 8092488:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 809248a:	683b      	ldr	r3, [r7, #0]
 809248c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 809248e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8092490:	683b      	ldr	r3, [r7, #0]
 8092492:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8092494:	431a      	orrs	r2, r3
                       Command->CPSM);
 8092496:	683b      	ldr	r3, [r7, #0]
 8092498:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 809249a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 809249c:	68fa      	ldr	r2, [r7, #12]
 809249e:	4313      	orrs	r3, r2
 80924a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80924a2:	687b      	ldr	r3, [r7, #4]
 80924a4:	68da      	ldr	r2, [r3, #12]
 80924a6:	4b06      	ldr	r3, [pc, #24]	; (80924c0 <SDMMC_SendCommand+0x50>)
 80924a8:	4013      	ands	r3, r2
 80924aa:	68fa      	ldr	r2, [r7, #12]
 80924ac:	431a      	orrs	r2, r3
 80924ae:	687b      	ldr	r3, [r7, #4]
 80924b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80924b2:	2300      	movs	r3, #0
}
 80924b4:	4618      	mov	r0, r3
 80924b6:	3714      	adds	r7, #20
 80924b8:	46bd      	mov	sp, r7
 80924ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80924be:	4770      	bx	lr
 80924c0:	fffff000 	.word	0xfffff000

080924c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80924c4:	b480      	push	{r7}
 80924c6:	b083      	sub	sp, #12
 80924c8:	af00      	add	r7, sp, #0
 80924ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80924cc:	687b      	ldr	r3, [r7, #4]
 80924ce:	691b      	ldr	r3, [r3, #16]
 80924d0:	b2db      	uxtb	r3, r3
}
 80924d2:	4618      	mov	r0, r3
 80924d4:	370c      	adds	r7, #12
 80924d6:	46bd      	mov	sp, r7
 80924d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80924dc:	4770      	bx	lr

080924de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80924de:	b480      	push	{r7}
 80924e0:	b085      	sub	sp, #20
 80924e2:	af00      	add	r7, sp, #0
 80924e4:	6078      	str	r0, [r7, #4]
 80924e6:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80924e8:	2300      	movs	r3, #0
 80924ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80924ec:	687b      	ldr	r3, [r7, #4]
 80924ee:	3314      	adds	r3, #20
 80924f0:	461a      	mov	r2, r3
 80924f2:	683b      	ldr	r3, [r7, #0]
 80924f4:	4413      	add	r3, r2
 80924f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80924f8:	68fb      	ldr	r3, [r7, #12]
 80924fa:	681b      	ldr	r3, [r3, #0]
}  
 80924fc:	4618      	mov	r0, r3
 80924fe:	3714      	adds	r7, #20
 8092500:	46bd      	mov	sp, r7
 8092502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8092506:	4770      	bx	lr

08092508 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8092508:	b480      	push	{r7}
 809250a:	b085      	sub	sp, #20
 809250c:	af00      	add	r7, sp, #0
 809250e:	6078      	str	r0, [r7, #4]
 8092510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8092512:	2300      	movs	r3, #0
 8092514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8092516:	683b      	ldr	r3, [r7, #0]
 8092518:	681a      	ldr	r2, [r3, #0]
 809251a:	687b      	ldr	r3, [r7, #4]
 809251c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 809251e:	683b      	ldr	r3, [r7, #0]
 8092520:	685a      	ldr	r2, [r3, #4]
 8092522:	687b      	ldr	r3, [r7, #4]
 8092524:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8092526:	683b      	ldr	r3, [r7, #0]
 8092528:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 809252a:	683b      	ldr	r3, [r7, #0]
 809252c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 809252e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8092530:	683b      	ldr	r3, [r7, #0]
 8092532:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8092534:	431a      	orrs	r2, r3
                       Data->DPSM);
 8092536:	683b      	ldr	r3, [r7, #0]
 8092538:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 809253a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 809253c:	68fa      	ldr	r2, [r7, #12]
 809253e:	4313      	orrs	r3, r2
 8092540:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8092542:	687b      	ldr	r3, [r7, #4]
 8092544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8092546:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 809254a:	68fb      	ldr	r3, [r7, #12]
 809254c:	431a      	orrs	r2, r3
 809254e:	687b      	ldr	r3, [r7, #4]
 8092550:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8092552:	2300      	movs	r3, #0

}
 8092554:	4618      	mov	r0, r3
 8092556:	3714      	adds	r7, #20
 8092558:	46bd      	mov	sp, r7
 809255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809255e:	4770      	bx	lr

08092560 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8092560:	b580      	push	{r7, lr}
 8092562:	b088      	sub	sp, #32
 8092564:	af00      	add	r7, sp, #0
 8092566:	6078      	str	r0, [r7, #4]
 8092568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 809256a:	2300      	movs	r3, #0
 809256c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 809256e:	683b      	ldr	r3, [r7, #0]
 8092570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8092572:	2310      	movs	r3, #16
 8092574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092576:	2340      	movs	r3, #64	; 0x40
 8092578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809257a:	2300      	movs	r3, #0
 809257c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092582:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092584:	f107 0308 	add.w	r3, r7, #8
 8092588:	4619      	mov	r1, r3
 809258a:	6878      	ldr	r0, [r7, #4]
 809258c:	f7ff ff70 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8092590:	f241 3288 	movw	r2, #5000	; 0x1388
 8092594:	2110      	movs	r1, #16
 8092596:	6878      	ldr	r0, [r7, #4]
 8092598:	f000 faac 	bl	8092af4 <SDMMC_GetCmdResp1>
 809259c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 809259e:	69fb      	ldr	r3, [r7, #28]
}
 80925a0:	4618      	mov	r0, r3
 80925a2:	3720      	adds	r7, #32
 80925a4:	46bd      	mov	sp, r7
 80925a6:	bd80      	pop	{r7, pc}

080925a8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80925a8:	b580      	push	{r7, lr}
 80925aa:	b088      	sub	sp, #32
 80925ac:	af00      	add	r7, sp, #0
 80925ae:	6078      	str	r0, [r7, #4]
 80925b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80925b2:	2300      	movs	r3, #0
 80925b4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80925b6:	683b      	ldr	r3, [r7, #0]
 80925b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80925ba:	2311      	movs	r3, #17
 80925bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80925be:	2340      	movs	r3, #64	; 0x40
 80925c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80925c2:	2300      	movs	r3, #0
 80925c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80925c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80925ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80925cc:	f107 0308 	add.w	r3, r7, #8
 80925d0:	4619      	mov	r1, r3
 80925d2:	6878      	ldr	r0, [r7, #4]
 80925d4:	f7ff ff4c 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80925d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80925dc:	2111      	movs	r1, #17
 80925de:	6878      	ldr	r0, [r7, #4]
 80925e0:	f000 fa88 	bl	8092af4 <SDMMC_GetCmdResp1>
 80925e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80925e6:	69fb      	ldr	r3, [r7, #28]
}
 80925e8:	4618      	mov	r0, r3
 80925ea:	3720      	adds	r7, #32
 80925ec:	46bd      	mov	sp, r7
 80925ee:	bd80      	pop	{r7, pc}

080925f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80925f0:	b580      	push	{r7, lr}
 80925f2:	b088      	sub	sp, #32
 80925f4:	af00      	add	r7, sp, #0
 80925f6:	6078      	str	r0, [r7, #4]
 80925f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80925fa:	2300      	movs	r3, #0
 80925fc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80925fe:	683b      	ldr	r3, [r7, #0]
 8092600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8092602:	2312      	movs	r3, #18
 8092604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092606:	2340      	movs	r3, #64	; 0x40
 8092608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809260a:	2300      	movs	r3, #0
 809260c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092612:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092614:	f107 0308 	add.w	r3, r7, #8
 8092618:	4619      	mov	r1, r3
 809261a:	6878      	ldr	r0, [r7, #4]
 809261c:	f7ff ff28 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8092620:	f241 3288 	movw	r2, #5000	; 0x1388
 8092624:	2112      	movs	r1, #18
 8092626:	6878      	ldr	r0, [r7, #4]
 8092628:	f000 fa64 	bl	8092af4 <SDMMC_GetCmdResp1>
 809262c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 809262e:	69fb      	ldr	r3, [r7, #28]
}
 8092630:	4618      	mov	r0, r3
 8092632:	3720      	adds	r7, #32
 8092634:	46bd      	mov	sp, r7
 8092636:	bd80      	pop	{r7, pc}

08092638 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8092638:	b580      	push	{r7, lr}
 809263a:	b088      	sub	sp, #32
 809263c:	af00      	add	r7, sp, #0
 809263e:	6078      	str	r0, [r7, #4]
 8092640:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092642:	2300      	movs	r3, #0
 8092644:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8092646:	683b      	ldr	r3, [r7, #0]
 8092648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 809264a:	2318      	movs	r3, #24
 809264c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 809264e:	2340      	movs	r3, #64	; 0x40
 8092650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092652:	2300      	movs	r3, #0
 8092654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 809265a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 809265c:	f107 0308 	add.w	r3, r7, #8
 8092660:	4619      	mov	r1, r3
 8092662:	6878      	ldr	r0, [r7, #4]
 8092664:	f7ff ff04 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8092668:	f241 3288 	movw	r2, #5000	; 0x1388
 809266c:	2118      	movs	r1, #24
 809266e:	6878      	ldr	r0, [r7, #4]
 8092670:	f000 fa40 	bl	8092af4 <SDMMC_GetCmdResp1>
 8092674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092676:	69fb      	ldr	r3, [r7, #28]
}
 8092678:	4618      	mov	r0, r3
 809267a:	3720      	adds	r7, #32
 809267c:	46bd      	mov	sp, r7
 809267e:	bd80      	pop	{r7, pc}

08092680 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8092680:	b580      	push	{r7, lr}
 8092682:	b088      	sub	sp, #32
 8092684:	af00      	add	r7, sp, #0
 8092686:	6078      	str	r0, [r7, #4]
 8092688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 809268a:	2300      	movs	r3, #0
 809268c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 809268e:	683b      	ldr	r3, [r7, #0]
 8092690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8092692:	2319      	movs	r3, #25
 8092694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092696:	2340      	movs	r3, #64	; 0x40
 8092698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809269a:	2300      	movs	r3, #0
 809269c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809269e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80926a2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80926a4:	f107 0308 	add.w	r3, r7, #8
 80926a8:	4619      	mov	r1, r3
 80926aa:	6878      	ldr	r0, [r7, #4]
 80926ac:	f7ff fee0 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80926b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80926b4:	2119      	movs	r1, #25
 80926b6:	6878      	ldr	r0, [r7, #4]
 80926b8:	f000 fa1c 	bl	8092af4 <SDMMC_GetCmdResp1>
 80926bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80926be:	69fb      	ldr	r3, [r7, #28]
}
 80926c0:	4618      	mov	r0, r3
 80926c2:	3720      	adds	r7, #32
 80926c4:	46bd      	mov	sp, r7
 80926c6:	bd80      	pop	{r7, pc}

080926c8 <SDMMC_CmdSDEraseStartAdd>:
  * @brief  Send the Start Address Erase command for SD and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd)
{
 80926c8:	b580      	push	{r7, lr}
 80926ca:	b088      	sub	sp, #32
 80926cc:	af00      	add	r7, sp, #0
 80926ce:	6078      	str	r0, [r7, #4]
 80926d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80926d2:	2300      	movs	r3, #0
 80926d4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 80926d6:	683b      	ldr	r3, [r7, #0]
 80926d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_START;
 80926da:	2320      	movs	r3, #32
 80926dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80926de:	2340      	movs	r3, #64	; 0x40
 80926e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80926e2:	2300      	movs	r3, #0
 80926e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80926e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80926ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80926ec:	f107 0308 	add.w	r3, r7, #8
 80926f0:	4619      	mov	r1, r3
 80926f2:	6878      	ldr	r0, [r7, #4]
 80926f4:	f7ff febc 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 80926f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80926fc:	2120      	movs	r1, #32
 80926fe:	6878      	ldr	r0, [r7, #4]
 8092700:	f000 f9f8 	bl	8092af4 <SDMMC_GetCmdResp1>
 8092704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092706:	69fb      	ldr	r3, [r7, #28]
}
 8092708:	4618      	mov	r0, r3
 809270a:	3720      	adds	r7, #32
 809270c:	46bd      	mov	sp, r7
 809270e:	bd80      	pop	{r7, pc}

08092710 <SDMMC_CmdSDEraseEndAdd>:
  * @brief  Send the End Address Erase command for SD and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSDEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd)
{
 8092710:	b580      	push	{r7, lr}
 8092712:	b088      	sub	sp, #32
 8092714:	af00      	add	r7, sp, #0
 8092716:	6078      	str	r0, [r7, #4]
 8092718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 809271a:	2300      	movs	r3, #0
 809271c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 809271e:	683b      	ldr	r3, [r7, #0]
 8092720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_END;
 8092722:	2321      	movs	r3, #33	; 0x21
 8092724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092726:	2340      	movs	r3, #64	; 0x40
 8092728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809272a:	2300      	movs	r3, #0
 809272c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809272e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092732:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092734:	f107 0308 	add.w	r3, r7, #8
 8092738:	4619      	mov	r1, r3
 809273a:	6878      	ldr	r0, [r7, #4]
 809273c:	f7ff fe98 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 8092740:	f241 3288 	movw	r2, #5000	; 0x1388
 8092744:	2121      	movs	r1, #33	; 0x21
 8092746:	6878      	ldr	r0, [r7, #4]
 8092748:	f000 f9d4 	bl	8092af4 <SDMMC_GetCmdResp1>
 809274c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 809274e:	69fb      	ldr	r3, [r7, #28]
}
 8092750:	4618      	mov	r0, r3
 8092752:	3720      	adds	r7, #32
 8092754:	46bd      	mov	sp, r7
 8092756:	bd80      	pop	{r7, pc}

08092758 <SDMMC_CmdErase>:
  * @brief  Send the Erase command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdErase(SDMMC_TypeDef *SDMMCx)
{
 8092758:	b580      	push	{r7, lr}
 809275a:	b088      	sub	sp, #32
 809275c:	af00      	add	r7, sp, #0
 809275e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092760:	2300      	movs	r3, #0
 8092762:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = 0;
 8092764:	2300      	movs	r3, #0
 8092766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8092768:	2326      	movs	r3, #38	; 0x26
 809276a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 809276c:	2340      	movs	r3, #64	; 0x40
 809276e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092770:	2300      	movs	r3, #0
 8092772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092778:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 809277a:	f107 0308 	add.w	r3, r7, #8
 809277e:	4619      	mov	r1, r3
 8092780:	6878      	ldr	r0, [r7, #4]
 8092782:	f7ff fe75 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 8092786:	f24f 6218 	movw	r2, #63000	; 0xf618
 809278a:	2126      	movs	r1, #38	; 0x26
 809278c:	6878      	ldr	r0, [r7, #4]
 809278e:	f000 f9b1 	bl	8092af4 <SDMMC_GetCmdResp1>
 8092792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092794:	69fb      	ldr	r3, [r7, #28]
}
 8092796:	4618      	mov	r0, r3
 8092798:	3720      	adds	r7, #32
 809279a:	46bd      	mov	sp, r7
 809279c:	bd80      	pop	{r7, pc}
	...

080927a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80927a0:	b580      	push	{r7, lr}
 80927a2:	b088      	sub	sp, #32
 80927a4:	af00      	add	r7, sp, #0
 80927a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80927a8:	2300      	movs	r3, #0
 80927aa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80927ac:	2300      	movs	r3, #0
 80927ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80927b0:	230c      	movs	r3, #12
 80927b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80927b4:	2340      	movs	r3, #64	; 0x40
 80927b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80927b8:	2300      	movs	r3, #0
 80927ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80927bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80927c0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80927c2:	f107 0308 	add.w	r3, r7, #8
 80927c6:	4619      	mov	r1, r3
 80927c8:	6878      	ldr	r0, [r7, #4]
 80927ca:	f7ff fe51 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80927ce:	4a05      	ldr	r2, [pc, #20]	; (80927e4 <SDMMC_CmdStopTransfer+0x44>)
 80927d0:	210c      	movs	r1, #12
 80927d2:	6878      	ldr	r0, [r7, #4]
 80927d4:	f000 f98e 	bl	8092af4 <SDMMC_GetCmdResp1>
 80927d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80927da:	69fb      	ldr	r3, [r7, #28]
}
 80927dc:	4618      	mov	r0, r3
 80927de:	3720      	adds	r7, #32
 80927e0:	46bd      	mov	sp, r7
 80927e2:	bd80      	pop	{r7, pc}
 80927e4:	05f5e100 	.word	0x05f5e100

080927e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80927e8:	b580      	push	{r7, lr}
 80927ea:	b08a      	sub	sp, #40	; 0x28
 80927ec:	af00      	add	r7, sp, #0
 80927ee:	60f8      	str	r0, [r7, #12]
 80927f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80927f4:	2300      	movs	r3, #0
 80927f6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80927f8:	683b      	ldr	r3, [r7, #0]
 80927fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80927fc:	2307      	movs	r3, #7
 80927fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092800:	2340      	movs	r3, #64	; 0x40
 8092802:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092804:	2300      	movs	r3, #0
 8092806:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 809280c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 809280e:	f107 0310 	add.w	r3, r7, #16
 8092812:	4619      	mov	r1, r3
 8092814:	68f8      	ldr	r0, [r7, #12]
 8092816:	f7ff fe2b 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 809281a:	f241 3288 	movw	r2, #5000	; 0x1388
 809281e:	2107      	movs	r1, #7
 8092820:	68f8      	ldr	r0, [r7, #12]
 8092822:	f000 f967 	bl	8092af4 <SDMMC_GetCmdResp1>
 8092826:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8092828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 809282a:	4618      	mov	r0, r3
 809282c:	3728      	adds	r7, #40	; 0x28
 809282e:	46bd      	mov	sp, r7
 8092830:	bd80      	pop	{r7, pc}

08092832 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8092832:	b580      	push	{r7, lr}
 8092834:	b088      	sub	sp, #32
 8092836:	af00      	add	r7, sp, #0
 8092838:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 809283a:	2300      	movs	r3, #0
 809283c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 809283e:	2300      	movs	r3, #0
 8092840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8092842:	2300      	movs	r3, #0
 8092844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8092846:	2300      	movs	r3, #0
 8092848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809284a:	2300      	movs	r3, #0
 809284c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809284e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092852:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092854:	f107 0308 	add.w	r3, r7, #8
 8092858:	4619      	mov	r1, r3
 809285a:	6878      	ldr	r0, [r7, #4]
 809285c:	f7ff fe08 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8092860:	6878      	ldr	r0, [r7, #4]
 8092862:	f000 f91d 	bl	8092aa0 <SDMMC_GetCmdError>
 8092866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092868:	69fb      	ldr	r3, [r7, #28]
}
 809286a:	4618      	mov	r0, r3
 809286c:	3720      	adds	r7, #32
 809286e:	46bd      	mov	sp, r7
 8092870:	bd80      	pop	{r7, pc}

08092872 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8092872:	b580      	push	{r7, lr}
 8092874:	b088      	sub	sp, #32
 8092876:	af00      	add	r7, sp, #0
 8092878:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 809287a:	2300      	movs	r3, #0
 809287c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 809287e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8092882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8092884:	2308      	movs	r3, #8
 8092886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092888:	2340      	movs	r3, #64	; 0x40
 809288a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809288c:	2300      	movs	r3, #0
 809288e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092894:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092896:	f107 0308 	add.w	r3, r7, #8
 809289a:	4619      	mov	r1, r3
 809289c:	6878      	ldr	r0, [r7, #4]
 809289e:	f7ff fde7 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80928a2:	6878      	ldr	r0, [r7, #4]
 80928a4:	f000 faee 	bl	8092e84 <SDMMC_GetCmdResp7>
 80928a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80928aa:	69fb      	ldr	r3, [r7, #28]
}
 80928ac:	4618      	mov	r0, r3
 80928ae:	3720      	adds	r7, #32
 80928b0:	46bd      	mov	sp, r7
 80928b2:	bd80      	pop	{r7, pc}

080928b4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80928b4:	b580      	push	{r7, lr}
 80928b6:	b088      	sub	sp, #32
 80928b8:	af00      	add	r7, sp, #0
 80928ba:	6078      	str	r0, [r7, #4]
 80928bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80928be:	2300      	movs	r3, #0
 80928c0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80928c2:	683b      	ldr	r3, [r7, #0]
 80928c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80928c6:	2337      	movs	r3, #55	; 0x37
 80928c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80928ca:	2340      	movs	r3, #64	; 0x40
 80928cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80928ce:	2300      	movs	r3, #0
 80928d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80928d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80928d6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80928d8:	f107 0308 	add.w	r3, r7, #8
 80928dc:	4619      	mov	r1, r3
 80928de:	6878      	ldr	r0, [r7, #4]
 80928e0:	f7ff fdc6 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80928e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80928e8:	2137      	movs	r1, #55	; 0x37
 80928ea:	6878      	ldr	r0, [r7, #4]
 80928ec:	f000 f902 	bl	8092af4 <SDMMC_GetCmdResp1>
 80928f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80928f2:	69fb      	ldr	r3, [r7, #28]
}
 80928f4:	4618      	mov	r0, r3
 80928f6:	3720      	adds	r7, #32
 80928f8:	46bd      	mov	sp, r7
 80928fa:	bd80      	pop	{r7, pc}

080928fc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80928fc:	b580      	push	{r7, lr}
 80928fe:	b088      	sub	sp, #32
 8092900:	af00      	add	r7, sp, #0
 8092902:	6078      	str	r0, [r7, #4]
 8092904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092906:	2300      	movs	r3, #0
 8092908:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 809290a:	683a      	ldr	r2, [r7, #0]
 809290c:	4b0d      	ldr	r3, [pc, #52]	; (8092944 <SDMMC_CmdAppOperCommand+0x48>)
 809290e:	4313      	orrs	r3, r2
 8092910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8092912:	2329      	movs	r3, #41	; 0x29
 8092914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092916:	2340      	movs	r3, #64	; 0x40
 8092918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 809291a:	2300      	movs	r3, #0
 809291c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 809291e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092922:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092924:	f107 0308 	add.w	r3, r7, #8
 8092928:	4619      	mov	r1, r3
 809292a:	6878      	ldr	r0, [r7, #4]
 809292c:	f7ff fda0 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8092930:	6878      	ldr	r0, [r7, #4]
 8092932:	f000 fa05 	bl	8092d40 <SDMMC_GetCmdResp3>
 8092936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092938:	69fb      	ldr	r3, [r7, #28]
}
 809293a:	4618      	mov	r0, r3
 809293c:	3720      	adds	r7, #32
 809293e:	46bd      	mov	sp, r7
 8092940:	bd80      	pop	{r7, pc}
 8092942:	bf00      	nop
 8092944:	80100000 	.word	0x80100000

08092948 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8092948:	b580      	push	{r7, lr}
 809294a:	b088      	sub	sp, #32
 809294c:	af00      	add	r7, sp, #0
 809294e:	6078      	str	r0, [r7, #4]
 8092950:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092952:	2300      	movs	r3, #0
 8092954:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8092956:	683b      	ldr	r3, [r7, #0]
 8092958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 809295a:	2306      	movs	r3, #6
 809295c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 809295e:	2340      	movs	r3, #64	; 0x40
 8092960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092962:	2300      	movs	r3, #0
 8092964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 809296a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 809296c:	f107 0308 	add.w	r3, r7, #8
 8092970:	4619      	mov	r1, r3
 8092972:	6878      	ldr	r0, [r7, #4]
 8092974:	f7ff fd7c 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8092978:	f241 3288 	movw	r2, #5000	; 0x1388
 809297c:	2106      	movs	r1, #6
 809297e:	6878      	ldr	r0, [r7, #4]
 8092980:	f000 f8b8 	bl	8092af4 <SDMMC_GetCmdResp1>
 8092984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092986:	69fb      	ldr	r3, [r7, #28]
}
 8092988:	4618      	mov	r0, r3
 809298a:	3720      	adds	r7, #32
 809298c:	46bd      	mov	sp, r7
 809298e:	bd80      	pop	{r7, pc}

08092990 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8092990:	b580      	push	{r7, lr}
 8092992:	b088      	sub	sp, #32
 8092994:	af00      	add	r7, sp, #0
 8092996:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092998:	2300      	movs	r3, #0
 809299a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 809299c:	2300      	movs	r3, #0
 809299e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80929a0:	2333      	movs	r3, #51	; 0x33
 80929a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80929a4:	2340      	movs	r3, #64	; 0x40
 80929a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80929a8:	2300      	movs	r3, #0
 80929aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80929ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80929b0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80929b2:	f107 0308 	add.w	r3, r7, #8
 80929b6:	4619      	mov	r1, r3
 80929b8:	6878      	ldr	r0, [r7, #4]
 80929ba:	f7ff fd59 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80929be:	f241 3288 	movw	r2, #5000	; 0x1388
 80929c2:	2133      	movs	r1, #51	; 0x33
 80929c4:	6878      	ldr	r0, [r7, #4]
 80929c6:	f000 f895 	bl	8092af4 <SDMMC_GetCmdResp1>
 80929ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80929cc:	69fb      	ldr	r3, [r7, #28]
}
 80929ce:	4618      	mov	r0, r3
 80929d0:	3720      	adds	r7, #32
 80929d2:	46bd      	mov	sp, r7
 80929d4:	bd80      	pop	{r7, pc}

080929d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80929d6:	b580      	push	{r7, lr}
 80929d8:	b088      	sub	sp, #32
 80929da:	af00      	add	r7, sp, #0
 80929dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80929de:	2300      	movs	r3, #0
 80929e0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80929e2:	2300      	movs	r3, #0
 80929e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80929e6:	2302      	movs	r3, #2
 80929e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80929ea:	23c0      	movs	r3, #192	; 0xc0
 80929ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80929ee:	2300      	movs	r3, #0
 80929f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80929f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80929f6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80929f8:	f107 0308 	add.w	r3, r7, #8
 80929fc:	4619      	mov	r1, r3
 80929fe:	6878      	ldr	r0, [r7, #4]
 8092a00:	f7ff fd36 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8092a04:	6878      	ldr	r0, [r7, #4]
 8092a06:	f000 f95b 	bl	8092cc0 <SDMMC_GetCmdResp2>
 8092a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092a0c:	69fb      	ldr	r3, [r7, #28]
}
 8092a0e:	4618      	mov	r0, r3
 8092a10:	3720      	adds	r7, #32
 8092a12:	46bd      	mov	sp, r7
 8092a14:	bd80      	pop	{r7, pc}

08092a16 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8092a16:	b580      	push	{r7, lr}
 8092a18:	b088      	sub	sp, #32
 8092a1a:	af00      	add	r7, sp, #0
 8092a1c:	6078      	str	r0, [r7, #4]
 8092a1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092a20:	2300      	movs	r3, #0
 8092a22:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8092a24:	683b      	ldr	r3, [r7, #0]
 8092a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8092a28:	2309      	movs	r3, #9
 8092a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8092a2c:	23c0      	movs	r3, #192	; 0xc0
 8092a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092a30:	2300      	movs	r3, #0
 8092a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092a38:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092a3a:	f107 0308 	add.w	r3, r7, #8
 8092a3e:	4619      	mov	r1, r3
 8092a40:	6878      	ldr	r0, [r7, #4]
 8092a42:	f7ff fd15 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8092a46:	6878      	ldr	r0, [r7, #4]
 8092a48:	f000 f93a 	bl	8092cc0 <SDMMC_GetCmdResp2>
 8092a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092a4e:	69fb      	ldr	r3, [r7, #28]
}
 8092a50:	4618      	mov	r0, r3
 8092a52:	3720      	adds	r7, #32
 8092a54:	46bd      	mov	sp, r7
 8092a56:	bd80      	pop	{r7, pc}

08092a58 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8092a58:	b580      	push	{r7, lr}
 8092a5a:	b088      	sub	sp, #32
 8092a5c:	af00      	add	r7, sp, #0
 8092a5e:	6078      	str	r0, [r7, #4]
 8092a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8092a62:	2300      	movs	r3, #0
 8092a64:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8092a66:	2300      	movs	r3, #0
 8092a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8092a6a:	2303      	movs	r3, #3
 8092a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8092a6e:	2340      	movs	r3, #64	; 0x40
 8092a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8092a72:	2300      	movs	r3, #0
 8092a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8092a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092a7a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8092a7c:	f107 0308 	add.w	r3, r7, #8
 8092a80:	4619      	mov	r1, r3
 8092a82:	6878      	ldr	r0, [r7, #4]
 8092a84:	f7ff fcf4 	bl	8092470 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8092a88:	683a      	ldr	r2, [r7, #0]
 8092a8a:	2103      	movs	r1, #3
 8092a8c:	6878      	ldr	r0, [r7, #4]
 8092a8e:	f000 f98b 	bl	8092da8 <SDMMC_GetCmdResp6>
 8092a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8092a94:	69fb      	ldr	r3, [r7, #28]
}
 8092a96:	4618      	mov	r0, r3
 8092a98:	3720      	adds	r7, #32
 8092a9a:	46bd      	mov	sp, r7
 8092a9c:	bd80      	pop	{r7, pc}
	...

08092aa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8092aa0:	b490      	push	{r4, r7}
 8092aa2:	b082      	sub	sp, #8
 8092aa4:	af00      	add	r7, sp, #0
 8092aa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8092aa8:	4b10      	ldr	r3, [pc, #64]	; (8092aec <SDMMC_GetCmdError+0x4c>)
 8092aaa:	681b      	ldr	r3, [r3, #0]
 8092aac:	4a10      	ldr	r2, [pc, #64]	; (8092af0 <SDMMC_GetCmdError+0x50>)
 8092aae:	fba2 2303 	umull	r2, r3, r2, r3
 8092ab2:	0a5b      	lsrs	r3, r3, #9
 8092ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8092ab8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092abc:	4623      	mov	r3, r4
 8092abe:	1e5c      	subs	r4, r3, #1
 8092ac0:	2b00      	cmp	r3, #0
 8092ac2:	d102      	bne.n	8092aca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092ac8:	e00a      	b.n	8092ae0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8092aca:	687b      	ldr	r3, [r7, #4]
 8092acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8092ad2:	2b00      	cmp	r3, #0
 8092ad4:	d0f2      	beq.n	8092abc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8092ad6:	687b      	ldr	r3, [r7, #4]
 8092ad8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8092adc:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8092ade:	2300      	movs	r3, #0
}
 8092ae0:	4618      	mov	r0, r3
 8092ae2:	3708      	adds	r7, #8
 8092ae4:	46bd      	mov	sp, r7
 8092ae6:	bc90      	pop	{r4, r7}
 8092ae8:	4770      	bx	lr
 8092aea:	bf00      	nop
 8092aec:	2000b374 	.word	0x2000b374
 8092af0:	10624dd3 	.word	0x10624dd3

08092af4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8092af4:	b590      	push	{r4, r7, lr}
 8092af6:	b087      	sub	sp, #28
 8092af8:	af00      	add	r7, sp, #0
 8092afa:	60f8      	str	r0, [r7, #12]
 8092afc:	460b      	mov	r3, r1
 8092afe:	607a      	str	r2, [r7, #4]
 8092b00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8092b02:	4b6c      	ldr	r3, [pc, #432]	; (8092cb4 <SDMMC_GetCmdResp1+0x1c0>)
 8092b04:	681b      	ldr	r3, [r3, #0]
 8092b06:	4a6c      	ldr	r2, [pc, #432]	; (8092cb8 <SDMMC_GetCmdResp1+0x1c4>)
 8092b08:	fba2 2303 	umull	r2, r3, r2, r3
 8092b0c:	0a5b      	lsrs	r3, r3, #9
 8092b0e:	687a      	ldr	r2, [r7, #4]
 8092b10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092b14:	4623      	mov	r3, r4
 8092b16:	1e5c      	subs	r4, r3, #1
 8092b18:	2b00      	cmp	r3, #0
 8092b1a:	d102      	bne.n	8092b22 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092b20:	e0c3      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8092b22:	68fb      	ldr	r3, [r7, #12]
 8092b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092b26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8092b2a:	2b00      	cmp	r3, #0
 8092b2c:	d0f2      	beq.n	8092b14 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8092b2e:	68fb      	ldr	r3, [r7, #12]
 8092b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092b32:	f003 0304 	and.w	r3, r3, #4
 8092b36:	2b00      	cmp	r3, #0
 8092b38:	d004      	beq.n	8092b44 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8092b3a:	68fb      	ldr	r3, [r7, #12]
 8092b3c:	2204      	movs	r2, #4
 8092b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8092b40:	2304      	movs	r3, #4
 8092b42:	e0b2      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8092b44:	68fb      	ldr	r3, [r7, #12]
 8092b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092b48:	f003 0301 	and.w	r3, r3, #1
 8092b4c:	2b00      	cmp	r3, #0
 8092b4e:	d004      	beq.n	8092b5a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8092b50:	68fb      	ldr	r3, [r7, #12]
 8092b52:	2201      	movs	r2, #1
 8092b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8092b56:	2301      	movs	r3, #1
 8092b58:	e0a7      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8092b5a:	68f8      	ldr	r0, [r7, #12]
 8092b5c:	f7ff fcb2 	bl	80924c4 <SDMMC_GetCommandResponse>
 8092b60:	4603      	mov	r3, r0
 8092b62:	461a      	mov	r2, r3
 8092b64:	7afb      	ldrb	r3, [r7, #11]
 8092b66:	4293      	cmp	r3, r2
 8092b68:	d001      	beq.n	8092b6e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8092b6a:	2301      	movs	r3, #1
 8092b6c:	e09d      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8092b6e:	68fb      	ldr	r3, [r7, #12]
 8092b70:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8092b74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8092b76:	2100      	movs	r1, #0
 8092b78:	68f8      	ldr	r0, [r7, #12]
 8092b7a:	f7ff fcb0 	bl	80924de <SDMMC_GetResponse>
 8092b7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8092b80:	697a      	ldr	r2, [r7, #20]
 8092b82:	4b4e      	ldr	r3, [pc, #312]	; (8092cbc <SDMMC_GetCmdResp1+0x1c8>)
 8092b84:	4013      	ands	r3, r2
 8092b86:	2b00      	cmp	r3, #0
 8092b88:	d101      	bne.n	8092b8e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8092b8a:	2300      	movs	r3, #0
 8092b8c:	e08d      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8092b8e:	697b      	ldr	r3, [r7, #20]
 8092b90:	2b00      	cmp	r3, #0
 8092b92:	da02      	bge.n	8092b9a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8092b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8092b98:	e087      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8092b9a:	697b      	ldr	r3, [r7, #20]
 8092b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8092ba0:	2b00      	cmp	r3, #0
 8092ba2:	d001      	beq.n	8092ba8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8092ba4:	2340      	movs	r3, #64	; 0x40
 8092ba6:	e080      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8092ba8:	697b      	ldr	r3, [r7, #20]
 8092baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8092bae:	2b00      	cmp	r3, #0
 8092bb0:	d001      	beq.n	8092bb6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8092bb2:	2380      	movs	r3, #128	; 0x80
 8092bb4:	e079      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8092bb6:	697b      	ldr	r3, [r7, #20]
 8092bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8092bbc:	2b00      	cmp	r3, #0
 8092bbe:	d002      	beq.n	8092bc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8092bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8092bc4:	e071      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8092bc6:	697b      	ldr	r3, [r7, #20]
 8092bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8092bcc:	2b00      	cmp	r3, #0
 8092bce:	d002      	beq.n	8092bd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8092bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8092bd4:	e069      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8092bd6:	697b      	ldr	r3, [r7, #20]
 8092bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8092bdc:	2b00      	cmp	r3, #0
 8092bde:	d002      	beq.n	8092be6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8092be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8092be4:	e061      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8092be6:	697b      	ldr	r3, [r7, #20]
 8092be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8092bec:	2b00      	cmp	r3, #0
 8092bee:	d002      	beq.n	8092bf6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8092bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8092bf4:	e059      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8092bf6:	697b      	ldr	r3, [r7, #20]
 8092bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8092bfc:	2b00      	cmp	r3, #0
 8092bfe:	d002      	beq.n	8092c06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8092c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8092c04:	e051      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8092c06:	697b      	ldr	r3, [r7, #20]
 8092c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8092c0c:	2b00      	cmp	r3, #0
 8092c0e:	d002      	beq.n	8092c16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8092c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8092c14:	e049      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8092c16:	697b      	ldr	r3, [r7, #20]
 8092c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8092c1c:	2b00      	cmp	r3, #0
 8092c1e:	d002      	beq.n	8092c26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8092c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8092c24:	e041      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8092c26:	697b      	ldr	r3, [r7, #20]
 8092c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8092c2c:	2b00      	cmp	r3, #0
 8092c2e:	d002      	beq.n	8092c36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8092c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8092c34:	e039      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8092c36:	697b      	ldr	r3, [r7, #20]
 8092c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8092c3c:	2b00      	cmp	r3, #0
 8092c3e:	d002      	beq.n	8092c46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8092c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8092c44:	e031      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8092c46:	697b      	ldr	r3, [r7, #20]
 8092c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8092c4c:	2b00      	cmp	r3, #0
 8092c4e:	d002      	beq.n	8092c56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8092c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8092c54:	e029      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8092c56:	697b      	ldr	r3, [r7, #20]
 8092c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8092c5c:	2b00      	cmp	r3, #0
 8092c5e:	d002      	beq.n	8092c66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8092c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8092c64:	e021      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8092c66:	697b      	ldr	r3, [r7, #20]
 8092c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8092c6c:	2b00      	cmp	r3, #0
 8092c6e:	d002      	beq.n	8092c76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8092c70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8092c74:	e019      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8092c76:	697b      	ldr	r3, [r7, #20]
 8092c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8092c7c:	2b00      	cmp	r3, #0
 8092c7e:	d002      	beq.n	8092c86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8092c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8092c84:	e011      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8092c86:	697b      	ldr	r3, [r7, #20]
 8092c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8092c8c:	2b00      	cmp	r3, #0
 8092c8e:	d002      	beq.n	8092c96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8092c90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8092c94:	e009      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8092c96:	697b      	ldr	r3, [r7, #20]
 8092c98:	f003 0308 	and.w	r3, r3, #8
 8092c9c:	2b00      	cmp	r3, #0
 8092c9e:	d002      	beq.n	8092ca6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8092ca0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8092ca4:	e001      	b.n	8092caa <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8092ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8092caa:	4618      	mov	r0, r3
 8092cac:	371c      	adds	r7, #28
 8092cae:	46bd      	mov	sp, r7
 8092cb0:	bd90      	pop	{r4, r7, pc}
 8092cb2:	bf00      	nop
 8092cb4:	2000b374 	.word	0x2000b374
 8092cb8:	10624dd3 	.word	0x10624dd3
 8092cbc:	fdffe008 	.word	0xfdffe008

08092cc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8092cc0:	b490      	push	{r4, r7}
 8092cc2:	b082      	sub	sp, #8
 8092cc4:	af00      	add	r7, sp, #0
 8092cc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8092cc8:	4b1b      	ldr	r3, [pc, #108]	; (8092d38 <SDMMC_GetCmdResp2+0x78>)
 8092cca:	681b      	ldr	r3, [r3, #0]
 8092ccc:	4a1b      	ldr	r2, [pc, #108]	; (8092d3c <SDMMC_GetCmdResp2+0x7c>)
 8092cce:	fba2 2303 	umull	r2, r3, r2, r3
 8092cd2:	0a5b      	lsrs	r3, r3, #9
 8092cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8092cd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092cdc:	4623      	mov	r3, r4
 8092cde:	1e5c      	subs	r4, r3, #1
 8092ce0:	2b00      	cmp	r3, #0
 8092ce2:	d102      	bne.n	8092cea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092ce8:	e020      	b.n	8092d2c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8092cea:	687b      	ldr	r3, [r7, #4]
 8092cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092cee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8092cf2:	2b00      	cmp	r3, #0
 8092cf4:	d0f2      	beq.n	8092cdc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8092cf6:	687b      	ldr	r3, [r7, #4]
 8092cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092cfa:	f003 0304 	and.w	r3, r3, #4
 8092cfe:	2b00      	cmp	r3, #0
 8092d00:	d004      	beq.n	8092d0c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8092d02:	687b      	ldr	r3, [r7, #4]
 8092d04:	2204      	movs	r2, #4
 8092d06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8092d08:	2304      	movs	r3, #4
 8092d0a:	e00f      	b.n	8092d2c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8092d0c:	687b      	ldr	r3, [r7, #4]
 8092d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092d10:	f003 0301 	and.w	r3, r3, #1
 8092d14:	2b00      	cmp	r3, #0
 8092d16:	d004      	beq.n	8092d22 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8092d18:	687b      	ldr	r3, [r7, #4]
 8092d1a:	2201      	movs	r2, #1
 8092d1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8092d1e:	2301      	movs	r3, #1
 8092d20:	e004      	b.n	8092d2c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8092d22:	687b      	ldr	r3, [r7, #4]
 8092d24:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8092d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8092d2a:	2300      	movs	r3, #0
}
 8092d2c:	4618      	mov	r0, r3
 8092d2e:	3708      	adds	r7, #8
 8092d30:	46bd      	mov	sp, r7
 8092d32:	bc90      	pop	{r4, r7}
 8092d34:	4770      	bx	lr
 8092d36:	bf00      	nop
 8092d38:	2000b374 	.word	0x2000b374
 8092d3c:	10624dd3 	.word	0x10624dd3

08092d40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8092d40:	b490      	push	{r4, r7}
 8092d42:	b082      	sub	sp, #8
 8092d44:	af00      	add	r7, sp, #0
 8092d46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8092d48:	4b15      	ldr	r3, [pc, #84]	; (8092da0 <SDMMC_GetCmdResp3+0x60>)
 8092d4a:	681b      	ldr	r3, [r3, #0]
 8092d4c:	4a15      	ldr	r2, [pc, #84]	; (8092da4 <SDMMC_GetCmdResp3+0x64>)
 8092d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8092d52:	0a5b      	lsrs	r3, r3, #9
 8092d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8092d58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092d5c:	4623      	mov	r3, r4
 8092d5e:	1e5c      	subs	r4, r3, #1
 8092d60:	2b00      	cmp	r3, #0
 8092d62:	d102      	bne.n	8092d6a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092d64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092d68:	e015      	b.n	8092d96 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8092d6a:	687b      	ldr	r3, [r7, #4]
 8092d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092d6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8092d72:	2b00      	cmp	r3, #0
 8092d74:	d0f2      	beq.n	8092d5c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8092d76:	687b      	ldr	r3, [r7, #4]
 8092d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092d7a:	f003 0304 	and.w	r3, r3, #4
 8092d7e:	2b00      	cmp	r3, #0
 8092d80:	d004      	beq.n	8092d8c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8092d82:	687b      	ldr	r3, [r7, #4]
 8092d84:	2204      	movs	r2, #4
 8092d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8092d88:	2304      	movs	r3, #4
 8092d8a:	e004      	b.n	8092d96 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8092d8c:	687b      	ldr	r3, [r7, #4]
 8092d8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8092d92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8092d94:	2300      	movs	r3, #0
}
 8092d96:	4618      	mov	r0, r3
 8092d98:	3708      	adds	r7, #8
 8092d9a:	46bd      	mov	sp, r7
 8092d9c:	bc90      	pop	{r4, r7}
 8092d9e:	4770      	bx	lr
 8092da0:	2000b374 	.word	0x2000b374
 8092da4:	10624dd3 	.word	0x10624dd3

08092da8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8092da8:	b590      	push	{r4, r7, lr}
 8092daa:	b087      	sub	sp, #28
 8092dac:	af00      	add	r7, sp, #0
 8092dae:	60f8      	str	r0, [r7, #12]
 8092db0:	460b      	mov	r3, r1
 8092db2:	607a      	str	r2, [r7, #4]
 8092db4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8092db6:	4b31      	ldr	r3, [pc, #196]	; (8092e7c <SDMMC_GetCmdResp6+0xd4>)
 8092db8:	681b      	ldr	r3, [r3, #0]
 8092dba:	4a31      	ldr	r2, [pc, #196]	; (8092e80 <SDMMC_GetCmdResp6+0xd8>)
 8092dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8092dc0:	0a5b      	lsrs	r3, r3, #9
 8092dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8092dc6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092dca:	4623      	mov	r3, r4
 8092dcc:	1e5c      	subs	r4, r3, #1
 8092dce:	2b00      	cmp	r3, #0
 8092dd0:	d102      	bne.n	8092dd8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092dd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092dd6:	e04c      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8092dd8:	68fb      	ldr	r3, [r7, #12]
 8092dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092ddc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8092de0:	2b00      	cmp	r3, #0
 8092de2:	d0f2      	beq.n	8092dca <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8092de4:	68fb      	ldr	r3, [r7, #12]
 8092de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092de8:	f003 0304 	and.w	r3, r3, #4
 8092dec:	2b00      	cmp	r3, #0
 8092dee:	d004      	beq.n	8092dfa <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8092df0:	68fb      	ldr	r3, [r7, #12]
 8092df2:	2204      	movs	r2, #4
 8092df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8092df6:	2304      	movs	r3, #4
 8092df8:	e03b      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8092dfa:	68fb      	ldr	r3, [r7, #12]
 8092dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092dfe:	f003 0301 	and.w	r3, r3, #1
 8092e02:	2b00      	cmp	r3, #0
 8092e04:	d004      	beq.n	8092e10 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8092e06:	68fb      	ldr	r3, [r7, #12]
 8092e08:	2201      	movs	r2, #1
 8092e0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8092e0c:	2301      	movs	r3, #1
 8092e0e:	e030      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8092e10:	68f8      	ldr	r0, [r7, #12]
 8092e12:	f7ff fb57 	bl	80924c4 <SDMMC_GetCommandResponse>
 8092e16:	4603      	mov	r3, r0
 8092e18:	461a      	mov	r2, r3
 8092e1a:	7afb      	ldrb	r3, [r7, #11]
 8092e1c:	4293      	cmp	r3, r2
 8092e1e:	d001      	beq.n	8092e24 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8092e20:	2301      	movs	r3, #1
 8092e22:	e026      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8092e24:	68fb      	ldr	r3, [r7, #12]
 8092e26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8092e2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8092e2c:	2100      	movs	r1, #0
 8092e2e:	68f8      	ldr	r0, [r7, #12]
 8092e30:	f7ff fb55 	bl	80924de <SDMMC_GetResponse>
 8092e34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8092e36:	697b      	ldr	r3, [r7, #20]
 8092e38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8092e3c:	2b00      	cmp	r3, #0
 8092e3e:	d106      	bne.n	8092e4e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8092e40:	697b      	ldr	r3, [r7, #20]
 8092e42:	0c1b      	lsrs	r3, r3, #16
 8092e44:	b29a      	uxth	r2, r3
 8092e46:	687b      	ldr	r3, [r7, #4]
 8092e48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8092e4a:	2300      	movs	r3, #0
 8092e4c:	e011      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8092e4e:	697b      	ldr	r3, [r7, #20]
 8092e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8092e54:	2b00      	cmp	r3, #0
 8092e56:	d002      	beq.n	8092e5e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8092e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8092e5c:	e009      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8092e5e:	697b      	ldr	r3, [r7, #20]
 8092e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8092e64:	2b00      	cmp	r3, #0
 8092e66:	d002      	beq.n	8092e6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8092e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8092e6c:	e001      	b.n	8092e72 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8092e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8092e72:	4618      	mov	r0, r3
 8092e74:	371c      	adds	r7, #28
 8092e76:	46bd      	mov	sp, r7
 8092e78:	bd90      	pop	{r4, r7, pc}
 8092e7a:	bf00      	nop
 8092e7c:	2000b374 	.word	0x2000b374
 8092e80:	10624dd3 	.word	0x10624dd3

08092e84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8092e84:	b490      	push	{r4, r7}
 8092e86:	b082      	sub	sp, #8
 8092e88:	af00      	add	r7, sp, #0
 8092e8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8092e8c:	4b18      	ldr	r3, [pc, #96]	; (8092ef0 <SDMMC_GetCmdResp7+0x6c>)
 8092e8e:	681b      	ldr	r3, [r3, #0]
 8092e90:	4a18      	ldr	r2, [pc, #96]	; (8092ef4 <SDMMC_GetCmdResp7+0x70>)
 8092e92:	fba2 2303 	umull	r2, r3, r2, r3
 8092e96:	0a5b      	lsrs	r3, r3, #9
 8092e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8092e9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8092ea0:	4623      	mov	r3, r4
 8092ea2:	1e5c      	subs	r4, r3, #1
 8092ea4:	2b00      	cmp	r3, #0
 8092ea6:	d102      	bne.n	8092eae <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8092ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8092eac:	e01a      	b.n	8092ee4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8092eae:	687b      	ldr	r3, [r7, #4]
 8092eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092eb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8092eb6:	2b00      	cmp	r3, #0
 8092eb8:	d0f2      	beq.n	8092ea0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8092eba:	687b      	ldr	r3, [r7, #4]
 8092ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092ebe:	f003 0304 	and.w	r3, r3, #4
 8092ec2:	2b00      	cmp	r3, #0
 8092ec4:	d004      	beq.n	8092ed0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8092ec6:	687b      	ldr	r3, [r7, #4]
 8092ec8:	2240      	movs	r2, #64	; 0x40
 8092eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8092ecc:	2304      	movs	r3, #4
 8092ece:	e009      	b.n	8092ee4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8092ed0:	687b      	ldr	r3, [r7, #4]
 8092ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8092ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8092ed8:	2b00      	cmp	r3, #0
 8092eda:	d002      	beq.n	8092ee2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8092edc:	687b      	ldr	r3, [r7, #4]
 8092ede:	2240      	movs	r2, #64	; 0x40
 8092ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8092ee2:	2300      	movs	r3, #0
  
}
 8092ee4:	4618      	mov	r0, r3
 8092ee6:	3708      	adds	r7, #8
 8092ee8:	46bd      	mov	sp, r7
 8092eea:	bc90      	pop	{r4, r7}
 8092eec:	4770      	bx	lr
 8092eee:	bf00      	nop
 8092ef0:	2000b374 	.word	0x2000b374
 8092ef4:	10624dd3 	.word	0x10624dd3

08092ef8 <LEGACY_GUI_ProgressBar>:
#include "stm32746g_discovery.h"
#include "gui.h"
#include "../wrapper.h"

void LEGACY_GUI_ProgressBar(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t val, uint8_t maxval)
{
 8092ef8:	b590      	push	{r4, r7, lr}
 8092efa:	b085      	sub	sp, #20
 8092efc:	af00      	add	r7, sp, #0
 8092efe:	4604      	mov	r4, r0
 8092f00:	4608      	mov	r0, r1
 8092f02:	4611      	mov	r1, r2
 8092f04:	461a      	mov	r2, r3
 8092f06:	4623      	mov	r3, r4
 8092f08:	80fb      	strh	r3, [r7, #6]
 8092f0a:	4603      	mov	r3, r0
 8092f0c:	80bb      	strh	r3, [r7, #4]
 8092f0e:	460b      	mov	r3, r1
 8092f10:	807b      	strh	r3, [r7, #2]
 8092f12:	4613      	mov	r3, r2
 8092f14:	803b      	strh	r3, [r7, #0]
	uint16_t length;

	/* dessin du cadre */
	GLCD_SetTextColor(Black);
 8092f16:	2000      	movs	r0, #0
 8092f18:	f000 ff5c 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawLine(x,y,x+w,y);
 8092f1c:	88f8      	ldrh	r0, [r7, #6]
 8092f1e:	88b9      	ldrh	r1, [r7, #4]
 8092f20:	88fa      	ldrh	r2, [r7, #6]
 8092f22:	887b      	ldrh	r3, [r7, #2]
 8092f24:	4413      	add	r3, r2
 8092f26:	461a      	mov	r2, r3
 8092f28:	88bb      	ldrh	r3, [r7, #4]
 8092f2a:	f001 f833 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x,y,x,y+h);
 8092f2e:	88f8      	ldrh	r0, [r7, #6]
 8092f30:	88b9      	ldrh	r1, [r7, #4]
 8092f32:	88fc      	ldrh	r4, [r7, #6]
 8092f34:	88ba      	ldrh	r2, [r7, #4]
 8092f36:	883b      	ldrh	r3, [r7, #0]
 8092f38:	4413      	add	r3, r2
 8092f3a:	4622      	mov	r2, r4
 8092f3c:	f001 f82a 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x+w,y,x+w,y+h);
 8092f40:	88fa      	ldrh	r2, [r7, #6]
 8092f42:	887b      	ldrh	r3, [r7, #2]
 8092f44:	4413      	add	r3, r2
 8092f46:	4618      	mov	r0, r3
 8092f48:	88b9      	ldrh	r1, [r7, #4]
 8092f4a:	88fa      	ldrh	r2, [r7, #6]
 8092f4c:	887b      	ldrh	r3, [r7, #2]
 8092f4e:	4413      	add	r3, r2
 8092f50:	461c      	mov	r4, r3
 8092f52:	88ba      	ldrh	r2, [r7, #4]
 8092f54:	883b      	ldrh	r3, [r7, #0]
 8092f56:	4413      	add	r3, r2
 8092f58:	4622      	mov	r2, r4
 8092f5a:	f001 f81b 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x,y+h,x+w,y+h);
 8092f5e:	88f8      	ldrh	r0, [r7, #6]
 8092f60:	88ba      	ldrh	r2, [r7, #4]
 8092f62:	883b      	ldrh	r3, [r7, #0]
 8092f64:	4413      	add	r3, r2
 8092f66:	4619      	mov	r1, r3
 8092f68:	88fa      	ldrh	r2, [r7, #6]
 8092f6a:	887b      	ldrh	r3, [r7, #2]
 8092f6c:	4413      	add	r3, r2
 8092f6e:	461c      	mov	r4, r3
 8092f70:	88ba      	ldrh	r2, [r7, #4]
 8092f72:	883b      	ldrh	r3, [r7, #0]
 8092f74:	4413      	add	r3, r2
 8092f76:	4622      	mov	r2, r4
 8092f78:	f001 f80c 	bl	8093f94 <GLCD_DrawLine>

	if (val>maxval) val = maxval;
 8092f7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8092f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8092f84:	429a      	cmp	r2, r3
 8092f86:	d903      	bls.n	8092f90 <LEGACY_GUI_ProgressBar+0x98>
 8092f88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8092f8c:	f887 3020 	strb.w	r3, [r7, #32]

	/* Dessin du remplissage */
	length = (uint16_t)(val * (w-4)) /maxval;
 8092f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8092f94:	b29a      	uxth	r2, r3
 8092f96:	887b      	ldrh	r3, [r7, #2]
 8092f98:	3b04      	subs	r3, #4
 8092f9a:	b29b      	uxth	r3, r3
 8092f9c:	fb12 f303 	smulbb	r3, r2, r3
 8092fa0:	b29b      	uxth	r3, r3
 8092fa2:	461a      	mov	r2, r3
 8092fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8092fa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8092fac:	81fb      	strh	r3, [r7, #14]

	GLCD_SetTextColor(Blue);
 8092fae:	2003      	movs	r0, #3
 8092fb0:	f000 ff10 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawFillRectangle(x+2, y+2, (x+2)+length , (y+2)+h-4);
 8092fb4:	88fb      	ldrh	r3, [r7, #6]
 8092fb6:	3302      	adds	r3, #2
 8092fb8:	4618      	mov	r0, r3
 8092fba:	88bb      	ldrh	r3, [r7, #4]
 8092fbc:	3302      	adds	r3, #2
 8092fbe:	4619      	mov	r1, r3
 8092fc0:	88fb      	ldrh	r3, [r7, #6]
 8092fc2:	1c9a      	adds	r2, r3, #2
 8092fc4:	89fb      	ldrh	r3, [r7, #14]
 8092fc6:	4413      	add	r3, r2
 8092fc8:	461c      	mov	r4, r3
 8092fca:	88bb      	ldrh	r3, [r7, #4]
 8092fcc:	1c9a      	adds	r2, r3, #2
 8092fce:	883b      	ldrh	r3, [r7, #0]
 8092fd0:	4413      	add	r3, r2
 8092fd2:	3b04      	subs	r3, #4
 8092fd4:	4622      	mov	r2, r4
 8092fd6:	f001 f820 	bl	809401a <GLCD_DrawFillRectangle>

	GLCD_SetTextColor(White);
 8092fda:	20ff      	movs	r0, #255	; 0xff
 8092fdc:	f000 fefa 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawFillRectangle(x+2+length, y+2, (x+2+length)+(w-4)-(length+1), (y+2)+ h-4);
 8092fe0:	88fb      	ldrh	r3, [r7, #6]
 8092fe2:	1c9a      	adds	r2, r3, #2
 8092fe4:	89fb      	ldrh	r3, [r7, #14]
 8092fe6:	4413      	add	r3, r2
 8092fe8:	4618      	mov	r0, r3
 8092fea:	88bb      	ldrh	r3, [r7, #4]
 8092fec:	3302      	adds	r3, #2
 8092fee:	4619      	mov	r1, r3
 8092ff0:	88fb      	ldrh	r3, [r7, #6]
 8092ff2:	1c9a      	adds	r2, r3, #2
 8092ff4:	89fb      	ldrh	r3, [r7, #14]
 8092ff6:	441a      	add	r2, r3
 8092ff8:	887b      	ldrh	r3, [r7, #2]
 8092ffa:	3b04      	subs	r3, #4
 8092ffc:	441a      	add	r2, r3
 8092ffe:	89fb      	ldrh	r3, [r7, #14]
 8093000:	3301      	adds	r3, #1
 8093002:	1ad3      	subs	r3, r2, r3
 8093004:	461c      	mov	r4, r3
 8093006:	88bb      	ldrh	r3, [r7, #4]
 8093008:	1c9a      	adds	r2, r3, #2
 809300a:	883b      	ldrh	r3, [r7, #0]
 809300c:	4413      	add	r3, r2
 809300e:	3b04      	subs	r3, #4
 8093010:	4622      	mov	r2, r4
 8093012:	f001 f802 	bl	809401a <GLCD_DrawFillRectangle>
}
 8093016:	bf00      	nop
 8093018:	3714      	adds	r7, #20
 809301a:	46bd      	mov	sp, r7
 809301c:	bd90      	pop	{r4, r7, pc}

0809301e <LEGACY_GUI_CenterBar>:

void LEGACY_GUI_CenterBar(uint16_t x, uint16_t y, uint16_t w, uint16_t h, int val, uint32_t absolutemaxval)
{
 809301e:	b590      	push	{r4, r7, lr}
 8093020:	b087      	sub	sp, #28
 8093022:	af00      	add	r7, sp, #0
 8093024:	4604      	mov	r4, r0
 8093026:	4608      	mov	r0, r1
 8093028:	4611      	mov	r1, r2
 809302a:	461a      	mov	r2, r3
 809302c:	4623      	mov	r3, r4
 809302e:	80fb      	strh	r3, [r7, #6]
 8093030:	4603      	mov	r3, r0
 8093032:	80bb      	strh	r3, [r7, #4]
 8093034:	460b      	mov	r3, r1
 8093036:	807b      	strh	r3, [r7, #2]
 8093038:	4613      	mov	r3, r2
 809303a:	803b      	strh	r3, [r7, #0]
	int length2;
	int length_tot;
	uint16_t length;

	/* dessin du cadre */
	GLCD_SetTextColor(Black);
 809303c:	2000      	movs	r0, #0
 809303e:	f000 fec9 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawLine(x,y,x+w,y);
 8093042:	88f8      	ldrh	r0, [r7, #6]
 8093044:	88b9      	ldrh	r1, [r7, #4]
 8093046:	88fa      	ldrh	r2, [r7, #6]
 8093048:	887b      	ldrh	r3, [r7, #2]
 809304a:	4413      	add	r3, r2
 809304c:	461a      	mov	r2, r3
 809304e:	88bb      	ldrh	r3, [r7, #4]
 8093050:	f000 ffa0 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x,y,x,y+h);
 8093054:	88f8      	ldrh	r0, [r7, #6]
 8093056:	88b9      	ldrh	r1, [r7, #4]
 8093058:	88fc      	ldrh	r4, [r7, #6]
 809305a:	88ba      	ldrh	r2, [r7, #4]
 809305c:	883b      	ldrh	r3, [r7, #0]
 809305e:	4413      	add	r3, r2
 8093060:	4622      	mov	r2, r4
 8093062:	f000 ff97 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x+w,y,x+w,y+h);
 8093066:	88fa      	ldrh	r2, [r7, #6]
 8093068:	887b      	ldrh	r3, [r7, #2]
 809306a:	4413      	add	r3, r2
 809306c:	4618      	mov	r0, r3
 809306e:	88b9      	ldrh	r1, [r7, #4]
 8093070:	88fa      	ldrh	r2, [r7, #6]
 8093072:	887b      	ldrh	r3, [r7, #2]
 8093074:	4413      	add	r3, r2
 8093076:	461c      	mov	r4, r3
 8093078:	88ba      	ldrh	r2, [r7, #4]
 809307a:	883b      	ldrh	r3, [r7, #0]
 809307c:	4413      	add	r3, r2
 809307e:	4622      	mov	r2, r4
 8093080:	f000 ff88 	bl	8093f94 <GLCD_DrawLine>
	GLCD_DrawLine(x,y+h,x+w,y+h);
 8093084:	88f8      	ldrh	r0, [r7, #6]
 8093086:	88ba      	ldrh	r2, [r7, #4]
 8093088:	883b      	ldrh	r3, [r7, #0]
 809308a:	4413      	add	r3, r2
 809308c:	4619      	mov	r1, r3
 809308e:	88fa      	ldrh	r2, [r7, #6]
 8093090:	887b      	ldrh	r3, [r7, #2]
 8093092:	4413      	add	r3, r2
 8093094:	461c      	mov	r4, r3
 8093096:	88ba      	ldrh	r2, [r7, #4]
 8093098:	883b      	ldrh	r3, [r7, #0]
 809309a:	4413      	add	r3, r2
 809309c:	4622      	mov	r2, r4
 809309e:	f000 ff79 	bl	8093f94 <GLCD_DrawLine>

	if ((val>0) && ((uint32_t)val >= absolutemaxval)) 
 80930a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80930a4:	2b00      	cmp	r3, #0
 80930a6:	dd06      	ble.n	80930b6 <LEGACY_GUI_CenterBar+0x98>
 80930a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80930aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80930ac:	429a      	cmp	r2, r3
 80930ae:	d802      	bhi.n	80930b6 <LEGACY_GUI_CenterBar+0x98>
	{
		val = absolutemaxval-1;
 80930b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80930b2:	3b01      	subs	r3, #1
 80930b4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	if ((val<0) && ((uint32_t)(-val) >= absolutemaxval)) 
 80930b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80930b8:	2b00      	cmp	r3, #0
 80930ba:	da09      	bge.n	80930d0 <LEGACY_GUI_CenterBar+0xb2>
 80930bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80930be:	425b      	negs	r3, r3
 80930c0:	461a      	mov	r2, r3
 80930c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80930c4:	4293      	cmp	r3, r2
 80930c6:	d803      	bhi.n	80930d0 <LEGACY_GUI_CenterBar+0xb2>
	{
		val = -(absolutemaxval-1);
 80930c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80930ca:	f1c3 0301 	rsb	r3, r3, #1
 80930ce:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	//	if ((val<0) && (-val >absolutemaxval)) val = -absolutemaxval;

	/* Dessin du remplissage */
	length1 = (int)((w-4)/2);
 80930d0:	887b      	ldrh	r3, [r7, #2]
 80930d2:	3b04      	subs	r3, #4
 80930d4:	2b00      	cmp	r3, #0
 80930d6:	da00      	bge.n	80930da <LEGACY_GUI_CenterBar+0xbc>
 80930d8:	3301      	adds	r3, #1
 80930da:	105b      	asrs	r3, r3, #1
 80930dc:	617b      	str	r3, [r7, #20]
	length2 = (int)(((int)val * (int)(w-4)) /((int)absolutemaxval));
 80930de:	887b      	ldrh	r3, [r7, #2]
 80930e0:	3b04      	subs	r3, #4
 80930e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80930e4:	fb02 f203 	mul.w	r2, r2, r3
 80930e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80930ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80930ee:	613b      	str	r3, [r7, #16]
	length2 = (int)(length2/2);
 80930f0:	693b      	ldr	r3, [r7, #16]
 80930f2:	2b00      	cmp	r3, #0
 80930f4:	da00      	bge.n	80930f8 <LEGACY_GUI_CenterBar+0xda>
 80930f6:	3301      	adds	r3, #1
 80930f8:	105b      	asrs	r3, r3, #1
 80930fa:	613b      	str	r3, [r7, #16]
	length_tot = length1 + length2;
 80930fc:	697a      	ldr	r2, [r7, #20]
 80930fe:	693b      	ldr	r3, [r7, #16]
 8093100:	4413      	add	r3, r2
 8093102:	60fb      	str	r3, [r7, #12]
	length = (uint16_t)length_tot;
 8093104:	68fb      	ldr	r3, [r7, #12]
 8093106:	817b      	strh	r3, [r7, #10]

	GLCD_SetTextColor(Blue);
 8093108:	2003      	movs	r0, #3
 809310a:	f000 fe63 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawFillRectangle(x+2, y+2, (x+2)+ length, (y+2) + h-4);
 809310e:	88fb      	ldrh	r3, [r7, #6]
 8093110:	3302      	adds	r3, #2
 8093112:	4618      	mov	r0, r3
 8093114:	88bb      	ldrh	r3, [r7, #4]
 8093116:	3302      	adds	r3, #2
 8093118:	4619      	mov	r1, r3
 809311a:	88fb      	ldrh	r3, [r7, #6]
 809311c:	1c9a      	adds	r2, r3, #2
 809311e:	897b      	ldrh	r3, [r7, #10]
 8093120:	4413      	add	r3, r2
 8093122:	461c      	mov	r4, r3
 8093124:	88bb      	ldrh	r3, [r7, #4]
 8093126:	1c9a      	adds	r2, r3, #2
 8093128:	883b      	ldrh	r3, [r7, #0]
 809312a:	4413      	add	r3, r2
 809312c:	3b04      	subs	r3, #4
 809312e:	4622      	mov	r2, r4
 8093130:	f000 ff73 	bl	809401a <GLCD_DrawFillRectangle>

	GLCD_SetTextColor(White);
 8093134:	20ff      	movs	r0, #255	; 0xff
 8093136:	f000 fe4d 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_DrawFillRectangle(x+2+length+1, y+2, (x+2+length+1)+(w-4)-(length+1), (y+2)+h-4);
 809313a:	88fb      	ldrh	r3, [r7, #6]
 809313c:	1c9a      	adds	r2, r3, #2
 809313e:	897b      	ldrh	r3, [r7, #10]
 8093140:	4413      	add	r3, r2
 8093142:	3301      	adds	r3, #1
 8093144:	4618      	mov	r0, r3
 8093146:	88bb      	ldrh	r3, [r7, #4]
 8093148:	3302      	adds	r3, #2
 809314a:	4619      	mov	r1, r3
 809314c:	88fb      	ldrh	r3, [r7, #6]
 809314e:	1c9a      	adds	r2, r3, #2
 8093150:	897b      	ldrh	r3, [r7, #10]
 8093152:	4413      	add	r3, r2
 8093154:	1c5a      	adds	r2, r3, #1
 8093156:	887b      	ldrh	r3, [r7, #2]
 8093158:	3b04      	subs	r3, #4
 809315a:	441a      	add	r2, r3
 809315c:	897b      	ldrh	r3, [r7, #10]
 809315e:	3301      	adds	r3, #1
 8093160:	1ad3      	subs	r3, r2, r3
 8093162:	461c      	mov	r4, r3
 8093164:	88bb      	ldrh	r3, [r7, #4]
 8093166:	1c9a      	adds	r2, r3, #2
 8093168:	883b      	ldrh	r3, [r7, #0]
 809316a:	4413      	add	r3, r2
 809316c:	3b04      	subs	r3, #4
 809316e:	4622      	mov	r2, r4
 8093170:	f000 ff53 	bl	809401a <GLCD_DrawFillRectangle>
}
 8093174:	bf00      	nop
 8093176:	371c      	adds	r7, #28
 8093178:	46bd      	mov	sp, r7
 809317a:	bd90      	pop	{r4, r7, pc}

0809317c <LEGACY_GUI_CreateWindow>:
#include "string.h"

const char* blackbkg="                                        ";

void LEGACY_GUI_CreateWindow(const char *title, COLOR background, COLOR titlebarText, COLOR titlebarBgnd)
{
 809317c:	b580      	push	{r7, lr}
 809317e:	b082      	sub	sp, #8
 8093180:	af00      	add	r7, sp, #0
 8093182:	6078      	str	r0, [r7, #4]
 8093184:	4608      	mov	r0, r1
 8093186:	4611      	mov	r1, r2
 8093188:	461a      	mov	r2, r3
 809318a:	4603      	mov	r3, r0
 809318c:	70fb      	strb	r3, [r7, #3]
 809318e:	460b      	mov	r3, r1
 8093190:	70bb      	strb	r3, [r7, #2]
 8093192:	4613      	mov	r3, r2
 8093194:	707b      	strb	r3, [r7, #1]
	GLCD_Clear(background);
 8093196:	78fb      	ldrb	r3, [r7, #3]
 8093198:	4618      	mov	r0, r3
 809319a:	f000 fdfd 	bl	8093d98 <GLCD_Clear>
	GLCD_SetTextColor(titlebarText);
 809319e:	78bb      	ldrb	r3, [r7, #2]
 80931a0:	4618      	mov	r0, r3
 80931a2:	f000 fe17 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_SetBackColor(titlebarBgnd);
 80931a6:	787b      	ldrb	r3, [r7, #1]
 80931a8:	4618      	mov	r0, r3
 80931aa:	f000 fe24 	bl	8093df6 <GLCD_SetBackColor>
	GLCD_DrawString(0,0,blackbkg);
 80931ae:	4b0b      	ldr	r3, [pc, #44]	; (80931dc <LEGACY_GUI_CreateWindow+0x60>)
 80931b0:	681b      	ldr	r3, [r3, #0]
 80931b2:	461a      	mov	r2, r3
 80931b4:	2100      	movs	r1, #0
 80931b6:	2000      	movs	r0, #0
 80931b8:	f000 fe7e 	bl	8093eb8 <GLCD_DrawString>
	GLCD_DrawString((40-strlen(title))/2, 0, title);
 80931bc:	6878      	ldr	r0, [r7, #4]
 80931be:	f7ec ff47 	bl	8080050 <strlen>
 80931c2:	4603      	mov	r3, r0
 80931c4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80931c8:	085b      	lsrs	r3, r3, #1
 80931ca:	687a      	ldr	r2, [r7, #4]
 80931cc:	2100      	movs	r1, #0
 80931ce:	4618      	mov	r0, r3
 80931d0:	f000 fe72 	bl	8093eb8 <GLCD_DrawString>
}
 80931d4:	bf00      	nop
 80931d6:	3708      	adds	r7, #8
 80931d8:	46bd      	mov	sp, r7
 80931da:	bd80      	pop	{r7, pc}
 80931dc:	2000b084 	.word	0x2000b084

080931e0 <ABI_Ptr_Table>:
 80931e0:	080932e9 	.word	0x080932e9
 80931e4:	08093709 	.word	0x08093709
 80931e8:	0809377b 	.word	0x0809377b
 80931ec:	0809330d 	.word	0x0809330d
 80931f0:	0809330d 	.word	0x0809330d
 80931f4:	0809330d 	.word	0x0809330d
 80931f8:	08093d81 	.word	0x08093d81
 80931fc:	08093d99 	.word	0x08093d99
 8093200:	08093dd5 	.word	0x08093dd5
 8093204:	08093df7 	.word	0x08093df7
 8093208:	08093e19 	.word	0x08093e19
 809320c:	08093e55 	.word	0x08093e55
 8093210:	08093f11 	.word	0x08093f11
 8093214:	08093f95 	.word	0x08093f95
 8093218:	08093fcf 	.word	0x08093fcf
 809321c:	0809401b 	.word	0x0809401b
 8093220:	08094067 	.word	0x08094067
 8093224:	08094095 	.word	0x08094095
 8093228:	080940c3 	.word	0x080940c3
 809322c:	08094327 	.word	0x08094327
 8093230:	08094363 	.word	0x08094363
 8093234:	080943cd 	.word	0x080943cd
 8093238:	08094581 	.word	0x08094581
 809323c:	080945fd 	.word	0x080945fd
 8093240:	08094613 	.word	0x08094613
 8093244:	08094645 	.word	0x08094645
 8093248:	08094665 	.word	0x08094665
 809324c:	08094675 	.word	0x08094675
 8093250:	08094701 	.word	0x08094701
 8093254:	0809475d 	.word	0x0809475d
 8093258:	08094781 	.word	0x08094781
 809325c:	080947a5 	.word	0x080947a5
 8093260:	080947e9 	.word	0x080947e9
 8093264:	08094811 	.word	0x08094811
 8093268:	08094841 	.word	0x08094841
 809326c:	0809488d 	.word	0x0809488d
 8093270:	080948fd 	.word	0x080948fd
 8093274:	08094931 	.word	0x08094931
 8093278:	08094955 	.word	0x08094955
 809327c:	08094129 	.word	0x08094129
 8093280:	08094199 	.word	0x08094199
 8093284:	080941af 	.word	0x080941af
 8093288:	080941c9 	.word	0x080941c9
 809328c:	080941dd 	.word	0x080941dd
 8093290:	080941f1 	.word	0x080941f1
 8093294:	08094207 	.word	0x08094207
 8093298:	08094223 	.word	0x08094223
 809329c:	08094239 	.word	0x08094239
 80932a0:	08094253 	.word	0x08094253
 80932a4:	0809426d 	.word	0x0809426d
 80932a8:	08094283 	.word	0x08094283
 80932ac:	0809429b 	.word	0x0809429b
 80932b0:	080942b3 	.word	0x080942b3
 80932b4:	080942c9 	.word	0x080942c9
 80932b8:	080942df 	.word	0x080942df
 80932bc:	08094307 	.word	0x08094307
 80932c0:	08094c49 	.word	0x08094c49
 80932c4:	08094ced 	.word	0x08094ced
 80932c8:	08094d89 	.word	0x08094d89
 80932cc:	08094dad 	.word	0x08094dad
 80932d0:	08094ded 	.word	0x08094ded
 80932d4:	08094e25 	.word	0x08094e25
 80932d8:	08094f1d 	.word	0x08094f1d
 80932dc:	08094a29 	.word	0x08094a29
 80932e0:	08094add 	.word	0x08094add
 80932e4:	08094b05 	.word	0x08094b05

080932e8 <API_GetOSVersion>:
	ABI_VERSION,
	(void *)ABI_Ptr_Table
};

void API_GetOSVersion(int* major, int* minor)
{
 80932e8:	b480      	push	{r7}
 80932ea:	b083      	sub	sp, #12
 80932ec:	af00      	add	r7, sp, #0
 80932ee:	6078      	str	r0, [r7, #4]
 80932f0:	6039      	str	r1, [r7, #0]
	*major = BL_MAJOR_VERSION;
 80932f2:	687b      	ldr	r3, [r7, #4]
 80932f4:	2201      	movs	r2, #1
 80932f6:	601a      	str	r2, [r3, #0]
	*minor = BL_MINOR_VERSION;
 80932f8:	683b      	ldr	r3, [r7, #0]
 80932fa:	2201      	movs	r2, #1
 80932fc:	601a      	str	r2, [r3, #0]
}
 80932fe:	bf00      	nop
 8093300:	370c      	adds	r7, #12
 8093302:	46bd      	mov	sp, r7
 8093304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8093308:	4770      	bx	lr
	...

0809330c <API_InvalidFunction>:

void API_InvalidFunction(void)
{
 809330c:	b580      	push	{r7, lr}
 809330e:	af00      	add	r7, sp, #0
	PANIC_SoftwarePanic("Invalid API Call", "Invalid function requested.");
 8093310:	4902      	ldr	r1, [pc, #8]	; (809331c <API_InvalidFunction+0x10>)
 8093312:	4803      	ldr	r0, [pc, #12]	; (8093320 <API_InvalidFunction+0x14>)
 8093314:	f000 f9ae 	bl	8093674 <PANIC_SoftwarePanic>
}
 8093318:	bf00      	nop
 809331a:	bd80      	pop	{r7, pc}
 809331c:	0809deec 	.word	0x0809deec
 8093320:	0809df08 	.word	0x0809df08

08093324 <CONSOLE_GotoXY>:

int CONSOLE_X=0;
int CONSOLE_Y=0;

void CONSOLE_GotoXY(int x, int y)
{
 8093324:	b480      	push	{r7}
 8093326:	b083      	sub	sp, #12
 8093328:	af00      	add	r7, sp, #0
 809332a:	6078      	str	r0, [r7, #4]
 809332c:	6039      	str	r1, [r7, #0]
	if ((x>=0) && (x<40)) CONSOLE_X=x;
 809332e:	687b      	ldr	r3, [r7, #4]
 8093330:	2b00      	cmp	r3, #0
 8093332:	db05      	blt.n	8093340 <CONSOLE_GotoXY+0x1c>
 8093334:	687b      	ldr	r3, [r7, #4]
 8093336:	2b27      	cmp	r3, #39	; 0x27
 8093338:	dc02      	bgt.n	8093340 <CONSOLE_GotoXY+0x1c>
 809333a:	4a09      	ldr	r2, [pc, #36]	; (8093360 <CONSOLE_GotoXY+0x3c>)
 809333c:	687b      	ldr	r3, [r7, #4]
 809333e:	6013      	str	r3, [r2, #0]
	if ((y>=0) && (y<15)) CONSOLE_Y=y;
 8093340:	683b      	ldr	r3, [r7, #0]
 8093342:	2b00      	cmp	r3, #0
 8093344:	db05      	blt.n	8093352 <CONSOLE_GotoXY+0x2e>
 8093346:	683b      	ldr	r3, [r7, #0]
 8093348:	2b0e      	cmp	r3, #14
 809334a:	dc02      	bgt.n	8093352 <CONSOLE_GotoXY+0x2e>
 809334c:	4a05      	ldr	r2, [pc, #20]	; (8093364 <CONSOLE_GotoXY+0x40>)
 809334e:	683b      	ldr	r3, [r7, #0]
 8093350:	6013      	str	r3, [r2, #0]
}
 8093352:	bf00      	nop
 8093354:	370c      	adds	r7, #12
 8093356:	46bd      	mov	sp, r7
 8093358:	f85d 7b04 	ldr.w	r7, [sp], #4
 809335c:	4770      	bx	lr
 809335e:	bf00      	nop
 8093360:	2000bbf4 	.word	0x2000bbf4
 8093364:	2000bbf8 	.word	0x2000bbf8

08093368 <CONSOLE_PrintChar>:

int CONSOLE_PrintChar(int c)
{
 8093368:	b580      	push	{r7, lr}
 809336a:	b082      	sub	sp, #8
 809336c:	af00      	add	r7, sp, #0
 809336e:	6078      	str	r0, [r7, #4]
	if ((c=='\n') || (c=='\r')) 
 8093370:	687b      	ldr	r3, [r7, #4]
 8093372:	2b0a      	cmp	r3, #10
 8093374:	d002      	beq.n	809337c <CONSOLE_PrintChar+0x14>
 8093376:	687b      	ldr	r3, [r7, #4]
 8093378:	2b0d      	cmp	r3, #13
 809337a:	d111      	bne.n	80933a0 <CONSOLE_PrintChar+0x38>
	{
		CONSOLE_X=0;
 809337c:	4b20      	ldr	r3, [pc, #128]	; (8093400 <CONSOLE_PrintChar+0x98>)
 809337e:	2200      	movs	r2, #0
 8093380:	601a      	str	r2, [r3, #0]
		CONSOLE_Y++;
 8093382:	4b20      	ldr	r3, [pc, #128]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 8093384:	681b      	ldr	r3, [r3, #0]
 8093386:	3301      	adds	r3, #1
 8093388:	4a1e      	ldr	r2, [pc, #120]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 809338a:	6013      	str	r3, [r2, #0]

		if (CONSOLE_Y>=15) CONSOLE_Y--;
 809338c:	4b1d      	ldr	r3, [pc, #116]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 809338e:	681b      	ldr	r3, [r3, #0]
 8093390:	2b0e      	cmp	r3, #14
 8093392:	dd30      	ble.n	80933f6 <CONSOLE_PrintChar+0x8e>
 8093394:	4b1b      	ldr	r3, [pc, #108]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 8093396:	681b      	ldr	r3, [r3, #0]
 8093398:	3b01      	subs	r3, #1
 809339a:	4a1a      	ldr	r2, [pc, #104]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 809339c:	6013      	str	r3, [r2, #0]
 809339e:	e02a      	b.n	80933f6 <CONSOLE_PrintChar+0x8e>
	}
	else
	{
		GLCD_SetTextColor(White);
 80933a0:	20ff      	movs	r0, #255	; 0xff
 80933a2:	f000 fd17 	bl	8093dd4 <GLCD_SetTextColor>
		GLCD_SetBackColor(Black);
 80933a6:	2000      	movs	r0, #0
 80933a8:	f000 fd25 	bl	8093df6 <GLCD_SetBackColor>
		GLCD_DrawChar(CONSOLE_X,CONSOLE_Y, (uint8_t)c);
 80933ac:	4b14      	ldr	r3, [pc, #80]	; (8093400 <CONSOLE_PrintChar+0x98>)
 80933ae:	681b      	ldr	r3, [r3, #0]
 80933b0:	4618      	mov	r0, r3
 80933b2:	4b14      	ldr	r3, [pc, #80]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933b4:	681b      	ldr	r3, [r3, #0]
 80933b6:	4619      	mov	r1, r3
 80933b8:	687b      	ldr	r3, [r7, #4]
 80933ba:	b2db      	uxtb	r3, r3
 80933bc:	461a      	mov	r2, r3
 80933be:	f000 fd49 	bl	8093e54 <GLCD_DrawChar>
		CONSOLE_X++;
 80933c2:	4b0f      	ldr	r3, [pc, #60]	; (8093400 <CONSOLE_PrintChar+0x98>)
 80933c4:	681b      	ldr	r3, [r3, #0]
 80933c6:	3301      	adds	r3, #1
 80933c8:	4a0d      	ldr	r2, [pc, #52]	; (8093400 <CONSOLE_PrintChar+0x98>)
 80933ca:	6013      	str	r3, [r2, #0]

		if (CONSOLE_X>=40) 
 80933cc:	4b0c      	ldr	r3, [pc, #48]	; (8093400 <CONSOLE_PrintChar+0x98>)
 80933ce:	681b      	ldr	r3, [r3, #0]
 80933d0:	2b27      	cmp	r3, #39	; 0x27
 80933d2:	dd10      	ble.n	80933f6 <CONSOLE_PrintChar+0x8e>
		{
			CONSOLE_X=0;
 80933d4:	4b0a      	ldr	r3, [pc, #40]	; (8093400 <CONSOLE_PrintChar+0x98>)
 80933d6:	2200      	movs	r2, #0
 80933d8:	601a      	str	r2, [r3, #0]
			CONSOLE_Y++;
 80933da:	4b0a      	ldr	r3, [pc, #40]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933dc:	681b      	ldr	r3, [r3, #0]
 80933de:	3301      	adds	r3, #1
 80933e0:	4a08      	ldr	r2, [pc, #32]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933e2:	6013      	str	r3, [r2, #0]

			if (CONSOLE_Y>=15) CONSOLE_Y--;
 80933e4:	4b07      	ldr	r3, [pc, #28]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933e6:	681b      	ldr	r3, [r3, #0]
 80933e8:	2b0e      	cmp	r3, #14
 80933ea:	dd04      	ble.n	80933f6 <CONSOLE_PrintChar+0x8e>
 80933ec:	4b05      	ldr	r3, [pc, #20]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933ee:	681b      	ldr	r3, [r3, #0]
 80933f0:	3b01      	subs	r3, #1
 80933f2:	4a04      	ldr	r2, [pc, #16]	; (8093404 <CONSOLE_PrintChar+0x9c>)
 80933f4:	6013      	str	r3, [r2, #0]
		}
	}

	return 1;
 80933f6:	2301      	movs	r3, #1
}
 80933f8:	4618      	mov	r0, r3
 80933fa:	3708      	adds	r7, #8
 80933fc:	46bd      	mov	sp, r7
 80933fe:	bd80      	pop	{r7, pc}
 8093400:	2000bbf4 	.word	0x2000bbf4
 8093404:	2000bbf8 	.word	0x2000bbf8

08093408 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8093408:	b480      	push	{r7}
 809340a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 809340c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8093410:	4b05      	ldr	r3, [pc, #20]	; (8093428 <NVIC_SystemReset+0x20>)
 8093412:	68db      	ldr	r3, [r3, #12]
 8093414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8093418:	4903      	ldr	r1, [pc, #12]	; (8093428 <NVIC_SystemReset+0x20>)
 809341a:	4b04      	ldr	r3, [pc, #16]	; (809342c <NVIC_SystemReset+0x24>)
 809341c:	4313      	orrs	r3, r2
 809341e:	60cb      	str	r3, [r1, #12]
 8093420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8093424:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8093426:	e7fd      	b.n	8093424 <NVIC_SystemReset+0x1c>
 8093428:	e000ed00 	.word	0xe000ed00
 809342c:	05fa0004 	.word	0x05fa0004

08093430 <PANIC_ReadStack>:

void PANIC_EraseUserProgramEntry(void) {

}

void PANIC_ReadStack(uint32_t it_source, uint32_t *sp) {
 8093430:	b580      	push	{r7, lr}
 8093432:	b082      	sub	sp, #8
 8093434:	af00      	add	r7, sp, #0
 8093436:	6078      	str	r0, [r7, #4]
 8093438:	6039      	str	r1, [r7, #0]
	IT_Source = it_source;
 809343a:	4a27      	ldr	r2, [pc, #156]	; (80934d8 <PANIC_ReadStack+0xa8>)
 809343c:	687b      	ldr	r3, [r7, #4]
 809343e:	6013      	str	r3, [r2, #0]

	if ( (sp >= (uint32_t*)0x20000000) && (sp <= (uint32_t*)(0x20001400)))
 8093440:	683b      	ldr	r3, [r7, #0]
 8093442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8093446:	d324      	bcc.n	8093492 <PANIC_ReadStack+0x62>
 8093448:	683b      	ldr	r3, [r7, #0]
 809344a:	4a24      	ldr	r2, [pc, #144]	; (80934dc <PANIC_ReadStack+0xac>)
 809344c:	4293      	cmp	r3, r2
 809344e:	d820      	bhi.n	8093492 <PANIC_ReadStack+0x62>
	{
		R0 = sp[0];
 8093450:	683b      	ldr	r3, [r7, #0]
 8093452:	681b      	ldr	r3, [r3, #0]
 8093454:	4a22      	ldr	r2, [pc, #136]	; (80934e0 <PANIC_ReadStack+0xb0>)
 8093456:	6013      	str	r3, [r2, #0]
		R1 = sp[1];
 8093458:	683b      	ldr	r3, [r7, #0]
 809345a:	685b      	ldr	r3, [r3, #4]
 809345c:	4a21      	ldr	r2, [pc, #132]	; (80934e4 <PANIC_ReadStack+0xb4>)
 809345e:	6013      	str	r3, [r2, #0]
		R2 = sp[2];
 8093460:	683b      	ldr	r3, [r7, #0]
 8093462:	689b      	ldr	r3, [r3, #8]
 8093464:	4a20      	ldr	r2, [pc, #128]	; (80934e8 <PANIC_ReadStack+0xb8>)
 8093466:	6013      	str	r3, [r2, #0]
		R3 = sp[3];
 8093468:	683b      	ldr	r3, [r7, #0]
 809346a:	68db      	ldr	r3, [r3, #12]
 809346c:	4a1f      	ldr	r2, [pc, #124]	; (80934ec <PANIC_ReadStack+0xbc>)
 809346e:	6013      	str	r3, [r2, #0]
		R12 = sp[4];
 8093470:	683b      	ldr	r3, [r7, #0]
 8093472:	691b      	ldr	r3, [r3, #16]
 8093474:	4a1e      	ldr	r2, [pc, #120]	; (80934f0 <PANIC_ReadStack+0xc0>)
 8093476:	6013      	str	r3, [r2, #0]
		LR = sp[5];
 8093478:	683b      	ldr	r3, [r7, #0]
 809347a:	695b      	ldr	r3, [r3, #20]
 809347c:	4a1d      	ldr	r2, [pc, #116]	; (80934f4 <PANIC_ReadStack+0xc4>)
 809347e:	6013      	str	r3, [r2, #0]
		PC = sp[6];
 8093480:	683b      	ldr	r3, [r7, #0]
 8093482:	699b      	ldr	r3, [r3, #24]
 8093484:	4a1c      	ldr	r2, [pc, #112]	; (80934f8 <PANIC_ReadStack+0xc8>)
 8093486:	6013      	str	r3, [r2, #0]
		XPSR = sp[7];
 8093488:	683b      	ldr	r3, [r7, #0]
 809348a:	69db      	ldr	r3, [r3, #28]
 809348c:	4a1b      	ldr	r2, [pc, #108]	; (80934fc <PANIC_ReadStack+0xcc>)
 809348e:	6013      	str	r3, [r2, #0]
 8093490:	e016      	b.n	80934c0 <PANIC_ReadStack+0x90>
	}
	else
	{
		IT_Source = 5;
 8093492:	4b11      	ldr	r3, [pc, #68]	; (80934d8 <PANIC_ReadStack+0xa8>)
 8093494:	2205      	movs	r2, #5
 8093496:	601a      	str	r2, [r3, #0]
		R0=R1=R2=R3=R12=LR=PC=XPSR=0x0;
 8093498:	2300      	movs	r3, #0
 809349a:	4a18      	ldr	r2, [pc, #96]	; (80934fc <PANIC_ReadStack+0xcc>)
 809349c:	6013      	str	r3, [r2, #0]
 809349e:	4a16      	ldr	r2, [pc, #88]	; (80934f8 <PANIC_ReadStack+0xc8>)
 80934a0:	6013      	str	r3, [r2, #0]
 80934a2:	4a14      	ldr	r2, [pc, #80]	; (80934f4 <PANIC_ReadStack+0xc4>)
 80934a4:	6013      	str	r3, [r2, #0]
 80934a6:	4a12      	ldr	r2, [pc, #72]	; (80934f0 <PANIC_ReadStack+0xc0>)
 80934a8:	6013      	str	r3, [r2, #0]
 80934aa:	4a10      	ldr	r2, [pc, #64]	; (80934ec <PANIC_ReadStack+0xbc>)
 80934ac:	6013      	str	r3, [r2, #0]
 80934ae:	4a0e      	ldr	r2, [pc, #56]	; (80934e8 <PANIC_ReadStack+0xb8>)
 80934b0:	6013      	str	r3, [r2, #0]
 80934b2:	4a0c      	ldr	r2, [pc, #48]	; (80934e4 <PANIC_ReadStack+0xb4>)
 80934b4:	6013      	str	r3, [r2, #0]
 80934b6:	4a0a      	ldr	r2, [pc, #40]	; (80934e0 <PANIC_ReadStack+0xb0>)
 80934b8:	6013      	str	r3, [r2, #0]
		SP = (uint32_t)sp;
 80934ba:	683b      	ldr	r3, [r7, #0]
 80934bc:	4a10      	ldr	r2, [pc, #64]	; (8093500 <PANIC_ReadStack+0xd0>)
 80934be:	6013      	str	r3, [r2, #0]
	}

	SetStack((uint32_t)&__system_stack_end__,(uint32_t)&__app_stack_end__);
 80934c0:	4b10      	ldr	r3, [pc, #64]	; (8093504 <PANIC_ReadStack+0xd4>)
 80934c2:	4a11      	ldr	r2, [pc, #68]	; (8093508 <PANIC_ReadStack+0xd8>)
 80934c4:	4611      	mov	r1, r2
 80934c6:	4618      	mov	r0, r3
 80934c8:	f008 fb58 	bl	809bb7c <SetStack>
	PANIC_Display();
 80934cc:	f000 f81e 	bl	809350c <PANIC_Display>
}
 80934d0:	bf00      	nop
 80934d2:	3708      	adds	r7, #8
 80934d4:	46bd      	mov	sp, r7
 80934d6:	bd80      	pop	{r7, pc}
 80934d8:	2000bc20 	.word	0x2000bc20
 80934dc:	20001400 	.word	0x20001400
 80934e0:	2000bbfc 	.word	0x2000bbfc
 80934e4:	2000bc00 	.word	0x2000bc00
 80934e8:	2000bc04 	.word	0x2000bc04
 80934ec:	2000bc08 	.word	0x2000bc08
 80934f0:	2000bc0c 	.word	0x2000bc0c
 80934f4:	2000bc14 	.word	0x2000bc14
 80934f8:	2000bc10 	.word	0x2000bc10
 80934fc:	2000bc18 	.word	0x2000bc18
 8093500:	2000bc1c 	.word	0x2000bc1c
 8093504:	20001400 	.word	0x20001400
 8093508:	20001000 	.word	0x20001000

0809350c <PANIC_Display>:

void PANIC_Display(void) {
 809350c:	b580      	push	{r7, lr}
 809350e:	b08e      	sub	sp, #56	; 0x38
 8093510:	af02      	add	r7, sp, #8
	char *title;
	char str[42];

	title ="";
 8093512:	4b41      	ldr	r3, [pc, #260]	; (8093618 <PANIC_Display+0x10c>)
 8093514:	62fb      	str	r3, [r7, #44]	; 0x2c
	switch (IT_Source)
 8093516:	4b41      	ldr	r3, [pc, #260]	; (809361c <PANIC_Display+0x110>)
 8093518:	681b      	ldr	r3, [r3, #0]
 809351a:	2b05      	cmp	r3, #5
 809351c:	d820      	bhi.n	8093560 <PANIC_Display+0x54>
 809351e:	a201      	add	r2, pc, #4	; (adr r2, 8093524 <PANIC_Display+0x18>)
 8093520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8093524:	0809353d 	.word	0x0809353d
 8093528:	08093543 	.word	0x08093543
 809352c:	08093549 	.word	0x08093549
 8093530:	0809354f 	.word	0x0809354f
 8093534:	08093555 	.word	0x08093555
 8093538:	0809355b 	.word	0x0809355b
	{
	case 0:
		title ="NMI Error";
 809353c:	4b38      	ldr	r3, [pc, #224]	; (8093620 <PANIC_Display+0x114>)
 809353e:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8093540:	e010      	b.n	8093564 <PANIC_Display+0x58>
	case 1:
		title ="Hard Fault";
 8093542:	4b38      	ldr	r3, [pc, #224]	; (8093624 <PANIC_Display+0x118>)
 8093544:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8093546:	e00d      	b.n	8093564 <PANIC_Display+0x58>
	case 2:
		title ="Memory Fault";
 8093548:	4b37      	ldr	r3, [pc, #220]	; (8093628 <PANIC_Display+0x11c>)
 809354a:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 809354c:	e00a      	b.n	8093564 <PANIC_Display+0x58>
	case 3:
		title ="Bus Fault";
 809354e:	4b37      	ldr	r3, [pc, #220]	; (809362c <PANIC_Display+0x120>)
 8093550:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8093552:	e007      	b.n	8093564 <PANIC_Display+0x58>
	case 4:
		title ="Usage Fault";
 8093554:	4b36      	ldr	r3, [pc, #216]	; (8093630 <PANIC_Display+0x124>)
 8093556:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 8093558:	e004      	b.n	8093564 <PANIC_Display+0x58>
	case 5:
		title ="Stack Error";
 809355a:	4b36      	ldr	r3, [pc, #216]	; (8093634 <PANIC_Display+0x128>)
 809355c:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 809355e:	e001      	b.n	8093564 <PANIC_Display+0x58>
	default:
		title ="Unknown Error";
 8093560:	4b35      	ldr	r3, [pc, #212]	; (8093638 <PANIC_Display+0x12c>)
 8093562:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	GUI_CreateWindow(title, Red, White, Black);
 8093564:	2300      	movs	r3, #0
 8093566:	22ff      	movs	r2, #255	; 0xff
 8093568:	21e0      	movs	r1, #224	; 0xe0
 809356a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 809356c:	f000 ff17 	bl	809439e <GUI_CreateWindow>

	/* Affiche la backtrace */
	GLCD_SetTextColor(White);
 8093570:	20ff      	movs	r0, #255	; 0xff
 8093572:	f000 fc2f 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_SetBackColor(Red);
 8093576:	20e0      	movs	r0, #224	; 0xe0
 8093578:	f000 fc3d 	bl	8093df6 <GLCD_SetBackColor>

	GLCD_DrawString(0, 3, "Press A to try again");
 809357c:	4a2f      	ldr	r2, [pc, #188]	; (809363c <PANIC_Display+0x130>)
 809357e:	2103      	movs	r1, #3
 8093580:	2000      	movs	r0, #0
 8093582:	f000 fc99 	bl	8093eb8 <GLCD_DrawString>

	GLCD_DrawString(0, 14, "System halted !");
 8093586:	4a2e      	ldr	r2, [pc, #184]	; (8093640 <PANIC_Display+0x134>)
 8093588:	210e      	movs	r1, #14
 809358a:	2000      	movs	r0, #0
 809358c:	f000 fc94 	bl	8093eb8 <GLCD_DrawString>
	GLCD_DrawString(0, 10, "Backtrace :");
 8093590:	4a2c      	ldr	r2, [pc, #176]	; (8093644 <PANIC_Display+0x138>)
 8093592:	210a      	movs	r1, #10
 8093594:	2000      	movs	r0, #0
 8093596:	f000 fc8f 	bl	8093eb8 <GLCD_DrawString>
	sprintf (str, "R0[%08X] R1[%08X] R2[%08X]", (unsigned int)R0, (unsigned int)R1, (unsigned int)R2);
 809359a:	4b2b      	ldr	r3, [pc, #172]	; (8093648 <PANIC_Display+0x13c>)
 809359c:	681a      	ldr	r2, [r3, #0]
 809359e:	4b2b      	ldr	r3, [pc, #172]	; (809364c <PANIC_Display+0x140>)
 80935a0:	6819      	ldr	r1, [r3, #0]
 80935a2:	4b2b      	ldr	r3, [pc, #172]	; (8093650 <PANIC_Display+0x144>)
 80935a4:	681b      	ldr	r3, [r3, #0]
 80935a6:	4638      	mov	r0, r7
 80935a8:	9300      	str	r3, [sp, #0]
 80935aa:	460b      	mov	r3, r1
 80935ac:	4929      	ldr	r1, [pc, #164]	; (8093654 <PANIC_Display+0x148>)
 80935ae:	f009 f899 	bl	809c6e4 <siprintf>
	GLCD_DrawString(0, 11, str);
 80935b2:	463b      	mov	r3, r7
 80935b4:	461a      	mov	r2, r3
 80935b6:	210b      	movs	r1, #11
 80935b8:	2000      	movs	r0, #0
 80935ba:	f000 fc7d 	bl	8093eb8 <GLCD_DrawString>
	sprintf (str, "R3[%08X] R12[%08X] LR[%08X]", (unsigned int)R3, (unsigned int)R12, (unsigned int)LR);
 80935be:	4b26      	ldr	r3, [pc, #152]	; (8093658 <PANIC_Display+0x14c>)
 80935c0:	681a      	ldr	r2, [r3, #0]
 80935c2:	4b26      	ldr	r3, [pc, #152]	; (809365c <PANIC_Display+0x150>)
 80935c4:	6819      	ldr	r1, [r3, #0]
 80935c6:	4b26      	ldr	r3, [pc, #152]	; (8093660 <PANIC_Display+0x154>)
 80935c8:	681b      	ldr	r3, [r3, #0]
 80935ca:	4638      	mov	r0, r7
 80935cc:	9300      	str	r3, [sp, #0]
 80935ce:	460b      	mov	r3, r1
 80935d0:	4924      	ldr	r1, [pc, #144]	; (8093664 <PANIC_Display+0x158>)
 80935d2:	f009 f887 	bl	809c6e4 <siprintf>
	GLCD_DrawString(0, 12, str);
 80935d6:	463b      	mov	r3, r7
 80935d8:	461a      	mov	r2, r3
 80935da:	210c      	movs	r1, #12
 80935dc:	2000      	movs	r0, #0
 80935de:	f000 fc6b 	bl	8093eb8 <GLCD_DrawString>
	sprintf (str, "PC[%08X] XPSR[%08X]", (unsigned int)PC, (unsigned int)XPSR);
 80935e2:	4b21      	ldr	r3, [pc, #132]	; (8093668 <PANIC_Display+0x15c>)
 80935e4:	681a      	ldr	r2, [r3, #0]
 80935e6:	4b21      	ldr	r3, [pc, #132]	; (809366c <PANIC_Display+0x160>)
 80935e8:	681b      	ldr	r3, [r3, #0]
 80935ea:	4638      	mov	r0, r7
 80935ec:	4920      	ldr	r1, [pc, #128]	; (8093670 <PANIC_Display+0x164>)
 80935ee:	f009 f879 	bl	809c6e4 <siprintf>
	GLCD_DrawString(0, 13, str);
 80935f2:	463b      	mov	r3, r7
 80935f4:	461a      	mov	r2, r3
 80935f6:	210d      	movs	r1, #13
 80935f8:	2000      	movs	r0, #0
 80935fa:	f000 fc5d 	bl	8093eb8 <GLCD_DrawString>

	while (KEYS_GetState(KEY_A) != KEY_PRESSED);
 80935fe:	bf00      	nop
 8093600:	2000      	movs	r0, #0
 8093602:	f000 fee3 	bl	80943cc <KEYS_GetState>
 8093606:	4603      	mov	r3, r0
 8093608:	2b01      	cmp	r3, #1
 809360a:	d1f9      	bne.n	8093600 <PANIC_Display+0xf4>

	/* Redemarrage de la carte */
	NVIC_SystemReset();
 809360c:	f7ff fefc 	bl	8093408 <NVIC_SystemReset>
}
 8093610:	bf00      	nop
 8093612:	3730      	adds	r7, #48	; 0x30
 8093614:	46bd      	mov	sp, r7
 8093616:	bd80      	pop	{r7, pc}
 8093618:	0809df1c 	.word	0x0809df1c
 809361c:	2000bc20 	.word	0x2000bc20
 8093620:	0809df20 	.word	0x0809df20
 8093624:	0809df2c 	.word	0x0809df2c
 8093628:	0809df38 	.word	0x0809df38
 809362c:	0809df48 	.word	0x0809df48
 8093630:	0809df54 	.word	0x0809df54
 8093634:	0809df60 	.word	0x0809df60
 8093638:	0809df6c 	.word	0x0809df6c
 809363c:	0809df7c 	.word	0x0809df7c
 8093640:	0809df94 	.word	0x0809df94
 8093644:	0809dfa4 	.word	0x0809dfa4
 8093648:	2000bbfc 	.word	0x2000bbfc
 809364c:	2000bc00 	.word	0x2000bc00
 8093650:	2000bc04 	.word	0x2000bc04
 8093654:	0809dfb0 	.word	0x0809dfb0
 8093658:	2000bc08 	.word	0x2000bc08
 809365c:	2000bc0c 	.word	0x2000bc0c
 8093660:	2000bc14 	.word	0x2000bc14
 8093664:	0809dfcc 	.word	0x0809dfcc
 8093668:	2000bc10 	.word	0x2000bc10
 809366c:	2000bc18 	.word	0x2000bc18
 8093670:	0809dfe8 	.word	0x0809dfe8

08093674 <PANIC_SoftwarePanic>:

void PANIC_SoftwarePanic(char *Title, char *Message) {
 8093674:	b580      	push	{r7, lr}
 8093676:	b082      	sub	sp, #8
 8093678:	af00      	add	r7, sp, #0
 809367a:	6078      	str	r0, [r7, #4]
 809367c:	6039      	str	r1, [r7, #0]
	GUI_CreateWindow(Title, Yellow, White, Black);
 809367e:	2300      	movs	r3, #0
 8093680:	22ff      	movs	r2, #255	; 0xff
 8093682:	21fc      	movs	r1, #252	; 0xfc
 8093684:	6878      	ldr	r0, [r7, #4]
 8093686:	f000 fe8a 	bl	809439e <GUI_CreateWindow>

	/* Affiche la backtrace */
	GLCD_SetTextColor(White);
 809368a:	20ff      	movs	r0, #255	; 0xff
 809368c:	f000 fba2 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_SetBackColor(Red);
 8093690:	20e0      	movs	r0, #224	; 0xe0
 8093692:	f000 fbb0 	bl	8093df6 <GLCD_SetBackColor>

	GLCD_DrawString(0, 5, Message);
 8093696:	683a      	ldr	r2, [r7, #0]
 8093698:	2105      	movs	r1, #5
 809369a:	2000      	movs	r0, #0
 809369c:	f000 fc0c 	bl	8093eb8 <GLCD_DrawString>
	GLCD_DrawString(0, 14, "Press A to try again");
 80936a0:	4a08      	ldr	r2, [pc, #32]	; (80936c4 <PANIC_SoftwarePanic+0x50>)
 80936a2:	210e      	movs	r1, #14
 80936a4:	2000      	movs	r0, #0
 80936a6:	f000 fc07 	bl	8093eb8 <GLCD_DrawString>

	while (KEYS_GetState(KEY_B) != KEY_PRESSED);
 80936aa:	bf00      	nop
 80936ac:	2001      	movs	r0, #1
 80936ae:	f000 fe8d 	bl	80943cc <KEYS_GetState>
 80936b2:	4603      	mov	r3, r0
 80936b4:	2b01      	cmp	r3, #1
 80936b6:	d1f9      	bne.n	80936ac <PANIC_SoftwarePanic+0x38>

		/* Redemarrage de la carte */
	NVIC_SystemReset();
 80936b8:	f7ff fea6 	bl	8093408 <NVIC_SystemReset>
}
 80936bc:	bf00      	nop
 80936be:	3708      	adds	r7, #8
 80936c0:	46bd      	mov	sp, r7
 80936c2:	bd80      	pop	{r7, pc}
 80936c4:	0809df7c 	.word	0x0809df7c

080936c8 <RETARGET_Init>:
FILE __console;
FILE __lcd;
FILE __stderr;

void RETARGET_Init (void)
{
 80936c8:	b480      	push	{r7}
 80936ca:	af00      	add	r7, sp, #0
	__stdout._file=1;
 80936cc:	4b09      	ldr	r3, [pc, #36]	; (80936f4 <RETARGET_Init+0x2c>)
 80936ce:	2201      	movs	r2, #1
 80936d0:	81da      	strh	r2, [r3, #14]
	__stdin._file=1;
 80936d2:	4b09      	ldr	r3, [pc, #36]	; (80936f8 <RETARGET_Init+0x30>)
 80936d4:	2201      	movs	r2, #1
 80936d6:	81da      	strh	r2, [r3, #14]
	__console._file=10;
 80936d8:	4b08      	ldr	r3, [pc, #32]	; (80936fc <RETARGET_Init+0x34>)
 80936da:	220a      	movs	r2, #10
 80936dc:	81da      	strh	r2, [r3, #14]
	__lcd._file=10;
 80936de:	4b08      	ldr	r3, [pc, #32]	; (8093700 <RETARGET_Init+0x38>)
 80936e0:	220a      	movs	r2, #10
 80936e2:	81da      	strh	r2, [r3, #14]
	__stderr._file=2;
 80936e4:	4b07      	ldr	r3, [pc, #28]	; (8093704 <RETARGET_Init+0x3c>)
 80936e6:	2202      	movs	r2, #2
 80936e8:	81da      	strh	r2, [r3, #14]
}
 80936ea:	bf00      	nop
 80936ec:	46bd      	mov	sp, r7
 80936ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80936f2:	4770      	bx	lr
 80936f4:	2002dd44 	.word	0x2002dd44
 80936f8:	2002dc0c 	.word	0x2002dc0c
 80936fc:	2002dcdc 	.word	0x2002dcdc
 8093700:	2002dc74 	.word	0x2002dc74
 8093704:	2002dba4 	.word	0x2002dba4

08093708 <_write>:
/* Functions */

int _write (int fd, char *ptr, int len)
{
 8093708:	b580      	push	{r7, lr}
 809370a:	b086      	sub	sp, #24
 809370c:	af00      	add	r7, sp, #0
 809370e:	60f8      	str	r0, [r7, #12]
 8093710:	60b9      	str	r1, [r7, #8]
 8093712:	607a      	str	r2, [r7, #4]
	int i;

	for (i=0; i<len; i++)
 8093714:	2300      	movs	r3, #0
 8093716:	617b      	str	r3, [r7, #20]
 8093718:	e026      	b.n	8093768 <_write+0x60>
	{
		if (fd == 1)  BSP_STDIO_SendData((uint8_t *)&ptr[i],1);
 809371a:	68fb      	ldr	r3, [r7, #12]
 809371c:	2b01      	cmp	r3, #1
 809371e:	d106      	bne.n	809372e <_write+0x26>
 8093720:	697b      	ldr	r3, [r7, #20]
 8093722:	68ba      	ldr	r2, [r7, #8]
 8093724:	4413      	add	r3, r2
 8093726:	2101      	movs	r1, #1
 8093728:	4618      	mov	r0, r3
 809372a:	f7f5 f9b1 	bl	8088a90 <BSP_STDIO_SendData>
		if (fd == 2) // used for ADA exception
 809372e:	68fb      	ldr	r3, [r7, #12]
 8093730:	2b02      	cmp	r3, #2
 8093732:	d10c      	bne.n	809374e <_write+0x46>
		{
			BSP_STDIO_SendData((uint8_t *)&ptr[1],1);
 8093734:	68bb      	ldr	r3, [r7, #8]
 8093736:	3301      	adds	r3, #1
 8093738:	2101      	movs	r1, #1
 809373a:	4618      	mov	r0, r3
 809373c:	f7f5 f9a8 	bl	8088a90 <BSP_STDIO_SendData>
			CONSOLE_PrintChar(ptr[i]);
 8093740:	697b      	ldr	r3, [r7, #20]
 8093742:	68ba      	ldr	r2, [r7, #8]
 8093744:	4413      	add	r3, r2
 8093746:	781b      	ldrb	r3, [r3, #0]
 8093748:	4618      	mov	r0, r3
 809374a:	f7ff fe0d 	bl	8093368 <CONSOLE_PrintChar>
		}
		if (fd == 10) CONSOLE_PrintChar(ptr[i]);
 809374e:	68fb      	ldr	r3, [r7, #12]
 8093750:	2b0a      	cmp	r3, #10
 8093752:	d106      	bne.n	8093762 <_write+0x5a>
 8093754:	697b      	ldr	r3, [r7, #20]
 8093756:	68ba      	ldr	r2, [r7, #8]
 8093758:	4413      	add	r3, r2
 809375a:	781b      	ldrb	r3, [r3, #0]
 809375c:	4618      	mov	r0, r3
 809375e:	f7ff fe03 	bl	8093368 <CONSOLE_PrintChar>
	for (i=0; i<len; i++)
 8093762:	697b      	ldr	r3, [r7, #20]
 8093764:	3301      	adds	r3, #1
 8093766:	617b      	str	r3, [r7, #20]
 8093768:	697a      	ldr	r2, [r7, #20]
 809376a:	687b      	ldr	r3, [r7, #4]
 809376c:	429a      	cmp	r2, r3
 809376e:	dbd4      	blt.n	809371a <_write+0x12>
	}

	return len;
 8093770:	687b      	ldr	r3, [r7, #4]
}
 8093772:	4618      	mov	r0, r3
 8093774:	3718      	adds	r7, #24
 8093776:	46bd      	mov	sp, r7
 8093778:	bd80      	pop	{r7, pc}

0809377a <_read>:

int _read (int fd, char *ptr, int len)
{
 809377a:	b480      	push	{r7}
 809377c:	b087      	sub	sp, #28
 809377e:	af00      	add	r7, sp, #0
 8093780:	60f8      	str	r0, [r7, #12]
 8093782:	60b9      	str	r1, [r7, #8]
 8093784:	607a      	str	r2, [r7, #4]
	int count=-1;
 8093786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 809378a:	617b      	str	r3, [r7, #20]
	int i;

	for (i=0; i<len; i++)
 809378c:	2300      	movs	r3, #0
 809378e:	613b      	str	r3, [r7, #16]
 8093790:	e008      	b.n	80937a4 <_read+0x2a>
	{
		if (fd == 1)
 8093792:	68fb      	ldr	r3, [r7, #12]
 8093794:	2b01      	cmp	r3, #1
 8093796:	d102      	bne.n	809379e <_read+0x24>
		{
			//USART_Receive(USART1, &ptr[i]);
			count++;
 8093798:	697b      	ldr	r3, [r7, #20]
 809379a:	3301      	adds	r3, #1
 809379c:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 809379e:	693b      	ldr	r3, [r7, #16]
 80937a0:	3301      	adds	r3, #1
 80937a2:	613b      	str	r3, [r7, #16]
 80937a4:	693a      	ldr	r2, [r7, #16]
 80937a6:	687b      	ldr	r3, [r7, #4]
 80937a8:	429a      	cmp	r2, r3
 80937aa:	dbf2      	blt.n	8093792 <_read+0x18>
		}
	}

	return (count);
 80937ac:	697b      	ldr	r3, [r7, #20]
}
 80937ae:	4618      	mov	r0, r3
 80937b0:	371c      	adds	r7, #28
 80937b2:	46bd      	mov	sp, r7
 80937b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80937b8:	4770      	bx	lr
	...

080937bc <_sbrk>:
 *_sbrk
 * Increase program data space. Malloc and related functions depend on this
 */

caddr_t _sbrk(int incr)
{
 80937bc:	b580      	push	{r7, lr}
 80937be:	b084      	sub	sp, #16
 80937c0:	af00      	add	r7, sp, #0
 80937c2:	6078      	str	r0, [r7, #4]
	#define HEAP_END_ADDRESS	_dynamicsram_end

	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80937c4:	4b12      	ldr	r3, [pc, #72]	; (8093810 <_sbrk+0x54>)
 80937c6:	681b      	ldr	r3, [r3, #0]
 80937c8:	2b00      	cmp	r3, #0
 80937ca:	d103      	bne.n	80937d4 <_sbrk+0x18>
		heap_end = (char*)HEAP_BASE_ADDRESS;
 80937cc:	4b11      	ldr	r3, [pc, #68]	; (8093814 <_sbrk+0x58>)
 80937ce:	681b      	ldr	r3, [r3, #0]
 80937d0:	4a0f      	ldr	r2, [pc, #60]	; (8093810 <_sbrk+0x54>)
 80937d2:	6013      	str	r3, [r2, #0]

	prev_heap_end = heap_end;
 80937d4:	4b0e      	ldr	r3, [pc, #56]	; (8093810 <_sbrk+0x54>)
 80937d6:	681b      	ldr	r3, [r3, #0]
 80937d8:	60fb      	str	r3, [r7, #12]

	if (heap_end + incr > (char*)HEAP_END_ADDRESS)
 80937da:	4b0d      	ldr	r3, [pc, #52]	; (8093810 <_sbrk+0x54>)
 80937dc:	681a      	ldr	r2, [r3, #0]
 80937de:	687b      	ldr	r3, [r7, #4]
 80937e0:	441a      	add	r2, r3
 80937e2:	4b0d      	ldr	r3, [pc, #52]	; (8093818 <_sbrk+0x5c>)
 80937e4:	681b      	ldr	r3, [r3, #0]
 80937e6:	429a      	cmp	r2, r3
 80937e8:	d907      	bls.n	80937fa <_sbrk+0x3e>
	{
		errno = ENOMEM;
 80937ea:	f008 fae1 	bl	809bdb0 <__errno>
 80937ee:	4602      	mov	r2, r0
 80937f0:	230c      	movs	r3, #12
 80937f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80937f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80937f8:	e006      	b.n	8093808 <_sbrk+0x4c>
	}

	heap_end += incr;
 80937fa:	4b05      	ldr	r3, [pc, #20]	; (8093810 <_sbrk+0x54>)
 80937fc:	681a      	ldr	r2, [r3, #0]
 80937fe:	687b      	ldr	r3, [r7, #4]
 8093800:	4413      	add	r3, r2
 8093802:	4a03      	ldr	r2, [pc, #12]	; (8093810 <_sbrk+0x54>)
 8093804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8093806:	68fb      	ldr	r3, [r7, #12]
}
 8093808:	4618      	mov	r0, r3
 809380a:	3710      	adds	r7, #16
 809380c:	46bd      	mov	sp, r7
 809380e:	bd80      	pop	{r7, pc}
 8093810:	2000bc24 	.word	0x2000bc24
 8093814:	c0300000 	.word	0xc0300000
 8093818:	c0300000 	.word	0xc0300000

0809381c <NVIC_SystemReset>:
{
 809381c:	b480      	push	{r7}
 809381e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8093820:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8093824:	4b05      	ldr	r3, [pc, #20]	; (809383c <NVIC_SystemReset+0x20>)
 8093826:	68db      	ldr	r3, [r3, #12]
 8093828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 809382c:	4903      	ldr	r1, [pc, #12]	; (809383c <NVIC_SystemReset+0x20>)
 809382e:	4b04      	ldr	r3, [pc, #16]	; (8093840 <NVIC_SystemReset+0x24>)
 8093830:	4313      	orrs	r3, r2
 8093832:	60cb      	str	r3, [r1, #12]
 8093834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8093838:	bf00      	nop
    __NOP();
 809383a:	e7fd      	b.n	8093838 <NVIC_SystemReset+0x1c>
 809383c:	e000ed00 	.word	0xe000ed00
 8093840:	05fa0004 	.word	0x05fa0004

08093844 <LEGACY_System>:
extern const uint32_t* __system_stack_end__;

extern uint32_t PRG_ReprogPatternAddr;

int LEGACY_System (void)
{	/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
 8093844:	b580      	push	{r7, lr}
 8093846:	af00      	add	r7, sp, #0
	/* !!!!! Ne pas mettre de variable locale ici            !!!! */
	/* !!!!! La stack va etre deplacée                       !!!! */
	/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

	/* Pre init du system */
	SetStack((uint32_t)&__system_stack_end__,(uint32_t)&__app_stack_end__);
 8093848:	4b15      	ldr	r3, [pc, #84]	; (80938a0 <LEGACY_System+0x5c>)
 809384a:	4a16      	ldr	r2, [pc, #88]	; (80938a4 <LEGACY_System+0x60>)
 809384c:	4611      	mov	r1, r2
 809384e:	4618      	mov	r0, r3
 8093850:	f008 f994 	bl	809bb7c <SetStack>
	//SYSTEM_MoveITVector();
	RETARGET_Init();
 8093854:	f7ff ff38 	bl	80936c8 <RETARGET_Init>

	/* Init du systeme */
	WRAPPER_Init();
 8093858:	f000 f9b8 	bl	8093bcc <WRAPPER_Init>
	BSP_LCD_ResetScreen();
 809385c:	f7f2 f950 	bl	8085b00 <BSP_LCD_ResetScreen>

	GLCD_SetBackColor(White);
 8093860:	20ff      	movs	r0, #255	; 0xff
 8093862:	f000 fac8 	bl	8093df6 <GLCD_SetBackColor>
	GLCD_SetTextColor(Black);
 8093866:	2000      	movs	r0, #0
 8093868:	f000 fab4 	bl	8093dd4 <GLCD_SetTextColor>
	}
#endif /* ADA_TEST_SYSTEM */

	/* Finalement, on positionne le drapeau de demarrage a froid */
	/* Desormais, lors d'un reset, le systeme ne ferra plus d'attente pour l'ecran, ni d'animation */
	PRG_ResetReprogRequest();
 809386c:	f000 f84a 	bl	8093904 <PRG_ResetReprogRequest>

	/* Set screen in full black, except for emulated screen of legacy device (in white) */
	BSP_LCD_Clear(Black);
 8093870:	2000      	movs	r0, #0
 8093872:	f7f2 f91d 	bl	8085ab0 <BSP_LCD_Clear>
	GLCD_Clear(White);
 8093876:	20ff      	movs	r0, #255	; 0xff
 8093878:	f000 fa8e 	bl	8093d98 <GLCD_Clear>

	SYSTEM_ShowSystemVersion(BL_MAJOR_VERSION, BL_MINOR_VERSION);
 809387c:	2101      	movs	r1, #1
 809387e:	2001      	movs	r0, #1
 8093880:	f000 f812 	bl	80938a8 <SYSTEM_ShowSystemVersion>

	/* Lance l'application ADA (si les auto test n'ont pas été activés avant) */
	while (SYSTEM_RunApp()!= BAD_APPLICATION_RETURN_CODE);
 8093884:	bf00      	nop
 8093886:	f000 f84b 	bl	8093920 <SYSTEM_RunApp>
 809388a:	4602      	mov	r2, r0
 809388c:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8093890:	429a      	cmp	r2, r3
 8093892:	d1f8      	bne.n	8093886 <LEGACY_System+0x42>

	/* Redemarre le system (devrait rester bloqué dans le bootloader) */
	NVIC_SystemReset();	
 8093894:	f7ff ffc2 	bl	809381c <NVIC_SystemReset>

	/* N'arrive jamais ici, normalement */
	return 0;
 8093898:	2300      	movs	r3, #0
}
 809389a:	4618      	mov	r0, r3
 809389c:	bd80      	pop	{r7, pc}
 809389e:	bf00      	nop
 80938a0:	20001400 	.word	0x20001400
 80938a4:	20001000 	.word	0x20001000

080938a8 <SYSTEM_ShowSystemVersion>:

void SYSTEM_ShowSystemVersion(int MajV, int MinV)
{
 80938a8:	b580      	push	{r7, lr}
 80938aa:	b08a      	sub	sp, #40	; 0x28
 80938ac:	af00      	add	r7, sp, #0
 80938ae:	6078      	str	r0, [r7, #4]
 80938b0:	6039      	str	r1, [r7, #0]
	char str[30];

	GLCD_SetBackColor(White);
 80938b2:	20ff      	movs	r0, #255	; 0xff
 80938b4:	f000 fa9f 	bl	8093df6 <GLCD_SetBackColor>
	GLCD_SetTextColor(Black);
 80938b8:	2000      	movs	r0, #0
 80938ba:	f000 fa8b 	bl	8093dd4 <GLCD_SetTextColor>

	sprintf (str, "System ver. %d.%d", BL_MAJOR_VERSION, BL_MINOR_VERSION);
 80938be:	f107 0008 	add.w	r0, r7, #8
 80938c2:	2301      	movs	r3, #1
 80938c4:	2201      	movs	r2, #1
 80938c6:	490e      	ldr	r1, [pc, #56]	; (8093900 <SYSTEM_ShowSystemVersion+0x58>)
 80938c8:	f008 ff0c 	bl	809c6e4 <siprintf>
	GLCD_DrawString((40-strlen(str))/2, 13, str);
 80938cc:	f107 0308 	add.w	r3, r7, #8
 80938d0:	4618      	mov	r0, r3
 80938d2:	f7ec fbbd 	bl	8080050 <strlen>
 80938d6:	4603      	mov	r3, r0
 80938d8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80938dc:	085b      	lsrs	r3, r3, #1
 80938de:	f107 0208 	add.w	r2, r7, #8
 80938e2:	210d      	movs	r1, #13
 80938e4:	4618      	mov	r0, r3
 80938e6:	f000 fae7 	bl	8093eb8 <GLCD_DrawString>
	Delay(2000);
 80938ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80938ee:	f000 fa47 	bl	8093d80 <Delay>
	GLCD_Clear(White);
 80938f2:	20ff      	movs	r0, #255	; 0xff
 80938f4:	f000 fa50 	bl	8093d98 <GLCD_Clear>
}
 80938f8:	bf00      	nop
 80938fa:	3728      	adds	r7, #40	; 0x28
 80938fc:	46bd      	mov	sp, r7
 80938fe:	bd80      	pop	{r7, pc}
 8093900:	0809dffc 	.word	0x0809dffc

08093904 <PRG_ResetReprogRequest>:
	return PRG_RESET_HARDRESET;
}

/* Fonction pour nettoyer la condition de reprog */
void PRG_ResetReprogRequest(void)
{
 8093904:	b480      	push	{r7}
 8093906:	af00      	add	r7, sp, #0
	PRG_ReprogPatternAddr = PRG_SOFTRESET_PATTERN;
 8093908:	4b03      	ldr	r3, [pc, #12]	; (8093918 <PRG_ResetReprogRequest+0x14>)
 809390a:	4a04      	ldr	r2, [pc, #16]	; (809391c <PRG_ResetReprogRequest+0x18>)
 809390c:	601a      	str	r2, [r3, #0]
}
 809390e:	bf00      	nop
 8093910:	46bd      	mov	sp, r7
 8093912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8093916:	4770      	bx	lr
 8093918:	20001600 	.word	0x20001600
 809391c:	deadbeef 	.word	0xdeadbeef

08093920 <SYSTEM_RunApp>:
 * @brief  Peripheral Reset.
 * @param  None
 * @retval None
 */
int SYSTEM_RunApp(void)
{
 8093920:	b590      	push	{r4, r7, lr}
 8093922:	b093      	sub	sp, #76	; 0x4c
 8093924:	af00      	add	r7, sp, #0
	TestEntryPoint = (uint32_t*)APPLICATION_FIRST_ADDR;
 8093926:	4b83      	ldr	r3, [pc, #524]	; (8093b34 <SYSTEM_RunApp+0x214>)
 8093928:	4a83      	ldr	r2, [pc, #524]	; (8093b38 <SYSTEM_RunApp+0x218>)
 809392a:	601a      	str	r2, [r3, #0]
	GLCD_SetTextColor(Black);
 809392c:	2000      	movs	r0, #0
 809392e:	f000 fa51 	bl	8093dd4 <GLCD_SetTextColor>
	GLCD_SetBackColor(White);
 8093932:	20ff      	movs	r0, #255	; 0xff
 8093934:	f000 fa5f 	bl	8093df6 <GLCD_SetBackColor>

	if (*TestEntryPoint == 0xFFFFFFFF)
 8093938:	4b7e      	ldr	r3, [pc, #504]	; (8093b34 <SYSTEM_RunApp+0x214>)
 809393a:	681b      	ldr	r3, [r3, #0]
 809393c:	681b      	ldr	r3, [r3, #0]
 809393e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8093942:	d113      	bne.n	809396c <SYSTEM_RunApp+0x4c>
	{
		/* Pas d'appli en memoire */
		GLCD_DrawString(1,12, "No program loaded");
 8093944:	4a7d      	ldr	r2, [pc, #500]	; (8093b3c <SYSTEM_RunApp+0x21c>)
 8093946:	210c      	movs	r1, #12
 8093948:	2001      	movs	r0, #1
 809394a:	f000 fab5 	bl	8093eb8 <GLCD_DrawString>
		GLCD_DrawString(1,14, "Please, flash a program.");
 809394e:	4a7c      	ldr	r2, [pc, #496]	; (8093b40 <SYSTEM_RunApp+0x220>)
 8093950:	210e      	movs	r1, #14
 8093952:	2001      	movs	r0, #1
 8093954:	f000 fab0 	bl	8093eb8 <GLCD_DrawString>

		while (KEYS_GetState(KEY_CENTER)!=KEY_PRESSED);
 8093958:	bf00      	nop
 809395a:	2005      	movs	r0, #5
 809395c:	f000 fd36 	bl	80943cc <KEYS_GetState>
 8093960:	4603      	mov	r3, r0
 8093962:	2b01      	cmp	r3, #1
 8093964:	d1f9      	bne.n	809395a <SYSTEM_RunApp+0x3a>
		/* Don't wait for key C to be released, used in bootloader to stop and wait for fresh program to be load */

		return BAD_APPLICATION_RETURN_CODE;
 8093966:	f64d 63ad 	movw	r3, #57005	; 0xdead
 809396a:	e0df      	b.n	8093b2c <SYSTEM_RunApp+0x20c>
	}
	else 
	{
		mh=(magicHeader*)TestEntryPoint;
 809396c:	4b71      	ldr	r3, [pc, #452]	; (8093b34 <SYSTEM_RunApp+0x214>)
 809396e:	681b      	ldr	r3, [r3, #0]
 8093970:	4a74      	ldr	r2, [pc, #464]	; (8093b44 <SYSTEM_RunApp+0x224>)
 8093972:	6013      	str	r3, [r2, #0]

		if ((mh->magic_str[0] == 'I') && 
 8093974:	4b73      	ldr	r3, [pc, #460]	; (8093b44 <SYSTEM_RunApp+0x224>)
 8093976:	681b      	ldr	r3, [r3, #0]
 8093978:	781b      	ldrb	r3, [r3, #0]
 809397a:	2b49      	cmp	r3, #73	; 0x49
 809397c:	f040 80c3 	bne.w	8093b06 <SYSTEM_RunApp+0x1e6>
				(mh->magic_str[1] == 'N') &&
 8093980:	4b70      	ldr	r3, [pc, #448]	; (8093b44 <SYSTEM_RunApp+0x224>)
 8093982:	681b      	ldr	r3, [r3, #0]
 8093984:	785b      	ldrb	r3, [r3, #1]
		if ((mh->magic_str[0] == 'I') && 
 8093986:	2b4e      	cmp	r3, #78	; 0x4e
 8093988:	f040 80bd 	bne.w	8093b06 <SYSTEM_RunApp+0x1e6>
				(mh->magic_str[2] == 'S') &&
 809398c:	4b6d      	ldr	r3, [pc, #436]	; (8093b44 <SYSTEM_RunApp+0x224>)
 809398e:	681b      	ldr	r3, [r3, #0]
 8093990:	789b      	ldrb	r3, [r3, #2]
				(mh->magic_str[1] == 'N') &&
 8093992:	2b53      	cmp	r3, #83	; 0x53
 8093994:	f040 80b7 	bne.w	8093b06 <SYSTEM_RunApp+0x1e6>
				(mh->magic_str[3] == 'A'))
 8093998:	4b6a      	ldr	r3, [pc, #424]	; (8093b44 <SYSTEM_RunApp+0x224>)
 809399a:	681b      	ldr	r3, [r3, #0]
 809399c:	78db      	ldrb	r3, [r3, #3]
				(mh->magic_str[2] == 'S') &&
 809399e:	2b41      	cmp	r3, #65	; 0x41
 80939a0:	f040 80b1 	bne.w	8093b06 <SYSTEM_RunApp+0x1e6>
		{
			/* Verification de la version d'abi */
			if (mh->abi_version <= ABI_VERSION)
 80939a4:	4b67      	ldr	r3, [pc, #412]	; (8093b44 <SYSTEM_RunApp+0x224>)
 80939a6:	681b      	ldr	r3, [r3, #0]
 80939a8:	685b      	ldr	r3, [r3, #4]
 80939aa:	2bf0      	cmp	r3, #240	; 0xf0
 80939ac:	f200 8092 	bhi.w	8093ad4 <SYSTEM_RunApp+0x1b4>
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80939b0:	f3ef 8308 	mrs	r3, MSP
 80939b4:	461c      	mov	r4, r3
  return(result);
 80939b6:	4622      	mov	r2, r4
			{
				/* Lancement de l'appli */
				/* Sauvegarde de la stack systeme */
				SYSTEM_Stack = __get_MSP();
 80939b8:	4b63      	ldr	r3, [pc, #396]	; (8093b48 <SYSTEM_RunApp+0x228>)
 80939ba:	601a      	str	r2, [r3, #0]

				/* On remet la console à 0 */
				CONSOLE_GotoXY(0,0);
 80939bc:	2100      	movs	r1, #0
 80939be:	2000      	movs	r0, #0
 80939c0:	f7ff fcb0 	bl	8093324 <CONSOLE_GotoXY>
  __ASM volatile ("cpsid i" : : : "memory");
 80939c4:	b672      	cpsid	i
				/* Bascule vers la stack applicative */
				/* La stack appli va de 0x20009000 à 0x2000A000, la stack systeme de 0x10000000 à 0x10000400,
				   le reste (0x1600) est reservée pour les données (data et bss) du systeme et le vecteur d'IT */

				//__set_PSP((uint32_t)(0x2000A000-0x4));
				__set_PSP((uint32_t)((uint32_t)&__app_stack_end__-0x4));
 80939c6:	4b61      	ldr	r3, [pc, #388]	; (8093b4c <SYSTEM_RunApp+0x22c>)
 80939c8:	3b04      	subs	r3, #4
 80939ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80939cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80939ce:	f383 8809 	msr	PSP, r3
 80939d2:	2302      	movs	r3, #2
 80939d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80939d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80939d8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80939dc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 80939e0:	b662      	cpsie	i
				__set_CONTROL(0x2); // bascule en mode thread + psp
				__ISB();			// Vide le cache
				__enable_irq(); 	// réactive les IT

				/* Appelle l'applicatif ADA */
				AppEntryPoint = (int (*)(void))(mh->ep);
 80939e2:	4b58      	ldr	r3, [pc, #352]	; (8093b44 <SYSTEM_RunApp+0x224>)
 80939e4:	681b      	ldr	r3, [r3, #0]
 80939e6:	689b      	ldr	r3, [r3, #8]
 80939e8:	461a      	mov	r2, r3
 80939ea:	4b59      	ldr	r3, [pc, #356]	; (8093b50 <SYSTEM_RunApp+0x230>)
 80939ec:	601a      	str	r2, [r3, #0]
				return_val=AppEntryPoint();
 80939ee:	4b58      	ldr	r3, [pc, #352]	; (8093b50 <SYSTEM_RunApp+0x230>)
 80939f0:	681b      	ldr	r3, [r3, #0]
 80939f2:	4798      	blx	r3
 80939f4:	4602      	mov	r2, r0
 80939f6:	4b57      	ldr	r3, [pc, #348]	; (8093b54 <SYSTEM_RunApp+0x234>)
 80939f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80939fa:	b672      	cpsid	i
 80939fc:	2300      	movs	r3, #0
 80939fe:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8093a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8093a02:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8093a06:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8093a0a:	b662      	cpsie	i
				__disable_irq(); 	// Desactive les IT, le temps de changer la stack */
				__set_CONTROL(0x0); // bascule en mode thread + msp
				__ISB();			// Vide le cache
				__enable_irq(); 	// réactive les IT

				GLCD_SetTextColor(Black);
 8093a0c:	2000      	movs	r0, #0
 8093a0e:	f000 f9e1 	bl	8093dd4 <GLCD_SetTextColor>
				GLCD_SetBackColor(White);
 8093a12:	20ff      	movs	r0, #255	; 0xff
 8093a14:	f000 f9ef 	bl	8093df6 <GLCD_SetBackColor>

				if (return_val == 0xDEAD0001)
 8093a18:	4b4e      	ldr	r3, [pc, #312]	; (8093b54 <SYSTEM_RunApp+0x234>)
 8093a1a:	681b      	ldr	r3, [r3, #0]
 8093a1c:	4a4e      	ldr	r2, [pc, #312]	; (8093b58 <SYSTEM_RunApp+0x238>)
 8093a1e:	4293      	cmp	r3, r2
 8093a20:	d10f      	bne.n	8093a42 <SYSTEM_RunApp+0x122>
				{
					GLCD_DrawString(1,11, "Invalid ABI");
 8093a22:	4a4e      	ldr	r2, [pc, #312]	; (8093b5c <SYSTEM_RunApp+0x23c>)
 8093a24:	210b      	movs	r1, #11
 8093a26:	2001      	movs	r0, #1
 8093a28:	f000 fa46 	bl	8093eb8 <GLCD_DrawString>
					GLCD_DrawString(1,12, "Program requires a more recent system");
 8093a2c:	4a4c      	ldr	r2, [pc, #304]	; (8093b60 <SYSTEM_RunApp+0x240>)
 8093a2e:	210c      	movs	r1, #12
 8093a30:	2001      	movs	r0, #1
 8093a32:	f000 fa41 	bl	8093eb8 <GLCD_DrawString>
					GLCD_DrawString(1,14, "Please, upgrade system");
 8093a36:	4a4b      	ldr	r2, [pc, #300]	; (8093b64 <SYSTEM_RunApp+0x244>)
 8093a38:	210e      	movs	r1, #14
 8093a3a:	2001      	movs	r0, #1
 8093a3c:	f000 fa3c 	bl	8093eb8 <GLCD_DrawString>
 8093a40:	e020      	b.n	8093a84 <SYSTEM_RunApp+0x164>
				else
				{
					char buffer[50];
					int i;

					sprintf(buffer,"Program terminated with exit code 0x%08X\n",return_val);
 8093a42:	4b44      	ldr	r3, [pc, #272]	; (8093b54 <SYSTEM_RunApp+0x234>)
 8093a44:	681a      	ldr	r2, [r3, #0]
 8093a46:	1d3b      	adds	r3, r7, #4
 8093a48:	4947      	ldr	r1, [pc, #284]	; (8093b68 <SYSTEM_RunApp+0x248>)
 8093a4a:	4618      	mov	r0, r3
 8093a4c:	f008 fe4a 	bl	809c6e4 <siprintf>
					for (i=0; i<strlen(buffer); i++)
 8093a50:	2300      	movs	r3, #0
 8093a52:	647b      	str	r3, [r7, #68]	; 0x44
 8093a54:	e009      	b.n	8093a6a <SYSTEM_RunApp+0x14a>
					{
						BSP_STDIO_SendData((uint8_t *)&buffer[i],1);
 8093a56:	1d3a      	adds	r2, r7, #4
 8093a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8093a5a:	4413      	add	r3, r2
 8093a5c:	2101      	movs	r1, #1
 8093a5e:	4618      	mov	r0, r3
 8093a60:	f7f5 f816 	bl	8088a90 <BSP_STDIO_SendData>
					for (i=0; i<strlen(buffer); i++)
 8093a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8093a66:	3301      	adds	r3, #1
 8093a68:	647b      	str	r3, [r7, #68]	; 0x44
 8093a6a:	1d3b      	adds	r3, r7, #4
 8093a6c:	4618      	mov	r0, r3
 8093a6e:	f7ec faef 	bl	8080050 <strlen>
 8093a72:	4602      	mov	r2, r0
 8093a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8093a76:	429a      	cmp	r2, r3
 8093a78:	d8ed      	bhi.n	8093a56 <SYSTEM_RunApp+0x136>
					}

					GLCD_DrawString(1,14, "A -> Run again");
 8093a7a:	4a3c      	ldr	r2, [pc, #240]	; (8093b6c <SYSTEM_RunApp+0x24c>)
 8093a7c:	210e      	movs	r1, #14
 8093a7e:	2001      	movs	r0, #1
 8093a80:	f000 fa1a 	bl	8093eb8 <GLCD_DrawString>
				}

				while ((KEYS_GetState(KEY_A)!=KEY_PRESSED) && (KEYS_GetState(KEY_B)!=KEY_PRESSED));
 8093a84:	bf00      	nop
 8093a86:	2000      	movs	r0, #0
 8093a88:	f000 fca0 	bl	80943cc <KEYS_GetState>
 8093a8c:	4603      	mov	r3, r0
 8093a8e:	2b01      	cmp	r3, #1
 8093a90:	d005      	beq.n	8093a9e <SYSTEM_RunApp+0x17e>
 8093a92:	2001      	movs	r0, #1
 8093a94:	f000 fc9a 	bl	80943cc <KEYS_GetState>
 8093a98:	4603      	mov	r3, r0
 8093a9a:	2b01      	cmp	r3, #1
 8093a9c:	d1f3      	bne.n	8093a86 <SYSTEM_RunApp+0x166>
				while ((KEYS_GetState(KEY_A)==KEY_PRESSED) || (KEYS_GetState(KEY_B)==KEY_PRESSED));
 8093a9e:	bf00      	nop
 8093aa0:	2000      	movs	r0, #0
 8093aa2:	f000 fc93 	bl	80943cc <KEYS_GetState>
 8093aa6:	4603      	mov	r3, r0
 8093aa8:	2b01      	cmp	r3, #1
 8093aaa:	d0f9      	beq.n	8093aa0 <SYSTEM_RunApp+0x180>
 8093aac:	2001      	movs	r0, #1
 8093aae:	f000 fc8d 	bl	80943cc <KEYS_GetState>
 8093ab2:	4603      	mov	r3, r0
 8093ab4:	2b01      	cmp	r3, #1
 8093ab6:	d0f3      	beq.n	8093aa0 <SYSTEM_RunApp+0x180>

				BSP_LCD_Clear(Black);
 8093ab8:	2000      	movs	r0, #0
 8093aba:	f7f1 fff9 	bl	8085ab0 <BSP_LCD_Clear>
				GLCD_Clear(White);
 8093abe:	20ff      	movs	r0, #255	; 0xff
 8093ac0:	f000 f96a 	bl	8093d98 <GLCD_Clear>
				GLCD_SetTextColor(Black);
 8093ac4:	2000      	movs	r0, #0
 8093ac6:	f000 f985 	bl	8093dd4 <GLCD_SetTextColor>
				GLCD_SetBackColor(White);
 8093aca:	20ff      	movs	r0, #255	; 0xff
 8093acc:	f000 f993 	bl	8093df6 <GLCD_SetBackColor>

				return 0;
 8093ad0:	2300      	movs	r3, #0
 8093ad2:	e02b      	b.n	8093b2c <SYSTEM_RunApp+0x20c>
			}
			else /* L'appli demande une version plus recente d'abi */
			{
				GLCD_DrawString(1,11, "Invalid ABI");
 8093ad4:	4a21      	ldr	r2, [pc, #132]	; (8093b5c <SYSTEM_RunApp+0x23c>)
 8093ad6:	210b      	movs	r1, #11
 8093ad8:	2001      	movs	r0, #1
 8093ada:	f000 f9ed 	bl	8093eb8 <GLCD_DrawString>
				GLCD_DrawString(1,12, "Program requires a more recent system");
 8093ade:	4a20      	ldr	r2, [pc, #128]	; (8093b60 <SYSTEM_RunApp+0x240>)
 8093ae0:	210c      	movs	r1, #12
 8093ae2:	2001      	movs	r0, #1
 8093ae4:	f000 f9e8 	bl	8093eb8 <GLCD_DrawString>
				GLCD_DrawString(1,14, "Please, upgrade system");
 8093ae8:	4a1e      	ldr	r2, [pc, #120]	; (8093b64 <SYSTEM_RunApp+0x244>)
 8093aea:	210e      	movs	r1, #14
 8093aec:	2001      	movs	r0, #1
 8093aee:	f000 f9e3 	bl	8093eb8 <GLCD_DrawString>

				while (KEYS_GetState(KEY_CENTER)!=KEY_PRESSED);
 8093af2:	bf00      	nop
 8093af4:	2005      	movs	r0, #5
 8093af6:	f000 fc69 	bl	80943cc <KEYS_GetState>
 8093afa:	4603      	mov	r3, r0
 8093afc:	2b01      	cmp	r3, #1
 8093afe:	d1f9      	bne.n	8093af4 <SYSTEM_RunApp+0x1d4>
				/* Don't wait for key C to be released, used in bootloader to stop and wait for fresh program to be load */

				return BAD_APPLICATION_RETURN_CODE;
 8093b00:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8093b04:	e012      	b.n	8093b2c <SYSTEM_RunApp+0x20c>
			}
		}
		else
		{
			/* Appli incompatible ou corrompue */
			GLCD_DrawString(1,12, "Invalid or corrupted program");
 8093b06:	4a1a      	ldr	r2, [pc, #104]	; (8093b70 <SYSTEM_RunApp+0x250>)
 8093b08:	210c      	movs	r1, #12
 8093b0a:	2001      	movs	r0, #1
 8093b0c:	f000 f9d4 	bl	8093eb8 <GLCD_DrawString>
			GLCD_DrawString(1,14, "Please, update your program");
 8093b10:	4a18      	ldr	r2, [pc, #96]	; (8093b74 <SYSTEM_RunApp+0x254>)
 8093b12:	210e      	movs	r1, #14
 8093b14:	2001      	movs	r0, #1
 8093b16:	f000 f9cf 	bl	8093eb8 <GLCD_DrawString>

			while (KEYS_GetState(KEY_CENTER)!=KEY_PRESSED);
 8093b1a:	bf00      	nop
 8093b1c:	2005      	movs	r0, #5
 8093b1e:	f000 fc55 	bl	80943cc <KEYS_GetState>
 8093b22:	4603      	mov	r3, r0
 8093b24:	2b01      	cmp	r3, #1
 8093b26:	d1f9      	bne.n	8093b1c <SYSTEM_RunApp+0x1fc>
			/* Don't wait for key C to be released, used in bootloader to stop and wait for fresh program to be load */

			return BAD_APPLICATION_RETURN_CODE;
 8093b28:	f64d 63ad 	movw	r3, #57005	; 0xdead
		}
	}

	return BAD_APPLICATION_RETURN_CODE;
}
 8093b2c:	4618      	mov	r0, r3
 8093b2e:	374c      	adds	r7, #76	; 0x4c
 8093b30:	46bd      	mov	sp, r7
 8093b32:	bd90      	pop	{r4, r7, pc}
 8093b34:	2002ddec 	.word	0x2002ddec
 8093b38:	08008000 	.word	0x08008000
 8093b3c:	0809e010 	.word	0x0809e010
 8093b40:	0809e024 	.word	0x0809e024
 8093b44:	2002ded8 	.word	0x2002ded8
 8093b48:	2002de28 	.word	0x2002de28
 8093b4c:	20001000 	.word	0x20001000
 8093b50:	2002ddac 	.word	0x2002ddac
 8093b54:	2002ddcc 	.word	0x2002ddcc
 8093b58:	dead0001 	.word	0xdead0001
 8093b5c:	0809e040 	.word	0x0809e040
 8093b60:	0809e04c 	.word	0x0809e04c
 8093b64:	0809e074 	.word	0x0809e074
 8093b68:	0809e08c 	.word	0x0809e08c
 8093b6c:	0809e0b8 	.word	0x0809e0b8
 8093b70:	0809e0c8 	.word	0x0809e0c8
 8093b74:	0809e0e8 	.word	0x0809e0e8

08093b78 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8093b78:	b480      	push	{r7}
 8093b7a:	b087      	sub	sp, #28
 8093b7c:	af00      	add	r7, sp, #0
 8093b7e:	6078      	str	r0, [r7, #4]
 8093b80:	6039      	str	r1, [r7, #0]
  #if (__DCACHE_PRESENT == 1)
     int32_t op_size = dsize;
 8093b82:	683b      	ldr	r3, [r7, #0]
 8093b84:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8093b86:	687b      	ldr	r3, [r7, #4]
 8093b88:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32U;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8093b8a:	2320      	movs	r3, #32
 8093b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8093b8e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8093b92:	e00b      	b.n	8093bac <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8093b94:	4a0c      	ldr	r2, [pc, #48]	; (8093bc8 <SCB_CleanDCache_by_Addr+0x50>)
 8093b96:	693b      	ldr	r3, [r7, #16]
 8093b98:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += linesize;
 8093b9c:	68fb      	ldr	r3, [r7, #12]
 8093b9e:	693a      	ldr	r2, [r7, #16]
 8093ba0:	4413      	add	r3, r2
 8093ba2:	613b      	str	r3, [r7, #16]
      op_size -= linesize;
 8093ba4:	697a      	ldr	r2, [r7, #20]
 8093ba6:	68fb      	ldr	r3, [r7, #12]
 8093ba8:	1ad3      	subs	r3, r2, r3
 8093baa:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8093bac:	697b      	ldr	r3, [r7, #20]
 8093bae:	2b00      	cmp	r3, #0
 8093bb0:	dcf0      	bgt.n	8093b94 <SCB_CleanDCache_by_Addr+0x1c>
 8093bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8093bb6:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8093bba:	bf00      	nop
 8093bbc:	371c      	adds	r7, #28
 8093bbe:	46bd      	mov	sp, r7
 8093bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8093bc4:	4770      	bx	lr
 8093bc6:	bf00      	nop
 8093bc8:	e000ed00 	.word	0xe000ed00

08093bcc <WRAPPER_Init>:
MELODY_Status MELODY_Init(void);

/**
 * Init function for legacy wrapper, in charge of initializing Timer 7, for example
 */
void WRAPPER_Init (void) {
 8093bcc:	b590      	push	{r4, r7, lr}
 8093bce:	b08d      	sub	sp, #52	; 0x34
 8093bd0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef    clkconfig;
	uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8093bd2:	2300      	movs	r3, #0
 8093bd4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t              uwPrescalerValue = 0U;
 8093bd6:	2300      	movs	r3, #0
 8093bd8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t              pFLatency;
	uint8_t  			  status = 0;
 8093bda:	2300      	movs	r3, #0
 8093bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Configure the TIM7 IRQ priority */
	HAL_NVIC_SetPriority(TIM7_IRQn, 0xFU ,0U);
 8093be0:	2200      	movs	r2, #0
 8093be2:	210f      	movs	r1, #15
 8093be4:	2037      	movs	r0, #55	; 0x37
 8093be6:	f7f5 fbb7 	bl	8089358 <HAL_NVIC_SetPriority>

	/* Enable the TIM7 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8093bea:	2037      	movs	r0, #55	; 0x37
 8093bec:	f7f5 fbd0 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable TIM7 clock */
	__HAL_RCC_TIM7_CLK_ENABLE();
 8093bf0:	4b35      	ldr	r3, [pc, #212]	; (8093cc8 <WRAPPER_Init+0xfc>)
 8093bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8093bf4:	4a34      	ldr	r2, [pc, #208]	; (8093cc8 <WRAPPER_Init+0xfc>)
 8093bf6:	f043 0320 	orr.w	r3, r3, #32
 8093bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8093bfc:	4b32      	ldr	r3, [pc, #200]	; (8093cc8 <WRAPPER_Init+0xfc>)
 8093bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8093c00:	f003 0320 	and.w	r3, r3, #32
 8093c04:	607b      	str	r3, [r7, #4]
 8093c06:	687b      	ldr	r3, [r7, #4]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8093c08:	f107 0208 	add.w	r2, r7, #8
 8093c0c:	f107 030c 	add.w	r3, r7, #12
 8093c10:	4611      	mov	r1, r2
 8093c12:	4618      	mov	r0, r3
 8093c14:	f7f9 f8c4 	bl	808cda0 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8093c18:	69bb      	ldr	r3, [r7, #24]
 8093c1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Compute TIM7 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8093c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8093c1e:	2b00      	cmp	r3, #0
 8093c20:	d103      	bne.n	8093c2a <WRAPPER_Init+0x5e>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8093c22:	f7f9 f895 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 8093c26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8093c28:	e004      	b.n	8093c34 <WRAPPER_Init+0x68>
	}
	else
	{
		uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8093c2a:	f7f9 f891 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 8093c2e:	4603      	mov	r3, r0
 8093c30:	005b      	lsls	r3, r3, #1
 8093c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8093c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8093c36:	4a25      	ldr	r2, [pc, #148]	; (8093ccc <WRAPPER_Init+0x100>)
 8093c38:	fba2 2303 	umull	r2, r3, r2, r3
 8093c3c:	0c9b      	lsrs	r3, r3, #18
 8093c3e:	3b01      	subs	r3, #1
 8093c40:	627b      	str	r3, [r7, #36]	; 0x24

	/* Initialize TIM7 */
	LegacyTimHandle.Instance = TIM7;
 8093c42:	4b23      	ldr	r3, [pc, #140]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c44:	4a23      	ldr	r2, [pc, #140]	; (8093cd4 <WRAPPER_Init+0x108>)
 8093c46:	601a      	str	r2, [r3, #0]
	  + Period = [(TIM7CLK/100) - 1]. to have a (1/100) s time base.
	  + Prescaler = (uwTimclock/100000 - 1) to have a 0.1MHz counter clock.
	  + ClockDivision = 0
	  + Counter direction = Up
	 */
	LegacyTimHandle.Init.Period = (1000000U / 100U) - 1U;
 8093c48:	4b21      	ldr	r3, [pc, #132]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8093c4e:	60da      	str	r2, [r3, #12]
	LegacyTimHandle.Init.Prescaler = uwPrescalerValue*10;
 8093c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8093c52:	4613      	mov	r3, r2
 8093c54:	009b      	lsls	r3, r3, #2
 8093c56:	4413      	add	r3, r2
 8093c58:	005b      	lsls	r3, r3, #1
 8093c5a:	461a      	mov	r2, r3
 8093c5c:	4b1c      	ldr	r3, [pc, #112]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c5e:	605a      	str	r2, [r3, #4]
	LegacyTimHandle.Init.ClockDivision = 0;
 8093c60:	4b1b      	ldr	r3, [pc, #108]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c62:	2200      	movs	r2, #0
 8093c64:	611a      	str	r2, [r3, #16]
	LegacyTimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8093c66:	4b1a      	ldr	r3, [pc, #104]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c68:	2200      	movs	r2, #0
 8093c6a:	609a      	str	r2, [r3, #8]
	LegacyTimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8093c6c:	4b18      	ldr	r3, [pc, #96]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c6e:	2200      	movs	r2, #0
 8093c70:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(&LegacyTimHandle) == HAL_OK)
 8093c72:	4817      	ldr	r0, [pc, #92]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c74:	f7fc ffe9 	bl	8090c4a <HAL_TIM_Base_Init>
 8093c78:	4603      	mov	r3, r0
 8093c7a:	2b00      	cmp	r3, #0
 8093c7c:	d102      	bne.n	8093c84 <WRAPPER_Init+0xb8>
	{
		/* Start the TIM time Base generation with interrupt disabled  */
		HAL_TIM_Base_Start(&LegacyTimHandle);
 8093c7e:	4814      	ldr	r0, [pc, #80]	; (8093cd0 <WRAPPER_Init+0x104>)
 8093c80:	f7fd f818 	bl	8090cb4 <HAL_TIM_Base_Start>
	}

	/* Init du Touchscreen */
	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8093c84:	f7f1 fdf2 	bl	808586c <BSP_LCD_GetXSize>
 8093c88:	4603      	mov	r3, r0
 8093c8a:	b29c      	uxth	r4, r3
 8093c8c:	f7f1 fe02 	bl	8085894 <BSP_LCD_GetYSize>
 8093c90:	4603      	mov	r3, r0
 8093c92:	b29b      	uxth	r3, r3
 8093c94:	4619      	mov	r1, r3
 8093c96:	4620      	mov	r0, r4
 8093c98:	f7f4 ff6e 	bl	8088b78 <BSP_TS_Init>
 8093c9c:	4603      	mov	r3, r0
 8093c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (status != TS_OK) {
 8093ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8093ca6:	2b00      	cmp	r3, #0
 8093ca8:	d000      	beq.n	8093cac <WRAPPER_Init+0xe0>
		while (1);
 8093caa:	e7fe      	b.n	8093caa <WRAPPER_Init+0xde>
	}

	/* Init audio */
	AUDIO_Callback =0x0;
 8093cac:	4b0a      	ldr	r3, [pc, #40]	; (8093cd8 <WRAPPER_Init+0x10c>)
 8093cae:	2200      	movs	r2, #0
 8093cb0:	601a      	str	r2, [r3, #0]
	AUDIO_Init();
 8093cb2:	f000 fcb6 	bl	8094622 <AUDIO_Init>

	/* Init Melody timer */
	MELODY_Init();
 8093cb6:	f000 fe5d 	bl	8094974 <MELODY_Init>

	POT_LastVal=1;
 8093cba:	4b08      	ldr	r3, [pc, #32]	; (8093cdc <WRAPPER_Init+0x110>)
 8093cbc:	2201      	movs	r2, #1
 8093cbe:	701a      	strb	r2, [r3, #0]
}
 8093cc0:	bf00      	nop
 8093cc2:	3734      	adds	r7, #52	; 0x34
 8093cc4:	46bd      	mov	sp, r7
 8093cc6:	bd90      	pop	{r4, r7, pc}
 8093cc8:	40023800 	.word	0x40023800
 8093ccc:	431bde83 	.word	0x431bde83
 8093cd0:	2002ef70 	.word	0x2002ef70
 8093cd4:	40001400 	.word	0x40001400
 8093cd8:	2002efb0 	.word	0x2002efb0
 8093cdc:	2002ef60 	.word	0x2002ef60

08093ce0 <WRAPPER_ColorConvertion_32bpp>:

uint32_t WRAPPER_ColorConvertion_32bpp (COLOR color) {
 8093ce0:	b480      	push	{r7}
 8093ce2:	b085      	sub	sp, #20
 8093ce4:	af00      	add	r7, sp, #0
 8093ce6:	4603      	mov	r3, r0
 8093ce8:	71fb      	strb	r3, [r7, #7]
	uint32_t val;

	if (color == 0xFF) val = 0xFFFFFFFF;
 8093cea:	79fb      	ldrb	r3, [r7, #7]
 8093cec:	2bff      	cmp	r3, #255	; 0xff
 8093cee:	d103      	bne.n	8093cf8 <WRAPPER_ColorConvertion_32bpp+0x18>
 8093cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8093cf4:	60fb      	str	r3, [r7, #12]
 8093cf6:	e00f      	b.n	8093d18 <WRAPPER_ColorConvertion_32bpp+0x38>
	else
	{
		/* Convertion 3:3:2 to 8:8:8:8 */
		val = (uint32_t)0xFF000000 | (((uint32_t)(color&0xE0))<<16) | (((uint32_t)(color&0x1C))<<11) | (((uint32_t)(color&0x03))<<6);
 8093cf8:	79fb      	ldrb	r3, [r7, #7]
 8093cfa:	041b      	lsls	r3, r3, #16
 8093cfc:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8093d00:	79fb      	ldrb	r3, [r7, #7]
 8093d02:	02db      	lsls	r3, r3, #11
 8093d04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8093d08:	431a      	orrs	r2, r3
 8093d0a:	79fb      	ldrb	r3, [r7, #7]
 8093d0c:	019b      	lsls	r3, r3, #6
 8093d0e:	b2db      	uxtb	r3, r3
 8093d10:	4313      	orrs	r3, r2
 8093d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8093d16:	60fb      	str	r3, [r7, #12]
	}

	return val;
 8093d18:	68fb      	ldr	r3, [r7, #12]
}
 8093d1a:	4618      	mov	r0, r3
 8093d1c:	3714      	adds	r7, #20
 8093d1e:	46bd      	mov	sp, r7
 8093d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8093d24:	4770      	bx	lr
	...

08093d28 <WRAPPER_ColorConvertion_16bpp>:

uint16_t WRAPPER_ColorConvertion_16bpp (COLOR color) {
 8093d28:	b480      	push	{r7}
 8093d2a:	b085      	sub	sp, #20
 8093d2c:	af00      	add	r7, sp, #0
 8093d2e:	4603      	mov	r3, r0
 8093d30:	71fb      	strb	r3, [r7, #7]
	uint16_t val;

	if (color == 0xFF) val = 0xFFFF;
 8093d32:	79fb      	ldrb	r3, [r7, #7]
 8093d34:	2bff      	cmp	r3, #255	; 0xff
 8093d36:	d103      	bne.n	8093d40 <WRAPPER_ColorConvertion_16bpp+0x18>
 8093d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8093d3c:	81fb      	strh	r3, [r7, #14]
 8093d3e:	e016      	b.n	8093d6e <WRAPPER_ColorConvertion_16bpp+0x46>
	else
	{
		/* Convertion 3:3:2 to 5:6:5 */
		val = (((uint16_t)(color&0xE0))<<8) | (((uint16_t)(color&0x1C))<<6) | (((uint16_t)(color&0x03))<<3);
 8093d40:	79fb      	ldrb	r3, [r7, #7]
 8093d42:	021b      	lsls	r3, r3, #8
 8093d44:	b21a      	sxth	r2, r3
 8093d46:	4b0d      	ldr	r3, [pc, #52]	; (8093d7c <WRAPPER_ColorConvertion_16bpp+0x54>)
 8093d48:	4013      	ands	r3, r2
 8093d4a:	b21a      	sxth	r2, r3
 8093d4c:	79fb      	ldrb	r3, [r7, #7]
 8093d4e:	019b      	lsls	r3, r3, #6
 8093d50:	b21b      	sxth	r3, r3
 8093d52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8093d56:	b21b      	sxth	r3, r3
 8093d58:	4313      	orrs	r3, r2
 8093d5a:	b21a      	sxth	r2, r3
 8093d5c:	79fb      	ldrb	r3, [r7, #7]
 8093d5e:	00db      	lsls	r3, r3, #3
 8093d60:	b21b      	sxth	r3, r3
 8093d62:	f003 0318 	and.w	r3, r3, #24
 8093d66:	b21b      	sxth	r3, r3
 8093d68:	4313      	orrs	r3, r2
 8093d6a:	b21b      	sxth	r3, r3
 8093d6c:	81fb      	strh	r3, [r7, #14]
	}

	return val;
 8093d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8093d70:	4618      	mov	r0, r3
 8093d72:	3714      	adds	r7, #20
 8093d74:	46bd      	mov	sp, r7
 8093d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8093d7a:	4770      	bx	lr
 8093d7c:	ffffe000 	.word	0xffffe000

08093d80 <Delay>:

// Basic OS services
// void API_InvalidFunction(void)
// Already defined in abi-table.c

void Delay(volatile uint32_t nTime) {
 8093d80:	b580      	push	{r7, lr}
 8093d82:	b082      	sub	sp, #8
 8093d84:	af00      	add	r7, sp, #0
 8093d86:	6078      	str	r0, [r7, #4]
	HAL_Delay(nTime);
 8093d88:	687b      	ldr	r3, [r7, #4]
 8093d8a:	4618      	mov	r0, r3
 8093d8c:	f7f5 f9f4 	bl	8089178 <HAL_Delay>
}
 8093d90:	bf00      	nop
 8093d92:	3708      	adds	r7, #8
 8093d94:	46bd      	mov	sp, r7
 8093d96:	bd80      	pop	{r7, pc}

08093d98 <GLCD_Clear>:

void GLCD_Clear (COLOR color) {
 8093d98:	b580      	push	{r7, lr}
 8093d9a:	b084      	sub	sp, #16
 8093d9c:	af00      	add	r7, sp, #0
 8093d9e:	4603      	mov	r3, r0
 8093da0:	71fb      	strb	r3, [r7, #7]
	uint32_t color_save;

	/* sauvegarde la couleur en cours: GLCD_Clear ne modifie pas la couleur de premier plan */
	color_save=BSP_LCD_GetTextColor();
 8093da2:	f7f1 fe27 	bl	80859f4 <BSP_LCD_GetTextColor>
 8093da6:	60f8      	str	r0, [r7, #12]

	BSP_LCD_SetTextColor(WRAPPER_ColorConvertion_32bpp(color));
 8093da8:	79fb      	ldrb	r3, [r7, #7]
 8093daa:	4618      	mov	r0, r3
 8093dac:	f7ff ff98 	bl	8093ce0 <WRAPPER_ColorConvertion_32bpp>
 8093db0:	4603      	mov	r3, r0
 8093db2:	4618      	mov	r0, r3
 8093db4:	f7f1 fe06 	bl	80859c4 <BSP_LCD_SetTextColor>
	GLCD_DrawFillRectangle (0, 0, 320-1, 240-1);
 8093db8:	23ef      	movs	r3, #239	; 0xef
 8093dba:	f240 123f 	movw	r2, #319	; 0x13f
 8093dbe:	2100      	movs	r1, #0
 8093dc0:	2000      	movs	r0, #0
 8093dc2:	f000 f92a 	bl	809401a <GLCD_DrawFillRectangle>

	/* Restaure la couleur de premier plan */
	BSP_LCD_SetTextColor(color_save);
 8093dc6:	68f8      	ldr	r0, [r7, #12]
 8093dc8:	f7f1 fdfc 	bl	80859c4 <BSP_LCD_SetTextColor>
}
 8093dcc:	bf00      	nop
 8093dce:	3710      	adds	r7, #16
 8093dd0:	46bd      	mov	sp, r7
 8093dd2:	bd80      	pop	{r7, pc}

08093dd4 <GLCD_SetTextColor>:

void GLCD_SetTextColor (COLOR color) {
 8093dd4:	b580      	push	{r7, lr}
 8093dd6:	b082      	sub	sp, #8
 8093dd8:	af00      	add	r7, sp, #0
 8093dda:	4603      	mov	r3, r0
 8093ddc:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_SetTextColor(WRAPPER_ColorConvertion_32bpp(color));
 8093dde:	79fb      	ldrb	r3, [r7, #7]
 8093de0:	4618      	mov	r0, r3
 8093de2:	f7ff ff7d 	bl	8093ce0 <WRAPPER_ColorConvertion_32bpp>
 8093de6:	4603      	mov	r3, r0
 8093de8:	4618      	mov	r0, r3
 8093dea:	f7f1 fdeb 	bl	80859c4 <BSP_LCD_SetTextColor>
}
 8093dee:	bf00      	nop
 8093df0:	3708      	adds	r7, #8
 8093df2:	46bd      	mov	sp, r7
 8093df4:	bd80      	pop	{r7, pc}

08093df6 <GLCD_SetBackColor>:

void GLCD_SetBackColor (COLOR color) {
 8093df6:	b580      	push	{r7, lr}
 8093df8:	b082      	sub	sp, #8
 8093dfa:	af00      	add	r7, sp, #0
 8093dfc:	4603      	mov	r3, r0
 8093dfe:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_SetBackColor(WRAPPER_ColorConvertion_32bpp(color));
 8093e00:	79fb      	ldrb	r3, [r7, #7]
 8093e02:	4618      	mov	r0, r3
 8093e04:	f7ff ff6c 	bl	8093ce0 <WRAPPER_ColorConvertion_32bpp>
 8093e08:	4603      	mov	r3, r0
 8093e0a:	4618      	mov	r0, r3
 8093e0c:	f7f1 fe06 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 8093e10:	bf00      	nop
 8093e12:	3708      	adds	r7, #8
 8093e14:	46bd      	mov	sp, r7
 8093e16:	bd80      	pop	{r7, pc}

08093e18 <GLCD_PutPixel>:

void GLCD_PutPixel (uint32_t x, uint32_t y, COLOR color) {
 8093e18:	b5b0      	push	{r4, r5, r7, lr}
 8093e1a:	b084      	sub	sp, #16
 8093e1c:	af00      	add	r7, sp, #0
 8093e1e:	60f8      	str	r0, [r7, #12]
 8093e20:	60b9      	str	r1, [r7, #8]
 8093e22:	4613      	mov	r3, r2
 8093e24:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_DrawPixel(HORIZONTAL_COORD_CONVERSION(x),VERTICAL_COORD_CONVERSION(y),WRAPPER_ColorConvertion_16bpp(color));
 8093e26:	68fb      	ldr	r3, [r7, #12]
 8093e28:	b29b      	uxth	r3, r3
 8093e2a:	3350      	adds	r3, #80	; 0x50
 8093e2c:	b29c      	uxth	r4, r3
 8093e2e:	68bb      	ldr	r3, [r7, #8]
 8093e30:	b29b      	uxth	r3, r3
 8093e32:	3310      	adds	r3, #16
 8093e34:	b29d      	uxth	r5, r3
 8093e36:	79fb      	ldrb	r3, [r7, #7]
 8093e38:	4618      	mov	r0, r3
 8093e3a:	f7ff ff75 	bl	8093d28 <WRAPPER_ColorConvertion_16bpp>
 8093e3e:	4603      	mov	r3, r0
 8093e40:	461a      	mov	r2, r3
 8093e42:	4629      	mov	r1, r5
 8093e44:	4620      	mov	r0, r4
 8093e46:	f7f2 fb99 	bl	808657c <BSP_LCD_DrawPixel>
}
 8093e4a:	bf00      	nop
 8093e4c:	3710      	adds	r7, #16
 8093e4e:	46bd      	mov	sp, r7
 8093e50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08093e54 <GLCD_DrawChar>:

void GLCD_DrawChar (uint32_t x,  uint32_t y, uint8_t c) {
 8093e54:	b580      	push	{r7, lr}
 8093e56:	b088      	sub	sp, #32
 8093e58:	af00      	add	r7, sp, #0
 8093e5a:	60f8      	str	r0, [r7, #12]
 8093e5c:	60b9      	str	r1, [r7, #8]
 8093e5e:	4613      	mov	r3, r2
 8093e60:	71fb      	strb	r3, [r7, #7]
	uint8_t str[2] = {c, 0};
 8093e62:	79fb      	ldrb	r3, [r7, #7]
 8093e64:	753b      	strb	r3, [r7, #20]
 8093e66:	2300      	movs	r3, #0
 8093e68:	757b      	strb	r3, [r7, #21]
	uint32_t col,row;

	if (x>((320/8)-1)) x= ((320/8)-1);
 8093e6a:	68fb      	ldr	r3, [r7, #12]
 8093e6c:	2b27      	cmp	r3, #39	; 0x27
 8093e6e:	d901      	bls.n	8093e74 <GLCD_DrawChar+0x20>
 8093e70:	2327      	movs	r3, #39	; 0x27
 8093e72:	60fb      	str	r3, [r7, #12]
	if (y>((240/16)-1)) y= ((240/16)-1);
 8093e74:	68bb      	ldr	r3, [r7, #8]
 8093e76:	2b0e      	cmp	r3, #14
 8093e78:	d901      	bls.n	8093e7e <GLCD_DrawChar+0x2a>
 8093e7a:	230e      	movs	r3, #14
 8093e7c:	60bb      	str	r3, [r7, #8]

	col = x*8;
 8093e7e:	68fb      	ldr	r3, [r7, #12]
 8093e80:	00db      	lsls	r3, r3, #3
 8093e82:	61fb      	str	r3, [r7, #28]
	row = (y*16)-1;
 8093e84:	68bb      	ldr	r3, [r7, #8]
 8093e86:	011b      	lsls	r3, r3, #4
 8093e88:	3b01      	subs	r3, #1
 8093e8a:	61bb      	str	r3, [r7, #24]

	BSP_LCD_SetFont(&FontLegacy);
 8093e8c:	4809      	ldr	r0, [pc, #36]	; (8093eb4 <GLCD_DrawChar+0x60>)
 8093e8e:	f7f1 fddf 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(HORIZONTAL_COORD_CONVERSION(col),VERTICAL_COORD_CONVERSION(row), (uint8_t *)str, LEFT_MODE);
 8093e92:	69fb      	ldr	r3, [r7, #28]
 8093e94:	b29b      	uxth	r3, r3
 8093e96:	3350      	adds	r3, #80	; 0x50
 8093e98:	b298      	uxth	r0, r3
 8093e9a:	69bb      	ldr	r3, [r7, #24]
 8093e9c:	b29b      	uxth	r3, r3
 8093e9e:	3310      	adds	r3, #16
 8093ea0:	b299      	uxth	r1, r3
 8093ea2:	f107 0214 	add.w	r2, r7, #20
 8093ea6:	2303      	movs	r3, #3
 8093ea8:	f7f1 fe80 	bl	8085bac <BSP_LCD_DisplayStringAt>
}
 8093eac:	bf00      	nop
 8093eae:	3720      	adds	r7, #32
 8093eb0:	46bd      	mov	sp, r7
 8093eb2:	bd80      	pop	{r7, pc}
 8093eb4:	2000b34c 	.word	0x2000b34c

08093eb8 <GLCD_DrawString>:

void GLCD_DrawString (uint32_t x,  uint32_t y, const char *str) {
 8093eb8:	b580      	push	{r7, lr}
 8093eba:	b086      	sub	sp, #24
 8093ebc:	af00      	add	r7, sp, #0
 8093ebe:	60f8      	str	r0, [r7, #12]
 8093ec0:	60b9      	str	r1, [r7, #8]
 8093ec2:	607a      	str	r2, [r7, #4]
	uint32_t col,row;

	if (x>((320/8)-1)) x= ((320/8)-1);
 8093ec4:	68fb      	ldr	r3, [r7, #12]
 8093ec6:	2b27      	cmp	r3, #39	; 0x27
 8093ec8:	d901      	bls.n	8093ece <GLCD_DrawString+0x16>
 8093eca:	2327      	movs	r3, #39	; 0x27
 8093ecc:	60fb      	str	r3, [r7, #12]
	if (y>((240/16)-1)) y= ((240/16)-1);
 8093ece:	68bb      	ldr	r3, [r7, #8]
 8093ed0:	2b0e      	cmp	r3, #14
 8093ed2:	d901      	bls.n	8093ed8 <GLCD_DrawString+0x20>
 8093ed4:	230e      	movs	r3, #14
 8093ed6:	60bb      	str	r3, [r7, #8]
	col = x*8;
 8093ed8:	68fb      	ldr	r3, [r7, #12]
 8093eda:	00db      	lsls	r3, r3, #3
 8093edc:	617b      	str	r3, [r7, #20]
	row = (y*16)-1;
 8093ede:	68bb      	ldr	r3, [r7, #8]
 8093ee0:	011b      	lsls	r3, r3, #4
 8093ee2:	3b01      	subs	r3, #1
 8093ee4:	613b      	str	r3, [r7, #16]

	BSP_LCD_SetFont(&FontLegacy);
 8093ee6:	4809      	ldr	r0, [pc, #36]	; (8093f0c <GLCD_DrawString+0x54>)
 8093ee8:	f7f1 fdb2 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(HORIZONTAL_COORD_CONVERSION(col),VERTICAL_COORD_CONVERSION(row), (uint8_t *)str, LEFT_MODE);
 8093eec:	697b      	ldr	r3, [r7, #20]
 8093eee:	b29b      	uxth	r3, r3
 8093ef0:	3350      	adds	r3, #80	; 0x50
 8093ef2:	b298      	uxth	r0, r3
 8093ef4:	693b      	ldr	r3, [r7, #16]
 8093ef6:	b29b      	uxth	r3, r3
 8093ef8:	3310      	adds	r3, #16
 8093efa:	b299      	uxth	r1, r3
 8093efc:	2303      	movs	r3, #3
 8093efe:	687a      	ldr	r2, [r7, #4]
 8093f00:	f7f1 fe54 	bl	8085bac <BSP_LCD_DisplayStringAt>
}
 8093f04:	bf00      	nop
 8093f06:	3718      	adds	r7, #24
 8093f08:	46bd      	mov	sp, r7
 8093f0a:	bd80      	pop	{r7, pc}
 8093f0c:	2000b34c 	.word	0x2000b34c

08093f10 <GLCD_DrawADAString>:

void GLCD_DrawADAString (uint32_t x, uint32_t y, uint32_t len, const char *str) {
 8093f10:	b5b0      	push	{r4, r5, r7, lr}
 8093f12:	b086      	sub	sp, #24
 8093f14:	af00      	add	r7, sp, #0
 8093f16:	60f8      	str	r0, [r7, #12]
 8093f18:	60b9      	str	r1, [r7, #8]
 8093f1a:	607a      	str	r2, [r7, #4]
 8093f1c:	603b      	str	r3, [r7, #0]
 8093f1e:	466b      	mov	r3, sp
 8093f20:	461d      	mov	r5, r3
	uint8_t buf[len+1];
 8093f22:	687b      	ldr	r3, [r7, #4]
 8093f24:	1c58      	adds	r0, r3, #1
 8093f26:	4603      	mov	r3, r0
 8093f28:	3b01      	subs	r3, #1
 8093f2a:	617b      	str	r3, [r7, #20]
 8093f2c:	4601      	mov	r1, r0
 8093f2e:	f04f 0200 	mov.w	r2, #0
 8093f32:	f04f 0300 	mov.w	r3, #0
 8093f36:	f04f 0400 	mov.w	r4, #0
 8093f3a:	00d4      	lsls	r4, r2, #3
 8093f3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8093f40:	00cb      	lsls	r3, r1, #3
 8093f42:	4601      	mov	r1, r0
 8093f44:	f04f 0200 	mov.w	r2, #0
 8093f48:	f04f 0300 	mov.w	r3, #0
 8093f4c:	f04f 0400 	mov.w	r4, #0
 8093f50:	00d4      	lsls	r4, r2, #3
 8093f52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8093f56:	00cb      	lsls	r3, r1, #3
 8093f58:	1dc3      	adds	r3, r0, #7
 8093f5a:	08db      	lsrs	r3, r3, #3
 8093f5c:	00db      	lsls	r3, r3, #3
 8093f5e:	ebad 0d03 	sub.w	sp, sp, r3
 8093f62:	466b      	mov	r3, sp
 8093f64:	3300      	adds	r3, #0
 8093f66:	613b      	str	r3, [r7, #16]
	memcpy(buf,str,len);
 8093f68:	693b      	ldr	r3, [r7, #16]
 8093f6a:	687a      	ldr	r2, [r7, #4]
 8093f6c:	6839      	ldr	r1, [r7, #0]
 8093f6e:	4618      	mov	r0, r3
 8093f70:	f007 ff48 	bl	809be04 <memcpy>
	buf[len]=0;
 8093f74:	693a      	ldr	r2, [r7, #16]
 8093f76:	687b      	ldr	r3, [r7, #4]
 8093f78:	4413      	add	r3, r2
 8093f7a:	2200      	movs	r2, #0
 8093f7c:	701a      	strb	r2, [r3, #0]

	GLCD_DrawString (x,  y, (const char*)buf);
 8093f7e:	693b      	ldr	r3, [r7, #16]
 8093f80:	461a      	mov	r2, r3
 8093f82:	68b9      	ldr	r1, [r7, #8]
 8093f84:	68f8      	ldr	r0, [r7, #12]
 8093f86:	f7ff ff97 	bl	8093eb8 <GLCD_DrawString>
 8093f8a:	46ad      	mov	sp, r5
}
 8093f8c:	bf00      	nop
 8093f8e:	3718      	adds	r7, #24
 8093f90:	46bd      	mov	sp, r7
 8093f92:	bdb0      	pop	{r4, r5, r7, pc}

08093f94 <GLCD_DrawLine>:

void GLCD_DrawLine (uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2) {
 8093f94:	b580      	push	{r7, lr}
 8093f96:	b084      	sub	sp, #16
 8093f98:	af00      	add	r7, sp, #0
 8093f9a:	60f8      	str	r0, [r7, #12]
 8093f9c:	60b9      	str	r1, [r7, #8]
 8093f9e:	607a      	str	r2, [r7, #4]
 8093fa0:	603b      	str	r3, [r7, #0]
	BSP_LCD_DrawLine(HORIZONTAL_COORD_CONVERSION(x1),VERTICAL_COORD_CONVERSION(y1),HORIZONTAL_COORD_CONVERSION(x2),VERTICAL_COORD_CONVERSION(y2));
 8093fa2:	68fb      	ldr	r3, [r7, #12]
 8093fa4:	b29b      	uxth	r3, r3
 8093fa6:	3350      	adds	r3, #80	; 0x50
 8093fa8:	b298      	uxth	r0, r3
 8093faa:	68bb      	ldr	r3, [r7, #8]
 8093fac:	b29b      	uxth	r3, r3
 8093fae:	3310      	adds	r3, #16
 8093fb0:	b299      	uxth	r1, r3
 8093fb2:	687b      	ldr	r3, [r7, #4]
 8093fb4:	b29b      	uxth	r3, r3
 8093fb6:	3350      	adds	r3, #80	; 0x50
 8093fb8:	b29a      	uxth	r2, r3
 8093fba:	683b      	ldr	r3, [r7, #0]
 8093fbc:	b29b      	uxth	r3, r3
 8093fbe:	3310      	adds	r3, #16
 8093fc0:	b29b      	uxth	r3, r3
 8093fc2:	f7f1 ffa7 	bl	8085f14 <BSP_LCD_DrawLine>
}
 8093fc6:	bf00      	nop
 8093fc8:	3710      	adds	r7, #16
 8093fca:	46bd      	mov	sp, r7
 8093fcc:	bd80      	pop	{r7, pc}

08093fce <GLCD_DrawRectangle>:

void GLCD_DrawRectangle (uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2) {
 8093fce:	b590      	push	{r4, r7, lr}
 8093fd0:	b085      	sub	sp, #20
 8093fd2:	af00      	add	r7, sp, #0
 8093fd4:	60f8      	str	r0, [r7, #12]
 8093fd6:	60b9      	str	r1, [r7, #8]
 8093fd8:	607a      	str	r2, [r7, #4]
 8093fda:	603b      	str	r3, [r7, #0]
	BSP_LCD_DrawRect(HORIZONTAL_COORD_CONVERSION(x1),VERTICAL_COORD_CONVERSION(y1), ABS(x2-x1)+1, ABS(y2-y1)+1);
 8093fdc:	68fb      	ldr	r3, [r7, #12]
 8093fde:	b29b      	uxth	r3, r3
 8093fe0:	3350      	adds	r3, #80	; 0x50
 8093fe2:	b298      	uxth	r0, r3
 8093fe4:	68bb      	ldr	r3, [r7, #8]
 8093fe6:	b29b      	uxth	r3, r3
 8093fe8:	3310      	adds	r3, #16
 8093fea:	b299      	uxth	r1, r3
 8093fec:	687b      	ldr	r3, [r7, #4]
 8093fee:	b29a      	uxth	r2, r3
 8093ff0:	68fb      	ldr	r3, [r7, #12]
 8093ff2:	b29b      	uxth	r3, r3
 8093ff4:	1ad3      	subs	r3, r2, r3
 8093ff6:	b29b      	uxth	r3, r3
 8093ff8:	3301      	adds	r3, #1
 8093ffa:	b29c      	uxth	r4, r3
 8093ffc:	683b      	ldr	r3, [r7, #0]
 8093ffe:	b29a      	uxth	r2, r3
 8094000:	68bb      	ldr	r3, [r7, #8]
 8094002:	b29b      	uxth	r3, r3
 8094004:	1ad3      	subs	r3, r2, r3
 8094006:	b29b      	uxth	r3, r3
 8094008:	3301      	adds	r3, #1
 809400a:	b29b      	uxth	r3, r3
 809400c:	4622      	mov	r2, r4
 809400e:	f7f2 f84d 	bl	80860ac <BSP_LCD_DrawRect>
}
 8094012:	bf00      	nop
 8094014:	3714      	adds	r7, #20
 8094016:	46bd      	mov	sp, r7
 8094018:	bd90      	pop	{r4, r7, pc}

0809401a <GLCD_DrawFillRectangle>:

void GLCD_DrawFillRectangle (uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2) {
 809401a:	b590      	push	{r4, r7, lr}
 809401c:	b085      	sub	sp, #20
 809401e:	af00      	add	r7, sp, #0
 8094020:	60f8      	str	r0, [r7, #12]
 8094022:	60b9      	str	r1, [r7, #8]
 8094024:	607a      	str	r2, [r7, #4]
 8094026:	603b      	str	r3, [r7, #0]
	BSP_LCD_FillRect(HORIZONTAL_COORD_CONVERSION(x1),VERTICAL_COORD_CONVERSION(y1), ABS(x2-x1)+1, ABS(y2-y1)+1);
 8094028:	68fb      	ldr	r3, [r7, #12]
 809402a:	b29b      	uxth	r3, r3
 809402c:	3350      	adds	r3, #80	; 0x50
 809402e:	b298      	uxth	r0, r3
 8094030:	68bb      	ldr	r3, [r7, #8]
 8094032:	b29b      	uxth	r3, r3
 8094034:	3310      	adds	r3, #16
 8094036:	b299      	uxth	r1, r3
 8094038:	687b      	ldr	r3, [r7, #4]
 809403a:	b29a      	uxth	r2, r3
 809403c:	68fb      	ldr	r3, [r7, #12]
 809403e:	b29b      	uxth	r3, r3
 8094040:	1ad3      	subs	r3, r2, r3
 8094042:	b29b      	uxth	r3, r3
 8094044:	3301      	adds	r3, #1
 8094046:	b29c      	uxth	r4, r3
 8094048:	683b      	ldr	r3, [r7, #0]
 809404a:	b29a      	uxth	r2, r3
 809404c:	68bb      	ldr	r3, [r7, #8]
 809404e:	b29b      	uxth	r3, r3
 8094050:	1ad3      	subs	r3, r2, r3
 8094052:	b29b      	uxth	r3, r3
 8094054:	3301      	adds	r3, #1
 8094056:	b29b      	uxth	r3, r3
 8094058:	4622      	mov	r2, r4
 809405a:	f7f2 fbb9 	bl	80867d0 <BSP_LCD_FillRect>
}
 809405e:	bf00      	nop
 8094060:	3714      	adds	r7, #20
 8094062:	46bd      	mov	sp, r7
 8094064:	bd90      	pop	{r4, r7, pc}

08094066 <GLCD_DrawCircle>:

void GLCD_DrawCircle (uint32_t x, uint32_t y, uint32_t radius) {
 8094066:	b580      	push	{r7, lr}
 8094068:	b084      	sub	sp, #16
 809406a:	af00      	add	r7, sp, #0
 809406c:	60f8      	str	r0, [r7, #12]
 809406e:	60b9      	str	r1, [r7, #8]
 8094070:	607a      	str	r2, [r7, #4]
	BSP_LCD_DrawCircle(HORIZONTAL_COORD_CONVERSION(x),VERTICAL_COORD_CONVERSION(y), radius);
 8094072:	68fb      	ldr	r3, [r7, #12]
 8094074:	b29b      	uxth	r3, r3
 8094076:	3350      	adds	r3, #80	; 0x50
 8094078:	b298      	uxth	r0, r3
 809407a:	68bb      	ldr	r3, [r7, #8]
 809407c:	b29b      	uxth	r3, r3
 809407e:	3310      	adds	r3, #16
 8094080:	b29b      	uxth	r3, r3
 8094082:	687a      	ldr	r2, [r7, #4]
 8094084:	b292      	uxth	r2, r2
 8094086:	4619      	mov	r1, r3
 8094088:	f7f2 f842 	bl	8086110 <BSP_LCD_DrawCircle>
}
 809408c:	bf00      	nop
 809408e:	3710      	adds	r7, #16
 8094090:	46bd      	mov	sp, r7
 8094092:	bd80      	pop	{r7, pc}

08094094 <GLCD_DrawFillCircle>:

void GLCD_DrawFillCircle (uint32_t x, uint32_t y, uint32_t radius) {
 8094094:	b580      	push	{r7, lr}
 8094096:	b084      	sub	sp, #16
 8094098:	af00      	add	r7, sp, #0
 809409a:	60f8      	str	r0, [r7, #12]
 809409c:	60b9      	str	r1, [r7, #8]
 809409e:	607a      	str	r2, [r7, #4]
	BSP_LCD_FillCircle(HORIZONTAL_COORD_CONVERSION(x),VERTICAL_COORD_CONVERSION(y), radius);
 80940a0:	68fb      	ldr	r3, [r7, #12]
 80940a2:	b29b      	uxth	r3, r3
 80940a4:	3350      	adds	r3, #80	; 0x50
 80940a6:	b298      	uxth	r0, r3
 80940a8:	68bb      	ldr	r3, [r7, #8]
 80940aa:	b29b      	uxth	r3, r3
 80940ac:	3310      	adds	r3, #16
 80940ae:	b29b      	uxth	r3, r3
 80940b0:	687a      	ldr	r2, [r7, #4]
 80940b2:	b292      	uxth	r2, r2
 80940b4:	4619      	mov	r1, r3
 80940b6:	f7f2 fc15 	bl	80868e4 <BSP_LCD_FillCircle>
}
 80940ba:	bf00      	nop
 80940bc:	3710      	adds	r7, #16
 80940be:	46bd      	mov	sp, r7
 80940c0:	bd80      	pop	{r7, pc}

080940c2 <GLCD_DrawImage>:

void GLCD_DrawImage (COLOR* data, uint32_t x, uint32_t y, uint32_t w, int32_t h) {
 80940c2:	b580      	push	{r7, lr}
 80940c4:	b086      	sub	sp, #24
 80940c6:	af00      	add	r7, sp, #0
 80940c8:	60f8      	str	r0, [r7, #12]
 80940ca:	60b9      	str	r1, [r7, #8]
 80940cc:	607a      	str	r2, [r7, #4]
 80940ce:	603b      	str	r3, [r7, #0]
	uint32_t counter_x, counter_y=0;
 80940d0:	2300      	movs	r3, #0
 80940d2:	613b      	str	r3, [r7, #16]

	for (counter_y=0; counter_y<h; counter_y++)
 80940d4:	2300      	movs	r3, #0
 80940d6:	613b      	str	r3, [r7, #16]
 80940d8:	e01e      	b.n	8094118 <GLCD_DrawImage+0x56>
	{
		for (counter_x=0; counter_x<w; counter_x++)
 80940da:	2300      	movs	r3, #0
 80940dc:	617b      	str	r3, [r7, #20]
 80940de:	e014      	b.n	809410a <GLCD_DrawImage+0x48>
		{
			GLCD_PutPixel(x+counter_x, y+counter_y, data[(counter_y*w)+counter_x]);
 80940e0:	68ba      	ldr	r2, [r7, #8]
 80940e2:	697b      	ldr	r3, [r7, #20]
 80940e4:	18d0      	adds	r0, r2, r3
 80940e6:	687a      	ldr	r2, [r7, #4]
 80940e8:	693b      	ldr	r3, [r7, #16]
 80940ea:	18d1      	adds	r1, r2, r3
 80940ec:	693b      	ldr	r3, [r7, #16]
 80940ee:	683a      	ldr	r2, [r7, #0]
 80940f0:	fb02 f203 	mul.w	r2, r2, r3
 80940f4:	697b      	ldr	r3, [r7, #20]
 80940f6:	4413      	add	r3, r2
 80940f8:	68fa      	ldr	r2, [r7, #12]
 80940fa:	4413      	add	r3, r2
 80940fc:	781b      	ldrb	r3, [r3, #0]
 80940fe:	461a      	mov	r2, r3
 8094100:	f7ff fe8a 	bl	8093e18 <GLCD_PutPixel>
		for (counter_x=0; counter_x<w; counter_x++)
 8094104:	697b      	ldr	r3, [r7, #20]
 8094106:	3301      	adds	r3, #1
 8094108:	617b      	str	r3, [r7, #20]
 809410a:	697a      	ldr	r2, [r7, #20]
 809410c:	683b      	ldr	r3, [r7, #0]
 809410e:	429a      	cmp	r2, r3
 8094110:	d3e6      	bcc.n	80940e0 <GLCD_DrawImage+0x1e>
	for (counter_y=0; counter_y<h; counter_y++)
 8094112:	693b      	ldr	r3, [r7, #16]
 8094114:	3301      	adds	r3, #1
 8094116:	613b      	str	r3, [r7, #16]
 8094118:	6a3b      	ldr	r3, [r7, #32]
 809411a:	693a      	ldr	r2, [r7, #16]
 809411c:	429a      	cmp	r2, r3
 809411e:	d3dc      	bcc.n	80940da <GLCD_DrawImage+0x18>
		}
	}
}
 8094120:	bf00      	nop
 8094122:	3718      	adds	r7, #24
 8094124:	46bd      	mov	sp, r7
 8094126:	bd80      	pop	{r7, pc}

08094128 <GLCD_DrawImagefromSRAM>:

// Second set of function for GLCD
void GLCD_DrawImagefromSRAM (uint32_t SRAM_Ptr, uint32_t x, uint32_t y, uint32_t w, int32_t h) {
 8094128:	b5b0      	push	{r4, r5, r7, lr}
 809412a:	b086      	sub	sp, #24
 809412c:	af00      	add	r7, sp, #0
 809412e:	60f8      	str	r0, [r7, #12]
 8094130:	60b9      	str	r1, [r7, #8]
 8094132:	607a      	str	r2, [r7, #4]
 8094134:	603b      	str	r3, [r7, #0]
	uint32_t counter_x, counter_y=0;
 8094136:	2300      	movs	r3, #0
 8094138:	613b      	str	r3, [r7, #16]

	for (counter_y=0; counter_y<h; counter_y++)
 809413a:	2300      	movs	r3, #0
 809413c:	613b      	str	r3, [r7, #16]
 809413e:	e023      	b.n	8094188 <GLCD_DrawImagefromSRAM+0x60>
	{
		for (counter_x=0; counter_x<w; counter_x++)
 8094140:	2300      	movs	r3, #0
 8094142:	617b      	str	r3, [r7, #20]
 8094144:	e019      	b.n	809417a <GLCD_DrawImagefromSRAM+0x52>
		{
			GLCD_PutPixel(x+counter_x, y+counter_y, (COLOR)SRAM_ReadByte(SRAM_Ptr + (counter_y*w) + counter_x));
 8094146:	68ba      	ldr	r2, [r7, #8]
 8094148:	697b      	ldr	r3, [r7, #20]
 809414a:	18d4      	adds	r4, r2, r3
 809414c:	687a      	ldr	r2, [r7, #4]
 809414e:	693b      	ldr	r3, [r7, #16]
 8094150:	18d5      	adds	r5, r2, r3
 8094152:	693b      	ldr	r3, [r7, #16]
 8094154:	683a      	ldr	r2, [r7, #0]
 8094156:	fb02 f203 	mul.w	r2, r2, r3
 809415a:	68fb      	ldr	r3, [r7, #12]
 809415c:	441a      	add	r2, r3
 809415e:	697b      	ldr	r3, [r7, #20]
 8094160:	4413      	add	r3, r2
 8094162:	4618      	mov	r0, r3
 8094164:	f000 fb40 	bl	80947e8 <SRAM_ReadByte>
 8094168:	4603      	mov	r3, r0
 809416a:	461a      	mov	r2, r3
 809416c:	4629      	mov	r1, r5
 809416e:	4620      	mov	r0, r4
 8094170:	f7ff fe52 	bl	8093e18 <GLCD_PutPixel>
		for (counter_x=0; counter_x<w; counter_x++)
 8094174:	697b      	ldr	r3, [r7, #20]
 8094176:	3301      	adds	r3, #1
 8094178:	617b      	str	r3, [r7, #20]
 809417a:	697a      	ldr	r2, [r7, #20]
 809417c:	683b      	ldr	r3, [r7, #0]
 809417e:	429a      	cmp	r2, r3
 8094180:	d3e1      	bcc.n	8094146 <GLCD_DrawImagefromSRAM+0x1e>
	for (counter_y=0; counter_y<h; counter_y++)
 8094182:	693b      	ldr	r3, [r7, #16]
 8094184:	3301      	adds	r3, #1
 8094186:	613b      	str	r3, [r7, #16]
 8094188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 809418a:	693a      	ldr	r2, [r7, #16]
 809418c:	429a      	cmp	r2, r3
 809418e:	d3d7      	bcc.n	8094140 <GLCD_DrawImagefromSRAM+0x18>
		}
	}
}
 8094190:	bf00      	nop
 8094192:	3718      	adds	r7, #24
 8094194:	46bd      	mov	sp, r7
 8094196:	bdb0      	pop	{r4, r5, r7, pc}

08094198 <GLCD_LayerScrollMode>:

void GLCD_LayerScrollMode(uint8_t mode) {
 8094198:	b480      	push	{r7}
 809419a:	b083      	sub	sp, #12
 809419c:	af00      	add	r7, sp, #0
 809419e:	4603      	mov	r3, r0
 80941a0:	71fb      	strb	r3, [r7, #7]
	//
}
 80941a2:	bf00      	nop
 80941a4:	370c      	adds	r7, #12
 80941a6:	46bd      	mov	sp, r7
 80941a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80941ac:	4770      	bx	lr

080941ae <GLCD_SetScrollWindow>:

void GLCD_SetScrollWindow (uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
 80941ae:	b480      	push	{r7}
 80941b0:	b085      	sub	sp, #20
 80941b2:	af00      	add	r7, sp, #0
 80941b4:	60f8      	str	r0, [r7, #12]
 80941b6:	60b9      	str	r1, [r7, #8]
 80941b8:	607a      	str	r2, [r7, #4]
 80941ba:	603b      	str	r3, [r7, #0]
	//
}
 80941bc:	bf00      	nop
 80941be:	3714      	adds	r7, #20
 80941c0:	46bd      	mov	sp, r7
 80941c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80941c6:	4770      	bx	lr

080941c8 <GLCD_ScrollVertical>:

void GLCD_ScrollVertical (uint32_t dy) {
 80941c8:	b480      	push	{r7}
 80941ca:	b083      	sub	sp, #12
 80941cc:	af00      	add	r7, sp, #0
 80941ce:	6078      	str	r0, [r7, #4]
	//
}
 80941d0:	bf00      	nop
 80941d2:	370c      	adds	r7, #12
 80941d4:	46bd      	mov	sp, r7
 80941d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80941da:	4770      	bx	lr

080941dc <GLCD_ScrollHorizontal>:

void GLCD_ScrollHorizontal (uint32_t dy) {
 80941dc:	b480      	push	{r7}
 80941de:	b083      	sub	sp, #12
 80941e0:	af00      	add	r7, sp, #0
 80941e2:	6078      	str	r0, [r7, #4]
	//
}
 80941e4:	bf00      	nop
 80941e6:	370c      	adds	r7, #12
 80941e8:	46bd      	mov	sp, r7
 80941ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80941ee:	4770      	bx	lr

080941f0 <GLCD_LayerDisplayMode>:

void GLCD_LayerDisplayMode(uint8_t mode) {
 80941f0:	b480      	push	{r7}
 80941f2:	b083      	sub	sp, #12
 80941f4:	af00      	add	r7, sp, #0
 80941f6:	4603      	mov	r3, r0
 80941f8:	71fb      	strb	r3, [r7, #7]
	//
}
 80941fa:	bf00      	nop
 80941fc:	370c      	adds	r7, #12
 80941fe:	46bd      	mov	sp, r7
 8094200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094204:	4770      	bx	lr

08094206 <GLCD_LayerTransparency>:

void GLCD_LayerTransparency(uint8_t layer1_trans, uint8_t layer2_trans) {
 8094206:	b480      	push	{r7}
 8094208:	b083      	sub	sp, #12
 809420a:	af00      	add	r7, sp, #0
 809420c:	4603      	mov	r3, r0
 809420e:	460a      	mov	r2, r1
 8094210:	71fb      	strb	r3, [r7, #7]
 8094212:	4613      	mov	r3, r2
 8094214:	71bb      	strb	r3, [r7, #6]
	//	BSP_LCD_SetTransparency(LTDC_BACKGROUND_LAYER, 100-layer2_trans);
	//	BSP_LCD_SetTransparency(LTDC_FOREGROUND_LAYER, 100-layer1_trans);
}
 8094216:	bf00      	nop
 8094218:	370c      	adds	r7, #12
 809421a:	46bd      	mov	sp, r7
 809421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094220:	4770      	bx	lr

08094222 <GLCD_SetLayer>:

void GLCD_SetLayer(uint8_t layerNbr) {
 8094222:	b480      	push	{r7}
 8094224:	b083      	sub	sp, #12
 8094226:	af00      	add	r7, sp, #0
 8094228:	4603      	mov	r3, r0
 809422a:	71fb      	strb	r3, [r7, #7]
	//	if (layerNbr==0) BSP_LCD_SelectLayer(LTDC_FOREGROUND_LAYER);
	//	else if (layerNbr==1) BSP_LCD_SelectLayer(LTDC_BACKGROUND_LAYER);
}
 809422c:	bf00      	nop
 809422e:	370c      	adds	r7, #12
 8094230:	46bd      	mov	sp, r7
 8094232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094236:	4770      	bx	lr

08094238 <GLCD_BTESetSource>:

void GLCD_BTESetSource(uint32_t X, uint32_t Y, uint8_t layer) {
 8094238:	b480      	push	{r7}
 809423a:	b085      	sub	sp, #20
 809423c:	af00      	add	r7, sp, #0
 809423e:	60f8      	str	r0, [r7, #12]
 8094240:	60b9      	str	r1, [r7, #8]
 8094242:	4613      	mov	r3, r2
 8094244:	71fb      	strb	r3, [r7, #7]
	//
}
 8094246:	bf00      	nop
 8094248:	3714      	adds	r7, #20
 809424a:	46bd      	mov	sp, r7
 809424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094250:	4770      	bx	lr

08094252 <GLCD_BTESetDestination>:

void GLCD_BTESetDestination(uint32_t X, uint32_t Y, uint8_t layer) {
 8094252:	b480      	push	{r7}
 8094254:	b085      	sub	sp, #20
 8094256:	af00      	add	r7, sp, #0
 8094258:	60f8      	str	r0, [r7, #12]
 809425a:	60b9      	str	r1, [r7, #8]
 809425c:	4613      	mov	r3, r2
 809425e:	71fb      	strb	r3, [r7, #7]
	//
}
 8094260:	bf00      	nop
 8094262:	3714      	adds	r7, #20
 8094264:	46bd      	mov	sp, r7
 8094266:	f85d 7b04 	ldr.w	r7, [sp], #4
 809426a:	4770      	bx	lr

0809426c <GLCD_BTESetSize>:

void GLCD_BTESetSize(uint32_t width, uint32_t height) {
 809426c:	b480      	push	{r7}
 809426e:	b083      	sub	sp, #12
 8094270:	af00      	add	r7, sp, #0
 8094272:	6078      	str	r0, [r7, #4]
 8094274:	6039      	str	r1, [r7, #0]
	//
}
 8094276:	bf00      	nop
 8094278:	370c      	adds	r7, #12
 809427a:	46bd      	mov	sp, r7
 809427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094280:	4770      	bx	lr

08094282 <GLCD_BTESetBackgroundColor>:

void GLCD_BTESetBackgroundColor(uint32_t red, uint32_t green, uint32_t blue) {
 8094282:	b480      	push	{r7}
 8094284:	b085      	sub	sp, #20
 8094286:	af00      	add	r7, sp, #0
 8094288:	60f8      	str	r0, [r7, #12]
 809428a:	60b9      	str	r1, [r7, #8]
 809428c:	607a      	str	r2, [r7, #4]
	//
}
 809428e:	bf00      	nop
 8094290:	3714      	adds	r7, #20
 8094292:	46bd      	mov	sp, r7
 8094294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094298:	4770      	bx	lr

0809429a <GLCD_BTESetForegroundColor>:

void GLCD_BTESetForegroundColor(uint32_t red, uint32_t green, uint32_t blue) {
 809429a:	b480      	push	{r7}
 809429c:	b085      	sub	sp, #20
 809429e:	af00      	add	r7, sp, #0
 80942a0:	60f8      	str	r0, [r7, #12]
 80942a2:	60b9      	str	r1, [r7, #8]
 80942a4:	607a      	str	r2, [r7, #4]
	//
}
 80942a6:	bf00      	nop
 80942a8:	3714      	adds	r7, #20
 80942aa:	46bd      	mov	sp, r7
 80942ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80942b0:	4770      	bx	lr

080942b2 <GLCD_BTESetPatternNumber>:

void GLCD_BTESetPatternNumber(uint8_t pattern) {
 80942b2:	b480      	push	{r7}
 80942b4:	b083      	sub	sp, #12
 80942b6:	af00      	add	r7, sp, #0
 80942b8:	4603      	mov	r3, r0
 80942ba:	71fb      	strb	r3, [r7, #7]
	//
}
 80942bc:	bf00      	nop
 80942be:	370c      	adds	r7, #12
 80942c0:	46bd      	mov	sp, r7
 80942c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80942c6:	4770      	bx	lr

080942c8 <GLCD_SetTransparentColor>:

void GLCD_SetTransparentColor(COLOR color) {
 80942c8:	b480      	push	{r7}
 80942ca:	b083      	sub	sp, #12
 80942cc:	af00      	add	r7, sp, #0
 80942ce:	4603      	mov	r3, r0
 80942d0:	71fb      	strb	r3, [r7, #7]
	//	BSP_LCD_SetColorKeying(BSP_LCD_GetLayer(),WRAPPER_ColorConvertion_32bpp(color));
}
 80942d2:	bf00      	nop
 80942d4:	370c      	adds	r7, #12
 80942d6:	46bd      	mov	sp, r7
 80942d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80942dc:	4770      	bx	lr

080942de <GLCD_BTEStart>:

void GLCD_BTEStart (uint8_t source_mode, uint8_t dest_mode, uint8_t ROP, uint8_t operation) {
 80942de:	b490      	push	{r4, r7}
 80942e0:	b082      	sub	sp, #8
 80942e2:	af00      	add	r7, sp, #0
 80942e4:	4604      	mov	r4, r0
 80942e6:	4608      	mov	r0, r1
 80942e8:	4611      	mov	r1, r2
 80942ea:	461a      	mov	r2, r3
 80942ec:	4623      	mov	r3, r4
 80942ee:	71fb      	strb	r3, [r7, #7]
 80942f0:	4603      	mov	r3, r0
 80942f2:	71bb      	strb	r3, [r7, #6]
 80942f4:	460b      	mov	r3, r1
 80942f6:	717b      	strb	r3, [r7, #5]
 80942f8:	4613      	mov	r3, r2
 80942fa:	713b      	strb	r3, [r7, #4]
	//
}
 80942fc:	bf00      	nop
 80942fe:	3708      	adds	r7, #8
 8094300:	46bd      	mov	sp, r7
 8094302:	bc90      	pop	{r4, r7}
 8094304:	4770      	bx	lr

08094306 <GLCD_BTEStartAndFillFromSRAM>:

void GLCD_BTEStartAndFillFromSRAM(uint8_t dest_mode, uint8_t ROP, uint8_t operation, uint32_t SRAM_Ptr, uint32_t size) {
 8094306:	b480      	push	{r7}
 8094308:	b083      	sub	sp, #12
 809430a:	af00      	add	r7, sp, #0
 809430c:	603b      	str	r3, [r7, #0]
 809430e:	4603      	mov	r3, r0
 8094310:	71fb      	strb	r3, [r7, #7]
 8094312:	460b      	mov	r3, r1
 8094314:	71bb      	strb	r3, [r7, #6]
 8094316:	4613      	mov	r3, r2
 8094318:	717b      	strb	r3, [r7, #5]
	//
}
 809431a:	bf00      	nop
 809431c:	370c      	adds	r7, #12
 809431e:	46bd      	mov	sp, r7
 8094320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094324:	4770      	bx	lr

08094326 <GUI_ProgressBar>:

// Graphics widgets
void GUI_ProgressBar(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t val, uint8_t maxval) {
 8094326:	b590      	push	{r4, r7, lr}
 8094328:	b085      	sub	sp, #20
 809432a:	af02      	add	r7, sp, #8
 809432c:	4604      	mov	r4, r0
 809432e:	4608      	mov	r0, r1
 8094330:	4611      	mov	r1, r2
 8094332:	461a      	mov	r2, r3
 8094334:	4623      	mov	r3, r4
 8094336:	80fb      	strh	r3, [r7, #6]
 8094338:	4603      	mov	r3, r0
 809433a:	80bb      	strh	r3, [r7, #4]
 809433c:	460b      	mov	r3, r1
 809433e:	807b      	strh	r3, [r7, #2]
 8094340:	4613      	mov	r3, r2
 8094342:	803b      	strh	r3, [r7, #0]
	LEGACY_GUI_ProgressBar(x, y, w, h, val, maxval);
 8094344:	883c      	ldrh	r4, [r7, #0]
 8094346:	887a      	ldrh	r2, [r7, #2]
 8094348:	88b9      	ldrh	r1, [r7, #4]
 809434a:	88f8      	ldrh	r0, [r7, #6]
 809434c:	7f3b      	ldrb	r3, [r7, #28]
 809434e:	9301      	str	r3, [sp, #4]
 8094350:	7e3b      	ldrb	r3, [r7, #24]
 8094352:	9300      	str	r3, [sp, #0]
 8094354:	4623      	mov	r3, r4
 8094356:	f7fe fdcf 	bl	8092ef8 <LEGACY_GUI_ProgressBar>
}
 809435a:	bf00      	nop
 809435c:	370c      	adds	r7, #12
 809435e:	46bd      	mov	sp, r7
 8094360:	bd90      	pop	{r4, r7, pc}

08094362 <GUI_CenterBar>:

void GUI_CenterBar(uint16_t x, uint16_t y, uint16_t w, uint16_t h, int val, uint32_t absolutemaxval) {
 8094362:	b590      	push	{r4, r7, lr}
 8094364:	b085      	sub	sp, #20
 8094366:	af02      	add	r7, sp, #8
 8094368:	4604      	mov	r4, r0
 809436a:	4608      	mov	r0, r1
 809436c:	4611      	mov	r1, r2
 809436e:	461a      	mov	r2, r3
 8094370:	4623      	mov	r3, r4
 8094372:	80fb      	strh	r3, [r7, #6]
 8094374:	4603      	mov	r3, r0
 8094376:	80bb      	strh	r3, [r7, #4]
 8094378:	460b      	mov	r3, r1
 809437a:	807b      	strh	r3, [r7, #2]
 809437c:	4613      	mov	r3, r2
 809437e:	803b      	strh	r3, [r7, #0]
	LEGACY_GUI_CenterBar(x, y, w, h, val, absolutemaxval);
 8094380:	883c      	ldrh	r4, [r7, #0]
 8094382:	887a      	ldrh	r2, [r7, #2]
 8094384:	88b9      	ldrh	r1, [r7, #4]
 8094386:	88f8      	ldrh	r0, [r7, #6]
 8094388:	69fb      	ldr	r3, [r7, #28]
 809438a:	9301      	str	r3, [sp, #4]
 809438c:	69bb      	ldr	r3, [r7, #24]
 809438e:	9300      	str	r3, [sp, #0]
 8094390:	4623      	mov	r3, r4
 8094392:	f7fe fe44 	bl	809301e <LEGACY_GUI_CenterBar>
}
 8094396:	bf00      	nop
 8094398:	370c      	adds	r7, #12
 809439a:	46bd      	mov	sp, r7
 809439c:	bd90      	pop	{r4, r7, pc}

0809439e <GUI_CreateWindow>:

void GUI_CreateWindow(const char *title, COLOR background, COLOR titlebarText, COLOR titlebarBgnd) {
 809439e:	b580      	push	{r7, lr}
 80943a0:	b082      	sub	sp, #8
 80943a2:	af00      	add	r7, sp, #0
 80943a4:	6078      	str	r0, [r7, #4]
 80943a6:	4608      	mov	r0, r1
 80943a8:	4611      	mov	r1, r2
 80943aa:	461a      	mov	r2, r3
 80943ac:	4603      	mov	r3, r0
 80943ae:	70fb      	strb	r3, [r7, #3]
 80943b0:	460b      	mov	r3, r1
 80943b2:	70bb      	strb	r3, [r7, #2]
 80943b4:	4613      	mov	r3, r2
 80943b6:	707b      	strb	r3, [r7, #1]
	LEGACY_GUI_CreateWindow(title, background, titlebarText, titlebarBgnd);
 80943b8:	787b      	ldrb	r3, [r7, #1]
 80943ba:	78ba      	ldrb	r2, [r7, #2]
 80943bc:	78f9      	ldrb	r1, [r7, #3]
 80943be:	6878      	ldr	r0, [r7, #4]
 80943c0:	f7fe fedc 	bl	809317c <LEGACY_GUI_CreateWindow>
}
 80943c4:	bf00      	nop
 80943c6:	3708      	adds	r7, #8
 80943c8:	46bd      	mov	sp, r7
 80943ca:	bd80      	pop	{r7, pc}

080943cc <KEYS_GetState>:

// Keys and potar services
KEY_STATE KEYS_GetState(KEY_ID key)  {
 80943cc:	b580      	push	{r7, lr}
 80943ce:	b084      	sub	sp, #16
 80943d0:	af00      	add	r7, sp, #0
 80943d2:	4603      	mov	r3, r0
 80943d4:	71fb      	strb	r3, [r7, #7]
	KEY_STATE state=KEY_RELEASED;
 80943d6:	2300      	movs	r3, #0
 80943d8:	73fb      	strb	r3, [r7, #15]

	switch (key)
 80943da:	79fb      	ldrb	r3, [r7, #7]
 80943dc:	2b0b      	cmp	r3, #11
 80943de:	f200 80b1 	bhi.w	8094544 <KEYS_GetState+0x178>
 80943e2:	a201      	add	r2, pc, #4	; (adr r2, 80943e8 <KEYS_GetState+0x1c>)
 80943e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80943e8:	08094419 	.word	0x08094419
 80943ec:	0809442f 	.word	0x0809442f
 80943f0:	08094459 	.word	0x08094459
 80943f4:	0809446d 	.word	0x0809446d
 80943f8:	08094495 	.word	0x08094495
 80943fc:	08094445 	.word	0x08094445
 8094400:	08094481 	.word	0x08094481
 8094404:	080944a9 	.word	0x080944a9
 8094408:	080944ed 	.word	0x080944ed
 809440c:	080944cb 	.word	0x080944cb
 8094410:	0809450f 	.word	0x0809450f
 8094414:	08094531 	.word	0x08094531
	{
	case KEY_A:
		if (BSP_PB_GetState(BUTTON_A)) state = KEY_PRESSED;
 8094418:	f44f 7084 	mov.w	r0, #264	; 0x108
 809441c:	f7ef fd40 	bl	8083ea0 <BSP_PB_GetState>
 8094420:	4603      	mov	r3, r0
 8094422:	2b00      	cmp	r3, #0
 8094424:	f000 8090 	beq.w	8094548 <KEYS_GetState+0x17c>
 8094428:	2301      	movs	r3, #1
 809442a:	73fb      	strb	r3, [r7, #15]
		break;
 809442c:	e08c      	b.n	8094548 <KEYS_GetState+0x17c>
	case KEY_B:
		if (BSP_PB_GetState(BUTTON_B)) state = KEY_PRESSED;
 809442e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8094432:	f7ef fd35 	bl	8083ea0 <BSP_PB_GetState>
 8094436:	4603      	mov	r3, r0
 8094438:	2b00      	cmp	r3, #0
 809443a:	f000 8087 	beq.w	809454c <KEYS_GetState+0x180>
 809443e:	2301      	movs	r3, #1
 8094440:	73fb      	strb	r3, [r7, #15]
		break;
 8094442:	e083      	b.n	809454c <KEYS_GetState+0x180>
	case KEY_CENTER:
		if (BSP_PB_GetState(BUTTON_Y)) state = KEY_PRESSED;
 8094444:	f240 1001 	movw	r0, #257	; 0x101
 8094448:	f7ef fd2a 	bl	8083ea0 <BSP_PB_GetState>
 809444c:	4603      	mov	r3, r0
 809444e:	2b00      	cmp	r3, #0
 8094450:	d07e      	beq.n	8094550 <KEYS_GetState+0x184>
 8094452:	2301      	movs	r3, #1
 8094454:	73fb      	strb	r3, [r7, #15]
		break;
 8094456:	e07b      	b.n	8094550 <KEYS_GetState+0x184>
	case KEY_UP:
		if (BSP_PB_GetState(BUTTON_UP)) state = KEY_PRESSED;
 8094458:	f44f 70c0 	mov.w	r0, #384	; 0x180
 809445c:	f7ef fd20 	bl	8083ea0 <BSP_PB_GetState>
 8094460:	4603      	mov	r3, r0
 8094462:	2b00      	cmp	r3, #0
 8094464:	d076      	beq.n	8094554 <KEYS_GetState+0x188>
 8094466:	2301      	movs	r3, #1
 8094468:	73fb      	strb	r3, [r7, #15]
		break;
 809446a:	e073      	b.n	8094554 <KEYS_GetState+0x188>
	case KEY_DOWN:
		if (BSP_PB_GetState(BUTTON_DOWN)) state = KEY_PRESSED;
 809446c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8094470:	f7ef fd16 	bl	8083ea0 <BSP_PB_GetState>
 8094474:	4603      	mov	r3, r0
 8094476:	2b00      	cmp	r3, #0
 8094478:	d06e      	beq.n	8094558 <KEYS_GetState+0x18c>
 809447a:	2301      	movs	r3, #1
 809447c:	73fb      	strb	r3, [r7, #15]
		break;
 809447e:	e06b      	b.n	8094558 <KEYS_GetState+0x18c>
	case KEY_RIGHT:
		if (BSP_PB_GetState(BUTTON_RIGHT)) state = KEY_PRESSED;
 8094480:	f44f 7088 	mov.w	r0, #272	; 0x110
 8094484:	f7ef fd0c 	bl	8083ea0 <BSP_PB_GetState>
 8094488:	4603      	mov	r3, r0
 809448a:	2b00      	cmp	r3, #0
 809448c:	d066      	beq.n	809455c <KEYS_GetState+0x190>
 809448e:	2301      	movs	r3, #1
 8094490:	73fb      	strb	r3, [r7, #15]
		break;
 8094492:	e063      	b.n	809455c <KEYS_GetState+0x190>
	case KEY_LEFT:
		if (BSP_PB_GetState(BUTTON_LEFT)) state = KEY_PRESSED;
 8094494:	f44f 7090 	mov.w	r0, #288	; 0x120
 8094498:	f7ef fd02 	bl	8083ea0 <BSP_PB_GetState>
 809449c:	4603      	mov	r3, r0
 809449e:	2b00      	cmp	r3, #0
 80944a0:	d05e      	beq.n	8094560 <KEYS_GetState+0x194>
 80944a2:	2301      	movs	r3, #1
 80944a4:	73fb      	strb	r3, [r7, #15]
		break;
 80944a6:	e05b      	b.n	8094560 <KEYS_GetState+0x194>
	case KEY_LEFT_UP:
		if (BSP_PB_GetState(BUTTON_UP) && BSP_PB_GetState(BUTTON_LEFT)) state = KEY_PRESSED;
 80944a8:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80944ac:	f7ef fcf8 	bl	8083ea0 <BSP_PB_GetState>
 80944b0:	4603      	mov	r3, r0
 80944b2:	2b00      	cmp	r3, #0
 80944b4:	d056      	beq.n	8094564 <KEYS_GetState+0x198>
 80944b6:	f44f 7090 	mov.w	r0, #288	; 0x120
 80944ba:	f7ef fcf1 	bl	8083ea0 <BSP_PB_GetState>
 80944be:	4603      	mov	r3, r0
 80944c0:	2b00      	cmp	r3, #0
 80944c2:	d04f      	beq.n	8094564 <KEYS_GetState+0x198>
 80944c4:	2301      	movs	r3, #1
 80944c6:	73fb      	strb	r3, [r7, #15]
		break;
 80944c8:	e04c      	b.n	8094564 <KEYS_GetState+0x198>
	case KEY_RIGHT_UP:
		if (BSP_PB_GetState(BUTTON_UP) && BSP_PB_GetState(BUTTON_RIGHT)) state = KEY_PRESSED;
 80944ca:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80944ce:	f7ef fce7 	bl	8083ea0 <BSP_PB_GetState>
 80944d2:	4603      	mov	r3, r0
 80944d4:	2b00      	cmp	r3, #0
 80944d6:	d047      	beq.n	8094568 <KEYS_GetState+0x19c>
 80944d8:	f44f 7088 	mov.w	r0, #272	; 0x110
 80944dc:	f7ef fce0 	bl	8083ea0 <BSP_PB_GetState>
 80944e0:	4603      	mov	r3, r0
 80944e2:	2b00      	cmp	r3, #0
 80944e4:	d040      	beq.n	8094568 <KEYS_GetState+0x19c>
 80944e6:	2301      	movs	r3, #1
 80944e8:	73fb      	strb	r3, [r7, #15]
		break;
 80944ea:	e03d      	b.n	8094568 <KEYS_GetState+0x19c>
	case KEY_LEFT_DOWN:
		if (BSP_PB_GetState(BUTTON_DOWN) && BSP_PB_GetState(BUTTON_LEFT)) state = KEY_PRESSED;
 80944ec:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80944f0:	f7ef fcd6 	bl	8083ea0 <BSP_PB_GetState>
 80944f4:	4603      	mov	r3, r0
 80944f6:	2b00      	cmp	r3, #0
 80944f8:	d038      	beq.n	809456c <KEYS_GetState+0x1a0>
 80944fa:	f44f 7090 	mov.w	r0, #288	; 0x120
 80944fe:	f7ef fccf 	bl	8083ea0 <BSP_PB_GetState>
 8094502:	4603      	mov	r3, r0
 8094504:	2b00      	cmp	r3, #0
 8094506:	d031      	beq.n	809456c <KEYS_GetState+0x1a0>
 8094508:	2301      	movs	r3, #1
 809450a:	73fb      	strb	r3, [r7, #15]
		break;
 809450c:	e02e      	b.n	809456c <KEYS_GetState+0x1a0>
	case KEY_RIGHT_DOWN:
		if (BSP_PB_GetState(BUTTON_DOWN) && BSP_PB_GetState(BUTTON_RIGHT)) state = KEY_PRESSED;
 809450e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8094512:	f7ef fcc5 	bl	8083ea0 <BSP_PB_GetState>
 8094516:	4603      	mov	r3, r0
 8094518:	2b00      	cmp	r3, #0
 809451a:	d029      	beq.n	8094570 <KEYS_GetState+0x1a4>
 809451c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8094520:	f7ef fcbe 	bl	8083ea0 <BSP_PB_GetState>
 8094524:	4603      	mov	r3, r0
 8094526:	2b00      	cmp	r3, #0
 8094528:	d022      	beq.n	8094570 <KEYS_GetState+0x1a4>
 809452a:	2301      	movs	r3, #1
 809452c:	73fb      	strb	r3, [r7, #15]
		break;
 809452e:	e01f      	b.n	8094570 <KEYS_GetState+0x1a4>
	case KEY_SYSTEM:
		if (BSP_PB_GetState(BUTTON_X)) state = KEY_PRESSED;
 8094530:	f44f 7081 	mov.w	r0, #258	; 0x102
 8094534:	f7ef fcb4 	bl	8083ea0 <BSP_PB_GetState>
 8094538:	4603      	mov	r3, r0
 809453a:	2b00      	cmp	r3, #0
 809453c:	d01a      	beq.n	8094574 <KEYS_GetState+0x1a8>
 809453e:	2301      	movs	r3, #1
 8094540:	73fb      	strb	r3, [r7, #15]
		break;
 8094542:	e017      	b.n	8094574 <KEYS_GetState+0x1a8>
	default:
		break;
 8094544:	bf00      	nop
 8094546:	e016      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094548:	bf00      	nop
 809454a:	e014      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 809454c:	bf00      	nop
 809454e:	e012      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094550:	bf00      	nop
 8094552:	e010      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094554:	bf00      	nop
 8094556:	e00e      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094558:	bf00      	nop
 809455a:	e00c      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 809455c:	bf00      	nop
 809455e:	e00a      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094560:	bf00      	nop
 8094562:	e008      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094564:	bf00      	nop
 8094566:	e006      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094568:	bf00      	nop
 809456a:	e004      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 809456c:	bf00      	nop
 809456e:	e002      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094570:	bf00      	nop
 8094572:	e000      	b.n	8094576 <KEYS_GetState+0x1aa>
		break;
 8094574:	bf00      	nop
	}

	return state;
 8094576:	7bfb      	ldrb	r3, [r7, #15]
}
 8094578:	4618      	mov	r0, r3
 809457a:	3710      	adds	r7, #16
 809457c:	46bd      	mov	sp, r7
 809457e:	bd80      	pop	{r7, pc}

08094580 <POT_GetValue>:

uint8_t POT_GetValue(POT_ID pot)  {
 8094580:	b580      	push	{r7, lr}
 8094582:	b08e      	sub	sp, #56	; 0x38
 8094584:	af00      	add	r7, sp, #0
 8094586:	4603      	mov	r3, r0
 8094588:	71fb      	strb	r3, [r7, #7]
	TS_StateTypeDef  TS_State;
	uint16_t ts_x;

	BSP_TS_GetState(&TS_State);
 809458a:	f107 0308 	add.w	r3, r7, #8
 809458e:	4618      	mov	r0, r3
 8094590:	f7f4 fb32 	bl	8088bf8 <BSP_TS_GetState>

	if (TS_State.touchDetected) {
 8094594:	7a3b      	ldrb	r3, [r7, #8]
 8094596:	2b00      	cmp	r3, #0
 8094598:	d01f      	beq.n	80945da <POT_GetValue+0x5a>
		ts_x = TS_State.touchX[0];
 809459a:	897b      	ldrh	r3, [r7, #10]
 809459c:	86fb      	strh	r3, [r7, #54]	; 0x36

		if (ts_x<=HORIZONTAL_COORD_CONVERSION(50)) POT_LastVal=0;
 809459e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80945a0:	2b82      	cmp	r3, #130	; 0x82
 80945a2:	d803      	bhi.n	80945ac <POT_GetValue+0x2c>
 80945a4:	4b13      	ldr	r3, [pc, #76]	; (80945f4 <POT_GetValue+0x74>)
 80945a6:	2200      	movs	r2, #0
 80945a8:	701a      	strb	r2, [r3, #0]
 80945aa:	e016      	b.n	80945da <POT_GetValue+0x5a>
		else if (ts_x>=HORIZONTAL_COORD_CONVERSION(270)) POT_LastVal=255;
 80945ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80945ae:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80945b2:	d303      	bcc.n	80945bc <POT_GetValue+0x3c>
 80945b4:	4b0f      	ldr	r3, [pc, #60]	; (80945f4 <POT_GetValue+0x74>)
 80945b6:	22ff      	movs	r2, #255	; 0xff
 80945b8:	701a      	strb	r2, [r3, #0]
 80945ba:	e00e      	b.n	80945da <POT_GetValue+0x5a>
		else {
			POT_LastVal = ((ts_x-HORIZONTAL_COORD_CONVERSION(50))*255)/(HORIZONTAL_COORD_CONVERSION(270)-HORIZONTAL_COORD_CONVERSION(50));
 80945bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80945be:	f1a3 0282 	sub.w	r2, r3, #130	; 0x82
 80945c2:	4613      	mov	r3, r2
 80945c4:	021b      	lsls	r3, r3, #8
 80945c6:	1a9b      	subs	r3, r3, r2
 80945c8:	4a0b      	ldr	r2, [pc, #44]	; (80945f8 <POT_GetValue+0x78>)
 80945ca:	fb82 1203 	smull	r1, r2, r2, r3
 80945ce:	10d2      	asrs	r2, r2, #3
 80945d0:	17db      	asrs	r3, r3, #31
 80945d2:	1ad3      	subs	r3, r2, r3
 80945d4:	b2da      	uxtb	r2, r3
 80945d6:	4b07      	ldr	r3, [pc, #28]	; (80945f4 <POT_GetValue+0x74>)
 80945d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (POT_LastVal ==0) POT_LastVal=1;
 80945da:	4b06      	ldr	r3, [pc, #24]	; (80945f4 <POT_GetValue+0x74>)
 80945dc:	781b      	ldrb	r3, [r3, #0]
 80945de:	2b00      	cmp	r3, #0
 80945e0:	d102      	bne.n	80945e8 <POT_GetValue+0x68>
 80945e2:	4b04      	ldr	r3, [pc, #16]	; (80945f4 <POT_GetValue+0x74>)
 80945e4:	2201      	movs	r2, #1
 80945e6:	701a      	strb	r2, [r3, #0]

	return POT_LastVal;
 80945e8:	4b02      	ldr	r3, [pc, #8]	; (80945f4 <POT_GetValue+0x74>)
 80945ea:	781b      	ldrb	r3, [r3, #0]
}
 80945ec:	4618      	mov	r0, r3
 80945ee:	3738      	adds	r7, #56	; 0x38
 80945f0:	46bd      	mov	sp, r7
 80945f2:	bd80      	pop	{r7, pc}
 80945f4:	2002ef60 	.word	0x2002ef60
 80945f8:	094f2095 	.word	0x094f2095

080945fc <LED_Set>:

// Led services
void LED_Set(LED_STATE state) {
 80945fc:	b480      	push	{r7}
 80945fe:	b083      	sub	sp, #12
 8094600:	af00      	add	r7, sp, #0
 8094602:	4603      	mov	r3, r0
 8094604:	71fb      	strb	r3, [r7, #7]
	//
}
 8094606:	bf00      	nop
 8094608:	370c      	adds	r7, #12
 809460a:	46bd      	mov	sp, r7
 809460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094610:	4770      	bx	lr

08094612 <RNG_GetValue>:

// Random generator services
uint16_t RNG_GetValue(void) {
 8094612:	b580      	push	{r7, lr}
 8094614:	af00      	add	r7, sp, #0
	return (uint16_t)(BSP_RNG_GetNumber());
 8094616:	f7f3 fdd9 	bl	80881cc <BSP_RNG_GetNumber>
 809461a:	4603      	mov	r3, r0
 809461c:	b29b      	uxth	r3, r3
}
 809461e:	4618      	mov	r0, r3
 8094620:	bd80      	pop	{r7, pc}

08094622 <AUDIO_Init>:

// Sound services
void AUDIO_Init(void) {
 8094622:	b580      	push	{r7, lr}
 8094624:	b082      	sub	sp, #8
 8094626:	af00      	add	r7, sp, #0
	uint32_t freq=44100;
 8094628:	f64a 4344 	movw	r3, #44100	; 0xac44
 809462c:	607b      	str	r3, [r7, #4]

	BSP_AUDIO_OUT_DeInit();
 809462e:	f7f0 fa83 	bl	8084b38 <BSP_AUDIO_OUT_DeInit>
	BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 92, freq);
 8094632:	687a      	ldr	r2, [r7, #4]
 8094634:	215c      	movs	r1, #92	; 0x5c
 8094636:	2003      	movs	r0, #3
 8094638:	f7f0 f956 	bl	80848e8 <BSP_AUDIO_OUT_Init>
}
 809463c:	bf00      	nop
 809463e:	3708      	adds	r7, #8
 8094640:	46bd      	mov	sp, r7
 8094642:	bd80      	pop	{r7, pc}

08094644 <AUDIO_Start>:

void AUDIO_Start(void) {
 8094644:	b580      	push	{r7, lr}
 8094646:	af00      	add	r7, sp, #0
	/* Clean Data Cache to update the content of the SRAM */
	SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer1[0], AUDIO_BUFFER_SIZE*8);
 8094648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 809464c:	4804      	ldr	r0, [pc, #16]	; (8094660 <AUDIO_Start+0x1c>)
 809464e:	f7ff fa93 	bl	8093b78 <SCB_CleanDCache_by_Addr>

	BSP_AUDIO_OUT_Play((uint16_t*)&AUDIO_Buffer.buffer1[0], AUDIO_BUFFER_SIZE*8);
 8094652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8094656:	4802      	ldr	r0, [pc, #8]	; (8094660 <AUDIO_Start+0x1c>)
 8094658:	f7f0 f998 	bl	808498c <BSP_AUDIO_OUT_Play>
}
 809465c:	bf00      	nop
 809465e:	bd80      	pop	{r7, pc}
 8094660:	2002df60 	.word	0x2002df60

08094664 <AUDIO_Stop>:

void AUDIO_Stop(void) {
 8094664:	b580      	push	{r7, lr}
 8094666:	af00      	add	r7, sp, #0
	BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8094668:	2002      	movs	r0, #2
 809466a:	f7f0 f9e5 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
}
 809466e:	bf00      	nop
 8094670:	bd80      	pop	{r7, pc}
	...

08094674 <AUDIO_FillBuffer>:

void AUDIO_FillBuffer(int buffer_nbr, uint8_t* buffer) {
 8094674:	b580      	push	{r7, lr}
 8094676:	b086      	sub	sp, #24
 8094678:	af00      	add	r7, sp, #0
 809467a:	6078      	str	r0, [r7, #4]
 809467c:	6039      	str	r1, [r7, #0]
	int i;
	int16_t *ptr;
	int16_t tmp;

	if (buffer_nbr == 1) ptr = &AUDIO_Buffer.buffer1[0];
 809467e:	687b      	ldr	r3, [r7, #4]
 8094680:	2b01      	cmp	r3, #1
 8094682:	d102      	bne.n	809468a <AUDIO_FillBuffer+0x16>
 8094684:	4b1c      	ldr	r3, [pc, #112]	; (80946f8 <AUDIO_FillBuffer+0x84>)
 8094686:	613b      	str	r3, [r7, #16]
 8094688:	e001      	b.n	809468e <AUDIO_FillBuffer+0x1a>
	else ptr =  &AUDIO_Buffer.buffer2[0];
 809468a:	4b1c      	ldr	r3, [pc, #112]	; (80946fc <AUDIO_FillBuffer+0x88>)
 809468c:	613b      	str	r3, [r7, #16]

	for (i=0; i<AUDIO_BUFFER_SIZE; i++)
 809468e:	2300      	movs	r3, #0
 8094690:	617b      	str	r3, [r7, #20]
 8094692:	e01b      	b.n	80946cc <AUDIO_FillBuffer+0x58>
	{
		tmp = buffer[i];
 8094694:	697b      	ldr	r3, [r7, #20]
 8094696:	683a      	ldr	r2, [r7, #0]
 8094698:	4413      	add	r3, r2
 809469a:	781b      	ldrb	r3, [r3, #0]
 809469c:	81fb      	strh	r3, [r7, #14]
		tmp = tmp -128;
 809469e:	89fb      	ldrh	r3, [r7, #14]
 80946a0:	3b80      	subs	r3, #128	; 0x80
 80946a2:	b29b      	uxth	r3, r3
 80946a4:	81fb      	strh	r3, [r7, #14]
		tmp = tmp *256;
 80946a6:	89fb      	ldrh	r3, [r7, #14]
 80946a8:	021b      	lsls	r3, r3, #8
 80946aa:	b29b      	uxth	r3, r3
 80946ac:	81fb      	strh	r3, [r7, #14]

		*ptr=tmp;
 80946ae:	693b      	ldr	r3, [r7, #16]
 80946b0:	89fa      	ldrh	r2, [r7, #14]
 80946b2:	801a      	strh	r2, [r3, #0]
		ptr++;
 80946b4:	693b      	ldr	r3, [r7, #16]
 80946b6:	3302      	adds	r3, #2
 80946b8:	613b      	str	r3, [r7, #16]
		*ptr=tmp;
 80946ba:	693b      	ldr	r3, [r7, #16]
 80946bc:	89fa      	ldrh	r2, [r7, #14]
 80946be:	801a      	strh	r2, [r3, #0]
		ptr++;
 80946c0:	693b      	ldr	r3, [r7, #16]
 80946c2:	3302      	adds	r3, #2
 80946c4:	613b      	str	r3, [r7, #16]
	for (i=0; i<AUDIO_BUFFER_SIZE; i++)
 80946c6:	697b      	ldr	r3, [r7, #20]
 80946c8:	3301      	adds	r3, #1
 80946ca:	617b      	str	r3, [r7, #20]
 80946cc:	697b      	ldr	r3, [r7, #20]
 80946ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80946d2:	dbdf      	blt.n	8094694 <AUDIO_FillBuffer+0x20>
	}

	if (buffer_nbr == 1) SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer1[0], AUDIO_BUFFER_SIZE*4);
 80946d4:	687b      	ldr	r3, [r7, #4]
 80946d6:	2b01      	cmp	r3, #1
 80946d8:	d105      	bne.n	80946e6 <AUDIO_FillBuffer+0x72>
 80946da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80946de:	4806      	ldr	r0, [pc, #24]	; (80946f8 <AUDIO_FillBuffer+0x84>)
 80946e0:	f7ff fa4a 	bl	8093b78 <SCB_CleanDCache_by_Addr>
	else SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer2[0], AUDIO_BUFFER_SIZE*4);
}
 80946e4:	e004      	b.n	80946f0 <AUDIO_FillBuffer+0x7c>
	else SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer2[0], AUDIO_BUFFER_SIZE*4);
 80946e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80946ea:	4804      	ldr	r0, [pc, #16]	; (80946fc <AUDIO_FillBuffer+0x88>)
 80946ec:	f7ff fa44 	bl	8093b78 <SCB_CleanDCache_by_Addr>
}
 80946f0:	bf00      	nop
 80946f2:	3718      	adds	r7, #24
 80946f4:	46bd      	mov	sp, r7
 80946f6:	bd80      	pop	{r7, pc}
 80946f8:	2002df60 	.word	0x2002df60
 80946fc:	2002e760 	.word	0x2002e760

08094700 <AUDIO_SetEventCallback>:

	if (buffer_nbr == 1) SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer1[0], AUDIO_BUFFER_SIZE*4);
	else SCB_CleanDCache_by_Addr((uint32_t*)&AUDIO_Buffer.buffer2[0], AUDIO_BUFFER_SIZE*4);
}

void AUDIO_SetEventCallback(AUDIO_EventCallback callback) {
 8094700:	b480      	push	{r7}
 8094702:	b083      	sub	sp, #12
 8094704:	af00      	add	r7, sp, #0
 8094706:	6078      	str	r0, [r7, #4]
	if (callback != 0x00)
 8094708:	687b      	ldr	r3, [r7, #4]
 809470a:	2b00      	cmp	r3, #0
 809470c:	d002      	beq.n	8094714 <AUDIO_SetEventCallback+0x14>
	{
		AUDIO_Callback= callback;
 809470e:	4a04      	ldr	r2, [pc, #16]	; (8094720 <AUDIO_SetEventCallback+0x20>)
 8094710:	687b      	ldr	r3, [r7, #4]
 8094712:	6013      	str	r3, [r2, #0]
	}
}
 8094714:	bf00      	nop
 8094716:	370c      	adds	r7, #12
 8094718:	46bd      	mov	sp, r7
 809471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809471e:	4770      	bx	lr
 8094720:	2002efb0 	.word	0x2002efb0

08094724 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
 * @brief  Manages the full Transfer complete event.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8094724:	b580      	push	{r7, lr}
 8094726:	af00      	add	r7, sp, #0
	if (AUDIO_Callback != 0x00)
 8094728:	4b04      	ldr	r3, [pc, #16]	; (809473c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 809472a:	681b      	ldr	r3, [r3, #0]
 809472c:	2b00      	cmp	r3, #0
 809472e:	d003      	beq.n	8094738 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
	{
		AUDIO_Callback(2);
 8094730:	4b02      	ldr	r3, [pc, #8]	; (809473c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8094732:	681b      	ldr	r3, [r3, #0]
 8094734:	2002      	movs	r0, #2
 8094736:	4798      	blx	r3
	}
}
 8094738:	bf00      	nop
 809473a:	bd80      	pop	{r7, pc}
 809473c:	2002efb0 	.word	0x2002efb0

08094740 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 * @brief  Manages the DMA Half Transfer complete event.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8094740:	b580      	push	{r7, lr}
 8094742:	af00      	add	r7, sp, #0
	if (AUDIO_Callback != 0x00)
 8094744:	4b04      	ldr	r3, [pc, #16]	; (8094758 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 8094746:	681b      	ldr	r3, [r3, #0]
 8094748:	2b00      	cmp	r3, #0
 809474a:	d003      	beq.n	8094754 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
	{
		AUDIO_Callback(1);
 809474c:	4b02      	ldr	r3, [pc, #8]	; (8094758 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 809474e:	681b      	ldr	r3, [r3, #0]
 8094750:	2001      	movs	r0, #1
 8094752:	4798      	blx	r3
	}
}
 8094754:	bf00      	nop
 8094756:	bd80      	pop	{r7, pc}
 8094758:	2002efb0 	.word	0x2002efb0

0809475c <L3GD20_GetGyroscopicValues>:

// Sensors services
float* L3GD20_GetGyroscopicValues (void) {
 809475c:	b580      	push	{r7, lr}
 809475e:	af00      	add	r7, sp, #0
	if (BSP_GYRO_ReadValues(&ang)==ACC_OK) return (float*)&ang;
 8094760:	4805      	ldr	r0, [pc, #20]	; (8094778 <L3GD20_GetGyroscopicValues+0x1c>)
 8094762:	f7ef ffb3 	bl	80846cc <BSP_GYRO_ReadValues>
 8094766:	4603      	mov	r3, r0
 8094768:	2b00      	cmp	r3, #0
 809476a:	d101      	bne.n	8094770 <L3GD20_GetGyroscopicValues+0x14>
 809476c:	4b02      	ldr	r3, [pc, #8]	; (8094778 <L3GD20_GetGyroscopicValues+0x1c>)
 809476e:	e000      	b.n	8094772 <L3GD20_GetGyroscopicValues+0x16>
	else return val;
 8094770:	4b02      	ldr	r3, [pc, #8]	; (809477c <L3GD20_GetGyroscopicValues+0x20>)
}
 8094772:	4618      	mov	r0, r3
 8094774:	bd80      	pop	{r7, pc}
 8094776:	bf00      	nop
 8094778:	2002ef64 	.word	0x2002ef64
 809477c:	2000bc28 	.word	0x2000bc28

08094780 <LSM303DLHC_GetMagneticValues>:

float* LSM303DLHC_GetMagneticValues (void) {
 8094780:	b580      	push	{r7, lr}
 8094782:	af00      	add	r7, sp, #0
	if (BSP_MAG_ReadValues(&mag) == MAG_OK) return (float*)&mag;
 8094784:	4805      	ldr	r0, [pc, #20]	; (809479c <LSM303DLHC_GetMagneticValues+0x1c>)
 8094786:	f7f2 fed9 	bl	808753c <BSP_MAG_ReadValues>
 809478a:	4603      	mov	r3, r0
 809478c:	2b00      	cmp	r3, #0
 809478e:	d101      	bne.n	8094794 <LSM303DLHC_GetMagneticValues+0x14>
 8094790:	4b02      	ldr	r3, [pc, #8]	; (809479c <LSM303DLHC_GetMagneticValues+0x1c>)
 8094792:	e000      	b.n	8094796 <LSM303DLHC_GetMagneticValues+0x16>
	else return val;
 8094794:	4b02      	ldr	r3, [pc, #8]	; (80947a0 <LSM303DLHC_GetMagneticValues+0x20>)
}
 8094796:	4618      	mov	r0, r3
 8094798:	bd80      	pop	{r7, pc}
 809479a:	bf00      	nop
 809479c:	2002efb4 	.word	0x2002efb4
 80947a0:	2000bc28 	.word	0x2000bc28

080947a4 <LSM303DLHC_GetAccelerometerValues>:

float* LSM303DLHC_GetAccelerometerValues(void) {
 80947a4:	b580      	push	{r7, lr}
 80947a6:	b082      	sub	sp, #8
 80947a8:	af00      	add	r7, sp, #0
	float tmp;
	//	char str[20];
	//	volatile int val;

	HAL_Delay(25);
 80947aa:	2019      	movs	r0, #25
 80947ac:	f7f4 fce4 	bl	8089178 <HAL_Delay>

	while (BSP_ACC_ReadValues(&acc) != ACC_OK) {
 80947b0:	bf00      	nop
 80947b2:	480c      	ldr	r0, [pc, #48]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
 80947b4:	f7ef ff4c 	bl	8084650 <BSP_ACC_ReadValues>
 80947b8:	4603      	mov	r3, r0
 80947ba:	2b00      	cmp	r3, #0
 80947bc:	d1f9      	bne.n	80947b2 <LSM303DLHC_GetAccelerometerValues+0xe>
	//	val = (int)acc.y;
	//	sprintf (str, "Y= %i     ", val);
	//	GLCD_DrawString(1,14, str);

	// invert X and Y
	tmp = -acc.y;
 80947be:	4b09      	ldr	r3, [pc, #36]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
 80947c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80947c4:	eef1 7a67 	vneg.f32	s15, s15
 80947c8:	edc7 7a01 	vstr	s15, [r7, #4]
	acc.y=acc.x;
 80947cc:	4b05      	ldr	r3, [pc, #20]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
 80947ce:	681b      	ldr	r3, [r3, #0]
 80947d0:	4a04      	ldr	r2, [pc, #16]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
 80947d2:	6053      	str	r3, [r2, #4]
	acc.x=tmp;
 80947d4:	4a03      	ldr	r2, [pc, #12]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
 80947d6:	687b      	ldr	r3, [r7, #4]
 80947d8:	6013      	str	r3, [r2, #0]

	return (float*)&acc;
 80947da:	4b02      	ldr	r3, [pc, #8]	; (80947e4 <LSM303DLHC_GetAccelerometerValues+0x40>)
}
 80947dc:	4618      	mov	r0, r3
 80947de:	3708      	adds	r7, #8
 80947e0:	46bd      	mov	sp, r7
 80947e2:	bd80      	pop	{r7, pc}
 80947e4:	2002df40 	.word	0x2002df40

080947e8 <SRAM_ReadByte>:

// External RAM
uint8_t SRAM_ReadByte(uint32_t addr) {
 80947e8:	b480      	push	{r7}
 80947ea:	b085      	sub	sp, #20
 80947ec:	af00      	add	r7, sp, #0
 80947ee:	6078      	str	r0, [r7, #4]
	uint8_t *p=(uint8_t*)(&_legacysram_start);
 80947f0:	4b06      	ldr	r3, [pc, #24]	; (809480c <SRAM_ReadByte+0x24>)
 80947f2:	60fb      	str	r3, [r7, #12]
	p+=addr;
 80947f4:	68fa      	ldr	r2, [r7, #12]
 80947f6:	687b      	ldr	r3, [r7, #4]
 80947f8:	4413      	add	r3, r2
 80947fa:	60fb      	str	r3, [r7, #12]
	return *p;
 80947fc:	68fb      	ldr	r3, [r7, #12]
 80947fe:	781b      	ldrb	r3, [r3, #0]
}
 8094800:	4618      	mov	r0, r3
 8094802:	3714      	adds	r7, #20
 8094804:	46bd      	mov	sp, r7
 8094806:	f85d 7b04 	ldr.w	r7, [sp], #4
 809480a:	4770      	bx	lr
 809480c:	c007f800 	.word	0xc007f800

08094810 <SRAM_WriteByte>:

void SRAM_WriteByte(uint32_t addr, uint8_t data) {
 8094810:	b480      	push	{r7}
 8094812:	b085      	sub	sp, #20
 8094814:	af00      	add	r7, sp, #0
 8094816:	6078      	str	r0, [r7, #4]
 8094818:	460b      	mov	r3, r1
 809481a:	70fb      	strb	r3, [r7, #3]
	uint8_t *p=(uint8_t*)(&_legacysram_start);
 809481c:	4b07      	ldr	r3, [pc, #28]	; (809483c <SRAM_WriteByte+0x2c>)
 809481e:	60fb      	str	r3, [r7, #12]
	p+=addr;
 8094820:	68fa      	ldr	r2, [r7, #12]
 8094822:	687b      	ldr	r3, [r7, #4]
 8094824:	4413      	add	r3, r2
 8094826:	60fb      	str	r3, [r7, #12]
	*p = data;
 8094828:	68fb      	ldr	r3, [r7, #12]
 809482a:	78fa      	ldrb	r2, [r7, #3]
 809482c:	701a      	strb	r2, [r3, #0]
}
 809482e:	bf00      	nop
 8094830:	3714      	adds	r7, #20
 8094832:	46bd      	mov	sp, r7
 8094834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094838:	4770      	bx	lr
 809483a:	bf00      	nop
 809483c:	c007f800 	.word	0xc007f800

08094840 <SRAM_ReadBuffer>:

void SRAM_ReadBuffer(uint32_t addr, uint8_t *buffer, int length) {
 8094840:	b480      	push	{r7}
 8094842:	b087      	sub	sp, #28
 8094844:	af00      	add	r7, sp, #0
 8094846:	60f8      	str	r0, [r7, #12]
 8094848:	60b9      	str	r1, [r7, #8]
 809484a:	607a      	str	r2, [r7, #4]
	uint8_t *p=(uint8_t*)(&_legacysram_start);
 809484c:	4b0e      	ldr	r3, [pc, #56]	; (8094888 <SRAM_ReadBuffer+0x48>)
 809484e:	617b      	str	r3, [r7, #20]
	p+=addr;
 8094850:	697a      	ldr	r2, [r7, #20]
 8094852:	68fb      	ldr	r3, [r7, #12]
 8094854:	4413      	add	r3, r2
 8094856:	617b      	str	r3, [r7, #20]

	for (int i=0;i < length; i++)
 8094858:	2300      	movs	r3, #0
 809485a:	613b      	str	r3, [r7, #16]
 809485c:	e00a      	b.n	8094874 <SRAM_ReadBuffer+0x34>
	{
		*(buffer++)= *(p++);
 809485e:	697a      	ldr	r2, [r7, #20]
 8094860:	1c53      	adds	r3, r2, #1
 8094862:	617b      	str	r3, [r7, #20]
 8094864:	68bb      	ldr	r3, [r7, #8]
 8094866:	1c59      	adds	r1, r3, #1
 8094868:	60b9      	str	r1, [r7, #8]
 809486a:	7812      	ldrb	r2, [r2, #0]
 809486c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i < length; i++)
 809486e:	693b      	ldr	r3, [r7, #16]
 8094870:	3301      	adds	r3, #1
 8094872:	613b      	str	r3, [r7, #16]
 8094874:	693a      	ldr	r2, [r7, #16]
 8094876:	687b      	ldr	r3, [r7, #4]
 8094878:	429a      	cmp	r2, r3
 809487a:	dbf0      	blt.n	809485e <SRAM_ReadBuffer+0x1e>
	}
}
 809487c:	bf00      	nop
 809487e:	371c      	adds	r7, #28
 8094880:	46bd      	mov	sp, r7
 8094882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094886:	4770      	bx	lr
 8094888:	c007f800 	.word	0xc007f800

0809488c <SRAM_WriteBuffer>:

void SRAM_WriteBuffer(uint32_t addr, uint8_t *buffer, int length) {
 809488c:	b480      	push	{r7}
 809488e:	b087      	sub	sp, #28
 8094890:	af00      	add	r7, sp, #0
 8094892:	60f8      	str	r0, [r7, #12]
 8094894:	60b9      	str	r1, [r7, #8]
 8094896:	607a      	str	r2, [r7, #4]
	uint8_t *p=(uint8_t*)(&_legacysram_start);
 8094898:	4b0e      	ldr	r3, [pc, #56]	; (80948d4 <SRAM_WriteBuffer+0x48>)
 809489a:	617b      	str	r3, [r7, #20]
	p+=addr;
 809489c:	697a      	ldr	r2, [r7, #20]
 809489e:	68fb      	ldr	r3, [r7, #12]
 80948a0:	4413      	add	r3, r2
 80948a2:	617b      	str	r3, [r7, #20]

	for (int i=0;i < length; i++)
 80948a4:	2300      	movs	r3, #0
 80948a6:	613b      	str	r3, [r7, #16]
 80948a8:	e00a      	b.n	80948c0 <SRAM_WriteBuffer+0x34>
	{
		*(p++) = *(buffer++);
 80948aa:	68ba      	ldr	r2, [r7, #8]
 80948ac:	1c53      	adds	r3, r2, #1
 80948ae:	60bb      	str	r3, [r7, #8]
 80948b0:	697b      	ldr	r3, [r7, #20]
 80948b2:	1c59      	adds	r1, r3, #1
 80948b4:	6179      	str	r1, [r7, #20]
 80948b6:	7812      	ldrb	r2, [r2, #0]
 80948b8:	701a      	strb	r2, [r3, #0]
	for (int i=0;i < length; i++)
 80948ba:	693b      	ldr	r3, [r7, #16]
 80948bc:	3301      	adds	r3, #1
 80948be:	613b      	str	r3, [r7, #16]
 80948c0:	693a      	ldr	r2, [r7, #16]
 80948c2:	687b      	ldr	r3, [r7, #4]
 80948c4:	429a      	cmp	r2, r3
 80948c6:	dbf0      	blt.n	80948aa <SRAM_WriteBuffer+0x1e>
	}
}
 80948c8:	bf00      	nop
 80948ca:	371c      	adds	r7, #28
 80948cc:	46bd      	mov	sp, r7
 80948ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80948d2:	4770      	bx	lr
 80948d4:	c007f800 	.word	0xc007f800

080948d8 <TIM7_IRQHandler>:
/**
 * @brief  This function handles TIM7 interrupt request.
 * @retval None
 */
void TIM7_IRQHandler (void)
{
 80948d8:	b580      	push	{r7, lr}
 80948da:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&LegacyTimHandle);
 80948dc:	4805      	ldr	r0, [pc, #20]	; (80948f4 <TIM7_IRQHandler+0x1c>)
 80948de:	f7fc fa4a 	bl	8090d76 <HAL_TIM_IRQHandler>

	if (LegacyTimerCallback != 0x0) LegacyTimerCallback();
 80948e2:	4b05      	ldr	r3, [pc, #20]	; (80948f8 <TIM7_IRQHandler+0x20>)
 80948e4:	681b      	ldr	r3, [r3, #0]
 80948e6:	2b00      	cmp	r3, #0
 80948e8:	d002      	beq.n	80948f0 <TIM7_IRQHandler+0x18>
 80948ea:	4b03      	ldr	r3, [pc, #12]	; (80948f8 <TIM7_IRQHandler+0x20>)
 80948ec:	681b      	ldr	r3, [r3, #0]
 80948ee:	4798      	blx	r3
}
 80948f0:	bf00      	nop
 80948f2:	bd80      	pop	{r7, pc}
 80948f4:	2002ef70 	.word	0x2002ef70
 80948f8:	2000bc34 	.word	0x2000bc34

080948fc <TIMER_Start>:

int TIMER_Start(void) {
 80948fc:	b480      	push	{r7}
 80948fe:	af00      	add	r7, sp, #0
	if (LegacyTimerCallback != 0x0) {
 8094900:	4b09      	ldr	r3, [pc, #36]	; (8094928 <TIMER_Start+0x2c>)
 8094902:	681b      	ldr	r3, [r3, #0]
 8094904:	2b00      	cmp	r3, #0
 8094906:	d009      	beq.n	809491c <TIMER_Start+0x20>
		/* Enable TIM7 Update interrupt */
		__HAL_TIM_ENABLE_IT(&LegacyTimHandle, TIM_IT_UPDATE);
 8094908:	4b08      	ldr	r3, [pc, #32]	; (809492c <TIMER_Start+0x30>)
 809490a:	681b      	ldr	r3, [r3, #0]
 809490c:	68da      	ldr	r2, [r3, #12]
 809490e:	4b07      	ldr	r3, [pc, #28]	; (809492c <TIMER_Start+0x30>)
 8094910:	681b      	ldr	r3, [r3, #0]
 8094912:	f042 0201 	orr.w	r2, r2, #1
 8094916:	60da      	str	r2, [r3, #12]
		return 1;
 8094918:	2301      	movs	r3, #1
 809491a:	e000      	b.n	809491e <TIMER_Start+0x22>
	} else
		return 0;
 809491c:	2300      	movs	r3, #0
}
 809491e:	4618      	mov	r0, r3
 8094920:	46bd      	mov	sp, r7
 8094922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094926:	4770      	bx	lr
 8094928:	2000bc34 	.word	0x2000bc34
 809492c:	2002ef70 	.word	0x2002ef70

08094930 <TIMER_Stop>:

void TIMER_Stop(void) {
 8094930:	b480      	push	{r7}
 8094932:	af00      	add	r7, sp, #0

	/* Disable TIM7 update Interrupt */
	__HAL_TIM_DISABLE_IT(&LegacyTimHandle, TIM_IT_UPDATE);
 8094934:	4b06      	ldr	r3, [pc, #24]	; (8094950 <TIMER_Stop+0x20>)
 8094936:	681b      	ldr	r3, [r3, #0]
 8094938:	68da      	ldr	r2, [r3, #12]
 809493a:	4b05      	ldr	r3, [pc, #20]	; (8094950 <TIMER_Stop+0x20>)
 809493c:	681b      	ldr	r3, [r3, #0]
 809493e:	f022 0201 	bic.w	r2, r2, #1
 8094942:	60da      	str	r2, [r3, #12]
}
 8094944:	bf00      	nop
 8094946:	46bd      	mov	sp, r7
 8094948:	f85d 7b04 	ldr.w	r7, [sp], #4
 809494c:	4770      	bx	lr
 809494e:	bf00      	nop
 8094950:	2002ef70 	.word	0x2002ef70

08094954 <TIMER_SetEventCallback>:

void TIMER_SetEventCallback(TIMER_EventCallback callback) {
 8094954:	b480      	push	{r7}
 8094956:	b083      	sub	sp, #12
 8094958:	af00      	add	r7, sp, #0
 809495a:	6078      	str	r0, [r7, #4]
	LegacyTimerCallback = callback;
 809495c:	4a04      	ldr	r2, [pc, #16]	; (8094970 <TIMER_SetEventCallback+0x1c>)
 809495e:	687b      	ldr	r3, [r7, #4]
 8094960:	6013      	str	r3, [r2, #0]
}
 8094962:	bf00      	nop
 8094964:	370c      	adds	r7, #12
 8094966:	46bd      	mov	sp, r7
 8094968:	f85d 7b04 	ldr.w	r7, [sp], #4
 809496c:	4770      	bx	lr
 809496e:	bf00      	nop
 8094970:	2000bc34 	.word	0x2000bc34

08094974 <MELODY_Init>:
uint32_t MELODY_Length;

TIM_HandleTypeDef MelodyTimHandle;

MELODY_Status MELODY_Init(void)
{
 8094974:	b580      	push	{r7, lr}
 8094976:	b08a      	sub	sp, #40	; 0x28
 8094978:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef    clkconfig;
	uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 809497a:	2300      	movs	r3, #0
 809497c:	623b      	str	r3, [r7, #32]
	uint32_t              uwPrescalerValue = 0U;
 809497e:	2300      	movs	r3, #0
 8094980:	61fb      	str	r3, [r7, #28]
	uint32_t              pFLatency;

	/* Configure the TIM4 IRQ priority */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0x4U ,0U);
 8094982:	2200      	movs	r2, #0
 8094984:	2104      	movs	r1, #4
 8094986:	201e      	movs	r0, #30
 8094988:	f7f4 fce6 	bl	8089358 <HAL_NVIC_SetPriority>

	/* Enable the TIM4 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 809498c:	201e      	movs	r0, #30
 809498e:	f7f4 fcff 	bl	8089390 <HAL_NVIC_EnableIRQ>

	/* Enable TIM4 clock */
	__HAL_RCC_TIM4_CLK_ENABLE();
 8094992:	4b21      	ldr	r3, [pc, #132]	; (8094a18 <MELODY_Init+0xa4>)
 8094994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8094996:	4a20      	ldr	r2, [pc, #128]	; (8094a18 <MELODY_Init+0xa4>)
 8094998:	f043 0304 	orr.w	r3, r3, #4
 809499c:	6413      	str	r3, [r2, #64]	; 0x40
 809499e:	4b1e      	ldr	r3, [pc, #120]	; (8094a18 <MELODY_Init+0xa4>)
 80949a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80949a2:	f003 0304 	and.w	r3, r3, #4
 80949a6:	603b      	str	r3, [r7, #0]
 80949a8:	683b      	ldr	r3, [r7, #0]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80949aa:	1d3a      	adds	r2, r7, #4
 80949ac:	f107 0308 	add.w	r3, r7, #8
 80949b0:	4611      	mov	r1, r2
 80949b2:	4618      	mov	r0, r3
 80949b4:	f7f8 f9f4 	bl	808cda0 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80949b8:	697b      	ldr	r3, [r7, #20]
 80949ba:	623b      	str	r3, [r7, #32]

	/* Compute TIM4 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80949bc:	6a3b      	ldr	r3, [r7, #32]
 80949be:	2b00      	cmp	r3, #0
 80949c0:	d103      	bne.n	80949ca <MELODY_Init+0x56>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80949c2:	f7f8 f9c5 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 80949c6:	6278      	str	r0, [r7, #36]	; 0x24
 80949c8:	e004      	b.n	80949d4 <MELODY_Init+0x60>
	}
	else
	{
		uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80949ca:	f7f8 f9c1 	bl	808cd50 <HAL_RCC_GetPCLK1Freq>
 80949ce:	4603      	mov	r3, r0
 80949d0:	005b      	lsls	r3, r3, #1
 80949d2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM4 counter clock equal to 10KHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 10000U) - 1U);
 80949d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80949d6:	4a11      	ldr	r2, [pc, #68]	; (8094a1c <MELODY_Init+0xa8>)
 80949d8:	fba2 2303 	umull	r2, r3, r2, r3
 80949dc:	0b5b      	lsrs	r3, r3, #13
 80949de:	3b01      	subs	r3, #1
 80949e0:	61fb      	str	r3, [r7, #28]

	/* Initialize TIM4 */
	MelodyTimHandle.Instance = TIM4;
 80949e2:	4b0f      	ldr	r3, [pc, #60]	; (8094a20 <MELODY_Init+0xac>)
 80949e4:	4a0f      	ldr	r2, [pc, #60]	; (8094a24 <MELODY_Init+0xb0>)
 80949e6:	601a      	str	r2, [r3, #0]
			  + Period = 65535
			  + Prescaler = (uwTimclock/10000 - 1) to have a 0.01MHz counter clock.
			  + ClockDivision = 0
			  + Counter direction = Up
	 */
	MelodyTimHandle.Init.Period = 65535;
 80949e8:	4b0d      	ldr	r3, [pc, #52]	; (8094a20 <MELODY_Init+0xac>)
 80949ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80949ee:	60da      	str	r2, [r3, #12]
	MelodyTimHandle.Init.Prescaler = uwPrescalerValue;
 80949f0:	4a0b      	ldr	r2, [pc, #44]	; (8094a20 <MELODY_Init+0xac>)
 80949f2:	69fb      	ldr	r3, [r7, #28]
 80949f4:	6053      	str	r3, [r2, #4]
	MelodyTimHandle.Init.ClockDivision = 0;
 80949f6:	4b0a      	ldr	r3, [pc, #40]	; (8094a20 <MELODY_Init+0xac>)
 80949f8:	2200      	movs	r2, #0
 80949fa:	611a      	str	r2, [r3, #16]
	MelodyTimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80949fc:	4b08      	ldr	r3, [pc, #32]	; (8094a20 <MELODY_Init+0xac>)
 80949fe:	2200      	movs	r2, #0
 8094a00:	609a      	str	r2, [r3, #8]
	MelodyTimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8094a02:	4b07      	ldr	r3, [pc, #28]	; (8094a20 <MELODY_Init+0xac>)
 8094a04:	2200      	movs	r2, #0
 8094a06:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(&MelodyTimHandle) == HAL_OK)
 8094a08:	4805      	ldr	r0, [pc, #20]	; (8094a20 <MELODY_Init+0xac>)
 8094a0a:	f7fc f91e 	bl	8090c4a <HAL_TIM_Base_Init>
	{
		/* Start the TIM time Base generation with interrupt disabled  */
		//HAL_TIM_Base_Start(&MelodyTimHandle);
	}

	return MELODY_SUCCESS;
 8094a0e:	2300      	movs	r3, #0
}
 8094a10:	4618      	mov	r0, r3
 8094a12:	3728      	adds	r7, #40	; 0x28
 8094a14:	46bd      	mov	sp, r7
 8094a16:	bd80      	pop	{r7, pc}
 8094a18:	40023800 	.word	0x40023800
 8094a1c:	d1b71759 	.word	0xd1b71759
 8094a20:	2002efc4 	.word	0x2002efc4
 8094a24:	40000800 	.word	0x40000800

08094a28 <MELODY_Start>:

MELODY_Status MELODY_Start(MELODY_Notes *music, uint32_t length)
{
 8094a28:	b580      	push	{r7, lr}
 8094a2a:	b082      	sub	sp, #8
 8094a2c:	af00      	add	r7, sp, #0
 8094a2e:	6078      	str	r0, [r7, #4]
 8094a30:	6039      	str	r1, [r7, #0]
	//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
	//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	//	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	//	NVIC_Init(&NVIC_InitStructure);

	MELODY_CurrentMusic = music;
 8094a32:	4a26      	ldr	r2, [pc, #152]	; (8094acc <MELODY_Start+0xa4>)
 8094a34:	687b      	ldr	r3, [r7, #4]
 8094a36:	6013      	str	r3, [r2, #0]
	MELODY_CurrentPtr = 0;
 8094a38:	4b25      	ldr	r3, [pc, #148]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a3a:	2200      	movs	r2, #0
 8094a3c:	801a      	strh	r2, [r3, #0]
	MELODY_Length = length;
 8094a3e:	4a25      	ldr	r2, [pc, #148]	; (8094ad4 <MELODY_Start+0xac>)
 8094a40:	683b      	ldr	r3, [r7, #0]
 8094a42:	6013      	str	r3, [r2, #0]

	do {
		SYNTH_NoteOn(music[MELODY_CurrentPtr].channel, music[MELODY_CurrentPtr].note);
 8094a44:	4b22      	ldr	r3, [pc, #136]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a46:	881b      	ldrh	r3, [r3, #0]
 8094a48:	009b      	lsls	r3, r3, #2
 8094a4a:	687a      	ldr	r2, [r7, #4]
 8094a4c:	4413      	add	r3, r2
 8094a4e:	785b      	ldrb	r3, [r3, #1]
 8094a50:	4618      	mov	r0, r3
 8094a52:	4b1f      	ldr	r3, [pc, #124]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a54:	881b      	ldrh	r3, [r3, #0]
 8094a56:	009b      	lsls	r3, r3, #2
 8094a58:	687a      	ldr	r2, [r7, #4]
 8094a5a:	4413      	add	r3, r2
 8094a5c:	781b      	ldrb	r3, [r3, #0]
 8094a5e:	4619      	mov	r1, r3
 8094a60:	f000 f9e0 	bl	8094e24 <SYNTH_NoteOn>

		//if (music[MELODY_CurrentPtr].duree != 0) TIM_SetAutoreload(TIM4, music[MELODY_CurrentPtr].duree);
		if (music[MELODY_CurrentPtr].duree != 0) {
 8094a64:	4b1a      	ldr	r3, [pc, #104]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a66:	881b      	ldrh	r3, [r3, #0]
 8094a68:	009b      	lsls	r3, r3, #2
 8094a6a:	687a      	ldr	r2, [r7, #4]
 8094a6c:	4413      	add	r3, r2
 8094a6e:	885b      	ldrh	r3, [r3, #2]
 8094a70:	2b00      	cmp	r3, #0
 8094a72:	d011      	beq.n	8094a98 <MELODY_Start+0x70>
			__HAL_TIM_SET_AUTORELOAD(&MelodyTimHandle, music[MELODY_CurrentPtr].duree);
 8094a74:	4b16      	ldr	r3, [pc, #88]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a76:	881b      	ldrh	r3, [r3, #0]
 8094a78:	009b      	lsls	r3, r3, #2
 8094a7a:	687a      	ldr	r2, [r7, #4]
 8094a7c:	4413      	add	r3, r2
 8094a7e:	885a      	ldrh	r2, [r3, #2]
 8094a80:	4b15      	ldr	r3, [pc, #84]	; (8094ad8 <MELODY_Start+0xb0>)
 8094a82:	681b      	ldr	r3, [r3, #0]
 8094a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8094a86:	4b12      	ldr	r3, [pc, #72]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a88:	881b      	ldrh	r3, [r3, #0]
 8094a8a:	009b      	lsls	r3, r3, #2
 8094a8c:	687a      	ldr	r2, [r7, #4]
 8094a8e:	4413      	add	r3, r2
 8094a90:	885b      	ldrh	r3, [r3, #2]
 8094a92:	461a      	mov	r2, r3
 8094a94:	4b10      	ldr	r3, [pc, #64]	; (8094ad8 <MELODY_Start+0xb0>)
 8094a96:	60da      	str	r2, [r3, #12]
		}

		MELODY_CurrentPtr++;
 8094a98:	4b0d      	ldr	r3, [pc, #52]	; (8094ad0 <MELODY_Start+0xa8>)
 8094a9a:	881b      	ldrh	r3, [r3, #0]
 8094a9c:	3301      	adds	r3, #1
 8094a9e:	b29a      	uxth	r2, r3
 8094aa0:	4b0b      	ldr	r3, [pc, #44]	; (8094ad0 <MELODY_Start+0xa8>)
 8094aa2:	801a      	strh	r2, [r3, #0]
	} while (music[MELODY_CurrentPtr-1].duree == 0);
 8094aa4:	4b0a      	ldr	r3, [pc, #40]	; (8094ad0 <MELODY_Start+0xa8>)
 8094aa6:	881b      	ldrh	r3, [r3, #0]
 8094aa8:	461a      	mov	r2, r3
 8094aaa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8094aae:	4413      	add	r3, r2
 8094ab0:	009b      	lsls	r3, r3, #2
 8094ab2:	687a      	ldr	r2, [r7, #4]
 8094ab4:	4413      	add	r3, r2
 8094ab6:	885b      	ldrh	r3, [r3, #2]
 8094ab8:	2b00      	cmp	r3, #0
 8094aba:	d0c3      	beq.n	8094a44 <MELODY_Start+0x1c>

	/* Lance le timer4 */
	/* Enable Up IT */
	HAL_TIM_Base_Start_IT(&MelodyTimHandle);
 8094abc:	4806      	ldr	r0, [pc, #24]	; (8094ad8 <MELODY_Start+0xb0>)
 8094abe:	f7fc f914 	bl	8090cea <HAL_TIM_Base_Start_IT>
//	TIM_ClearFlag(TIM4, TIM_FLAG_Update);
//	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
//	TIM_Cmd(TIM4, ENABLE);

	return MELODY_SUCCESS;
 8094ac2:	2300      	movs	r3, #0
}
 8094ac4:	4618      	mov	r0, r3
 8094ac6:	3708      	adds	r7, #8
 8094ac8:	46bd      	mov	sp, r7
 8094aca:	bd80      	pop	{r7, pc}
 8094acc:	2002efc0 	.word	0x2002efc0
 8094ad0:	2002f008 	.word	0x2002f008
 8094ad4:	2002f004 	.word	0x2002f004
 8094ad8:	2002efc4 	.word	0x2002efc4

08094adc <MELODY_Stop>:

MELODY_Status MELODY_Stop(void)
{
 8094adc:	b580      	push	{r7, lr}
 8094ade:	af00      	add	r7, sp, #0
	/* arret du Timer 4 */
	HAL_TIM_Base_Stop_IT(&MelodyTimHandle);
 8094ae0:	4805      	ldr	r0, [pc, #20]	; (8094af8 <MELODY_Stop+0x1c>)
 8094ae2:	f7fc f91d 	bl	8090d20 <HAL_TIM_Base_Stop_IT>
//	TIM_Cmd(TIM4, DISABLE);
//	TIM_ClearFlag(TIM4, TIM_FLAG_Update);
//	RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
//	RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);

	MELODY_CurrentPtr=0;
 8094ae6:	4b05      	ldr	r3, [pc, #20]	; (8094afc <MELODY_Stop+0x20>)
 8094ae8:	2200      	movs	r2, #0
 8094aea:	801a      	strh	r2, [r3, #0]
	MELODY_CurrentMusic = 0;
 8094aec:	4b04      	ldr	r3, [pc, #16]	; (8094b00 <MELODY_Stop+0x24>)
 8094aee:	2200      	movs	r2, #0
 8094af0:	601a      	str	r2, [r3, #0]

	return MELODY_SUCCESS;
 8094af2:	2300      	movs	r3, #0
}
 8094af4:	4618      	mov	r0, r3
 8094af6:	bd80      	pop	{r7, pc}
 8094af8:	2002efc4 	.word	0x2002efc4
 8094afc:	2002f008 	.word	0x2002f008
 8094b00:	2002efc0 	.word	0x2002efc0

08094b04 <MELODY_GetPosition>:

MELODY_Status MELODY_GetPosition(uint8_t *pos)
{
 8094b04:	b480      	push	{r7}
 8094b06:	b083      	sub	sp, #12
 8094b08:	af00      	add	r7, sp, #0
 8094b0a:	6078      	str	r0, [r7, #4]
	*pos = (uint8_t)(MELODY_CurrentPtr*255/MELODY_Length);
 8094b0c:	4b0a      	ldr	r3, [pc, #40]	; (8094b38 <MELODY_GetPosition+0x34>)
 8094b0e:	881b      	ldrh	r3, [r3, #0]
 8094b10:	461a      	mov	r2, r3
 8094b12:	4613      	mov	r3, r2
 8094b14:	021b      	lsls	r3, r3, #8
 8094b16:	1a9b      	subs	r3, r3, r2
 8094b18:	461a      	mov	r2, r3
 8094b1a:	4b08      	ldr	r3, [pc, #32]	; (8094b3c <MELODY_GetPosition+0x38>)
 8094b1c:	681b      	ldr	r3, [r3, #0]
 8094b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8094b22:	b2da      	uxtb	r2, r3
 8094b24:	687b      	ldr	r3, [r7, #4]
 8094b26:	701a      	strb	r2, [r3, #0]
	return MELODY_SUCCESS;
 8094b28:	2300      	movs	r3, #0
}
 8094b2a:	4618      	mov	r0, r3
 8094b2c:	370c      	adds	r7, #12
 8094b2e:	46bd      	mov	sp, r7
 8094b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094b34:	4770      	bx	lr
 8094b36:	bf00      	nop
 8094b38:	2002f008 	.word	0x2002f008
 8094b3c:	2002f004 	.word	0x2002f004

08094b40 <TIM4_IRQHandler>:
 * @brief  This function handles TIM4 interrupt request.
 * @retval None
 */

void TIM4_IRQHandler(void)
{
 8094b40:	b580      	push	{r7, lr}
 8094b42:	af00      	add	r7, sp, #0
	/* Acquitement du timer 4 */
	HAL_TIM_IRQHandler(&MelodyTimHandle);
 8094b44:	483c      	ldr	r0, [pc, #240]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094b46:	f7fc f916 	bl	8090d76 <HAL_TIM_IRQHandler>

	__HAL_TIM_DISABLE(&MelodyTimHandle);
 8094b4a:	4b3b      	ldr	r3, [pc, #236]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094b4c:	681b      	ldr	r3, [r3, #0]
 8094b4e:	6a1a      	ldr	r2, [r3, #32]
 8094b50:	f241 1311 	movw	r3, #4369	; 0x1111
 8094b54:	4013      	ands	r3, r2
 8094b56:	2b00      	cmp	r3, #0
 8094b58:	d10f      	bne.n	8094b7a <TIM4_IRQHandler+0x3a>
 8094b5a:	4b37      	ldr	r3, [pc, #220]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094b5c:	681b      	ldr	r3, [r3, #0]
 8094b5e:	6a1a      	ldr	r2, [r3, #32]
 8094b60:	f240 4344 	movw	r3, #1092	; 0x444
 8094b64:	4013      	ands	r3, r2
 8094b66:	2b00      	cmp	r3, #0
 8094b68:	d107      	bne.n	8094b7a <TIM4_IRQHandler+0x3a>
 8094b6a:	4b33      	ldr	r3, [pc, #204]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094b6c:	681b      	ldr	r3, [r3, #0]
 8094b6e:	681a      	ldr	r2, [r3, #0]
 8094b70:	4b31      	ldr	r3, [pc, #196]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094b72:	681b      	ldr	r3, [r3, #0]
 8094b74:	f022 0201 	bic.w	r2, r2, #1
 8094b78:	601a      	str	r2, [r3, #0]
	/* arret du Timer 4 */
//	TIM_Cmd(TIM4, DISABLE);
//	TIM_ClearFlag(TIM4, TIM_FLAG_Update);

	if (MELODY_CurrentPtr<MELODY_Length)
 8094b7a:	4b30      	ldr	r3, [pc, #192]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094b7c:	881b      	ldrh	r3, [r3, #0]
 8094b7e:	461a      	mov	r2, r3
 8094b80:	4b2f      	ldr	r3, [pc, #188]	; (8094c40 <TIM4_IRQHandler+0x100>)
 8094b82:	681b      	ldr	r3, [r3, #0]
 8094b84:	429a      	cmp	r2, r3
 8094b86:	d251      	bcs.n	8094c2c <TIM4_IRQHandler+0xec>
	{
		do {
			SYNTH_NoteOn(
					MELODY_CurrentMusic[MELODY_CurrentPtr].channel,
 8094b88:	4b2e      	ldr	r3, [pc, #184]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094b8a:	681a      	ldr	r2, [r3, #0]
 8094b8c:	4b2b      	ldr	r3, [pc, #172]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094b8e:	881b      	ldrh	r3, [r3, #0]
 8094b90:	009b      	lsls	r3, r3, #2
 8094b92:	4413      	add	r3, r2
 8094b94:	785b      	ldrb	r3, [r3, #1]
			SYNTH_NoteOn(
 8094b96:	4618      	mov	r0, r3
					MELODY_CurrentMusic[MELODY_CurrentPtr].note);
 8094b98:	4b2a      	ldr	r3, [pc, #168]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094b9a:	681a      	ldr	r2, [r3, #0]
 8094b9c:	4b27      	ldr	r3, [pc, #156]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094b9e:	881b      	ldrh	r3, [r3, #0]
 8094ba0:	009b      	lsls	r3, r3, #2
 8094ba2:	4413      	add	r3, r2
 8094ba4:	781b      	ldrb	r3, [r3, #0]
			SYNTH_NoteOn(
 8094ba6:	4619      	mov	r1, r3
 8094ba8:	f000 f93c 	bl	8094e24 <SYNTH_NoteOn>

			//if (MELODY_CurrentMusic[MELODY_CurrentPtr].duree != 0) TIM_SetAutoreload(TIM4, MELODY_CurrentMusic[MELODY_CurrentPtr].duree);
			if (MELODY_CurrentMusic[MELODY_CurrentPtr].duree != 0) {
 8094bac:	4b25      	ldr	r3, [pc, #148]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094bae:	681a      	ldr	r2, [r3, #0]
 8094bb0:	4b22      	ldr	r3, [pc, #136]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094bb2:	881b      	ldrh	r3, [r3, #0]
 8094bb4:	009b      	lsls	r3, r3, #2
 8094bb6:	4413      	add	r3, r2
 8094bb8:	885b      	ldrh	r3, [r3, #2]
 8094bba:	2b00      	cmp	r3, #0
 8094bbc:	d013      	beq.n	8094be6 <TIM4_IRQHandler+0xa6>
				__HAL_TIM_SET_AUTORELOAD(&MelodyTimHandle, MELODY_CurrentMusic[MELODY_CurrentPtr].duree);
 8094bbe:	4b21      	ldr	r3, [pc, #132]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094bc0:	681a      	ldr	r2, [r3, #0]
 8094bc2:	4b1e      	ldr	r3, [pc, #120]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094bc4:	881b      	ldrh	r3, [r3, #0]
 8094bc6:	009b      	lsls	r3, r3, #2
 8094bc8:	4413      	add	r3, r2
 8094bca:	885a      	ldrh	r2, [r3, #2]
 8094bcc:	4b1a      	ldr	r3, [pc, #104]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094bce:	681b      	ldr	r3, [r3, #0]
 8094bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8094bd2:	4b1c      	ldr	r3, [pc, #112]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094bd4:	681a      	ldr	r2, [r3, #0]
 8094bd6:	4b19      	ldr	r3, [pc, #100]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094bd8:	881b      	ldrh	r3, [r3, #0]
 8094bda:	009b      	lsls	r3, r3, #2
 8094bdc:	4413      	add	r3, r2
 8094bde:	885b      	ldrh	r3, [r3, #2]
 8094be0:	461a      	mov	r2, r3
 8094be2:	4b15      	ldr	r3, [pc, #84]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094be4:	60da      	str	r2, [r3, #12]
			}

			MELODY_CurrentPtr++;
 8094be6:	4b15      	ldr	r3, [pc, #84]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094be8:	881b      	ldrh	r3, [r3, #0]
 8094bea:	3301      	adds	r3, #1
 8094bec:	b29a      	uxth	r2, r3
 8094bee:	4b13      	ldr	r3, [pc, #76]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094bf0:	801a      	strh	r2, [r3, #0]
		} while ((MELODY_CurrentMusic[MELODY_CurrentPtr-1].duree == 0) && (MELODY_CurrentPtr<MELODY_Length));
 8094bf2:	4b14      	ldr	r3, [pc, #80]	; (8094c44 <TIM4_IRQHandler+0x104>)
 8094bf4:	681a      	ldr	r2, [r3, #0]
 8094bf6:	4b11      	ldr	r3, [pc, #68]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094bf8:	881b      	ldrh	r3, [r3, #0]
 8094bfa:	4619      	mov	r1, r3
 8094bfc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8094c00:	440b      	add	r3, r1
 8094c02:	009b      	lsls	r3, r3, #2
 8094c04:	4413      	add	r3, r2
 8094c06:	885b      	ldrh	r3, [r3, #2]
 8094c08:	2b00      	cmp	r3, #0
 8094c0a:	d106      	bne.n	8094c1a <TIM4_IRQHandler+0xda>
 8094c0c:	4b0b      	ldr	r3, [pc, #44]	; (8094c3c <TIM4_IRQHandler+0xfc>)
 8094c0e:	881b      	ldrh	r3, [r3, #0]
 8094c10:	461a      	mov	r2, r3
 8094c12:	4b0b      	ldr	r3, [pc, #44]	; (8094c40 <TIM4_IRQHandler+0x100>)
 8094c14:	681b      	ldr	r3, [r3, #0]
 8094c16:	429a      	cmp	r2, r3
 8094c18:	d3b6      	bcc.n	8094b88 <TIM4_IRQHandler+0x48>

		/* reconfigure le timer4 */
		__HAL_TIM_ENABLE(&MelodyTimHandle);
 8094c1a:	4b07      	ldr	r3, [pc, #28]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094c1c:	681b      	ldr	r3, [r3, #0]
 8094c1e:	681a      	ldr	r2, [r3, #0]
 8094c20:	4b05      	ldr	r3, [pc, #20]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094c22:	681b      	ldr	r3, [r3, #0]
 8094c24:	f042 0201 	orr.w	r2, r2, #1
 8094c28:	601a      	str	r2, [r3, #0]

	}
	else HAL_TIM_Base_Stop_IT(&MelodyTimHandle);
}
 8094c2a:	e002      	b.n	8094c32 <TIM4_IRQHandler+0xf2>
	else HAL_TIM_Base_Stop_IT(&MelodyTimHandle);
 8094c2c:	4802      	ldr	r0, [pc, #8]	; (8094c38 <TIM4_IRQHandler+0xf8>)
 8094c2e:	f7fc f877 	bl	8090d20 <HAL_TIM_Base_Stop_IT>
}
 8094c32:	bf00      	nop
 8094c34:	bd80      	pop	{r7, pc}
 8094c36:	bf00      	nop
 8094c38:	2002efc4 	.word	0x2002efc4
 8094c3c:	2002f008 	.word	0x2002f008
 8094c40:	2002f004 	.word	0x2002f004
 8094c44:	2002efc0 	.word	0x2002efc0

08094c48 <SYNTH_Start>:
static void SYNTH_FillBuffer(int buffer_nbr, SYNTH_Channel *channels);

//int16_t SYNTH_LocalBuffer[AUDIO_BUFFER_SIZE];
uint8_t SYNTH_LocalBuffer[AUDIO_BUFFER_SIZE];

SYNTH_Status SYNTH_Start(void) {
 8094c48:	b580      	push	{r7, lr}
 8094c4a:	b082      	sub	sp, #8
 8094c4c:	af00      	add	r7, sp, #0
	int i;

	AUDIO_Stop();
 8094c4e:	f7ff fd09 	bl	8094664 <AUDIO_Stop>

	AUDIO_SetEventCallback(SYNTH_AudioCallback);
 8094c52:	4823      	ldr	r0, [pc, #140]	; (8094ce0 <SYNTH_Start+0x98>)
 8094c54:	f7ff fd54 	bl	8094700 <AUDIO_SetEventCallback>
	//SYNTH_Buffer_1 = AUDIO_Buffer.buffer1;
	//SYNTH_Buffer_2 = AUDIO_Buffer.buffer2;
	//SYNTH_Buffer_1 = AUDIO_Buffer.buffer1;
	//SYNTH_Buffer_2 = AUDIO_Buffer.buffer2;

	for (i=0; i<SYNTH_ChannelsNbr; i++)
 8094c58:	2300      	movs	r3, #0
 8094c5a:	607b      	str	r3, [r7, #4]
 8094c5c:	e02d      	b.n	8094cba <SYNTH_Start+0x72>
	{
		SYNTH_Channels[i].counter=0.0f;
 8094c5e:	4a21      	ldr	r2, [pc, #132]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094c60:	687b      	ldr	r3, [r7, #4]
 8094c62:	015b      	lsls	r3, r3, #5
 8094c64:	4413      	add	r3, r2
 8094c66:	3308      	adds	r3, #8
 8094c68:	f04f 0200 	mov.w	r2, #0
 8094c6c:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].increment=0.0f;
 8094c6e:	4a1d      	ldr	r2, [pc, #116]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094c70:	687b      	ldr	r3, [r7, #4]
 8094c72:	015b      	lsls	r3, r3, #5
 8094c74:	4413      	add	r3, r2
 8094c76:	330c      	adds	r3, #12
 8094c78:	f04f 0200 	mov.w	r2, #0
 8094c7c:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].volume=0;
 8094c7e:	4a19      	ldr	r2, [pc, #100]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094c80:	687b      	ldr	r3, [r7, #4]
 8094c82:	015b      	lsls	r3, r3, #5
 8094c84:	4413      	add	r3, r2
 8094c86:	3310      	adds	r3, #16
 8094c88:	2200      	movs	r2, #0
 8094c8a:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[i].note = MUTE;
 8094c8c:	4a15      	ldr	r2, [pc, #84]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094c8e:	687b      	ldr	r3, [r7, #4]
 8094c90:	015b      	lsls	r3, r3, #5
 8094c92:	4413      	add	r3, r2
 8094c94:	3304      	adds	r3, #4
 8094c96:	22ff      	movs	r2, #255	; 0xff
 8094c98:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[i].instrument = (SYNTH_Instrument*)&SYNTH_Inst_Piano;
 8094c9a:	4a12      	ldr	r2, [pc, #72]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094c9c:	687b      	ldr	r3, [r7, #4]
 8094c9e:	015b      	lsls	r3, r3, #5
 8094ca0:	4413      	add	r3, r2
 8094ca2:	4a11      	ldr	r2, [pc, #68]	; (8094ce8 <SYNTH_Start+0xa0>)
 8094ca4:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].AHDSR_state = AHDSR_IDLE;
 8094ca6:	4a0f      	ldr	r2, [pc, #60]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094ca8:	687b      	ldr	r3, [r7, #4]
 8094caa:	015b      	lsls	r3, r3, #5
 8094cac:	4413      	add	r3, r2
 8094cae:	331d      	adds	r3, #29
 8094cb0:	2200      	movs	r2, #0
 8094cb2:	701a      	strb	r2, [r3, #0]
	for (i=0; i<SYNTH_ChannelsNbr; i++)
 8094cb4:	687b      	ldr	r3, [r7, #4]
 8094cb6:	3301      	adds	r3, #1
 8094cb8:	607b      	str	r3, [r7, #4]
 8094cba:	687b      	ldr	r3, [r7, #4]
 8094cbc:	2b03      	cmp	r3, #3
 8094cbe:	ddce      	ble.n	8094c5e <SYNTH_Start+0x16>
	}

	SYNTH_FillBuffer(1, SYNTH_Channels);
 8094cc0:	4908      	ldr	r1, [pc, #32]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094cc2:	2001      	movs	r0, #1
 8094cc4:	f000 f956 	bl	8094f74 <SYNTH_FillBuffer>
	SYNTH_FillBuffer(2, SYNTH_Channels);
 8094cc8:	4906      	ldr	r1, [pc, #24]	; (8094ce4 <SYNTH_Start+0x9c>)
 8094cca:	2002      	movs	r0, #2
 8094ccc:	f000 f952 	bl	8094f74 <SYNTH_FillBuffer>

	AUDIO_Start();
 8094cd0:	f7ff fcb8 	bl	8094644 <AUDIO_Start>
	return SYNTH_SUCCESS;
 8094cd4:	2300      	movs	r3, #0
}
 8094cd6:	4618      	mov	r0, r3
 8094cd8:	3708      	adds	r7, #8
 8094cda:	46bd      	mov	sp, r7
 8094cdc:	bd80      	pop	{r7, pc}
 8094cde:	bf00      	nop
 8094ce0:	08095301 	.word	0x08095301
 8094ce4:	2002f00c 	.word	0x2002f00c
 8094ce8:	0809f20c 	.word	0x0809f20c

08094cec <SYNTH_Stop>:

SYNTH_Status SYNTH_Stop(void) {
 8094cec:	b580      	push	{r7, lr}
 8094cee:	b082      	sub	sp, #8
 8094cf0:	af00      	add	r7, sp, #0
	int i;

	AUDIO_Stop();
 8094cf2:	f7ff fcb7 	bl	8094664 <AUDIO_Stop>

	AUDIO_SetEventCallback((AUDIO_EventCallback)0x0);
 8094cf6:	2000      	movs	r0, #0
 8094cf8:	f7ff fd02 	bl	8094700 <AUDIO_SetEventCallback>

	for (i=0; i<SYNTH_ChannelsNbr; i++)
 8094cfc:	2300      	movs	r3, #0
 8094cfe:	607b      	str	r3, [r7, #4]
 8094d00:	e02d      	b.n	8094d5e <SYNTH_Stop+0x72>
	{
		SYNTH_Channels[i].counter=0.0f;
 8094d02:	4a1f      	ldr	r2, [pc, #124]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d04:	687b      	ldr	r3, [r7, #4]
 8094d06:	015b      	lsls	r3, r3, #5
 8094d08:	4413      	add	r3, r2
 8094d0a:	3308      	adds	r3, #8
 8094d0c:	f04f 0200 	mov.w	r2, #0
 8094d10:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].increment=0.0f;
 8094d12:	4a1b      	ldr	r2, [pc, #108]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d14:	687b      	ldr	r3, [r7, #4]
 8094d16:	015b      	lsls	r3, r3, #5
 8094d18:	4413      	add	r3, r2
 8094d1a:	330c      	adds	r3, #12
 8094d1c:	f04f 0200 	mov.w	r2, #0
 8094d20:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].volume=0;
 8094d22:	4a17      	ldr	r2, [pc, #92]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d24:	687b      	ldr	r3, [r7, #4]
 8094d26:	015b      	lsls	r3, r3, #5
 8094d28:	4413      	add	r3, r2
 8094d2a:	3310      	adds	r3, #16
 8094d2c:	2200      	movs	r2, #0
 8094d2e:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[i].note = MUTE;
 8094d30:	4a13      	ldr	r2, [pc, #76]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d32:	687b      	ldr	r3, [r7, #4]
 8094d34:	015b      	lsls	r3, r3, #5
 8094d36:	4413      	add	r3, r2
 8094d38:	3304      	adds	r3, #4
 8094d3a:	22ff      	movs	r2, #255	; 0xff
 8094d3c:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[i].instrument = (SYNTH_Instrument*)&SYNTH_Inst_Piano;
 8094d3e:	4a10      	ldr	r2, [pc, #64]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d40:	687b      	ldr	r3, [r7, #4]
 8094d42:	015b      	lsls	r3, r3, #5
 8094d44:	4413      	add	r3, r2
 8094d46:	4a0f      	ldr	r2, [pc, #60]	; (8094d84 <SYNTH_Stop+0x98>)
 8094d48:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[i].AHDSR_state = AHDSR_IDLE;
 8094d4a:	4a0d      	ldr	r2, [pc, #52]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d4c:	687b      	ldr	r3, [r7, #4]
 8094d4e:	015b      	lsls	r3, r3, #5
 8094d50:	4413      	add	r3, r2
 8094d52:	331d      	adds	r3, #29
 8094d54:	2200      	movs	r2, #0
 8094d56:	701a      	strb	r2, [r3, #0]
	for (i=0; i<SYNTH_ChannelsNbr; i++)
 8094d58:	687b      	ldr	r3, [r7, #4]
 8094d5a:	3301      	adds	r3, #1
 8094d5c:	607b      	str	r3, [r7, #4]
 8094d5e:	687b      	ldr	r3, [r7, #4]
 8094d60:	2b03      	cmp	r3, #3
 8094d62:	ddce      	ble.n	8094d02 <SYNTH_Stop+0x16>
	}

	SYNTH_FillBuffer(1, SYNTH_Channels);
 8094d64:	4906      	ldr	r1, [pc, #24]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d66:	2001      	movs	r0, #1
 8094d68:	f000 f904 	bl	8094f74 <SYNTH_FillBuffer>
	SYNTH_FillBuffer(2, SYNTH_Channels);
 8094d6c:	4904      	ldr	r1, [pc, #16]	; (8094d80 <SYNTH_Stop+0x94>)
 8094d6e:	2002      	movs	r0, #2
 8094d70:	f000 f900 	bl	8094f74 <SYNTH_FillBuffer>

	return SYNTH_SUCCESS;
 8094d74:	2300      	movs	r3, #0
}
 8094d76:	4618      	mov	r0, r3
 8094d78:	3708      	adds	r7, #8
 8094d7a:	46bd      	mov	sp, r7
 8094d7c:	bd80      	pop	{r7, pc}
 8094d7e:	bf00      	nop
 8094d80:	2002f00c 	.word	0x2002f00c
 8094d84:	0809f20c 	.word	0x0809f20c

08094d88 <SYNTH_SetMainVolume>:

SYNTH_Status SYNTH_SetMainVolume(int volume) {
 8094d88:	b480      	push	{r7}
 8094d8a:	b083      	sub	sp, #12
 8094d8c:	af00      	add	r7, sp, #0
 8094d8e:	6078      	str	r0, [r7, #4]

	SYNTH_MainVolume = volume;
 8094d90:	687b      	ldr	r3, [r7, #4]
 8094d92:	b2da      	uxtb	r2, r3
 8094d94:	4b04      	ldr	r3, [pc, #16]	; (8094da8 <SYNTH_SetMainVolume+0x20>)
 8094d96:	701a      	strb	r2, [r3, #0]

	return SYNTH_SUCCESS;
 8094d98:	2300      	movs	r3, #0
}
 8094d9a:	4618      	mov	r0, r3
 8094d9c:	370c      	adds	r7, #12
 8094d9e:	46bd      	mov	sp, r7
 8094da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094da4:	4770      	bx	lr
 8094da6:	bf00      	nop
 8094da8:	2002f08c 	.word	0x2002f08c

08094dac <SYNTH_SetVolume>:

SYNTH_Status SYNTH_SetVolume(int channel, int volume) {
 8094dac:	b480      	push	{r7}
 8094dae:	b083      	sub	sp, #12
 8094db0:	af00      	add	r7, sp, #0
 8094db2:	6078      	str	r0, [r7, #4]
 8094db4:	6039      	str	r1, [r7, #0]
	if ((channel <0) || (channel >= SYNTH_ChannelsNbr)) return SYNTH_INVALID_CHANNEL;
 8094db6:	687b      	ldr	r3, [r7, #4]
 8094db8:	2b00      	cmp	r3, #0
 8094dba:	db02      	blt.n	8094dc2 <SYNTH_SetVolume+0x16>
 8094dbc:	687b      	ldr	r3, [r7, #4]
 8094dbe:	2b03      	cmp	r3, #3
 8094dc0:	dd01      	ble.n	8094dc6 <SYNTH_SetVolume+0x1a>
 8094dc2:	2302      	movs	r3, #2
 8094dc4:	e009      	b.n	8094dda <SYNTH_SetVolume+0x2e>

	SYNTH_Channels[channel].volume=volume;
 8094dc6:	683b      	ldr	r3, [r7, #0]
 8094dc8:	b2d9      	uxtb	r1, r3
 8094dca:	4a07      	ldr	r2, [pc, #28]	; (8094de8 <SYNTH_SetVolume+0x3c>)
 8094dcc:	687b      	ldr	r3, [r7, #4]
 8094dce:	015b      	lsls	r3, r3, #5
 8094dd0:	4413      	add	r3, r2
 8094dd2:	3310      	adds	r3, #16
 8094dd4:	460a      	mov	r2, r1
 8094dd6:	701a      	strb	r2, [r3, #0]
	return SYNTH_SUCCESS;
 8094dd8:	2300      	movs	r3, #0
}
 8094dda:	4618      	mov	r0, r3
 8094ddc:	370c      	adds	r7, #12
 8094dde:	46bd      	mov	sp, r7
 8094de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094de4:	4770      	bx	lr
 8094de6:	bf00      	nop
 8094de8:	2002f00c 	.word	0x2002f00c

08094dec <SYNTH_SetInstrument>:

SYNTH_Status SYNTH_SetInstrument(int channel, SYNTH_Instrument *instrument) {
 8094dec:	b480      	push	{r7}
 8094dee:	b083      	sub	sp, #12
 8094df0:	af00      	add	r7, sp, #0
 8094df2:	6078      	str	r0, [r7, #4]
 8094df4:	6039      	str	r1, [r7, #0]
	if ((channel <0) || (channel >= SYNTH_ChannelsNbr)) return SYNTH_INVALID_CHANNEL;
 8094df6:	687b      	ldr	r3, [r7, #4]
 8094df8:	2b00      	cmp	r3, #0
 8094dfa:	db02      	blt.n	8094e02 <SYNTH_SetInstrument+0x16>
 8094dfc:	687b      	ldr	r3, [r7, #4]
 8094dfe:	2b03      	cmp	r3, #3
 8094e00:	dd01      	ble.n	8094e06 <SYNTH_SetInstrument+0x1a>
 8094e02:	2302      	movs	r3, #2
 8094e04:	e006      	b.n	8094e14 <SYNTH_SetInstrument+0x28>

	SYNTH_Channels[channel].instrument=instrument;
 8094e06:	4a06      	ldr	r2, [pc, #24]	; (8094e20 <SYNTH_SetInstrument+0x34>)
 8094e08:	687b      	ldr	r3, [r7, #4]
 8094e0a:	015b      	lsls	r3, r3, #5
 8094e0c:	4413      	add	r3, r2
 8094e0e:	683a      	ldr	r2, [r7, #0]
 8094e10:	601a      	str	r2, [r3, #0]
	return SYNTH_SUCCESS;
 8094e12:	2300      	movs	r3, #0
}
 8094e14:	4618      	mov	r0, r3
 8094e16:	370c      	adds	r7, #12
 8094e18:	46bd      	mov	sp, r7
 8094e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094e1e:	4770      	bx	lr
 8094e20:	2002f00c 	.word	0x2002f00c

08094e24 <SYNTH_NoteOn>:

SYNTH_Status SYNTH_NoteOn(int channel, SYNTH_Note note) {
 8094e24:	b480      	push	{r7}
 8094e26:	b083      	sub	sp, #12
 8094e28:	af00      	add	r7, sp, #0
 8094e2a:	6078      	str	r0, [r7, #4]
 8094e2c:	460b      	mov	r3, r1
 8094e2e:	70fb      	strb	r3, [r7, #3]
	if ((channel <0) || (channel >= SYNTH_ChannelsNbr)) return SYNTH_INVALID_CHANNEL;
 8094e30:	687b      	ldr	r3, [r7, #4]
 8094e32:	2b00      	cmp	r3, #0
 8094e34:	db02      	blt.n	8094e3c <SYNTH_NoteOn+0x18>
 8094e36:	687b      	ldr	r3, [r7, #4]
 8094e38:	2b03      	cmp	r3, #3
 8094e3a:	dd01      	ble.n	8094e40 <SYNTH_NoteOn+0x1c>
 8094e3c:	2302      	movs	r3, #2
 8094e3e:	e05e      	b.n	8094efe <SYNTH_NoteOn+0xda>
	if (note!=MUTE)
 8094e40:	78fb      	ldrb	r3, [r7, #3]
 8094e42:	2bff      	cmp	r3, #255	; 0xff
 8094e44:	d004      	beq.n	8094e50 <SYNTH_NoteOn+0x2c>
	{
		if ((note<C0) || (note>=B7)) return SYNTH_INVALID_NOTE;
 8094e46:	78fb      	ldrb	r3, [r7, #3]
 8094e48:	2b5e      	cmp	r3, #94	; 0x5e
 8094e4a:	d901      	bls.n	8094e50 <SYNTH_NoteOn+0x2c>
 8094e4c:	2303      	movs	r3, #3
 8094e4e:	e056      	b.n	8094efe <SYNTH_NoteOn+0xda>
	}

	if (note != MUTE) {
 8094e50:	78fb      	ldrb	r3, [r7, #3]
 8094e52:	2bff      	cmp	r3, #255	; 0xff
 8094e54:	d043      	beq.n	8094ede <SYNTH_NoteOn+0xba>
		SYNTH_Channels[channel].note = note;
 8094e56:	4a2d      	ldr	r2, [pc, #180]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094e58:	687b      	ldr	r3, [r7, #4]
 8094e5a:	015b      	lsls	r3, r3, #5
 8094e5c:	4413      	add	r3, r2
 8094e5e:	3304      	adds	r3, #4
 8094e60:	78fa      	ldrb	r2, [r7, #3]
 8094e62:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[channel].increment = ((55.0f/44100.0f)*SYNTH_NoteFrequencies[note])/100;
 8094e64:	78fb      	ldrb	r3, [r7, #3]
 8094e66:	4a2a      	ldr	r2, [pc, #168]	; (8094f10 <SYNTH_NoteOn+0xec>)
 8094e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8094e6c:	ee07 3a90 	vmov	s15, r3
 8094e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8094e74:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8094f14 <SYNTH_NoteOn+0xf0>
 8094e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8094e7c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8094f18 <SYNTH_NoteOn+0xf4>
 8094e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8094e84:	4a21      	ldr	r2, [pc, #132]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094e86:	687b      	ldr	r3, [r7, #4]
 8094e88:	015b      	lsls	r3, r3, #5
 8094e8a:	4413      	add	r3, r2
 8094e8c:	330c      	adds	r3, #12
 8094e8e:	edc3 7a00 	vstr	s15, [r3]
		SYNTH_Channels[channel].counter = 0.0f;
 8094e92:	4a1e      	ldr	r2, [pc, #120]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094e94:	687b      	ldr	r3, [r7, #4]
 8094e96:	015b      	lsls	r3, r3, #5
 8094e98:	4413      	add	r3, r2
 8094e9a:	3308      	adds	r3, #8
 8094e9c:	f04f 0200 	mov.w	r2, #0
 8094ea0:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[channel].AHDSR_state = AHDSR_ATTACK;
 8094ea2:	4a1a      	ldr	r2, [pc, #104]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094ea4:	687b      	ldr	r3, [r7, #4]
 8094ea6:	015b      	lsls	r3, r3, #5
 8094ea8:	4413      	add	r3, r2
 8094eaa:	331d      	adds	r3, #29
 8094eac:	2201      	movs	r2, #1
 8094eae:	701a      	strb	r2, [r3, #0]
		SYNTH_Channels[channel].AHDSR_counter = 0;
 8094eb0:	4a16      	ldr	r2, [pc, #88]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094eb2:	687b      	ldr	r3, [r7, #4]
 8094eb4:	015b      	lsls	r3, r3, #5
 8094eb6:	4413      	add	r3, r2
 8094eb8:	3314      	adds	r3, #20
 8094eba:	2200      	movs	r2, #0
 8094ebc:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[channel].AHDSR_increment=0.0f;
 8094ebe:	4a13      	ldr	r2, [pc, #76]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094ec0:	687b      	ldr	r3, [r7, #4]
 8094ec2:	015b      	lsls	r3, r3, #5
 8094ec4:	4413      	add	r3, r2
 8094ec6:	3318      	adds	r3, #24
 8094ec8:	f04f 0200 	mov.w	r2, #0
 8094ecc:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[channel].AHDSR_level=0;
 8094ece:	4a0f      	ldr	r2, [pc, #60]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094ed0:	687b      	ldr	r3, [r7, #4]
 8094ed2:	015b      	lsls	r3, r3, #5
 8094ed4:	4413      	add	r3, r2
 8094ed6:	331c      	adds	r3, #28
 8094ed8:	2200      	movs	r2, #0
 8094eda:	701a      	strb	r2, [r3, #0]
 8094edc:	e00e      	b.n	8094efc <SYNTH_NoteOn+0xd8>
	}
	else {
		SYNTH_Channels[channel].increment = 0.0f;
 8094ede:	4a0b      	ldr	r2, [pc, #44]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094ee0:	687b      	ldr	r3, [r7, #4]
 8094ee2:	015b      	lsls	r3, r3, #5
 8094ee4:	4413      	add	r3, r2
 8094ee6:	330c      	adds	r3, #12
 8094ee8:	f04f 0200 	mov.w	r2, #0
 8094eec:	601a      	str	r2, [r3, #0]
		SYNTH_Channels[channel].AHDSR_state = AHDSR_IDLE;
 8094eee:	4a07      	ldr	r2, [pc, #28]	; (8094f0c <SYNTH_NoteOn+0xe8>)
 8094ef0:	687b      	ldr	r3, [r7, #4]
 8094ef2:	015b      	lsls	r3, r3, #5
 8094ef4:	4413      	add	r3, r2
 8094ef6:	331d      	adds	r3, #29
 8094ef8:	2200      	movs	r2, #0
 8094efa:	701a      	strb	r2, [r3, #0]
	}

	return SYNTH_SUCCESS;
 8094efc:	2300      	movs	r3, #0
}
 8094efe:	4618      	mov	r0, r3
 8094f00:	370c      	adds	r7, #12
 8094f02:	46bd      	mov	sp, r7
 8094f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094f08:	4770      	bx	lr
 8094f0a:	bf00      	nop
 8094f0c:	2002f00c 	.word	0x2002f00c
 8094f10:	0809f08c 	.word	0x0809f08c
 8094f14:	3aa377ee 	.word	0x3aa377ee
 8094f18:	42c80000 	.word	0x42c80000

08094f1c <SYNTH_NoteOff>:

SYNTH_Status SYNTH_NoteOff(int channel)
{
 8094f1c:	b480      	push	{r7}
 8094f1e:	b083      	sub	sp, #12
 8094f20:	af00      	add	r7, sp, #0
 8094f22:	6078      	str	r0, [r7, #4]
	if ((channel <0) || (channel >= SYNTH_ChannelsNbr)) return SYNTH_INVALID_CHANNEL;
 8094f24:	687b      	ldr	r3, [r7, #4]
 8094f26:	2b00      	cmp	r3, #0
 8094f28:	db02      	blt.n	8094f30 <SYNTH_NoteOff+0x14>
 8094f2a:	687b      	ldr	r3, [r7, #4]
 8094f2c:	2b03      	cmp	r3, #3
 8094f2e:	dd01      	ble.n	8094f34 <SYNTH_NoteOff+0x18>
 8094f30:	2302      	movs	r3, #2
 8094f32:	e017      	b.n	8094f64 <SYNTH_NoteOff+0x48>

	SYNTH_Channels[channel].counter=0.0f;
 8094f34:	4a0e      	ldr	r2, [pc, #56]	; (8094f70 <SYNTH_NoteOff+0x54>)
 8094f36:	687b      	ldr	r3, [r7, #4]
 8094f38:	015b      	lsls	r3, r3, #5
 8094f3a:	4413      	add	r3, r2
 8094f3c:	3308      	adds	r3, #8
 8094f3e:	f04f 0200 	mov.w	r2, #0
 8094f42:	601a      	str	r2, [r3, #0]
	SYNTH_Channels[channel].increment=0.0f;
 8094f44:	4a0a      	ldr	r2, [pc, #40]	; (8094f70 <SYNTH_NoteOff+0x54>)
 8094f46:	687b      	ldr	r3, [r7, #4]
 8094f48:	015b      	lsls	r3, r3, #5
 8094f4a:	4413      	add	r3, r2
 8094f4c:	330c      	adds	r3, #12
 8094f4e:	f04f 0200 	mov.w	r2, #0
 8094f52:	601a      	str	r2, [r3, #0]
	SYNTH_Channels[channel].AHDSR_state = AHDSR_IDLE;
 8094f54:	4a06      	ldr	r2, [pc, #24]	; (8094f70 <SYNTH_NoteOff+0x54>)
 8094f56:	687b      	ldr	r3, [r7, #4]
 8094f58:	015b      	lsls	r3, r3, #5
 8094f5a:	4413      	add	r3, r2
 8094f5c:	331d      	adds	r3, #29
 8094f5e:	2200      	movs	r2, #0
 8094f60:	701a      	strb	r2, [r3, #0]

	return SYNTH_SUCCESS;
 8094f62:	2300      	movs	r3, #0
}
 8094f64:	4618      	mov	r0, r3
 8094f66:	370c      	adds	r7, #12
 8094f68:	46bd      	mov	sp, r7
 8094f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8094f6e:	4770      	bx	lr
 8094f70:	2002f00c 	.word	0x2002f00c

08094f74 <SYNTH_FillBuffer>:

static void SYNTH_FillBuffer(int buffer_nbr, SYNTH_Channel *channels)
{
 8094f74:	b580      	push	{r7, lr}
 8094f76:	b08e      	sub	sp, #56	; 0x38
 8094f78:	af00      	add	r7, sp, #0
 8094f7a:	6078      	str	r0, [r7, #4]
 8094f7c:	6039      	str	r1, [r7, #0]
	//SYNTH_Wave 	*buffer;
	uint8_t 	volume;
	volatile int cnt_int;
	uint32_t 	tmp;

	for (channel_nbr=0; channel_nbr<SYNTH_ChannelsNbr; channel_nbr++)
 8094f7e:	2300      	movs	r3, #0
 8094f80:	637b      	str	r3, [r7, #52]	; 0x34
 8094f82:	e1b0      	b.n	80952e6 <SYNTH_FillBuffer+0x372>
	{
		increment = channels[channel_nbr].increment;
 8094f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094f86:	015b      	lsls	r3, r3, #5
 8094f88:	683a      	ldr	r2, [r7, #0]
 8094f8a:	4413      	add	r3, r2
 8094f8c:	68db      	ldr	r3, [r3, #12]
 8094f8e:	61bb      	str	r3, [r7, #24]

		if ((increment == 0.0f) || (channels[channel_nbr].AHDSR_state==AHDSR_IDLE)) {
 8094f90:	edd7 7a06 	vldr	s15, [r7, #24]
 8094f94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8094f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8094f9c:	d006      	beq.n	8094fac <SYNTH_FillBuffer+0x38>
 8094f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094fa0:	015b      	lsls	r3, r3, #5
 8094fa2:	683a      	ldr	r2, [r7, #0]
 8094fa4:	4413      	add	r3, r2
 8094fa6:	7f5b      	ldrb	r3, [r3, #29]
 8094fa8:	2b00      	cmp	r3, #0
 8094faa:	d113      	bne.n	8094fd4 <SYNTH_FillBuffer+0x60>
			if (channel_nbr==0) { // Si le canal est le canal 0 (premier canal), on rempli le buffer avec des zeros, sinon, on ne fait rien
 8094fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094fae:	2b00      	cmp	r3, #0
 8094fb0:	f040 816d 	bne.w	809528e <SYNTH_FillBuffer+0x31a>
				for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 8094fb4:	2300      	movs	r3, #0
 8094fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8094fb8:	e007      	b.n	8094fca <SYNTH_FillBuffer+0x56>
					SYNTH_LocalBuffer[i]=0;
 8094fba:	4ab6      	ldr	r2, [pc, #728]	; (8095294 <SYNTH_FillBuffer+0x320>)
 8094fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8094fbe:	4413      	add	r3, r2
 8094fc0:	2200      	movs	r2, #0
 8094fc2:	701a      	strb	r2, [r3, #0]
				for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 8094fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8094fc6:	3301      	adds	r3, #1
 8094fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8094fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8094fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8094fd0:	dbf3      	blt.n	8094fba <SYNTH_FillBuffer+0x46>
			if (channel_nbr==0) { // Si le canal est le canal 0 (premier canal), on rempli le buffer avec des zeros, sinon, on ne fait rien
 8094fd2:	e15c      	b.n	809528e <SYNTH_FillBuffer+0x31a>
				}
			}
		} else {
			counter = channels[channel_nbr].counter;
 8094fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094fd6:	015b      	lsls	r3, r3, #5
 8094fd8:	683a      	ldr	r2, [r7, #0]
 8094fda:	4413      	add	r3, r2
 8094fdc:	689b      	ldr	r3, [r3, #8]
 8094fde:	62fb      	str	r3, [r7, #44]	; 0x2c
			wave = channels[channel_nbr].instrument->wavetable;
 8094fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094fe2:	015b      	lsls	r3, r3, #5
 8094fe4:	683a      	ldr	r2, [r7, #0]
 8094fe6:	4413      	add	r3, r2
 8094fe8:	681b      	ldr	r3, [r3, #0]
 8094fea:	699b      	ldr	r3, [r3, #24]
 8094fec:	617b      	str	r3, [r7, #20]
			volume = channels[channel_nbr].volume;
 8094fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094ff0:	015b      	lsls	r3, r3, #5
 8094ff2:	683a      	ldr	r2, [r7, #0]
 8094ff4:	4413      	add	r3, r2
 8094ff6:	7c1b      	ldrb	r3, [r3, #16]
 8094ff8:	74fb      	strb	r3, [r7, #19]
			AHDSR_state = channels[channel_nbr].AHDSR_state;
 8094ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8094ffc:	015b      	lsls	r3, r3, #5
 8094ffe:	683a      	ldr	r2, [r7, #0]
 8095000:	4413      	add	r3, r2
 8095002:	7f5b      	ldrb	r3, [r3, #29]
 8095004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			AHDSR_level=channels[channel_nbr].AHDSR_level;
 8095008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 809500a:	015b      	lsls	r3, r3, #5
 809500c:	683a      	ldr	r2, [r7, #0]
 809500e:	4413      	add	r3, r2
 8095010:	7f1b      	ldrb	r3, [r3, #28]
 8095012:	74bb      	strb	r3, [r7, #18]
			AHDSR_increment=channels[channel_nbr].AHDSR_increment;
 8095014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095016:	015b      	lsls	r3, r3, #5
 8095018:	683a      	ldr	r2, [r7, #0]
 809501a:	4413      	add	r3, r2
 809501c:	699b      	ldr	r3, [r3, #24]
 809501e:	62bb      	str	r3, [r7, #40]	; 0x28
			AHDSR_counter=channels[channel_nbr].AHDSR_counter;
 8095020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095022:	015b      	lsls	r3, r3, #5
 8095024:	683a      	ldr	r2, [r7, #0]
 8095026:	4413      	add	r3, r2
 8095028:	695b      	ldr	r3, [r3, #20]
 809502a:	627b      	str	r3, [r7, #36]	; 0x24
			instrument = channels[channel_nbr].instrument;
 809502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 809502e:	015b      	lsls	r3, r3, #5
 8095030:	683a      	ldr	r2, [r7, #0]
 8095032:	4413      	add	r3, r2
 8095034:	681b      	ldr	r3, [r3, #0]
 8095036:	60fb      	str	r3, [r7, #12]

			for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 8095038:	2300      	movs	r3, #0
 809503a:	633b      	str	r3, [r7, #48]	; 0x30
 809503c:	e103      	b.n	8095246 <SYNTH_FillBuffer+0x2d2>
				cnt_int = (int)counter;
 809503e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8095042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8095046:	ee17 3a90 	vmov	r3, s15
 809504a:	60bb      	str	r3, [r7, #8]
				tmp = (SYNTH_Wave)(((uint32_t)wave[cnt_int]*volume)>>8);
 809504c:	68bb      	ldr	r3, [r7, #8]
 809504e:	461a      	mov	r2, r3
 8095050:	697b      	ldr	r3, [r7, #20]
 8095052:	4413      	add	r3, r2
 8095054:	781b      	ldrb	r3, [r3, #0]
 8095056:	461a      	mov	r2, r3
 8095058:	7cfb      	ldrb	r3, [r7, #19]
 809505a:	fb03 f302 	mul.w	r3, r3, r2
 809505e:	0a1b      	lsrs	r3, r3, #8
 8095060:	b2db      	uxtb	r3, r3
 8095062:	61fb      	str	r3, [r7, #28]
				counter = counter + increment;
 8095064:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8095068:	edd7 7a06 	vldr	s15, [r7, #24]
 809506c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8095070:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (counter >= (float)WaveTableLength) counter = counter - (float)WaveTableLength;
 8095074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8095078:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8095298 <SYNTH_FillBuffer+0x324>
 809507c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8095080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8095084:	db07      	blt.n	8095096 <SYNTH_FillBuffer+0x122>
 8095086:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 809508a:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8095298 <SYNTH_FillBuffer+0x324>
 809508e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8095092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

				switch (AHDSR_state)
 8095096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 809509a:	3b01      	subs	r3, #1
 809509c:	2b04      	cmp	r3, #4
 809509e:	f200 80b1 	bhi.w	8095204 <SYNTH_FillBuffer+0x290>
 80950a2:	a201      	add	r2, pc, #4	; (adr r2, 80950a8 <SYNTH_FillBuffer+0x134>)
 80950a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80950a8:	080950bd 	.word	0x080950bd
 80950ac:	08095179 	.word	0x08095179
 80950b0:	08095129 	.word	0x08095129
 80950b4:	0809510b 	.word	0x0809510b
 80950b8:	080951b5 	.word	0x080951b5
				{
				case AHDSR_ATTACK:
					tmp = (uint32_t)(tmp * AHDSR_increment);
 80950bc:	69fb      	ldr	r3, [r7, #28]
 80950be:	ee07 3a90 	vmov	s15, r3
 80950c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80950c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80950ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80950ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80950d2:	ee17 3a90 	vmov	r3, s15
 80950d6:	61fb      	str	r3, [r7, #28]
					AHDSR_increment += instrument->attack_increment;
 80950d8:	68fb      	ldr	r3, [r7, #12]
 80950da:	edd3 7a02 	vldr	s15, [r3, #8]
 80950de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80950e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80950e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

					if (AHDSR_increment >= 1.0f)
 80950ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80950ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80950f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80950f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80950fa:	da00      	bge.n	80950fe <SYNTH_FillBuffer+0x18a>
					{
						AHDSR_state = AHDSR_HOLD;
						AHDSR_counter=0;
					}
					break;
 80950fc:	e088      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
						AHDSR_state = AHDSR_HOLD;
 80950fe:	2304      	movs	r3, #4
 8095100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						AHDSR_counter=0;
 8095104:	2300      	movs	r3, #0
 8095106:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8095108:	e082      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
				case AHDSR_HOLD:
					AHDSR_counter++;
 809510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 809510c:	3301      	adds	r3, #1
 809510e:	627b      	str	r3, [r7, #36]	; 0x24

					if (AHDSR_counter>=instrument->hold_time)
 8095110:	68fb      	ldr	r3, [r7, #12]
 8095112:	681b      	ldr	r3, [r3, #0]
 8095114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8095116:	429a      	cmp	r2, r3
 8095118:	d377      	bcc.n	809520a <SYNTH_FillBuffer+0x296>
					{
						AHDSR_state = AHDSR_DECAY;
 809511a:	2303      	movs	r3, #3
 809511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						AHDSR_increment = 1.0f;
 8095120:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8095124:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					break;
 8095126:	e070      	b.n	809520a <SYNTH_FillBuffer+0x296>
				case AHDSR_DECAY:
					tmp = (uint32_t)(tmp * AHDSR_increment);
 8095128:	69fb      	ldr	r3, [r7, #28]
 809512a:	ee07 3a90 	vmov	s15, r3
 809512e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8095132:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8095136:	ee67 7a27 	vmul.f32	s15, s14, s15
 809513a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 809513e:	ee17 3a90 	vmov	r3, s15
 8095142:	61fb      	str	r3, [r7, #28]
					AHDSR_increment -= instrument->decay_increment;
 8095144:	68fb      	ldr	r3, [r7, #12]
 8095146:	edd3 7a03 	vldr	s15, [r3, #12]
 809514a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 809514e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8095152:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

					if (AHDSR_increment <= instrument->decay_level)
 8095156:	68fb      	ldr	r3, [r7, #12]
 8095158:	edd3 7a04 	vldr	s15, [r3, #16]
 809515c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8095160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8095164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8095168:	d900      	bls.n	809516c <SYNTH_FillBuffer+0x1f8>
					{
						AHDSR_state = AHDSR_SUSTAIN;
						AHDSR_counter=0;
					}
					break;
 809516a:	e051      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
						AHDSR_state = AHDSR_SUSTAIN;
 809516c:	2302      	movs	r3, #2
 809516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						AHDSR_counter=0;
 8095172:	2300      	movs	r3, #0
 8095174:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8095176:	e04b      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
				case AHDSR_SUSTAIN:
					AHDSR_counter++;
 8095178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 809517a:	3301      	adds	r3, #1
 809517c:	627b      	str	r3, [r7, #36]	; 0x24

					tmp = (uint32_t)(tmp * instrument->decay_level);
 809517e:	69fb      	ldr	r3, [r7, #28]
 8095180:	ee07 3a90 	vmov	s15, r3
 8095184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8095188:	68fb      	ldr	r3, [r7, #12]
 809518a:	edd3 7a04 	vldr	s15, [r3, #16]
 809518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8095192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8095196:	ee17 3a90 	vmov	r3, s15
 809519a:	61fb      	str	r3, [r7, #28]

					if (AHDSR_counter>=instrument->sustain_time)
 809519c:	68fb      	ldr	r3, [r7, #12]
 809519e:	685b      	ldr	r3, [r3, #4]
 80951a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80951a2:	429a      	cmp	r2, r3
 80951a4:	d333      	bcc.n	809520e <SYNTH_FillBuffer+0x29a>
					{
						AHDSR_state = AHDSR_RELEASE;
 80951a6:	2305      	movs	r3, #5
 80951a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						AHDSR_increment = instrument->decay_level;
 80951ac:	68fb      	ldr	r3, [r7, #12]
 80951ae:	691b      	ldr	r3, [r3, #16]
 80951b0:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					break;
 80951b2:	e02c      	b.n	809520e <SYNTH_FillBuffer+0x29a>
				case AHDSR_RELEASE:
					tmp = (uint32_t)(tmp * AHDSR_increment);
 80951b4:	69fb      	ldr	r3, [r7, #28]
 80951b6:	ee07 3a90 	vmov	s15, r3
 80951ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80951be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80951c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80951c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80951ca:	ee17 3a90 	vmov	r3, s15
 80951ce:	61fb      	str	r3, [r7, #28]
					AHDSR_increment -= instrument->release_increment;
 80951d0:	68fb      	ldr	r3, [r7, #12]
 80951d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80951d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80951da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80951de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

					if (AHDSR_increment <= 0.0f)
 80951e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80951e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80951ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80951ee:	d900      	bls.n	80951f2 <SYNTH_FillBuffer+0x27e>
					{
						AHDSR_state = AHDSR_IDLE;
						AHDSR_counter=0;
						AHDSR_increment=0;
					}
					break;
 80951f0:	e00e      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
						AHDSR_state = AHDSR_IDLE;
 80951f2:	2300      	movs	r3, #0
 80951f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						AHDSR_counter=0;
 80951f8:	2300      	movs	r3, #0
 80951fa:	627b      	str	r3, [r7, #36]	; 0x24
						AHDSR_increment=0;
 80951fc:	f04f 0300 	mov.w	r3, #0
 8095200:	62bb      	str	r3, [r7, #40]	; 0x28
					break;
 8095202:	e005      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
				default: // AHDSR_IDLE
					tmp=0;
 8095204:	2300      	movs	r3, #0
 8095206:	61fb      	str	r3, [r7, #28]
 8095208:	e002      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
					break;
 809520a:	bf00      	nop
 809520c:	e000      	b.n	8095210 <SYNTH_FillBuffer+0x29c>
					break;
 809520e:	bf00      	nop
				}

				if (channel_nbr == 0)
 8095210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095212:	2b00      	cmp	r3, #0
 8095214:	d107      	bne.n	8095226 <SYNTH_FillBuffer+0x2b2>
					SYNTH_LocalBuffer[i]=(SYNTH_Wave)tmp;	// Si c'est le premier canal, on ecrit direct dans le buffer
 8095216:	69fb      	ldr	r3, [r7, #28]
 8095218:	b2d9      	uxtb	r1, r3
 809521a:	4a1e      	ldr	r2, [pc, #120]	; (8095294 <SYNTH_FillBuffer+0x320>)
 809521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 809521e:	4413      	add	r3, r2
 8095220:	460a      	mov	r2, r1
 8095222:	701a      	strb	r2, [r3, #0]
 8095224:	e00c      	b.n	8095240 <SYNTH_FillBuffer+0x2cc>
				else
					SYNTH_LocalBuffer[i]+=(SYNTH_Wave)tmp; // si on ajoute aux valeur déjà ecrites
 8095226:	4a1b      	ldr	r2, [pc, #108]	; (8095294 <SYNTH_FillBuffer+0x320>)
 8095228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 809522a:	4413      	add	r3, r2
 809522c:	781a      	ldrb	r2, [r3, #0]
 809522e:	69fb      	ldr	r3, [r7, #28]
 8095230:	b2db      	uxtb	r3, r3
 8095232:	4413      	add	r3, r2
 8095234:	b2d9      	uxtb	r1, r3
 8095236:	4a17      	ldr	r2, [pc, #92]	; (8095294 <SYNTH_FillBuffer+0x320>)
 8095238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 809523a:	4413      	add	r3, r2
 809523c:	460a      	mov	r2, r1
 809523e:	701a      	strb	r2, [r3, #0]
			for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 8095240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8095242:	3301      	adds	r3, #1
 8095244:	633b      	str	r3, [r7, #48]	; 0x30
 8095246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8095248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 809524c:	f6ff aef7 	blt.w	809503e <SYNTH_FillBuffer+0xca>
			}

			channels[channel_nbr].counter = counter;
 8095250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095252:	015b      	lsls	r3, r3, #5
 8095254:	683a      	ldr	r2, [r7, #0]
 8095256:	4413      	add	r3, r2
 8095258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 809525a:	609a      	str	r2, [r3, #8]
			channels[channel_nbr].AHDSR_state = AHDSR_state;
 809525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 809525e:	015b      	lsls	r3, r3, #5
 8095260:	683a      	ldr	r2, [r7, #0]
 8095262:	4413      	add	r3, r2
 8095264:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8095268:	775a      	strb	r2, [r3, #29]
			channels[channel_nbr].AHDSR_counter = AHDSR_counter;
 809526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 809526c:	015b      	lsls	r3, r3, #5
 809526e:	683a      	ldr	r2, [r7, #0]
 8095270:	4413      	add	r3, r2
 8095272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8095274:	615a      	str	r2, [r3, #20]
			channels[channel_nbr].AHDSR_level = AHDSR_level;
 8095276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095278:	015b      	lsls	r3, r3, #5
 809527a:	683a      	ldr	r2, [r7, #0]
 809527c:	4413      	add	r3, r2
 809527e:	7cba      	ldrb	r2, [r7, #18]
 8095280:	771a      	strb	r2, [r3, #28]
			channels[channel_nbr].AHDSR_increment = AHDSR_increment;
 8095282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8095284:	015b      	lsls	r3, r3, #5
 8095286:	683a      	ldr	r2, [r7, #0]
 8095288:	4413      	add	r3, r2
 809528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 809528c:	619a      	str	r2, [r3, #24]
		}

		/* Application du volume principal */
		for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 809528e:	2300      	movs	r3, #0
 8095290:	633b      	str	r3, [r7, #48]	; 0x30
 8095292:	e01d      	b.n	80952d0 <SYNTH_FillBuffer+0x35c>
 8095294:	2002f090 	.word	0x2002f090
 8095298:	425c0000 	.word	0x425c0000
			tmp = ((uint32_t)SYNTH_LocalBuffer[i]*(uint32_t)SYNTH_MainVolume)>>8;
 809529c:	4a16      	ldr	r2, [pc, #88]	; (80952f8 <SYNTH_FillBuffer+0x384>)
 809529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80952a0:	4413      	add	r3, r2
 80952a2:	781b      	ldrb	r3, [r3, #0]
 80952a4:	461a      	mov	r2, r3
 80952a6:	4b15      	ldr	r3, [pc, #84]	; (80952fc <SYNTH_FillBuffer+0x388>)
 80952a8:	781b      	ldrb	r3, [r3, #0]
 80952aa:	fb03 f302 	mul.w	r3, r3, r2
 80952ae:	0a1b      	lsrs	r3, r3, #8
 80952b0:	61fb      	str	r3, [r7, #28]
			if (tmp >=256) tmp=255;
 80952b2:	69fb      	ldr	r3, [r7, #28]
 80952b4:	2bff      	cmp	r3, #255	; 0xff
 80952b6:	d901      	bls.n	80952bc <SYNTH_FillBuffer+0x348>
 80952b8:	23ff      	movs	r3, #255	; 0xff
 80952ba:	61fb      	str	r3, [r7, #28]
			SYNTH_LocalBuffer[i] = (uint8_t)tmp;
 80952bc:	69fb      	ldr	r3, [r7, #28]
 80952be:	b2d9      	uxtb	r1, r3
 80952c0:	4a0d      	ldr	r2, [pc, #52]	; (80952f8 <SYNTH_FillBuffer+0x384>)
 80952c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80952c4:	4413      	add	r3, r2
 80952c6:	460a      	mov	r2, r1
 80952c8:	701a      	strb	r2, [r3, #0]
		for (i=0; i< AUDIO_BUFFER_SIZE; i++) {
 80952ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80952cc:	3301      	adds	r3, #1
 80952ce:	633b      	str	r3, [r7, #48]	; 0x30
 80952d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80952d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80952d6:	dbe1      	blt.n	809529c <SYNTH_FillBuffer+0x328>
		}

		/* Recopie des echantillons */
		AUDIO_FillBuffer(buffer_nbr, SYNTH_LocalBuffer);
 80952d8:	4907      	ldr	r1, [pc, #28]	; (80952f8 <SYNTH_FillBuffer+0x384>)
 80952da:	6878      	ldr	r0, [r7, #4]
 80952dc:	f7ff f9ca 	bl	8094674 <AUDIO_FillBuffer>
	for (channel_nbr=0; channel_nbr<SYNTH_ChannelsNbr; channel_nbr++)
 80952e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80952e2:	3301      	adds	r3, #1
 80952e4:	637b      	str	r3, [r7, #52]	; 0x34
 80952e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80952e8:	2b03      	cmp	r3, #3
 80952ea:	f77f ae4b 	ble.w	8094f84 <SYNTH_FillBuffer+0x10>
	}
}
 80952ee:	bf00      	nop
 80952f0:	3738      	adds	r7, #56	; 0x38
 80952f2:	46bd      	mov	sp, r7
 80952f4:	bd80      	pop	{r7, pc}
 80952f6:	bf00      	nop
 80952f8:	2002f090 	.word	0x2002f090
 80952fc:	2002f08c 	.word	0x2002f08c

08095300 <SYNTH_AudioCallback>:
//		AUDIO_FillBuffer16(buffer_nbr, SYNTH_LocalBuffer);
//	}
//}

static void SYNTH_AudioCallback(int buffer_nbr)
{
 8095300:	b580      	push	{r7, lr}
 8095302:	b082      	sub	sp, #8
 8095304:	af00      	add	r7, sp, #0
 8095306:	6078      	str	r0, [r7, #4]
	SYNTH_FillBuffer(buffer_nbr, SYNTH_Channels);
 8095308:	4903      	ldr	r1, [pc, #12]	; (8095318 <SYNTH_AudioCallback+0x18>)
 809530a:	6878      	ldr	r0, [r7, #4]
 809530c:	f7ff fe32 	bl	8094f74 <SYNTH_FillBuffer>
}
 8095310:	bf00      	nop
 8095312:	3708      	adds	r7, #8
 8095314:	46bd      	mov	sp, r7
 8095316:	bd80      	pop	{r7, pc}
 8095318:	2002f00c 	.word	0x2002f00c

0809531c <CopyBuffer>:
//}
//


static void CopyBuffer(uint32_t* outBuf, const BYTE *inBuf)
{
 809531c:	b480      	push	{r7}
 809531e:	b087      	sub	sp, #28
 8095320:	af00      	add	r7, sp, #0
 8095322:	6078      	str	r0, [r7, #4]
 8095324:	6039      	str	r1, [r7, #0]
	uint32_t acc;
	uint32_t counter;
	uint32_t offset=0;
 8095326:	2300      	movs	r3, #0
 8095328:	613b      	str	r3, [r7, #16]

	for (counter=0; counter <BUFFER_WORDS_SIZE; counter++)
 809532a:	2300      	movs	r3, #0
 809532c:	617b      	str	r3, [r7, #20]
 809532e:	e026      	b.n	809537e <CopyBuffer+0x62>
	{
		acc = ((uint32_t)inBuf[offset]) + ((uint32_t)inBuf[offset+1]<<8) + ((uint32_t)inBuf[offset+2]<<16) + ((uint32_t)inBuf[offset+3]<<24);
 8095330:	683a      	ldr	r2, [r7, #0]
 8095332:	693b      	ldr	r3, [r7, #16]
 8095334:	4413      	add	r3, r2
 8095336:	781b      	ldrb	r3, [r3, #0]
 8095338:	4619      	mov	r1, r3
 809533a:	693b      	ldr	r3, [r7, #16]
 809533c:	3301      	adds	r3, #1
 809533e:	683a      	ldr	r2, [r7, #0]
 8095340:	4413      	add	r3, r2
 8095342:	781b      	ldrb	r3, [r3, #0]
 8095344:	021b      	lsls	r3, r3, #8
 8095346:	18ca      	adds	r2, r1, r3
 8095348:	693b      	ldr	r3, [r7, #16]
 809534a:	3302      	adds	r3, #2
 809534c:	6839      	ldr	r1, [r7, #0]
 809534e:	440b      	add	r3, r1
 8095350:	781b      	ldrb	r3, [r3, #0]
 8095352:	041b      	lsls	r3, r3, #16
 8095354:	441a      	add	r2, r3
 8095356:	693b      	ldr	r3, [r7, #16]
 8095358:	3303      	adds	r3, #3
 809535a:	6839      	ldr	r1, [r7, #0]
 809535c:	440b      	add	r3, r1
 809535e:	781b      	ldrb	r3, [r3, #0]
 8095360:	061b      	lsls	r3, r3, #24
 8095362:	4413      	add	r3, r2
 8095364:	60fb      	str	r3, [r7, #12]
		outBuf[counter]=acc;
 8095366:	697b      	ldr	r3, [r7, #20]
 8095368:	009b      	lsls	r3, r3, #2
 809536a:	687a      	ldr	r2, [r7, #4]
 809536c:	4413      	add	r3, r2
 809536e:	68fa      	ldr	r2, [r7, #12]
 8095370:	601a      	str	r2, [r3, #0]
		offset +=4;
 8095372:	693b      	ldr	r3, [r7, #16]
 8095374:	3304      	adds	r3, #4
 8095376:	613b      	str	r3, [r7, #16]
	for (counter=0; counter <BUFFER_WORDS_SIZE; counter++)
 8095378:	697b      	ldr	r3, [r7, #20]
 809537a:	3301      	adds	r3, #1
 809537c:	617b      	str	r3, [r7, #20]
 809537e:	697b      	ldr	r3, [r7, #20]
 8095380:	2b7f      	cmp	r3, #127	; 0x7f
 8095382:	d9d5      	bls.n	8095330 <CopyBuffer+0x14>
	}
}
 8095384:	bf00      	nop
 8095386:	371c      	adds	r7, #28
 8095388:	46bd      	mov	sp, r7
 809538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809538e:	4770      	bx	lr

08095390 <get_fattime>:

/*-----------------------------------------------------------------------*/
/* RTC Functions                                                         */
/*-----------------------------------------------------------------------*/

DWORD get_fattime (void) {
 8095390:	b480      	push	{r7}
 8095392:	af00      	add	r7, sp, #0
	return 0;
 8095394:	2300      	movs	r3, #0
}
 8095396:	4618      	mov	r0, r3
 8095398:	46bd      	mov	sp, r7
 809539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809539e:	4770      	bx	lr

080953a0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80953a0:	b580      	push	{r7, lr}
 80953a2:	b084      	sub	sp, #16
 80953a4:	af00      	add	r7, sp, #0
 80953a6:	4603      	mov	r3, r0
 80953a8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 80953aa:	79fb      	ldrb	r3, [r7, #7]
 80953ac:	2b00      	cmp	r3, #0
 80953ae:	d001      	beq.n	80953b4 <disk_initialize+0x14>
 80953b0:	2301      	movs	r3, #1
 80953b2:	e017      	b.n	80953e4 <disk_initialize+0x44>

	status = BSP_SD_Init();
 80953b4:	f7f2 ff4a 	bl	808824c <BSP_SD_Init>
 80953b8:	4603      	mov	r3, r0
 80953ba:	73fb      	strb	r3, [r7, #15]
	if (status == MSD_OK) Stat = 0;
 80953bc:	7bfb      	ldrb	r3, [r7, #15]
 80953be:	2b00      	cmp	r3, #0
 80953c0:	d103      	bne.n	80953ca <disk_initialize+0x2a>
 80953c2:	4b0a      	ldr	r3, [pc, #40]	; (80953ec <disk_initialize+0x4c>)
 80953c4:	2200      	movs	r2, #0
 80953c6:	701a      	strb	r2, [r3, #0]
 80953c8:	e009      	b.n	80953de <disk_initialize+0x3e>
	else if (status == MSD_ERROR_SD_NOT_PRESENT) Stat= STA_NODISK;
 80953ca:	7bfb      	ldrb	r3, [r7, #15]
 80953cc:	2b02      	cmp	r3, #2
 80953ce:	d103      	bne.n	80953d8 <disk_initialize+0x38>
 80953d0:	4b06      	ldr	r3, [pc, #24]	; (80953ec <disk_initialize+0x4c>)
 80953d2:	2202      	movs	r2, #2
 80953d4:	701a      	strb	r2, [r3, #0]
 80953d6:	e002      	b.n	80953de <disk_initialize+0x3e>
	else Stat= STA_NOINIT;
 80953d8:	4b04      	ldr	r3, [pc, #16]	; (80953ec <disk_initialize+0x4c>)
 80953da:	2201      	movs	r2, #1
 80953dc:	701a      	strb	r2, [r3, #0]

	return Stat;
 80953de:	4b03      	ldr	r3, [pc, #12]	; (80953ec <disk_initialize+0x4c>)
 80953e0:	781b      	ldrb	r3, [r3, #0]
 80953e2:	b2db      	uxtb	r3, r3
}
 80953e4:	4618      	mov	r0, r3
 80953e6:	3710      	adds	r7, #16
 80953e8:	46bd      	mov	sp, r7
 80953ea:	bd80      	pop	{r7, pc}
 80953ec:	2000b088 	.word	0x2000b088

080953f0 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80953f0:	b580      	push	{r7, lr}
 80953f2:	b082      	sub	sp, #8
 80953f4:	af00      	add	r7, sp, #0
 80953f6:	4603      	mov	r3, r0
 80953f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80953fa:	79fb      	ldrb	r3, [r7, #7]
 80953fc:	2b00      	cmp	r3, #0
 80953fe:	d001      	beq.n	8095404 <disk_status+0x14>
 8095400:	2301      	movs	r3, #1
 8095402:	e018      	b.n	8095436 <disk_status+0x46>

	if (BSP_SD_IsDetected()!= SD_NOT_PRESENT) Stat &= ~STA_NODISK;
 8095404:	f7f2 ff6c 	bl	80882e0 <BSP_SD_IsDetected>
 8095408:	4603      	mov	r3, r0
 809540a:	2b00      	cmp	r3, #0
 809540c:	d008      	beq.n	8095420 <disk_status+0x30>
 809540e:	4b0c      	ldr	r3, [pc, #48]	; (8095440 <disk_status+0x50>)
 8095410:	781b      	ldrb	r3, [r3, #0]
 8095412:	b2db      	uxtb	r3, r3
 8095414:	f023 0302 	bic.w	r3, r3, #2
 8095418:	b2da      	uxtb	r2, r3
 809541a:	4b09      	ldr	r3, [pc, #36]	; (8095440 <disk_status+0x50>)
 809541c:	701a      	strb	r2, [r3, #0]
 809541e:	e007      	b.n	8095430 <disk_status+0x40>
	else Stat |= (STA_NODISK + STA_NOINIT);
 8095420:	4b07      	ldr	r3, [pc, #28]	; (8095440 <disk_status+0x50>)
 8095422:	781b      	ldrb	r3, [r3, #0]
 8095424:	b2db      	uxtb	r3, r3
 8095426:	f043 0303 	orr.w	r3, r3, #3
 809542a:	b2da      	uxtb	r2, r3
 809542c:	4b04      	ldr	r3, [pc, #16]	; (8095440 <disk_status+0x50>)
 809542e:	701a      	strb	r2, [r3, #0]
	return Stat;	/* Return disk status */
 8095430:	4b03      	ldr	r3, [pc, #12]	; (8095440 <disk_status+0x50>)
 8095432:	781b      	ldrb	r3, [r3, #0]
 8095434:	b2db      	uxtb	r3, r3
}
 8095436:	4618      	mov	r0, r3
 8095438:	3708      	adds	r7, #8
 809543a:	46bd      	mov	sp, r7
 809543c:	bd80      	pop	{r7, pc}
 809543e:	bf00      	nop
 8095440:	2000b088 	.word	0x2000b088

08095444 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8095444:	b580      	push	{r7, lr}
 8095446:	b084      	sub	sp, #16
 8095448:	af00      	add	r7, sp, #0
 809544a:	60b9      	str	r1, [r7, #8]
 809544c:	607a      	str	r2, [r7, #4]
 809544e:	603b      	str	r3, [r7, #0]
 8095450:	4603      	mov	r3, r0
 8095452:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8095454:	7bfb      	ldrb	r3, [r7, #15]
 8095456:	2b00      	cmp	r3, #0
 8095458:	d102      	bne.n	8095460 <disk_read+0x1c>
 809545a:	683b      	ldr	r3, [r7, #0]
 809545c:	2b00      	cmp	r3, #0
 809545e:	d101      	bne.n	8095464 <disk_read+0x20>
 8095460:	2304      	movs	r3, #4
 8095462:	e015      	b.n	8095490 <disk_read+0x4c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8095464:	4b0c      	ldr	r3, [pc, #48]	; (8095498 <disk_read+0x54>)
 8095466:	781b      	ldrb	r3, [r3, #0]
 8095468:	b2db      	uxtb	r3, r3
 809546a:	f003 0301 	and.w	r3, r3, #1
 809546e:	2b00      	cmp	r3, #0
 8095470:	d001      	beq.n	8095476 <disk_read+0x32>
 8095472:	2303      	movs	r3, #3
 8095474:	e00c      	b.n	8095490 <disk_read+0x4c>
//			} while (--count);
//			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
//		}
//	}

	if (BSP_SD_ReadBlocks((uint32_t *)buff, sector, count, 10000) == MSD_ERROR) return RES_ERROR;
 8095476:	f242 7310 	movw	r3, #10000	; 0x2710
 809547a:	683a      	ldr	r2, [r7, #0]
 809547c:	6879      	ldr	r1, [r7, #4]
 809547e:	68b8      	ldr	r0, [r7, #8]
 8095480:	f7f2 ff46 	bl	8088310 <BSP_SD_ReadBlocks>
 8095484:	4603      	mov	r3, r0
 8095486:	2b01      	cmp	r3, #1
 8095488:	d101      	bne.n	809548e <disk_read+0x4a>
 809548a:	2301      	movs	r3, #1
 809548c:	e000      	b.n	8095490 <disk_read+0x4c>
	else return RES_OK;
 809548e:	2300      	movs	r3, #0
}
 8095490:	4618      	mov	r0, r3
 8095492:	3710      	adds	r7, #16
 8095494:	46bd      	mov	sp, r7
 8095496:	bd80      	pop	{r7, pc}
 8095498:	2000b088 	.word	0x2000b088

0809549c <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 809549c:	b580      	push	{r7, lr}
 809549e:	b084      	sub	sp, #16
 80954a0:	af00      	add	r7, sp, #0
 80954a2:	60b9      	str	r1, [r7, #8]
 80954a4:	607a      	str	r2, [r7, #4]
 80954a6:	603b      	str	r3, [r7, #0]
 80954a8:	4603      	mov	r3, r0
 80954aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80954ac:	7bfb      	ldrb	r3, [r7, #15]
 80954ae:	2b00      	cmp	r3, #0
 80954b0:	d102      	bne.n	80954b8 <disk_write+0x1c>
 80954b2:	683b      	ldr	r3, [r7, #0]
 80954b4:	2b00      	cmp	r3, #0
 80954b6:	d101      	bne.n	80954bc <disk_write+0x20>
 80954b8:	2304      	movs	r3, #4
 80954ba:	e022      	b.n	8095502 <disk_write+0x66>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80954bc:	4b13      	ldr	r3, [pc, #76]	; (809550c <disk_write+0x70>)
 80954be:	781b      	ldrb	r3, [r3, #0]
 80954c0:	b2db      	uxtb	r3, r3
 80954c2:	f003 0301 	and.w	r3, r3, #1
 80954c6:	2b00      	cmp	r3, #0
 80954c8:	d001      	beq.n	80954ce <disk_write+0x32>
 80954ca:	2303      	movs	r3, #3
 80954cc:	e019      	b.n	8095502 <disk_write+0x66>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80954ce:	4b0f      	ldr	r3, [pc, #60]	; (809550c <disk_write+0x70>)
 80954d0:	781b      	ldrb	r3, [r3, #0]
 80954d2:	b2db      	uxtb	r3, r3
 80954d4:	f003 0304 	and.w	r3, r3, #4
 80954d8:	2b00      	cmp	r3, #0
 80954da:	d001      	beq.n	80954e0 <disk_write+0x44>
 80954dc:	2302      	movs	r3, #2
 80954de:	e010      	b.n	8095502 <disk_write+0x66>
//	deselect();

//	return count ? RES_ERROR : RES_OK;	/* Return result */

	//if (BSP_SD_WriteBlocks((uint32_t *)buff, sector, count, 500) == MSD_ERROR) return RES_ERROR;
	CopyBuffer(aTxBuffer, buff);
 80954e0:	68b9      	ldr	r1, [r7, #8]
 80954e2:	480b      	ldr	r0, [pc, #44]	; (8095510 <disk_write+0x74>)
 80954e4:	f7ff ff1a 	bl	809531c <CopyBuffer>
	if (BSP_SD_WriteBlocks(aTxBuffer, sector, count, 10000) == MSD_ERROR) return RES_ERROR;
 80954e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80954ec:	683a      	ldr	r2, [r7, #0]
 80954ee:	6879      	ldr	r1, [r7, #4]
 80954f0:	4807      	ldr	r0, [pc, #28]	; (8095510 <disk_write+0x74>)
 80954f2:	f7f2 ff29 	bl	8088348 <BSP_SD_WriteBlocks>
 80954f6:	4603      	mov	r3, r0
 80954f8:	2b01      	cmp	r3, #1
 80954fa:	d101      	bne.n	8095500 <disk_write+0x64>
 80954fc:	2301      	movs	r3, #1
 80954fe:	e000      	b.n	8095502 <disk_write+0x66>
	else return RES_OK;
 8095500:	2300      	movs	r3, #0
}
 8095502:	4618      	mov	r0, r3
 8095504:	3710      	adds	r7, #16
 8095506:	46bd      	mov	sp, r7
 8095508:	bd80      	pop	{r7, pc}
 809550a:	bf00      	nop
 809550c:	2000b088 	.word	0x2000b088
 8095510:	2000bc38 	.word	0x2000bc38

08095514 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the control data */
)
{
 8095514:	b580      	push	{r7, lr}
 8095516:	b08c      	sub	sp, #48	; 0x30
 8095518:	af00      	add	r7, sp, #0
 809551a:	4603      	mov	r3, r0
 809551c:	603a      	str	r2, [r7, #0]
 809551e:	71fb      	strb	r3, [r7, #7]
 8095520:	460b      	mov	r3, r1
 8095522:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	//BYTE n, csd[16];
	DWORD *dp; //, st, ed, csize;
	HAL_SD_CardInfoTypeDef CardInfo;

	if (drv) return RES_PARERR;					/* Check parameter */
 8095524:	79fb      	ldrb	r3, [r7, #7]
 8095526:	2b00      	cmp	r3, #0
 8095528:	d001      	beq.n	809552e <disk_ioctl+0x1a>
 809552a:	2304      	movs	r3, #4
 809552c:	e05b      	b.n	80955e6 <disk_ioctl+0xd2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 809552e:	4b30      	ldr	r3, [pc, #192]	; (80955f0 <disk_ioctl+0xdc>)
 8095530:	781b      	ldrb	r3, [r3, #0]
 8095532:	b2db      	uxtb	r3, r3
 8095534:	f003 0301 	and.w	r3, r3, #1
 8095538:	2b00      	cmp	r3, #0
 809553a:	d001      	beq.n	8095540 <disk_ioctl+0x2c>
 809553c:	2303      	movs	r3, #3
 809553e:	e052      	b.n	80955e6 <disk_ioctl+0xd2>
	if (BSP_SD_IsDetected()!= SD_NOT_PRESENT)
 8095540:	f7f2 fece 	bl	80882e0 <BSP_SD_IsDetected>
 8095544:	4603      	mov	r3, r0
 8095546:	2b00      	cmp	r3, #0
 8095548:	d009      	beq.n	809555e <disk_ioctl+0x4a>
	{
		Stat &= ~STA_NODISK;
 809554a:	4b29      	ldr	r3, [pc, #164]	; (80955f0 <disk_ioctl+0xdc>)
 809554c:	781b      	ldrb	r3, [r3, #0]
 809554e:	b2db      	uxtb	r3, r3
 8095550:	f023 0302 	bic.w	r3, r3, #2
 8095554:	b2da      	uxtb	r2, r3
 8095556:	4b26      	ldr	r3, [pc, #152]	; (80955f0 <disk_ioctl+0xdc>)
 8095558:	701a      	strb	r2, [r3, #0]
		return RES_NOTRDY;
 809555a:	2303      	movs	r3, #3
 809555c:	e043      	b.n	80955e6 <disk_ioctl+0xd2>
	}

	res = RES_ERROR;
 809555e:	2301      	movs	r3, #1
 8095560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	BSP_SD_GetCardInfo(&CardInfo);
 8095564:	f107 0308 	add.w	r3, r7, #8
 8095568:	4618      	mov	r0, r3
 809556a:	f7f3 f833 	bl	80885d4 <BSP_SD_GetCardInfo>

	switch (cmd) {
 809556e:	79bb      	ldrb	r3, [r7, #6]
 8095570:	2b04      	cmp	r3, #4
 8095572:	d831      	bhi.n	80955d8 <disk_ioctl+0xc4>
 8095574:	a201      	add	r2, pc, #4	; (adr r2, 809557c <disk_ioctl+0x68>)
 8095576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 809557a:	bf00      	nop
 809557c:	08095591 	.word	0x08095591
 8095580:	08095599 	.word	0x08095599
 8095584:	080955d9 	.word	0x080955d9
 8095588:	080955a7 	.word	0x080955a7
 809558c:	080955b5 	.word	0x080955b5
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		//if (select()) res = RES_OK;
		res = RES_OK;
 8095590:	2300      	movs	r3, #0
 8095592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8095596:	e024      	b.n	80955e2 <disk_ioctl+0xce>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		*(DWORD*)buff = CardInfo.BlockNbr;
 8095598:	69ba      	ldr	r2, [r7, #24]
 809559a:	683b      	ldr	r3, [r7, #0]
 809559c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 809559e:	2300      	movs	r3, #0
 80955a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
//				*(DWORD*)buff = csize << (n - 9);
//			}
//			res = RES_OK;
//		}
		break;
 80955a4:	e01d      	b.n	80955e2 <disk_ioctl+0xce>
//				}
//				res = RES_OK;
//			}
//		}

		*(DWORD*)buff = CardInfo.BlockSize;
 80955a6:	69fa      	ldr	r2, [r7, #28]
 80955a8:	683b      	ldr	r3, [r7, #0]
 80955aa:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80955ac:	2300      	movs	r3, #0
 80955ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80955b2:	e016      	b.n	80955e2 <disk_ioctl+0xce>
//			st *= 512; ed *= 512;
//		}
//		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
//			res = RES_OK;	/* FatFs does not check result of this command */
//		}
		dp = (DWORD*)buff;
 80955b4:	683b      	ldr	r3, [r7, #0]
 80955b6:	62bb      	str	r3, [r7, #40]	; 0x28

		if (BSP_SD_Erase(dp[0], dp[1]) == MSD_OK) res=RES_OK;
 80955b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80955ba:	681a      	ldr	r2, [r3, #0]
 80955bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80955be:	3304      	adds	r3, #4
 80955c0:	681b      	ldr	r3, [r3, #0]
 80955c2:	4619      	mov	r1, r3
 80955c4:	4610      	mov	r0, r2
 80955c6:	f7f2 fedb 	bl	8088380 <BSP_SD_Erase>
 80955ca:	4603      	mov	r3, r0
 80955cc:	2b00      	cmp	r3, #0
 80955ce:	d107      	bne.n	80955e0 <disk_ioctl+0xcc>
 80955d0:	2300      	movs	r3, #0
 80955d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		break;
 80955d6:	e003      	b.n	80955e0 <disk_ioctl+0xcc>

	default:
		res = RES_PARERR;
 80955d8:	2304      	movs	r3, #4
 80955da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80955de:	e000      	b.n	80955e2 <disk_ioctl+0xce>
		break;
 80955e0:	bf00      	nop
	}

	//deselect();

	return res;
 80955e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80955e6:	4618      	mov	r0, r3
 80955e8:	3730      	adds	r7, #48	; 0x30
 80955ea:	46bd      	mov	sp, r7
 80955ec:	bd80      	pop	{r7, pc}
 80955ee:	bf00      	nop
 80955f0:	2000b088 	.word	0x2000b088

080955f4 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80955f4:	b480      	push	{r7}
 80955f6:	b085      	sub	sp, #20
 80955f8:	af00      	add	r7, sp, #0
 80955fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80955fc:	687b      	ldr	r3, [r7, #4]
 80955fe:	3301      	adds	r3, #1
 8095600:	781b      	ldrb	r3, [r3, #0]
 8095602:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8095604:	89fb      	ldrh	r3, [r7, #14]
 8095606:	021b      	lsls	r3, r3, #8
 8095608:	b21a      	sxth	r2, r3
 809560a:	687b      	ldr	r3, [r7, #4]
 809560c:	781b      	ldrb	r3, [r3, #0]
 809560e:	b21b      	sxth	r3, r3
 8095610:	4313      	orrs	r3, r2
 8095612:	b21b      	sxth	r3, r3
 8095614:	81fb      	strh	r3, [r7, #14]
	return rv;
 8095616:	89fb      	ldrh	r3, [r7, #14]
}
 8095618:	4618      	mov	r0, r3
 809561a:	3714      	adds	r7, #20
 809561c:	46bd      	mov	sp, r7
 809561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095622:	4770      	bx	lr

08095624 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8095624:	b480      	push	{r7}
 8095626:	b085      	sub	sp, #20
 8095628:	af00      	add	r7, sp, #0
 809562a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 809562c:	687b      	ldr	r3, [r7, #4]
 809562e:	3303      	adds	r3, #3
 8095630:	781b      	ldrb	r3, [r3, #0]
 8095632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8095634:	68fb      	ldr	r3, [r7, #12]
 8095636:	021b      	lsls	r3, r3, #8
 8095638:	687a      	ldr	r2, [r7, #4]
 809563a:	3202      	adds	r2, #2
 809563c:	7812      	ldrb	r2, [r2, #0]
 809563e:	4313      	orrs	r3, r2
 8095640:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8095642:	68fb      	ldr	r3, [r7, #12]
 8095644:	021b      	lsls	r3, r3, #8
 8095646:	687a      	ldr	r2, [r7, #4]
 8095648:	3201      	adds	r2, #1
 809564a:	7812      	ldrb	r2, [r2, #0]
 809564c:	4313      	orrs	r3, r2
 809564e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8095650:	68fb      	ldr	r3, [r7, #12]
 8095652:	021b      	lsls	r3, r3, #8
 8095654:	687a      	ldr	r2, [r7, #4]
 8095656:	7812      	ldrb	r2, [r2, #0]
 8095658:	4313      	orrs	r3, r2
 809565a:	60fb      	str	r3, [r7, #12]
	return rv;
 809565c:	68fb      	ldr	r3, [r7, #12]
}
 809565e:	4618      	mov	r0, r3
 8095660:	3714      	adds	r7, #20
 8095662:	46bd      	mov	sp, r7
 8095664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095668:	4770      	bx	lr

0809566a <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 809566a:	b480      	push	{r7}
 809566c:	b083      	sub	sp, #12
 809566e:	af00      	add	r7, sp, #0
 8095670:	6078      	str	r0, [r7, #4]
 8095672:	460b      	mov	r3, r1
 8095674:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8095676:	687b      	ldr	r3, [r7, #4]
 8095678:	1c5a      	adds	r2, r3, #1
 809567a:	607a      	str	r2, [r7, #4]
 809567c:	887a      	ldrh	r2, [r7, #2]
 809567e:	b2d2      	uxtb	r2, r2
 8095680:	701a      	strb	r2, [r3, #0]
 8095682:	887b      	ldrh	r3, [r7, #2]
 8095684:	0a1b      	lsrs	r3, r3, #8
 8095686:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8095688:	687b      	ldr	r3, [r7, #4]
 809568a:	1c5a      	adds	r2, r3, #1
 809568c:	607a      	str	r2, [r7, #4]
 809568e:	887a      	ldrh	r2, [r7, #2]
 8095690:	b2d2      	uxtb	r2, r2
 8095692:	701a      	strb	r2, [r3, #0]
}
 8095694:	bf00      	nop
 8095696:	370c      	adds	r7, #12
 8095698:	46bd      	mov	sp, r7
 809569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809569e:	4770      	bx	lr

080956a0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80956a0:	b480      	push	{r7}
 80956a2:	b083      	sub	sp, #12
 80956a4:	af00      	add	r7, sp, #0
 80956a6:	6078      	str	r0, [r7, #4]
 80956a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80956aa:	687b      	ldr	r3, [r7, #4]
 80956ac:	1c5a      	adds	r2, r3, #1
 80956ae:	607a      	str	r2, [r7, #4]
 80956b0:	683a      	ldr	r2, [r7, #0]
 80956b2:	b2d2      	uxtb	r2, r2
 80956b4:	701a      	strb	r2, [r3, #0]
 80956b6:	683b      	ldr	r3, [r7, #0]
 80956b8:	0a1b      	lsrs	r3, r3, #8
 80956ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80956bc:	687b      	ldr	r3, [r7, #4]
 80956be:	1c5a      	adds	r2, r3, #1
 80956c0:	607a      	str	r2, [r7, #4]
 80956c2:	683a      	ldr	r2, [r7, #0]
 80956c4:	b2d2      	uxtb	r2, r2
 80956c6:	701a      	strb	r2, [r3, #0]
 80956c8:	683b      	ldr	r3, [r7, #0]
 80956ca:	0a1b      	lsrs	r3, r3, #8
 80956cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80956ce:	687b      	ldr	r3, [r7, #4]
 80956d0:	1c5a      	adds	r2, r3, #1
 80956d2:	607a      	str	r2, [r7, #4]
 80956d4:	683a      	ldr	r2, [r7, #0]
 80956d6:	b2d2      	uxtb	r2, r2
 80956d8:	701a      	strb	r2, [r3, #0]
 80956da:	683b      	ldr	r3, [r7, #0]
 80956dc:	0a1b      	lsrs	r3, r3, #8
 80956de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80956e0:	687b      	ldr	r3, [r7, #4]
 80956e2:	1c5a      	adds	r2, r3, #1
 80956e4:	607a      	str	r2, [r7, #4]
 80956e6:	683a      	ldr	r2, [r7, #0]
 80956e8:	b2d2      	uxtb	r2, r2
 80956ea:	701a      	strb	r2, [r3, #0]
}
 80956ec:	bf00      	nop
 80956ee:	370c      	adds	r7, #12
 80956f0:	46bd      	mov	sp, r7
 80956f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80956f6:	4770      	bx	lr

080956f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80956f8:	b480      	push	{r7}
 80956fa:	b087      	sub	sp, #28
 80956fc:	af00      	add	r7, sp, #0
 80956fe:	60f8      	str	r0, [r7, #12]
 8095700:	60b9      	str	r1, [r7, #8]
 8095702:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8095704:	68fb      	ldr	r3, [r7, #12]
 8095706:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8095708:	68bb      	ldr	r3, [r7, #8]
 809570a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 809570c:	687b      	ldr	r3, [r7, #4]
 809570e:	2b00      	cmp	r3, #0
 8095710:	d00d      	beq.n	809572e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8095712:	693a      	ldr	r2, [r7, #16]
 8095714:	1c53      	adds	r3, r2, #1
 8095716:	613b      	str	r3, [r7, #16]
 8095718:	697b      	ldr	r3, [r7, #20]
 809571a:	1c59      	adds	r1, r3, #1
 809571c:	6179      	str	r1, [r7, #20]
 809571e:	7812      	ldrb	r2, [r2, #0]
 8095720:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8095722:	687b      	ldr	r3, [r7, #4]
 8095724:	3b01      	subs	r3, #1
 8095726:	607b      	str	r3, [r7, #4]
 8095728:	687b      	ldr	r3, [r7, #4]
 809572a:	2b00      	cmp	r3, #0
 809572c:	d1f1      	bne.n	8095712 <mem_cpy+0x1a>
	}
}
 809572e:	bf00      	nop
 8095730:	371c      	adds	r7, #28
 8095732:	46bd      	mov	sp, r7
 8095734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095738:	4770      	bx	lr

0809573a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 809573a:	b480      	push	{r7}
 809573c:	b087      	sub	sp, #28
 809573e:	af00      	add	r7, sp, #0
 8095740:	60f8      	str	r0, [r7, #12]
 8095742:	60b9      	str	r1, [r7, #8]
 8095744:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8095746:	68fb      	ldr	r3, [r7, #12]
 8095748:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 809574a:	697b      	ldr	r3, [r7, #20]
 809574c:	1c5a      	adds	r2, r3, #1
 809574e:	617a      	str	r2, [r7, #20]
 8095750:	68ba      	ldr	r2, [r7, #8]
 8095752:	b2d2      	uxtb	r2, r2
 8095754:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8095756:	687b      	ldr	r3, [r7, #4]
 8095758:	3b01      	subs	r3, #1
 809575a:	607b      	str	r3, [r7, #4]
 809575c:	687b      	ldr	r3, [r7, #4]
 809575e:	2b00      	cmp	r3, #0
 8095760:	d1f3      	bne.n	809574a <mem_set+0x10>
}
 8095762:	bf00      	nop
 8095764:	371c      	adds	r7, #28
 8095766:	46bd      	mov	sp, r7
 8095768:	f85d 7b04 	ldr.w	r7, [sp], #4
 809576c:	4770      	bx	lr

0809576e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 809576e:	b480      	push	{r7}
 8095770:	b089      	sub	sp, #36	; 0x24
 8095772:	af00      	add	r7, sp, #0
 8095774:	60f8      	str	r0, [r7, #12]
 8095776:	60b9      	str	r1, [r7, #8]
 8095778:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 809577a:	68fb      	ldr	r3, [r7, #12]
 809577c:	61fb      	str	r3, [r7, #28]
 809577e:	68bb      	ldr	r3, [r7, #8]
 8095780:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8095782:	2300      	movs	r3, #0
 8095784:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8095786:	69fb      	ldr	r3, [r7, #28]
 8095788:	1c5a      	adds	r2, r3, #1
 809578a:	61fa      	str	r2, [r7, #28]
 809578c:	781b      	ldrb	r3, [r3, #0]
 809578e:	4619      	mov	r1, r3
 8095790:	69bb      	ldr	r3, [r7, #24]
 8095792:	1c5a      	adds	r2, r3, #1
 8095794:	61ba      	str	r2, [r7, #24]
 8095796:	781b      	ldrb	r3, [r3, #0]
 8095798:	1acb      	subs	r3, r1, r3
 809579a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 809579c:	687b      	ldr	r3, [r7, #4]
 809579e:	3b01      	subs	r3, #1
 80957a0:	607b      	str	r3, [r7, #4]
 80957a2:	687b      	ldr	r3, [r7, #4]
 80957a4:	2b00      	cmp	r3, #0
 80957a6:	d002      	beq.n	80957ae <mem_cmp+0x40>
 80957a8:	697b      	ldr	r3, [r7, #20]
 80957aa:	2b00      	cmp	r3, #0
 80957ac:	d0eb      	beq.n	8095786 <mem_cmp+0x18>

	return r;
 80957ae:	697b      	ldr	r3, [r7, #20]
}
 80957b0:	4618      	mov	r0, r3
 80957b2:	3724      	adds	r7, #36	; 0x24
 80957b4:	46bd      	mov	sp, r7
 80957b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80957ba:	4770      	bx	lr

080957bc <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80957bc:	b480      	push	{r7}
 80957be:	b083      	sub	sp, #12
 80957c0:	af00      	add	r7, sp, #0
 80957c2:	6078      	str	r0, [r7, #4]
 80957c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80957c6:	e002      	b.n	80957ce <chk_chr+0x12>
 80957c8:	687b      	ldr	r3, [r7, #4]
 80957ca:	3301      	adds	r3, #1
 80957cc:	607b      	str	r3, [r7, #4]
 80957ce:	687b      	ldr	r3, [r7, #4]
 80957d0:	781b      	ldrb	r3, [r3, #0]
 80957d2:	2b00      	cmp	r3, #0
 80957d4:	d005      	beq.n	80957e2 <chk_chr+0x26>
 80957d6:	687b      	ldr	r3, [r7, #4]
 80957d8:	781b      	ldrb	r3, [r3, #0]
 80957da:	461a      	mov	r2, r3
 80957dc:	683b      	ldr	r3, [r7, #0]
 80957de:	4293      	cmp	r3, r2
 80957e0:	d1f2      	bne.n	80957c8 <chk_chr+0xc>
	return *str;
 80957e2:	687b      	ldr	r3, [r7, #4]
 80957e4:	781b      	ldrb	r3, [r3, #0]
}
 80957e6:	4618      	mov	r0, r3
 80957e8:	370c      	adds	r7, #12
 80957ea:	46bd      	mov	sp, r7
 80957ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80957f0:	4770      	bx	lr

080957f2 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80957f2:	b480      	push	{r7}
 80957f4:	b083      	sub	sp, #12
 80957f6:	af00      	add	r7, sp, #0
 80957f8:	4603      	mov	r3, r0
 80957fa:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80957fc:	79fb      	ldrb	r3, [r7, #7]
 80957fe:	2b00      	cmp	r3, #0
 8095800:	d001      	beq.n	8095806 <dbc_1st+0x14>
 8095802:	2300      	movs	r3, #0
 8095804:	e000      	b.n	8095808 <dbc_1st+0x16>
#endif
	return 0;
 8095806:	2300      	movs	r3, #0
}
 8095808:	4618      	mov	r0, r3
 809580a:	370c      	adds	r7, #12
 809580c:	46bd      	mov	sp, r7
 809580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095812:	4770      	bx	lr

08095814 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8095814:	b480      	push	{r7}
 8095816:	b083      	sub	sp, #12
 8095818:	af00      	add	r7, sp, #0
 809581a:	4603      	mov	r3, r0
 809581c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 809581e:	79fb      	ldrb	r3, [r7, #7]
 8095820:	2b00      	cmp	r3, #0
 8095822:	d001      	beq.n	8095828 <dbc_2nd+0x14>
 8095824:	2300      	movs	r3, #0
 8095826:	e000      	b.n	809582a <dbc_2nd+0x16>
#endif
	return 0;
 8095828:	2300      	movs	r3, #0
}
 809582a:	4618      	mov	r0, r3
 809582c:	370c      	adds	r7, #12
 809582e:	46bd      	mov	sp, r7
 8095830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095834:	4770      	bx	lr

08095836 <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8095836:	b580      	push	{r7, lr}
 8095838:	b086      	sub	sp, #24
 809583a:	af00      	add	r7, sp, #0
 809583c:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 809583e:	687b      	ldr	r3, [r7, #4]
 8095840:	681b      	ldr	r3, [r3, #0]
 8095842:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8095844:	697b      	ldr	r3, [r7, #20]
 8095846:	1c5a      	adds	r2, r3, #1
 8095848:	617a      	str	r2, [r7, #20]
 809584a:	781b      	ldrb	r3, [r3, #0]
 809584c:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 809584e:	8a7b      	ldrh	r3, [r7, #18]
 8095850:	b2db      	uxtb	r3, r3
 8095852:	4618      	mov	r0, r3
 8095854:	f7ff ffcd 	bl	80957f2 <dbc_1st>
 8095858:	4603      	mov	r3, r0
 809585a:	2b00      	cmp	r3, #0
 809585c:	d015      	beq.n	809588a <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 809585e:	697b      	ldr	r3, [r7, #20]
 8095860:	1c5a      	adds	r2, r3, #1
 8095862:	617a      	str	r2, [r7, #20]
 8095864:	781b      	ldrb	r3, [r3, #0]
 8095866:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8095868:	7c7b      	ldrb	r3, [r7, #17]
 809586a:	4618      	mov	r0, r3
 809586c:	f7ff ffd2 	bl	8095814 <dbc_2nd>
 8095870:	4603      	mov	r3, r0
 8095872:	2b00      	cmp	r3, #0
 8095874:	d102      	bne.n	809587c <tchar2uni+0x46>
 8095876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 809587a:	e01d      	b.n	80958b8 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 809587c:	8a7b      	ldrh	r3, [r7, #18]
 809587e:	021b      	lsls	r3, r3, #8
 8095880:	b29a      	uxth	r2, r3
 8095882:	7c7b      	ldrb	r3, [r7, #17]
 8095884:	b29b      	uxth	r3, r3
 8095886:	4413      	add	r3, r2
 8095888:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 809588a:	8a7b      	ldrh	r3, [r7, #18]
 809588c:	2b00      	cmp	r3, #0
 809588e:	d00d      	beq.n	80958ac <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8095890:	8a7b      	ldrh	r3, [r7, #18]
 8095892:	f240 11b5 	movw	r1, #437	; 0x1b5
 8095896:	4618      	mov	r0, r3
 8095898:	f002 fc1a 	bl	80980d0 <ff_oem2uni>
 809589c:	4603      	mov	r3, r0
 809589e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80958a0:	8a7b      	ldrh	r3, [r7, #18]
 80958a2:	2b00      	cmp	r3, #0
 80958a4:	d102      	bne.n	80958ac <tchar2uni+0x76>
 80958a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80958aa:	e005      	b.n	80958b8 <tchar2uni+0x82>
	}
	uc = wc;
 80958ac:	8a7b      	ldrh	r3, [r7, #18]
 80958ae:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 80958b0:	687b      	ldr	r3, [r7, #4]
 80958b2:	697a      	ldr	r2, [r7, #20]
 80958b4:	601a      	str	r2, [r3, #0]
	return uc;
 80958b6:	68fb      	ldr	r3, [r7, #12]
}
 80958b8:	4618      	mov	r0, r3
 80958ba:	3718      	adds	r7, #24
 80958bc:	46bd      	mov	sp, r7
 80958be:	bd80      	pop	{r7, pc}

080958c0 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80958c0:	b580      	push	{r7, lr}
 80958c2:	b084      	sub	sp, #16
 80958c4:	af00      	add	r7, sp, #0
 80958c6:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80958c8:	2300      	movs	r3, #0
 80958ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80958cc:	687b      	ldr	r3, [r7, #4]
 80958ce:	78db      	ldrb	r3, [r3, #3]
 80958d0:	2b00      	cmp	r3, #0
 80958d2:	d02c      	beq.n	809592e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80958d4:	687b      	ldr	r3, [r7, #4]
 80958d6:	7858      	ldrb	r0, [r3, #1]
 80958d8:	687b      	ldr	r3, [r7, #4]
 80958da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80958de:	687b      	ldr	r3, [r7, #4]
 80958e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80958e2:	2301      	movs	r3, #1
 80958e4:	f7ff fdda 	bl	809549c <disk_write>
 80958e8:	4603      	mov	r3, r0
 80958ea:	2b00      	cmp	r3, #0
 80958ec:	d11d      	bne.n	809592a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80958ee:	687b      	ldr	r3, [r7, #4]
 80958f0:	2200      	movs	r2, #0
 80958f2:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80958f4:	687b      	ldr	r3, [r7, #4]
 80958f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80958f8:	687b      	ldr	r3, [r7, #4]
 80958fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80958fc:	1ad2      	subs	r2, r2, r3
 80958fe:	687b      	ldr	r3, [r7, #4]
 8095900:	6a1b      	ldr	r3, [r3, #32]
 8095902:	429a      	cmp	r2, r3
 8095904:	d213      	bcs.n	809592e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8095906:	687b      	ldr	r3, [r7, #4]
 8095908:	789b      	ldrb	r3, [r3, #2]
 809590a:	2b02      	cmp	r3, #2
 809590c:	d10f      	bne.n	809592e <sync_window+0x6e>
 809590e:	687b      	ldr	r3, [r7, #4]
 8095910:	7858      	ldrb	r0, [r3, #1]
 8095912:	687b      	ldr	r3, [r7, #4]
 8095914:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8095918:	687b      	ldr	r3, [r7, #4]
 809591a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 809591c:	687b      	ldr	r3, [r7, #4]
 809591e:	6a1b      	ldr	r3, [r3, #32]
 8095920:	441a      	add	r2, r3
 8095922:	2301      	movs	r3, #1
 8095924:	f7ff fdba 	bl	809549c <disk_write>
 8095928:	e001      	b.n	809592e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 809592a:	2301      	movs	r3, #1
 809592c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 809592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8095930:	4618      	mov	r0, r3
 8095932:	3710      	adds	r7, #16
 8095934:	46bd      	mov	sp, r7
 8095936:	bd80      	pop	{r7, pc}

08095938 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8095938:	b580      	push	{r7, lr}
 809593a:	b084      	sub	sp, #16
 809593c:	af00      	add	r7, sp, #0
 809593e:	6078      	str	r0, [r7, #4]
 8095940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8095942:	2300      	movs	r3, #0
 8095944:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8095946:	687b      	ldr	r3, [r7, #4]
 8095948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 809594a:	683a      	ldr	r2, [r7, #0]
 809594c:	429a      	cmp	r2, r3
 809594e:	d01b      	beq.n	8095988 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8095950:	6878      	ldr	r0, [r7, #4]
 8095952:	f7ff ffb5 	bl	80958c0 <sync_window>
 8095956:	4603      	mov	r3, r0
 8095958:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 809595a:	7bfb      	ldrb	r3, [r7, #15]
 809595c:	2b00      	cmp	r3, #0
 809595e:	d113      	bne.n	8095988 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8095960:	687b      	ldr	r3, [r7, #4]
 8095962:	7858      	ldrb	r0, [r3, #1]
 8095964:	687b      	ldr	r3, [r7, #4]
 8095966:	f103 0138 	add.w	r1, r3, #56	; 0x38
 809596a:	2301      	movs	r3, #1
 809596c:	683a      	ldr	r2, [r7, #0]
 809596e:	f7ff fd69 	bl	8095444 <disk_read>
 8095972:	4603      	mov	r3, r0
 8095974:	2b00      	cmp	r3, #0
 8095976:	d004      	beq.n	8095982 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8095978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 809597c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 809597e:	2301      	movs	r3, #1
 8095980:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8095982:	687b      	ldr	r3, [r7, #4]
 8095984:	683a      	ldr	r2, [r7, #0]
 8095986:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8095988:	7bfb      	ldrb	r3, [r7, #15]
}
 809598a:	4618      	mov	r0, r3
 809598c:	3710      	adds	r7, #16
 809598e:	46bd      	mov	sp, r7
 8095990:	bd80      	pop	{r7, pc}
	...

08095994 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8095994:	b580      	push	{r7, lr}
 8095996:	b084      	sub	sp, #16
 8095998:	af00      	add	r7, sp, #0
 809599a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 809599c:	6878      	ldr	r0, [r7, #4]
 809599e:	f7ff ff8f 	bl	80958c0 <sync_window>
 80959a2:	4603      	mov	r3, r0
 80959a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80959a6:	7bfb      	ldrb	r3, [r7, #15]
 80959a8:	2b00      	cmp	r3, #0
 80959aa:	d158      	bne.n	8095a5e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80959ac:	687b      	ldr	r3, [r7, #4]
 80959ae:	781b      	ldrb	r3, [r3, #0]
 80959b0:	2b03      	cmp	r3, #3
 80959b2:	d148      	bne.n	8095a46 <sync_fs+0xb2>
 80959b4:	687b      	ldr	r3, [r7, #4]
 80959b6:	791b      	ldrb	r3, [r3, #4]
 80959b8:	2b01      	cmp	r3, #1
 80959ba:	d144      	bne.n	8095a46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80959bc:	687b      	ldr	r3, [r7, #4]
 80959be:	3338      	adds	r3, #56	; 0x38
 80959c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80959c4:	2100      	movs	r1, #0
 80959c6:	4618      	mov	r0, r3
 80959c8:	f7ff feb7 	bl	809573a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80959cc:	687b      	ldr	r3, [r7, #4]
 80959ce:	3338      	adds	r3, #56	; 0x38
 80959d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80959d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80959d8:	4618      	mov	r0, r3
 80959da:	f7ff fe46 	bl	809566a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80959de:	687b      	ldr	r3, [r7, #4]
 80959e0:	3338      	adds	r3, #56	; 0x38
 80959e2:	4921      	ldr	r1, [pc, #132]	; (8095a68 <sync_fs+0xd4>)
 80959e4:	4618      	mov	r0, r3
 80959e6:	f7ff fe5b 	bl	80956a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80959ea:	687b      	ldr	r3, [r7, #4]
 80959ec:	3338      	adds	r3, #56	; 0x38
 80959ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80959f2:	491e      	ldr	r1, [pc, #120]	; (8095a6c <sync_fs+0xd8>)
 80959f4:	4618      	mov	r0, r3
 80959f6:	f7ff fe53 	bl	80956a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80959fa:	687b      	ldr	r3, [r7, #4]
 80959fc:	3338      	adds	r3, #56	; 0x38
 80959fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8095a02:	687b      	ldr	r3, [r7, #4]
 8095a04:	695b      	ldr	r3, [r3, #20]
 8095a06:	4619      	mov	r1, r3
 8095a08:	4610      	mov	r0, r2
 8095a0a:	f7ff fe49 	bl	80956a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8095a0e:	687b      	ldr	r3, [r7, #4]
 8095a10:	3338      	adds	r3, #56	; 0x38
 8095a12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8095a16:	687b      	ldr	r3, [r7, #4]
 8095a18:	691b      	ldr	r3, [r3, #16]
 8095a1a:	4619      	mov	r1, r3
 8095a1c:	4610      	mov	r0, r2
 8095a1e:	f7ff fe3f 	bl	80956a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8095a22:	687b      	ldr	r3, [r7, #4]
 8095a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8095a26:	1c5a      	adds	r2, r3, #1
 8095a28:	687b      	ldr	r3, [r7, #4]
 8095a2a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8095a2c:	687b      	ldr	r3, [r7, #4]
 8095a2e:	7858      	ldrb	r0, [r3, #1]
 8095a30:	687b      	ldr	r3, [r7, #4]
 8095a32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8095a36:	687b      	ldr	r3, [r7, #4]
 8095a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8095a3a:	2301      	movs	r3, #1
 8095a3c:	f7ff fd2e 	bl	809549c <disk_write>
			fs->fsi_flag = 0;
 8095a40:	687b      	ldr	r3, [r7, #4]
 8095a42:	2200      	movs	r2, #0
 8095a44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8095a46:	687b      	ldr	r3, [r7, #4]
 8095a48:	785b      	ldrb	r3, [r3, #1]
 8095a4a:	2200      	movs	r2, #0
 8095a4c:	2100      	movs	r1, #0
 8095a4e:	4618      	mov	r0, r3
 8095a50:	f7ff fd60 	bl	8095514 <disk_ioctl>
 8095a54:	4603      	mov	r3, r0
 8095a56:	2b00      	cmp	r3, #0
 8095a58:	d001      	beq.n	8095a5e <sync_fs+0xca>
 8095a5a:	2301      	movs	r3, #1
 8095a5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8095a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8095a60:	4618      	mov	r0, r3
 8095a62:	3710      	adds	r7, #16
 8095a64:	46bd      	mov	sp, r7
 8095a66:	bd80      	pop	{r7, pc}
 8095a68:	41615252 	.word	0x41615252
 8095a6c:	61417272 	.word	0x61417272

08095a70 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8095a70:	b480      	push	{r7}
 8095a72:	b083      	sub	sp, #12
 8095a74:	af00      	add	r7, sp, #0
 8095a76:	6078      	str	r0, [r7, #4]
 8095a78:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8095a7a:	683b      	ldr	r3, [r7, #0]
 8095a7c:	3b02      	subs	r3, #2
 8095a7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8095a80:	687b      	ldr	r3, [r7, #4]
 8095a82:	69db      	ldr	r3, [r3, #28]
 8095a84:	3b02      	subs	r3, #2
 8095a86:	683a      	ldr	r2, [r7, #0]
 8095a88:	429a      	cmp	r2, r3
 8095a8a:	d301      	bcc.n	8095a90 <clst2sect+0x20>
 8095a8c:	2300      	movs	r3, #0
 8095a8e:	e008      	b.n	8095aa2 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8095a90:	687b      	ldr	r3, [r7, #4]
 8095a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8095a94:	687b      	ldr	r3, [r7, #4]
 8095a96:	895b      	ldrh	r3, [r3, #10]
 8095a98:	4619      	mov	r1, r3
 8095a9a:	683b      	ldr	r3, [r7, #0]
 8095a9c:	fb03 f301 	mul.w	r3, r3, r1
 8095aa0:	4413      	add	r3, r2
}
 8095aa2:	4618      	mov	r0, r3
 8095aa4:	370c      	adds	r7, #12
 8095aa6:	46bd      	mov	sp, r7
 8095aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8095aac:	4770      	bx	lr

08095aae <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8095aae:	b580      	push	{r7, lr}
 8095ab0:	b086      	sub	sp, #24
 8095ab2:	af00      	add	r7, sp, #0
 8095ab4:	6078      	str	r0, [r7, #4]
 8095ab6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8095ab8:	687b      	ldr	r3, [r7, #4]
 8095aba:	681b      	ldr	r3, [r3, #0]
 8095abc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8095abe:	683b      	ldr	r3, [r7, #0]
 8095ac0:	2b01      	cmp	r3, #1
 8095ac2:	d904      	bls.n	8095ace <get_fat+0x20>
 8095ac4:	693b      	ldr	r3, [r7, #16]
 8095ac6:	69db      	ldr	r3, [r3, #28]
 8095ac8:	683a      	ldr	r2, [r7, #0]
 8095aca:	429a      	cmp	r2, r3
 8095acc:	d302      	bcc.n	8095ad4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8095ace:	2301      	movs	r3, #1
 8095ad0:	617b      	str	r3, [r7, #20]
 8095ad2:	e08c      	b.n	8095bee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8095ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8095ad8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8095ada:	693b      	ldr	r3, [r7, #16]
 8095adc:	781b      	ldrb	r3, [r3, #0]
 8095ade:	2b02      	cmp	r3, #2
 8095ae0:	d045      	beq.n	8095b6e <get_fat+0xc0>
 8095ae2:	2b03      	cmp	r3, #3
 8095ae4:	d05d      	beq.n	8095ba2 <get_fat+0xf4>
 8095ae6:	2b01      	cmp	r3, #1
 8095ae8:	d177      	bne.n	8095bda <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8095aea:	683b      	ldr	r3, [r7, #0]
 8095aec:	60fb      	str	r3, [r7, #12]
 8095aee:	68fb      	ldr	r3, [r7, #12]
 8095af0:	085b      	lsrs	r3, r3, #1
 8095af2:	68fa      	ldr	r2, [r7, #12]
 8095af4:	4413      	add	r3, r2
 8095af6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8095af8:	693b      	ldr	r3, [r7, #16]
 8095afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095afc:	68fb      	ldr	r3, [r7, #12]
 8095afe:	0a5b      	lsrs	r3, r3, #9
 8095b00:	4413      	add	r3, r2
 8095b02:	4619      	mov	r1, r3
 8095b04:	6938      	ldr	r0, [r7, #16]
 8095b06:	f7ff ff17 	bl	8095938 <move_window>
 8095b0a:	4603      	mov	r3, r0
 8095b0c:	2b00      	cmp	r3, #0
 8095b0e:	d167      	bne.n	8095be0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8095b10:	68fb      	ldr	r3, [r7, #12]
 8095b12:	1c5a      	adds	r2, r3, #1
 8095b14:	60fa      	str	r2, [r7, #12]
 8095b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8095b1a:	693a      	ldr	r2, [r7, #16]
 8095b1c:	4413      	add	r3, r2
 8095b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8095b22:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8095b24:	693b      	ldr	r3, [r7, #16]
 8095b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095b28:	68fb      	ldr	r3, [r7, #12]
 8095b2a:	0a5b      	lsrs	r3, r3, #9
 8095b2c:	4413      	add	r3, r2
 8095b2e:	4619      	mov	r1, r3
 8095b30:	6938      	ldr	r0, [r7, #16]
 8095b32:	f7ff ff01 	bl	8095938 <move_window>
 8095b36:	4603      	mov	r3, r0
 8095b38:	2b00      	cmp	r3, #0
 8095b3a:	d153      	bne.n	8095be4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8095b3c:	68fb      	ldr	r3, [r7, #12]
 8095b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8095b42:	693a      	ldr	r2, [r7, #16]
 8095b44:	4413      	add	r3, r2
 8095b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8095b4a:	021b      	lsls	r3, r3, #8
 8095b4c:	461a      	mov	r2, r3
 8095b4e:	68bb      	ldr	r3, [r7, #8]
 8095b50:	4313      	orrs	r3, r2
 8095b52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8095b54:	683b      	ldr	r3, [r7, #0]
 8095b56:	f003 0301 	and.w	r3, r3, #1
 8095b5a:	2b00      	cmp	r3, #0
 8095b5c:	d002      	beq.n	8095b64 <get_fat+0xb6>
 8095b5e:	68bb      	ldr	r3, [r7, #8]
 8095b60:	091b      	lsrs	r3, r3, #4
 8095b62:	e002      	b.n	8095b6a <get_fat+0xbc>
 8095b64:	68bb      	ldr	r3, [r7, #8]
 8095b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8095b6a:	617b      	str	r3, [r7, #20]
			break;
 8095b6c:	e03f      	b.n	8095bee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8095b6e:	693b      	ldr	r3, [r7, #16]
 8095b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095b72:	683b      	ldr	r3, [r7, #0]
 8095b74:	0a1b      	lsrs	r3, r3, #8
 8095b76:	4413      	add	r3, r2
 8095b78:	4619      	mov	r1, r3
 8095b7a:	6938      	ldr	r0, [r7, #16]
 8095b7c:	f7ff fedc 	bl	8095938 <move_window>
 8095b80:	4603      	mov	r3, r0
 8095b82:	2b00      	cmp	r3, #0
 8095b84:	d130      	bne.n	8095be8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8095b86:	693b      	ldr	r3, [r7, #16]
 8095b88:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095b8c:	683b      	ldr	r3, [r7, #0]
 8095b8e:	005b      	lsls	r3, r3, #1
 8095b90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8095b94:	4413      	add	r3, r2
 8095b96:	4618      	mov	r0, r3
 8095b98:	f7ff fd2c 	bl	80955f4 <ld_word>
 8095b9c:	4603      	mov	r3, r0
 8095b9e:	617b      	str	r3, [r7, #20]
			break;
 8095ba0:	e025      	b.n	8095bee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8095ba2:	693b      	ldr	r3, [r7, #16]
 8095ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095ba6:	683b      	ldr	r3, [r7, #0]
 8095ba8:	09db      	lsrs	r3, r3, #7
 8095baa:	4413      	add	r3, r2
 8095bac:	4619      	mov	r1, r3
 8095bae:	6938      	ldr	r0, [r7, #16]
 8095bb0:	f7ff fec2 	bl	8095938 <move_window>
 8095bb4:	4603      	mov	r3, r0
 8095bb6:	2b00      	cmp	r3, #0
 8095bb8:	d118      	bne.n	8095bec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8095bba:	693b      	ldr	r3, [r7, #16]
 8095bbc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095bc0:	683b      	ldr	r3, [r7, #0]
 8095bc2:	009b      	lsls	r3, r3, #2
 8095bc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8095bc8:	4413      	add	r3, r2
 8095bca:	4618      	mov	r0, r3
 8095bcc:	f7ff fd2a 	bl	8095624 <ld_dword>
 8095bd0:	4603      	mov	r3, r0
 8095bd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8095bd6:	617b      	str	r3, [r7, #20]
			break;
 8095bd8:	e009      	b.n	8095bee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8095bda:	2301      	movs	r3, #1
 8095bdc:	617b      	str	r3, [r7, #20]
 8095bde:	e006      	b.n	8095bee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8095be0:	bf00      	nop
 8095be2:	e004      	b.n	8095bee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8095be4:	bf00      	nop
 8095be6:	e002      	b.n	8095bee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8095be8:	bf00      	nop
 8095bea:	e000      	b.n	8095bee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8095bec:	bf00      	nop
		}
	}

	return val;
 8095bee:	697b      	ldr	r3, [r7, #20]
}
 8095bf0:	4618      	mov	r0, r3
 8095bf2:	3718      	adds	r7, #24
 8095bf4:	46bd      	mov	sp, r7
 8095bf6:	bd80      	pop	{r7, pc}

08095bf8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8095bf8:	b590      	push	{r4, r7, lr}
 8095bfa:	b089      	sub	sp, #36	; 0x24
 8095bfc:	af00      	add	r7, sp, #0
 8095bfe:	60f8      	str	r0, [r7, #12]
 8095c00:	60b9      	str	r1, [r7, #8]
 8095c02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8095c04:	2302      	movs	r3, #2
 8095c06:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8095c08:	68bb      	ldr	r3, [r7, #8]
 8095c0a:	2b01      	cmp	r3, #1
 8095c0c:	f240 80d6 	bls.w	8095dbc <put_fat+0x1c4>
 8095c10:	68fb      	ldr	r3, [r7, #12]
 8095c12:	69db      	ldr	r3, [r3, #28]
 8095c14:	68ba      	ldr	r2, [r7, #8]
 8095c16:	429a      	cmp	r2, r3
 8095c18:	f080 80d0 	bcs.w	8095dbc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8095c1c:	68fb      	ldr	r3, [r7, #12]
 8095c1e:	781b      	ldrb	r3, [r3, #0]
 8095c20:	2b02      	cmp	r3, #2
 8095c22:	d073      	beq.n	8095d0c <put_fat+0x114>
 8095c24:	2b03      	cmp	r3, #3
 8095c26:	f000 8091 	beq.w	8095d4c <put_fat+0x154>
 8095c2a:	2b01      	cmp	r3, #1
 8095c2c:	f040 80c6 	bne.w	8095dbc <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8095c30:	68bb      	ldr	r3, [r7, #8]
 8095c32:	61bb      	str	r3, [r7, #24]
 8095c34:	69bb      	ldr	r3, [r7, #24]
 8095c36:	085b      	lsrs	r3, r3, #1
 8095c38:	69ba      	ldr	r2, [r7, #24]
 8095c3a:	4413      	add	r3, r2
 8095c3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8095c3e:	68fb      	ldr	r3, [r7, #12]
 8095c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095c42:	69bb      	ldr	r3, [r7, #24]
 8095c44:	0a5b      	lsrs	r3, r3, #9
 8095c46:	4413      	add	r3, r2
 8095c48:	4619      	mov	r1, r3
 8095c4a:	68f8      	ldr	r0, [r7, #12]
 8095c4c:	f7ff fe74 	bl	8095938 <move_window>
 8095c50:	4603      	mov	r3, r0
 8095c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8095c54:	7ffb      	ldrb	r3, [r7, #31]
 8095c56:	2b00      	cmp	r3, #0
 8095c58:	f040 80a9 	bne.w	8095dae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8095c5c:	68fb      	ldr	r3, [r7, #12]
 8095c5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095c62:	69bb      	ldr	r3, [r7, #24]
 8095c64:	1c59      	adds	r1, r3, #1
 8095c66:	61b9      	str	r1, [r7, #24]
 8095c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8095c6c:	4413      	add	r3, r2
 8095c6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8095c70:	68bb      	ldr	r3, [r7, #8]
 8095c72:	f003 0301 	and.w	r3, r3, #1
 8095c76:	2b00      	cmp	r3, #0
 8095c78:	d00d      	beq.n	8095c96 <put_fat+0x9e>
 8095c7a:	697b      	ldr	r3, [r7, #20]
 8095c7c:	781b      	ldrb	r3, [r3, #0]
 8095c7e:	b25b      	sxtb	r3, r3
 8095c80:	f003 030f 	and.w	r3, r3, #15
 8095c84:	b25a      	sxtb	r2, r3
 8095c86:	687b      	ldr	r3, [r7, #4]
 8095c88:	b2db      	uxtb	r3, r3
 8095c8a:	011b      	lsls	r3, r3, #4
 8095c8c:	b25b      	sxtb	r3, r3
 8095c8e:	4313      	orrs	r3, r2
 8095c90:	b25b      	sxtb	r3, r3
 8095c92:	b2db      	uxtb	r3, r3
 8095c94:	e001      	b.n	8095c9a <put_fat+0xa2>
 8095c96:	687b      	ldr	r3, [r7, #4]
 8095c98:	b2db      	uxtb	r3, r3
 8095c9a:	697a      	ldr	r2, [r7, #20]
 8095c9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8095c9e:	68fb      	ldr	r3, [r7, #12]
 8095ca0:	2201      	movs	r2, #1
 8095ca2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8095ca4:	68fb      	ldr	r3, [r7, #12]
 8095ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095ca8:	69bb      	ldr	r3, [r7, #24]
 8095caa:	0a5b      	lsrs	r3, r3, #9
 8095cac:	4413      	add	r3, r2
 8095cae:	4619      	mov	r1, r3
 8095cb0:	68f8      	ldr	r0, [r7, #12]
 8095cb2:	f7ff fe41 	bl	8095938 <move_window>
 8095cb6:	4603      	mov	r3, r0
 8095cb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8095cba:	7ffb      	ldrb	r3, [r7, #31]
 8095cbc:	2b00      	cmp	r3, #0
 8095cbe:	d178      	bne.n	8095db2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8095cc0:	68fb      	ldr	r3, [r7, #12]
 8095cc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095cc6:	69bb      	ldr	r3, [r7, #24]
 8095cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8095ccc:	4413      	add	r3, r2
 8095cce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8095cd0:	68bb      	ldr	r3, [r7, #8]
 8095cd2:	f003 0301 	and.w	r3, r3, #1
 8095cd6:	2b00      	cmp	r3, #0
 8095cd8:	d003      	beq.n	8095ce2 <put_fat+0xea>
 8095cda:	687b      	ldr	r3, [r7, #4]
 8095cdc:	091b      	lsrs	r3, r3, #4
 8095cde:	b2db      	uxtb	r3, r3
 8095ce0:	e00e      	b.n	8095d00 <put_fat+0x108>
 8095ce2:	697b      	ldr	r3, [r7, #20]
 8095ce4:	781b      	ldrb	r3, [r3, #0]
 8095ce6:	b25b      	sxtb	r3, r3
 8095ce8:	f023 030f 	bic.w	r3, r3, #15
 8095cec:	b25a      	sxtb	r2, r3
 8095cee:	687b      	ldr	r3, [r7, #4]
 8095cf0:	0a1b      	lsrs	r3, r3, #8
 8095cf2:	b25b      	sxtb	r3, r3
 8095cf4:	f003 030f 	and.w	r3, r3, #15
 8095cf8:	b25b      	sxtb	r3, r3
 8095cfa:	4313      	orrs	r3, r2
 8095cfc:	b25b      	sxtb	r3, r3
 8095cfe:	b2db      	uxtb	r3, r3
 8095d00:	697a      	ldr	r2, [r7, #20]
 8095d02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8095d04:	68fb      	ldr	r3, [r7, #12]
 8095d06:	2201      	movs	r2, #1
 8095d08:	70da      	strb	r2, [r3, #3]
			break;
 8095d0a:	e057      	b.n	8095dbc <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8095d0c:	68fb      	ldr	r3, [r7, #12]
 8095d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095d10:	68bb      	ldr	r3, [r7, #8]
 8095d12:	0a1b      	lsrs	r3, r3, #8
 8095d14:	4413      	add	r3, r2
 8095d16:	4619      	mov	r1, r3
 8095d18:	68f8      	ldr	r0, [r7, #12]
 8095d1a:	f7ff fe0d 	bl	8095938 <move_window>
 8095d1e:	4603      	mov	r3, r0
 8095d20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8095d22:	7ffb      	ldrb	r3, [r7, #31]
 8095d24:	2b00      	cmp	r3, #0
 8095d26:	d146      	bne.n	8095db6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8095d28:	68fb      	ldr	r3, [r7, #12]
 8095d2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095d2e:	68bb      	ldr	r3, [r7, #8]
 8095d30:	005b      	lsls	r3, r3, #1
 8095d32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8095d36:	4413      	add	r3, r2
 8095d38:	687a      	ldr	r2, [r7, #4]
 8095d3a:	b292      	uxth	r2, r2
 8095d3c:	4611      	mov	r1, r2
 8095d3e:	4618      	mov	r0, r3
 8095d40:	f7ff fc93 	bl	809566a <st_word>
			fs->wflag = 1;
 8095d44:	68fb      	ldr	r3, [r7, #12]
 8095d46:	2201      	movs	r2, #1
 8095d48:	70da      	strb	r2, [r3, #3]
			break;
 8095d4a:	e037      	b.n	8095dbc <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8095d4c:	68fb      	ldr	r3, [r7, #12]
 8095d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8095d50:	68bb      	ldr	r3, [r7, #8]
 8095d52:	09db      	lsrs	r3, r3, #7
 8095d54:	4413      	add	r3, r2
 8095d56:	4619      	mov	r1, r3
 8095d58:	68f8      	ldr	r0, [r7, #12]
 8095d5a:	f7ff fded 	bl	8095938 <move_window>
 8095d5e:	4603      	mov	r3, r0
 8095d60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8095d62:	7ffb      	ldrb	r3, [r7, #31]
 8095d64:	2b00      	cmp	r3, #0
 8095d66:	d128      	bne.n	8095dba <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8095d68:	687b      	ldr	r3, [r7, #4]
 8095d6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8095d6e:	68fb      	ldr	r3, [r7, #12]
 8095d70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095d74:	68bb      	ldr	r3, [r7, #8]
 8095d76:	009b      	lsls	r3, r3, #2
 8095d78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8095d7c:	4413      	add	r3, r2
 8095d7e:	4618      	mov	r0, r3
 8095d80:	f7ff fc50 	bl	8095624 <ld_dword>
 8095d84:	4603      	mov	r3, r0
 8095d86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8095d8a:	4323      	orrs	r3, r4
 8095d8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8095d8e:	68fb      	ldr	r3, [r7, #12]
 8095d90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8095d94:	68bb      	ldr	r3, [r7, #8]
 8095d96:	009b      	lsls	r3, r3, #2
 8095d98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8095d9c:	4413      	add	r3, r2
 8095d9e:	6879      	ldr	r1, [r7, #4]
 8095da0:	4618      	mov	r0, r3
 8095da2:	f7ff fc7d 	bl	80956a0 <st_dword>
			fs->wflag = 1;
 8095da6:	68fb      	ldr	r3, [r7, #12]
 8095da8:	2201      	movs	r2, #1
 8095daa:	70da      	strb	r2, [r3, #3]
			break;
 8095dac:	e006      	b.n	8095dbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8095dae:	bf00      	nop
 8095db0:	e004      	b.n	8095dbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8095db2:	bf00      	nop
 8095db4:	e002      	b.n	8095dbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8095db6:	bf00      	nop
 8095db8:	e000      	b.n	8095dbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8095dba:	bf00      	nop
		}
	}
	return res;
 8095dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8095dbe:	4618      	mov	r0, r3
 8095dc0:	3724      	adds	r7, #36	; 0x24
 8095dc2:	46bd      	mov	sp, r7
 8095dc4:	bd90      	pop	{r4, r7, pc}

08095dc6 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
)
{
 8095dc6:	b580      	push	{r7, lr}
 8095dc8:	b088      	sub	sp, #32
 8095dca:	af00      	add	r7, sp, #0
 8095dcc:	60f8      	str	r0, [r7, #12]
 8095dce:	60b9      	str	r1, [r7, #8]
 8095dd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8095dd2:	2300      	movs	r3, #0
 8095dd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8095dd6:	68fb      	ldr	r3, [r7, #12]
 8095dd8:	681b      	ldr	r3, [r3, #0]
 8095dda:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8095ddc:	68bb      	ldr	r3, [r7, #8]
 8095dde:	2b01      	cmp	r3, #1
 8095de0:	d904      	bls.n	8095dec <remove_chain+0x26>
 8095de2:	69bb      	ldr	r3, [r7, #24]
 8095de4:	69db      	ldr	r3, [r3, #28]
 8095de6:	68ba      	ldr	r2, [r7, #8]
 8095de8:	429a      	cmp	r2, r3
 8095dea:	d301      	bcc.n	8095df0 <remove_chain+0x2a>
 8095dec:	2302      	movs	r3, #2
 8095dee:	e04b      	b.n	8095e88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8095df0:	687b      	ldr	r3, [r7, #4]
 8095df2:	2b00      	cmp	r3, #0
 8095df4:	d00c      	beq.n	8095e10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8095df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8095dfa:	6879      	ldr	r1, [r7, #4]
 8095dfc:	69b8      	ldr	r0, [r7, #24]
 8095dfe:	f7ff fefb 	bl	8095bf8 <put_fat>
 8095e02:	4603      	mov	r3, r0
 8095e04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8095e06:	7ffb      	ldrb	r3, [r7, #31]
 8095e08:	2b00      	cmp	r3, #0
 8095e0a:	d001      	beq.n	8095e10 <remove_chain+0x4a>
 8095e0c:	7ffb      	ldrb	r3, [r7, #31]
 8095e0e:	e03b      	b.n	8095e88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8095e10:	68b9      	ldr	r1, [r7, #8]
 8095e12:	68f8      	ldr	r0, [r7, #12]
 8095e14:	f7ff fe4b 	bl	8095aae <get_fat>
 8095e18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8095e1a:	697b      	ldr	r3, [r7, #20]
 8095e1c:	2b00      	cmp	r3, #0
 8095e1e:	d031      	beq.n	8095e84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8095e20:	697b      	ldr	r3, [r7, #20]
 8095e22:	2b01      	cmp	r3, #1
 8095e24:	d101      	bne.n	8095e2a <remove_chain+0x64>
 8095e26:	2302      	movs	r3, #2
 8095e28:	e02e      	b.n	8095e88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8095e2a:	697b      	ldr	r3, [r7, #20]
 8095e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8095e30:	d101      	bne.n	8095e36 <remove_chain+0x70>
 8095e32:	2301      	movs	r3, #1
 8095e34:	e028      	b.n	8095e88 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8095e36:	2200      	movs	r2, #0
 8095e38:	68b9      	ldr	r1, [r7, #8]
 8095e3a:	69b8      	ldr	r0, [r7, #24]
 8095e3c:	f7ff fedc 	bl	8095bf8 <put_fat>
 8095e40:	4603      	mov	r3, r0
 8095e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8095e44:	7ffb      	ldrb	r3, [r7, #31]
 8095e46:	2b00      	cmp	r3, #0
 8095e48:	d001      	beq.n	8095e4e <remove_chain+0x88>
 8095e4a:	7ffb      	ldrb	r3, [r7, #31]
 8095e4c:	e01c      	b.n	8095e88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8095e4e:	69bb      	ldr	r3, [r7, #24]
 8095e50:	695a      	ldr	r2, [r3, #20]
 8095e52:	69bb      	ldr	r3, [r7, #24]
 8095e54:	69db      	ldr	r3, [r3, #28]
 8095e56:	3b02      	subs	r3, #2
 8095e58:	429a      	cmp	r2, r3
 8095e5a:	d20b      	bcs.n	8095e74 <remove_chain+0xae>
			fs->free_clst++;
 8095e5c:	69bb      	ldr	r3, [r7, #24]
 8095e5e:	695b      	ldr	r3, [r3, #20]
 8095e60:	1c5a      	adds	r2, r3, #1
 8095e62:	69bb      	ldr	r3, [r7, #24]
 8095e64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8095e66:	69bb      	ldr	r3, [r7, #24]
 8095e68:	791b      	ldrb	r3, [r3, #4]
 8095e6a:	f043 0301 	orr.w	r3, r3, #1
 8095e6e:	b2da      	uxtb	r2, r3
 8095e70:	69bb      	ldr	r3, [r7, #24]
 8095e72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8095e74:	697b      	ldr	r3, [r7, #20]
 8095e76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8095e78:	69bb      	ldr	r3, [r7, #24]
 8095e7a:	69db      	ldr	r3, [r3, #28]
 8095e7c:	68ba      	ldr	r2, [r7, #8]
 8095e7e:	429a      	cmp	r2, r3
 8095e80:	d3c6      	bcc.n	8095e10 <remove_chain+0x4a>
 8095e82:	e000      	b.n	8095e86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8095e84:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8095e86:	2300      	movs	r3, #0
}
 8095e88:	4618      	mov	r0, r3
 8095e8a:	3720      	adds	r7, #32
 8095e8c:	46bd      	mov	sp, r7
 8095e8e:	bd80      	pop	{r7, pc}

08095e90 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8095e90:	b580      	push	{r7, lr}
 8095e92:	b088      	sub	sp, #32
 8095e94:	af00      	add	r7, sp, #0
 8095e96:	6078      	str	r0, [r7, #4]
 8095e98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8095e9a:	687b      	ldr	r3, [r7, #4]
 8095e9c:	681b      	ldr	r3, [r3, #0]
 8095e9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8095ea0:	683b      	ldr	r3, [r7, #0]
 8095ea2:	2b00      	cmp	r3, #0
 8095ea4:	d10d      	bne.n	8095ec2 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8095ea6:	693b      	ldr	r3, [r7, #16]
 8095ea8:	691b      	ldr	r3, [r3, #16]
 8095eaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8095eac:	69bb      	ldr	r3, [r7, #24]
 8095eae:	2b00      	cmp	r3, #0
 8095eb0:	d004      	beq.n	8095ebc <create_chain+0x2c>
 8095eb2:	693b      	ldr	r3, [r7, #16]
 8095eb4:	69db      	ldr	r3, [r3, #28]
 8095eb6:	69ba      	ldr	r2, [r7, #24]
 8095eb8:	429a      	cmp	r2, r3
 8095eba:	d31b      	bcc.n	8095ef4 <create_chain+0x64>
 8095ebc:	2301      	movs	r3, #1
 8095ebe:	61bb      	str	r3, [r7, #24]
 8095ec0:	e018      	b.n	8095ef4 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8095ec2:	6839      	ldr	r1, [r7, #0]
 8095ec4:	6878      	ldr	r0, [r7, #4]
 8095ec6:	f7ff fdf2 	bl	8095aae <get_fat>
 8095eca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8095ecc:	68fb      	ldr	r3, [r7, #12]
 8095ece:	2b01      	cmp	r3, #1
 8095ed0:	d801      	bhi.n	8095ed6 <create_chain+0x46>
 8095ed2:	2301      	movs	r3, #1
 8095ed4:	e0a9      	b.n	809602a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8095ed6:	68fb      	ldr	r3, [r7, #12]
 8095ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8095edc:	d101      	bne.n	8095ee2 <create_chain+0x52>
 8095ede:	68fb      	ldr	r3, [r7, #12]
 8095ee0:	e0a3      	b.n	809602a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8095ee2:	693b      	ldr	r3, [r7, #16]
 8095ee4:	69db      	ldr	r3, [r3, #28]
 8095ee6:	68fa      	ldr	r2, [r7, #12]
 8095ee8:	429a      	cmp	r2, r3
 8095eea:	d201      	bcs.n	8095ef0 <create_chain+0x60>
 8095eec:	68fb      	ldr	r3, [r7, #12]
 8095eee:	e09c      	b.n	809602a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8095ef0:	683b      	ldr	r3, [r7, #0]
 8095ef2:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8095ef4:	693b      	ldr	r3, [r7, #16]
 8095ef6:	695b      	ldr	r3, [r3, #20]
 8095ef8:	2b00      	cmp	r3, #0
 8095efa:	d101      	bne.n	8095f00 <create_chain+0x70>
 8095efc:	2300      	movs	r3, #0
 8095efe:	e094      	b.n	809602a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8095f00:	2300      	movs	r3, #0
 8095f02:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8095f04:	69ba      	ldr	r2, [r7, #24]
 8095f06:	683b      	ldr	r3, [r7, #0]
 8095f08:	429a      	cmp	r2, r3
 8095f0a:	d129      	bne.n	8095f60 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8095f0c:	69bb      	ldr	r3, [r7, #24]
 8095f0e:	3301      	adds	r3, #1
 8095f10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8095f12:	693b      	ldr	r3, [r7, #16]
 8095f14:	69db      	ldr	r3, [r3, #28]
 8095f16:	69fa      	ldr	r2, [r7, #28]
 8095f18:	429a      	cmp	r2, r3
 8095f1a:	d301      	bcc.n	8095f20 <create_chain+0x90>
 8095f1c:	2302      	movs	r3, #2
 8095f1e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8095f20:	69f9      	ldr	r1, [r7, #28]
 8095f22:	6878      	ldr	r0, [r7, #4]
 8095f24:	f7ff fdc3 	bl	8095aae <get_fat>
 8095f28:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8095f2a:	68fb      	ldr	r3, [r7, #12]
 8095f2c:	2b01      	cmp	r3, #1
 8095f2e:	d003      	beq.n	8095f38 <create_chain+0xa8>
 8095f30:	68fb      	ldr	r3, [r7, #12]
 8095f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8095f36:	d101      	bne.n	8095f3c <create_chain+0xac>
 8095f38:	68fb      	ldr	r3, [r7, #12]
 8095f3a:	e076      	b.n	809602a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8095f3c:	68fb      	ldr	r3, [r7, #12]
 8095f3e:	2b00      	cmp	r3, #0
 8095f40:	d00e      	beq.n	8095f60 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8095f42:	693b      	ldr	r3, [r7, #16]
 8095f44:	691b      	ldr	r3, [r3, #16]
 8095f46:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8095f48:	68fb      	ldr	r3, [r7, #12]
 8095f4a:	2b01      	cmp	r3, #1
 8095f4c:	d906      	bls.n	8095f5c <create_chain+0xcc>
 8095f4e:	693b      	ldr	r3, [r7, #16]
 8095f50:	69db      	ldr	r3, [r3, #28]
 8095f52:	68fa      	ldr	r2, [r7, #12]
 8095f54:	429a      	cmp	r2, r3
 8095f56:	d201      	bcs.n	8095f5c <create_chain+0xcc>
 8095f58:	68fb      	ldr	r3, [r7, #12]
 8095f5a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8095f5c:	2300      	movs	r3, #0
 8095f5e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8095f60:	69fb      	ldr	r3, [r7, #28]
 8095f62:	2b00      	cmp	r3, #0
 8095f64:	d129      	bne.n	8095fba <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8095f66:	69bb      	ldr	r3, [r7, #24]
 8095f68:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8095f6a:	69fb      	ldr	r3, [r7, #28]
 8095f6c:	3301      	adds	r3, #1
 8095f6e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8095f70:	693b      	ldr	r3, [r7, #16]
 8095f72:	69db      	ldr	r3, [r3, #28]
 8095f74:	69fa      	ldr	r2, [r7, #28]
 8095f76:	429a      	cmp	r2, r3
 8095f78:	d307      	bcc.n	8095f8a <create_chain+0xfa>
					ncl = 2;
 8095f7a:	2302      	movs	r3, #2
 8095f7c:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8095f7e:	69fa      	ldr	r2, [r7, #28]
 8095f80:	69bb      	ldr	r3, [r7, #24]
 8095f82:	429a      	cmp	r2, r3
 8095f84:	d901      	bls.n	8095f8a <create_chain+0xfa>
 8095f86:	2300      	movs	r3, #0
 8095f88:	e04f      	b.n	809602a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8095f8a:	69f9      	ldr	r1, [r7, #28]
 8095f8c:	6878      	ldr	r0, [r7, #4]
 8095f8e:	f7ff fd8e 	bl	8095aae <get_fat>
 8095f92:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8095f94:	68fb      	ldr	r3, [r7, #12]
 8095f96:	2b00      	cmp	r3, #0
 8095f98:	d00e      	beq.n	8095fb8 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8095f9a:	68fb      	ldr	r3, [r7, #12]
 8095f9c:	2b01      	cmp	r3, #1
 8095f9e:	d003      	beq.n	8095fa8 <create_chain+0x118>
 8095fa0:	68fb      	ldr	r3, [r7, #12]
 8095fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8095fa6:	d101      	bne.n	8095fac <create_chain+0x11c>
 8095fa8:	68fb      	ldr	r3, [r7, #12]
 8095faa:	e03e      	b.n	809602a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8095fac:	69fa      	ldr	r2, [r7, #28]
 8095fae:	69bb      	ldr	r3, [r7, #24]
 8095fb0:	429a      	cmp	r2, r3
 8095fb2:	d1da      	bne.n	8095f6a <create_chain+0xda>
 8095fb4:	2300      	movs	r3, #0
 8095fb6:	e038      	b.n	809602a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8095fb8:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8095fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8095fbe:	69f9      	ldr	r1, [r7, #28]
 8095fc0:	6938      	ldr	r0, [r7, #16]
 8095fc2:	f7ff fe19 	bl	8095bf8 <put_fat>
 8095fc6:	4603      	mov	r3, r0
 8095fc8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8095fca:	7dfb      	ldrb	r3, [r7, #23]
 8095fcc:	2b00      	cmp	r3, #0
 8095fce:	d109      	bne.n	8095fe4 <create_chain+0x154>
 8095fd0:	683b      	ldr	r3, [r7, #0]
 8095fd2:	2b00      	cmp	r3, #0
 8095fd4:	d006      	beq.n	8095fe4 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8095fd6:	69fa      	ldr	r2, [r7, #28]
 8095fd8:	6839      	ldr	r1, [r7, #0]
 8095fda:	6938      	ldr	r0, [r7, #16]
 8095fdc:	f7ff fe0c 	bl	8095bf8 <put_fat>
 8095fe0:	4603      	mov	r3, r0
 8095fe2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8095fe4:	7dfb      	ldrb	r3, [r7, #23]
 8095fe6:	2b00      	cmp	r3, #0
 8095fe8:	d116      	bne.n	8096018 <create_chain+0x188>
		fs->last_clst = ncl;
 8095fea:	693b      	ldr	r3, [r7, #16]
 8095fec:	69fa      	ldr	r2, [r7, #28]
 8095fee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8095ff0:	693b      	ldr	r3, [r7, #16]
 8095ff2:	695a      	ldr	r2, [r3, #20]
 8095ff4:	693b      	ldr	r3, [r7, #16]
 8095ff6:	69db      	ldr	r3, [r3, #28]
 8095ff8:	3b02      	subs	r3, #2
 8095ffa:	429a      	cmp	r2, r3
 8095ffc:	d804      	bhi.n	8096008 <create_chain+0x178>
 8095ffe:	693b      	ldr	r3, [r7, #16]
 8096000:	695b      	ldr	r3, [r3, #20]
 8096002:	1e5a      	subs	r2, r3, #1
 8096004:	693b      	ldr	r3, [r7, #16]
 8096006:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8096008:	693b      	ldr	r3, [r7, #16]
 809600a:	791b      	ldrb	r3, [r3, #4]
 809600c:	f043 0301 	orr.w	r3, r3, #1
 8096010:	b2da      	uxtb	r2, r3
 8096012:	693b      	ldr	r3, [r7, #16]
 8096014:	711a      	strb	r2, [r3, #4]
 8096016:	e007      	b.n	8096028 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8096018:	7dfb      	ldrb	r3, [r7, #23]
 809601a:	2b01      	cmp	r3, #1
 809601c:	d102      	bne.n	8096024 <create_chain+0x194>
 809601e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8096022:	e000      	b.n	8096026 <create_chain+0x196>
 8096024:	2301      	movs	r3, #1
 8096026:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8096028:	69fb      	ldr	r3, [r7, #28]
}
 809602a:	4618      	mov	r0, r3
 809602c:	3720      	adds	r7, #32
 809602e:	46bd      	mov	sp, r7
 8096030:	bd80      	pop	{r7, pc}

08096032 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8096032:	b580      	push	{r7, lr}
 8096034:	b086      	sub	sp, #24
 8096036:	af00      	add	r7, sp, #0
 8096038:	6078      	str	r0, [r7, #4]
 809603a:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 809603c:	6878      	ldr	r0, [r7, #4]
 809603e:	f7ff fc3f 	bl	80958c0 <sync_window>
 8096042:	4603      	mov	r3, r0
 8096044:	2b00      	cmp	r3, #0
 8096046:	d001      	beq.n	809604c <dir_clear+0x1a>
 8096048:	2301      	movs	r3, #1
 809604a:	e036      	b.n	80960ba <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 809604c:	6839      	ldr	r1, [r7, #0]
 809604e:	6878      	ldr	r0, [r7, #4]
 8096050:	f7ff fd0e 	bl	8095a70 <clst2sect>
 8096054:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8096056:	687b      	ldr	r3, [r7, #4]
 8096058:	693a      	ldr	r2, [r7, #16]
 809605a:	635a      	str	r2, [r3, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 809605c:	687b      	ldr	r3, [r7, #4]
 809605e:	3338      	adds	r3, #56	; 0x38
 8096060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8096064:	2100      	movs	r1, #0
 8096066:	4618      	mov	r0, r3
 8096068:	f7ff fb67 	bl	809573a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 809606c:	687b      	ldr	r3, [r7, #4]
 809606e:	3338      	adds	r3, #56	; 0x38
 8096070:	60fb      	str	r3, [r7, #12]
 8096072:	2301      	movs	r3, #1
 8096074:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8096076:	2300      	movs	r3, #0
 8096078:	617b      	str	r3, [r7, #20]
 809607a:	e003      	b.n	8096084 <dir_clear+0x52>
 809607c:	697a      	ldr	r2, [r7, #20]
 809607e:	68bb      	ldr	r3, [r7, #8]
 8096080:	4413      	add	r3, r2
 8096082:	617b      	str	r3, [r7, #20]
 8096084:	687b      	ldr	r3, [r7, #4]
 8096086:	895b      	ldrh	r3, [r3, #10]
 8096088:	461a      	mov	r2, r3
 809608a:	697b      	ldr	r3, [r7, #20]
 809608c:	4293      	cmp	r3, r2
 809608e:	d20b      	bcs.n	80960a8 <dir_clear+0x76>
 8096090:	687b      	ldr	r3, [r7, #4]
 8096092:	7858      	ldrb	r0, [r3, #1]
 8096094:	693a      	ldr	r2, [r7, #16]
 8096096:	697b      	ldr	r3, [r7, #20]
 8096098:	441a      	add	r2, r3
 809609a:	68bb      	ldr	r3, [r7, #8]
 809609c:	68f9      	ldr	r1, [r7, #12]
 809609e:	f7ff f9fd 	bl	809549c <disk_write>
 80960a2:	4603      	mov	r3, r0
 80960a4:	2b00      	cmp	r3, #0
 80960a6:	d0e9      	beq.n	809607c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80960a8:	687b      	ldr	r3, [r7, #4]
 80960aa:	895b      	ldrh	r3, [r3, #10]
 80960ac:	461a      	mov	r2, r3
 80960ae:	697b      	ldr	r3, [r7, #20]
 80960b0:	4293      	cmp	r3, r2
 80960b2:	bf14      	ite	ne
 80960b4:	2301      	movne	r3, #1
 80960b6:	2300      	moveq	r3, #0
 80960b8:	b2db      	uxtb	r3, r3
}
 80960ba:	4618      	mov	r0, r3
 80960bc:	3718      	adds	r7, #24
 80960be:	46bd      	mov	sp, r7
 80960c0:	bd80      	pop	{r7, pc}

080960c2 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80960c2:	b580      	push	{r7, lr}
 80960c4:	b086      	sub	sp, #24
 80960c6:	af00      	add	r7, sp, #0
 80960c8:	6078      	str	r0, [r7, #4]
 80960ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80960cc:	687b      	ldr	r3, [r7, #4]
 80960ce:	681b      	ldr	r3, [r3, #0]
 80960d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80960d2:	683b      	ldr	r3, [r7, #0]
 80960d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80960d8:	d204      	bcs.n	80960e4 <dir_sdi+0x22>
 80960da:	683b      	ldr	r3, [r7, #0]
 80960dc:	f003 031f 	and.w	r3, r3, #31
 80960e0:	2b00      	cmp	r3, #0
 80960e2:	d001      	beq.n	80960e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80960e4:	2302      	movs	r3, #2
 80960e6:	e063      	b.n	80961b0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80960e8:	687b      	ldr	r3, [r7, #4]
 80960ea:	683a      	ldr	r2, [r7, #0]
 80960ec:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80960ee:	687b      	ldr	r3, [r7, #4]
 80960f0:	689b      	ldr	r3, [r3, #8]
 80960f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80960f4:	697b      	ldr	r3, [r7, #20]
 80960f6:	2b00      	cmp	r3, #0
 80960f8:	d106      	bne.n	8096108 <dir_sdi+0x46>
 80960fa:	693b      	ldr	r3, [r7, #16]
 80960fc:	781b      	ldrb	r3, [r3, #0]
 80960fe:	2b02      	cmp	r3, #2
 8096100:	d902      	bls.n	8096108 <dir_sdi+0x46>
		clst = fs->dirbase;
 8096102:	693b      	ldr	r3, [r7, #16]
 8096104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8096106:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8096108:	697b      	ldr	r3, [r7, #20]
 809610a:	2b00      	cmp	r3, #0
 809610c:	d10c      	bne.n	8096128 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 809610e:	683b      	ldr	r3, [r7, #0]
 8096110:	095b      	lsrs	r3, r3, #5
 8096112:	693a      	ldr	r2, [r7, #16]
 8096114:	8912      	ldrh	r2, [r2, #8]
 8096116:	4293      	cmp	r3, r2
 8096118:	d301      	bcc.n	809611e <dir_sdi+0x5c>
 809611a:	2302      	movs	r3, #2
 809611c:	e048      	b.n	80961b0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 809611e:	693b      	ldr	r3, [r7, #16]
 8096120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8096122:	687b      	ldr	r3, [r7, #4]
 8096124:	619a      	str	r2, [r3, #24]
 8096126:	e029      	b.n	809617c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8096128:	693b      	ldr	r3, [r7, #16]
 809612a:	895b      	ldrh	r3, [r3, #10]
 809612c:	025b      	lsls	r3, r3, #9
 809612e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8096130:	e019      	b.n	8096166 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8096132:	687b      	ldr	r3, [r7, #4]
 8096134:	6979      	ldr	r1, [r7, #20]
 8096136:	4618      	mov	r0, r3
 8096138:	f7ff fcb9 	bl	8095aae <get_fat>
 809613c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 809613e:	697b      	ldr	r3, [r7, #20]
 8096140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8096144:	d101      	bne.n	809614a <dir_sdi+0x88>
 8096146:	2301      	movs	r3, #1
 8096148:	e032      	b.n	80961b0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 809614a:	697b      	ldr	r3, [r7, #20]
 809614c:	2b01      	cmp	r3, #1
 809614e:	d904      	bls.n	809615a <dir_sdi+0x98>
 8096150:	693b      	ldr	r3, [r7, #16]
 8096152:	69db      	ldr	r3, [r3, #28]
 8096154:	697a      	ldr	r2, [r7, #20]
 8096156:	429a      	cmp	r2, r3
 8096158:	d301      	bcc.n	809615e <dir_sdi+0x9c>
 809615a:	2302      	movs	r3, #2
 809615c:	e028      	b.n	80961b0 <dir_sdi+0xee>
			ofs -= csz;
 809615e:	683a      	ldr	r2, [r7, #0]
 8096160:	68fb      	ldr	r3, [r7, #12]
 8096162:	1ad3      	subs	r3, r2, r3
 8096164:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8096166:	683a      	ldr	r2, [r7, #0]
 8096168:	68fb      	ldr	r3, [r7, #12]
 809616a:	429a      	cmp	r2, r3
 809616c:	d2e1      	bcs.n	8096132 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 809616e:	6979      	ldr	r1, [r7, #20]
 8096170:	6938      	ldr	r0, [r7, #16]
 8096172:	f7ff fc7d 	bl	8095a70 <clst2sect>
 8096176:	4602      	mov	r2, r0
 8096178:	687b      	ldr	r3, [r7, #4]
 809617a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 809617c:	687b      	ldr	r3, [r7, #4]
 809617e:	697a      	ldr	r2, [r7, #20]
 8096180:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8096182:	687b      	ldr	r3, [r7, #4]
 8096184:	699b      	ldr	r3, [r3, #24]
 8096186:	2b00      	cmp	r3, #0
 8096188:	d101      	bne.n	809618e <dir_sdi+0xcc>
 809618a:	2302      	movs	r3, #2
 809618c:	e010      	b.n	80961b0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 809618e:	687b      	ldr	r3, [r7, #4]
 8096190:	699a      	ldr	r2, [r3, #24]
 8096192:	683b      	ldr	r3, [r7, #0]
 8096194:	0a5b      	lsrs	r3, r3, #9
 8096196:	441a      	add	r2, r3
 8096198:	687b      	ldr	r3, [r7, #4]
 809619a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 809619c:	693b      	ldr	r3, [r7, #16]
 809619e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80961a2:	683b      	ldr	r3, [r7, #0]
 80961a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80961a8:	441a      	add	r2, r3
 80961aa:	687b      	ldr	r3, [r7, #4]
 80961ac:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80961ae:	2300      	movs	r3, #0
}
 80961b0:	4618      	mov	r0, r3
 80961b2:	3718      	adds	r7, #24
 80961b4:	46bd      	mov	sp, r7
 80961b6:	bd80      	pop	{r7, pc}

080961b8 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80961b8:	b580      	push	{r7, lr}
 80961ba:	b086      	sub	sp, #24
 80961bc:	af00      	add	r7, sp, #0
 80961be:	6078      	str	r0, [r7, #4]
 80961c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80961c2:	687b      	ldr	r3, [r7, #4]
 80961c4:	681b      	ldr	r3, [r3, #0]
 80961c6:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80961c8:	687b      	ldr	r3, [r7, #4]
 80961ca:	691b      	ldr	r3, [r3, #16]
 80961cc:	3320      	adds	r3, #32
 80961ce:	60fb      	str	r3, [r7, #12]
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80961d0:	687b      	ldr	r3, [r7, #4]
 80961d2:	699b      	ldr	r3, [r3, #24]
 80961d4:	2b00      	cmp	r3, #0
 80961d6:	d003      	beq.n	80961e0 <dir_next+0x28>
 80961d8:	68fb      	ldr	r3, [r7, #12]
 80961da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80961de:	d301      	bcc.n	80961e4 <dir_next+0x2c>
 80961e0:	2304      	movs	r3, #4
 80961e2:	e078      	b.n	80962d6 <dir_next+0x11e>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80961e4:	68fb      	ldr	r3, [r7, #12]
 80961e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80961ea:	2b00      	cmp	r3, #0
 80961ec:	d166      	bne.n	80962bc <dir_next+0x104>
		dp->sect++;				/* Next sector */
 80961ee:	687b      	ldr	r3, [r7, #4]
 80961f0:	699b      	ldr	r3, [r3, #24]
 80961f2:	1c5a      	adds	r2, r3, #1
 80961f4:	687b      	ldr	r3, [r7, #4]
 80961f6:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80961f8:	687b      	ldr	r3, [r7, #4]
 80961fa:	695b      	ldr	r3, [r3, #20]
 80961fc:	2b00      	cmp	r3, #0
 80961fe:	d10a      	bne.n	8096216 <dir_next+0x5e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8096200:	68fb      	ldr	r3, [r7, #12]
 8096202:	095b      	lsrs	r3, r3, #5
 8096204:	693a      	ldr	r2, [r7, #16]
 8096206:	8912      	ldrh	r2, [r2, #8]
 8096208:	4293      	cmp	r3, r2
 809620a:	d357      	bcc.n	80962bc <dir_next+0x104>
				dp->sect = 0; return FR_NO_FILE;
 809620c:	687b      	ldr	r3, [r7, #4]
 809620e:	2200      	movs	r2, #0
 8096210:	619a      	str	r2, [r3, #24]
 8096212:	2304      	movs	r3, #4
 8096214:	e05f      	b.n	80962d6 <dir_next+0x11e>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8096216:	68fb      	ldr	r3, [r7, #12]
 8096218:	0a5b      	lsrs	r3, r3, #9
 809621a:	693a      	ldr	r2, [r7, #16]
 809621c:	8952      	ldrh	r2, [r2, #10]
 809621e:	3a01      	subs	r2, #1
 8096220:	4013      	ands	r3, r2
 8096222:	2b00      	cmp	r3, #0
 8096224:	d14a      	bne.n	80962bc <dir_next+0x104>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8096226:	687a      	ldr	r2, [r7, #4]
 8096228:	687b      	ldr	r3, [r7, #4]
 809622a:	695b      	ldr	r3, [r3, #20]
 809622c:	4619      	mov	r1, r3
 809622e:	4610      	mov	r0, r2
 8096230:	f7ff fc3d 	bl	8095aae <get_fat>
 8096234:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8096236:	697b      	ldr	r3, [r7, #20]
 8096238:	2b01      	cmp	r3, #1
 809623a:	d801      	bhi.n	8096240 <dir_next+0x88>
 809623c:	2302      	movs	r3, #2
 809623e:	e04a      	b.n	80962d6 <dir_next+0x11e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8096240:	697b      	ldr	r3, [r7, #20]
 8096242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8096246:	d101      	bne.n	809624c <dir_next+0x94>
 8096248:	2301      	movs	r3, #1
 809624a:	e044      	b.n	80962d6 <dir_next+0x11e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 809624c:	693b      	ldr	r3, [r7, #16]
 809624e:	69db      	ldr	r3, [r3, #28]
 8096250:	697a      	ldr	r2, [r7, #20]
 8096252:	429a      	cmp	r2, r3
 8096254:	d328      	bcc.n	80962a8 <dir_next+0xf0>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8096256:	683b      	ldr	r3, [r7, #0]
 8096258:	2b00      	cmp	r3, #0
 809625a:	d104      	bne.n	8096266 <dir_next+0xae>
						dp->sect = 0; return FR_NO_FILE;
 809625c:	687b      	ldr	r3, [r7, #4]
 809625e:	2200      	movs	r2, #0
 8096260:	619a      	str	r2, [r3, #24]
 8096262:	2304      	movs	r3, #4
 8096264:	e037      	b.n	80962d6 <dir_next+0x11e>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8096266:	687a      	ldr	r2, [r7, #4]
 8096268:	687b      	ldr	r3, [r7, #4]
 809626a:	695b      	ldr	r3, [r3, #20]
 809626c:	4619      	mov	r1, r3
 809626e:	4610      	mov	r0, r2
 8096270:	f7ff fe0e 	bl	8095e90 <create_chain>
 8096274:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8096276:	697b      	ldr	r3, [r7, #20]
 8096278:	2b00      	cmp	r3, #0
 809627a:	d101      	bne.n	8096280 <dir_next+0xc8>
 809627c:	2307      	movs	r3, #7
 809627e:	e02a      	b.n	80962d6 <dir_next+0x11e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8096280:	697b      	ldr	r3, [r7, #20]
 8096282:	2b01      	cmp	r3, #1
 8096284:	d101      	bne.n	809628a <dir_next+0xd2>
 8096286:	2302      	movs	r3, #2
 8096288:	e025      	b.n	80962d6 <dir_next+0x11e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 809628a:	697b      	ldr	r3, [r7, #20]
 809628c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8096290:	d101      	bne.n	8096296 <dir_next+0xde>
 8096292:	2301      	movs	r3, #1
 8096294:	e01f      	b.n	80962d6 <dir_next+0x11e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8096296:	6979      	ldr	r1, [r7, #20]
 8096298:	6938      	ldr	r0, [r7, #16]
 809629a:	f7ff feca 	bl	8096032 <dir_clear>
 809629e:	4603      	mov	r3, r0
 80962a0:	2b00      	cmp	r3, #0
 80962a2:	d001      	beq.n	80962a8 <dir_next+0xf0>
 80962a4:	2301      	movs	r3, #1
 80962a6:	e016      	b.n	80962d6 <dir_next+0x11e>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80962a8:	687b      	ldr	r3, [r7, #4]
 80962aa:	697a      	ldr	r2, [r7, #20]
 80962ac:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80962ae:	6979      	ldr	r1, [r7, #20]
 80962b0:	6938      	ldr	r0, [r7, #16]
 80962b2:	f7ff fbdd 	bl	8095a70 <clst2sect>
 80962b6:	4602      	mov	r2, r0
 80962b8:	687b      	ldr	r3, [r7, #4]
 80962ba:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80962bc:	687b      	ldr	r3, [r7, #4]
 80962be:	68fa      	ldr	r2, [r7, #12]
 80962c0:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80962c2:	693b      	ldr	r3, [r7, #16]
 80962c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80962c8:	68fb      	ldr	r3, [r7, #12]
 80962ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80962ce:	441a      	add	r2, r3
 80962d0:	687b      	ldr	r3, [r7, #4]
 80962d2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80962d4:	2300      	movs	r3, #0
}
 80962d6:	4618      	mov	r0, r3
 80962d8:	3718      	adds	r7, #24
 80962da:	46bd      	mov	sp, r7
 80962dc:	bd80      	pop	{r7, pc}

080962de <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80962de:	b580      	push	{r7, lr}
 80962e0:	b086      	sub	sp, #24
 80962e2:	af00      	add	r7, sp, #0
 80962e4:	6078      	str	r0, [r7, #4]
 80962e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80962e8:	687b      	ldr	r3, [r7, #4]
 80962ea:	681b      	ldr	r3, [r3, #0]
 80962ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80962ee:	2100      	movs	r1, #0
 80962f0:	6878      	ldr	r0, [r7, #4]
 80962f2:	f7ff fee6 	bl	80960c2 <dir_sdi>
 80962f6:	4603      	mov	r3, r0
 80962f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80962fa:	7dfb      	ldrb	r3, [r7, #23]
 80962fc:	2b00      	cmp	r3, #0
 80962fe:	d12b      	bne.n	8096358 <dir_alloc+0x7a>
		n = 0;
 8096300:	2300      	movs	r3, #0
 8096302:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8096304:	687b      	ldr	r3, [r7, #4]
 8096306:	699b      	ldr	r3, [r3, #24]
 8096308:	4619      	mov	r1, r3
 809630a:	68f8      	ldr	r0, [r7, #12]
 809630c:	f7ff fb14 	bl	8095938 <move_window>
 8096310:	4603      	mov	r3, r0
 8096312:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8096314:	7dfb      	ldrb	r3, [r7, #23]
 8096316:	2b00      	cmp	r3, #0
 8096318:	d11d      	bne.n	8096356 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 809631a:	687b      	ldr	r3, [r7, #4]
 809631c:	69db      	ldr	r3, [r3, #28]
 809631e:	781b      	ldrb	r3, [r3, #0]
 8096320:	2be5      	cmp	r3, #229	; 0xe5
 8096322:	d004      	beq.n	809632e <dir_alloc+0x50>
 8096324:	687b      	ldr	r3, [r7, #4]
 8096326:	69db      	ldr	r3, [r3, #28]
 8096328:	781b      	ldrb	r3, [r3, #0]
 809632a:	2b00      	cmp	r3, #0
 809632c:	d107      	bne.n	809633e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 809632e:	693b      	ldr	r3, [r7, #16]
 8096330:	3301      	adds	r3, #1
 8096332:	613b      	str	r3, [r7, #16]
 8096334:	693a      	ldr	r2, [r7, #16]
 8096336:	683b      	ldr	r3, [r7, #0]
 8096338:	429a      	cmp	r2, r3
 809633a:	d102      	bne.n	8096342 <dir_alloc+0x64>
 809633c:	e00c      	b.n	8096358 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 809633e:	2300      	movs	r3, #0
 8096340:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8096342:	2101      	movs	r1, #1
 8096344:	6878      	ldr	r0, [r7, #4]
 8096346:	f7ff ff37 	bl	80961b8 <dir_next>
 809634a:	4603      	mov	r3, r0
 809634c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 809634e:	7dfb      	ldrb	r3, [r7, #23]
 8096350:	2b00      	cmp	r3, #0
 8096352:	d0d7      	beq.n	8096304 <dir_alloc+0x26>
 8096354:	e000      	b.n	8096358 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8096356:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8096358:	7dfb      	ldrb	r3, [r7, #23]
 809635a:	2b04      	cmp	r3, #4
 809635c:	d101      	bne.n	8096362 <dir_alloc+0x84>
 809635e:	2307      	movs	r3, #7
 8096360:	75fb      	strb	r3, [r7, #23]
	return res;
 8096362:	7dfb      	ldrb	r3, [r7, #23]
}
 8096364:	4618      	mov	r0, r3
 8096366:	3718      	adds	r7, #24
 8096368:	46bd      	mov	sp, r7
 809636a:	bd80      	pop	{r7, pc}

0809636c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 809636c:	b580      	push	{r7, lr}
 809636e:	b084      	sub	sp, #16
 8096370:	af00      	add	r7, sp, #0
 8096372:	6078      	str	r0, [r7, #4]
 8096374:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8096376:	683b      	ldr	r3, [r7, #0]
 8096378:	331a      	adds	r3, #26
 809637a:	4618      	mov	r0, r3
 809637c:	f7ff f93a 	bl	80955f4 <ld_word>
 8096380:	4603      	mov	r3, r0
 8096382:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8096384:	687b      	ldr	r3, [r7, #4]
 8096386:	781b      	ldrb	r3, [r3, #0]
 8096388:	2b03      	cmp	r3, #3
 809638a:	d109      	bne.n	80963a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 809638c:	683b      	ldr	r3, [r7, #0]
 809638e:	3314      	adds	r3, #20
 8096390:	4618      	mov	r0, r3
 8096392:	f7ff f92f 	bl	80955f4 <ld_word>
 8096396:	4603      	mov	r3, r0
 8096398:	041b      	lsls	r3, r3, #16
 809639a:	68fa      	ldr	r2, [r7, #12]
 809639c:	4313      	orrs	r3, r2
 809639e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80963a0:	68fb      	ldr	r3, [r7, #12]
}
 80963a2:	4618      	mov	r0, r3
 80963a4:	3710      	adds	r7, #16
 80963a6:	46bd      	mov	sp, r7
 80963a8:	bd80      	pop	{r7, pc}

080963aa <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80963aa:	b580      	push	{r7, lr}
 80963ac:	b084      	sub	sp, #16
 80963ae:	af00      	add	r7, sp, #0
 80963b0:	60f8      	str	r0, [r7, #12]
 80963b2:	60b9      	str	r1, [r7, #8]
 80963b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80963b6:	68bb      	ldr	r3, [r7, #8]
 80963b8:	331a      	adds	r3, #26
 80963ba:	687a      	ldr	r2, [r7, #4]
 80963bc:	b292      	uxth	r2, r2
 80963be:	4611      	mov	r1, r2
 80963c0:	4618      	mov	r0, r3
 80963c2:	f7ff f952 	bl	809566a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80963c6:	68fb      	ldr	r3, [r7, #12]
 80963c8:	781b      	ldrb	r3, [r3, #0]
 80963ca:	2b03      	cmp	r3, #3
 80963cc:	d109      	bne.n	80963e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80963ce:	68bb      	ldr	r3, [r7, #8]
 80963d0:	f103 0214 	add.w	r2, r3, #20
 80963d4:	687b      	ldr	r3, [r7, #4]
 80963d6:	0c1b      	lsrs	r3, r3, #16
 80963d8:	b29b      	uxth	r3, r3
 80963da:	4619      	mov	r1, r3
 80963dc:	4610      	mov	r0, r2
 80963de:	f7ff f944 	bl	809566a <st_word>
	}
}
 80963e2:	bf00      	nop
 80963e4:	3710      	adds	r7, #16
 80963e6:	46bd      	mov	sp, r7
 80963e8:	bd80      	pop	{r7, pc}
	...

080963ec <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80963ec:	b590      	push	{r4, r7, lr}
 80963ee:	b087      	sub	sp, #28
 80963f0:	af00      	add	r7, sp, #0
 80963f2:	6078      	str	r0, [r7, #4]
 80963f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80963f6:	683b      	ldr	r3, [r7, #0]
 80963f8:	331a      	adds	r3, #26
 80963fa:	4618      	mov	r0, r3
 80963fc:	f7ff f8fa 	bl	80955f4 <ld_word>
 8096400:	4603      	mov	r3, r0
 8096402:	2b00      	cmp	r3, #0
 8096404:	d001      	beq.n	809640a <cmp_lfn+0x1e>
 8096406:	2300      	movs	r3, #0
 8096408:	e058      	b.n	80964bc <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 809640a:	683b      	ldr	r3, [r7, #0]
 809640c:	781b      	ldrb	r3, [r3, #0]
 809640e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8096412:	1e5a      	subs	r2, r3, #1
 8096414:	4613      	mov	r3, r2
 8096416:	005b      	lsls	r3, r3, #1
 8096418:	4413      	add	r3, r2
 809641a:	009b      	lsls	r3, r3, #2
 809641c:	4413      	add	r3, r2
 809641e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8096420:	2301      	movs	r3, #1
 8096422:	81fb      	strh	r3, [r7, #14]
 8096424:	2300      	movs	r3, #0
 8096426:	613b      	str	r3, [r7, #16]
 8096428:	e032      	b.n	8096490 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 809642a:	4a26      	ldr	r2, [pc, #152]	; (80964c4 <cmp_lfn+0xd8>)
 809642c:	693b      	ldr	r3, [r7, #16]
 809642e:	4413      	add	r3, r2
 8096430:	781b      	ldrb	r3, [r3, #0]
 8096432:	461a      	mov	r2, r3
 8096434:	683b      	ldr	r3, [r7, #0]
 8096436:	4413      	add	r3, r2
 8096438:	4618      	mov	r0, r3
 809643a:	f7ff f8db 	bl	80955f4 <ld_word>
 809643e:	4603      	mov	r3, r0
 8096440:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8096442:	89fb      	ldrh	r3, [r7, #14]
 8096444:	2b00      	cmp	r3, #0
 8096446:	d019      	beq.n	809647c <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8096448:	697b      	ldr	r3, [r7, #20]
 809644a:	2b7f      	cmp	r3, #127	; 0x7f
 809644c:	d811      	bhi.n	8096472 <cmp_lfn+0x86>
 809644e:	89bb      	ldrh	r3, [r7, #12]
 8096450:	4618      	mov	r0, r3
 8096452:	f001 fe6b 	bl	809812c <ff_wtoupper>
 8096456:	4604      	mov	r4, r0
 8096458:	697b      	ldr	r3, [r7, #20]
 809645a:	1c5a      	adds	r2, r3, #1
 809645c:	617a      	str	r2, [r7, #20]
 809645e:	005b      	lsls	r3, r3, #1
 8096460:	687a      	ldr	r2, [r7, #4]
 8096462:	4413      	add	r3, r2
 8096464:	881b      	ldrh	r3, [r3, #0]
 8096466:	4618      	mov	r0, r3
 8096468:	f001 fe60 	bl	809812c <ff_wtoupper>
 809646c:	4603      	mov	r3, r0
 809646e:	429c      	cmp	r4, r3
 8096470:	d001      	beq.n	8096476 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 8096472:	2300      	movs	r3, #0
 8096474:	e022      	b.n	80964bc <cmp_lfn+0xd0>
			}
			wc = uc;
 8096476:	89bb      	ldrh	r3, [r7, #12]
 8096478:	81fb      	strh	r3, [r7, #14]
 809647a:	e006      	b.n	809648a <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 809647c:	89bb      	ldrh	r3, [r7, #12]
 809647e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8096482:	4293      	cmp	r3, r2
 8096484:	d001      	beq.n	809648a <cmp_lfn+0x9e>
 8096486:	2300      	movs	r3, #0
 8096488:	e018      	b.n	80964bc <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 809648a:	693b      	ldr	r3, [r7, #16]
 809648c:	3301      	adds	r3, #1
 809648e:	613b      	str	r3, [r7, #16]
 8096490:	693b      	ldr	r3, [r7, #16]
 8096492:	2b0c      	cmp	r3, #12
 8096494:	d9c9      	bls.n	809642a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8096496:	683b      	ldr	r3, [r7, #0]
 8096498:	781b      	ldrb	r3, [r3, #0]
 809649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 809649e:	2b00      	cmp	r3, #0
 80964a0:	d00b      	beq.n	80964ba <cmp_lfn+0xce>
 80964a2:	89fb      	ldrh	r3, [r7, #14]
 80964a4:	2b00      	cmp	r3, #0
 80964a6:	d008      	beq.n	80964ba <cmp_lfn+0xce>
 80964a8:	697b      	ldr	r3, [r7, #20]
 80964aa:	005b      	lsls	r3, r3, #1
 80964ac:	687a      	ldr	r2, [r7, #4]
 80964ae:	4413      	add	r3, r2
 80964b0:	881b      	ldrh	r3, [r3, #0]
 80964b2:	2b00      	cmp	r3, #0
 80964b4:	d001      	beq.n	80964ba <cmp_lfn+0xce>
 80964b6:	2300      	movs	r3, #0
 80964b8:	e000      	b.n	80964bc <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80964ba:	2301      	movs	r3, #1
}
 80964bc:	4618      	mov	r0, r3
 80964be:	371c      	adds	r7, #28
 80964c0:	46bd      	mov	sp, r7
 80964c2:	bd90      	pop	{r4, r7, pc}
 80964c4:	0809f260 	.word	0x0809f260

080964c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80964c8:	b580      	push	{r7, lr}
 80964ca:	b088      	sub	sp, #32
 80964cc:	af00      	add	r7, sp, #0
 80964ce:	60f8      	str	r0, [r7, #12]
 80964d0:	60b9      	str	r1, [r7, #8]
 80964d2:	4611      	mov	r1, r2
 80964d4:	461a      	mov	r2, r3
 80964d6:	460b      	mov	r3, r1
 80964d8:	71fb      	strb	r3, [r7, #7]
 80964da:	4613      	mov	r3, r2
 80964dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80964de:	68bb      	ldr	r3, [r7, #8]
 80964e0:	330d      	adds	r3, #13
 80964e2:	79ba      	ldrb	r2, [r7, #6]
 80964e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80964e6:	68bb      	ldr	r3, [r7, #8]
 80964e8:	330b      	adds	r3, #11
 80964ea:	220f      	movs	r2, #15
 80964ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80964ee:	68bb      	ldr	r3, [r7, #8]
 80964f0:	330c      	adds	r3, #12
 80964f2:	2200      	movs	r2, #0
 80964f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80964f6:	68bb      	ldr	r3, [r7, #8]
 80964f8:	331a      	adds	r3, #26
 80964fa:	2100      	movs	r1, #0
 80964fc:	4618      	mov	r0, r3
 80964fe:	f7ff f8b4 	bl	809566a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8096502:	79fb      	ldrb	r3, [r7, #7]
 8096504:	1e5a      	subs	r2, r3, #1
 8096506:	4613      	mov	r3, r2
 8096508:	005b      	lsls	r3, r3, #1
 809650a:	4413      	add	r3, r2
 809650c:	009b      	lsls	r3, r3, #2
 809650e:	4413      	add	r3, r2
 8096510:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8096512:	2300      	movs	r3, #0
 8096514:	82fb      	strh	r3, [r7, #22]
 8096516:	2300      	movs	r3, #0
 8096518:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 809651a:	8afb      	ldrh	r3, [r7, #22]
 809651c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8096520:	4293      	cmp	r3, r2
 8096522:	d007      	beq.n	8096534 <put_lfn+0x6c>
 8096524:	69fb      	ldr	r3, [r7, #28]
 8096526:	1c5a      	adds	r2, r3, #1
 8096528:	61fa      	str	r2, [r7, #28]
 809652a:	005b      	lsls	r3, r3, #1
 809652c:	68fa      	ldr	r2, [r7, #12]
 809652e:	4413      	add	r3, r2
 8096530:	881b      	ldrh	r3, [r3, #0]
 8096532:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8096534:	4a17      	ldr	r2, [pc, #92]	; (8096594 <put_lfn+0xcc>)
 8096536:	69bb      	ldr	r3, [r7, #24]
 8096538:	4413      	add	r3, r2
 809653a:	781b      	ldrb	r3, [r3, #0]
 809653c:	461a      	mov	r2, r3
 809653e:	68bb      	ldr	r3, [r7, #8]
 8096540:	4413      	add	r3, r2
 8096542:	8afa      	ldrh	r2, [r7, #22]
 8096544:	4611      	mov	r1, r2
 8096546:	4618      	mov	r0, r3
 8096548:	f7ff f88f 	bl	809566a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 809654c:	8afb      	ldrh	r3, [r7, #22]
 809654e:	2b00      	cmp	r3, #0
 8096550:	d102      	bne.n	8096558 <put_lfn+0x90>
 8096552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8096556:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8096558:	69bb      	ldr	r3, [r7, #24]
 809655a:	3301      	adds	r3, #1
 809655c:	61bb      	str	r3, [r7, #24]
 809655e:	69bb      	ldr	r3, [r7, #24]
 8096560:	2b0c      	cmp	r3, #12
 8096562:	d9da      	bls.n	809651a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8096564:	8afb      	ldrh	r3, [r7, #22]
 8096566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 809656a:	4293      	cmp	r3, r2
 809656c:	d006      	beq.n	809657c <put_lfn+0xb4>
 809656e:	69fb      	ldr	r3, [r7, #28]
 8096570:	005b      	lsls	r3, r3, #1
 8096572:	68fa      	ldr	r2, [r7, #12]
 8096574:	4413      	add	r3, r2
 8096576:	881b      	ldrh	r3, [r3, #0]
 8096578:	2b00      	cmp	r3, #0
 809657a:	d103      	bne.n	8096584 <put_lfn+0xbc>
 809657c:	79fb      	ldrb	r3, [r7, #7]
 809657e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8096582:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8096584:	68bb      	ldr	r3, [r7, #8]
 8096586:	79fa      	ldrb	r2, [r7, #7]
 8096588:	701a      	strb	r2, [r3, #0]
}
 809658a:	bf00      	nop
 809658c:	3720      	adds	r7, #32
 809658e:	46bd      	mov	sp, r7
 8096590:	bd80      	pop	{r7, pc}
 8096592:	bf00      	nop
 8096594:	0809f260 	.word	0x0809f260

08096598 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8096598:	b580      	push	{r7, lr}
 809659a:	b08c      	sub	sp, #48	; 0x30
 809659c:	af00      	add	r7, sp, #0
 809659e:	60f8      	str	r0, [r7, #12]
 80965a0:	60b9      	str	r1, [r7, #8]
 80965a2:	607a      	str	r2, [r7, #4]
 80965a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80965a6:	220b      	movs	r2, #11
 80965a8:	68b9      	ldr	r1, [r7, #8]
 80965aa:	68f8      	ldr	r0, [r7, #12]
 80965ac:	f7ff f8a4 	bl	80956f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80965b0:	683b      	ldr	r3, [r7, #0]
 80965b2:	2b05      	cmp	r3, #5
 80965b4:	d929      	bls.n	809660a <gen_numname+0x72>
		sr = seq;
 80965b6:	683b      	ldr	r3, [r7, #0]
 80965b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80965ba:	e020      	b.n	80965fe <gen_numname+0x66>
			wc = *lfn++;
 80965bc:	687b      	ldr	r3, [r7, #4]
 80965be:	1c9a      	adds	r2, r3, #2
 80965c0:	607a      	str	r2, [r7, #4]
 80965c2:	881b      	ldrh	r3, [r3, #0]
 80965c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80965c6:	2300      	movs	r3, #0
 80965c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80965ca:	e015      	b.n	80965f8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80965cc:	69fb      	ldr	r3, [r7, #28]
 80965ce:	005a      	lsls	r2, r3, #1
 80965d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80965d2:	f003 0301 	and.w	r3, r3, #1
 80965d6:	4413      	add	r3, r2
 80965d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80965da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80965dc:	085b      	lsrs	r3, r3, #1
 80965de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80965e0:	69fb      	ldr	r3, [r7, #28]
 80965e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80965e6:	2b00      	cmp	r3, #0
 80965e8:	d003      	beq.n	80965f2 <gen_numname+0x5a>
 80965ea:	69fa      	ldr	r2, [r7, #28]
 80965ec:	4b3b      	ldr	r3, [pc, #236]	; (80966dc <gen_numname+0x144>)
 80965ee:	4053      	eors	r3, r2
 80965f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80965f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80965f4:	3301      	adds	r3, #1
 80965f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80965f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80965fa:	2b0f      	cmp	r3, #15
 80965fc:	d9e6      	bls.n	80965cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 80965fe:	687b      	ldr	r3, [r7, #4]
 8096600:	881b      	ldrh	r3, [r3, #0]
 8096602:	2b00      	cmp	r3, #0
 8096604:	d1da      	bne.n	80965bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8096606:	69fb      	ldr	r3, [r7, #28]
 8096608:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 809660a:	2307      	movs	r3, #7
 809660c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 809660e:	683b      	ldr	r3, [r7, #0]
 8096610:	b2db      	uxtb	r3, r3
 8096612:	f003 030f 	and.w	r3, r3, #15
 8096616:	b2db      	uxtb	r3, r3
 8096618:	3330      	adds	r3, #48	; 0x30
 809661a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 809661e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096622:	2b39      	cmp	r3, #57	; 0x39
 8096624:	d904      	bls.n	8096630 <gen_numname+0x98>
 8096626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 809662a:	3307      	adds	r3, #7
 809662c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8096630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096632:	1e5a      	subs	r2, r3, #1
 8096634:	62ba      	str	r2, [r7, #40]	; 0x28
 8096636:	f107 0230 	add.w	r2, r7, #48	; 0x30
 809663a:	4413      	add	r3, r2
 809663c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8096640:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8096644:	683b      	ldr	r3, [r7, #0]
 8096646:	091b      	lsrs	r3, r3, #4
 8096648:	603b      	str	r3, [r7, #0]
	} while (seq);
 809664a:	683b      	ldr	r3, [r7, #0]
 809664c:	2b00      	cmp	r3, #0
 809664e:	d1de      	bne.n	809660e <gen_numname+0x76>
	ns[i] = '~';
 8096650:	f107 0214 	add.w	r2, r7, #20
 8096654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096656:	4413      	add	r3, r2
 8096658:	227e      	movs	r2, #126	; 0x7e
 809665a:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 809665c:	2300      	movs	r3, #0
 809665e:	627b      	str	r3, [r7, #36]	; 0x24
 8096660:	e014      	b.n	809668c <gen_numname+0xf4>
		if (dbc_1st(dst[j])) {
 8096662:	68fa      	ldr	r2, [r7, #12]
 8096664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8096666:	4413      	add	r3, r2
 8096668:	781b      	ldrb	r3, [r3, #0]
 809666a:	4618      	mov	r0, r3
 809666c:	f7ff f8c1 	bl	80957f2 <dbc_1st>
 8096670:	4603      	mov	r3, r0
 8096672:	2b00      	cmp	r3, #0
 8096674:	d007      	beq.n	8096686 <gen_numname+0xee>
			if (j == i - 1) break;
 8096676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096678:	3b01      	subs	r3, #1
 809667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 809667c:	429a      	cmp	r2, r3
 809667e:	d010      	beq.n	80966a2 <gen_numname+0x10a>
			j++;
 8096680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8096682:	3301      	adds	r3, #1
 8096684:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8096686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8096688:	3301      	adds	r3, #1
 809668a:	627b      	str	r3, [r7, #36]	; 0x24
 809668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 809668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096690:	429a      	cmp	r2, r3
 8096692:	d207      	bcs.n	80966a4 <gen_numname+0x10c>
 8096694:	68fa      	ldr	r2, [r7, #12]
 8096696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8096698:	4413      	add	r3, r2
 809669a:	781b      	ldrb	r3, [r3, #0]
 809669c:	2b20      	cmp	r3, #32
 809669e:	d1e0      	bne.n	8096662 <gen_numname+0xca>
 80966a0:	e000      	b.n	80966a4 <gen_numname+0x10c>
			if (j == i - 1) break;
 80966a2:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80966a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80966a6:	2b07      	cmp	r3, #7
 80966a8:	d808      	bhi.n	80966bc <gen_numname+0x124>
 80966aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80966ac:	1c5a      	adds	r2, r3, #1
 80966ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80966b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80966b4:	4413      	add	r3, r2
 80966b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80966ba:	e000      	b.n	80966be <gen_numname+0x126>
 80966bc:	2120      	movs	r1, #32
 80966be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80966c0:	1c5a      	adds	r2, r3, #1
 80966c2:	627a      	str	r2, [r7, #36]	; 0x24
 80966c4:	68fa      	ldr	r2, [r7, #12]
 80966c6:	4413      	add	r3, r2
 80966c8:	460a      	mov	r2, r1
 80966ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80966cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80966ce:	2b07      	cmp	r3, #7
 80966d0:	d9e8      	bls.n	80966a4 <gen_numname+0x10c>
}
 80966d2:	bf00      	nop
 80966d4:	3730      	adds	r7, #48	; 0x30
 80966d6:	46bd      	mov	sp, r7
 80966d8:	bd80      	pop	{r7, pc}
 80966da:	bf00      	nop
 80966dc:	00011021 	.word	0x00011021

080966e0 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80966e0:	b480      	push	{r7}
 80966e2:	b085      	sub	sp, #20
 80966e4:	af00      	add	r7, sp, #0
 80966e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80966e8:	2300      	movs	r3, #0
 80966ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80966ec:	230b      	movs	r3, #11
 80966ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80966f0:	7bfb      	ldrb	r3, [r7, #15]
 80966f2:	b2da      	uxtb	r2, r3
 80966f4:	0852      	lsrs	r2, r2, #1
 80966f6:	01db      	lsls	r3, r3, #7
 80966f8:	4313      	orrs	r3, r2
 80966fa:	b2da      	uxtb	r2, r3
 80966fc:	687b      	ldr	r3, [r7, #4]
 80966fe:	1c59      	adds	r1, r3, #1
 8096700:	6079      	str	r1, [r7, #4]
 8096702:	781b      	ldrb	r3, [r3, #0]
 8096704:	4413      	add	r3, r2
 8096706:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8096708:	68bb      	ldr	r3, [r7, #8]
 809670a:	3b01      	subs	r3, #1
 809670c:	60bb      	str	r3, [r7, #8]
 809670e:	68bb      	ldr	r3, [r7, #8]
 8096710:	2b00      	cmp	r3, #0
 8096712:	d1ed      	bne.n	80966f0 <sum_sfn+0x10>
	return sum;
 8096714:	7bfb      	ldrb	r3, [r7, #15]
}
 8096716:	4618      	mov	r0, r3
 8096718:	3714      	adds	r7, #20
 809671a:	46bd      	mov	sp, r7
 809671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8096720:	4770      	bx	lr

08096722 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8096722:	b580      	push	{r7, lr}
 8096724:	b086      	sub	sp, #24
 8096726:	af00      	add	r7, sp, #0
 8096728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 809672a:	687b      	ldr	r3, [r7, #4]
 809672c:	681b      	ldr	r3, [r3, #0]
 809672e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8096730:	2100      	movs	r1, #0
 8096732:	6878      	ldr	r0, [r7, #4]
 8096734:	f7ff fcc5 	bl	80960c2 <dir_sdi>
 8096738:	4603      	mov	r3, r0
 809673a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 809673c:	7dfb      	ldrb	r3, [r7, #23]
 809673e:	2b00      	cmp	r3, #0
 8096740:	d001      	beq.n	8096746 <dir_find+0x24>
 8096742:	7dfb      	ldrb	r3, [r7, #23]
 8096744:	e0a9      	b.n	809689a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8096746:	23ff      	movs	r3, #255	; 0xff
 8096748:	753b      	strb	r3, [r7, #20]
 809674a:	7d3b      	ldrb	r3, [r7, #20]
 809674c:	757b      	strb	r3, [r7, #21]
 809674e:	687b      	ldr	r3, [r7, #4]
 8096750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8096754:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8096756:	687b      	ldr	r3, [r7, #4]
 8096758:	699b      	ldr	r3, [r3, #24]
 809675a:	4619      	mov	r1, r3
 809675c:	6938      	ldr	r0, [r7, #16]
 809675e:	f7ff f8eb 	bl	8095938 <move_window>
 8096762:	4603      	mov	r3, r0
 8096764:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8096766:	7dfb      	ldrb	r3, [r7, #23]
 8096768:	2b00      	cmp	r3, #0
 809676a:	f040 8090 	bne.w	809688e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 809676e:	687b      	ldr	r3, [r7, #4]
 8096770:	69db      	ldr	r3, [r3, #28]
 8096772:	781b      	ldrb	r3, [r3, #0]
 8096774:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8096776:	7dbb      	ldrb	r3, [r7, #22]
 8096778:	2b00      	cmp	r3, #0
 809677a:	d102      	bne.n	8096782 <dir_find+0x60>
 809677c:	2304      	movs	r3, #4
 809677e:	75fb      	strb	r3, [r7, #23]
 8096780:	e08a      	b.n	8096898 <dir_find+0x176>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8096782:	687b      	ldr	r3, [r7, #4]
 8096784:	69db      	ldr	r3, [r3, #28]
 8096786:	330b      	adds	r3, #11
 8096788:	781b      	ldrb	r3, [r3, #0]
 809678a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 809678e:	73fb      	strb	r3, [r7, #15]
 8096790:	687b      	ldr	r3, [r7, #4]
 8096792:	7bfa      	ldrb	r2, [r7, #15]
 8096794:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8096796:	7dbb      	ldrb	r3, [r7, #22]
 8096798:	2be5      	cmp	r3, #229	; 0xe5
 809679a:	d007      	beq.n	80967ac <dir_find+0x8a>
 809679c:	7bfb      	ldrb	r3, [r7, #15]
 809679e:	f003 0308 	and.w	r3, r3, #8
 80967a2:	2b00      	cmp	r3, #0
 80967a4:	d009      	beq.n	80967ba <dir_find+0x98>
 80967a6:	7bfb      	ldrb	r3, [r7, #15]
 80967a8:	2b0f      	cmp	r3, #15
 80967aa:	d006      	beq.n	80967ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80967ac:	23ff      	movs	r3, #255	; 0xff
 80967ae:	757b      	strb	r3, [r7, #21]
 80967b0:	687b      	ldr	r3, [r7, #4]
 80967b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80967b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80967b8:	e05e      	b.n	8096878 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80967ba:	7bfb      	ldrb	r3, [r7, #15]
 80967bc:	2b0f      	cmp	r3, #15
 80967be:	d136      	bne.n	809682e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80967c0:	687b      	ldr	r3, [r7, #4]
 80967c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80967c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80967ca:	2b00      	cmp	r3, #0
 80967cc:	d154      	bne.n	8096878 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80967ce:	7dbb      	ldrb	r3, [r7, #22]
 80967d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80967d4:	2b00      	cmp	r3, #0
 80967d6:	d00d      	beq.n	80967f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80967d8:	687b      	ldr	r3, [r7, #4]
 80967da:	69db      	ldr	r3, [r3, #28]
 80967dc:	7b5b      	ldrb	r3, [r3, #13]
 80967de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80967e0:	7dbb      	ldrb	r3, [r7, #22]
 80967e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80967e6:	75bb      	strb	r3, [r7, #22]
 80967e8:	7dbb      	ldrb	r3, [r7, #22]
 80967ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80967ec:	687b      	ldr	r3, [r7, #4]
 80967ee:	691a      	ldr	r2, [r3, #16]
 80967f0:	687b      	ldr	r3, [r7, #4]
 80967f2:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80967f4:	7dba      	ldrb	r2, [r7, #22]
 80967f6:	7d7b      	ldrb	r3, [r7, #21]
 80967f8:	429a      	cmp	r2, r3
 80967fa:	d115      	bne.n	8096828 <dir_find+0x106>
 80967fc:	687b      	ldr	r3, [r7, #4]
 80967fe:	69db      	ldr	r3, [r3, #28]
 8096800:	330d      	adds	r3, #13
 8096802:	781b      	ldrb	r3, [r3, #0]
 8096804:	7d3a      	ldrb	r2, [r7, #20]
 8096806:	429a      	cmp	r2, r3
 8096808:	d10e      	bne.n	8096828 <dir_find+0x106>
 809680a:	693b      	ldr	r3, [r7, #16]
 809680c:	68da      	ldr	r2, [r3, #12]
 809680e:	687b      	ldr	r3, [r7, #4]
 8096810:	69db      	ldr	r3, [r3, #28]
 8096812:	4619      	mov	r1, r3
 8096814:	4610      	mov	r0, r2
 8096816:	f7ff fde9 	bl	80963ec <cmp_lfn>
 809681a:	4603      	mov	r3, r0
 809681c:	2b00      	cmp	r3, #0
 809681e:	d003      	beq.n	8096828 <dir_find+0x106>
 8096820:	7d7b      	ldrb	r3, [r7, #21]
 8096822:	3b01      	subs	r3, #1
 8096824:	b2db      	uxtb	r3, r3
 8096826:	e000      	b.n	809682a <dir_find+0x108>
 8096828:	23ff      	movs	r3, #255	; 0xff
 809682a:	757b      	strb	r3, [r7, #21]
 809682c:	e024      	b.n	8096878 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 809682e:	7d7b      	ldrb	r3, [r7, #21]
 8096830:	2b00      	cmp	r3, #0
 8096832:	d109      	bne.n	8096848 <dir_find+0x126>
 8096834:	687b      	ldr	r3, [r7, #4]
 8096836:	69db      	ldr	r3, [r3, #28]
 8096838:	4618      	mov	r0, r3
 809683a:	f7ff ff51 	bl	80966e0 <sum_sfn>
 809683e:	4603      	mov	r3, r0
 8096840:	461a      	mov	r2, r3
 8096842:	7d3b      	ldrb	r3, [r7, #20]
 8096844:	4293      	cmp	r3, r2
 8096846:	d024      	beq.n	8096892 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8096848:	687b      	ldr	r3, [r7, #4]
 809684a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 809684e:	f003 0301 	and.w	r3, r3, #1
 8096852:	2b00      	cmp	r3, #0
 8096854:	d10a      	bne.n	809686c <dir_find+0x14a>
 8096856:	687b      	ldr	r3, [r7, #4]
 8096858:	69d8      	ldr	r0, [r3, #28]
 809685a:	687b      	ldr	r3, [r7, #4]
 809685c:	3320      	adds	r3, #32
 809685e:	220b      	movs	r2, #11
 8096860:	4619      	mov	r1, r3
 8096862:	f7fe ff84 	bl	809576e <mem_cmp>
 8096866:	4603      	mov	r3, r0
 8096868:	2b00      	cmp	r3, #0
 809686a:	d014      	beq.n	8096896 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 809686c:	23ff      	movs	r3, #255	; 0xff
 809686e:	757b      	strb	r3, [r7, #21]
 8096870:	687b      	ldr	r3, [r7, #4]
 8096872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8096876:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8096878:	2100      	movs	r1, #0
 809687a:	6878      	ldr	r0, [r7, #4]
 809687c:	f7ff fc9c 	bl	80961b8 <dir_next>
 8096880:	4603      	mov	r3, r0
 8096882:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8096884:	7dfb      	ldrb	r3, [r7, #23]
 8096886:	2b00      	cmp	r3, #0
 8096888:	f43f af65 	beq.w	8096756 <dir_find+0x34>
 809688c:	e004      	b.n	8096898 <dir_find+0x176>
		if (res != FR_OK) break;
 809688e:	bf00      	nop
 8096890:	e002      	b.n	8096898 <dir_find+0x176>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8096892:	bf00      	nop
 8096894:	e000      	b.n	8096898 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8096896:	bf00      	nop

	return res;
 8096898:	7dfb      	ldrb	r3, [r7, #23]
}
 809689a:	4618      	mov	r0, r3
 809689c:	3718      	adds	r7, #24
 809689e:	46bd      	mov	sp, r7
 80968a0:	bd80      	pop	{r7, pc}
	...

080968a4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80968a4:	b580      	push	{r7, lr}
 80968a6:	b08c      	sub	sp, #48	; 0x30
 80968a8:	af00      	add	r7, sp, #0
 80968aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80968ac:	687b      	ldr	r3, [r7, #4]
 80968ae:	681b      	ldr	r3, [r3, #0]
 80968b0:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80968b2:	687b      	ldr	r3, [r7, #4]
 80968b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80968b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80968bc:	2b00      	cmp	r3, #0
 80968be:	d001      	beq.n	80968c4 <dir_register+0x20>
 80968c0:	2306      	movs	r3, #6
 80968c2:	e0e0      	b.n	8096a86 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80968c4:	2300      	movs	r3, #0
 80968c6:	627b      	str	r3, [r7, #36]	; 0x24
 80968c8:	e002      	b.n	80968d0 <dir_register+0x2c>
 80968ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80968cc:	3301      	adds	r3, #1
 80968ce:	627b      	str	r3, [r7, #36]	; 0x24
 80968d0:	69fb      	ldr	r3, [r7, #28]
 80968d2:	68da      	ldr	r2, [r3, #12]
 80968d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80968d6:	005b      	lsls	r3, r3, #1
 80968d8:	4413      	add	r3, r2
 80968da:	881b      	ldrh	r3, [r3, #0]
 80968dc:	2b00      	cmp	r3, #0
 80968de:	d1f4      	bne.n	80968ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 80968e0:	687b      	ldr	r3, [r7, #4]
 80968e2:	f103 0120 	add.w	r1, r3, #32
 80968e6:	f107 030c 	add.w	r3, r7, #12
 80968ea:	220c      	movs	r2, #12
 80968ec:	4618      	mov	r0, r3
 80968ee:	f7fe ff03 	bl	80956f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80968f2:	7dfb      	ldrb	r3, [r7, #23]
 80968f4:	f003 0301 	and.w	r3, r3, #1
 80968f8:	2b00      	cmp	r3, #0
 80968fa:	d032      	beq.n	8096962 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80968fc:	687b      	ldr	r3, [r7, #4]
 80968fe:	2240      	movs	r2, #64	; 0x40
 8096900:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8096904:	2301      	movs	r3, #1
 8096906:	62bb      	str	r3, [r7, #40]	; 0x28
 8096908:	e016      	b.n	8096938 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 809690a:	687b      	ldr	r3, [r7, #4]
 809690c:	f103 0020 	add.w	r0, r3, #32
 8096910:	69fb      	ldr	r3, [r7, #28]
 8096912:	68da      	ldr	r2, [r3, #12]
 8096914:	f107 010c 	add.w	r1, r7, #12
 8096918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 809691a:	f7ff fe3d 	bl	8096598 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 809691e:	6878      	ldr	r0, [r7, #4]
 8096920:	f7ff feff 	bl	8096722 <dir_find>
 8096924:	4603      	mov	r3, r0
 8096926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 809692a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 809692e:	2b00      	cmp	r3, #0
 8096930:	d106      	bne.n	8096940 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8096932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096934:	3301      	adds	r3, #1
 8096936:	62bb      	str	r3, [r7, #40]	; 0x28
 8096938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 809693a:	2b63      	cmp	r3, #99	; 0x63
 809693c:	d9e5      	bls.n	809690a <dir_register+0x66>
 809693e:	e000      	b.n	8096942 <dir_register+0x9e>
			if (res != FR_OK) break;
 8096940:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8096942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8096944:	2b64      	cmp	r3, #100	; 0x64
 8096946:	d101      	bne.n	809694c <dir_register+0xa8>
 8096948:	2307      	movs	r3, #7
 809694a:	e09c      	b.n	8096a86 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 809694c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096950:	2b04      	cmp	r3, #4
 8096952:	d002      	beq.n	809695a <dir_register+0xb6>
 8096954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096958:	e095      	b.n	8096a86 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 809695a:	7dfa      	ldrb	r2, [r7, #23]
 809695c:	687b      	ldr	r3, [r7, #4]
 809695e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8096962:	7dfb      	ldrb	r3, [r7, #23]
 8096964:	f003 0302 	and.w	r3, r3, #2
 8096968:	2b00      	cmp	r3, #0
 809696a:	d007      	beq.n	809697c <dir_register+0xd8>
 809696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 809696e:	330c      	adds	r3, #12
 8096970:	4a47      	ldr	r2, [pc, #284]	; (8096a90 <dir_register+0x1ec>)
 8096972:	fba2 2303 	umull	r2, r3, r2, r3
 8096976:	089b      	lsrs	r3, r3, #2
 8096978:	3301      	adds	r3, #1
 809697a:	e000      	b.n	809697e <dir_register+0xda>
 809697c:	2301      	movs	r3, #1
 809697e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8096980:	6a39      	ldr	r1, [r7, #32]
 8096982:	6878      	ldr	r0, [r7, #4]
 8096984:	f7ff fcab 	bl	80962de <dir_alloc>
 8096988:	4603      	mov	r3, r0
 809698a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 809698e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096992:	2b00      	cmp	r3, #0
 8096994:	d148      	bne.n	8096a28 <dir_register+0x184>
 8096996:	6a3b      	ldr	r3, [r7, #32]
 8096998:	3b01      	subs	r3, #1
 809699a:	623b      	str	r3, [r7, #32]
 809699c:	6a3b      	ldr	r3, [r7, #32]
 809699e:	2b00      	cmp	r3, #0
 80969a0:	d042      	beq.n	8096a28 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80969a2:	687b      	ldr	r3, [r7, #4]
 80969a4:	691a      	ldr	r2, [r3, #16]
 80969a6:	6a3b      	ldr	r3, [r7, #32]
 80969a8:	015b      	lsls	r3, r3, #5
 80969aa:	1ad3      	subs	r3, r2, r3
 80969ac:	4619      	mov	r1, r3
 80969ae:	6878      	ldr	r0, [r7, #4]
 80969b0:	f7ff fb87 	bl	80960c2 <dir_sdi>
 80969b4:	4603      	mov	r3, r0
 80969b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80969ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80969be:	2b00      	cmp	r3, #0
 80969c0:	d132      	bne.n	8096a28 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80969c2:	687b      	ldr	r3, [r7, #4]
 80969c4:	3320      	adds	r3, #32
 80969c6:	4618      	mov	r0, r3
 80969c8:	f7ff fe8a 	bl	80966e0 <sum_sfn>
 80969cc:	4603      	mov	r3, r0
 80969ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80969d0:	687b      	ldr	r3, [r7, #4]
 80969d2:	699b      	ldr	r3, [r3, #24]
 80969d4:	4619      	mov	r1, r3
 80969d6:	69f8      	ldr	r0, [r7, #28]
 80969d8:	f7fe ffae 	bl	8095938 <move_window>
 80969dc:	4603      	mov	r3, r0
 80969de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80969e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80969e6:	2b00      	cmp	r3, #0
 80969e8:	d11d      	bne.n	8096a26 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80969ea:	69fb      	ldr	r3, [r7, #28]
 80969ec:	68d8      	ldr	r0, [r3, #12]
 80969ee:	687b      	ldr	r3, [r7, #4]
 80969f0:	69d9      	ldr	r1, [r3, #28]
 80969f2:	6a3b      	ldr	r3, [r7, #32]
 80969f4:	b2da      	uxtb	r2, r3
 80969f6:	7efb      	ldrb	r3, [r7, #27]
 80969f8:	f7ff fd66 	bl	80964c8 <put_lfn>
				fs->wflag = 1;
 80969fc:	69fb      	ldr	r3, [r7, #28]
 80969fe:	2201      	movs	r2, #1
 8096a00:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8096a02:	2100      	movs	r1, #0
 8096a04:	6878      	ldr	r0, [r7, #4]
 8096a06:	f7ff fbd7 	bl	80961b8 <dir_next>
 8096a0a:	4603      	mov	r3, r0
 8096a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8096a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096a14:	2b00      	cmp	r3, #0
 8096a16:	d107      	bne.n	8096a28 <dir_register+0x184>
 8096a18:	6a3b      	ldr	r3, [r7, #32]
 8096a1a:	3b01      	subs	r3, #1
 8096a1c:	623b      	str	r3, [r7, #32]
 8096a1e:	6a3b      	ldr	r3, [r7, #32]
 8096a20:	2b00      	cmp	r3, #0
 8096a22:	d1d5      	bne.n	80969d0 <dir_register+0x12c>
 8096a24:	e000      	b.n	8096a28 <dir_register+0x184>
				if (res != FR_OK) break;
 8096a26:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8096a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096a2c:	2b00      	cmp	r3, #0
 8096a2e:	d128      	bne.n	8096a82 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8096a30:	687b      	ldr	r3, [r7, #4]
 8096a32:	699b      	ldr	r3, [r3, #24]
 8096a34:	4619      	mov	r1, r3
 8096a36:	69f8      	ldr	r0, [r7, #28]
 8096a38:	f7fe ff7e 	bl	8095938 <move_window>
 8096a3c:	4603      	mov	r3, r0
 8096a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8096a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8096a46:	2b00      	cmp	r3, #0
 8096a48:	d11b      	bne.n	8096a82 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8096a4a:	687b      	ldr	r3, [r7, #4]
 8096a4c:	69db      	ldr	r3, [r3, #28]
 8096a4e:	2220      	movs	r2, #32
 8096a50:	2100      	movs	r1, #0
 8096a52:	4618      	mov	r0, r3
 8096a54:	f7fe fe71 	bl	809573a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8096a58:	687b      	ldr	r3, [r7, #4]
 8096a5a:	69d8      	ldr	r0, [r3, #28]
 8096a5c:	687b      	ldr	r3, [r7, #4]
 8096a5e:	3320      	adds	r3, #32
 8096a60:	220b      	movs	r2, #11
 8096a62:	4619      	mov	r1, r3
 8096a64:	f7fe fe48 	bl	80956f8 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8096a68:	687b      	ldr	r3, [r7, #4]
 8096a6a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8096a6e:	687b      	ldr	r3, [r7, #4]
 8096a70:	69db      	ldr	r3, [r3, #28]
 8096a72:	330c      	adds	r3, #12
 8096a74:	f002 0218 	and.w	r2, r2, #24
 8096a78:	b2d2      	uxtb	r2, r2
 8096a7a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8096a7c:	69fb      	ldr	r3, [r7, #28]
 8096a7e:	2201      	movs	r2, #1
 8096a80:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8096a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8096a86:	4618      	mov	r0, r3
 8096a88:	3730      	adds	r7, #48	; 0x30
 8096a8a:	46bd      	mov	sp, r7
 8096a8c:	bd80      	pop	{r7, pc}
 8096a8e:	bf00      	nop
 8096a90:	4ec4ec4f 	.word	0x4ec4ec4f

08096a94 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8096a94:	b580      	push	{r7, lr}
 8096a96:	b08a      	sub	sp, #40	; 0x28
 8096a98:	af00      	add	r7, sp, #0
 8096a9a:	6078      	str	r0, [r7, #4]
 8096a9c:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8096a9e:	683b      	ldr	r3, [r7, #0]
 8096aa0:	681b      	ldr	r3, [r3, #0]
 8096aa2:	60bb      	str	r3, [r7, #8]
 8096aa4:	687b      	ldr	r3, [r7, #4]
 8096aa6:	681b      	ldr	r3, [r3, #0]
 8096aa8:	68db      	ldr	r3, [r3, #12]
 8096aaa:	613b      	str	r3, [r7, #16]
 8096aac:	2300      	movs	r3, #0
 8096aae:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8096ab0:	f107 0308 	add.w	r3, r7, #8
 8096ab4:	4618      	mov	r0, r3
 8096ab6:	f7fe febe 	bl	8095836 <tchar2uni>
 8096aba:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8096abc:	68fb      	ldr	r3, [r7, #12]
 8096abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8096ac2:	d101      	bne.n	8096ac8 <create_name+0x34>
 8096ac4:	2306      	movs	r3, #6
 8096ac6:	e202      	b.n	8096ece <create_name+0x43a>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8096ac8:	68fb      	ldr	r3, [r7, #12]
 8096aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8096ace:	d309      	bcc.n	8096ae4 <create_name+0x50>
 8096ad0:	68fb      	ldr	r3, [r7, #12]
 8096ad2:	0c19      	lsrs	r1, r3, #16
 8096ad4:	697b      	ldr	r3, [r7, #20]
 8096ad6:	1c5a      	adds	r2, r3, #1
 8096ad8:	617a      	str	r2, [r7, #20]
 8096ada:	005b      	lsls	r3, r3, #1
 8096adc:	693a      	ldr	r2, [r7, #16]
 8096ade:	4413      	add	r3, r2
 8096ae0:	b28a      	uxth	r2, r1
 8096ae2:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8096ae4:	68fb      	ldr	r3, [r7, #12]
 8096ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8096ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096aea:	2b1f      	cmp	r3, #31
 8096aec:	d923      	bls.n	8096b36 <create_name+0xa2>
 8096aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096af0:	2b2f      	cmp	r3, #47	; 0x2f
 8096af2:	d020      	beq.n	8096b36 <create_name+0xa2>
 8096af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096af6:	2b5c      	cmp	r3, #92	; 0x5c
 8096af8:	d01d      	beq.n	8096b36 <create_name+0xa2>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8096afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096afc:	2b7f      	cmp	r3, #127	; 0x7f
 8096afe:	d809      	bhi.n	8096b14 <create_name+0x80>
 8096b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096b02:	4619      	mov	r1, r3
 8096b04:	48a6      	ldr	r0, [pc, #664]	; (8096da0 <create_name+0x30c>)
 8096b06:	f7fe fe59 	bl	80957bc <chk_chr>
 8096b0a:	4603      	mov	r3, r0
 8096b0c:	2b00      	cmp	r3, #0
 8096b0e:	d001      	beq.n	8096b14 <create_name+0x80>
 8096b10:	2306      	movs	r3, #6
 8096b12:	e1dc      	b.n	8096ece <create_name+0x43a>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8096b14:	697b      	ldr	r3, [r7, #20]
 8096b16:	2b7f      	cmp	r3, #127	; 0x7f
 8096b18:	d901      	bls.n	8096b1e <create_name+0x8a>
 8096b1a:	2306      	movs	r3, #6
 8096b1c:	e1d7      	b.n	8096ece <create_name+0x43a>
		lfn[di++] = wc;					/* Store the Unicode character */
 8096b1e:	697b      	ldr	r3, [r7, #20]
 8096b20:	1c5a      	adds	r2, r3, #1
 8096b22:	617a      	str	r2, [r7, #20]
 8096b24:	005b      	lsls	r3, r3, #1
 8096b26:	693a      	ldr	r2, [r7, #16]
 8096b28:	4413      	add	r3, r2
 8096b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8096b2c:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8096b2e:	e7bf      	b.n	8096ab0 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8096b30:	68bb      	ldr	r3, [r7, #8]
 8096b32:	3301      	adds	r3, #1
 8096b34:	60bb      	str	r3, [r7, #8]
 8096b36:	68bb      	ldr	r3, [r7, #8]
 8096b38:	781b      	ldrb	r3, [r3, #0]
 8096b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8096b3c:	d0f8      	beq.n	8096b30 <create_name+0x9c>
 8096b3e:	68bb      	ldr	r3, [r7, #8]
 8096b40:	781b      	ldrb	r3, [r3, #0]
 8096b42:	2b5c      	cmp	r3, #92	; 0x5c
 8096b44:	d0f4      	beq.n	8096b30 <create_name+0x9c>
	*path = p;							/* Return pointer to the next segment */
 8096b46:	68ba      	ldr	r2, [r7, #8]
 8096b48:	683b      	ldr	r3, [r7, #0]
 8096b4a:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8096b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096b4e:	2b1f      	cmp	r3, #31
 8096b50:	d801      	bhi.n	8096b56 <create_name+0xc2>
 8096b52:	2304      	movs	r3, #4
 8096b54:	e000      	b.n	8096b58 <create_name+0xc4>
 8096b56:	2300      	movs	r3, #0
 8096b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8096b5c:	697b      	ldr	r3, [r7, #20]
 8096b5e:	2b01      	cmp	r3, #1
 8096b60:	d109      	bne.n	8096b76 <create_name+0xe2>
 8096b62:	697a      	ldr	r2, [r7, #20]
 8096b64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8096b68:	4413      	add	r3, r2
 8096b6a:	005b      	lsls	r3, r3, #1
 8096b6c:	693a      	ldr	r2, [r7, #16]
 8096b6e:	4413      	add	r3, r2
 8096b70:	881b      	ldrh	r3, [r3, #0]
 8096b72:	2b2e      	cmp	r3, #46	; 0x2e
 8096b74:	d015      	beq.n	8096ba2 <create_name+0x10e>
 8096b76:	697b      	ldr	r3, [r7, #20]
 8096b78:	2b02      	cmp	r3, #2
 8096b7a:	d14d      	bne.n	8096c18 <create_name+0x184>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8096b7c:	697a      	ldr	r2, [r7, #20]
 8096b7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8096b82:	4413      	add	r3, r2
 8096b84:	005b      	lsls	r3, r3, #1
 8096b86:	693a      	ldr	r2, [r7, #16]
 8096b88:	4413      	add	r3, r2
 8096b8a:	881b      	ldrh	r3, [r3, #0]
 8096b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8096b8e:	d143      	bne.n	8096c18 <create_name+0x184>
 8096b90:	697a      	ldr	r2, [r7, #20]
 8096b92:	4b84      	ldr	r3, [pc, #528]	; (8096da4 <create_name+0x310>)
 8096b94:	4413      	add	r3, r2
 8096b96:	005b      	lsls	r3, r3, #1
 8096b98:	693a      	ldr	r2, [r7, #16]
 8096b9a:	4413      	add	r3, r2
 8096b9c:	881b      	ldrh	r3, [r3, #0]
 8096b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8096ba0:	d13a      	bne.n	8096c18 <create_name+0x184>
		lfn[di] = 0;
 8096ba2:	697b      	ldr	r3, [r7, #20]
 8096ba4:	005b      	lsls	r3, r3, #1
 8096ba6:	693a      	ldr	r2, [r7, #16]
 8096ba8:	4413      	add	r3, r2
 8096baa:	2200      	movs	r2, #0
 8096bac:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8096bae:	2300      	movs	r3, #0
 8096bb0:	623b      	str	r3, [r7, #32]
 8096bb2:	e00f      	b.n	8096bd4 <create_name+0x140>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8096bb4:	6a3a      	ldr	r2, [r7, #32]
 8096bb6:	697b      	ldr	r3, [r7, #20]
 8096bb8:	429a      	cmp	r2, r3
 8096bba:	d201      	bcs.n	8096bc0 <create_name+0x12c>
 8096bbc:	212e      	movs	r1, #46	; 0x2e
 8096bbe:	e000      	b.n	8096bc2 <create_name+0x12e>
 8096bc0:	2120      	movs	r1, #32
 8096bc2:	687a      	ldr	r2, [r7, #4]
 8096bc4:	6a3b      	ldr	r3, [r7, #32]
 8096bc6:	4413      	add	r3, r2
 8096bc8:	3320      	adds	r3, #32
 8096bca:	460a      	mov	r2, r1
 8096bcc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8096bce:	6a3b      	ldr	r3, [r7, #32]
 8096bd0:	3301      	adds	r3, #1
 8096bd2:	623b      	str	r3, [r7, #32]
 8096bd4:	6a3b      	ldr	r3, [r7, #32]
 8096bd6:	2b0a      	cmp	r3, #10
 8096bd8:	d9ec      	bls.n	8096bb4 <create_name+0x120>
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8096bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096bde:	f043 0320 	orr.w	r3, r3, #32
 8096be2:	b2d9      	uxtb	r1, r3
 8096be4:	687a      	ldr	r2, [r7, #4]
 8096be6:	6a3b      	ldr	r3, [r7, #32]
 8096be8:	4413      	add	r3, r2
 8096bea:	3320      	adds	r3, #32
 8096bec:	460a      	mov	r2, r1
 8096bee:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8096bf0:	2300      	movs	r3, #0
 8096bf2:	e16c      	b.n	8096ece <create_name+0x43a>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8096bf4:	697a      	ldr	r2, [r7, #20]
 8096bf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8096bfa:	4413      	add	r3, r2
 8096bfc:	005b      	lsls	r3, r3, #1
 8096bfe:	693a      	ldr	r2, [r7, #16]
 8096c00:	4413      	add	r3, r2
 8096c02:	881b      	ldrh	r3, [r3, #0]
 8096c04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8096c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096c08:	2b20      	cmp	r3, #32
 8096c0a:	d002      	beq.n	8096c12 <create_name+0x17e>
 8096c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8096c10:	d106      	bne.n	8096c20 <create_name+0x18c>
		di--;
 8096c12:	697b      	ldr	r3, [r7, #20]
 8096c14:	3b01      	subs	r3, #1
 8096c16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8096c18:	697b      	ldr	r3, [r7, #20]
 8096c1a:	2b00      	cmp	r3, #0
 8096c1c:	d1ea      	bne.n	8096bf4 <create_name+0x160>
 8096c1e:	e000      	b.n	8096c22 <create_name+0x18e>
		if (wc != ' ' && wc != '.') break;
 8096c20:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8096c22:	697b      	ldr	r3, [r7, #20]
 8096c24:	005b      	lsls	r3, r3, #1
 8096c26:	693a      	ldr	r2, [r7, #16]
 8096c28:	4413      	add	r3, r2
 8096c2a:	2200      	movs	r2, #0
 8096c2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8096c2e:	697b      	ldr	r3, [r7, #20]
 8096c30:	2b00      	cmp	r3, #0
 8096c32:	d101      	bne.n	8096c38 <create_name+0x1a4>
 8096c34:	2306      	movs	r3, #6
 8096c36:	e14a      	b.n	8096ece <create_name+0x43a>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8096c38:	2300      	movs	r3, #0
 8096c3a:	61bb      	str	r3, [r7, #24]
 8096c3c:	e002      	b.n	8096c44 <create_name+0x1b0>
 8096c3e:	69bb      	ldr	r3, [r7, #24]
 8096c40:	3301      	adds	r3, #1
 8096c42:	61bb      	str	r3, [r7, #24]
 8096c44:	69bb      	ldr	r3, [r7, #24]
 8096c46:	005b      	lsls	r3, r3, #1
 8096c48:	693a      	ldr	r2, [r7, #16]
 8096c4a:	4413      	add	r3, r2
 8096c4c:	881b      	ldrh	r3, [r3, #0]
 8096c4e:	2b20      	cmp	r3, #32
 8096c50:	d0f5      	beq.n	8096c3e <create_name+0x1aa>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8096c52:	69bb      	ldr	r3, [r7, #24]
 8096c54:	2b00      	cmp	r3, #0
 8096c56:	d106      	bne.n	8096c66 <create_name+0x1d2>
 8096c58:	69bb      	ldr	r3, [r7, #24]
 8096c5a:	005b      	lsls	r3, r3, #1
 8096c5c:	693a      	ldr	r2, [r7, #16]
 8096c5e:	4413      	add	r3, r2
 8096c60:	881b      	ldrh	r3, [r3, #0]
 8096c62:	2b2e      	cmp	r3, #46	; 0x2e
 8096c64:	d109      	bne.n	8096c7a <create_name+0x1e6>
 8096c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096c6a:	f043 0303 	orr.w	r3, r3, #3
 8096c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8096c72:	e002      	b.n	8096c7a <create_name+0x1e6>
 8096c74:	697b      	ldr	r3, [r7, #20]
 8096c76:	3b01      	subs	r3, #1
 8096c78:	617b      	str	r3, [r7, #20]
 8096c7a:	697b      	ldr	r3, [r7, #20]
 8096c7c:	2b00      	cmp	r3, #0
 8096c7e:	d009      	beq.n	8096c94 <create_name+0x200>
 8096c80:	697a      	ldr	r2, [r7, #20]
 8096c82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8096c86:	4413      	add	r3, r2
 8096c88:	005b      	lsls	r3, r3, #1
 8096c8a:	693a      	ldr	r2, [r7, #16]
 8096c8c:	4413      	add	r3, r2
 8096c8e:	881b      	ldrh	r3, [r3, #0]
 8096c90:	2b2e      	cmp	r3, #46	; 0x2e
 8096c92:	d1ef      	bne.n	8096c74 <create_name+0x1e0>

	mem_set(dp->fn, ' ', 11);
 8096c94:	687b      	ldr	r3, [r7, #4]
 8096c96:	3320      	adds	r3, #32
 8096c98:	220b      	movs	r2, #11
 8096c9a:	2120      	movs	r1, #32
 8096c9c:	4618      	mov	r0, r3
 8096c9e:	f7fe fd4c 	bl	809573a <mem_set>
	i = b = 0; ni = 8;
 8096ca2:	2300      	movs	r3, #0
 8096ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8096ca8:	2300      	movs	r3, #0
 8096caa:	623b      	str	r3, [r7, #32]
 8096cac:	2308      	movs	r3, #8
 8096cae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8096cb0:	69bb      	ldr	r3, [r7, #24]
 8096cb2:	1c5a      	adds	r2, r3, #1
 8096cb4:	61ba      	str	r2, [r7, #24]
 8096cb6:	005b      	lsls	r3, r3, #1
 8096cb8:	693a      	ldr	r2, [r7, #16]
 8096cba:	4413      	add	r3, r2
 8096cbc:	881b      	ldrh	r3, [r3, #0]
 8096cbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8096cc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096cc2:	2b00      	cmp	r3, #0
 8096cc4:	f000 80b9 	beq.w	8096e3a <create_name+0x3a6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8096cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096cca:	2b20      	cmp	r3, #32
 8096ccc:	d006      	beq.n	8096cdc <create_name+0x248>
 8096cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8096cd2:	d10a      	bne.n	8096cea <create_name+0x256>
 8096cd4:	69ba      	ldr	r2, [r7, #24]
 8096cd6:	697b      	ldr	r3, [r7, #20]
 8096cd8:	429a      	cmp	r2, r3
 8096cda:	d006      	beq.n	8096cea <create_name+0x256>
			cf |= NS_LOSS | NS_LFN;
 8096cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096ce0:	f043 0303 	orr.w	r3, r3, #3
 8096ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8096ce8:	e0a6      	b.n	8096e38 <create_name+0x3a4>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8096cea:	6a3a      	ldr	r2, [r7, #32]
 8096cec:	69fb      	ldr	r3, [r7, #28]
 8096cee:	429a      	cmp	r2, r3
 8096cf0:	d203      	bcs.n	8096cfa <create_name+0x266>
 8096cf2:	69ba      	ldr	r2, [r7, #24]
 8096cf4:	697b      	ldr	r3, [r7, #20]
 8096cf6:	429a      	cmp	r2, r3
 8096cf8:	d124      	bne.n	8096d44 <create_name+0x2b0>
			if (ni == 11) {				/* Name extension overflow? */
 8096cfa:	69fb      	ldr	r3, [r7, #28]
 8096cfc:	2b0b      	cmp	r3, #11
 8096cfe:	d106      	bne.n	8096d0e <create_name+0x27a>
				cf |= NS_LOSS | NS_LFN;
 8096d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096d04:	f043 0303 	orr.w	r3, r3, #3
 8096d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8096d0c:	e098      	b.n	8096e40 <create_name+0x3ac>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8096d0e:	69ba      	ldr	r2, [r7, #24]
 8096d10:	697b      	ldr	r3, [r7, #20]
 8096d12:	429a      	cmp	r2, r3
 8096d14:	d005      	beq.n	8096d22 <create_name+0x28e>
 8096d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096d1a:	f043 0303 	orr.w	r3, r3, #3
 8096d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8096d22:	69ba      	ldr	r2, [r7, #24]
 8096d24:	697b      	ldr	r3, [r7, #20]
 8096d26:	429a      	cmp	r2, r3
 8096d28:	f200 8089 	bhi.w	8096e3e <create_name+0x3aa>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8096d2c:	697b      	ldr	r3, [r7, #20]
 8096d2e:	61bb      	str	r3, [r7, #24]
 8096d30:	2308      	movs	r3, #8
 8096d32:	623b      	str	r3, [r7, #32]
 8096d34:	230b      	movs	r3, #11
 8096d36:	61fb      	str	r3, [r7, #28]
 8096d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096d3c:	009b      	lsls	r3, r3, #2
 8096d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8096d42:	e079      	b.n	8096e38 <create_name+0x3a4>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8096d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096d46:	2b7f      	cmp	r3, #127	; 0x7f
 8096d48:	d918      	bls.n	8096d7c <create_name+0x2e8>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8096d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096d4e:	f043 0302 	orr.w	r3, r3, #2
 8096d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* At DBCS */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8096d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096d58:	f240 11b5 	movw	r1, #437	; 0x1b5
 8096d5c:	4618      	mov	r0, r3
 8096d5e:	f001 f97d 	bl	809805c <ff_uni2oem>
 8096d62:	4603      	mov	r3, r0
 8096d64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8096d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8096d6c:	2b00      	cmp	r3, #0
 8096d6e:	d005      	beq.n	8096d7c <create_name+0x2e8>
 8096d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8096d76:	4a0c      	ldr	r2, [pc, #48]	; (8096da8 <create_name+0x314>)
 8096d78:	5cd3      	ldrb	r3, [r2, r3]
 8096d7a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8096d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096d7e:	2bff      	cmp	r3, #255	; 0xff
 8096d80:	d921      	bls.n	8096dc6 <create_name+0x332>
			if (i >= ni - 1) {			/* Field overflow? */
 8096d82:	69fb      	ldr	r3, [r7, #28]
 8096d84:	3b01      	subs	r3, #1
 8096d86:	6a3a      	ldr	r2, [r7, #32]
 8096d88:	429a      	cmp	r2, r3
 8096d8a:	d30f      	bcc.n	8096dac <create_name+0x318>
				cf |= NS_LOSS | NS_LFN;
 8096d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096d90:	f043 0303 	orr.w	r3, r3, #3
 8096d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8096d98:	69fb      	ldr	r3, [r7, #28]
 8096d9a:	623b      	str	r3, [r7, #32]
 8096d9c:	e04c      	b.n	8096e38 <create_name+0x3a4>
 8096d9e:	bf00      	nop
 8096da0:	0809e104 	.word	0x0809e104
 8096da4:	7ffffffe 	.word	0x7ffffffe
 8096da8:	0809f270 	.word	0x0809f270
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8096dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096dae:	0a1b      	lsrs	r3, r3, #8
 8096db0:	b299      	uxth	r1, r3
 8096db2:	6a3b      	ldr	r3, [r7, #32]
 8096db4:	1c5a      	adds	r2, r3, #1
 8096db6:	623a      	str	r2, [r7, #32]
 8096db8:	b2c9      	uxtb	r1, r1
 8096dba:	687a      	ldr	r2, [r7, #4]
 8096dbc:	4413      	add	r3, r2
 8096dbe:	460a      	mov	r2, r1
 8096dc0:	f883 2020 	strb.w	r2, [r3, #32]
 8096dc4:	e02e      	b.n	8096e24 <create_name+0x390>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8096dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096dc8:	2b00      	cmp	r3, #0
 8096dca:	d007      	beq.n	8096ddc <create_name+0x348>
 8096dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096dce:	4619      	mov	r1, r3
 8096dd0:	4841      	ldr	r0, [pc, #260]	; (8096ed8 <create_name+0x444>)
 8096dd2:	f7fe fcf3 	bl	80957bc <chk_chr>
 8096dd6:	4603      	mov	r3, r0
 8096dd8:	2b00      	cmp	r3, #0
 8096dda:	d008      	beq.n	8096dee <create_name+0x35a>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8096ddc:	235f      	movs	r3, #95	; 0x5f
 8096dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8096de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096de4:	f043 0303 	orr.w	r3, r3, #3
 8096de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8096dec:	e01a      	b.n	8096e24 <create_name+0x390>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8096dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096df0:	2b40      	cmp	r3, #64	; 0x40
 8096df2:	d908      	bls.n	8096e06 <create_name+0x372>
 8096df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096df6:	2b5a      	cmp	r3, #90	; 0x5a
 8096df8:	d805      	bhi.n	8096e06 <create_name+0x372>
					b |= 2;
 8096dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096dfe:	f043 0302 	orr.w	r3, r3, #2
 8096e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8096e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096e08:	2b60      	cmp	r3, #96	; 0x60
 8096e0a:	d90b      	bls.n	8096e24 <create_name+0x390>
 8096e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096e0e:	2b7a      	cmp	r3, #122	; 0x7a
 8096e10:	d808      	bhi.n	8096e24 <create_name+0x390>
					b |= 1; wc -= 0x20;
 8096e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096e16:	f043 0301 	orr.w	r3, r3, #1
 8096e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8096e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8096e20:	3b20      	subs	r3, #32
 8096e22:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8096e24:	6a3b      	ldr	r3, [r7, #32]
 8096e26:	1c5a      	adds	r2, r3, #1
 8096e28:	623a      	str	r2, [r7, #32]
 8096e2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8096e2c:	b2d1      	uxtb	r1, r2
 8096e2e:	687a      	ldr	r2, [r7, #4]
 8096e30:	4413      	add	r3, r2
 8096e32:	460a      	mov	r2, r1
 8096e34:	f883 2020 	strb.w	r2, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 8096e38:	e73a      	b.n	8096cb0 <create_name+0x21c>
		if (wc == 0) break;				/* Break on end of the LFN */
 8096e3a:	bf00      	nop
 8096e3c:	e000      	b.n	8096e40 <create_name+0x3ac>
			if (si > di) break;						/* No name extension? */
 8096e3e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8096e40:	687b      	ldr	r3, [r7, #4]
 8096e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8096e46:	2be5      	cmp	r3, #229	; 0xe5
 8096e48:	d103      	bne.n	8096e52 <create_name+0x3be>
 8096e4a:	687b      	ldr	r3, [r7, #4]
 8096e4c:	2205      	movs	r2, #5
 8096e4e:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8096e52:	69fb      	ldr	r3, [r7, #28]
 8096e54:	2b08      	cmp	r3, #8
 8096e56:	d104      	bne.n	8096e62 <create_name+0x3ce>
 8096e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096e5c:	009b      	lsls	r3, r3, #2
 8096e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8096e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096e66:	f003 030c 	and.w	r3, r3, #12
 8096e6a:	2b0c      	cmp	r3, #12
 8096e6c:	d005      	beq.n	8096e7a <create_name+0x3e6>
 8096e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096e72:	f003 0303 	and.w	r3, r3, #3
 8096e76:	2b03      	cmp	r3, #3
 8096e78:	d105      	bne.n	8096e86 <create_name+0x3f2>
 8096e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096e7e:	f043 0302 	orr.w	r3, r3, #2
 8096e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8096e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096e8a:	f003 0302 	and.w	r3, r3, #2
 8096e8e:	2b00      	cmp	r3, #0
 8096e90:	d117      	bne.n	8096ec2 <create_name+0x42e>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8096e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096e96:	f003 0301 	and.w	r3, r3, #1
 8096e9a:	2b00      	cmp	r3, #0
 8096e9c:	d005      	beq.n	8096eaa <create_name+0x416>
 8096e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096ea2:	f043 0310 	orr.w	r3, r3, #16
 8096ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8096eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8096eae:	f003 0304 	and.w	r3, r3, #4
 8096eb2:	2b00      	cmp	r3, #0
 8096eb4:	d005      	beq.n	8096ec2 <create_name+0x42e>
 8096eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8096eba:	f043 0308 	orr.w	r3, r3, #8
 8096ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8096ec2:	687b      	ldr	r3, [r7, #4]
 8096ec4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8096ec8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8096ecc:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8096ece:	4618      	mov	r0, r3
 8096ed0:	3728      	adds	r7, #40	; 0x28
 8096ed2:	46bd      	mov	sp, r7
 8096ed4:	bd80      	pop	{r7, pc}
 8096ed6:	bf00      	nop
 8096ed8:	0809e110 	.word	0x0809e110

08096edc <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8096edc:	b580      	push	{r7, lr}
 8096ede:	b086      	sub	sp, #24
 8096ee0:	af00      	add	r7, sp, #0
 8096ee2:	6078      	str	r0, [r7, #4]
 8096ee4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8096ee6:	687b      	ldr	r3, [r7, #4]
 8096ee8:	681b      	ldr	r3, [r3, #0]
 8096eea:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8096eec:	683b      	ldr	r3, [r7, #0]
 8096eee:	781b      	ldrb	r3, [r3, #0]
 8096ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8096ef2:	d00b      	beq.n	8096f0c <follow_path+0x30>
 8096ef4:	683b      	ldr	r3, [r7, #0]
 8096ef6:	781b      	ldrb	r3, [r3, #0]
 8096ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8096efa:	d007      	beq.n	8096f0c <follow_path+0x30>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 8096efc:	693b      	ldr	r3, [r7, #16]
 8096efe:	699a      	ldr	r2, [r3, #24]
 8096f00:	687b      	ldr	r3, [r7, #4]
 8096f02:	609a      	str	r2, [r3, #8]
 8096f04:	e00d      	b.n	8096f22 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8096f06:	683b      	ldr	r3, [r7, #0]
 8096f08:	3301      	adds	r3, #1
 8096f0a:	603b      	str	r3, [r7, #0]
 8096f0c:	683b      	ldr	r3, [r7, #0]
 8096f0e:	781b      	ldrb	r3, [r3, #0]
 8096f10:	2b2f      	cmp	r3, #47	; 0x2f
 8096f12:	d0f8      	beq.n	8096f06 <follow_path+0x2a>
 8096f14:	683b      	ldr	r3, [r7, #0]
 8096f16:	781b      	ldrb	r3, [r3, #0]
 8096f18:	2b5c      	cmp	r3, #92	; 0x5c
 8096f1a:	d0f4      	beq.n	8096f06 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from root directory */
 8096f1c:	687b      	ldr	r3, [r7, #4]
 8096f1e:	2200      	movs	r2, #0
 8096f20:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8096f22:	683b      	ldr	r3, [r7, #0]
 8096f24:	781b      	ldrb	r3, [r3, #0]
 8096f26:	2b1f      	cmp	r3, #31
 8096f28:	d80a      	bhi.n	8096f40 <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 8096f2a:	687b      	ldr	r3, [r7, #4]
 8096f2c:	2280      	movs	r2, #128	; 0x80
 8096f2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8096f32:	2100      	movs	r1, #0
 8096f34:	6878      	ldr	r0, [r7, #4]
 8096f36:	f7ff f8c4 	bl	80960c2 <dir_sdi>
 8096f3a:	4603      	mov	r3, r0
 8096f3c:	75fb      	strb	r3, [r7, #23]
 8096f3e:	e056      	b.n	8096fee <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8096f40:	463b      	mov	r3, r7
 8096f42:	4619      	mov	r1, r3
 8096f44:	6878      	ldr	r0, [r7, #4]
 8096f46:	f7ff fda5 	bl	8096a94 <create_name>
 8096f4a:	4603      	mov	r3, r0
 8096f4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8096f4e:	7dfb      	ldrb	r3, [r7, #23]
 8096f50:	2b00      	cmp	r3, #0
 8096f52:	d147      	bne.n	8096fe4 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
 8096f54:	6878      	ldr	r0, [r7, #4]
 8096f56:	f7ff fbe4 	bl	8096722 <dir_find>
 8096f5a:	4603      	mov	r3, r0
 8096f5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8096f5e:	687b      	ldr	r3, [r7, #4]
 8096f60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8096f64:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8096f66:	7dfb      	ldrb	r3, [r7, #23]
 8096f68:	2b00      	cmp	r3, #0
 8096f6a:	d01b      	beq.n	8096fa4 <follow_path+0xc8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8096f6c:	7dfb      	ldrb	r3, [r7, #23]
 8096f6e:	2b04      	cmp	r3, #4
 8096f70:	d13a      	bne.n	8096fe8 <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8096f72:	7bfb      	ldrb	r3, [r7, #15]
 8096f74:	f003 0320 	and.w	r3, r3, #32
 8096f78:	2b00      	cmp	r3, #0
 8096f7a:	d00b      	beq.n	8096f94 <follow_path+0xb8>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8096f7c:	7bfb      	ldrb	r3, [r7, #15]
 8096f7e:	f003 0304 	and.w	r3, r3, #4
 8096f82:	2b00      	cmp	r3, #0
 8096f84:	d02c      	beq.n	8096fe0 <follow_path+0x104>
						dp->fn[NSFLAG] = NS_NONAME;
 8096f86:	687b      	ldr	r3, [r7, #4]
 8096f88:	2280      	movs	r2, #128	; 0x80
 8096f8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						res = FR_OK;
 8096f8e:	2300      	movs	r3, #0
 8096f90:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8096f92:	e029      	b.n	8096fe8 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8096f94:	7bfb      	ldrb	r3, [r7, #15]
 8096f96:	f003 0304 	and.w	r3, r3, #4
 8096f9a:	2b00      	cmp	r3, #0
 8096f9c:	d124      	bne.n	8096fe8 <follow_path+0x10c>
 8096f9e:	2305      	movs	r3, #5
 8096fa0:	75fb      	strb	r3, [r7, #23]
				break;
 8096fa2:	e021      	b.n	8096fe8 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8096fa4:	7bfb      	ldrb	r3, [r7, #15]
 8096fa6:	f003 0304 	and.w	r3, r3, #4
 8096faa:	2b00      	cmp	r3, #0
 8096fac:	d11e      	bne.n	8096fec <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8096fae:	687b      	ldr	r3, [r7, #4]
 8096fb0:	799b      	ldrb	r3, [r3, #6]
 8096fb2:	f003 0310 	and.w	r3, r3, #16
 8096fb6:	2b00      	cmp	r3, #0
 8096fb8:	d102      	bne.n	8096fc0 <follow_path+0xe4>
				res = FR_NO_PATH; break;
 8096fba:	2305      	movs	r3, #5
 8096fbc:	75fb      	strb	r3, [r7, #23]
 8096fbe:	e016      	b.n	8096fee <follow_path+0x112>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8096fc0:	693b      	ldr	r3, [r7, #16]
 8096fc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8096fc6:	687b      	ldr	r3, [r7, #4]
 8096fc8:	691b      	ldr	r3, [r3, #16]
 8096fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8096fce:	4413      	add	r3, r2
 8096fd0:	4619      	mov	r1, r3
 8096fd2:	6938      	ldr	r0, [r7, #16]
 8096fd4:	f7ff f9ca 	bl	809636c <ld_clust>
 8096fd8:	4602      	mov	r2, r0
 8096fda:	687b      	ldr	r3, [r7, #4]
 8096fdc:	609a      	str	r2, [r3, #8]
 8096fde:	e7af      	b.n	8096f40 <follow_path+0x64>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8096fe0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8096fe2:	e7ad      	b.n	8096f40 <follow_path+0x64>
			if (res != FR_OK) break;
 8096fe4:	bf00      	nop
 8096fe6:	e002      	b.n	8096fee <follow_path+0x112>
				break;
 8096fe8:	bf00      	nop
 8096fea:	e000      	b.n	8096fee <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8096fec:	bf00      	nop
			}
		}
	}

	return res;
 8096fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8096ff0:	4618      	mov	r0, r3
 8096ff2:	3718      	adds	r7, #24
 8096ff4:	46bd      	mov	sp, r7
 8096ff6:	bd80      	pop	{r7, pc}

08096ff8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8096ff8:	b480      	push	{r7}
 8096ffa:	b089      	sub	sp, #36	; 0x24
 8096ffc:	af00      	add	r7, sp, #0
 8096ffe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8097000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8097004:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8097006:	687b      	ldr	r3, [r7, #4]
 8097008:	681b      	ldr	r3, [r3, #0]
 809700a:	613b      	str	r3, [r7, #16]
 809700c:	693b      	ldr	r3, [r7, #16]
 809700e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8097010:	693b      	ldr	r3, [r7, #16]
 8097012:	2b00      	cmp	r3, #0
 8097014:	d101      	bne.n	809701a <get_ldnumber+0x22>
 8097016:	697b      	ldr	r3, [r7, #20]
 8097018:	e02e      	b.n	8097078 <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 809701a:	69fb      	ldr	r3, [r7, #28]
 809701c:	1c5a      	adds	r2, r3, #1
 809701e:	61fa      	str	r2, [r7, #28]
 8097020:	781b      	ldrb	r3, [r3, #0]
 8097022:	73fb      	strb	r3, [r7, #15]
 8097024:	7bfb      	ldrb	r3, [r7, #15]
 8097026:	2b1f      	cmp	r3, #31
 8097028:	d902      	bls.n	8097030 <get_ldnumber+0x38>
 809702a:	7bfb      	ldrb	r3, [r7, #15]
 809702c:	2b3a      	cmp	r3, #58	; 0x3a
 809702e:	d1f4      	bne.n	809701a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8097030:	7bfb      	ldrb	r3, [r7, #15]
 8097032:	2b3a      	cmp	r3, #58	; 0x3a
 8097034:	d11c      	bne.n	8097070 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8097036:	2301      	movs	r3, #1
 8097038:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 809703a:	693b      	ldr	r3, [r7, #16]
 809703c:	781b      	ldrb	r3, [r3, #0]
 809703e:	2b2f      	cmp	r3, #47	; 0x2f
 8097040:	d90c      	bls.n	809705c <get_ldnumber+0x64>
 8097042:	693b      	ldr	r3, [r7, #16]
 8097044:	781b      	ldrb	r3, [r3, #0]
 8097046:	2b39      	cmp	r3, #57	; 0x39
 8097048:	d808      	bhi.n	809705c <get_ldnumber+0x64>
 809704a:	693b      	ldr	r3, [r7, #16]
 809704c:	3302      	adds	r3, #2
 809704e:	69fa      	ldr	r2, [r7, #28]
 8097050:	429a      	cmp	r2, r3
 8097052:	d103      	bne.n	809705c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8097054:	693b      	ldr	r3, [r7, #16]
 8097056:	781b      	ldrb	r3, [r3, #0]
 8097058:	3b30      	subs	r3, #48	; 0x30
 809705a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 809705c:	69bb      	ldr	r3, [r7, #24]
 809705e:	2b00      	cmp	r3, #0
 8097060:	dc04      	bgt.n	809706c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8097062:	69bb      	ldr	r3, [r7, #24]
 8097064:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8097066:	687b      	ldr	r3, [r7, #4]
 8097068:	69fa      	ldr	r2, [r7, #28]
 809706a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 809706c:	697b      	ldr	r3, [r7, #20]
 809706e:	e003      	b.n	8097078 <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8097070:	4b04      	ldr	r3, [pc, #16]	; (8097084 <get_ldnumber+0x8c>)
 8097072:	781b      	ldrb	r3, [r3, #0]
 8097074:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8097076:	697b      	ldr	r3, [r7, #20]
}
 8097078:	4618      	mov	r0, r3
 809707a:	3724      	adds	r7, #36	; 0x24
 809707c:	46bd      	mov	sp, r7
 809707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8097082:	4770      	bx	lr
 8097084:	2000be3e 	.word	0x2000be3e

08097088 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8097088:	b580      	push	{r7, lr}
 809708a:	b082      	sub	sp, #8
 809708c:	af00      	add	r7, sp, #0
 809708e:	6078      	str	r0, [r7, #4]
 8097090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8097092:	687b      	ldr	r3, [r7, #4]
 8097094:	2200      	movs	r2, #0
 8097096:	70da      	strb	r2, [r3, #3]
 8097098:	687b      	ldr	r3, [r7, #4]
 809709a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 809709e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80970a0:	6839      	ldr	r1, [r7, #0]
 80970a2:	6878      	ldr	r0, [r7, #4]
 80970a4:	f7fe fc48 	bl	8095938 <move_window>
 80970a8:	4603      	mov	r3, r0
 80970aa:	2b00      	cmp	r3, #0
 80970ac:	d001      	beq.n	80970b2 <check_fs+0x2a>
 80970ae:	2304      	movs	r3, #4
 80970b0:	e038      	b.n	8097124 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80970b2:	687b      	ldr	r3, [r7, #4]
 80970b4:	3338      	adds	r3, #56	; 0x38
 80970b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80970ba:	4618      	mov	r0, r3
 80970bc:	f7fe fa9a 	bl	80955f4 <ld_word>
 80970c0:	4603      	mov	r3, r0
 80970c2:	461a      	mov	r2, r3
 80970c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80970c8:	429a      	cmp	r2, r3
 80970ca:	d001      	beq.n	80970d0 <check_fs+0x48>
 80970cc:	2303      	movs	r3, #3
 80970ce:	e029      	b.n	8097124 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80970d0:	687b      	ldr	r3, [r7, #4]
 80970d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80970d6:	2be9      	cmp	r3, #233	; 0xe9
 80970d8:	d009      	beq.n	80970ee <check_fs+0x66>
 80970da:	687b      	ldr	r3, [r7, #4]
 80970dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80970e0:	2beb      	cmp	r3, #235	; 0xeb
 80970e2:	d004      	beq.n	80970ee <check_fs+0x66>
 80970e4:	687b      	ldr	r3, [r7, #4]
 80970e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80970ea:	2be8      	cmp	r3, #232	; 0xe8
 80970ec:	d119      	bne.n	8097122 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80970ee:	687b      	ldr	r3, [r7, #4]
 80970f0:	3338      	adds	r3, #56	; 0x38
 80970f2:	3336      	adds	r3, #54	; 0x36
 80970f4:	2203      	movs	r2, #3
 80970f6:	490d      	ldr	r1, [pc, #52]	; (809712c <check_fs+0xa4>)
 80970f8:	4618      	mov	r0, r3
 80970fa:	f7fe fb38 	bl	809576e <mem_cmp>
 80970fe:	4603      	mov	r3, r0
 8097100:	2b00      	cmp	r3, #0
 8097102:	d101      	bne.n	8097108 <check_fs+0x80>
 8097104:	2300      	movs	r3, #0
 8097106:	e00d      	b.n	8097124 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8097108:	687b      	ldr	r3, [r7, #4]
 809710a:	3338      	adds	r3, #56	; 0x38
 809710c:	3352      	adds	r3, #82	; 0x52
 809710e:	2205      	movs	r2, #5
 8097110:	4907      	ldr	r1, [pc, #28]	; (8097130 <check_fs+0xa8>)
 8097112:	4618      	mov	r0, r3
 8097114:	f7fe fb2b 	bl	809576e <mem_cmp>
 8097118:	4603      	mov	r3, r0
 809711a:	2b00      	cmp	r3, #0
 809711c:	d101      	bne.n	8097122 <check_fs+0x9a>
 809711e:	2300      	movs	r3, #0
 8097120:	e000      	b.n	8097124 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8097122:	2302      	movs	r3, #2
}
 8097124:	4618      	mov	r0, r3
 8097126:	3708      	adds	r7, #8
 8097128:	46bd      	mov	sp, r7
 809712a:	bd80      	pop	{r7, pc}
 809712c:	0809e118 	.word	0x0809e118
 8097130:	0809e11c 	.word	0x0809e11c

08097134 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8097134:	b580      	push	{r7, lr}
 8097136:	b096      	sub	sp, #88	; 0x58
 8097138:	af00      	add	r7, sp, #0
 809713a:	60f8      	str	r0, [r7, #12]
 809713c:	60b9      	str	r1, [r7, #8]
 809713e:	4613      	mov	r3, r2
 8097140:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8097142:	68bb      	ldr	r3, [r7, #8]
 8097144:	2200      	movs	r2, #0
 8097146:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8097148:	68f8      	ldr	r0, [r7, #12]
 809714a:	f7ff ff55 	bl	8096ff8 <get_ldnumber>
 809714e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8097150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8097152:	2b00      	cmp	r3, #0
 8097154:	da01      	bge.n	809715a <find_volume+0x26>
 8097156:	230b      	movs	r3, #11
 8097158:	e23e      	b.n	80975d8 <find_volume+0x4a4>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 809715a:	4aa8      	ldr	r2, [pc, #672]	; (80973fc <find_volume+0x2c8>)
 809715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 809715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8097162:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8097164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097166:	2b00      	cmp	r3, #0
 8097168:	d101      	bne.n	809716e <find_volume+0x3a>
 809716a:	230c      	movs	r3, #12
 809716c:	e234      	b.n	80975d8 <find_volume+0x4a4>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 809716e:	68bb      	ldr	r3, [r7, #8]
 8097170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8097172:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8097174:	79fb      	ldrb	r3, [r7, #7]
 8097176:	f023 0301 	bic.w	r3, r3, #1
 809717a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 809717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809717e:	781b      	ldrb	r3, [r3, #0]
 8097180:	2b00      	cmp	r3, #0
 8097182:	d01a      	beq.n	80971ba <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8097184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097186:	785b      	ldrb	r3, [r3, #1]
 8097188:	4618      	mov	r0, r3
 809718a:	f7fe f931 	bl	80953f0 <disk_status>
 809718e:	4603      	mov	r3, r0
 8097190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8097194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8097198:	f003 0301 	and.w	r3, r3, #1
 809719c:	2b00      	cmp	r3, #0
 809719e:	d10c      	bne.n	80971ba <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80971a0:	79fb      	ldrb	r3, [r7, #7]
 80971a2:	2b00      	cmp	r3, #0
 80971a4:	d007      	beq.n	80971b6 <find_volume+0x82>
 80971a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80971aa:	f003 0304 	and.w	r3, r3, #4
 80971ae:	2b00      	cmp	r3, #0
 80971b0:	d001      	beq.n	80971b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80971b2:	230a      	movs	r3, #10
 80971b4:	e210      	b.n	80975d8 <find_volume+0x4a4>
			}
			return FR_OK;				/* The filesystem object is valid */
 80971b6:	2300      	movs	r3, #0
 80971b8:	e20e      	b.n	80975d8 <find_volume+0x4a4>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 80971ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80971bc:	2200      	movs	r2, #0
 80971be:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80971c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80971c2:	b2da      	uxtb	r2, r3
 80971c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80971c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80971c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80971ca:	785b      	ldrb	r3, [r3, #1]
 80971cc:	4618      	mov	r0, r3
 80971ce:	f7fe f8e7 	bl	80953a0 <disk_initialize>
 80971d2:	4603      	mov	r3, r0
 80971d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80971d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80971dc:	f003 0301 	and.w	r3, r3, #1
 80971e0:	2b00      	cmp	r3, #0
 80971e2:	d001      	beq.n	80971e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80971e4:	2303      	movs	r3, #3
 80971e6:	e1f7      	b.n	80975d8 <find_volume+0x4a4>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80971e8:	79fb      	ldrb	r3, [r7, #7]
 80971ea:	2b00      	cmp	r3, #0
 80971ec:	d007      	beq.n	80971fe <find_volume+0xca>
 80971ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80971f2:	f003 0304 	and.w	r3, r3, #4
 80971f6:	2b00      	cmp	r3, #0
 80971f8:	d001      	beq.n	80971fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80971fa:	230a      	movs	r3, #10
 80971fc:	e1ec      	b.n	80975d8 <find_volume+0x4a4>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80971fe:	2300      	movs	r3, #0
 8097200:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8097202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8097204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8097206:	f7ff ff3f 	bl	8097088 <check_fs>
 809720a:	4603      	mov	r3, r0
 809720c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8097210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8097214:	2b02      	cmp	r3, #2
 8097216:	d14b      	bne.n	80972b0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8097218:	2300      	movs	r3, #0
 809721a:	643b      	str	r3, [r7, #64]	; 0x40
 809721c:	e01f      	b.n	809725e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 809721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097220:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8097224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8097226:	011b      	lsls	r3, r3, #4
 8097228:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 809722c:	4413      	add	r3, r2
 809722e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8097230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8097232:	3304      	adds	r3, #4
 8097234:	781b      	ldrb	r3, [r3, #0]
 8097236:	2b00      	cmp	r3, #0
 8097238:	d006      	beq.n	8097248 <find_volume+0x114>
 809723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 809723c:	3308      	adds	r3, #8
 809723e:	4618      	mov	r0, r3
 8097240:	f7fe f9f0 	bl	8095624 <ld_dword>
 8097244:	4602      	mov	r2, r0
 8097246:	e000      	b.n	809724a <find_volume+0x116>
 8097248:	2200      	movs	r2, #0
 809724a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 809724c:	009b      	lsls	r3, r3, #2
 809724e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8097252:	440b      	add	r3, r1
 8097254:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8097258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 809725a:	3301      	adds	r3, #1
 809725c:	643b      	str	r3, [r7, #64]	; 0x40
 809725e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8097260:	2b03      	cmp	r3, #3
 8097262:	d9dc      	bls.n	809721e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8097264:	2300      	movs	r3, #0
 8097266:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8097268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 809726a:	2b00      	cmp	r3, #0
 809726c:	d002      	beq.n	8097274 <find_volume+0x140>
 809726e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8097270:	3b01      	subs	r3, #1
 8097272:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8097274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8097276:	009b      	lsls	r3, r3, #2
 8097278:	f107 0258 	add.w	r2, r7, #88	; 0x58
 809727c:	4413      	add	r3, r2
 809727e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8097282:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8097284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8097286:	2b00      	cmp	r3, #0
 8097288:	d005      	beq.n	8097296 <find_volume+0x162>
 809728a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 809728c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 809728e:	f7ff fefb 	bl	8097088 <check_fs>
 8097292:	4603      	mov	r3, r0
 8097294:	e000      	b.n	8097298 <find_volume+0x164>
 8097296:	2303      	movs	r3, #3
 8097298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 809729c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80972a0:	2b01      	cmp	r3, #1
 80972a2:	d905      	bls.n	80972b0 <find_volume+0x17c>
 80972a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80972a6:	3301      	adds	r3, #1
 80972a8:	643b      	str	r3, [r7, #64]	; 0x40
 80972aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80972ac:	2b03      	cmp	r3, #3
 80972ae:	d9e1      	bls.n	8097274 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80972b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80972b4:	2b04      	cmp	r3, #4
 80972b6:	d101      	bne.n	80972bc <find_volume+0x188>
 80972b8:	2301      	movs	r3, #1
 80972ba:	e18d      	b.n	80975d8 <find_volume+0x4a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80972bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80972c0:	2b01      	cmp	r3, #1
 80972c2:	d901      	bls.n	80972c8 <find_volume+0x194>
 80972c4:	230d      	movs	r3, #13
 80972c6:	e187      	b.n	80975d8 <find_volume+0x4a4>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80972c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80972ca:	3338      	adds	r3, #56	; 0x38
 80972cc:	330b      	adds	r3, #11
 80972ce:	4618      	mov	r0, r3
 80972d0:	f7fe f990 	bl	80955f4 <ld_word>
 80972d4:	4603      	mov	r3, r0
 80972d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80972da:	d001      	beq.n	80972e0 <find_volume+0x1ac>
 80972dc:	230d      	movs	r3, #13
 80972de:	e17b      	b.n	80975d8 <find_volume+0x4a4>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80972e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80972e2:	3338      	adds	r3, #56	; 0x38
 80972e4:	3316      	adds	r3, #22
 80972e6:	4618      	mov	r0, r3
 80972e8:	f7fe f984 	bl	80955f4 <ld_word>
 80972ec:	4603      	mov	r3, r0
 80972ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80972f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80972f2:	2b00      	cmp	r3, #0
 80972f4:	d106      	bne.n	8097304 <find_volume+0x1d0>
 80972f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80972f8:	3338      	adds	r3, #56	; 0x38
 80972fa:	3324      	adds	r3, #36	; 0x24
 80972fc:	4618      	mov	r0, r3
 80972fe:	f7fe f991 	bl	8095624 <ld_dword>
 8097302:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8097304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8097308:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 809730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809730c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8097310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097312:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8097314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097316:	789b      	ldrb	r3, [r3, #2]
 8097318:	2b01      	cmp	r3, #1
 809731a:	d005      	beq.n	8097328 <find_volume+0x1f4>
 809731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809731e:	789b      	ldrb	r3, [r3, #2]
 8097320:	2b02      	cmp	r3, #2
 8097322:	d001      	beq.n	8097328 <find_volume+0x1f4>
 8097324:	230d      	movs	r3, #13
 8097326:	e157      	b.n	80975d8 <find_volume+0x4a4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8097328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809732a:	789b      	ldrb	r3, [r3, #2]
 809732c:	461a      	mov	r2, r3
 809732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8097330:	fb02 f303 	mul.w	r3, r2, r3
 8097334:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8097336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 809733c:	b29a      	uxth	r2, r3
 809733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097340:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8097342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097344:	895b      	ldrh	r3, [r3, #10]
 8097346:	2b00      	cmp	r3, #0
 8097348:	d008      	beq.n	809735c <find_volume+0x228>
 809734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809734c:	895b      	ldrh	r3, [r3, #10]
 809734e:	461a      	mov	r2, r3
 8097350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097352:	895b      	ldrh	r3, [r3, #10]
 8097354:	3b01      	subs	r3, #1
 8097356:	4013      	ands	r3, r2
 8097358:	2b00      	cmp	r3, #0
 809735a:	d001      	beq.n	8097360 <find_volume+0x22c>
 809735c:	230d      	movs	r3, #13
 809735e:	e13b      	b.n	80975d8 <find_volume+0x4a4>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8097360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097362:	3338      	adds	r3, #56	; 0x38
 8097364:	3311      	adds	r3, #17
 8097366:	4618      	mov	r0, r3
 8097368:	f7fe f944 	bl	80955f4 <ld_word>
 809736c:	4603      	mov	r3, r0
 809736e:	461a      	mov	r2, r3
 8097370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097372:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8097374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097376:	891b      	ldrh	r3, [r3, #8]
 8097378:	f003 030f 	and.w	r3, r3, #15
 809737c:	b29b      	uxth	r3, r3
 809737e:	2b00      	cmp	r3, #0
 8097380:	d001      	beq.n	8097386 <find_volume+0x252>
 8097382:	230d      	movs	r3, #13
 8097384:	e128      	b.n	80975d8 <find_volume+0x4a4>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8097386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097388:	3338      	adds	r3, #56	; 0x38
 809738a:	3313      	adds	r3, #19
 809738c:	4618      	mov	r0, r3
 809738e:	f7fe f931 	bl	80955f4 <ld_word>
 8097392:	4603      	mov	r3, r0
 8097394:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8097396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8097398:	2b00      	cmp	r3, #0
 809739a:	d106      	bne.n	80973aa <find_volume+0x276>
 809739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809739e:	3338      	adds	r3, #56	; 0x38
 80973a0:	3320      	adds	r3, #32
 80973a2:	4618      	mov	r0, r3
 80973a4:	f7fe f93e 	bl	8095624 <ld_dword>
 80973a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80973aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80973ac:	3338      	adds	r3, #56	; 0x38
 80973ae:	330e      	adds	r3, #14
 80973b0:	4618      	mov	r0, r3
 80973b2:	f7fe f91f 	bl	80955f4 <ld_word>
 80973b6:	4603      	mov	r3, r0
 80973b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80973ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80973bc:	2b00      	cmp	r3, #0
 80973be:	d101      	bne.n	80973c4 <find_volume+0x290>
 80973c0:	230d      	movs	r3, #13
 80973c2:	e109      	b.n	80975d8 <find_volume+0x4a4>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80973c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80973c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80973c8:	4413      	add	r3, r2
 80973ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80973cc:	8912      	ldrh	r2, [r2, #8]
 80973ce:	0912      	lsrs	r2, r2, #4
 80973d0:	b292      	uxth	r2, r2
 80973d2:	4413      	add	r3, r2
 80973d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80973d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80973d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80973da:	429a      	cmp	r2, r3
 80973dc:	d201      	bcs.n	80973e2 <find_volume+0x2ae>
 80973de:	230d      	movs	r3, #13
 80973e0:	e0fa      	b.n	80975d8 <find_volume+0x4a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80973e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80973e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80973e6:	1ad3      	subs	r3, r2, r3
 80973e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80973ea:	8952      	ldrh	r2, [r2, #10]
 80973ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80973f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80973f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80973f4:	2b00      	cmp	r3, #0
 80973f6:	d103      	bne.n	8097400 <find_volume+0x2cc>
 80973f8:	230d      	movs	r3, #13
 80973fa:	e0ed      	b.n	80975d8 <find_volume+0x4a4>
 80973fc:	2000be38 	.word	0x2000be38
		fmt = 0;
 8097400:	2300      	movs	r3, #0
 8097402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8097406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097408:	4a75      	ldr	r2, [pc, #468]	; (80975e0 <find_volume+0x4ac>)
 809740a:	4293      	cmp	r3, r2
 809740c:	d802      	bhi.n	8097414 <find_volume+0x2e0>
 809740e:	2303      	movs	r3, #3
 8097410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8097414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097416:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 809741a:	4293      	cmp	r3, r2
 809741c:	d802      	bhi.n	8097424 <find_volume+0x2f0>
 809741e:	2302      	movs	r3, #2
 8097420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8097424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097426:	f640 72f5 	movw	r2, #4085	; 0xff5
 809742a:	4293      	cmp	r3, r2
 809742c:	d802      	bhi.n	8097434 <find_volume+0x300>
 809742e:	2301      	movs	r3, #1
 8097430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8097434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8097438:	2b00      	cmp	r3, #0
 809743a:	d101      	bne.n	8097440 <find_volume+0x30c>
 809743c:	230d      	movs	r3, #13
 809743e:	e0cb      	b.n	80975d8 <find_volume+0x4a4>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8097440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097442:	1c9a      	adds	r2, r3, #2
 8097444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097446:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8097448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809744a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 809744c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 809744e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8097450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8097452:	441a      	add	r2, r3
 8097454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097456:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8097458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 809745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 809745c:	441a      	add	r2, r3
 809745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097460:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8097462:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8097466:	2b03      	cmp	r3, #3
 8097468:	d11e      	bne.n	80974a8 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 809746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809746c:	3338      	adds	r3, #56	; 0x38
 809746e:	332a      	adds	r3, #42	; 0x2a
 8097470:	4618      	mov	r0, r3
 8097472:	f7fe f8bf 	bl	80955f4 <ld_word>
 8097476:	4603      	mov	r3, r0
 8097478:	2b00      	cmp	r3, #0
 809747a:	d001      	beq.n	8097480 <find_volume+0x34c>
 809747c:	230d      	movs	r3, #13
 809747e:	e0ab      	b.n	80975d8 <find_volume+0x4a4>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8097480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097482:	891b      	ldrh	r3, [r3, #8]
 8097484:	2b00      	cmp	r3, #0
 8097486:	d001      	beq.n	809748c <find_volume+0x358>
 8097488:	230d      	movs	r3, #13
 809748a:	e0a5      	b.n	80975d8 <find_volume+0x4a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 809748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809748e:	3338      	adds	r3, #56	; 0x38
 8097490:	332c      	adds	r3, #44	; 0x2c
 8097492:	4618      	mov	r0, r3
 8097494:	f7fe f8c6 	bl	8095624 <ld_dword>
 8097498:	4602      	mov	r2, r0
 809749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809749c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 809749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974a0:	69db      	ldr	r3, [r3, #28]
 80974a2:	009b      	lsls	r3, r3, #2
 80974a4:	647b      	str	r3, [r7, #68]	; 0x44
 80974a6:	e01f      	b.n	80974e8 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80974a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974aa:	891b      	ldrh	r3, [r3, #8]
 80974ac:	2b00      	cmp	r3, #0
 80974ae:	d101      	bne.n	80974b4 <find_volume+0x380>
 80974b0:	230d      	movs	r3, #13
 80974b2:	e091      	b.n	80975d8 <find_volume+0x4a4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80974b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80974b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80974ba:	441a      	add	r2, r3
 80974bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974be:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80974c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80974c4:	2b02      	cmp	r3, #2
 80974c6:	d103      	bne.n	80974d0 <find_volume+0x39c>
 80974c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974ca:	69db      	ldr	r3, [r3, #28]
 80974cc:	005b      	lsls	r3, r3, #1
 80974ce:	e00a      	b.n	80974e6 <find_volume+0x3b2>
 80974d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974d2:	69da      	ldr	r2, [r3, #28]
 80974d4:	4613      	mov	r3, r2
 80974d6:	005b      	lsls	r3, r3, #1
 80974d8:	4413      	add	r3, r2
 80974da:	085a      	lsrs	r2, r3, #1
 80974dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974de:	69db      	ldr	r3, [r3, #28]
 80974e0:	f003 0301 	and.w	r3, r3, #1
 80974e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80974e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80974e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974ea:	6a1a      	ldr	r2, [r3, #32]
 80974ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80974ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80974f2:	0a5b      	lsrs	r3, r3, #9
 80974f4:	429a      	cmp	r2, r3
 80974f6:	d201      	bcs.n	80974fc <find_volume+0x3c8>
 80974f8:	230d      	movs	r3, #13
 80974fa:	e06d      	b.n	80975d8 <find_volume+0x4a4>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80974fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80974fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8097502:	615a      	str	r2, [r3, #20]
 8097504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097506:	695a      	ldr	r2, [r3, #20]
 8097508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809750a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 809750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809750e:	2280      	movs	r2, #128	; 0x80
 8097510:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8097512:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8097516:	2b03      	cmp	r3, #3
 8097518:	d149      	bne.n	80975ae <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 809751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809751c:	3338      	adds	r3, #56	; 0x38
 809751e:	3330      	adds	r3, #48	; 0x30
 8097520:	4618      	mov	r0, r3
 8097522:	f7fe f867 	bl	80955f4 <ld_word>
 8097526:	4603      	mov	r3, r0
 8097528:	2b01      	cmp	r3, #1
 809752a:	d140      	bne.n	80975ae <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 809752c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 809752e:	3301      	adds	r3, #1
 8097530:	4619      	mov	r1, r3
 8097532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8097534:	f7fe fa00 	bl	8095938 <move_window>
 8097538:	4603      	mov	r3, r0
 809753a:	2b00      	cmp	r3, #0
 809753c:	d137      	bne.n	80975ae <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 809753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097540:	2200      	movs	r2, #0
 8097542:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8097544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097546:	3338      	adds	r3, #56	; 0x38
 8097548:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 809754c:	4618      	mov	r0, r3
 809754e:	f7fe f851 	bl	80955f4 <ld_word>
 8097552:	4603      	mov	r3, r0
 8097554:	461a      	mov	r2, r3
 8097556:	f64a 2355 	movw	r3, #43605	; 0xaa55
 809755a:	429a      	cmp	r2, r3
 809755c:	d127      	bne.n	80975ae <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 809755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097560:	3338      	adds	r3, #56	; 0x38
 8097562:	4618      	mov	r0, r3
 8097564:	f7fe f85e 	bl	8095624 <ld_dword>
 8097568:	4602      	mov	r2, r0
 809756a:	4b1e      	ldr	r3, [pc, #120]	; (80975e4 <find_volume+0x4b0>)
 809756c:	429a      	cmp	r2, r3
 809756e:	d11e      	bne.n	80975ae <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8097570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097572:	3338      	adds	r3, #56	; 0x38
 8097574:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8097578:	4618      	mov	r0, r3
 809757a:	f7fe f853 	bl	8095624 <ld_dword>
 809757e:	4602      	mov	r2, r0
 8097580:	4b19      	ldr	r3, [pc, #100]	; (80975e8 <find_volume+0x4b4>)
 8097582:	429a      	cmp	r2, r3
 8097584:	d113      	bne.n	80975ae <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8097586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097588:	3338      	adds	r3, #56	; 0x38
 809758a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 809758e:	4618      	mov	r0, r3
 8097590:	f7fe f848 	bl	8095624 <ld_dword>
 8097594:	4602      	mov	r2, r0
 8097596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8097598:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 809759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 809759c:	3338      	adds	r3, #56	; 0x38
 809759e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80975a2:	4618      	mov	r0, r3
 80975a4:	f7fe f83e 	bl	8095624 <ld_dword>
 80975a8:	4602      	mov	r2, r0
 80975aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80975ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80975ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80975b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80975b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80975b6:	4b0d      	ldr	r3, [pc, #52]	; (80975ec <find_volume+0x4b8>)
 80975b8:	881b      	ldrh	r3, [r3, #0]
 80975ba:	3301      	adds	r3, #1
 80975bc:	b29a      	uxth	r2, r3
 80975be:	4b0b      	ldr	r3, [pc, #44]	; (80975ec <find_volume+0x4b8>)
 80975c0:	801a      	strh	r2, [r3, #0]
 80975c2:	4b0a      	ldr	r3, [pc, #40]	; (80975ec <find_volume+0x4b8>)
 80975c4:	881a      	ldrh	r2, [r3, #0]
 80975c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80975c8:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80975ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80975cc:	4a08      	ldr	r2, [pc, #32]	; (80975f0 <find_volume+0x4bc>)
 80975ce:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80975d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80975d2:	2200      	movs	r2, #0
 80975d4:	619a      	str	r2, [r3, #24]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80975d6:	2300      	movs	r3, #0
}
 80975d8:	4618      	mov	r0, r3
 80975da:	3758      	adds	r7, #88	; 0x58
 80975dc:	46bd      	mov	sp, r7
 80975de:	bd80      	pop	{r7, pc}
 80975e0:	0ffffff5 	.word	0x0ffffff5
 80975e4:	41615252 	.word	0x41615252
 80975e8:	61417272 	.word	0x61417272
 80975ec:	2000be3c 	.word	0x2000be3c
 80975f0:	2000be40 	.word	0x2000be40

080975f4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80975f4:	b580      	push	{r7, lr}
 80975f6:	b084      	sub	sp, #16
 80975f8:	af00      	add	r7, sp, #0
 80975fa:	6078      	str	r0, [r7, #4]
 80975fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80975fe:	2309      	movs	r3, #9
 8097600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8097602:	687b      	ldr	r3, [r7, #4]
 8097604:	2b00      	cmp	r3, #0
 8097606:	d01c      	beq.n	8097642 <validate+0x4e>
 8097608:	687b      	ldr	r3, [r7, #4]
 809760a:	681b      	ldr	r3, [r3, #0]
 809760c:	2b00      	cmp	r3, #0
 809760e:	d018      	beq.n	8097642 <validate+0x4e>
 8097610:	687b      	ldr	r3, [r7, #4]
 8097612:	681b      	ldr	r3, [r3, #0]
 8097614:	781b      	ldrb	r3, [r3, #0]
 8097616:	2b00      	cmp	r3, #0
 8097618:	d013      	beq.n	8097642 <validate+0x4e>
 809761a:	687b      	ldr	r3, [r7, #4]
 809761c:	889a      	ldrh	r2, [r3, #4]
 809761e:	687b      	ldr	r3, [r7, #4]
 8097620:	681b      	ldr	r3, [r3, #0]
 8097622:	88db      	ldrh	r3, [r3, #6]
 8097624:	429a      	cmp	r2, r3
 8097626:	d10c      	bne.n	8097642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8097628:	687b      	ldr	r3, [r7, #4]
 809762a:	681b      	ldr	r3, [r3, #0]
 809762c:	785b      	ldrb	r3, [r3, #1]
 809762e:	4618      	mov	r0, r3
 8097630:	f7fd fede 	bl	80953f0 <disk_status>
 8097634:	4603      	mov	r3, r0
 8097636:	f003 0301 	and.w	r3, r3, #1
 809763a:	2b00      	cmp	r3, #0
 809763c:	d101      	bne.n	8097642 <validate+0x4e>
			res = FR_OK;
 809763e:	2300      	movs	r3, #0
 8097640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8097642:	7bfb      	ldrb	r3, [r7, #15]
 8097644:	2b00      	cmp	r3, #0
 8097646:	d102      	bne.n	809764e <validate+0x5a>
 8097648:	687b      	ldr	r3, [r7, #4]
 809764a:	681b      	ldr	r3, [r3, #0]
 809764c:	e000      	b.n	8097650 <validate+0x5c>
 809764e:	2300      	movs	r3, #0
 8097650:	683a      	ldr	r2, [r7, #0]
 8097652:	6013      	str	r3, [r2, #0]
	return res;
 8097654:	7bfb      	ldrb	r3, [r7, #15]
}
 8097656:	4618      	mov	r0, r3
 8097658:	3710      	adds	r7, #16
 809765a:	46bd      	mov	sp, r7
 809765c:	bd80      	pop	{r7, pc}
	...

08097660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8097660:	b580      	push	{r7, lr}
 8097662:	b088      	sub	sp, #32
 8097664:	af00      	add	r7, sp, #0
 8097666:	60f8      	str	r0, [r7, #12]
 8097668:	60b9      	str	r1, [r7, #8]
 809766a:	4613      	mov	r3, r2
 809766c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 809766e:	68bb      	ldr	r3, [r7, #8]
 8097670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8097672:	f107 0310 	add.w	r3, r7, #16
 8097676:	4618      	mov	r0, r3
 8097678:	f7ff fcbe 	bl	8096ff8 <get_ldnumber>
 809767c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 809767e:	69fb      	ldr	r3, [r7, #28]
 8097680:	2b00      	cmp	r3, #0
 8097682:	da01      	bge.n	8097688 <f_mount+0x28>
 8097684:	230b      	movs	r3, #11
 8097686:	e025      	b.n	80976d4 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8097688:	4a14      	ldr	r2, [pc, #80]	; (80976dc <f_mount+0x7c>)
 809768a:	69fb      	ldr	r3, [r7, #28]
 809768c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8097690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8097692:	69bb      	ldr	r3, [r7, #24]
 8097694:	2b00      	cmp	r3, #0
 8097696:	d002      	beq.n	809769e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8097698:	69bb      	ldr	r3, [r7, #24]
 809769a:	2200      	movs	r2, #0
 809769c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 809769e:	68fb      	ldr	r3, [r7, #12]
 80976a0:	2b00      	cmp	r3, #0
 80976a2:	d002      	beq.n	80976aa <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80976a4:	68fb      	ldr	r3, [r7, #12]
 80976a6:	2200      	movs	r2, #0
 80976a8:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80976aa:	68fa      	ldr	r2, [r7, #12]
 80976ac:	490b      	ldr	r1, [pc, #44]	; (80976dc <f_mount+0x7c>)
 80976ae:	69fb      	ldr	r3, [r7, #28]
 80976b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80976b4:	79fb      	ldrb	r3, [r7, #7]
 80976b6:	2b00      	cmp	r3, #0
 80976b8:	d101      	bne.n	80976be <f_mount+0x5e>
 80976ba:	2300      	movs	r3, #0
 80976bc:	e00a      	b.n	80976d4 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80976be:	f107 010c 	add.w	r1, r7, #12
 80976c2:	f107 0308 	add.w	r3, r7, #8
 80976c6:	2200      	movs	r2, #0
 80976c8:	4618      	mov	r0, r3
 80976ca:	f7ff fd33 	bl	8097134 <find_volume>
 80976ce:	4603      	mov	r3, r0
 80976d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80976d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80976d4:	4618      	mov	r0, r3
 80976d6:	3720      	adds	r7, #32
 80976d8:	46bd      	mov	sp, r7
 80976da:	bd80      	pop	{r7, pc}
 80976dc:	2000be38 	.word	0x2000be38

080976e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80976e0:	b590      	push	{r4, r7, lr}
 80976e2:	b099      	sub	sp, #100	; 0x64
 80976e4:	af00      	add	r7, sp, #0
 80976e6:	60f8      	str	r0, [r7, #12]
 80976e8:	60b9      	str	r1, [r7, #8]
 80976ea:	4613      	mov	r3, r2
 80976ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80976ee:	68fb      	ldr	r3, [r7, #12]
 80976f0:	2b00      	cmp	r3, #0
 80976f2:	d101      	bne.n	80976f8 <f_open+0x18>
 80976f4:	2309      	movs	r3, #9
 80976f6:	e172      	b.n	80979de <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80976f8:	79fb      	ldrb	r3, [r7, #7]
 80976fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80976fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8097700:	79fa      	ldrb	r2, [r7, #7]
 8097702:	f107 0110 	add.w	r1, r7, #16
 8097706:	f107 0308 	add.w	r3, r7, #8
 809770a:	4618      	mov	r0, r3
 809770c:	f7ff fd12 	bl	8097134 <find_volume>
 8097710:	4603      	mov	r3, r0
 8097712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8097716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 809771a:	2b00      	cmp	r3, #0
 809771c:	f040 8156 	bne.w	80979cc <f_open+0x2ec>
		dj.obj.fs = fs;
 8097720:	693b      	ldr	r3, [r7, #16]
 8097722:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8097724:	68ba      	ldr	r2, [r7, #8]
 8097726:	f107 0314 	add.w	r3, r7, #20
 809772a:	4611      	mov	r1, r2
 809772c:	4618      	mov	r0, r3
 809772e:	f7ff fbd5 	bl	8096edc <follow_path>
 8097732:	4603      	mov	r3, r0
 8097734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8097738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 809773c:	2b00      	cmp	r3, #0
 809773e:	d107      	bne.n	8097750 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8097740:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8097744:	b25b      	sxtb	r3, r3
 8097746:	2b00      	cmp	r3, #0
 8097748:	da02      	bge.n	8097750 <f_open+0x70>
				res = FR_INVALID_NAME;
 809774a:	2306      	movs	r3, #6
 809774c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8097750:	79fb      	ldrb	r3, [r7, #7]
 8097752:	f003 031c 	and.w	r3, r3, #28
 8097756:	2b00      	cmp	r3, #0
 8097758:	d073      	beq.n	8097842 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 809775a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 809775e:	2b00      	cmp	r3, #0
 8097760:	d010      	beq.n	8097784 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8097762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8097766:	2b04      	cmp	r3, #4
 8097768:	d107      	bne.n	809777a <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 809776a:	f107 0314 	add.w	r3, r7, #20
 809776e:	4618      	mov	r0, r3
 8097770:	f7ff f898 	bl	80968a4 <dir_register>
 8097774:	4603      	mov	r3, r0
 8097776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 809777a:	79fb      	ldrb	r3, [r7, #7]
 809777c:	f043 0308 	orr.w	r3, r3, #8
 8097780:	71fb      	strb	r3, [r7, #7]
 8097782:	e010      	b.n	80977a6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8097784:	7ebb      	ldrb	r3, [r7, #26]
 8097786:	f003 0311 	and.w	r3, r3, #17
 809778a:	2b00      	cmp	r3, #0
 809778c:	d003      	beq.n	8097796 <f_open+0xb6>
					res = FR_DENIED;
 809778e:	2307      	movs	r3, #7
 8097790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8097794:	e007      	b.n	80977a6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8097796:	79fb      	ldrb	r3, [r7, #7]
 8097798:	f003 0304 	and.w	r3, r3, #4
 809779c:	2b00      	cmp	r3, #0
 809779e:	d002      	beq.n	80977a6 <f_open+0xc6>
 80977a0:	2308      	movs	r3, #8
 80977a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80977a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80977aa:	2b00      	cmp	r3, #0
 80977ac:	d163      	bne.n	8097876 <f_open+0x196>
 80977ae:	79fb      	ldrb	r3, [r7, #7]
 80977b0:	f003 0308 	and.w	r3, r3, #8
 80977b4:	2b00      	cmp	r3, #0
 80977b6:	d05e      	beq.n	8097876 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80977b8:	693b      	ldr	r3, [r7, #16]
 80977ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80977bc:	4611      	mov	r1, r2
 80977be:	4618      	mov	r0, r3
 80977c0:	f7fe fdd4 	bl	809636c <ld_clust>
 80977c4:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80977c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80977c8:	f103 040e 	add.w	r4, r3, #14
 80977cc:	f7fd fde0 	bl	8095390 <get_fattime>
 80977d0:	4603      	mov	r3, r0
 80977d2:	4619      	mov	r1, r3
 80977d4:	4620      	mov	r0, r4
 80977d6:	f7fd ff63 	bl	80956a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80977da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80977dc:	330b      	adds	r3, #11
 80977de:	2220      	movs	r2, #32
 80977e0:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80977e2:	693b      	ldr	r3, [r7, #16]
 80977e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80977e6:	2200      	movs	r2, #0
 80977e8:	4618      	mov	r0, r3
 80977ea:	f7fe fdde 	bl	80963aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80977ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80977f0:	331c      	adds	r3, #28
 80977f2:	2100      	movs	r1, #0
 80977f4:	4618      	mov	r0, r3
 80977f6:	f7fd ff53 	bl	80956a0 <st_dword>
					fs->wflag = 1;
 80977fa:	693b      	ldr	r3, [r7, #16]
 80977fc:	2201      	movs	r2, #1
 80977fe:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8097800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8097802:	2b00      	cmp	r3, #0
 8097804:	d037      	beq.n	8097876 <f_open+0x196>
						dw = fs->winsect;
 8097806:	693b      	ldr	r3, [r7, #16]
 8097808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 809780a:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 809780c:	f107 0314 	add.w	r3, r7, #20
 8097810:	2200      	movs	r2, #0
 8097812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8097814:	4618      	mov	r0, r3
 8097816:	f7fe fad6 	bl	8095dc6 <remove_chain>
 809781a:	4603      	mov	r3, r0
 809781c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8097820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8097824:	2b00      	cmp	r3, #0
 8097826:	d126      	bne.n	8097876 <f_open+0x196>
							res = move_window(fs, dw);
 8097828:	693b      	ldr	r3, [r7, #16]
 809782a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 809782c:	4618      	mov	r0, r3
 809782e:	f7fe f883 	bl	8095938 <move_window>
 8097832:	4603      	mov	r3, r0
 8097834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8097838:	693b      	ldr	r3, [r7, #16]
 809783a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 809783c:	3a01      	subs	r2, #1
 809783e:	611a      	str	r2, [r3, #16]
 8097840:	e019      	b.n	8097876 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8097842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8097846:	2b00      	cmp	r3, #0
 8097848:	d115      	bne.n	8097876 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 809784a:	7ebb      	ldrb	r3, [r7, #26]
 809784c:	f003 0310 	and.w	r3, r3, #16
 8097850:	2b00      	cmp	r3, #0
 8097852:	d003      	beq.n	809785c <f_open+0x17c>
					res = FR_NO_FILE;
 8097854:	2304      	movs	r3, #4
 8097856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 809785a:	e00c      	b.n	8097876 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 809785c:	79fb      	ldrb	r3, [r7, #7]
 809785e:	f003 0302 	and.w	r3, r3, #2
 8097862:	2b00      	cmp	r3, #0
 8097864:	d007      	beq.n	8097876 <f_open+0x196>
 8097866:	7ebb      	ldrb	r3, [r7, #26]
 8097868:	f003 0301 	and.w	r3, r3, #1
 809786c:	2b00      	cmp	r3, #0
 809786e:	d002      	beq.n	8097876 <f_open+0x196>
						res = FR_DENIED;
 8097870:	2307      	movs	r3, #7
 8097872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8097876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 809787a:	2b00      	cmp	r3, #0
 809787c:	d10f      	bne.n	809789e <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 809787e:	79fb      	ldrb	r3, [r7, #7]
 8097880:	f003 0308 	and.w	r3, r3, #8
 8097884:	2b00      	cmp	r3, #0
 8097886:	d003      	beq.n	8097890 <f_open+0x1b0>
 8097888:	79fb      	ldrb	r3, [r7, #7]
 809788a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 809788e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8097890:	693b      	ldr	r3, [r7, #16]
 8097892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8097894:	68fb      	ldr	r3, [r7, #12]
 8097896:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8097898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 809789a:	68fb      	ldr	r3, [r7, #12]
 809789c:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 809789e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80978a2:	2b00      	cmp	r3, #0
 80978a4:	f040 8092 	bne.w	80979cc <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80978a8:	693b      	ldr	r3, [r7, #16]
 80978aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80978ac:	4611      	mov	r1, r2
 80978ae:	4618      	mov	r0, r3
 80978b0:	f7fe fd5c 	bl	809636c <ld_clust>
 80978b4:	4602      	mov	r2, r0
 80978b6:	68fb      	ldr	r3, [r7, #12]
 80978b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80978ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80978bc:	331c      	adds	r3, #28
 80978be:	4618      	mov	r0, r3
 80978c0:	f7fd feb0 	bl	8095624 <ld_dword>
 80978c4:	4602      	mov	r2, r0
 80978c6:	68fb      	ldr	r3, [r7, #12]
 80978c8:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80978ca:	693a      	ldr	r2, [r7, #16]
 80978cc:	68fb      	ldr	r3, [r7, #12]
 80978ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80978d0:	693b      	ldr	r3, [r7, #16]
 80978d2:	88da      	ldrh	r2, [r3, #6]
 80978d4:	68fb      	ldr	r3, [r7, #12]
 80978d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80978d8:	68fb      	ldr	r3, [r7, #12]
 80978da:	79fa      	ldrb	r2, [r7, #7]
 80978dc:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80978de:	68fb      	ldr	r3, [r7, #12]
 80978e0:	2200      	movs	r2, #0
 80978e2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80978e4:	68fb      	ldr	r3, [r7, #12]
 80978e6:	2200      	movs	r2, #0
 80978e8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80978ea:	68fb      	ldr	r3, [r7, #12]
 80978ec:	2200      	movs	r2, #0
 80978ee:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 80978f0:	68fb      	ldr	r3, [r7, #12]
 80978f2:	3328      	adds	r3, #40	; 0x28
 80978f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80978f8:	2100      	movs	r1, #0
 80978fa:	4618      	mov	r0, r3
 80978fc:	f7fd ff1d 	bl	809573a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8097900:	79fb      	ldrb	r3, [r7, #7]
 8097902:	f003 0320 	and.w	r3, r3, #32
 8097906:	2b00      	cmp	r3, #0
 8097908:	d060      	beq.n	80979cc <f_open+0x2ec>
 809790a:	68fb      	ldr	r3, [r7, #12]
 809790c:	68db      	ldr	r3, [r3, #12]
 809790e:	2b00      	cmp	r3, #0
 8097910:	d05c      	beq.n	80979cc <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8097912:	68fb      	ldr	r3, [r7, #12]
 8097914:	68da      	ldr	r2, [r3, #12]
 8097916:	68fb      	ldr	r3, [r7, #12]
 8097918:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 809791a:	693b      	ldr	r3, [r7, #16]
 809791c:	895b      	ldrh	r3, [r3, #10]
 809791e:	025b      	lsls	r3, r3, #9
 8097920:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8097922:	68fb      	ldr	r3, [r7, #12]
 8097924:	689b      	ldr	r3, [r3, #8]
 8097926:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8097928:	68fb      	ldr	r3, [r7, #12]
 809792a:	68db      	ldr	r3, [r3, #12]
 809792c:	657b      	str	r3, [r7, #84]	; 0x54
 809792e:	e016      	b.n	809795e <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8097930:	68fb      	ldr	r3, [r7, #12]
 8097932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8097934:	4618      	mov	r0, r3
 8097936:	f7fe f8ba 	bl	8095aae <get_fat>
 809793a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 809793c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 809793e:	2b01      	cmp	r3, #1
 8097940:	d802      	bhi.n	8097948 <f_open+0x268>
 8097942:	2302      	movs	r3, #2
 8097944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8097948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 809794a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 809794e:	d102      	bne.n	8097956 <f_open+0x276>
 8097950:	2301      	movs	r3, #1
 8097952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8097956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8097958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 809795a:	1ad3      	subs	r3, r2, r3
 809795c:	657b      	str	r3, [r7, #84]	; 0x54
 809795e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8097962:	2b00      	cmp	r3, #0
 8097964:	d103      	bne.n	809796e <f_open+0x28e>
 8097966:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8097968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 809796a:	429a      	cmp	r2, r3
 809796c:	d8e0      	bhi.n	8097930 <f_open+0x250>
				}
				fp->clust = clst;
 809796e:	68fb      	ldr	r3, [r7, #12]
 8097970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8097972:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8097974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8097978:	2b00      	cmp	r3, #0
 809797a:	d127      	bne.n	80979cc <f_open+0x2ec>
 809797c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 809797e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097982:	2b00      	cmp	r3, #0
 8097984:	d022      	beq.n	80979cc <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8097986:	693b      	ldr	r3, [r7, #16]
 8097988:	6db9      	ldr	r1, [r7, #88]	; 0x58
 809798a:	4618      	mov	r0, r3
 809798c:	f7fe f870 	bl	8095a70 <clst2sect>
 8097990:	6478      	str	r0, [r7, #68]	; 0x44
 8097992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8097994:	2b00      	cmp	r3, #0
 8097996:	d103      	bne.n	80979a0 <f_open+0x2c0>
						res = FR_INT_ERR;
 8097998:	2302      	movs	r3, #2
 809799a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 809799e:	e015      	b.n	80979cc <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80979a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80979a2:	0a5a      	lsrs	r2, r3, #9
 80979a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80979a6:	441a      	add	r2, r3
 80979a8:	68fb      	ldr	r3, [r7, #12]
 80979aa:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80979ac:	693b      	ldr	r3, [r7, #16]
 80979ae:	7858      	ldrb	r0, [r3, #1]
 80979b0:	68fb      	ldr	r3, [r7, #12]
 80979b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80979b6:	68fb      	ldr	r3, [r7, #12]
 80979b8:	69da      	ldr	r2, [r3, #28]
 80979ba:	2301      	movs	r3, #1
 80979bc:	f7fd fd42 	bl	8095444 <disk_read>
 80979c0:	4603      	mov	r3, r0
 80979c2:	2b00      	cmp	r3, #0
 80979c4:	d002      	beq.n	80979cc <f_open+0x2ec>
 80979c6:	2301      	movs	r3, #1
 80979c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80979cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80979d0:	2b00      	cmp	r3, #0
 80979d2:	d002      	beq.n	80979da <f_open+0x2fa>
 80979d4:	68fb      	ldr	r3, [r7, #12]
 80979d6:	2200      	movs	r2, #0
 80979d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80979da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80979de:	4618      	mov	r0, r3
 80979e0:	3764      	adds	r7, #100	; 0x64
 80979e2:	46bd      	mov	sp, r7
 80979e4:	bd90      	pop	{r4, r7, pc}

080979e6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80979e6:	b580      	push	{r7, lr}
 80979e8:	b08e      	sub	sp, #56	; 0x38
 80979ea:	af00      	add	r7, sp, #0
 80979ec:	60f8      	str	r0, [r7, #12]
 80979ee:	60b9      	str	r1, [r7, #8]
 80979f0:	607a      	str	r2, [r7, #4]
 80979f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80979f4:	68bb      	ldr	r3, [r7, #8]
 80979f6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80979f8:	683b      	ldr	r3, [r7, #0]
 80979fa:	2200      	movs	r2, #0
 80979fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80979fe:	68fb      	ldr	r3, [r7, #12]
 8097a00:	f107 0214 	add.w	r2, r7, #20
 8097a04:	4611      	mov	r1, r2
 8097a06:	4618      	mov	r0, r3
 8097a08:	f7ff fdf4 	bl	80975f4 <validate>
 8097a0c:	4603      	mov	r3, r0
 8097a0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8097a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8097a16:	2b00      	cmp	r3, #0
 8097a18:	d107      	bne.n	8097a2a <f_read+0x44>
 8097a1a:	68fb      	ldr	r3, [r7, #12]
 8097a1c:	7c5b      	ldrb	r3, [r3, #17]
 8097a1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8097a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8097a26:	2b00      	cmp	r3, #0
 8097a28:	d002      	beq.n	8097a30 <f_read+0x4a>
 8097a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8097a2e:	e109      	b.n	8097c44 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8097a30:	68fb      	ldr	r3, [r7, #12]
 8097a32:	7c1b      	ldrb	r3, [r3, #16]
 8097a34:	f003 0301 	and.w	r3, r3, #1
 8097a38:	2b00      	cmp	r3, #0
 8097a3a:	d101      	bne.n	8097a40 <f_read+0x5a>
 8097a3c:	2307      	movs	r3, #7
 8097a3e:	e101      	b.n	8097c44 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8097a40:	68fb      	ldr	r3, [r7, #12]
 8097a42:	68da      	ldr	r2, [r3, #12]
 8097a44:	68fb      	ldr	r3, [r7, #12]
 8097a46:	695b      	ldr	r3, [r3, #20]
 8097a48:	1ad3      	subs	r3, r2, r3
 8097a4a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8097a4c:	687a      	ldr	r2, [r7, #4]
 8097a4e:	6a3b      	ldr	r3, [r7, #32]
 8097a50:	429a      	cmp	r2, r3
 8097a52:	f240 80f2 	bls.w	8097c3a <f_read+0x254>
 8097a56:	6a3b      	ldr	r3, [r7, #32]
 8097a58:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8097a5a:	e0ee      	b.n	8097c3a <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8097a5c:	68fb      	ldr	r3, [r7, #12]
 8097a5e:	695b      	ldr	r3, [r3, #20]
 8097a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097a64:	2b00      	cmp	r3, #0
 8097a66:	f040 80ba 	bne.w	8097bde <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8097a6a:	68fb      	ldr	r3, [r7, #12]
 8097a6c:	695b      	ldr	r3, [r3, #20]
 8097a6e:	0a5b      	lsrs	r3, r3, #9
 8097a70:	697a      	ldr	r2, [r7, #20]
 8097a72:	8952      	ldrh	r2, [r2, #10]
 8097a74:	3a01      	subs	r2, #1
 8097a76:	4013      	ands	r3, r2
 8097a78:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8097a7a:	69fb      	ldr	r3, [r7, #28]
 8097a7c:	2b00      	cmp	r3, #0
 8097a7e:	d123      	bne.n	8097ac8 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8097a80:	68fb      	ldr	r3, [r7, #12]
 8097a82:	695b      	ldr	r3, [r3, #20]
 8097a84:	2b00      	cmp	r3, #0
 8097a86:	d103      	bne.n	8097a90 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8097a88:	68fb      	ldr	r3, [r7, #12]
 8097a8a:	689b      	ldr	r3, [r3, #8]
 8097a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8097a8e:	e007      	b.n	8097aa0 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8097a90:	68fa      	ldr	r2, [r7, #12]
 8097a92:	68fb      	ldr	r3, [r7, #12]
 8097a94:	699b      	ldr	r3, [r3, #24]
 8097a96:	4619      	mov	r1, r3
 8097a98:	4610      	mov	r0, r2
 8097a9a:	f7fe f808 	bl	8095aae <get_fat>
 8097a9e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8097aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8097aa2:	2b01      	cmp	r3, #1
 8097aa4:	d804      	bhi.n	8097ab0 <f_read+0xca>
 8097aa6:	68fb      	ldr	r3, [r7, #12]
 8097aa8:	2202      	movs	r2, #2
 8097aaa:	745a      	strb	r2, [r3, #17]
 8097aac:	2302      	movs	r3, #2
 8097aae:	e0c9      	b.n	8097c44 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8097ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8097ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8097ab6:	d104      	bne.n	8097ac2 <f_read+0xdc>
 8097ab8:	68fb      	ldr	r3, [r7, #12]
 8097aba:	2201      	movs	r2, #1
 8097abc:	745a      	strb	r2, [r3, #17]
 8097abe:	2301      	movs	r3, #1
 8097ac0:	e0c0      	b.n	8097c44 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 8097ac2:	68fb      	ldr	r3, [r7, #12]
 8097ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8097ac6:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8097ac8:	697a      	ldr	r2, [r7, #20]
 8097aca:	68fb      	ldr	r3, [r7, #12]
 8097acc:	699b      	ldr	r3, [r3, #24]
 8097ace:	4619      	mov	r1, r3
 8097ad0:	4610      	mov	r0, r2
 8097ad2:	f7fd ffcd 	bl	8095a70 <clst2sect>
 8097ad6:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8097ad8:	69bb      	ldr	r3, [r7, #24]
 8097ada:	2b00      	cmp	r3, #0
 8097adc:	d104      	bne.n	8097ae8 <f_read+0x102>
 8097ade:	68fb      	ldr	r3, [r7, #12]
 8097ae0:	2202      	movs	r2, #2
 8097ae2:	745a      	strb	r2, [r3, #17]
 8097ae4:	2302      	movs	r3, #2
 8097ae6:	e0ad      	b.n	8097c44 <f_read+0x25e>
			sect += csect;
 8097ae8:	69ba      	ldr	r2, [r7, #24]
 8097aea:	69fb      	ldr	r3, [r7, #28]
 8097aec:	4413      	add	r3, r2
 8097aee:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8097af0:	687b      	ldr	r3, [r7, #4]
 8097af2:	0a5b      	lsrs	r3, r3, #9
 8097af4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8097af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097af8:	2b00      	cmp	r3, #0
 8097afa:	d039      	beq.n	8097b70 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8097afc:	69fa      	ldr	r2, [r7, #28]
 8097afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097b00:	4413      	add	r3, r2
 8097b02:	697a      	ldr	r2, [r7, #20]
 8097b04:	8952      	ldrh	r2, [r2, #10]
 8097b06:	4293      	cmp	r3, r2
 8097b08:	d905      	bls.n	8097b16 <f_read+0x130>
					cc = fs->csize - csect;
 8097b0a:	697b      	ldr	r3, [r7, #20]
 8097b0c:	895b      	ldrh	r3, [r3, #10]
 8097b0e:	461a      	mov	r2, r3
 8097b10:	69fb      	ldr	r3, [r7, #28]
 8097b12:	1ad3      	subs	r3, r2, r3
 8097b14:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8097b16:	697b      	ldr	r3, [r7, #20]
 8097b18:	7858      	ldrb	r0, [r3, #1]
 8097b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097b1c:	69ba      	ldr	r2, [r7, #24]
 8097b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8097b20:	f7fd fc90 	bl	8095444 <disk_read>
 8097b24:	4603      	mov	r3, r0
 8097b26:	2b00      	cmp	r3, #0
 8097b28:	d004      	beq.n	8097b34 <f_read+0x14e>
 8097b2a:	68fb      	ldr	r3, [r7, #12]
 8097b2c:	2201      	movs	r2, #1
 8097b2e:	745a      	strb	r2, [r3, #17]
 8097b30:	2301      	movs	r3, #1
 8097b32:	e087      	b.n	8097c44 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8097b34:	68fb      	ldr	r3, [r7, #12]
 8097b36:	7c1b      	ldrb	r3, [r3, #16]
 8097b38:	b25b      	sxtb	r3, r3
 8097b3a:	2b00      	cmp	r3, #0
 8097b3c:	da14      	bge.n	8097b68 <f_read+0x182>
 8097b3e:	68fb      	ldr	r3, [r7, #12]
 8097b40:	69da      	ldr	r2, [r3, #28]
 8097b42:	69bb      	ldr	r3, [r7, #24]
 8097b44:	1ad3      	subs	r3, r2, r3
 8097b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8097b48:	429a      	cmp	r2, r3
 8097b4a:	d90d      	bls.n	8097b68 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8097b4c:	68fb      	ldr	r3, [r7, #12]
 8097b4e:	69da      	ldr	r2, [r3, #28]
 8097b50:	69bb      	ldr	r3, [r7, #24]
 8097b52:	1ad3      	subs	r3, r2, r3
 8097b54:	025b      	lsls	r3, r3, #9
 8097b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8097b58:	18d0      	adds	r0, r2, r3
 8097b5a:	68fb      	ldr	r3, [r7, #12]
 8097b5c:	3328      	adds	r3, #40	; 0x28
 8097b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8097b62:	4619      	mov	r1, r3
 8097b64:	f7fd fdc8 	bl	80956f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8097b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097b6a:	025b      	lsls	r3, r3, #9
 8097b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8097b6e:	e050      	b.n	8097c12 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8097b70:	68fb      	ldr	r3, [r7, #12]
 8097b72:	69db      	ldr	r3, [r3, #28]
 8097b74:	69ba      	ldr	r2, [r7, #24]
 8097b76:	429a      	cmp	r2, r3
 8097b78:	d02e      	beq.n	8097bd8 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8097b7a:	68fb      	ldr	r3, [r7, #12]
 8097b7c:	7c1b      	ldrb	r3, [r3, #16]
 8097b7e:	b25b      	sxtb	r3, r3
 8097b80:	2b00      	cmp	r3, #0
 8097b82:	da18      	bge.n	8097bb6 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8097b84:	697b      	ldr	r3, [r7, #20]
 8097b86:	7858      	ldrb	r0, [r3, #1]
 8097b88:	68fb      	ldr	r3, [r7, #12]
 8097b8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8097b8e:	68fb      	ldr	r3, [r7, #12]
 8097b90:	69da      	ldr	r2, [r3, #28]
 8097b92:	2301      	movs	r3, #1
 8097b94:	f7fd fc82 	bl	809549c <disk_write>
 8097b98:	4603      	mov	r3, r0
 8097b9a:	2b00      	cmp	r3, #0
 8097b9c:	d004      	beq.n	8097ba8 <f_read+0x1c2>
 8097b9e:	68fb      	ldr	r3, [r7, #12]
 8097ba0:	2201      	movs	r2, #1
 8097ba2:	745a      	strb	r2, [r3, #17]
 8097ba4:	2301      	movs	r3, #1
 8097ba6:	e04d      	b.n	8097c44 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8097ba8:	68fb      	ldr	r3, [r7, #12]
 8097baa:	7c1b      	ldrb	r3, [r3, #16]
 8097bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8097bb0:	b2da      	uxtb	r2, r3
 8097bb2:	68fb      	ldr	r3, [r7, #12]
 8097bb4:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8097bb6:	697b      	ldr	r3, [r7, #20]
 8097bb8:	7858      	ldrb	r0, [r3, #1]
 8097bba:	68fb      	ldr	r3, [r7, #12]
 8097bbc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8097bc0:	2301      	movs	r3, #1
 8097bc2:	69ba      	ldr	r2, [r7, #24]
 8097bc4:	f7fd fc3e 	bl	8095444 <disk_read>
 8097bc8:	4603      	mov	r3, r0
 8097bca:	2b00      	cmp	r3, #0
 8097bcc:	d004      	beq.n	8097bd8 <f_read+0x1f2>
 8097bce:	68fb      	ldr	r3, [r7, #12]
 8097bd0:	2201      	movs	r2, #1
 8097bd2:	745a      	strb	r2, [r3, #17]
 8097bd4:	2301      	movs	r3, #1
 8097bd6:	e035      	b.n	8097c44 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8097bd8:	68fb      	ldr	r3, [r7, #12]
 8097bda:	69ba      	ldr	r2, [r7, #24]
 8097bdc:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8097bde:	68fb      	ldr	r3, [r7, #12]
 8097be0:	695b      	ldr	r3, [r3, #20]
 8097be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097be6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8097bea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8097bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8097bee:	687b      	ldr	r3, [r7, #4]
 8097bf0:	429a      	cmp	r2, r3
 8097bf2:	d901      	bls.n	8097bf8 <f_read+0x212>
 8097bf4:	687b      	ldr	r3, [r7, #4]
 8097bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8097bf8:	68fb      	ldr	r3, [r7, #12]
 8097bfa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8097bfe:	68fb      	ldr	r3, [r7, #12]
 8097c00:	695b      	ldr	r3, [r3, #20]
 8097c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097c06:	4413      	add	r3, r2
 8097c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8097c0a:	4619      	mov	r1, r3
 8097c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8097c0e:	f7fd fd73 	bl	80956f8 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8097c12:	687a      	ldr	r2, [r7, #4]
 8097c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8097c16:	1ad3      	subs	r3, r2, r3
 8097c18:	607b      	str	r3, [r7, #4]
 8097c1a:	683b      	ldr	r3, [r7, #0]
 8097c1c:	681a      	ldr	r2, [r3, #0]
 8097c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8097c20:	441a      	add	r2, r3
 8097c22:	683b      	ldr	r3, [r7, #0]
 8097c24:	601a      	str	r2, [r3, #0]
 8097c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8097c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8097c2a:	4413      	add	r3, r2
 8097c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8097c2e:	68fb      	ldr	r3, [r7, #12]
 8097c30:	695a      	ldr	r2, [r3, #20]
 8097c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8097c34:	441a      	add	r2, r3
 8097c36:	68fb      	ldr	r3, [r7, #12]
 8097c38:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8097c3a:	687b      	ldr	r3, [r7, #4]
 8097c3c:	2b00      	cmp	r3, #0
 8097c3e:	f47f af0d 	bne.w	8097a5c <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8097c42:	2300      	movs	r3, #0
}
 8097c44:	4618      	mov	r0, r3
 8097c46:	3738      	adds	r7, #56	; 0x38
 8097c48:	46bd      	mov	sp, r7
 8097c4a:	bd80      	pop	{r7, pc}

08097c4c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8097c4c:	b580      	push	{r7, lr}
 8097c4e:	b08c      	sub	sp, #48	; 0x30
 8097c50:	af00      	add	r7, sp, #0
 8097c52:	60f8      	str	r0, [r7, #12]
 8097c54:	60b9      	str	r1, [r7, #8]
 8097c56:	607a      	str	r2, [r7, #4]
 8097c58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8097c5a:	68bb      	ldr	r3, [r7, #8]
 8097c5c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8097c5e:	683b      	ldr	r3, [r7, #0]
 8097c60:	2200      	movs	r2, #0
 8097c62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8097c64:	68fb      	ldr	r3, [r7, #12]
 8097c66:	f107 0210 	add.w	r2, r7, #16
 8097c6a:	4611      	mov	r1, r2
 8097c6c:	4618      	mov	r0, r3
 8097c6e:	f7ff fcc1 	bl	80975f4 <validate>
 8097c72:	4603      	mov	r3, r0
 8097c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8097c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8097c7c:	2b00      	cmp	r3, #0
 8097c7e:	d107      	bne.n	8097c90 <f_write+0x44>
 8097c80:	68fb      	ldr	r3, [r7, #12]
 8097c82:	7c5b      	ldrb	r3, [r3, #17]
 8097c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8097c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8097c8c:	2b00      	cmp	r3, #0
 8097c8e:	d002      	beq.n	8097c96 <f_write+0x4a>
 8097c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8097c94:	e13f      	b.n	8097f16 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8097c96:	68fb      	ldr	r3, [r7, #12]
 8097c98:	7c1b      	ldrb	r3, [r3, #16]
 8097c9a:	f003 0302 	and.w	r3, r3, #2
 8097c9e:	2b00      	cmp	r3, #0
 8097ca0:	d101      	bne.n	8097ca6 <f_write+0x5a>
 8097ca2:	2307      	movs	r3, #7
 8097ca4:	e137      	b.n	8097f16 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8097ca6:	68fb      	ldr	r3, [r7, #12]
 8097ca8:	695a      	ldr	r2, [r3, #20]
 8097caa:	687b      	ldr	r3, [r7, #4]
 8097cac:	441a      	add	r2, r3
 8097cae:	68fb      	ldr	r3, [r7, #12]
 8097cb0:	695b      	ldr	r3, [r3, #20]
 8097cb2:	429a      	cmp	r2, r3
 8097cb4:	f080 8121 	bcs.w	8097efa <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8097cb8:	68fb      	ldr	r3, [r7, #12]
 8097cba:	695b      	ldr	r3, [r3, #20]
 8097cbc:	43db      	mvns	r3, r3
 8097cbe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8097cc0:	e11b      	b.n	8097efa <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8097cc2:	68fb      	ldr	r3, [r7, #12]
 8097cc4:	695b      	ldr	r3, [r3, #20]
 8097cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097cca:	2b00      	cmp	r3, #0
 8097ccc:	f040 80d7 	bne.w	8097e7e <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8097cd0:	68fb      	ldr	r3, [r7, #12]
 8097cd2:	695b      	ldr	r3, [r3, #20]
 8097cd4:	0a5b      	lsrs	r3, r3, #9
 8097cd6:	693a      	ldr	r2, [r7, #16]
 8097cd8:	8952      	ldrh	r2, [r2, #10]
 8097cda:	3a01      	subs	r2, #1
 8097cdc:	4013      	ands	r3, r2
 8097cde:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8097ce0:	69bb      	ldr	r3, [r7, #24]
 8097ce2:	2b00      	cmp	r3, #0
 8097ce4:	d137      	bne.n	8097d56 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8097ce6:	68fb      	ldr	r3, [r7, #12]
 8097ce8:	695b      	ldr	r3, [r3, #20]
 8097cea:	2b00      	cmp	r3, #0
 8097cec:	d10c      	bne.n	8097d08 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8097cee:	68fb      	ldr	r3, [r7, #12]
 8097cf0:	689b      	ldr	r3, [r3, #8]
 8097cf2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8097cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097cf6:	2b00      	cmp	r3, #0
 8097cf8:	d10e      	bne.n	8097d18 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8097cfa:	68fb      	ldr	r3, [r7, #12]
 8097cfc:	2100      	movs	r1, #0
 8097cfe:	4618      	mov	r0, r3
 8097d00:	f7fe f8c6 	bl	8095e90 <create_chain>
 8097d04:	62b8      	str	r0, [r7, #40]	; 0x28
 8097d06:	e007      	b.n	8097d18 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8097d08:	68fa      	ldr	r2, [r7, #12]
 8097d0a:	68fb      	ldr	r3, [r7, #12]
 8097d0c:	699b      	ldr	r3, [r3, #24]
 8097d0e:	4619      	mov	r1, r3
 8097d10:	4610      	mov	r0, r2
 8097d12:	f7fe f8bd 	bl	8095e90 <create_chain>
 8097d16:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8097d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097d1a:	2b00      	cmp	r3, #0
 8097d1c:	f000 80f2 	beq.w	8097f04 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8097d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097d22:	2b01      	cmp	r3, #1
 8097d24:	d104      	bne.n	8097d30 <f_write+0xe4>
 8097d26:	68fb      	ldr	r3, [r7, #12]
 8097d28:	2202      	movs	r2, #2
 8097d2a:	745a      	strb	r2, [r3, #17]
 8097d2c:	2302      	movs	r3, #2
 8097d2e:	e0f2      	b.n	8097f16 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8097d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8097d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8097d36:	d104      	bne.n	8097d42 <f_write+0xf6>
 8097d38:	68fb      	ldr	r3, [r7, #12]
 8097d3a:	2201      	movs	r2, #1
 8097d3c:	745a      	strb	r2, [r3, #17]
 8097d3e:	2301      	movs	r3, #1
 8097d40:	e0e9      	b.n	8097f16 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8097d42:	68fb      	ldr	r3, [r7, #12]
 8097d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8097d46:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8097d48:	68fb      	ldr	r3, [r7, #12]
 8097d4a:	689b      	ldr	r3, [r3, #8]
 8097d4c:	2b00      	cmp	r3, #0
 8097d4e:	d102      	bne.n	8097d56 <f_write+0x10a>
 8097d50:	68fb      	ldr	r3, [r7, #12]
 8097d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8097d54:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8097d56:	68fb      	ldr	r3, [r7, #12]
 8097d58:	7c1b      	ldrb	r3, [r3, #16]
 8097d5a:	b25b      	sxtb	r3, r3
 8097d5c:	2b00      	cmp	r3, #0
 8097d5e:	da18      	bge.n	8097d92 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8097d60:	693b      	ldr	r3, [r7, #16]
 8097d62:	7858      	ldrb	r0, [r3, #1]
 8097d64:	68fb      	ldr	r3, [r7, #12]
 8097d66:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8097d6a:	68fb      	ldr	r3, [r7, #12]
 8097d6c:	69da      	ldr	r2, [r3, #28]
 8097d6e:	2301      	movs	r3, #1
 8097d70:	f7fd fb94 	bl	809549c <disk_write>
 8097d74:	4603      	mov	r3, r0
 8097d76:	2b00      	cmp	r3, #0
 8097d78:	d004      	beq.n	8097d84 <f_write+0x138>
 8097d7a:	68fb      	ldr	r3, [r7, #12]
 8097d7c:	2201      	movs	r2, #1
 8097d7e:	745a      	strb	r2, [r3, #17]
 8097d80:	2301      	movs	r3, #1
 8097d82:	e0c8      	b.n	8097f16 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8097d84:	68fb      	ldr	r3, [r7, #12]
 8097d86:	7c1b      	ldrb	r3, [r3, #16]
 8097d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8097d8c:	b2da      	uxtb	r2, r3
 8097d8e:	68fb      	ldr	r3, [r7, #12]
 8097d90:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8097d92:	693a      	ldr	r2, [r7, #16]
 8097d94:	68fb      	ldr	r3, [r7, #12]
 8097d96:	699b      	ldr	r3, [r3, #24]
 8097d98:	4619      	mov	r1, r3
 8097d9a:	4610      	mov	r0, r2
 8097d9c:	f7fd fe68 	bl	8095a70 <clst2sect>
 8097da0:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8097da2:	697b      	ldr	r3, [r7, #20]
 8097da4:	2b00      	cmp	r3, #0
 8097da6:	d104      	bne.n	8097db2 <f_write+0x166>
 8097da8:	68fb      	ldr	r3, [r7, #12]
 8097daa:	2202      	movs	r2, #2
 8097dac:	745a      	strb	r2, [r3, #17]
 8097dae:	2302      	movs	r3, #2
 8097db0:	e0b1      	b.n	8097f16 <f_write+0x2ca>
			sect += csect;
 8097db2:	697a      	ldr	r2, [r7, #20]
 8097db4:	69bb      	ldr	r3, [r7, #24]
 8097db6:	4413      	add	r3, r2
 8097db8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8097dba:	687b      	ldr	r3, [r7, #4]
 8097dbc:	0a5b      	lsrs	r3, r3, #9
 8097dbe:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8097dc0:	6a3b      	ldr	r3, [r7, #32]
 8097dc2:	2b00      	cmp	r3, #0
 8097dc4:	d03c      	beq.n	8097e40 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8097dc6:	69ba      	ldr	r2, [r7, #24]
 8097dc8:	6a3b      	ldr	r3, [r7, #32]
 8097dca:	4413      	add	r3, r2
 8097dcc:	693a      	ldr	r2, [r7, #16]
 8097dce:	8952      	ldrh	r2, [r2, #10]
 8097dd0:	4293      	cmp	r3, r2
 8097dd2:	d905      	bls.n	8097de0 <f_write+0x194>
					cc = fs->csize - csect;
 8097dd4:	693b      	ldr	r3, [r7, #16]
 8097dd6:	895b      	ldrh	r3, [r3, #10]
 8097dd8:	461a      	mov	r2, r3
 8097dda:	69bb      	ldr	r3, [r7, #24]
 8097ddc:	1ad3      	subs	r3, r2, r3
 8097dde:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8097de0:	693b      	ldr	r3, [r7, #16]
 8097de2:	7858      	ldrb	r0, [r3, #1]
 8097de4:	6a3b      	ldr	r3, [r7, #32]
 8097de6:	697a      	ldr	r2, [r7, #20]
 8097de8:	69f9      	ldr	r1, [r7, #28]
 8097dea:	f7fd fb57 	bl	809549c <disk_write>
 8097dee:	4603      	mov	r3, r0
 8097df0:	2b00      	cmp	r3, #0
 8097df2:	d004      	beq.n	8097dfe <f_write+0x1b2>
 8097df4:	68fb      	ldr	r3, [r7, #12]
 8097df6:	2201      	movs	r2, #1
 8097df8:	745a      	strb	r2, [r3, #17]
 8097dfa:	2301      	movs	r3, #1
 8097dfc:	e08b      	b.n	8097f16 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8097dfe:	68fb      	ldr	r3, [r7, #12]
 8097e00:	69da      	ldr	r2, [r3, #28]
 8097e02:	697b      	ldr	r3, [r7, #20]
 8097e04:	1ad3      	subs	r3, r2, r3
 8097e06:	6a3a      	ldr	r2, [r7, #32]
 8097e08:	429a      	cmp	r2, r3
 8097e0a:	d915      	bls.n	8097e38 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8097e0c:	68fb      	ldr	r3, [r7, #12]
 8097e0e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8097e12:	68fb      	ldr	r3, [r7, #12]
 8097e14:	69da      	ldr	r2, [r3, #28]
 8097e16:	697b      	ldr	r3, [r7, #20]
 8097e18:	1ad3      	subs	r3, r2, r3
 8097e1a:	025b      	lsls	r3, r3, #9
 8097e1c:	69fa      	ldr	r2, [r7, #28]
 8097e1e:	4413      	add	r3, r2
 8097e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8097e24:	4619      	mov	r1, r3
 8097e26:	f7fd fc67 	bl	80956f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8097e2a:	68fb      	ldr	r3, [r7, #12]
 8097e2c:	7c1b      	ldrb	r3, [r3, #16]
 8097e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8097e32:	b2da      	uxtb	r2, r3
 8097e34:	68fb      	ldr	r3, [r7, #12]
 8097e36:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8097e38:	6a3b      	ldr	r3, [r7, #32]
 8097e3a:	025b      	lsls	r3, r3, #9
 8097e3c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8097e3e:	e03f      	b.n	8097ec0 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8097e40:	68fb      	ldr	r3, [r7, #12]
 8097e42:	69db      	ldr	r3, [r3, #28]
 8097e44:	697a      	ldr	r2, [r7, #20]
 8097e46:	429a      	cmp	r2, r3
 8097e48:	d016      	beq.n	8097e78 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8097e4a:	68fb      	ldr	r3, [r7, #12]
 8097e4c:	695a      	ldr	r2, [r3, #20]
 8097e4e:	68fb      	ldr	r3, [r7, #12]
 8097e50:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8097e52:	429a      	cmp	r2, r3
 8097e54:	d210      	bcs.n	8097e78 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8097e56:	693b      	ldr	r3, [r7, #16]
 8097e58:	7858      	ldrb	r0, [r3, #1]
 8097e5a:	68fb      	ldr	r3, [r7, #12]
 8097e5c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8097e60:	2301      	movs	r3, #1
 8097e62:	697a      	ldr	r2, [r7, #20]
 8097e64:	f7fd faee 	bl	8095444 <disk_read>
 8097e68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8097e6a:	2b00      	cmp	r3, #0
 8097e6c:	d004      	beq.n	8097e78 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8097e6e:	68fb      	ldr	r3, [r7, #12]
 8097e70:	2201      	movs	r2, #1
 8097e72:	745a      	strb	r2, [r3, #17]
 8097e74:	2301      	movs	r3, #1
 8097e76:	e04e      	b.n	8097f16 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8097e78:	68fb      	ldr	r3, [r7, #12]
 8097e7a:	697a      	ldr	r2, [r7, #20]
 8097e7c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8097e7e:	68fb      	ldr	r3, [r7, #12]
 8097e80:	695b      	ldr	r3, [r3, #20]
 8097e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097e86:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8097e8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8097e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8097e8e:	687b      	ldr	r3, [r7, #4]
 8097e90:	429a      	cmp	r2, r3
 8097e92:	d901      	bls.n	8097e98 <f_write+0x24c>
 8097e94:	687b      	ldr	r3, [r7, #4]
 8097e96:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8097e98:	68fb      	ldr	r3, [r7, #12]
 8097e9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8097e9e:	68fb      	ldr	r3, [r7, #12]
 8097ea0:	695b      	ldr	r3, [r3, #20]
 8097ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8097ea6:	4413      	add	r3, r2
 8097ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8097eaa:	69f9      	ldr	r1, [r7, #28]
 8097eac:	4618      	mov	r0, r3
 8097eae:	f7fd fc23 	bl	80956f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8097eb2:	68fb      	ldr	r3, [r7, #12]
 8097eb4:	7c1b      	ldrb	r3, [r3, #16]
 8097eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8097eba:	b2da      	uxtb	r2, r3
 8097ebc:	68fb      	ldr	r3, [r7, #12]
 8097ebe:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8097ec0:	687a      	ldr	r2, [r7, #4]
 8097ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097ec4:	1ad3      	subs	r3, r2, r3
 8097ec6:	607b      	str	r3, [r7, #4]
 8097ec8:	683b      	ldr	r3, [r7, #0]
 8097eca:	681a      	ldr	r2, [r3, #0]
 8097ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097ece:	441a      	add	r2, r3
 8097ed0:	683b      	ldr	r3, [r7, #0]
 8097ed2:	601a      	str	r2, [r3, #0]
 8097ed4:	69fa      	ldr	r2, [r7, #28]
 8097ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097ed8:	4413      	add	r3, r2
 8097eda:	61fb      	str	r3, [r7, #28]
 8097edc:	68fb      	ldr	r3, [r7, #12]
 8097ede:	695a      	ldr	r2, [r3, #20]
 8097ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8097ee2:	441a      	add	r2, r3
 8097ee4:	68fb      	ldr	r3, [r7, #12]
 8097ee6:	615a      	str	r2, [r3, #20]
 8097ee8:	68fb      	ldr	r3, [r7, #12]
 8097eea:	68da      	ldr	r2, [r3, #12]
 8097eec:	68fb      	ldr	r3, [r7, #12]
 8097eee:	695b      	ldr	r3, [r3, #20]
 8097ef0:	429a      	cmp	r2, r3
 8097ef2:	bf38      	it	cc
 8097ef4:	461a      	movcc	r2, r3
 8097ef6:	68fb      	ldr	r3, [r7, #12]
 8097ef8:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8097efa:	687b      	ldr	r3, [r7, #4]
 8097efc:	2b00      	cmp	r3, #0
 8097efe:	f47f aee0 	bne.w	8097cc2 <f_write+0x76>
 8097f02:	e000      	b.n	8097f06 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8097f04:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8097f06:	68fb      	ldr	r3, [r7, #12]
 8097f08:	7c1b      	ldrb	r3, [r3, #16]
 8097f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8097f0e:	b2da      	uxtb	r2, r3
 8097f10:	68fb      	ldr	r3, [r7, #12]
 8097f12:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8097f14:	2300      	movs	r3, #0
}
 8097f16:	4618      	mov	r0, r3
 8097f18:	3730      	adds	r7, #48	; 0x30
 8097f1a:	46bd      	mov	sp, r7
 8097f1c:	bd80      	pop	{r7, pc}

08097f1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8097f1e:	b580      	push	{r7, lr}
 8097f20:	b086      	sub	sp, #24
 8097f22:	af00      	add	r7, sp, #0
 8097f24:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8097f26:	687b      	ldr	r3, [r7, #4]
 8097f28:	f107 0208 	add.w	r2, r7, #8
 8097f2c:	4611      	mov	r1, r2
 8097f2e:	4618      	mov	r0, r3
 8097f30:	f7ff fb60 	bl	80975f4 <validate>
 8097f34:	4603      	mov	r3, r0
 8097f36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8097f38:	7dfb      	ldrb	r3, [r7, #23]
 8097f3a:	2b00      	cmp	r3, #0
 8097f3c:	d168      	bne.n	8098010 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8097f3e:	687b      	ldr	r3, [r7, #4]
 8097f40:	7c1b      	ldrb	r3, [r3, #16]
 8097f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8097f46:	2b00      	cmp	r3, #0
 8097f48:	d062      	beq.n	8098010 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8097f4a:	687b      	ldr	r3, [r7, #4]
 8097f4c:	7c1b      	ldrb	r3, [r3, #16]
 8097f4e:	b25b      	sxtb	r3, r3
 8097f50:	2b00      	cmp	r3, #0
 8097f52:	da15      	bge.n	8097f80 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8097f54:	68bb      	ldr	r3, [r7, #8]
 8097f56:	7858      	ldrb	r0, [r3, #1]
 8097f58:	687b      	ldr	r3, [r7, #4]
 8097f5a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8097f5e:	687b      	ldr	r3, [r7, #4]
 8097f60:	69da      	ldr	r2, [r3, #28]
 8097f62:	2301      	movs	r3, #1
 8097f64:	f7fd fa9a 	bl	809549c <disk_write>
 8097f68:	4603      	mov	r3, r0
 8097f6a:	2b00      	cmp	r3, #0
 8097f6c:	d001      	beq.n	8097f72 <f_sync+0x54>
 8097f6e:	2301      	movs	r3, #1
 8097f70:	e04f      	b.n	8098012 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8097f72:	687b      	ldr	r3, [r7, #4]
 8097f74:	7c1b      	ldrb	r3, [r3, #16]
 8097f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8097f7a:	b2da      	uxtb	r2, r3
 8097f7c:	687b      	ldr	r3, [r7, #4]
 8097f7e:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8097f80:	f7fd fa06 	bl	8095390 <get_fattime>
 8097f84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8097f86:	68ba      	ldr	r2, [r7, #8]
 8097f88:	687b      	ldr	r3, [r7, #4]
 8097f8a:	6a1b      	ldr	r3, [r3, #32]
 8097f8c:	4619      	mov	r1, r3
 8097f8e:	4610      	mov	r0, r2
 8097f90:	f7fd fcd2 	bl	8095938 <move_window>
 8097f94:	4603      	mov	r3, r0
 8097f96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8097f98:	7dfb      	ldrb	r3, [r7, #23]
 8097f9a:	2b00      	cmp	r3, #0
 8097f9c:	d138      	bne.n	8098010 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8097f9e:	687b      	ldr	r3, [r7, #4]
 8097fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8097fa2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8097fa4:	68fb      	ldr	r3, [r7, #12]
 8097fa6:	330b      	adds	r3, #11
 8097fa8:	781a      	ldrb	r2, [r3, #0]
 8097faa:	68fb      	ldr	r3, [r7, #12]
 8097fac:	330b      	adds	r3, #11
 8097fae:	f042 0220 	orr.w	r2, r2, #32
 8097fb2:	b2d2      	uxtb	r2, r2
 8097fb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8097fb6:	687b      	ldr	r3, [r7, #4]
 8097fb8:	6818      	ldr	r0, [r3, #0]
 8097fba:	687b      	ldr	r3, [r7, #4]
 8097fbc:	689b      	ldr	r3, [r3, #8]
 8097fbe:	461a      	mov	r2, r3
 8097fc0:	68f9      	ldr	r1, [r7, #12]
 8097fc2:	f7fe f9f2 	bl	80963aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8097fc6:	68fb      	ldr	r3, [r7, #12]
 8097fc8:	f103 021c 	add.w	r2, r3, #28
 8097fcc:	687b      	ldr	r3, [r7, #4]
 8097fce:	68db      	ldr	r3, [r3, #12]
 8097fd0:	4619      	mov	r1, r3
 8097fd2:	4610      	mov	r0, r2
 8097fd4:	f7fd fb64 	bl	80956a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8097fd8:	68fb      	ldr	r3, [r7, #12]
 8097fda:	3316      	adds	r3, #22
 8097fdc:	6939      	ldr	r1, [r7, #16]
 8097fde:	4618      	mov	r0, r3
 8097fe0:	f7fd fb5e 	bl	80956a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8097fe4:	68fb      	ldr	r3, [r7, #12]
 8097fe6:	3312      	adds	r3, #18
 8097fe8:	2100      	movs	r1, #0
 8097fea:	4618      	mov	r0, r3
 8097fec:	f7fd fb3d 	bl	809566a <st_word>
					fs->wflag = 1;
 8097ff0:	68bb      	ldr	r3, [r7, #8]
 8097ff2:	2201      	movs	r2, #1
 8097ff4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8097ff6:	68bb      	ldr	r3, [r7, #8]
 8097ff8:	4618      	mov	r0, r3
 8097ffa:	f7fd fccb 	bl	8095994 <sync_fs>
 8097ffe:	4603      	mov	r3, r0
 8098000:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8098002:	687b      	ldr	r3, [r7, #4]
 8098004:	7c1b      	ldrb	r3, [r3, #16]
 8098006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 809800a:	b2da      	uxtb	r2, r3
 809800c:	687b      	ldr	r3, [r7, #4]
 809800e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8098010:	7dfb      	ldrb	r3, [r7, #23]
}
 8098012:	4618      	mov	r0, r3
 8098014:	3718      	adds	r7, #24
 8098016:	46bd      	mov	sp, r7
 8098018:	bd80      	pop	{r7, pc}

0809801a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 809801a:	b580      	push	{r7, lr}
 809801c:	b084      	sub	sp, #16
 809801e:	af00      	add	r7, sp, #0
 8098020:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8098022:	6878      	ldr	r0, [r7, #4]
 8098024:	f7ff ff7b 	bl	8097f1e <f_sync>
 8098028:	4603      	mov	r3, r0
 809802a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 809802c:	7bfb      	ldrb	r3, [r7, #15]
 809802e:	2b00      	cmp	r3, #0
 8098030:	d10e      	bne.n	8098050 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8098032:	687b      	ldr	r3, [r7, #4]
 8098034:	f107 0208 	add.w	r2, r7, #8
 8098038:	4611      	mov	r1, r2
 809803a:	4618      	mov	r0, r3
 809803c:	f7ff fada 	bl	80975f4 <validate>
 8098040:	4603      	mov	r3, r0
 8098042:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8098044:	7bfb      	ldrb	r3, [r7, #15]
 8098046:	2b00      	cmp	r3, #0
 8098048:	d102      	bne.n	8098050 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 809804a:	687b      	ldr	r3, [r7, #4]
 809804c:	2200      	movs	r2, #0
 809804e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8098050:	7bfb      	ldrb	r3, [r7, #15]
}
 8098052:	4618      	mov	r0, r3
 8098054:	3710      	adds	r7, #16
 8098056:	46bd      	mov	sp, r7
 8098058:	bd80      	pop	{r7, pc}
	...

0809805c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 809805c:	b480      	push	{r7}
 809805e:	b085      	sub	sp, #20
 8098060:	af00      	add	r7, sp, #0
 8098062:	6078      	str	r0, [r7, #4]
 8098064:	460b      	mov	r3, r1
 8098066:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8098068:	2300      	movs	r3, #0
 809806a:	81fb      	strh	r3, [r7, #14]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
 809806c:	4b17      	ldr	r3, [pc, #92]	; (80980cc <ff_uni2oem+0x70>)
 809806e:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8098070:	687b      	ldr	r3, [r7, #4]
 8098072:	2b7f      	cmp	r3, #127	; 0x7f
 8098074:	d802      	bhi.n	809807c <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8098076:	687b      	ldr	r3, [r7, #4]
 8098078:	81fb      	strh	r3, [r7, #14]
 809807a:	e01f      	b.n	80980bc <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 809807c:	687b      	ldr	r3, [r7, #4]
 809807e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8098082:	d21b      	bcs.n	80980bc <ff_uni2oem+0x60>
 8098084:	887b      	ldrh	r3, [r7, #2]
 8098086:	f240 12b5 	movw	r2, #437	; 0x1b5
 809808a:	4293      	cmp	r3, r2
 809808c:	d116      	bne.n	80980bc <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 809808e:	2300      	movs	r3, #0
 8098090:	81fb      	strh	r3, [r7, #14]
 8098092:	e002      	b.n	809809a <ff_uni2oem+0x3e>
 8098094:	89fb      	ldrh	r3, [r7, #14]
 8098096:	3301      	adds	r3, #1
 8098098:	81fb      	strh	r3, [r7, #14]
 809809a:	89fb      	ldrh	r3, [r7, #14]
 809809c:	2b7f      	cmp	r3, #127	; 0x7f
 809809e:	d808      	bhi.n	80980b2 <ff_uni2oem+0x56>
 80980a0:	89fb      	ldrh	r3, [r7, #14]
 80980a2:	005b      	lsls	r3, r3, #1
 80980a4:	68ba      	ldr	r2, [r7, #8]
 80980a6:	4413      	add	r3, r2
 80980a8:	881b      	ldrh	r3, [r3, #0]
 80980aa:	461a      	mov	r2, r3
 80980ac:	687b      	ldr	r3, [r7, #4]
 80980ae:	4293      	cmp	r3, r2
 80980b0:	d1f0      	bne.n	8098094 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 80980b2:	89fb      	ldrh	r3, [r7, #14]
 80980b4:	3380      	adds	r3, #128	; 0x80
 80980b6:	b29b      	uxth	r3, r3
 80980b8:	b2db      	uxtb	r3, r3
 80980ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80980bc:	89fb      	ldrh	r3, [r7, #14]
}
 80980be:	4618      	mov	r0, r3
 80980c0:	3714      	adds	r7, #20
 80980c2:	46bd      	mov	sp, r7
 80980c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80980c8:	4770      	bx	lr
 80980ca:	bf00      	nop
 80980cc:	0809f2f0 	.word	0x0809f2f0

080980d0 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80980d0:	b480      	push	{r7}
 80980d2:	b085      	sub	sp, #20
 80980d4:	af00      	add	r7, sp, #0
 80980d6:	4603      	mov	r3, r0
 80980d8:	460a      	mov	r2, r1
 80980da:	80fb      	strh	r3, [r7, #6]
 80980dc:	4613      	mov	r3, r2
 80980de:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 80980e0:	2300      	movs	r3, #0
 80980e2:	81fb      	strh	r3, [r7, #14]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
 80980e4:	4b0f      	ldr	r3, [pc, #60]	; (8098124 <ff_oem2uni+0x54>)
 80980e6:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 80980e8:	88fb      	ldrh	r3, [r7, #6]
 80980ea:	2b7f      	cmp	r3, #127	; 0x7f
 80980ec:	d802      	bhi.n	80980f4 <ff_oem2uni+0x24>
		c = oem;
 80980ee:	88fb      	ldrh	r3, [r7, #6]
 80980f0:	81fb      	strh	r3, [r7, #14]
 80980f2:	e00f      	b.n	8098114 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 80980f4:	88bb      	ldrh	r3, [r7, #4]
 80980f6:	f240 12b5 	movw	r2, #437	; 0x1b5
 80980fa:	4293      	cmp	r3, r2
 80980fc:	d10a      	bne.n	8098114 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 80980fe:	88fb      	ldrh	r3, [r7, #6]
 8098100:	2bff      	cmp	r3, #255	; 0xff
 8098102:	d807      	bhi.n	8098114 <ff_oem2uni+0x44>
 8098104:	88fa      	ldrh	r2, [r7, #6]
 8098106:	4b08      	ldr	r3, [pc, #32]	; (8098128 <ff_oem2uni+0x58>)
 8098108:	4413      	add	r3, r2
 809810a:	005b      	lsls	r3, r3, #1
 809810c:	68ba      	ldr	r2, [r7, #8]
 809810e:	4413      	add	r3, r2
 8098110:	881b      	ldrh	r3, [r3, #0]
 8098112:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8098114:	89fb      	ldrh	r3, [r7, #14]
}
 8098116:	4618      	mov	r0, r3
 8098118:	3714      	adds	r7, #20
 809811a:	46bd      	mov	sp, r7
 809811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8098120:	4770      	bx	lr
 8098122:	bf00      	nop
 8098124:	0809f2f0 	.word	0x0809f2f0
 8098128:	7fffff80 	.word	0x7fffff80

0809812c <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 809812c:	b480      	push	{r7}
 809812e:	b087      	sub	sp, #28
 8098130:	af00      	add	r7, sp, #0
 8098132:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8098134:	687b      	ldr	r3, [r7, #4]
 8098136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 809813a:	d27d      	bcs.n	8098238 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 809813c:	687b      	ldr	r3, [r7, #4]
 809813e:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8098140:	8a7b      	ldrh	r3, [r7, #18]
 8098142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8098146:	d201      	bcs.n	809814c <ff_wtoupper+0x20>
 8098148:	4b3f      	ldr	r3, [pc, #252]	; (8098248 <ff_wtoupper+0x11c>)
 809814a:	e000      	b.n	809814e <ff_wtoupper+0x22>
 809814c:	4b3f      	ldr	r3, [pc, #252]	; (809824c <ff_wtoupper+0x120>)
 809814e:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8098150:	697b      	ldr	r3, [r7, #20]
 8098152:	1c9a      	adds	r2, r3, #2
 8098154:	617a      	str	r2, [r7, #20]
 8098156:	881b      	ldrh	r3, [r3, #0]
 8098158:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 809815a:	8a3b      	ldrh	r3, [r7, #16]
 809815c:	2b00      	cmp	r3, #0
 809815e:	d069      	beq.n	8098234 <ff_wtoupper+0x108>
 8098160:	8a7a      	ldrh	r2, [r7, #18]
 8098162:	8a3b      	ldrh	r3, [r7, #16]
 8098164:	429a      	cmp	r2, r3
 8098166:	d365      	bcc.n	8098234 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8098168:	697b      	ldr	r3, [r7, #20]
 809816a:	1c9a      	adds	r2, r3, #2
 809816c:	617a      	str	r2, [r7, #20]
 809816e:	881b      	ldrh	r3, [r3, #0]
 8098170:	81fb      	strh	r3, [r7, #14]
 8098172:	89fb      	ldrh	r3, [r7, #14]
 8098174:	0a1b      	lsrs	r3, r3, #8
 8098176:	81bb      	strh	r3, [r7, #12]
 8098178:	89fb      	ldrh	r3, [r7, #14]
 809817a:	b2db      	uxtb	r3, r3
 809817c:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 809817e:	8a7a      	ldrh	r2, [r7, #18]
 8098180:	8a39      	ldrh	r1, [r7, #16]
 8098182:	89fb      	ldrh	r3, [r7, #14]
 8098184:	440b      	add	r3, r1
 8098186:	429a      	cmp	r2, r3
 8098188:	da4a      	bge.n	8098220 <ff_wtoupper+0xf4>
				switch (cmd) {
 809818a:	89bb      	ldrh	r3, [r7, #12]
 809818c:	2b08      	cmp	r3, #8
 809818e:	d850      	bhi.n	8098232 <ff_wtoupper+0x106>
 8098190:	a201      	add	r2, pc, #4	; (adr r2, 8098198 <ff_wtoupper+0x6c>)
 8098192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8098196:	bf00      	nop
 8098198:	080981bd 	.word	0x080981bd
 809819c:	080981cf 	.word	0x080981cf
 80981a0:	080981e5 	.word	0x080981e5
 80981a4:	080981ed 	.word	0x080981ed
 80981a8:	080981f5 	.word	0x080981f5
 80981ac:	080981fd 	.word	0x080981fd
 80981b0:	08098205 	.word	0x08098205
 80981b4:	0809820d 	.word	0x0809820d
 80981b8:	08098215 	.word	0x08098215
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80981bc:	8a7a      	ldrh	r2, [r7, #18]
 80981be:	8a3b      	ldrh	r3, [r7, #16]
 80981c0:	1ad3      	subs	r3, r2, r3
 80981c2:	005b      	lsls	r3, r3, #1
 80981c4:	697a      	ldr	r2, [r7, #20]
 80981c6:	4413      	add	r3, r2
 80981c8:	881b      	ldrh	r3, [r3, #0]
 80981ca:	827b      	strh	r3, [r7, #18]
 80981cc:	e027      	b.n	809821e <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80981ce:	8a7a      	ldrh	r2, [r7, #18]
 80981d0:	8a3b      	ldrh	r3, [r7, #16]
 80981d2:	1ad3      	subs	r3, r2, r3
 80981d4:	b29b      	uxth	r3, r3
 80981d6:	f003 0301 	and.w	r3, r3, #1
 80981da:	b29b      	uxth	r3, r3
 80981dc:	8a7a      	ldrh	r2, [r7, #18]
 80981de:	1ad3      	subs	r3, r2, r3
 80981e0:	827b      	strh	r3, [r7, #18]
 80981e2:	e01c      	b.n	809821e <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80981e4:	8a7b      	ldrh	r3, [r7, #18]
 80981e6:	3b10      	subs	r3, #16
 80981e8:	827b      	strh	r3, [r7, #18]
 80981ea:	e018      	b.n	809821e <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80981ec:	8a7b      	ldrh	r3, [r7, #18]
 80981ee:	3b20      	subs	r3, #32
 80981f0:	827b      	strh	r3, [r7, #18]
 80981f2:	e014      	b.n	809821e <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80981f4:	8a7b      	ldrh	r3, [r7, #18]
 80981f6:	3b30      	subs	r3, #48	; 0x30
 80981f8:	827b      	strh	r3, [r7, #18]
 80981fa:	e010      	b.n	809821e <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80981fc:	8a7b      	ldrh	r3, [r7, #18]
 80981fe:	3b1a      	subs	r3, #26
 8098200:	827b      	strh	r3, [r7, #18]
 8098202:	e00c      	b.n	809821e <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8098204:	8a7b      	ldrh	r3, [r7, #18]
 8098206:	3308      	adds	r3, #8
 8098208:	827b      	strh	r3, [r7, #18]
 809820a:	e008      	b.n	809821e <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 809820c:	8a7b      	ldrh	r3, [r7, #18]
 809820e:	3b50      	subs	r3, #80	; 0x50
 8098210:	827b      	strh	r3, [r7, #18]
 8098212:	e004      	b.n	809821e <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8098214:	8a7b      	ldrh	r3, [r7, #18]
 8098216:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 809821a:	827b      	strh	r3, [r7, #18]
 809821c:	bf00      	nop
				}
				break;
 809821e:	e008      	b.n	8098232 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8098220:	89bb      	ldrh	r3, [r7, #12]
 8098222:	2b00      	cmp	r3, #0
 8098224:	d194      	bne.n	8098150 <ff_wtoupper+0x24>
 8098226:	89fb      	ldrh	r3, [r7, #14]
 8098228:	005b      	lsls	r3, r3, #1
 809822a:	697a      	ldr	r2, [r7, #20]
 809822c:	4413      	add	r3, r2
 809822e:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8098230:	e78e      	b.n	8098150 <ff_wtoupper+0x24>
				break;
 8098232:	bf00      	nop
		}
		uni = uc;
 8098234:	8a7b      	ldrh	r3, [r7, #18]
 8098236:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8098238:	687b      	ldr	r3, [r7, #4]
}
 809823a:	4618      	mov	r0, r3
 809823c:	371c      	adds	r7, #28
 809823e:	46bd      	mov	sp, r7
 8098240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8098244:	4770      	bx	lr
 8098246:	bf00      	nop
 8098248:	0809f3f0 	.word	0x0809f3f0
 809824c:	0809f5e4 	.word	0x0809f5e4

08098250 <AudioLoopback_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioLoopback_demo (void)
{
 8098250:	b580      	push	{r7, lr}
 8098252:	b082      	sub	sp, #8
 8098254:	af02      	add	r7, sp, #8
  AudioLoopback_SetHint();
 8098256:	f000 f8cd 	bl	80983f4 <AudioLoopback_SetHint>

  /* Initialize Audio Recorder */
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 809825a:	2302      	movs	r3, #2
 809825c:	9300      	str	r3, [sp, #0]
 809825e:	2310      	movs	r3, #16
 8098260:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8098264:	2102      	movs	r1, #2
 8098266:	f44f 7000 	mov.w	r0, #512	; 0x200
 809826a:	f7ec fefd 	bl	8085068 <BSP_AUDIO_IN_OUT_Init>
 809826e:	4603      	mov	r3, r0
 8098270:	2b00      	cmp	r3, #0
 8098272:	d113      	bne.n	809829c <AudioLoopback_demo+0x4c>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098278:	f7ed fbd0 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 809827c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8098280:	f7ed fba0 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8098284:	f7ed fb06 	bl	8085894 <BSP_LCD_GetYSize>
 8098288:	4603      	mov	r3, r0
 809828a:	b29b      	uxth	r3, r3
 809828c:	3b5f      	subs	r3, #95	; 0x5f
 809828e:	b299      	uxth	r1, r3
 8098290:	2301      	movs	r3, #1
 8098292:	4a50      	ldr	r2, [pc, #320]	; (80983d4 <AudioLoopback_demo+0x184>)
 8098294:	2000      	movs	r0, #0
 8098296:	f7ed fc89 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809829a:	e01c      	b.n	80982d6 <AudioLoopback_demo+0x86>
  }
  else
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809829c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80982a0:	f7ed fbbc 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80982a4:	484c      	ldr	r0, [pc, #304]	; (80983d8 <AudioLoopback_demo+0x188>)
 80982a6:	f7ed fb8d 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 80982aa:	f7ed faf3 	bl	8085894 <BSP_LCD_GetYSize>
 80982ae:	4603      	mov	r3, r0
 80982b0:	b29b      	uxth	r3, r3
 80982b2:	3b5f      	subs	r3, #95	; 0x5f
 80982b4:	b299      	uxth	r1, r3
 80982b6:	2301      	movs	r3, #1
 80982b8:	4a48      	ldr	r2, [pc, #288]	; (80983dc <AudioLoopback_demo+0x18c>)
 80982ba:	2000      	movs	r0, #0
 80982bc:	f7ed fc76 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80982c0:	f7ed fae8 	bl	8085894 <BSP_LCD_GetYSize>
 80982c4:	4603      	mov	r3, r0
 80982c6:	b29b      	uxth	r3, r3
 80982c8:	3b50      	subs	r3, #80	; 0x50
 80982ca:	b299      	uxth	r1, r3
 80982cc:	2301      	movs	r3, #1
 80982ce:	4a44      	ldr	r2, [pc, #272]	; (80983e0 <AudioLoopback_demo+0x190>)
 80982d0:	2000      	movs	r0, #0
 80982d2:	f7ed fc6b 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  /* Display the state on the screen */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80982d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80982da:	f7ed fb9f 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80982de:	4841      	ldr	r0, [pc, #260]	; (80983e4 <AudioLoopback_demo+0x194>)
 80982e0:	f7ed fb70 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Microphones sound streamed to headphones", CENTER_MODE);
 80982e4:	f7ed fad6 	bl	8085894 <BSP_LCD_GetYSize>
 80982e8:	4603      	mov	r3, r0
 80982ea:	b29b      	uxth	r3, r3
 80982ec:	3b50      	subs	r3, #80	; 0x50
 80982ee:	b299      	uxth	r1, r3
 80982f0:	2301      	movs	r3, #1
 80982f2:	4a3d      	ldr	r2, [pc, #244]	; (80983e8 <AudioLoopback_demo+0x198>)
 80982f4:	2000      	movs	r0, #0
 80982f6:	f7ed fc59 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Initialize SDRAM buffers */
  memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 80982fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80982fe:	2100      	movs	r1, #0
 8098300:	483a      	ldr	r0, [pc, #232]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098302:	f003 fd8a 	bl	809be1a <memset>
  memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 8098306:	4b39      	ldr	r3, [pc, #228]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 809830c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8098310:	2100      	movs	r1, #0
 8098312:	4618      	mov	r0, r3
 8098314:	f003 fd81 	bl	809be1a <memset>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8098318:	4b35      	ldr	r3, [pc, #212]	; (80983f0 <AudioLoopback_demo+0x1a0>)
 809831a:	2200      	movs	r2, #0
 809831c:	601a      	str	r2, [r3, #0]

  /* Start Recording */
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 809831e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8098322:	4832      	ldr	r0, [pc, #200]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098324:	f7ec ff1a 	bl	808515c <BSP_AUDIO_IN_Record>

  /* Start Playback */
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8098328:	2005      	movs	r0, #5
 809832a:	f7ec fbe5 	bl	8084af8 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 809832e:	4b2f      	ldr	r3, [pc, #188]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8098334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8098338:	4618      	mov	r0, r3
 809833a:	f7ec fb27 	bl	808498c <BSP_AUDIO_OUT_Play>

  while (1)
  {
    /* Wait end of half block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 809833e:	e00b      	b.n	8098358 <AudioLoopback_demo+0x108>
    {
      if (CheckForUserInput() > 0)
 8098340:	f002 fc9c 	bl	809ac7c <CheckForUserInput>
 8098344:	4603      	mov	r3, r0
 8098346:	2b00      	cmp	r3, #0
 8098348:	d006      	beq.n	8098358 <AudioLoopback_demo+0x108>
      {
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 809834a:	2002      	movs	r0, #2
 809834c:	f7ec fb74 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8098350:	2002      	movs	r0, #2
 8098352:	f7ec fb71 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        return;
 8098356:	e03a      	b.n	80983ce <AudioLoopback_demo+0x17e>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8098358:	4b25      	ldr	r3, [pc, #148]	; (80983f0 <AudioLoopback_demo+0x1a0>)
 809835a:	681b      	ldr	r3, [r3, #0]
 809835c:	2b01      	cmp	r3, #1
 809835e:	d1ef      	bne.n	8098340 <AudioLoopback_demo+0xf0>
      }
    }
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8098360:	4b23      	ldr	r3, [pc, #140]	; (80983f0 <AudioLoopback_demo+0x1a0>)
 8098362:	2200      	movs	r2, #0
 8098364:	601a      	str	r2, [r3, #0]
    /* Copy recorded 1st half block */
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8098366:	4b21      	ldr	r3, [pc, #132]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 809836c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8098370:	491e      	ldr	r1, [pc, #120]	; (80983ec <AudioLoopback_demo+0x19c>)
 8098372:	4618      	mov	r0, r3
 8098374:	f003 fd46 	bl	809be04 <memcpy>
           (uint16_t *)(AUDIO_BUFFER_IN),
           AUDIO_BLOCK_SIZE);

    /* Wait end of one block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8098378:	e00b      	b.n	8098392 <AudioLoopback_demo+0x142>
    {
      if (CheckForUserInput() > 0)
 809837a:	f002 fc7f 	bl	809ac7c <CheckForUserInput>
 809837e:	4603      	mov	r3, r0
 8098380:	2b00      	cmp	r3, #0
 8098382:	d006      	beq.n	8098392 <AudioLoopback_demo+0x142>
      {
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8098384:	2002      	movs	r0, #2
 8098386:	f7ec fb57 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 809838a:	2002      	movs	r0, #2
 809838c:	f7ec fb54 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        return;
 8098390:	e01d      	b.n	80983ce <AudioLoopback_demo+0x17e>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8098392:	4b17      	ldr	r3, [pc, #92]	; (80983f0 <AudioLoopback_demo+0x1a0>)
 8098394:	681b      	ldr	r3, [r3, #0]
 8098396:	2b02      	cmp	r3, #2
 8098398:	d1ef      	bne.n	809837a <AudioLoopback_demo+0x12a>
      }
    }
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 809839a:	4b15      	ldr	r3, [pc, #84]	; (80983f0 <AudioLoopback_demo+0x1a0>)
 809839c:	2200      	movs	r2, #0
 809839e:	601a      	str	r2, [r3, #0]
    /* Copy recorded 2nd half block */
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 80983a0:	4b12      	ldr	r3, [pc, #72]	; (80983ec <AudioLoopback_demo+0x19c>)
 80983a2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80983a6:	4618      	mov	r0, r3
           (uint16_t *)(AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE)),
 80983a8:	4b10      	ldr	r3, [pc, #64]	; (80983ec <AudioLoopback_demo+0x19c>)
 80983aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 80983ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80983b2:	4619      	mov	r1, r3
 80983b4:	f003 fd26 	bl	809be04 <memcpy>
           AUDIO_BLOCK_SIZE);

    if (CheckForUserInput() > 0)
 80983b8:	f002 fc60 	bl	809ac7c <CheckForUserInput>
 80983bc:	4603      	mov	r3, r0
 80983be:	2b00      	cmp	r3, #0
 80983c0:	d0ca      	beq.n	8098358 <AudioLoopback_demo+0x108>
    {
      /* Stop recorder */
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 80983c2:	2002      	movs	r0, #2
 80983c4:	f7ec fee2 	bl	808518c <BSP_AUDIO_IN_Stop>
      /* Stop Player before close Test */
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80983c8:	2002      	movs	r0, #2
 80983ca:	f7ec fb35 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
      return;
    }
  }
}
 80983ce:	46bd      	mov	sp, r7
 80983d0:	bd80      	pop	{r7, pc}
 80983d2:	bf00      	nop
 80983d4:	0809e158 	.word	0x0809e158
 80983d8:	ffff0000 	.word	0xffff0000
 80983dc:	0809e174 	.word	0x0809e174
 80983e0:	0809e190 	.word	0x0809e190
 80983e4:	ff0000ff 	.word	0xff0000ff
 80983e8:	0809e1a8 	.word	0x0809e1a8
 80983ec:	c007f800 	.word	0xc007f800
 80983f0:	2002f290 	.word	0x2002f290

080983f4 <AudioLoopback_SetHint>:
  * @brief  Display Audio Record demo hint
  * @param  None
  * @retval None
  */
static void AudioLoopback_SetHint(void)
{
 80983f4:	b598      	push	{r3, r4, r7, lr}
 80983f6:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80983f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80983fc:	f7ed fb58 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098400:	4825      	ldr	r0, [pc, #148]	; (8098498 <AudioLoopback_SetHint+0xa4>)
 8098402:	f7ed fadf 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8098406:	f7ed fa31 	bl	808586c <BSP_LCD_GetXSize>
 809840a:	4603      	mov	r3, r0
 809840c:	b29a      	uxth	r2, r3
 809840e:	235a      	movs	r3, #90	; 0x5a
 8098410:	2100      	movs	r1, #0
 8098412:	2000      	movs	r0, #0
 8098414:	f7ee f9dc 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8098418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809841c:	f7ed fad2 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8098420:	481d      	ldr	r0, [pc, #116]	; (8098498 <AudioLoopback_SetHint+0xa4>)
 8098422:	f7ed fafb 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8098426:	481d      	ldr	r0, [pc, #116]	; (809849c <AudioLoopback_SetHint+0xa8>)
 8098428:	f7ed fb12 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO LOOPBACK EXAMPLE", CENTER_MODE);
 809842c:	2301      	movs	r3, #1
 809842e:	4a1c      	ldr	r2, [pc, #112]	; (80984a0 <AudioLoopback_SetHint+0xac>)
 8098430:	2100      	movs	r1, #0
 8098432:	2000      	movs	r0, #0
 8098434:	f7ed fbba 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8098438:	481a      	ldr	r0, [pc, #104]	; (80984a4 <AudioLoopback_SetHint+0xb0>)
 809843a:	f7ed fb09 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 809843e:	2301      	movs	r3, #1
 8098440:	4a19      	ldr	r2, [pc, #100]	; (80984a8 <AudioLoopback_SetHint+0xb4>)
 8098442:	211e      	movs	r1, #30
 8098444:	2000      	movs	r0, #0
 8098446:	f7ed fbb1 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809844a:	4813      	ldr	r0, [pc, #76]	; (8098498 <AudioLoopback_SetHint+0xa4>)
 809844c:	f7ed faba 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8098450:	f7ed fa0c 	bl	808586c <BSP_LCD_GetXSize>
 8098454:	4603      	mov	r3, r0
 8098456:	b29b      	uxth	r3, r3
 8098458:	3b14      	subs	r3, #20
 809845a:	b29c      	uxth	r4, r3
 809845c:	f7ed fa1a 	bl	8085894 <BSP_LCD_GetYSize>
 8098460:	4603      	mov	r3, r0
 8098462:	b29b      	uxth	r3, r3
 8098464:	3b6e      	subs	r3, #110	; 0x6e
 8098466:	b29b      	uxth	r3, r3
 8098468:	4622      	mov	r2, r4
 809846a:	2164      	movs	r1, #100	; 0x64
 809846c:	200a      	movs	r0, #10
 809846e:	f7ed fe1d 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8098472:	f7ed f9fb 	bl	808586c <BSP_LCD_GetXSize>
 8098476:	4603      	mov	r3, r0
 8098478:	b29b      	uxth	r3, r3
 809847a:	3b16      	subs	r3, #22
 809847c:	b29c      	uxth	r4, r3
 809847e:	f7ed fa09 	bl	8085894 <BSP_LCD_GetYSize>
 8098482:	4603      	mov	r3, r0
 8098484:	b29b      	uxth	r3, r3
 8098486:	3b70      	subs	r3, #112	; 0x70
 8098488:	b29b      	uxth	r3, r3
 809848a:	4622      	mov	r2, r4
 809848c:	2165      	movs	r1, #101	; 0x65
 809848e:	200b      	movs	r0, #11
 8098490:	f7ed fe0c 	bl	80860ac <BSP_LCD_DrawRect>

}
 8098494:	bf00      	nop
 8098496:	bd98      	pop	{r3, r4, r7, pc}
 8098498:	ff0000ff 	.word	0xff0000ff
 809849c:	2000b36c 	.word	0x2000b36c
 80984a0:	0809e1d4 	.word	0x0809e1d4
 80984a4:	2000b354 	.word	0x2000b354
 80984a8:	0809e1ec 	.word	0x0809e1ec

080984ac <SCB_CleanDCache_by_Addr>:
{
 80984ac:	b480      	push	{r7}
 80984ae:	b087      	sub	sp, #28
 80984b0:	af00      	add	r7, sp, #0
 80984b2:	6078      	str	r0, [r7, #4]
 80984b4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80984b6:	683b      	ldr	r3, [r7, #0]
 80984b8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80984ba:	687b      	ldr	r3, [r7, #4]
 80984bc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32U;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80984be:	2320      	movs	r3, #32
 80984c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80984c2:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 80984c6:	e00b      	b.n	80984e0 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 80984c8:	4a0c      	ldr	r2, [pc, #48]	; (80984fc <SCB_CleanDCache_by_Addr+0x50>)
 80984ca:	693b      	ldr	r3, [r7, #16]
 80984cc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += linesize;
 80984d0:	68fb      	ldr	r3, [r7, #12]
 80984d2:	693a      	ldr	r2, [r7, #16]
 80984d4:	4413      	add	r3, r2
 80984d6:	613b      	str	r3, [r7, #16]
      op_size -= linesize;
 80984d8:	697a      	ldr	r2, [r7, #20]
 80984da:	68fb      	ldr	r3, [r7, #12]
 80984dc:	1ad3      	subs	r3, r2, r3
 80984de:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80984e0:	697b      	ldr	r3, [r7, #20]
 80984e2:	2b00      	cmp	r3, #0
 80984e4:	dcf0      	bgt.n	80984c8 <SCB_CleanDCache_by_Addr+0x1c>
 80984e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80984ea:	f3bf 8f6f 	isb	sy
}
 80984ee:	bf00      	nop
 80984f0:	371c      	adds	r7, #28
 80984f2:	46bd      	mov	sp, r7
 80984f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80984f8:	4770      	bx	lr
 80984fa:	bf00      	nop
 80984fc:	e000ed00 	.word	0xe000ed00

08098500 <AudioPlay_Demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioPlay_Demo (void)
{
 8098500:	b590      	push	{r4, r7, lr}
 8098502:	b0cd      	sub	sp, #308	; 0x134
 8098504:	af00      	add	r7, sp, #0
  uint32_t *AudioFreq_ptr;
  uint8_t FreqStr[256] = {0};
 8098506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809850a:	4618      	mov	r0, r3
 809850c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8098510:	461a      	mov	r2, r3
 8098512:	2100      	movs	r1, #0
 8098514:	f003 fc81 	bl	809be1a <memset>
  TS_StateTypeDef  TS_State;

  AudioFreq_ptr = AudioFreq+6; /*AF_48K*/
 8098518:	4bad      	ldr	r3, [pc, #692]	; (80987d0 <AudioPlay_Demo+0x2d0>)
 809851a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 809851e:	4bad      	ldr	r3, [pc, #692]	; (80987d4 <AudioPlay_Demo+0x2d4>)
 8098520:	2201      	movs	r2, #1
 8098522:	601a      	str	r2, [r3, #0]
  uwVolume = 70;
 8098524:	4bac      	ldr	r3, [pc, #688]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098526:	2246      	movs	r2, #70	; 0x46
 8098528:	601a      	str	r2, [r3, #0]

  Audio_Test_SetHint();
 809852a:	f000 f9fb 	bl	8098924 <Audio_Test_SetHint>

  //if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, *AudioFreq_ptr) == 0)
 809852e:	4baa      	ldr	r3, [pc, #680]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098530:	681b      	ldr	r3, [r3, #0]
 8098532:	b2d9      	uxtb	r1, r3
 8098534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8098538:	681b      	ldr	r3, [r3, #0]
 809853a:	461a      	mov	r2, r3
 809853c:	2003      	movs	r0, #3
 809853e:	f7ec f9d3 	bl	80848e8 <BSP_AUDIO_OUT_Init>
 8098542:	4603      	mov	r3, r0
 8098544:	2b00      	cmp	r3, #0
 8098546:	d113      	bne.n	8098570 <AudioPlay_Demo+0x70>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809854c:	f7ed fa66 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8098550:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8098554:	f7ed fa36 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC   OK  ", CENTER_MODE);
 8098558:	f7ed f99c 	bl	8085894 <BSP_LCD_GetYSize>
 809855c:	4603      	mov	r3, r0
 809855e:	b29b      	uxth	r3, r3
 8098560:	3b5f      	subs	r3, #95	; 0x5f
 8098562:	b299      	uxth	r1, r3
 8098564:	2301      	movs	r3, #1
 8098566:	4a9d      	ldr	r2, [pc, #628]	; (80987dc <AudioPlay_Demo+0x2dc>)
 8098568:	2000      	movs	r0, #0
 809856a:	f7ed fb1f 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809856e:	e01c      	b.n	80985aa <AudioPlay_Demo+0xaa>
  }
  else
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098574:	f7ed fa52 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8098578:	4899      	ldr	r0, [pc, #612]	; (80987e0 <AudioPlay_Demo+0x2e0>)
 809857a:	f7ed fa23 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC  FAIL ", CENTER_MODE);
 809857e:	f7ed f989 	bl	8085894 <BSP_LCD_GetYSize>
 8098582:	4603      	mov	r3, r0
 8098584:	b29b      	uxth	r3, r3
 8098586:	3b5f      	subs	r3, #95	; 0x5f
 8098588:	b299      	uxth	r1, r3
 809858a:	2301      	movs	r3, #1
 809858c:	4a95      	ldr	r2, [pc, #596]	; (80987e4 <AudioPlay_Demo+0x2e4>)
 809858e:	2000      	movs	r0, #0
 8098590:	f7ed fb0c 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8098594:	f7ed f97e 	bl	8085894 <BSP_LCD_GetYSize>
 8098598:	4603      	mov	r3, r0
 809859a:	b29b      	uxth	r3, r3
 809859c:	3b50      	subs	r3, #80	; 0x50
 809859e:	b299      	uxth	r1, r3
 80985a0:	2301      	movs	r3, #1
 80985a2:	4a91      	ldr	r2, [pc, #580]	; (80987e8 <AudioPlay_Demo+0x2e8>)
 80985a4:	2000      	movs	r0, #0
 80985a6:	f7ed fb01 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 80985aa:	f7ed f95f 	bl	808586c <BSP_LCD_GetXSize>
 80985ae:	4603      	mov	r3, r0
 80985b0:	b29c      	uxth	r4, r3
 80985b2:	f7ed f96f 	bl	8085894 <BSP_LCD_GetYSize>
 80985b6:	4603      	mov	r3, r0
 80985b8:	b29b      	uxth	r3, r3
 80985ba:	4619      	mov	r1, r3
 80985bc:	4620      	mov	r0, r4
 80985be:	f7f0 fadb 	bl	8088b78 <BSP_TS_Init>
 80985c2:	4603      	mov	r3, r0
 80985c4:	2b00      	cmp	r3, #0
 80985c6:	d01c      	beq.n	8098602 <AudioPlay_Demo+0x102>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80985c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80985cc:	f7ed fa26 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80985d0:	4883      	ldr	r0, [pc, #524]	; (80987e0 <AudioPlay_Demo+0x2e0>)
 80985d2:	f7ed f9f7 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"ERROR", CENTER_MODE);
 80985d6:	f7ed f95d 	bl	8085894 <BSP_LCD_GetYSize>
 80985da:	4603      	mov	r3, r0
 80985dc:	b29b      	uxth	r3, r3
 80985de:	3b41      	subs	r3, #65	; 0x41
 80985e0:	b299      	uxth	r1, r3
 80985e2:	2301      	movs	r3, #1
 80985e4:	4a81      	ldr	r2, [pc, #516]	; (80987ec <AudioPlay_Demo+0x2ec>)
 80985e6:	2000      	movs	r0, #0
 80985e8:	f7ed fae0 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 80985ec:	f7ed f952 	bl	8085894 <BSP_LCD_GetYSize>
 80985f0:	4603      	mov	r3, r0
 80985f2:	b29b      	uxth	r3, r3
 80985f4:	3b32      	subs	r3, #50	; 0x32
 80985f6:	b299      	uxth	r1, r3
 80985f8:	2301      	movs	r3, #1
 80985fa:	4a7d      	ldr	r2, [pc, #500]	; (80987f0 <AudioPlay_Demo+0x2f0>)
 80985fc:	2000      	movs	r0, #0
 80985fe:	f7ed fad5 	bl	8085bac <BSP_LCD_DisplayStringAt>
  Start playing the file from a circular buffer, once the DMA is enabled, it is 
  always in running state. Application has to fill the buffer with the audio data 
  using Transfer complete and/or half transfer complete interrupts callbacks 
  (DISCOVERY_AUDIO_TransferComplete_CallBack() or DISCOVERY_AUDIO_HalfTransfer_CallBack()...
  */
  Audio_Test_Start(AUDIO_FILE_ADDRESS, AUDIO_FILE_SIZE);
 8098602:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8098606:	487b      	ldr	r0, [pc, #492]	; (80987f4 <AudioPlay_Demo+0x2f4>)
 8098608:	f000 fa00 	bl	8098a0c <Audio_Test_Start>

  /* Display the state on the screen */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809860c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098610:	f7ed fa04 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098614:	4878      	ldr	r0, [pc, #480]	; (80987f8 <AudioPlay_Demo+0x2f8>)
 8098616:	f7ed f9d5 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 809861a:	f7ed f93b 	bl	8085894 <BSP_LCD_GetYSize>
 809861e:	4603      	mov	r3, r0
 8098620:	b29b      	uxth	r3, r3
 8098622:	3b50      	subs	r3, #80	; 0x50
 8098624:	b299      	uxth	r1, r3
 8098626:	2301      	movs	r3, #1
 8098628:	4a74      	ldr	r2, [pc, #464]	; (80987fc <AudioPlay_Demo+0x2fc>)
 809862a:	2000      	movs	r0, #0
 809862c:	f7ed fabe 	bl	8085bac <BSP_LCD_DisplayStringAt>

  sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8098630:	4b69      	ldr	r3, [pc, #420]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098632:	681a      	ldr	r2, [r3, #0]
 8098634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8098638:	4971      	ldr	r1, [pc, #452]	; (8098800 <AudioPlay_Demo+0x300>)
 809863a:	4618      	mov	r0, r3
 809863c:	f004 f852 	bl	809c6e4 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8098640:	f7ed f928 	bl	8085894 <BSP_LCD_GetYSize>
 8098644:	4603      	mov	r3, r0
 8098646:	b29b      	uxth	r3, r3
 8098648:	3b41      	subs	r3, #65	; 0x41
 809864a:	b299      	uxth	r1, r3
 809864c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8098650:	2301      	movs	r3, #1
 8098652:	2000      	movs	r0, #0
 8098654:	f7ed faaa 	bl	8085bac <BSP_LCD_DisplayStringAt>

  sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8098658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809865c:	681a      	ldr	r2, [r3, #0]
 809865e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8098662:	4968      	ldr	r1, [pc, #416]	; (8098804 <AudioPlay_Demo+0x304>)
 8098664:	4618      	mov	r0, r3
 8098666:	f004 f83d 	bl	809c6e4 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 809866a:	f7ed f913 	bl	8085894 <BSP_LCD_GetYSize>
 809866e:	4603      	mov	r3, r0
 8098670:	b29b      	uxth	r3, r3
 8098672:	3b32      	subs	r3, #50	; 0x32
 8098674:	b299      	uxth	r1, r3
 8098676:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809867a:	2301      	movs	r3, #1
 809867c:	2000      	movs	r0, #0
 809867e:	f7ed fa95 	bl	8085bac <BSP_LCD_DisplayStringAt>

  BSP_AUDIO_OUT_SetVolume(70);
 8098682:	2046      	movs	r0, #70	; 0x46
 8098684:	f7ec f9fa 	bl	8084a7c <BSP_AUDIO_OUT_SetVolume>

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809868c:	f7ed f9c6 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098690:	4859      	ldr	r0, [pc, #356]	; (80987f8 <AudioPlay_Demo+0x2f8>)
 8098692:	f7ed f997 	bl	80859c4 <BSP_LCD_SetTextColor>

  /* Infinite loop */
  while (1)
  {
    
    Audio_Test_Process();
 8098696:	f000 f9f5 	bl	8098a84 <Audio_Test_Process>
    
    /* Check in polling mode in touch screen the touch status and coordinates */
    /* if touch occurred                                                      */
    BSP_TS_GetState(&TS_State);
 809869a:	463b      	mov	r3, r7
 809869c:	4618      	mov	r0, r3
 809869e:	f7f0 faab 	bl	8088bf8 <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
 80986a2:	463b      	mov	r3, r7
 80986a4:	781b      	ldrb	r3, [r3, #0]
 80986a6:	2b01      	cmp	r3, #1
 80986a8:	f040 80ef 	bne.w	809888a <AudioPlay_Demo+0x38a>
    {
      if (TS_State.touchY[0] < 30)
 80986ac:	463b      	mov	r3, r7
 80986ae:	899b      	ldrh	r3, [r3, #12]
 80986b0:	2b1d      	cmp	r3, #29
 80986b2:	d827      	bhi.n	8098704 <AudioPlay_Demo+0x204>
      {
        /* Increase volume by 5% */
        if (uwVolume < 95)
 80986b4:	4b48      	ldr	r3, [pc, #288]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986b6:	681b      	ldr	r3, [r3, #0]
 80986b8:	2b5e      	cmp	r3, #94	; 0x5e
 80986ba:	d805      	bhi.n	80986c8 <AudioPlay_Demo+0x1c8>
          uwVolume += 5;
 80986bc:	4b46      	ldr	r3, [pc, #280]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986be:	681b      	ldr	r3, [r3, #0]
 80986c0:	3305      	adds	r3, #5
 80986c2:	4a45      	ldr	r2, [pc, #276]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986c4:	6013      	str	r3, [r2, #0]
 80986c6:	e002      	b.n	80986ce <AudioPlay_Demo+0x1ce>
        else
          uwVolume = 100;
 80986c8:	4b43      	ldr	r3, [pc, #268]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986ca:	2264      	movs	r2, #100	; 0x64
 80986cc:	601a      	str	r2, [r3, #0]
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 80986ce:	4b42      	ldr	r3, [pc, #264]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986d0:	681a      	ldr	r2, [r3, #0]
 80986d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80986d6:	494a      	ldr	r1, [pc, #296]	; (8098800 <AudioPlay_Demo+0x300>)
 80986d8:	4618      	mov	r0, r3
 80986da:	f004 f803 	bl	809c6e4 <siprintf>
        BSP_AUDIO_OUT_SetVolume(uwVolume);
 80986de:	4b3e      	ldr	r3, [pc, #248]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80986e0:	681b      	ldr	r3, [r3, #0]
 80986e2:	b2db      	uxtb	r3, r3
 80986e4:	4618      	mov	r0, r3
 80986e6:	f7ec f9c9 	bl	8084a7c <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 80986ea:	f7ed f8d3 	bl	8085894 <BSP_LCD_GetYSize>
 80986ee:	4603      	mov	r3, r0
 80986f0:	b29b      	uxth	r3, r3
 80986f2:	3b41      	subs	r3, #65	; 0x41
 80986f4:	b299      	uxth	r1, r3
 80986f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80986fa:	2301      	movs	r3, #1
 80986fc:	2000      	movs	r0, #0
 80986fe:	f7ed fa55 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098702:	e0ba      	b.n	809887a <AudioPlay_Demo+0x37a>
      }
      else if (TS_State.touchY[0] > (BSP_LCD_GetYSize() - 30))
 8098704:	463b      	mov	r3, r7
 8098706:	899b      	ldrh	r3, [r3, #12]
 8098708:	461c      	mov	r4, r3
 809870a:	f7ed f8c3 	bl	8085894 <BSP_LCD_GetYSize>
 809870e:	4603      	mov	r3, r0
 8098710:	3b1e      	subs	r3, #30
 8098712:	429c      	cmp	r4, r3
 8098714:	d927      	bls.n	8098766 <AudioPlay_Demo+0x266>
      {
        /* Decrease volume by 5% */
        if (uwVolume > 5)
 8098716:	4b30      	ldr	r3, [pc, #192]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098718:	681b      	ldr	r3, [r3, #0]
 809871a:	2b05      	cmp	r3, #5
 809871c:	d905      	bls.n	809872a <AudioPlay_Demo+0x22a>
          uwVolume -= 5;
 809871e:	4b2e      	ldr	r3, [pc, #184]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098720:	681b      	ldr	r3, [r3, #0]
 8098722:	3b05      	subs	r3, #5
 8098724:	4a2c      	ldr	r2, [pc, #176]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098726:	6013      	str	r3, [r2, #0]
 8098728:	e002      	b.n	8098730 <AudioPlay_Demo+0x230>
        else
          uwVolume = 0;
 809872a:	4b2b      	ldr	r3, [pc, #172]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 809872c:	2200      	movs	r2, #0
 809872e:	601a      	str	r2, [r3, #0]
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8098730:	4b29      	ldr	r3, [pc, #164]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098732:	681a      	ldr	r2, [r3, #0]
 8098734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8098738:	4931      	ldr	r1, [pc, #196]	; (8098800 <AudioPlay_Demo+0x300>)
 809873a:	4618      	mov	r0, r3
 809873c:	f003 ffd2 	bl	809c6e4 <siprintf>
        BSP_AUDIO_OUT_SetVolume(uwVolume);
 8098740:	4b25      	ldr	r3, [pc, #148]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 8098742:	681b      	ldr	r3, [r3, #0]
 8098744:	b2db      	uxtb	r3, r3
 8098746:	4618      	mov	r0, r3
 8098748:	f7ec f998 	bl	8084a7c <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 809874c:	f7ed f8a2 	bl	8085894 <BSP_LCD_GetYSize>
 8098750:	4603      	mov	r3, r0
 8098752:	b29b      	uxth	r3, r3
 8098754:	3b41      	subs	r3, #65	; 0x41
 8098756:	b299      	uxth	r1, r3
 8098758:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809875c:	2301      	movs	r3, #1
 809875e:	2000      	movs	r0, #0
 8098760:	f7ed fa24 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098764:	e089      	b.n	809887a <AudioPlay_Demo+0x37a>
      }
      else if (TS_State.touchX[0] < 30)
 8098766:	463b      	mov	r3, r7
 8098768:	885b      	ldrh	r3, [r3, #2]
 809876a:	2b1d      	cmp	r3, #29
 809876c:	d84c      	bhi.n	8098808 <AudioPlay_Demo+0x308>
      {
        /*Decrease Frequency */
        if (*AudioFreq_ptr != 8000)
 809876e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8098772:	681b      	ldr	r3, [r3, #0]
 8098774:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8098778:	d01d      	beq.n	80987b6 <AudioPlay_Demo+0x2b6>
        {
          AudioFreq_ptr--;
 809877a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809877e:	3b04      	subs	r3, #4
 8098780:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8098784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8098788:	681a      	ldr	r2, [r3, #0]
 809878a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809878e:	491d      	ldr	r1, [pc, #116]	; (8098804 <AudioPlay_Demo+0x304>)
 8098790:	4618      	mov	r0, r3
 8098792:	f003 ffa7 	bl	809c6e4 <siprintf>
          BSP_AUDIO_OUT_Pause();
 8098796:	f7ec f923 	bl	80849e0 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 809879a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809879e:	681b      	ldr	r3, [r3, #0]
 80987a0:	4618      	mov	r0, r3
 80987a2:	f7ec f983 	bl	8084aac <BSP_AUDIO_OUT_SetFrequency>
          BSP_AUDIO_OUT_Resume();
 80987a6:	f7ec f931 	bl	8084a0c <BSP_AUDIO_OUT_Resume>
          BSP_AUDIO_OUT_SetVolume(uwVolume);
 80987aa:	4b0b      	ldr	r3, [pc, #44]	; (80987d8 <AudioPlay_Demo+0x2d8>)
 80987ac:	681b      	ldr	r3, [r3, #0]
 80987ae:	b2db      	uxtb	r3, r3
 80987b0:	4618      	mov	r0, r3
 80987b2:	f7ec f963 	bl	8084a7c <BSP_AUDIO_OUT_SetVolume>
        }
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 80987b6:	f7ed f86d 	bl	8085894 <BSP_LCD_GetYSize>
 80987ba:	4603      	mov	r3, r0
 80987bc:	b29b      	uxth	r3, r3
 80987be:	3b32      	subs	r3, #50	; 0x32
 80987c0:	b299      	uxth	r1, r3
 80987c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80987c6:	2301      	movs	r3, #1
 80987c8:	2000      	movs	r0, #0
 80987ca:	f7ed f9ef 	bl	8085bac <BSP_LCD_DisplayStringAt>
 80987ce:	e054      	b.n	809887a <AudioPlay_Demo+0x37a>
 80987d0:	2000b0a8 	.word	0x2000b0a8
 80987d4:	2000c774 	.word	0x2000c774
 80987d8:	2000b08c 	.word	0x2000b08c
 80987dc:	0809e20c 	.word	0x0809e20c
 80987e0:	ffff0000 	.word	0xffff0000
 80987e4:	0809e224 	.word	0x0809e224
 80987e8:	0809e23c 	.word	0x0809e23c
 80987ec:	0809e254 	.word	0x0809e254
 80987f0:	0809e25c 	.word	0x0809e25c
 80987f4:	08080000 	.word	0x08080000
 80987f8:	ff0000ff 	.word	0xff0000ff
 80987fc:	0809e280 	.word	0x0809e280
 8098800:	0809e298 	.word	0x0809e298
 8098804:	0809e2b4 	.word	0x0809e2b4
      }
      else if (TS_State.touchX[0] > (BSP_LCD_GetXSize() - 30))
 8098808:	463b      	mov	r3, r7
 809880a:	885b      	ldrh	r3, [r3, #2]
 809880c:	461c      	mov	r4, r3
 809880e:	f7ed f82d 	bl	808586c <BSP_LCD_GetXSize>
 8098812:	4603      	mov	r3, r0
 8098814:	3b1e      	subs	r3, #30
 8098816:	429c      	cmp	r4, r3
 8098818:	d92f      	bls.n	809887a <AudioPlay_Demo+0x37a>
      {
        /* Increase Frequency */
        if (*AudioFreq_ptr != 96000)
 809881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809881e:	681b      	ldr	r3, [r3, #0]
 8098820:	4a3a      	ldr	r2, [pc, #232]	; (809890c <AudioPlay_Demo+0x40c>)
 8098822:	4293      	cmp	r3, r2
 8098824:	d01d      	beq.n	8098862 <AudioPlay_Demo+0x362>
        {
          AudioFreq_ptr++;
 8098826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809882a:	3304      	adds	r3, #4
 809882c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8098830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8098834:	681a      	ldr	r2, [r3, #0]
 8098836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809883a:	4935      	ldr	r1, [pc, #212]	; (8098910 <AudioPlay_Demo+0x410>)
 809883c:	4618      	mov	r0, r3
 809883e:	f003 ff51 	bl	809c6e4 <siprintf>
          BSP_AUDIO_OUT_Pause();
 8098842:	f7ec f8cd 	bl	80849e0 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8098846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 809884a:	681b      	ldr	r3, [r3, #0]
 809884c:	4618      	mov	r0, r3
 809884e:	f7ec f92d 	bl	8084aac <BSP_AUDIO_OUT_SetFrequency>
          BSP_AUDIO_OUT_Resume();
 8098852:	f7ec f8db 	bl	8084a0c <BSP_AUDIO_OUT_Resume>
          BSP_AUDIO_OUT_SetVolume(uwVolume);
 8098856:	4b2f      	ldr	r3, [pc, #188]	; (8098914 <AudioPlay_Demo+0x414>)
 8098858:	681b      	ldr	r3, [r3, #0]
 809885a:	b2db      	uxtb	r3, r3
 809885c:	4618      	mov	r0, r3
 809885e:	f7ec f90d 	bl	8084a7c <BSP_AUDIO_OUT_SetVolume>
        }
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8098862:	f7ed f817 	bl	8085894 <BSP_LCD_GetYSize>
 8098866:	4603      	mov	r3, r0
 8098868:	b29b      	uxth	r3, r3
 809886a:	3b32      	subs	r3, #50	; 0x32
 809886c:	b299      	uxth	r1, r3
 809886e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8098872:	2301      	movs	r3, #1
 8098874:	2000      	movs	r0, #0
 8098876:	f7ed f999 	bl	8085bac <BSP_LCD_DisplayStringAt>
      }
      
      /* Wait for touch screen no touch detected */
      do
      {
        BSP_TS_GetState(&TS_State);
 809887a:	463b      	mov	r3, r7
 809887c:	4618      	mov	r0, r3
 809887e:	f7f0 f9bb 	bl	8088bf8 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 8098882:	463b      	mov	r3, r7
 8098884:	781b      	ldrb	r3, [r3, #0]
 8098886:	2b00      	cmp	r3, #0
 8098888:	d1f7      	bne.n	809887a <AudioPlay_Demo+0x37a>
    }
    
    if (TS_State.touchDetected >= 2)
 809888a:	463b      	mov	r3, r7
 809888c:	781b      	ldrb	r3, [r3, #0]
 809888e:	2b01      	cmp	r3, #1
 8098890:	d92c      	bls.n	80988ec <AudioPlay_Demo+0x3ec>
    {
      /* Set Pause / Resume */
      if (uwPauseEnabledStatus == 1)
 8098892:	4b21      	ldr	r3, [pc, #132]	; (8098918 <AudioPlay_Demo+0x418>)
 8098894:	681b      	ldr	r3, [r3, #0]
 8098896:	2b01      	cmp	r3, #1
 8098898:	d110      	bne.n	80988bc <AudioPlay_Demo+0x3bc>
      { /* Pause is enabled, call Resume */
        BSP_AUDIO_OUT_Resume();
 809889a:	f7ec f8b7 	bl	8084a0c <BSP_AUDIO_OUT_Resume>
        uwPauseEnabledStatus = 0;
 809889e:	4b1e      	ldr	r3, [pc, #120]	; (8098918 <AudioPlay_Demo+0x418>)
 80988a0:	2200      	movs	r2, #0
 80988a2:	601a      	str	r2, [r3, #0]
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 80988a4:	f7ec fff6 	bl	8085894 <BSP_LCD_GetYSize>
 80988a8:	4603      	mov	r3, r0
 80988aa:	b29b      	uxth	r3, r3
 80988ac:	3b50      	subs	r3, #80	; 0x50
 80988ae:	b299      	uxth	r1, r3
 80988b0:	2301      	movs	r3, #1
 80988b2:	4a1a      	ldr	r2, [pc, #104]	; (809891c <AudioPlay_Demo+0x41c>)
 80988b4:	2000      	movs	r0, #0
 80988b6:	f7ed f979 	bl	8085bac <BSP_LCD_DisplayStringAt>
 80988ba:	e00f      	b.n	80988dc <AudioPlay_Demo+0x3dc>
      }
      else
      { /* Pause the playback */
        BSP_AUDIO_OUT_Pause();
 80988bc:	f7ec f890 	bl	80849e0 <BSP_AUDIO_OUT_Pause>
        uwPauseEnabledStatus = 1;
 80988c0:	4b15      	ldr	r3, [pc, #84]	; (8098918 <AudioPlay_Demo+0x418>)
 80988c2:	2201      	movs	r2, #1
 80988c4:	601a      	str	r2, [r3, #0]
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 80988c6:	f7ec ffe5 	bl	8085894 <BSP_LCD_GetYSize>
 80988ca:	4603      	mov	r3, r0
 80988cc:	b29b      	uxth	r3, r3
 80988ce:	3b50      	subs	r3, #80	; 0x50
 80988d0:	b299      	uxth	r1, r3
 80988d2:	2301      	movs	r3, #1
 80988d4:	4a12      	ldr	r2, [pc, #72]	; (8098920 <AudioPlay_Demo+0x420>)
 80988d6:	2000      	movs	r0, #0
 80988d8:	f7ed f968 	bl	8085bac <BSP_LCD_DisplayStringAt>
      }
      
      /* Wait for touch screen no touch detected */
      do
      {
        BSP_TS_GetState(&TS_State);
 80988dc:	463b      	mov	r3, r7
 80988de:	4618      	mov	r0, r3
 80988e0:	f7f0 f98a 	bl	8088bf8 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 80988e4:	463b      	mov	r3, r7
 80988e6:	781b      	ldrb	r3, [r3, #0]
 80988e8:	2b00      	cmp	r3, #0
 80988ea:	d1f7      	bne.n	80988dc <AudioPlay_Demo+0x3dc>
    }
    
    if (CheckForUserInput() > 0)
 80988ec:	f002 f9c6 	bl	809ac7c <CheckForUserInput>
 80988f0:	4603      	mov	r3, r0
 80988f2:	2b00      	cmp	r3, #0
 80988f4:	f43f aecf 	beq.w	8098696 <AudioPlay_Demo+0x196>
    {
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80988f8:	2002      	movs	r0, #2
 80988fa:	f7ec f89d 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit();
 80988fe:	f7ec f91b 	bl	8084b38 <BSP_AUDIO_OUT_DeInit>
      return;
 8098902:	bf00      	nop
    }
  }
}
 8098904:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8098908:	46bd      	mov	sp, r7
 809890a:	bd90      	pop	{r4, r7, pc}
 809890c:	00017700 	.word	0x00017700
 8098910:	0809e2b4 	.word	0x0809e2b4
 8098914:	2000b08c 	.word	0x2000b08c
 8098918:	2000c774 	.word	0x2000c774
 809891c:	0809e280 	.word	0x0809e280
 8098920:	0809e2cc 	.word	0x0809e2cc

08098924 <Audio_Test_SetHint>:
  * @brief  Display Audio demo hint
  * @param  None
  * @retval None
  */
static void Audio_Test_SetHint(void)
{
 8098924:	b598      	push	{r3, r4, r7, lr}
 8098926:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8098928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809892c:	f7ed f8c0 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098930:	482e      	ldr	r0, [pc, #184]	; (80989ec <Audio_Test_SetHint+0xc8>)
 8098932:	f7ed f847 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8098936:	f7ec ff99 	bl	808586c <BSP_LCD_GetXSize>
 809893a:	4603      	mov	r3, r0
 809893c:	b29a      	uxth	r2, r3
 809893e:	235a      	movs	r3, #90	; 0x5a
 8098940:	2100      	movs	r1, #0
 8098942:	2000      	movs	r0, #0
 8098944:	f7ed ff44 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8098948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809894c:	f7ed f83a 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8098950:	4826      	ldr	r0, [pc, #152]	; (80989ec <Audio_Test_SetHint+0xc8>)
 8098952:	f7ed f863 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8098956:	4826      	ldr	r0, [pc, #152]	; (80989f0 <Audio_Test_SetHint+0xcc>)
 8098958:	f7ed f87a 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO EXAMPLE", CENTER_MODE);
 809895c:	2301      	movs	r3, #1
 809895e:	4a25      	ldr	r2, [pc, #148]	; (80989f4 <Audio_Test_SetHint+0xd0>)
 8098960:	2100      	movs	r1, #0
 8098962:	2000      	movs	r0, #0
 8098964:	f7ed f922 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8098968:	4823      	ldr	r0, [pc, #140]	; (80989f8 <Audio_Test_SetHint+0xd4>)
 809896a:	f7ed f871 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 809896e:	2301      	movs	r3, #1
 8098970:	4a22      	ldr	r2, [pc, #136]	; (80989fc <Audio_Test_SetHint+0xd8>)
 8098972:	211e      	movs	r1, #30
 8098974:	2000      	movs	r0, #0
 8098976:	f7ed f919 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"Press Top/Bottom screen to change Volume   ", CENTER_MODE);
 809897a:	2301      	movs	r3, #1
 809897c:	4a20      	ldr	r2, [pc, #128]	; (8098a00 <Audio_Test_SetHint+0xdc>)
 809897e:	212d      	movs	r1, #45	; 0x2d
 8098980:	2000      	movs	r0, #0
 8098982:	f7ed f913 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Press Left/Right screen to change Frequency", CENTER_MODE);
 8098986:	2301      	movs	r3, #1
 8098988:	4a1e      	ldr	r2, [pc, #120]	; (8098a04 <Audio_Test_SetHint+0xe0>)
 809898a:	213c      	movs	r1, #60	; 0x3c
 809898c:	2000      	movs	r0, #0
 809898e:	f7ed f90d 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 75, (uint8_t *)"Press 2 fingers for Pause/Resume           ", CENTER_MODE);
 8098992:	2301      	movs	r3, #1
 8098994:	4a1c      	ldr	r2, [pc, #112]	; (8098a08 <Audio_Test_SetHint+0xe4>)
 8098996:	214b      	movs	r1, #75	; 0x4b
 8098998:	2000      	movs	r0, #0
 809899a:	f7ed f907 	bl	8085bac <BSP_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809899e:	4813      	ldr	r0, [pc, #76]	; (80989ec <Audio_Test_SetHint+0xc8>)
 80989a0:	f7ed f810 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 80989a4:	f7ec ff62 	bl	808586c <BSP_LCD_GetXSize>
 80989a8:	4603      	mov	r3, r0
 80989aa:	b29b      	uxth	r3, r3
 80989ac:	3b14      	subs	r3, #20
 80989ae:	b29c      	uxth	r4, r3
 80989b0:	f7ec ff70 	bl	8085894 <BSP_LCD_GetYSize>
 80989b4:	4603      	mov	r3, r0
 80989b6:	b29b      	uxth	r3, r3
 80989b8:	3b6e      	subs	r3, #110	; 0x6e
 80989ba:	b29b      	uxth	r3, r3
 80989bc:	4622      	mov	r2, r4
 80989be:	2164      	movs	r1, #100	; 0x64
 80989c0:	200a      	movs	r0, #10
 80989c2:	f7ed fb73 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 80989c6:	f7ec ff51 	bl	808586c <BSP_LCD_GetXSize>
 80989ca:	4603      	mov	r3, r0
 80989cc:	b29b      	uxth	r3, r3
 80989ce:	3b16      	subs	r3, #22
 80989d0:	b29c      	uxth	r4, r3
 80989d2:	f7ec ff5f 	bl	8085894 <BSP_LCD_GetYSize>
 80989d6:	4603      	mov	r3, r0
 80989d8:	b29b      	uxth	r3, r3
 80989da:	3b70      	subs	r3, #112	; 0x70
 80989dc:	b29b      	uxth	r3, r3
 80989de:	4622      	mov	r2, r4
 80989e0:	2165      	movs	r1, #101	; 0x65
 80989e2:	200b      	movs	r0, #11
 80989e4:	f7ed fb62 	bl	80860ac <BSP_LCD_DrawRect>

}
 80989e8:	bf00      	nop
 80989ea:	bd98      	pop	{r3, r4, r7, pc}
 80989ec:	ff0000ff 	.word	0xff0000ff
 80989f0:	2000b36c 	.word	0x2000b36c
 80989f4:	0809e2e4 	.word	0x0809e2e4
 80989f8:	2000b354 	.word	0x2000b354
 80989fc:	0809e2f4 	.word	0x0809e2f4
 8098a00:	0809e314 	.word	0x0809e314
 8098a04:	0809e340 	.word	0x0809e340
 8098a08:	0809e36c 	.word	0x0809e36c

08098a0c <Audio_Test_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef Audio_Test_Start(uint32_t audio_start_address, uint32_t audio_file_size)
{
 8098a0c:	b580      	push	{r7, lr}
 8098a0e:	b084      	sub	sp, #16
 8098a10:	af00      	add	r7, sp, #0
 8098a12:	6078      	str	r0, [r7, #4]
 8098a14:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;
  
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8098a16:	4b17      	ldr	r3, [pc, #92]	; (8098a74 <Audio_Test_Start+0x68>)
 8098a18:	2200      	movs	r2, #0
 8098a1a:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  AudioStartAddress = audio_start_address;
 8098a1e:	4a16      	ldr	r2, [pc, #88]	; (8098a78 <Audio_Test_Start+0x6c>)
 8098a20:	687b      	ldr	r3, [r7, #4]
 8098a22:	6013      	str	r3, [r2, #0]
  AudioFileSize = audio_file_size;
 8098a24:	4a15      	ldr	r2, [pc, #84]	; (8098a7c <Audio_Test_Start+0x70>)
 8098a26:	683b      	ldr	r3, [r7, #0]
 8098a28:	6013      	str	r3, [r2, #0]
  bytesread = GetData( (void *)AudioStartAddress,
 8098a2a:	4b13      	ldr	r3, [pc, #76]	; (8098a78 <Audio_Test_Start+0x6c>)
 8098a2c:	681b      	ldr	r3, [r3, #0]
 8098a2e:	4618      	mov	r0, r3
 8098a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8098a34:	4a0f      	ldr	r2, [pc, #60]	; (8098a74 <Audio_Test_Start+0x68>)
 8098a36:	2100      	movs	r1, #0
 8098a38:	f000 f898 	bl	8098b6c <GetData>
 8098a3c:	60f8      	str	r0, [r7, #12]
                      0,
                      &buffer_ctl.buff[0],
                      AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 8098a3e:	68fb      	ldr	r3, [r7, #12]
 8098a40:	2b00      	cmp	r3, #0
 8098a42:	d012      	beq.n	8098a6a <Audio_Test_Start+0x5e>
  {
    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8098a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8098a48:	480a      	ldr	r0, [pc, #40]	; (8098a74 <Audio_Test_Start+0x68>)
 8098a4a:	f7ff fd2f 	bl	80984ac <SCB_CleanDCache_by_Addr>
        
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8098a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8098a52:	4808      	ldr	r0, [pc, #32]	; (8098a74 <Audio_Test_Start+0x68>)
 8098a54:	f7eb ff9a 	bl	808498c <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 8098a58:	4b09      	ldr	r3, [pc, #36]	; (8098a80 <Audio_Test_Start+0x74>)
 8098a5a:	2202      	movs	r2, #2
 8098a5c:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 8098a5e:	4a05      	ldr	r2, [pc, #20]	; (8098a74 <Audio_Test_Start+0x68>)
 8098a60:	68fb      	ldr	r3, [r7, #12]
 8098a62:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    return AUDIO_ERROR_NONE;
 8098a66:	2300      	movs	r3, #0
 8098a68:	e000      	b.n	8098a6c <Audio_Test_Start+0x60>
  }
  return AUDIO_ERROR_IO;
 8098a6a:	2302      	movs	r3, #2
}
 8098a6c:	4618      	mov	r0, r3
 8098a6e:	3710      	adds	r7, #16
 8098a70:	46bd      	mov	sp, r7
 8098a72:	bd80      	pop	{r7, pc}
 8098a74:	2000bf60 	.word	0x2000bf60
 8098a78:	2000c76c 	.word	0x2000c76c
 8098a7c:	2000c770 	.word	0x2000c770
 8098a80:	2000c768 	.word	0x2000c768

08098a84 <Audio_Test_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
uint8_t Audio_Test_Process(void)
{
 8098a84:	b580      	push	{r7, lr}
 8098a86:	b082      	sub	sp, #8
 8098a88:	af00      	add	r7, sp, #0
  uint32_t bytesread;
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;  
 8098a8a:	2300      	movs	r3, #0
 8098a8c:	71fb      	strb	r3, [r7, #7]
  
  switch(audio_state)
 8098a8e:	4b32      	ldr	r3, [pc, #200]	; (8098b58 <Audio_Test_Process+0xd4>)
 8098a90:	781b      	ldrb	r3, [r3, #0]
 8098a92:	2b02      	cmp	r3, #2
 8098a94:	d157      	bne.n	8098b46 <Audio_Test_Process+0xc2>
  {
  case AUDIO_STATE_PLAYING:
    
    if(buffer_ctl.fptr >= AudioFileSize)
 8098a96:	4b31      	ldr	r3, [pc, #196]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098a98:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8098a9c:	4b30      	ldr	r3, [pc, #192]	; (8098b60 <Audio_Test_Process+0xdc>)
 8098a9e:	681b      	ldr	r3, [r3, #0]
 8098aa0:	429a      	cmp	r2, r3
 8098aa2:	d305      	bcc.n	8098ab0 <Audio_Test_Process+0x2c>
    {
      /* Play audio sample again ... */
      buffer_ctl.fptr = 0; 
 8098aa4:	4b2d      	ldr	r3, [pc, #180]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098aa6:	2200      	movs	r2, #0
 8098aa8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
      error_state = AUDIO_ERROR_EOF;
 8098aac:	2303      	movs	r3, #3
 8098aae:	71fb      	strb	r3, [r7, #7]
    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8098ab0:	4b2a      	ldr	r3, [pc, #168]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098ab2:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8098ab6:	2b01      	cmp	r3, #1
 8098ab8:	d11f      	bne.n	8098afa <Audio_Test_Process+0x76>
    {
      bytesread = GetData((void *)AudioStartAddress,
 8098aba:	4b2a      	ldr	r3, [pc, #168]	; (8098b64 <Audio_Test_Process+0xe0>)
 8098abc:	681b      	ldr	r3, [r3, #0]
 8098abe:	4618      	mov	r0, r3
 8098ac0:	4b26      	ldr	r3, [pc, #152]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098ac2:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8098ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8098aca:	4a24      	ldr	r2, [pc, #144]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098acc:	f000 f84e 	bl	8098b6c <GetData>
 8098ad0:	6038      	str	r0, [r7, #0]
                          buffer_ctl.fptr,
                          &buffer_ctl.buff[0],
                          AUDIO_BUFFER_SIZE /2);
      
      if( bytesread >0)
 8098ad2:	683b      	ldr	r3, [r7, #0]
 8098ad4:	2b00      	cmp	r3, #0
 8098ad6:	d010      	beq.n	8098afa <Audio_Test_Process+0x76>
      { 
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8098ad8:	4b20      	ldr	r3, [pc, #128]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098ada:	2200      	movs	r2, #0
 8098adc:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
        buffer_ctl.fptr += bytesread; 
 8098ae0:	4b1e      	ldr	r3, [pc, #120]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098ae2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8098ae6:	683b      	ldr	r3, [r7, #0]
 8098ae8:	4413      	add	r3, r2
 8098aea:	4a1c      	ldr	r2, [pc, #112]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098aec:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        
        /* Clean Data Cache to update the content of the SRAM */
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8098af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8098af4:	4819      	ldr	r0, [pc, #100]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098af6:	f7ff fcd9 	bl	80984ac <SCB_CleanDCache_by_Addr>
      }
    }
    
    /* 2nd half buffer played; so fill it and continue playing from top */    
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8098afa:	4b18      	ldr	r3, [pc, #96]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098afc:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8098b00:	2b02      	cmp	r3, #2
 8098b02:	d123      	bne.n	8098b4c <Audio_Test_Process+0xc8>
    {
      bytesread = GetData((void *)AudioStartAddress,
 8098b04:	4b17      	ldr	r3, [pc, #92]	; (8098b64 <Audio_Test_Process+0xe0>)
 8098b06:	681b      	ldr	r3, [r3, #0]
 8098b08:	4618      	mov	r0, r3
 8098b0a:	4b14      	ldr	r3, [pc, #80]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098b0c:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8098b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8098b14:	4a14      	ldr	r2, [pc, #80]	; (8098b68 <Audio_Test_Process+0xe4>)
 8098b16:	f000 f829 	bl	8098b6c <GetData>
 8098b1a:	6038      	str	r0, [r7, #0]
                          buffer_ctl.fptr, 
                          &buffer_ctl.buff[AUDIO_BUFFER_SIZE /2],
                          AUDIO_BUFFER_SIZE /2);
      if( bytesread > 0)
 8098b1c:	683b      	ldr	r3, [r7, #0]
 8098b1e:	2b00      	cmp	r3, #0
 8098b20:	d014      	beq.n	8098b4c <Audio_Test_Process+0xc8>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8098b22:	4b0e      	ldr	r3, [pc, #56]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098b24:	2200      	movs	r2, #0
 8098b26:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8098b2a:	4b0c      	ldr	r3, [pc, #48]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098b2c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8098b30:	683b      	ldr	r3, [r7, #0]
 8098b32:	4413      	add	r3, r2
 8098b34:	4a09      	ldr	r2, [pc, #36]	; (8098b5c <Audio_Test_Process+0xd8>)
 8098b36:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        
        /* Clean Data Cache to update the content of the SRAM */
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8098b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8098b3e:	480a      	ldr	r0, [pc, #40]	; (8098b68 <Audio_Test_Process+0xe4>)
 8098b40:	f7ff fcb4 	bl	80984ac <SCB_CleanDCache_by_Addr>
      }
    }
    break;
 8098b44:	e002      	b.n	8098b4c <Audio_Test_Process+0xc8>
    
  default:
    error_state = AUDIO_ERROR_NOTREADY;
 8098b46:	2301      	movs	r3, #1
 8098b48:	71fb      	strb	r3, [r7, #7]
    break;
 8098b4a:	e000      	b.n	8098b4e <Audio_Test_Process+0xca>
    break;
 8098b4c:	bf00      	nop
  }
  
  return (uint8_t) error_state;
 8098b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8098b50:	4618      	mov	r0, r3
 8098b52:	3708      	adds	r7, #8
 8098b54:	46bd      	mov	sp, r7
 8098b56:	bd80      	pop	{r7, pc}
 8098b58:	2000c768 	.word	0x2000c768
 8098b5c:	2000bf60 	.word	0x2000bf60
 8098b60:	2000c770 	.word	0x2000c770
 8098b64:	2000c76c 	.word	0x2000c76c
 8098b68:	2000c360 	.word	0x2000c360

08098b6c <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8098b6c:	b480      	push	{r7}
 8098b6e:	b087      	sub	sp, #28
 8098b70:	af00      	add	r7, sp, #0
 8098b72:	60f8      	str	r0, [r7, #12]
 8098b74:	60b9      	str	r1, [r7, #8]
 8098b76:	607a      	str	r2, [r7, #4]
 8098b78:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8098b7a:	68fb      	ldr	r3, [r7, #12]
 8098b7c:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
 8098b7e:	2300      	movs	r3, #0
 8098b80:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8098b82:	e00c      	b.n	8098b9e <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8098b84:	68ba      	ldr	r2, [r7, #8]
 8098b86:	697b      	ldr	r3, [r7, #20]
 8098b88:	4413      	add	r3, r2
 8098b8a:	693a      	ldr	r2, [r7, #16]
 8098b8c:	441a      	add	r2, r3
 8098b8e:	6879      	ldr	r1, [r7, #4]
 8098b90:	697b      	ldr	r3, [r7, #20]
 8098b92:	440b      	add	r3, r1
 8098b94:	7812      	ldrb	r2, [r2, #0]
 8098b96:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 8098b98:	697b      	ldr	r3, [r7, #20]
 8098b9a:	3301      	adds	r3, #1
 8098b9c:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8098b9e:	68ba      	ldr	r2, [r7, #8]
 8098ba0:	697b      	ldr	r3, [r7, #20]
 8098ba2:	441a      	add	r2, r3
 8098ba4:	4b07      	ldr	r3, [pc, #28]	; (8098bc4 <GetData+0x58>)
 8098ba6:	681b      	ldr	r3, [r3, #0]
 8098ba8:	429a      	cmp	r2, r3
 8098baa:	d203      	bcs.n	8098bb4 <GetData+0x48>
 8098bac:	697a      	ldr	r2, [r7, #20]
 8098bae:	683b      	ldr	r3, [r7, #0]
 8098bb0:	429a      	cmp	r2, r3
 8098bb2:	d3e7      	bcc.n	8098b84 <GetData+0x18>
  }
  return ReadDataNbr;
 8098bb4:	697b      	ldr	r3, [r7, #20]
}
 8098bb6:	4618      	mov	r0, r3
 8098bb8:	371c      	adds	r7, #28
 8098bba:	46bd      	mov	sp, r7
 8098bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8098bc0:	4770      	bx	lr
 8098bc2:	bf00      	nop
 8098bc4:	2000c770 	.word	0x2000c770

08098bc8 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8098bc8:	b580      	push	{r7, lr}
 8098bca:	af00      	add	r7, sp, #0
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8098bcc:	4807      	ldr	r0, [pc, #28]	; (8098bec <BSP_AUDIO_OUT_Error_CallBack+0x24>)
 8098bce:	f7ec ff25 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 8098bd2:	4907      	ldr	r1, [pc, #28]	; (8098bf0 <BSP_AUDIO_OUT_Error_CallBack+0x28>)
 8098bd4:	200e      	movs	r0, #14
 8098bd6:	f7ed f8ad 	bl	8085d34 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8098bda:	bf00      	nop
 8098bdc:	2002      	movs	r0, #2
 8098bde:	f7eb f95f 	bl	8083ea0 <BSP_PB_GetState>
 8098be2:	4603      	mov	r3, r0
 8098be4:	2b00      	cmp	r3, #0
  {
    return;
 8098be6:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8098be8:	bd80      	pop	{r7, pc}
 8098bea:	bf00      	nop
 8098bec:	ffff0000 	.word	0xffff0000
 8098bf0:	0809e398 	.word	0x0809e398

08098bf4 <AudioRec_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioRec_demo (void)
{
 8098bf4:	b580      	push	{r7, lr}
 8098bf6:	b082      	sub	sp, #8
 8098bf8:	af00      	add	r7, sp, #0
  uint32_t  block_number;

  AudioRec_SetHint();
 8098bfa:	f000 f8f3 	bl	8098de4 <AudioRec_SetHint>

  /* Initialize Audio Recorder */
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8098bfe:	2202      	movs	r2, #2
 8098c00:	2110      	movs	r1, #16
 8098c02:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8098c06:	f7ec f9b1 	bl	8084f6c <BSP_AUDIO_IN_Init>
 8098c0a:	4603      	mov	r3, r0
 8098c0c:	2b00      	cmp	r3, #0
 8098c0e:	d113      	bne.n	8098c38 <AudioRec_demo+0x44>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098c14:	f7ec ff02 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8098c18:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8098c1c:	f7ec fed2 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8098c20:	f7ec fe38 	bl	8085894 <BSP_LCD_GetYSize>
 8098c24:	4603      	mov	r3, r0
 8098c26:	b29b      	uxth	r3, r3
 8098c28:	3b5f      	subs	r3, #95	; 0x5f
 8098c2a:	b299      	uxth	r1, r3
 8098c2c:	2301      	movs	r3, #1
 8098c2e:	4a60      	ldr	r2, [pc, #384]	; (8098db0 <AudioRec_demo+0x1bc>)
 8098c30:	2000      	movs	r0, #0
 8098c32:	f7ec ffbb 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098c36:	e01c      	b.n	8098c72 <AudioRec_demo+0x7e>
  }
  else
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098c3c:	f7ec feee 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8098c40:	485c      	ldr	r0, [pc, #368]	; (8098db4 <AudioRec_demo+0x1c0>)
 8098c42:	f7ec febf 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 8098c46:	f7ec fe25 	bl	8085894 <BSP_LCD_GetYSize>
 8098c4a:	4603      	mov	r3, r0
 8098c4c:	b29b      	uxth	r3, r3
 8098c4e:	3b5f      	subs	r3, #95	; 0x5f
 8098c50:	b299      	uxth	r1, r3
 8098c52:	2301      	movs	r3, #1
 8098c54:	4a58      	ldr	r2, [pc, #352]	; (8098db8 <AudioRec_demo+0x1c4>)
 8098c56:	2000      	movs	r0, #0
 8098c58:	f7ec ffa8 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8098c5c:	f7ec fe1a 	bl	8085894 <BSP_LCD_GetYSize>
 8098c60:	4603      	mov	r3, r0
 8098c62:	b29b      	uxth	r3, r3
 8098c64:	3b50      	subs	r3, #80	; 0x50
 8098c66:	b299      	uxth	r1, r3
 8098c68:	2301      	movs	r3, #1
 8098c6a:	4a54      	ldr	r2, [pc, #336]	; (8098dbc <AudioRec_demo+0x1c8>)
 8098c6c:	2000      	movs	r0, #0
 8098c6e:	f7ec ff9d 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8098c72:	4b53      	ldr	r3, [pc, #332]	; (8098dc0 <AudioRec_demo+0x1cc>)
 8098c74:	2200      	movs	r2, #0
 8098c76:	601a      	str	r2, [r3, #0]

  /* Display the state on the screen */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098c7c:	f7ec fece 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098c80:	4850      	ldr	r0, [pc, #320]	; (8098dc4 <AudioRec_demo+0x1d0>)
 8098c82:	f7ec fe9f 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 8098c86:	f7ec fe05 	bl	8085894 <BSP_LCD_GetYSize>
 8098c8a:	4603      	mov	r3, r0
 8098c8c:	b29b      	uxth	r3, r3
 8098c8e:	3b50      	subs	r3, #80	; 0x50
 8098c90:	b299      	uxth	r1, r3
 8098c92:	2301      	movs	r3, #1
 8098c94:	4a4c      	ldr	r2, [pc, #304]	; (8098dc8 <AudioRec_demo+0x1d4>)
 8098c96:	2000      	movs	r0, #0
 8098c98:	f7ec ff88 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Start Recording */
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8098c9c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8098ca0:	484a      	ldr	r0, [pc, #296]	; (8098dcc <AudioRec_demo+0x1d8>)
 8098ca2:	f7ec fa5b 	bl	808515c <BSP_AUDIO_IN_Record>

  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8098ca6:	2300      	movs	r3, #0
 8098ca8:	607b      	str	r3, [r7, #4]
 8098caa:	e042      	b.n	8098d32 <AudioRec_demo+0x13e>
  {
    /* Wait end of half block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
    {
      if (CheckForUserInput() > 0)
 8098cac:	f001 ffe6 	bl	809ac7c <CheckForUserInput>
 8098cb0:	4603      	mov	r3, r0
 8098cb2:	2b00      	cmp	r3, #0
 8098cb4:	d003      	beq.n	8098cbe <AudioRec_demo+0xca>
      {
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8098cb6:	2002      	movs	r0, #2
 8098cb8:	f7eb febe 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        return;
 8098cbc:	e074      	b.n	8098da8 <AudioRec_demo+0x1b4>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8098cbe:	4b40      	ldr	r3, [pc, #256]	; (8098dc0 <AudioRec_demo+0x1cc>)
 8098cc0:	681b      	ldr	r3, [r3, #0]
 8098cc2:	2b01      	cmp	r3, #1
 8098cc4:	d1f2      	bne.n	8098cac <AudioRec_demo+0xb8>
      }
    }
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8098cc6:	4b3e      	ldr	r3, [pc, #248]	; (8098dc0 <AudioRec_demo+0x1cc>)
 8098cc8:	2200      	movs	r2, #0
 8098cca:	601a      	str	r2, [r3, #0]
    /* Copy recorded 1st half block in SDRAM */
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8098ccc:	687a      	ldr	r2, [r7, #4]
 8098cce:	4613      	mov	r3, r2
 8098cd0:	03db      	lsls	r3, r3, #15
 8098cd2:	1a9b      	subs	r3, r3, r2
 8098cd4:	009b      	lsls	r3, r3, #2
 8098cd6:	461a      	mov	r2, r3
 8098cd8:	4b3d      	ldr	r3, [pc, #244]	; (8098dd0 <AudioRec_demo+0x1dc>)
 8098cda:	4413      	add	r3, r2
 8098cdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8098ce0:	493a      	ldr	r1, [pc, #232]	; (8098dcc <AudioRec_demo+0x1d8>)
 8098ce2:	4618      	mov	r0, r3
 8098ce4:	f003 f88e 	bl	809be04 <memcpy>
           internal_buffer,
           AUDIO_BLOCK_SIZE);

    /* Wait end of one block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8098ce8:	e008      	b.n	8098cfc <AudioRec_demo+0x108>
    {
      if (CheckForUserInput() > 0)
 8098cea:	f001 ffc7 	bl	809ac7c <CheckForUserInput>
 8098cee:	4603      	mov	r3, r0
 8098cf0:	2b00      	cmp	r3, #0
 8098cf2:	d003      	beq.n	8098cfc <AudioRec_demo+0x108>
      {
        /* Stop Player before close Test */
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8098cf4:	2002      	movs	r0, #2
 8098cf6:	f7eb fe9f 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
        return;
 8098cfa:	e055      	b.n	8098da8 <AudioRec_demo+0x1b4>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8098cfc:	4b30      	ldr	r3, [pc, #192]	; (8098dc0 <AudioRec_demo+0x1cc>)
 8098cfe:	681b      	ldr	r3, [r3, #0]
 8098d00:	2b02      	cmp	r3, #2
 8098d02:	d1f2      	bne.n	8098cea <AudioRec_demo+0xf6>
      }
    }
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8098d04:	4b2e      	ldr	r3, [pc, #184]	; (8098dc0 <AudioRec_demo+0x1cc>)
 8098d06:	2200      	movs	r2, #0
 8098d08:	601a      	str	r2, [r3, #0]
    /* Copy recorded 2nd half block in SDRAM */
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8098d0a:	687a      	ldr	r2, [r7, #4]
 8098d0c:	4613      	mov	r3, r2
 8098d0e:	03db      	lsls	r3, r3, #15
 8098d10:	1a9b      	subs	r3, r3, r2
 8098d12:	009b      	lsls	r3, r3, #2
 8098d14:	4619      	mov	r1, r3
 8098d16:	4a2e      	ldr	r2, [pc, #184]	; (8098dd0 <AudioRec_demo+0x1dc>)
 8098d18:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8098d1c:	4413      	add	r3, r2
 8098d1e:	440b      	add	r3, r1
 8098d20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8098d24:	492b      	ldr	r1, [pc, #172]	; (8098dd4 <AudioRec_demo+0x1e0>)
 8098d26:	4618      	mov	r0, r3
 8098d28:	f003 f86c 	bl	809be04 <memcpy>
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8098d2c:	687b      	ldr	r3, [r7, #4]
 8098d2e:	3301      	adds	r3, #1
 8098d30:	607b      	str	r3, [r7, #4]
 8098d32:	687b      	ldr	r3, [r7, #4]
 8098d34:	2b03      	cmp	r3, #3
 8098d36:	d9c2      	bls.n	8098cbe <AudioRec_demo+0xca>
           (uint16_t *)(&internal_buffer[AUDIO_BLOCK_SIZE/2]),
           AUDIO_BLOCK_SIZE);
  }

  /* Stop recorder */
  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8098d38:	2002      	movs	r0, #2
 8098d3a:	f7ec fa27 	bl	808518c <BSP_AUDIO_IN_Stop>

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8098d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098d42:	f7ec fe6b 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098d46:	481f      	ldr	r0, [pc, #124]	; (8098dc4 <AudioRec_demo+0x1d0>)
 8098d48:	f7ec fe3c 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 8098d4c:	f7ec fda2 	bl	8085894 <BSP_LCD_GetYSize>
 8098d50:	4603      	mov	r3, r0
 8098d52:	b29b      	uxth	r3, r3
 8098d54:	3b41      	subs	r3, #65	; 0x41
 8098d56:	b299      	uxth	r1, r3
 8098d58:	2301      	movs	r3, #1
 8098d5a:	4a1f      	ldr	r2, [pc, #124]	; (8098dd8 <AudioRec_demo+0x1e4>)
 8098d5c:	2000      	movs	r0, #0
 8098d5e:	f7ec ff25 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* -----------Start Playback -------------- */
  /* Initialize audio IN at REC_FREQ*/ 
  //BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 70, DEFAULT_AUDIO_IN_FREQ);
 8098d62:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8098d66:	2146      	movs	r1, #70	; 0x46
 8098d68:	2003      	movs	r0, #3
 8098d6a:	f7eb fdbd 	bl	80848e8 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8098d6e:	2005      	movs	r0, #5
 8098d70:	f7eb fec2 	bl	8084af8 <BSP_AUDIO_OUT_SetAudioFrameSlot>

  /* Play the recorded buffer*/
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 8098d74:	4b16      	ldr	r3, [pc, #88]	; (8098dd0 <AudioRec_demo+0x1dc>)
 8098d76:	4919      	ldr	r1, [pc, #100]	; (8098ddc <AudioRec_demo+0x1e8>)
 8098d78:	4618      	mov	r0, r3
 8098d7a:	f7fb fc63 	bl	8094644 <AUDIO_Start>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t *)"PLAYBACK DONE", CENTER_MODE);
 8098d7e:	f7ec fd89 	bl	8085894 <BSP_LCD_GetYSize>
 8098d82:	4603      	mov	r3, r0
 8098d84:	b29b      	uxth	r3, r3
 8098d86:	3b28      	subs	r3, #40	; 0x28
 8098d88:	b299      	uxth	r1, r3
 8098d8a:	2301      	movs	r3, #1
 8098d8c:	4a14      	ldr	r2, [pc, #80]	; (8098de0 <AudioRec_demo+0x1ec>)
 8098d8e:	2000      	movs	r0, #0
 8098d90:	f7ec ff0c 	bl	8085bac <BSP_LCD_DisplayStringAt>

  while (1)
  {
    Audio_Test_Process();
 8098d94:	f7ff fe76 	bl	8098a84 <Audio_Test_Process>
    
    if (CheckForUserInput() > 0)
 8098d98:	f001 ff70 	bl	809ac7c <CheckForUserInput>
 8098d9c:	4603      	mov	r3, r0
 8098d9e:	2b00      	cmp	r3, #0
 8098da0:	d0f8      	beq.n	8098d94 <AudioRec_demo+0x1a0>
    {
      /* Stop Player before close Test */
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8098da2:	2002      	movs	r0, #2
 8098da4:	f7eb fe48 	bl	8084a38 <BSP_AUDIO_OUT_Stop>
      return;
    }
  }
}
 8098da8:	3708      	adds	r7, #8
 8098daa:	46bd      	mov	sp, r7
 8098dac:	bd80      	pop	{r7, pc}
 8098dae:	bf00      	nop
 8098db0:	0809e3b0 	.word	0x0809e3b0
 8098db4:	ffff0000 	.word	0xffff0000
 8098db8:	0809e3cc 	.word	0x0809e3cc
 8098dbc:	0809e3e8 	.word	0x0809e3e8
 8098dc0:	2002f290 	.word	0x2002f290
 8098dc4:	ff0000ff 	.word	0xff0000ff
 8098dc8:	0809e400 	.word	0x0809e400
 8098dcc:	2000c778 	.word	0x2000c778
 8098dd0:	c007f800 	.word	0xc007f800
 8098dd4:	2001c776 	.word	0x2001c776
 8098dd8:	0809e41c 	.word	0x0809e41c
 8098ddc:	0007fff0 	.word	0x0007fff0
 8098de0:	0809e440 	.word	0x0809e440

08098de4 <AudioRec_SetHint>:
  * @brief  Display Audio Record demo hint
  * @param  None
  * @retval None
  */
static void AudioRec_SetHint(void)
{
 8098de4:	b598      	push	{r3, r4, r7, lr}
 8098de6:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8098de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098dec:	f7ec fe60 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098df0:	4825      	ldr	r0, [pc, #148]	; (8098e88 <AudioRec_SetHint+0xa4>)
 8098df2:	f7ec fde7 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8098df6:	f7ec fd39 	bl	808586c <BSP_LCD_GetXSize>
 8098dfa:	4603      	mov	r3, r0
 8098dfc:	b29a      	uxth	r2, r3
 8098dfe:	235a      	movs	r3, #90	; 0x5a
 8098e00:	2100      	movs	r1, #0
 8098e02:	2000      	movs	r0, #0
 8098e04:	f7ed fce4 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8098e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8098e0c:	f7ec fdda 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8098e10:	481d      	ldr	r0, [pc, #116]	; (8098e88 <AudioRec_SetHint+0xa4>)
 8098e12:	f7ec fe03 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8098e16:	481d      	ldr	r0, [pc, #116]	; (8098e8c <AudioRec_SetHint+0xa8>)
 8098e18:	f7ec fe1a 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD EXAMPLE", CENTER_MODE);
 8098e1c:	2301      	movs	r3, #1
 8098e1e:	4a1c      	ldr	r2, [pc, #112]	; (8098e90 <AudioRec_SetHint+0xac>)
 8098e20:	2100      	movs	r1, #0
 8098e22:	2000      	movs	r0, #0
 8098e24:	f7ec fec2 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8098e28:	481a      	ldr	r0, [pc, #104]	; (8098e94 <AudioRec_SetHint+0xb0>)
 8098e2a:	f7ec fe11 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8098e2e:	2301      	movs	r3, #1
 8098e30:	4a19      	ldr	r2, [pc, #100]	; (8098e98 <AudioRec_SetHint+0xb4>)
 8098e32:	211e      	movs	r1, #30
 8098e34:	2000      	movs	r0, #0
 8098e36:	f7ec feb9 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8098e3a:	4813      	ldr	r0, [pc, #76]	; (8098e88 <AudioRec_SetHint+0xa4>)
 8098e3c:	f7ec fdc2 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8098e40:	f7ec fd14 	bl	808586c <BSP_LCD_GetXSize>
 8098e44:	4603      	mov	r3, r0
 8098e46:	b29b      	uxth	r3, r3
 8098e48:	3b14      	subs	r3, #20
 8098e4a:	b29c      	uxth	r4, r3
 8098e4c:	f7ec fd22 	bl	8085894 <BSP_LCD_GetYSize>
 8098e50:	4603      	mov	r3, r0
 8098e52:	b29b      	uxth	r3, r3
 8098e54:	3b6e      	subs	r3, #110	; 0x6e
 8098e56:	b29b      	uxth	r3, r3
 8098e58:	4622      	mov	r2, r4
 8098e5a:	2164      	movs	r1, #100	; 0x64
 8098e5c:	200a      	movs	r0, #10
 8098e5e:	f7ed f925 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8098e62:	f7ec fd03 	bl	808586c <BSP_LCD_GetXSize>
 8098e66:	4603      	mov	r3, r0
 8098e68:	b29b      	uxth	r3, r3
 8098e6a:	3b16      	subs	r3, #22
 8098e6c:	b29c      	uxth	r4, r3
 8098e6e:	f7ec fd11 	bl	8085894 <BSP_LCD_GetYSize>
 8098e72:	4603      	mov	r3, r0
 8098e74:	b29b      	uxth	r3, r3
 8098e76:	3b70      	subs	r3, #112	; 0x70
 8098e78:	b29b      	uxth	r3, r3
 8098e7a:	4622      	mov	r2, r4
 8098e7c:	2165      	movs	r1, #101	; 0x65
 8098e7e:	200b      	movs	r0, #11
 8098e80:	f7ed f914 	bl	80860ac <BSP_LCD_DrawRect>

}
 8098e84:	bf00      	nop
 8098e86:	bd98      	pop	{r3, r4, r7, pc}
 8098e88:	ff0000ff 	.word	0xff0000ff
 8098e8c:	2000b36c 	.word	0x2000b36c
 8098e90:	0809e450 	.word	0x0809e450
 8098e94:	2000b354 	.word	0x2000b354
 8098e98:	0809e468 	.word	0x0809e468

08098e9c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Manages the DMA Transfer complete interrupt.
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8098e9c:	b480      	push	{r7}
 8098e9e:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8098ea0:	4b03      	ldr	r3, [pc, #12]	; (8098eb0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8098ea2:	2202      	movs	r2, #2
 8098ea4:	601a      	str	r2, [r3, #0]
  return;
 8098ea6:	bf00      	nop
}
 8098ea8:	46bd      	mov	sp, r7
 8098eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8098eae:	4770      	bx	lr
 8098eb0:	2002f290 	.word	0x2002f290

08098eb4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8098eb4:	b480      	push	{r7}
 8098eb6:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8098eb8:	4b03      	ldr	r3, [pc, #12]	; (8098ec8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8098eba:	2201      	movs	r2, #1
 8098ebc:	601a      	str	r2, [r3, #0]
  return;
 8098ebe:	bf00      	nop
}
 8098ec0:	46bd      	mov	sp, r7
 8098ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8098ec6:	4770      	bx	lr
 8098ec8:	2002f290 	.word	0x2002f290

08098ecc <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8098ecc:	b580      	push	{r7, lr}
 8098ece:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8098ed0:	480c      	ldr	r0, [pc, #48]	; (8098f04 <BSP_AUDIO_IN_Error_CallBack+0x38>)
 8098ed2:	f7ec fda3 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8098ed6:	f7ec fdd5 	bl	8085a84 <BSP_LCD_GetFont>
 8098eda:	4603      	mov	r3, r0
 8098edc:	88db      	ldrh	r3, [r3, #6]
 8098ede:	461a      	mov	r2, r3
 8098ee0:	00d2      	lsls	r2, r2, #3
 8098ee2:	1ad3      	subs	r3, r2, r3
 8098ee4:	005b      	lsls	r3, r3, #1
 8098ee6:	b299      	uxth	r1, r3
 8098ee8:	2301      	movs	r3, #1
 8098eea:	4a07      	ldr	r2, [pc, #28]	; (8098f08 <BSP_AUDIO_IN_Error_CallBack+0x3c>)
 8098eec:	2000      	movs	r0, #0
 8098eee:	f7ec fe5d 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8098ef2:	bf00      	nop
 8098ef4:	2002      	movs	r0, #2
 8098ef6:	f7ea ffd3 	bl	8083ea0 <BSP_PB_GetState>
 8098efa:	4603      	mov	r3, r0
 8098efc:	2b00      	cmp	r3, #0
  {
    return;
 8098efe:	bf00      	nop
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8098f00:	bd80      	pop	{r7, pc}
 8098f02:	bf00      	nop
 8098f04:	ffff0000 	.word	0xffff0000
 8098f08:	0809e488 	.word	0x0809e488

08098f0c <FATFSSD_demo>:
 * @brief  SD Demo
 * @param  None
 * @retval None
 */
void FATFSSD_demo (void)
{
 8098f0c:	b580      	push	{r7, lr}
 8098f0e:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8098f12:	af00      	add	r7, sp, #0
	uint8_t SD_state = MSD_OK;
 8098f14:	2300      	movs	r3, #0
 8098f16:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527
	FATFS FATFS_Obj;
	char buffer[128];
	uint br;
	char strbuff[60];

	SD_SetHint();
 8098f1a:	f000 f905 	bl	8099128 <SD_SetHint>
	SD_state = BSP_SD_Init();
 8098f1e:	f7ef f995 	bl	808824c <BSP_SD_Init>
 8098f22:	4603      	mov	r3, r0
 8098f24:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527

	if (SD_state != MSD_OK)
 8098f28:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 8098f2c:	2b00      	cmp	r3, #0
 8098f2e:	d017      	beq.n	8098f60 <FATFSSD_demo+0x54>
	{
		if(SD_state == MSD_ERROR_SD_NOT_PRESENT)
 8098f30:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 8098f34:	2b02      	cmp	r3, #2
 8098f36:	d106      	bne.n	8098f46 <FATFSSD_demo+0x3a>
		{
			BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 8098f38:	2303      	movs	r3, #3
 8098f3a:	4a6b      	ldr	r2, [pc, #428]	; (80990e8 <FATFSSD_demo+0x1dc>)
 8098f3c:	2164      	movs	r1, #100	; 0x64
 8098f3e:	2014      	movs	r0, #20
 8098f40:	f7ec fe34 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098f44:	e005      	b.n	8098f52 <FATFSSD_demo+0x46>
		}
		else
		{
			BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 8098f46:	2303      	movs	r3, #3
 8098f48:	4a68      	ldr	r2, [pc, #416]	; (80990ec <FATFSSD_demo+0x1e0>)
 8098f4a:	2164      	movs	r1, #100	; 0x64
 8098f4c:	2014      	movs	r0, #20
 8098f4e:	f7ec fe2d 	bl	8085bac <BSP_LCD_DisplayStringAt>
		}
		BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 8098f52:	2303      	movs	r3, #3
 8098f54:	4a66      	ldr	r2, [pc, #408]	; (80990f0 <FATFSSD_demo+0x1e4>)
 8098f56:	2173      	movs	r1, #115	; 0x73
 8098f58:	2014      	movs	r0, #20
 8098f5a:	f7ec fe27 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098f5e:	e005      	b.n	8098f6c <FATFSSD_demo+0x60>
	}
	else
	{
		BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : OK.", LEFT_MODE);
 8098f60:	2303      	movs	r3, #3
 8098f62:	4a64      	ldr	r2, [pc, #400]	; (80990f4 <FATFSSD_demo+0x1e8>)
 8098f64:	2164      	movs	r1, #100	; 0x64
 8098f66:	2014      	movs	r0, #20
 8098f68:	f7ec fe20 	bl	8085bac <BSP_LCD_DisplayStringAt>
	}

	res = f_mount(&FATFS_Obj, "0:" ,0);
 8098f6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8098f70:	2200      	movs	r2, #0
 8098f72:	4961      	ldr	r1, [pc, #388]	; (80990f8 <FATFSSD_demo+0x1ec>)
 8098f74:	4618      	mov	r0, r3
 8098f76:	f7fe fb73 	bl	8097660 <f_mount>
 8098f7a:	4603      	mov	r3, r0
 8098f7c:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526

	res = f_open(&fp, "/essai.txt", FA_READ|FA_WRITE);
 8098f80:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8098f84:	2203      	movs	r2, #3
 8098f86:	495d      	ldr	r1, [pc, #372]	; (80990fc <FATFSSD_demo+0x1f0>)
 8098f88:	4618      	mov	r0, r3
 8098f8a:	f7fe fba9 	bl	80976e0 <f_open>
 8098f8e:	4603      	mov	r3, r0
 8098f90:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526
	if (res != FR_OK) BSP_LCD_DisplayStringAt(20, 120, (uint8_t *)"File opening : Failed.", LEFT_MODE);
 8098f94:	f897 3526 	ldrb.w	r3, [r7, #1318]	; 0x526
 8098f98:	b2db      	uxtb	r3, r3
 8098f9a:	2b00      	cmp	r3, #0
 8098f9c:	d006      	beq.n	8098fac <FATFSSD_demo+0xa0>
 8098f9e:	2303      	movs	r3, #3
 8098fa0:	4a57      	ldr	r2, [pc, #348]	; (8099100 <FATFSSD_demo+0x1f4>)
 8098fa2:	2178      	movs	r1, #120	; 0x78
 8098fa4:	2014      	movs	r0, #20
 8098fa6:	f7ec fe01 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098faa:	e005      	b.n	8098fb8 <FATFSSD_demo+0xac>
	else BSP_LCD_DisplayStringAt(20, 120, (uint8_t *)"File opening : OK.", LEFT_MODE);
 8098fac:	2303      	movs	r3, #3
 8098fae:	4a55      	ldr	r2, [pc, #340]	; (8099104 <FATFSSD_demo+0x1f8>)
 8098fb0:	2178      	movs	r1, #120	; 0x78
 8098fb2:	2014      	movs	r0, #20
 8098fb4:	f7ec fdfa 	bl	8085bac <BSP_LCD_DisplayStringAt>

	res=f_read(&fp, buffer,  20, &br);
 8098fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8098fbc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8098fc0:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 8098fc4:	2214      	movs	r2, #20
 8098fc6:	f7fe fd0e 	bl	80979e6 <f_read>
 8098fca:	4603      	mov	r3, r0
 8098fcc:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526
	if (res != FR_OK) BSP_LCD_DisplayStringAt(20, 140, (uint8_t *)"File read : Failed.", LEFT_MODE);
 8098fd0:	f897 3526 	ldrb.w	r3, [r7, #1318]	; 0x526
 8098fd4:	b2db      	uxtb	r3, r3
 8098fd6:	2b00      	cmp	r3, #0
 8098fd8:	d006      	beq.n	8098fe8 <FATFSSD_demo+0xdc>
 8098fda:	2303      	movs	r3, #3
 8098fdc:	4a4a      	ldr	r2, [pc, #296]	; (8099108 <FATFSSD_demo+0x1fc>)
 8098fde:	218c      	movs	r1, #140	; 0x8c
 8098fe0:	2014      	movs	r0, #20
 8098fe2:	f7ec fde3 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8098fe6:	e026      	b.n	8099036 <FATFSSD_demo+0x12a>
	else
	{
		buffer[br]='\0';
 8098fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8098fec:	681b      	ldr	r3, [r3, #0]
 8098fee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8098ff2:	2100      	movs	r1, #0
 8098ff4:	54d1      	strb	r1, [r2, r3]
		if (buffer[br-1] == '\n') buffer[br-1]='\0';
 8098ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8098ffa:	681b      	ldr	r3, [r3, #0]
 8098ffc:	3b01      	subs	r3, #1
 8098ffe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8099002:	5cd3      	ldrb	r3, [r2, r3]
 8099004:	2b0a      	cmp	r3, #10
 8099006:	d107      	bne.n	8099018 <FATFSSD_demo+0x10c>
 8099008:	f107 0340 	add.w	r3, r7, #64	; 0x40
 809900c:	681b      	ldr	r3, [r3, #0]
 809900e:	3b01      	subs	r3, #1
 8099010:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8099014:	2100      	movs	r1, #0
 8099016:	54d1      	strb	r1, [r2, r3]
		sprintf((char*)&strbuff, "File read(%i): OK (%s).", br, (char*)buffer);
 8099018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 809901c:	681a      	ldr	r2, [r3, #0]
 809901e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8099022:	1d38      	adds	r0, r7, #4
 8099024:	4939      	ldr	r1, [pc, #228]	; (809910c <FATFSSD_demo+0x200>)
 8099026:	f003 fb5d 	bl	809c6e4 <siprintf>
		BSP_LCD_DisplayStringAt(20, 140, (uint8_t *)strbuff, LEFT_MODE);
 809902a:	1d3a      	adds	r2, r7, #4
 809902c:	2303      	movs	r3, #3
 809902e:	218c      	movs	r1, #140	; 0x8c
 8099030:	2014      	movs	r0, #20
 8099032:	f7ec fdbb 	bl	8085bac <BSP_LCD_DisplayStringAt>
	}

	res=f_write(&fp, (char*)"/hello",  strlen("/hello"), &br);
 8099036:	f107 0340 	add.w	r3, r7, #64	; 0x40
 809903a:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 809903e:	2206      	movs	r2, #6
 8099040:	4933      	ldr	r1, [pc, #204]	; (8099110 <FATFSSD_demo+0x204>)
 8099042:	f7fe fe03 	bl	8097c4c <f_write>
 8099046:	4603      	mov	r3, r0
 8099048:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526
	if (res != FR_OK) BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"File write : Failed.", LEFT_MODE);
 809904c:	f897 3526 	ldrb.w	r3, [r7, #1318]	; 0x526
 8099050:	b2db      	uxtb	r3, r3
 8099052:	2b00      	cmp	r3, #0
 8099054:	d006      	beq.n	8099064 <FATFSSD_demo+0x158>
 8099056:	2303      	movs	r3, #3
 8099058:	4a2e      	ldr	r2, [pc, #184]	; (8099114 <FATFSSD_demo+0x208>)
 809905a:	21a0      	movs	r1, #160	; 0xa0
 809905c:	2014      	movs	r0, #20
 809905e:	f7ec fda5 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099062:	e00d      	b.n	8099080 <FATFSSD_demo+0x174>
	else
	{
		sprintf((char*)&strbuff, "File write(%i): OK.", br);
 8099064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8099068:	681a      	ldr	r2, [r3, #0]
 809906a:	1d3b      	adds	r3, r7, #4
 809906c:	492a      	ldr	r1, [pc, #168]	; (8099118 <FATFSSD_demo+0x20c>)
 809906e:	4618      	mov	r0, r3
 8099070:	f003 fb38 	bl	809c6e4 <siprintf>
		BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)strbuff, LEFT_MODE);
 8099074:	1d3a      	adds	r2, r7, #4
 8099076:	2303      	movs	r3, #3
 8099078:	21a0      	movs	r1, #160	; 0xa0
 809907a:	2014      	movs	r0, #20
 809907c:	f7ec fd96 	bl	8085bac <BSP_LCD_DisplayStringAt>
	}

	res= f_sync(&fp);
 8099080:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8099084:	4618      	mov	r0, r3
 8099086:	f7fe ff4a 	bl	8097f1e <f_sync>
 809908a:	4603      	mov	r3, r0
 809908c:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526
	res =f_close(&fp);
 8099090:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8099094:	4618      	mov	r0, r3
 8099096:	f7fe ffc0 	bl	809801a <f_close>
 809909a:	4603      	mov	r3, r0
 809909c:	f887 3526 	strb.w	r3, [r7, #1318]	; 0x526
	if (res != FR_OK) BSP_LCD_DisplayStringAt(20, 180, (uint8_t *)"File close : Failed.", LEFT_MODE);
 80990a0:	f897 3526 	ldrb.w	r3, [r7, #1318]	; 0x526
 80990a4:	b2db      	uxtb	r3, r3
 80990a6:	2b00      	cmp	r3, #0
 80990a8:	d006      	beq.n	80990b8 <FATFSSD_demo+0x1ac>
 80990aa:	2303      	movs	r3, #3
 80990ac:	4a1b      	ldr	r2, [pc, #108]	; (809911c <FATFSSD_demo+0x210>)
 80990ae:	21b4      	movs	r1, #180	; 0xb4
 80990b0:	2014      	movs	r0, #20
 80990b2:	f7ec fd7b 	bl	8085bac <BSP_LCD_DisplayStringAt>
 80990b6:	e005      	b.n	80990c4 <FATFSSD_demo+0x1b8>
	else BSP_LCD_DisplayStringAt(20, 180, (uint8_t *)"File close : OK.", LEFT_MODE);
 80990b8:	2303      	movs	r3, #3
 80990ba:	4a19      	ldr	r2, [pc, #100]	; (8099120 <FATFSSD_demo+0x214>)
 80990bc:	21b4      	movs	r1, #180	; 0xb4
 80990be:	2014      	movs	r0, #20
 80990c0:	f7ec fd74 	bl	8085bac <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(20, 200, (uint8_t *)"Test finished !", LEFT_MODE);
 80990c4:	2303      	movs	r3, #3
 80990c6:	4a17      	ldr	r2, [pc, #92]	; (8099124 <FATFSSD_demo+0x218>)
 80990c8:	21c8      	movs	r1, #200	; 0xc8
 80990ca:	2014      	movs	r0, #20
 80990cc:	f7ec fd6e 	bl	8085bac <BSP_LCD_DisplayStringAt>
	while (1){
		if (CheckForUserInput() > 0)
 80990d0:	f001 fdd4 	bl	809ac7c <CheckForUserInput>
 80990d4:	4603      	mov	r3, r0
 80990d6:	2b00      	cmp	r3, #0
 80990d8:	d100      	bne.n	80990dc <FATFSSD_demo+0x1d0>
 80990da:	e7f9      	b.n	80990d0 <FATFSSD_demo+0x1c4>
		{
			return;
 80990dc:	bf00      	nop
		}
	}
}
 80990de:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80990e2:	46bd      	mov	sp, r7
 80990e4:	bd80      	pop	{r7, pc}
 80990e6:	bf00      	nop
 80990e8:	0809e4a0 	.word	0x0809e4a0
 80990ec:	0809e4cc 	.word	0x0809e4cc
 80990f0:	0809e4e8 	.word	0x0809e4e8
 80990f4:	0809e4fc 	.word	0x0809e4fc
 80990f8:	0809e514 	.word	0x0809e514
 80990fc:	0809e518 	.word	0x0809e518
 8099100:	0809e524 	.word	0x0809e524
 8099104:	0809e53c 	.word	0x0809e53c
 8099108:	0809e550 	.word	0x0809e550
 809910c:	0809e564 	.word	0x0809e564
 8099110:	0809e57c 	.word	0x0809e57c
 8099114:	0809e584 	.word	0x0809e584
 8099118:	0809e59c 	.word	0x0809e59c
 809911c:	0809e5b0 	.word	0x0809e5b0
 8099120:	0809e5c8 	.word	0x0809e5c8
 8099124:	0809e5dc 	.word	0x0809e5dc

08099128 <SD_SetHint>:
 * @brief  Display SD Demo Hint
 * @param  None
 * @retval None
 */
static void SD_SetHint(void)
{
 8099128:	b598      	push	{r3, r4, r7, lr}
 809912a:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 809912c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099130:	f7ec fcbe 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set LCD Demo description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8099134:	482f      	ldr	r0, [pc, #188]	; (80991f4 <SD_SetHint+0xcc>)
 8099136:	f7ec fc45 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809913a:	f7ec fb97 	bl	808586c <BSP_LCD_GetXSize>
 809913e:	4603      	mov	r3, r0
 8099140:	b29a      	uxth	r2, r3
 8099142:	2350      	movs	r3, #80	; 0x50
 8099144:	2100      	movs	r1, #0
 8099146:	2000      	movs	r0, #0
 8099148:	f7ed fb42 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809914c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099150:	f7ec fc38 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8099154:	4827      	ldr	r0, [pc, #156]	; (80991f4 <SD_SetHint+0xcc>)
 8099156:	f7ec fc61 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 809915a:	4827      	ldr	r0, [pc, #156]	; (80991f8 <SD_SetHint+0xd0>)
 809915c:	f7ec fc78 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"FATFS", CENTER_MODE);
 8099160:	2301      	movs	r3, #1
 8099162:	4a26      	ldr	r2, [pc, #152]	; (80991fc <SD_SetHint+0xd4>)
 8099164:	2100      	movs	r1, #0
 8099166:	2000      	movs	r0, #0
 8099168:	f7ec fd20 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 809916c:	4824      	ldr	r0, [pc, #144]	; (8099200 <SD_SetHint+0xd8>)
 809916e:	f7ec fc6f 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 8099172:	2301      	movs	r3, #1
 8099174:	4a23      	ldr	r2, [pc, #140]	; (8099204 <SD_SetHint+0xdc>)
 8099176:	211e      	movs	r1, #30
 8099178:	2000      	movs	r0, #0
 809917a:	f7ec fd17 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on the SD card ", CENTER_MODE);
 809917e:	2301      	movs	r3, #1
 8099180:	4a21      	ldr	r2, [pc, #132]	; (8099208 <SD_SetHint+0xe0>)
 8099182:	212d      	movs	r1, #45	; 0x2d
 8099184:	2000      	movs	r0, #0
 8099186:	f7ec fd11 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"using FATFS", CENTER_MODE);
 809918a:	2301      	movs	r3, #1
 809918c:	4a1f      	ldr	r2, [pc, #124]	; (809920c <SD_SetHint+0xe4>)
 809918e:	213c      	movs	r1, #60	; 0x3c
 8099190:	2000      	movs	r0, #0
 8099192:	f7ec fd0b 	bl	8085bac <BSP_LCD_DisplayStringAt>

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8099196:	4817      	ldr	r0, [pc, #92]	; (80991f4 <SD_SetHint+0xcc>)
 8099198:	f7ec fc14 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 809919c:	f7ec fb66 	bl	808586c <BSP_LCD_GetXSize>
 80991a0:	4603      	mov	r3, r0
 80991a2:	b29b      	uxth	r3, r3
 80991a4:	3b14      	subs	r3, #20
 80991a6:	b29c      	uxth	r4, r3
 80991a8:	f7ec fb74 	bl	8085894 <BSP_LCD_GetYSize>
 80991ac:	4603      	mov	r3, r0
 80991ae:	b29b      	uxth	r3, r3
 80991b0:	3b64      	subs	r3, #100	; 0x64
 80991b2:	b29b      	uxth	r3, r3
 80991b4:	4622      	mov	r2, r4
 80991b6:	215a      	movs	r1, #90	; 0x5a
 80991b8:	200a      	movs	r0, #10
 80991ba:	f7ec ff77 	bl	80860ac <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 80991be:	f7ec fb55 	bl	808586c <BSP_LCD_GetXSize>
 80991c2:	4603      	mov	r3, r0
 80991c4:	b29b      	uxth	r3, r3
 80991c6:	3b16      	subs	r3, #22
 80991c8:	b29c      	uxth	r4, r3
 80991ca:	f7ec fb63 	bl	8085894 <BSP_LCD_GetYSize>
 80991ce:	4603      	mov	r3, r0
 80991d0:	b29b      	uxth	r3, r3
 80991d2:	3b66      	subs	r3, #102	; 0x66
 80991d4:	b29b      	uxth	r3, r3
 80991d6:	4622      	mov	r2, r4
 80991d8:	215b      	movs	r1, #91	; 0x5b
 80991da:	200b      	movs	r0, #11
 80991dc:	f7ec ff66 	bl	80860ac <BSP_LCD_DrawRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80991e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80991e4:	f7ec fbee 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80991e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80991ec:	f7ec fc16 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 80991f0:	bf00      	nop
 80991f2:	bd98      	pop	{r3, r4, r7, pc}
 80991f4:	ff0000ff 	.word	0xff0000ff
 80991f8:	2000b36c 	.word	0x2000b36c
 80991fc:	0809e5ec 	.word	0x0809e5ec
 8099200:	2000b354 	.word	0x2000b354
 8099204:	0809e5f4 	.word	0x0809e5f4
 8099208:	0809e614 	.word	0x0809e614
 809920c:	0809e634 	.word	0x0809e634

08099210 <Keys_demo>:
 * @brief  Keys Demo
 * @param  None
 * @retval None
 */
void Keys_demo (void)
{
 8099210:	b580      	push	{r7, lr}
 8099212:	b088      	sub	sp, #32
 8099214:	af00      	add	r7, sp, #0
	uint8_t keys=0;
 8099216:	2300      	movs	r3, #0
 8099218:	77fb      	strb	r3, [r7, #31]
	uint8_t status = KEYS_OK;
 809921a:	2300      	movs	r3, #0
 809921c:	77bb      	strb	r3, [r7, #30]
	char strbuff[30];

	KEYS_SetHint();
 809921e:	f000 f951 	bl	80994c4 <KEYS_SetHint>

	if (status != KEYS_OK)
 8099222:	7fbb      	ldrb	r3, [r7, #30]
 8099224:	2b00      	cmp	r3, #0
 8099226:	d006      	beq.n	8099236 <Keys_demo+0x26>
	{
		BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"Keys init failed.", LEFT_MODE);
 8099228:	2303      	movs	r3, #3
 809922a:	4a9e      	ldr	r2, [pc, #632]	; (80994a4 <Keys_demo+0x294>)
 809922c:	2164      	movs	r1, #100	; 0x64
 809922e:	2014      	movs	r0, #20
 8099230:	f7ec fcbc 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099234:	e005      	b.n	8099242 <Keys_demo+0x32>
	}
	else
	{
		BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"Keys init : OK.", LEFT_MODE);
 8099236:	2303      	movs	r3, #3
 8099238:	4a9b      	ldr	r2, [pc, #620]	; (80994a8 <Keys_demo+0x298>)
 809923a:	2164      	movs	r1, #100	; 0x64
 809923c:	2014      	movs	r0, #20
 809923e:	f7ec fcb5 	bl	8085bac <BSP_LCD_DisplayStringAt>
	}

	if (status == KEYS_OK)
 8099242:	7fbb      	ldrb	r3, [r7, #30]
 8099244:	2b00      	cmp	r3, #0
 8099246:	f040 811d 	bne.w	8099484 <Keys_demo+0x274>
	{
		BSP_LCD_SetFont(&Font20);
 809924a:	4898      	ldr	r0, [pc, #608]	; (80994ac <Keys_demo+0x29c>)
 809924c:	f7ec fc00 	bl	8085a50 <BSP_LCD_SetFont>

		while (BSP_KEYS_GetKeys() != (KEYS_A | KEYS_DOWN))
 8099250:	e112      	b.n	8099478 <Keys_demo+0x268>
		{
			HAL_Delay(100);
 8099252:	2064      	movs	r0, #100	; 0x64
 8099254:	f7ef ff90 	bl	8089178 <HAL_Delay>

			keys=BSP_KEYS_GetKeys();
 8099258:	f7ec f9fa 	bl	8085650 <BSP_KEYS_GetKeys>
 809925c:	4603      	mov	r3, r0
 809925e:	77fb      	strb	r3, [r7, #31]

			sprintf((char*)&strbuff, "A");
 8099260:	463b      	mov	r3, r7
 8099262:	2241      	movs	r2, #65	; 0x41
 8099264:	801a      	strh	r2, [r3, #0]
			if (keys & KEYS_A)
 8099266:	7ffb      	ldrb	r3, [r7, #31]
 8099268:	f003 0308 	and.w	r3, r3, #8
 809926c:	2b00      	cmp	r3, #0
 809926e:	d008      	beq.n	8099282 <Keys_demo+0x72>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099274:	f7ec fba6 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8099278:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809927c:	f7ec fbce 	bl	8085a1c <BSP_LCD_SetBackColor>
 8099280:	e007      	b.n	8099292 <Keys_demo+0x82>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099282:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099286:	f7ec fb9d 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809928a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809928e:	f7ec fbc5 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(320, 180, (uint8_t *)strbuff, LEFT_MODE);
 8099292:	463a      	mov	r2, r7
 8099294:	2303      	movs	r3, #3
 8099296:	21b4      	movs	r1, #180	; 0xb4
 8099298:	f44f 70a0 	mov.w	r0, #320	; 0x140
 809929c:	f7ec fc86 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "B");
 80992a0:	463b      	mov	r3, r7
 80992a2:	2242      	movs	r2, #66	; 0x42
 80992a4:	801a      	strh	r2, [r3, #0]
			if (keys & KEYS_B)
 80992a6:	7ffb      	ldrb	r3, [r7, #31]
 80992a8:	f003 0304 	and.w	r3, r3, #4
 80992ac:	2b00      	cmp	r3, #0
 80992ae:	d008      	beq.n	80992c2 <Keys_demo+0xb2>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80992b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80992b4:	f7ec fb86 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80992b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80992bc:	f7ec fbae 	bl	8085a1c <BSP_LCD_SetBackColor>
 80992c0:	e007      	b.n	80992d2 <Keys_demo+0xc2>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80992c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80992c6:	f7ec fb7d 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80992ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80992ce:	f7ec fba5 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(390, 190, (uint8_t *)strbuff, LEFT_MODE);
 80992d2:	463a      	mov	r2, r7
 80992d4:	2303      	movs	r3, #3
 80992d6:	21be      	movs	r1, #190	; 0xbe
 80992d8:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80992dc:	f7ec fc66 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "X");
 80992e0:	463b      	mov	r3, r7
 80992e2:	2258      	movs	r2, #88	; 0x58
 80992e4:	801a      	strh	r2, [r3, #0]
			if (keys & KEYS_X)
 80992e6:	7ffb      	ldrb	r3, [r7, #31]
 80992e8:	f003 0302 	and.w	r3, r3, #2
 80992ec:	2b00      	cmp	r3, #0
 80992ee:	d008      	beq.n	8099302 <Keys_demo+0xf2>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80992f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80992f4:	f7ec fb66 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80992f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80992fc:	f7ec fb8e 	bl	8085a1c <BSP_LCD_SetBackColor>
 8099300:	e007      	b.n	8099312 <Keys_demo+0x102>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099302:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099306:	f7ec fb5d 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809930a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809930e:	f7ec fb85 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(320, 140, (uint8_t *)strbuff, LEFT_MODE);
 8099312:	463a      	mov	r2, r7
 8099314:	2303      	movs	r3, #3
 8099316:	218c      	movs	r1, #140	; 0x8c
 8099318:	f44f 70a0 	mov.w	r0, #320	; 0x140
 809931c:	f7ec fc46 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "Y");
 8099320:	463b      	mov	r3, r7
 8099322:	2259      	movs	r2, #89	; 0x59
 8099324:	801a      	strh	r2, [r3, #0]
			if (keys & KEYS_Y)
 8099326:	7ffb      	ldrb	r3, [r7, #31]
 8099328:	f003 0301 	and.w	r3, r3, #1
 809932c:	2b00      	cmp	r3, #0
 809932e:	d008      	beq.n	8099342 <Keys_demo+0x132>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099334:	f7ec fb46 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8099338:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809933c:	f7ec fb6e 	bl	8085a1c <BSP_LCD_SetBackColor>
 8099340:	e007      	b.n	8099352 <Keys_demo+0x142>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099342:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099346:	f7ec fb3d 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809934a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809934e:	f7ec fb65 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(390, 150, (uint8_t *)strbuff, LEFT_MODE);
 8099352:	463a      	mov	r2, r7
 8099354:	2303      	movs	r3, #3
 8099356:	2196      	movs	r1, #150	; 0x96
 8099358:	f44f 70c3 	mov.w	r0, #390	; 0x186
 809935c:	f7ec fc26 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "Up");
 8099360:	463b      	mov	r3, r7
 8099362:	4a53      	ldr	r2, [pc, #332]	; (80994b0 <Keys_demo+0x2a0>)
 8099364:	6812      	ldr	r2, [r2, #0]
 8099366:	4611      	mov	r1, r2
 8099368:	8019      	strh	r1, [r3, #0]
 809936a:	3302      	adds	r3, #2
 809936c:	0c12      	lsrs	r2, r2, #16
 809936e:	701a      	strb	r2, [r3, #0]
			if (keys & KEYS_UP)
 8099370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8099374:	2b00      	cmp	r3, #0
 8099376:	da08      	bge.n	809938a <Keys_demo+0x17a>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809937c:	f7ec fb22 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8099380:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099384:	f7ec fb4a 	bl	8085a1c <BSP_LCD_SetBackColor>
 8099388:	e007      	b.n	809939a <Keys_demo+0x18a>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809938a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809938e:	f7ec fb19 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8099392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099396:	f7ec fb41 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(100, 130, (uint8_t *)strbuff, LEFT_MODE);
 809939a:	463a      	mov	r2, r7
 809939c:	2303      	movs	r3, #3
 809939e:	2182      	movs	r1, #130	; 0x82
 80993a0:	2064      	movs	r0, #100	; 0x64
 80993a2:	f7ec fc03 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "Down");
 80993a6:	463b      	mov	r3, r7
 80993a8:	4a42      	ldr	r2, [pc, #264]	; (80994b4 <Keys_demo+0x2a4>)
 80993aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80993ae:	6018      	str	r0, [r3, #0]
 80993b0:	3304      	adds	r3, #4
 80993b2:	7019      	strb	r1, [r3, #0]
			if (keys & KEYS_DOWN)
 80993b4:	7ffb      	ldrb	r3, [r7, #31]
 80993b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80993ba:	2b00      	cmp	r3, #0
 80993bc:	d008      	beq.n	80993d0 <Keys_demo+0x1c0>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80993be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80993c2:	f7ec faff 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80993c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80993ca:	f7ec fb27 	bl	8085a1c <BSP_LCD_SetBackColor>
 80993ce:	e007      	b.n	80993e0 <Keys_demo+0x1d0>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80993d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80993d4:	f7ec faf6 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80993d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80993dc:	f7ec fb1e 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(80, 190, (uint8_t *)strbuff, LEFT_MODE);
 80993e0:	463a      	mov	r2, r7
 80993e2:	2303      	movs	r3, #3
 80993e4:	21be      	movs	r1, #190	; 0xbe
 80993e6:	2050      	movs	r0, #80	; 0x50
 80993e8:	f7ec fbe0 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "Left");
 80993ec:	463b      	mov	r3, r7
 80993ee:	4a32      	ldr	r2, [pc, #200]	; (80994b8 <Keys_demo+0x2a8>)
 80993f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80993f4:	6018      	str	r0, [r3, #0]
 80993f6:	3304      	adds	r3, #4
 80993f8:	7019      	strb	r1, [r3, #0]
			if (keys & KEYS_LEFT)
 80993fa:	7ffb      	ldrb	r3, [r7, #31]
 80993fc:	f003 0320 	and.w	r3, r3, #32
 8099400:	2b00      	cmp	r3, #0
 8099402:	d008      	beq.n	8099416 <Keys_demo+0x206>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099408:	f7ec fadc 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 809940c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099410:	f7ec fb04 	bl	8085a1c <BSP_LCD_SetBackColor>
 8099414:	e007      	b.n	8099426 <Keys_demo+0x216>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099416:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809941a:	f7ec fad3 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809941e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099422:	f7ec fafb 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(40, 160, (uint8_t *)strbuff, LEFT_MODE);
 8099426:	463a      	mov	r2, r7
 8099428:	2303      	movs	r3, #3
 809942a:	21a0      	movs	r1, #160	; 0xa0
 809942c:	2028      	movs	r0, #40	; 0x28
 809942e:	f7ec fbbd 	bl	8085bac <BSP_LCD_DisplayStringAt>

			sprintf((char*)&strbuff, "Right");
 8099432:	463b      	mov	r3, r7
 8099434:	4a21      	ldr	r2, [pc, #132]	; (80994bc <Keys_demo+0x2ac>)
 8099436:	e892 0003 	ldmia.w	r2, {r0, r1}
 809943a:	6018      	str	r0, [r3, #0]
 809943c:	3304      	adds	r3, #4
 809943e:	8019      	strh	r1, [r3, #0]
			if (keys & KEYS_RIGHT)
 8099440:	7ffb      	ldrb	r3, [r7, #31]
 8099442:	f003 0310 	and.w	r3, r3, #16
 8099446:	2b00      	cmp	r3, #0
 8099448:	d008      	beq.n	809945c <Keys_demo+0x24c>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809944a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809944e:	f7ec fab9 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8099452:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099456:	f7ec fae1 	bl	8085a1c <BSP_LCD_SetBackColor>
 809945a:	e007      	b.n	809946c <Keys_demo+0x25c>
			}
			else
			{
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809945c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099460:	f7ec fab0 	bl	80859c4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8099464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099468:	f7ec fad8 	bl	8085a1c <BSP_LCD_SetBackColor>
			}

			BSP_LCD_DisplayStringAt(120, 160, (uint8_t *)strbuff, LEFT_MODE);
 809946c:	463a      	mov	r2, r7
 809946e:	2303      	movs	r3, #3
 8099470:	21a0      	movs	r1, #160	; 0xa0
 8099472:	2078      	movs	r0, #120	; 0x78
 8099474:	f7ec fb9a 	bl	8085bac <BSP_LCD_DisplayStringAt>
		while (BSP_KEYS_GetKeys() != (KEYS_A | KEYS_DOWN))
 8099478:	f7ec f8ea 	bl	8085650 <BSP_KEYS_GetKeys>
 809947c:	4603      	mov	r3, r0
 809947e:	2b48      	cmp	r3, #72	; 0x48
 8099480:	f47f aee7 	bne.w	8099252 <Keys_demo+0x42>
		}

	}

	BSP_LCD_SetFont(&Font12);
 8099484:	480e      	ldr	r0, [pc, #56]	; (80994c0 <Keys_demo+0x2b0>)
 8099486:	f7ec fae3 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809948a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809948e:	f7ec fa99 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8099492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099496:	f7ec fac1 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 809949a:	bf00      	nop
 809949c:	3720      	adds	r7, #32
 809949e:	46bd      	mov	sp, r7
 80994a0:	bd80      	pop	{r7, pc}
 80994a2:	bf00      	nop
 80994a4:	0809e640 	.word	0x0809e640
 80994a8:	0809e654 	.word	0x0809e654
 80994ac:	2000b364 	.word	0x2000b364
 80994b0:	0809e664 	.word	0x0809e664
 80994b4:	0809e668 	.word	0x0809e668
 80994b8:	0809e670 	.word	0x0809e670
 80994bc:	0809e678 	.word	0x0809e678
 80994c0:	2000b354 	.word	0x2000b354

080994c4 <KEYS_SetHint>:
 * @brief  Display SD Demo Hint
 * @param  None
 * @retval None
 */
static void KEYS_SetHint(void)
{
 80994c4:	b598      	push	{r3, r4, r7, lr}
 80994c6:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80994c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80994cc:	f7ec faf0 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set LCD Demo description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80994d0:	482c      	ldr	r0, [pc, #176]	; (8099584 <KEYS_SetHint+0xc0>)
 80994d2:	f7ec fa77 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80994d6:	f7ec f9c9 	bl	808586c <BSP_LCD_GetXSize>
 80994da:	4603      	mov	r3, r0
 80994dc:	b29a      	uxth	r2, r3
 80994de:	2350      	movs	r3, #80	; 0x50
 80994e0:	2100      	movs	r1, #0
 80994e2:	2000      	movs	r0, #0
 80994e4:	f7ed f974 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80994e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80994ec:	f7ec fa6a 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80994f0:	4824      	ldr	r0, [pc, #144]	; (8099584 <KEYS_SetHint+0xc0>)
 80994f2:	f7ec fa93 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 80994f6:	4824      	ldr	r0, [pc, #144]	; (8099588 <KEYS_SetHint+0xc4>)
 80994f8:	f7ec faaa 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"KEYS", CENTER_MODE);
 80994fc:	2301      	movs	r3, #1
 80994fe:	4a23      	ldr	r2, [pc, #140]	; (809958c <KEYS_SetHint+0xc8>)
 8099500:	2100      	movs	r1, #0
 8099502:	2000      	movs	r0, #0
 8099504:	f7ec fb52 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8099508:	4821      	ldr	r0, [pc, #132]	; (8099590 <KEYS_SetHint+0xcc>)
 809950a:	f7ec faa1 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows keys input", CENTER_MODE);
 809950e:	2301      	movs	r3, #1
 8099510:	4a20      	ldr	r2, [pc, #128]	; (8099594 <KEYS_SetHint+0xd0>)
 8099512:	211e      	movs	r1, #30
 8099514:	2000      	movs	r0, #0
 8099516:	f7ec fb49 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"Press A + Down to leave ", CENTER_MODE);
 809951a:	2301      	movs	r3, #1
 809951c:	4a1e      	ldr	r2, [pc, #120]	; (8099598 <KEYS_SetHint+0xd4>)
 809951e:	212d      	movs	r1, #45	; 0x2d
 8099520:	2000      	movs	r0, #0
 8099522:	f7ec fb43 	bl	8085bac <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8099526:	4817      	ldr	r0, [pc, #92]	; (8099584 <KEYS_SetHint+0xc0>)
 8099528:	f7ec fa4c 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 809952c:	f7ec f99e 	bl	808586c <BSP_LCD_GetXSize>
 8099530:	4603      	mov	r3, r0
 8099532:	b29b      	uxth	r3, r3
 8099534:	3b14      	subs	r3, #20
 8099536:	b29c      	uxth	r4, r3
 8099538:	f7ec f9ac 	bl	8085894 <BSP_LCD_GetYSize>
 809953c:	4603      	mov	r3, r0
 809953e:	b29b      	uxth	r3, r3
 8099540:	3b64      	subs	r3, #100	; 0x64
 8099542:	b29b      	uxth	r3, r3
 8099544:	4622      	mov	r2, r4
 8099546:	215a      	movs	r1, #90	; 0x5a
 8099548:	200a      	movs	r0, #10
 809954a:	f7ec fdaf 	bl	80860ac <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 809954e:	f7ec f98d 	bl	808586c <BSP_LCD_GetXSize>
 8099552:	4603      	mov	r3, r0
 8099554:	b29b      	uxth	r3, r3
 8099556:	3b16      	subs	r3, #22
 8099558:	b29c      	uxth	r4, r3
 809955a:	f7ec f99b 	bl	8085894 <BSP_LCD_GetYSize>
 809955e:	4603      	mov	r3, r0
 8099560:	b29b      	uxth	r3, r3
 8099562:	3b66      	subs	r3, #102	; 0x66
 8099564:	b29b      	uxth	r3, r3
 8099566:	4622      	mov	r2, r4
 8099568:	215b      	movs	r1, #91	; 0x5b
 809956a:	200b      	movs	r0, #11
 809956c:	f7ec fd9e 	bl	80860ac <BSP_LCD_DrawRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099570:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099574:	f7ec fa26 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8099578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809957c:	f7ec fa4e 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 8099580:	bf00      	nop
 8099582:	bd98      	pop	{r3, r4, r7, pc}
 8099584:	ff0000ff 	.word	0xff0000ff
 8099588:	2000b36c 	.word	0x2000b36c
 809958c:	0809e680 	.word	0x0809e680
 8099590:	2000b354 	.word	0x2000b354
 8099594:	0809e688 	.word	0x0809e688
 8099598:	0809e6a8 	.word	0x0809e6a8

0809959c <LCD_demo>:
 * @brief  LCD demo
 * @param  None
 * @retval None
 */
void LCD_demo (void)
{
 809959c:	b580      	push	{r7, lr}
 809959e:	af00      	add	r7, sp, #0
	LCD_SetHint();
 80995a0:	f000 f82c 	bl	80995fc <LCD_SetHint>
	LCD_Feature = 0;
 80995a4:	4b14      	ldr	r3, [pc, #80]	; (80995f8 <LCD_demo+0x5c>)
 80995a6:	2200      	movs	r2, #0
 80995a8:	701a      	strb	r2, [r3, #0]
	LCD_Show_Feature (LCD_Feature);
 80995aa:	4b13      	ldr	r3, [pc, #76]	; (80995f8 <LCD_demo+0x5c>)
 80995ac:	781b      	ldrb	r3, [r3, #0]
 80995ae:	4618      	mov	r0, r3
 80995b0:	f000 f890 	bl	80996d4 <LCD_Show_Feature>

	while (CheckForUserInput() == 0);
 80995b4:	bf00      	nop
 80995b6:	f001 fb61 	bl	809ac7c <CheckForUserInput>
 80995ba:	4603      	mov	r3, r0
 80995bc:	2b00      	cmp	r3, #0
 80995be:	d0fa      	beq.n	80995b6 <LCD_demo+0x1a>

	while (1)
	{
		if (++LCD_Feature < LCD_FEATURES_NUM)
 80995c0:	4b0d      	ldr	r3, [pc, #52]	; (80995f8 <LCD_demo+0x5c>)
 80995c2:	781b      	ldrb	r3, [r3, #0]
 80995c4:	3301      	adds	r3, #1
 80995c6:	b2da      	uxtb	r2, r3
 80995c8:	4b0b      	ldr	r3, [pc, #44]	; (80995f8 <LCD_demo+0x5c>)
 80995ca:	701a      	strb	r2, [r3, #0]
 80995cc:	4b0a      	ldr	r3, [pc, #40]	; (80995f8 <LCD_demo+0x5c>)
 80995ce:	781b      	ldrb	r3, [r3, #0]
 80995d0:	2b05      	cmp	r3, #5
 80995d2:	d80e      	bhi.n	80995f2 <LCD_demo+0x56>
		{
			LCD_Show_Feature (LCD_Feature);
 80995d4:	4b08      	ldr	r3, [pc, #32]	; (80995f8 <LCD_demo+0x5c>)
 80995d6:	781b      	ldrb	r3, [r3, #0]
 80995d8:	4618      	mov	r0, r3
 80995da:	f000 f87b 	bl	80996d4 <LCD_Show_Feature>
		else
		{
			return;
		}

		HAL_Delay(100);
 80995de:	2064      	movs	r0, #100	; 0x64
 80995e0:	f7ef fdca 	bl	8089178 <HAL_Delay>

		while (CheckForUserInput() != 0);
 80995e4:	bf00      	nop
 80995e6:	f001 fb49 	bl	809ac7c <CheckForUserInput>
 80995ea:	4603      	mov	r3, r0
 80995ec:	2b00      	cmp	r3, #0
 80995ee:	d1fa      	bne.n	80995e6 <LCD_demo+0x4a>
		if (++LCD_Feature < LCD_FEATURES_NUM)
 80995f0:	e7e6      	b.n	80995c0 <LCD_demo+0x24>
			return;
 80995f2:	bf00      	nop
	}
}
 80995f4:	bd80      	pop	{r7, pc}
 80995f6:	bf00      	nop
 80995f8:	2002c774 	.word	0x2002c774

080995fc <LCD_SetHint>:
 * @brief  Display LCD demo hint
 * @param  None
 * @retval None
 */
static void LCD_SetHint(void)
{
 80995fc:	b598      	push	{r3, r4, r7, lr}
 80995fe:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8099600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099604:	f7ec fa54 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set LCD Demo description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8099608:	482b      	ldr	r0, [pc, #172]	; (80996b8 <LCD_SetHint+0xbc>)
 809960a:	f7ec f9db 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809960e:	f7ec f92d 	bl	808586c <BSP_LCD_GetXSize>
 8099612:	4603      	mov	r3, r0
 8099614:	b29a      	uxth	r2, r3
 8099616:	2350      	movs	r3, #80	; 0x50
 8099618:	2100      	movs	r1, #0
 809961a:	2000      	movs	r0, #0
 809961c:	f7ed f8d8 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099624:	f7ec f9ce 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8099628:	4823      	ldr	r0, [pc, #140]	; (80996b8 <LCD_SetHint+0xbc>)
 809962a:	f7ec f9f7 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 809962e:	4823      	ldr	r0, [pc, #140]	; (80996bc <LCD_SetHint+0xc0>)
 8099630:	f7ec fa0e 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 8099634:	2301      	movs	r3, #1
 8099636:	4a22      	ldr	r2, [pc, #136]	; (80996c0 <LCD_SetHint+0xc4>)
 8099638:	2100      	movs	r1, #0
 809963a:	2000      	movs	r0, #0
 809963c:	f7ec fab6 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8099640:	4820      	ldr	r0, [pc, #128]	; (80996c4 <LCD_SetHint+0xc8>)
 8099642:	f7ec fa05 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 8099646:	2301      	movs	r3, #1
 8099648:	4a1f      	ldr	r2, [pc, #124]	; (80996c8 <LCD_SetHint+0xcc>)
 809964a:	211e      	movs	r1, #30
 809964c:	2000      	movs	r0, #0
 809964e:	f7ec faad 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, press A to display", CENTER_MODE);
 8099652:	2301      	movs	r3, #1
 8099654:	4a1d      	ldr	r2, [pc, #116]	; (80996cc <LCD_SetHint+0xd0>)
 8099656:	212d      	movs	r1, #45	; 0x2d
 8099658:	2000      	movs	r0, #0
 809965a:	f7ec faa7 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 809965e:	2301      	movs	r3, #1
 8099660:	4a1b      	ldr	r2, [pc, #108]	; (80996d0 <LCD_SetHint+0xd4>)
 8099662:	213c      	movs	r1, #60	; 0x3c
 8099664:	2000      	movs	r0, #0
 8099666:	f7ec faa1 	bl	8085bac <BSP_LCD_DisplayStringAt>

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809966a:	4813      	ldr	r0, [pc, #76]	; (80996b8 <LCD_SetHint+0xbc>)
 809966c:	f7ec f9aa 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8099670:	f7ec f8fc 	bl	808586c <BSP_LCD_GetXSize>
 8099674:	4603      	mov	r3, r0
 8099676:	b29b      	uxth	r3, r3
 8099678:	3b14      	subs	r3, #20
 809967a:	b29c      	uxth	r4, r3
 809967c:	f7ec f90a 	bl	8085894 <BSP_LCD_GetYSize>
 8099680:	4603      	mov	r3, r0
 8099682:	b29b      	uxth	r3, r3
 8099684:	3b64      	subs	r3, #100	; 0x64
 8099686:	b29b      	uxth	r3, r3
 8099688:	4622      	mov	r2, r4
 809968a:	215a      	movs	r1, #90	; 0x5a
 809968c:	200a      	movs	r0, #10
 809968e:	f7ec fd0d 	bl	80860ac <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8099692:	f7ec f8eb 	bl	808586c <BSP_LCD_GetXSize>
 8099696:	4603      	mov	r3, r0
 8099698:	b29b      	uxth	r3, r3
 809969a:	3b16      	subs	r3, #22
 809969c:	b29c      	uxth	r4, r3
 809969e:	f7ec f8f9 	bl	8085894 <BSP_LCD_GetYSize>
 80996a2:	4603      	mov	r3, r0
 80996a4:	b29b      	uxth	r3, r3
 80996a6:	3b66      	subs	r3, #102	; 0x66
 80996a8:	b29b      	uxth	r3, r3
 80996aa:	4622      	mov	r2, r4
 80996ac:	215b      	movs	r1, #91	; 0x5b
 80996ae:	200b      	movs	r0, #11
 80996b0:	f7ec fcfc 	bl	80860ac <BSP_LCD_DrawRect>
}
 80996b4:	bf00      	nop
 80996b6:	bd98      	pop	{r3, r4, r7, pc}
 80996b8:	ff0000ff 	.word	0xff0000ff
 80996bc:	2000b36c 	.word	0x2000b36c
 80996c0:	0809e6c4 	.word	0x0809e6c4
 80996c4:	2000b354 	.word	0x2000b354
 80996c8:	0809e6c8 	.word	0x0809e6c8
 80996cc:	0809e6ec 	.word	0x0809e6ec
 80996d0:	0809e710 	.word	0x0809e710

080996d4 <LCD_Show_Feature>:
 * @brief  Show LCD Features
 * @param  feature : feature index
 * @retval None
 */
static void LCD_Show_Feature(uint8_t feature)
{
 80996d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80996d6:	b09b      	sub	sp, #108	; 0x6c
 80996d8:	af00      	add	r7, sp, #0
 80996da:	4603      	mov	r3, r0
 80996dc:	71fb      	strb	r3, [r7, #7]
	Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 80996de:	4a99      	ldr	r2, [pc, #612]	; (8099944 <LCD_Show_Feature+0x270>)
 80996e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80996e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80996e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 80996ea:	4a97      	ldr	r2, [pc, #604]	; (8099948 <LCD_Show_Feature+0x274>)
 80996ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80996f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80996f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint32_t OrgTick=0;
 80996f6:	2300      	movs	r3, #0
 80996f8:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t CurrentTick=0;
 80996fa:	2300      	movs	r3, #0
 80996fc:	657b      	str	r3, [r7, #84]	; 0x54

	uint16_t screenWidth, screenHeight;

	char StrBuffer[30];

	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80996fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8099702:	f7ec f98b 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8099706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809970a:	f7ec f95b 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 809970e:	f7ec f8ad 	bl	808586c <BSP_LCD_GetXSize>
 8099712:	4603      	mov	r3, r0
 8099714:	b29b      	uxth	r3, r3
 8099716:	3b18      	subs	r3, #24
 8099718:	b29c      	uxth	r4, r3
 809971a:	f7ec f8bb 	bl	8085894 <BSP_LCD_GetYSize>
 809971e:	4603      	mov	r3, r0
 8099720:	b29b      	uxth	r3, r3
 8099722:	3b68      	subs	r3, #104	; 0x68
 8099724:	b29b      	uxth	r3, r3
 8099726:	4622      	mov	r2, r4
 8099728:	215c      	movs	r1, #92	; 0x5c
 809972a:	200c      	movs	r0, #12
 809972c:	f7ed f850 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8099730:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099734:	f7ec f946 	bl	80859c4 <BSP_LCD_SetTextColor>

	switch (feature)
 8099738:	79fb      	ldrb	r3, [r7, #7]
 809973a:	2b05      	cmp	r3, #5
 809973c:	f200 8398 	bhi.w	8099e70 <LCD_Show_Feature+0x79c>
 8099740:	a201      	add	r2, pc, #4	; (adr r2, 8099748 <LCD_Show_Feature+0x74>)
 8099742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8099746:	bf00      	nop
 8099748:	08099761 	.word	0x08099761
 809974c:	080997df 	.word	0x080997df
 8099750:	0809992f 	.word	0x0809992f
 8099754:	08099b0f 	.word	0x08099b0f
 8099758:	08099cb7 	.word	0x08099cb7
 809975c:	08099d61 	.word	0x08099d61
	{
	case 0:
		/* Text Feature */

		BSP_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 8099760:	2303      	movs	r3, #3
 8099762:	4a7a      	ldr	r2, [pc, #488]	; (809994c <LCD_Show_Feature+0x278>)
 8099764:	2164      	movs	r1, #100	; 0x64
 8099766:	200e      	movs	r0, #14
 8099768:	f7ec fa20 	bl	8085bac <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 809976c:	2301      	movs	r3, #1
 809976e:	4a78      	ldr	r2, [pc, #480]	; (8099950 <LCD_Show_Feature+0x27c>)
 8099770:	2173      	movs	r1, #115	; 0x73
 8099772:	2000      	movs	r0, #0
 8099774:	f7ec fa1a 	bl	8085bac <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(14, 130, (uint8_t *)"Right aligned Text", RIGHT_MODE);
 8099778:	2302      	movs	r3, #2
 809977a:	4a76      	ldr	r2, [pc, #472]	; (8099954 <LCD_Show_Feature+0x280>)
 809977c:	2182      	movs	r1, #130	; 0x82
 809977e:	200e      	movs	r0, #14
 8099780:	f7ec fa14 	bl	8085bac <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8099784:	4874      	ldr	r0, [pc, #464]	; (8099958 <LCD_Show_Feature+0x284>)
 8099786:	f7ec f963 	bl	8085a50 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 809978a:	2303      	movs	r3, #3
 809978c:	4a73      	ldr	r2, [pc, #460]	; (809995c <LCD_Show_Feature+0x288>)
 809978e:	21b4      	movs	r1, #180	; 0xb4
 8099790:	200e      	movs	r0, #14
 8099792:	f7ec fa0b 	bl	8085bac <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20);
 8099796:	4872      	ldr	r0, [pc, #456]	; (8099960 <LCD_Show_Feature+0x28c>)
 8099798:	f7ec f95a 	bl	8085a50 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() / 2 - 20, 180, (uint8_t *)"Font20", LEFT_MODE);
 809979c:	f7ec f866 	bl	808586c <BSP_LCD_GetXSize>
 80997a0:	4603      	mov	r3, r0
 80997a2:	085b      	lsrs	r3, r3, #1
 80997a4:	b29b      	uxth	r3, r3
 80997a6:	3b14      	subs	r3, #20
 80997a8:	b298      	uxth	r0, r3
 80997aa:	2303      	movs	r3, #3
 80997ac:	4a6d      	ldr	r2, [pc, #436]	; (8099964 <LCD_Show_Feature+0x290>)
 80997ae:	21b4      	movs	r1, #180	; 0xb4
 80997b0:	f7ec f9fc 	bl	8085bac <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 80997b4:	486c      	ldr	r0, [pc, #432]	; (8099968 <LCD_Show_Feature+0x294>)
 80997b6:	f7ec f94b 	bl	8085a50 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 80997ba:	f7ec f857 	bl	808586c <BSP_LCD_GetXSize>
 80997be:	4603      	mov	r3, r0
 80997c0:	b29b      	uxth	r3, r3
 80997c2:	3b50      	subs	r3, #80	; 0x50
 80997c4:	b298      	uxth	r0, r3
 80997c6:	2303      	movs	r3, #3
 80997c8:	4a68      	ldr	r2, [pc, #416]	; (809996c <LCD_Show_Feature+0x298>)
 80997ca:	21b8      	movs	r1, #184	; 0xb8
 80997cc:	f7ec f9ee 	bl	8085bac <BSP_LCD_DisplayStringAt>

		while (CheckForUserInput() == 0);
 80997d0:	bf00      	nop
 80997d2:	f001 fa53 	bl	809ac7c <CheckForUserInput>
 80997d6:	4603      	mov	r3, r0
 80997d8:	2b00      	cmp	r3, #0
 80997da:	d0fa      	beq.n	80997d2 <LCD_Show_Feature+0xfe>
		break;
 80997dc:	e349      	b.n	8099e72 <LCD_Show_Feature+0x79e>

	case 1:

		/* Draw misc. Shapes */
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80997de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80997e2:	f7ec f8ef 	bl	80859c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawRect(20, 100, 60 , 40);
 80997e6:	2328      	movs	r3, #40	; 0x28
 80997e8:	223c      	movs	r2, #60	; 0x3c
 80997ea:	2164      	movs	r1, #100	; 0x64
 80997ec:	2014      	movs	r0, #20
 80997ee:	f7ec fc5d 	bl	80860ac <BSP_LCD_DrawRect>
		BSP_LCD_FillRect(100, 100, 60 , 40);
 80997f2:	2328      	movs	r3, #40	; 0x28
 80997f4:	223c      	movs	r2, #60	; 0x3c
 80997f6:	2164      	movs	r1, #100	; 0x64
 80997f8:	2064      	movs	r0, #100	; 0x64
 80997fa:	f7ec ffe9 	bl	80867d0 <BSP_LCD_FillRect>

		BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 80997fe:	485c      	ldr	r0, [pc, #368]	; (8099970 <LCD_Show_Feature+0x29c>)
 8099800:	f7ec f8e0 	bl	80859c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 120, 20);
 8099804:	f7ec f832 	bl	808586c <BSP_LCD_GetXSize>
 8099808:	4603      	mov	r3, r0
 809980a:	b29b      	uxth	r3, r3
 809980c:	3b78      	subs	r3, #120	; 0x78
 809980e:	b29b      	uxth	r3, r3
 8099810:	2214      	movs	r2, #20
 8099812:	2178      	movs	r1, #120	; 0x78
 8099814:	4618      	mov	r0, r3
 8099816:	f7ec fc7b 	bl	8086110 <BSP_LCD_DrawCircle>
		BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 40, 120, 20);
 809981a:	f7ec f827 	bl	808586c <BSP_LCD_GetXSize>
 809981e:	4603      	mov	r3, r0
 8099820:	b29b      	uxth	r3, r3
 8099822:	3b28      	subs	r3, #40	; 0x28
 8099824:	b29b      	uxth	r3, r3
 8099826:	2214      	movs	r2, #20
 8099828:	2178      	movs	r1, #120	; 0x78
 809982a:	4618      	mov	r0, r3
 809982c:	f7ed f85a 	bl	80868e4 <BSP_LCD_FillCircle>

		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8099830:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8099834:	f7ec f8c6 	bl	80859c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawPolygon(Points, 3);
 8099838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 809983c:	2103      	movs	r1, #3
 809983e:	4618      	mov	r0, r3
 8099840:	f7ec fd56 	bl	80862f0 <BSP_LCD_DrawPolygon>
		BSP_LCD_FillPolygon(Points2, 3);
 8099844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8099848:	2103      	movs	r1, #3
 809984a:	4618      	mov	r0, r3
 809984c:	f7ed f8c7 	bl	80869de <BSP_LCD_FillPolygon>

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8099850:	4848      	ldr	r0, [pc, #288]	; (8099974 <LCD_Show_Feature+0x2a0>)
 8099852:	f7ec f8b7 	bl	80859c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 120, 170, 30, 20);
 8099856:	f7ec f809 	bl	808586c <BSP_LCD_GetXSize>
 809985a:	4603      	mov	r3, r0
 809985c:	3b78      	subs	r3, #120	; 0x78
 809985e:	4618      	mov	r0, r3
 8099860:	2314      	movs	r3, #20
 8099862:	221e      	movs	r2, #30
 8099864:	21aa      	movs	r1, #170	; 0xaa
 8099866:	f7ec fd91 	bl	808638c <BSP_LCD_DrawEllipse>
		BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 50, 170, 30, 20);
 809986a:	f7eb ffff 	bl	808586c <BSP_LCD_GetXSize>
 809986e:	4603      	mov	r3, r0
 8099870:	3b32      	subs	r3, #50	; 0x32
 8099872:	4618      	mov	r0, r3
 8099874:	2314      	movs	r3, #20
 8099876:	221e      	movs	r2, #30
 8099878:	21aa      	movs	r1, #170	; 0xaa
 809987a:	f7ed f994 	bl	8086ba6 <BSP_LCD_FillEllipse>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809987e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8099882:	f7ec f89f 	bl	80859c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8099886:	f7ec f805 	bl	8085894 <BSP_LCD_GetYSize>
 809988a:	4603      	mov	r3, r0
 809988c:	b29b      	uxth	r3, r3
 809988e:	3b1e      	subs	r3, #30
 8099890:	b29c      	uxth	r4, r3
 8099892:	f7eb ffeb 	bl	808586c <BSP_LCD_GetXSize>
 8099896:	4602      	mov	r2, r0
 8099898:	4b37      	ldr	r3, [pc, #220]	; (8099978 <LCD_Show_Feature+0x2a4>)
 809989a:	fba3 2302 	umull	r2, r3, r3, r2
 809989e:	089b      	lsrs	r3, r3, #2
 80998a0:	b29b      	uxth	r3, r3
 80998a2:	461a      	mov	r2, r3
 80998a4:	4621      	mov	r1, r4
 80998a6:	2014      	movs	r0, #20
 80998a8:	f7ec fa5c 	bl	8085d64 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 20, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 50);
 80998ac:	f7eb ffde 	bl	808586c <BSP_LCD_GetXSize>
 80998b0:	4603      	mov	r3, r0
 80998b2:	b29b      	uxth	r3, r3
 80998b4:	3b96      	subs	r3, #150	; 0x96
 80998b6:	b29c      	uxth	r4, r3
 80998b8:	f7eb ffec 	bl	8085894 <BSP_LCD_GetYSize>
 80998bc:	4603      	mov	r3, r0
 80998be:	b29b      	uxth	r3, r3
 80998c0:	3b14      	subs	r3, #20
 80998c2:	b29d      	uxth	r5, r3
 80998c4:	f7eb ffd2 	bl	808586c <BSP_LCD_GetXSize>
 80998c8:	4603      	mov	r3, r0
 80998ca:	b29b      	uxth	r3, r3
 80998cc:	3b14      	subs	r3, #20
 80998ce:	b29e      	uxth	r6, r3
 80998d0:	f7eb ffe0 	bl	8085894 <BSP_LCD_GetYSize>
 80998d4:	4603      	mov	r3, r0
 80998d6:	b29b      	uxth	r3, r3
 80998d8:	3b32      	subs	r3, #50	; 0x32
 80998da:	b29b      	uxth	r3, r3
 80998dc:	4632      	mov	r2, r6
 80998de:	4629      	mov	r1, r5
 80998e0:	4620      	mov	r0, r4
 80998e2:	f7ec fb17 	bl	8085f14 <BSP_LCD_DrawLine>
		BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 50, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 20);
 80998e6:	f7eb ffc1 	bl	808586c <BSP_LCD_GetXSize>
 80998ea:	4603      	mov	r3, r0
 80998ec:	b29b      	uxth	r3, r3
 80998ee:	3b96      	subs	r3, #150	; 0x96
 80998f0:	b29c      	uxth	r4, r3
 80998f2:	f7eb ffcf 	bl	8085894 <BSP_LCD_GetYSize>
 80998f6:	4603      	mov	r3, r0
 80998f8:	b29b      	uxth	r3, r3
 80998fa:	3b32      	subs	r3, #50	; 0x32
 80998fc:	b29d      	uxth	r5, r3
 80998fe:	f7eb ffb5 	bl	808586c <BSP_LCD_GetXSize>
 8099902:	4603      	mov	r3, r0
 8099904:	b29b      	uxth	r3, r3
 8099906:	3b14      	subs	r3, #20
 8099908:	b29e      	uxth	r6, r3
 809990a:	f7eb ffc3 	bl	8085894 <BSP_LCD_GetYSize>
 809990e:	4603      	mov	r3, r0
 8099910:	b29b      	uxth	r3, r3
 8099912:	3b14      	subs	r3, #20
 8099914:	b29b      	uxth	r3, r3
 8099916:	4632      	mov	r2, r6
 8099918:	4629      	mov	r1, r5
 809991a:	4620      	mov	r0, r4
 809991c:	f7ec fafa 	bl	8085f14 <BSP_LCD_DrawLine>

		while (CheckForUserInput() == 0);
 8099920:	bf00      	nop
 8099922:	f001 f9ab 	bl	809ac7c <CheckForUserInput>
 8099926:	4603      	mov	r3, r0
 8099928:	2b00      	cmp	r3, #0
 809992a:	d0fa      	beq.n	8099922 <LCD_Show_Feature+0x24e>

		break;
 809992c:	e2a1      	b.n	8099e72 <LCD_Show_Feature+0x79e>

	case 2:
		screenWidth = BSP_LCD_GetXSize();
 809992e:	f7eb ff9d 	bl	808586c <BSP_LCD_GetXSize>
 8099932:	4603      	mov	r3, r0
 8099934:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		screenHeight = BSP_LCD_GetYSize();
 8099938:	f7eb ffac 	bl	8085894 <BSP_LCD_GetYSize>
 809993c:	4603      	mov	r3, r0
 809993e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		/* Random drawFillRect */
		while (CheckForUserInput() == 0)
 8099942:	e0dd      	b.n	8099b00 <LCD_Show_Feature+0x42c>
 8099944:	0809e780 	.word	0x0809e780
 8099948:	0809e78c 	.word	0x0809e78c
 809994c:	0809e71c 	.word	0x0809e71c
 8099950:	0809e730 	.word	0x0809e730
 8099954:	0809e744 	.word	0x0809e744
 8099958:	2000b36c 	.word	0x2000b36c
 809995c:	0809e758 	.word	0x0809e758
 8099960:	2000b364 	.word	0x2000b364
 8099964:	0809e760 	.word	0x0809e760
 8099968:	2000b35c 	.word	0x2000b35c
 809996c:	0809e768 	.word	0x0809e768
 8099970:	ff808080 	.word	0xff808080
 8099974:	ffff0000 	.word	0xffff0000
 8099978:	cccccccd 	.word	0xcccccccd
		{
			color = BSP_RNG_GetNumber();
 809997c:	f7ee fc26 	bl	80881cc <BSP_RNG_GetNumber>
 8099980:	64b8      	str	r0, [r7, #72]	; 0x48
			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099982:	f7ee fc23 	bl	80881cc <BSP_RNG_GetNumber>
 8099986:	4603      	mov	r3, r0
 8099988:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x1 = (uint16_t)((rng_val*(screenWidth-40))/0xFFFF);
 809998c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099990:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099994:	3a28      	subs	r2, #40	; 0x28
 8099996:	fb02 f303 	mul.w	r3, r2, r3
 809999a:	4acc      	ldr	r2, [pc, #816]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 809999c:	fb82 1203 	smull	r1, r2, r2, r3
 80999a0:	441a      	add	r2, r3
 80999a2:	13d2      	asrs	r2, r2, #15
 80999a4:	17db      	asrs	r3, r3, #31
 80999a6:	1ad3      	subs	r3, r2, r3
 80999a8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			x1 += 20;
 80999ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80999b0:	3314      	adds	r3, #20
 80999b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 80999b6:	f7ee fc09 	bl	80881cc <BSP_RNG_GetNumber>
 80999ba:	4603      	mov	r3, r0
 80999bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x2 = (uint16_t)((rng_val*(screenWidth-40))/0xFFFF);
 80999c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80999c4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80999c8:	3a28      	subs	r2, #40	; 0x28
 80999ca:	fb02 f303 	mul.w	r3, r2, r3
 80999ce:	4abf      	ldr	r2, [pc, #764]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 80999d0:	fb82 1203 	smull	r1, r2, r2, r3
 80999d4:	441a      	add	r2, r3
 80999d6:	13d2      	asrs	r2, r2, #15
 80999d8:	17db      	asrs	r3, r3, #31
 80999da:	1ad3      	subs	r3, r2, r3
 80999dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			x2 += 20;
 80999e0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80999e4:	3314      	adds	r3, #20
 80999e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 80999ea:	f7ee fbef 	bl	80881cc <BSP_RNG_GetNumber>
 80999ee:	4603      	mov	r3, r0
 80999f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y1 = (uint16_t)((rng_val*(screenHeight-120))/0xFFFF);
 80999f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80999f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80999fc:	3a78      	subs	r2, #120	; 0x78
 80999fe:	fb02 f303 	mul.w	r3, r2, r3
 8099a02:	4ab2      	ldr	r2, [pc, #712]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099a04:	fb82 1203 	smull	r1, r2, r2, r3
 8099a08:	441a      	add	r2, r3
 8099a0a:	13d2      	asrs	r2, r2, #15
 8099a0c:	17db      	asrs	r3, r3, #31
 8099a0e:	1ad3      	subs	r3, r2, r3
 8099a10:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			y1 +=100;
 8099a14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099a18:	3364      	adds	r3, #100	; 0x64
 8099a1a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099a1e:	f7ee fbd5 	bl	80881cc <BSP_RNG_GetNumber>
 8099a22:	4603      	mov	r3, r0
 8099a24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y2 = (uint16_t)((rng_val*(screenHeight-120))/0xFFFF);
 8099a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099a2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099a30:	3a78      	subs	r2, #120	; 0x78
 8099a32:	fb02 f303 	mul.w	r3, r2, r3
 8099a36:	4aa5      	ldr	r2, [pc, #660]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099a38:	fb82 1203 	smull	r1, r2, r2, r3
 8099a3c:	441a      	add	r2, r3
 8099a3e:	13d2      	asrs	r2, r2, #15
 8099a40:	17db      	asrs	r3, r3, #31
 8099a42:	1ad3      	subs	r3, r2, r3
 8099a44:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			y2 +=100;
 8099a48:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099a4c:	3364      	adds	r3, #100	; 0x64
 8099a4e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

			if (x1>x2)
 8099a52:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8099a56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099a5a:	429a      	cmp	r2, r3
 8099a5c:	d90b      	bls.n	8099a76 <LCD_Show_Feature+0x3a2>
			{
				tmp= x1;
 8099a5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099a62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				x1=x2;
 8099a66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099a6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				x2=tmp;
 8099a6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8099a72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			if (y1>y2)
 8099a76:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8099a7a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099a7e:	429a      	cmp	r2, r3
 8099a80:	d90b      	bls.n	8099a9a <LCD_Show_Feature+0x3c6>
			{
				tmp= y1;
 8099a82:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099a86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				y1=y2;
 8099a8a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099a8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				y2=tmp;
 8099a92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8099a96:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			}

			if (x1+x2 >=screenWidth-20 ) x2 = screenWidth- x1-20;
 8099a9a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8099a9e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099aa2:	441a      	add	r2, r3
 8099aa4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8099aa8:	3b14      	subs	r3, #20
 8099aaa:	429a      	cmp	r2, r3
 8099aac:	db08      	blt.n	8099ac0 <LCD_Show_Feature+0x3ec>
 8099aae:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099ab2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099ab6:	1ad3      	subs	r3, r2, r3
 8099ab8:	b29b      	uxth	r3, r3
 8099aba:	3b14      	subs	r3, #20
 8099abc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (y1+y2 >=screenHeight-20 ) y2 = screenHeight- y1-20;
 8099ac0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8099ac4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099ac8:	441a      	add	r2, r3
 8099aca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8099ace:	3b14      	subs	r3, #20
 8099ad0:	429a      	cmp	r2, r3
 8099ad2:	db08      	blt.n	8099ae6 <LCD_Show_Feature+0x412>
 8099ad4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099ad8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099adc:	1ad3      	subs	r3, r2, r3
 8099ade:	b29b      	uxth	r3, r3
 8099ae0:	3b14      	subs	r3, #20
 8099ae2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

			BSP_LCD_SetTextColor(color);
 8099ae6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8099ae8:	f7eb ff6c 	bl	80859c4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x1, y1, x2 , y2);
 8099aec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099af0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8099af4:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8099af8:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8099afc:	f7ec fe68 	bl	80867d0 <BSP_LCD_FillRect>
		while (CheckForUserInput() == 0)
 8099b00:	f001 f8bc 	bl	809ac7c <CheckForUserInput>
 8099b04:	4603      	mov	r3, r0
 8099b06:	2b00      	cmp	r3, #0
 8099b08:	f43f af38 	beq.w	809997c <LCD_Show_Feature+0x2a8>
		}

		break;
 8099b0c:	e1b1      	b.n	8099e72 <LCD_Show_Feature+0x79e>
	case 3:
		screenWidth = BSP_LCD_GetXSize();
 8099b0e:	f7eb fead 	bl	808586c <BSP_LCD_GetXSize>
 8099b12:	4603      	mov	r3, r0
 8099b14:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		screenHeight = BSP_LCD_GetYSize();
 8099b18:	f7eb febc 	bl	8085894 <BSP_LCD_GetYSize>
 8099b1c:	4603      	mov	r3, r0
 8099b1e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		/* Random drawFillRect */
		while (CheckForUserInput() == 0)
 8099b22:	e0c1      	b.n	8099ca8 <LCD_Show_Feature+0x5d4>
		{
			color = BSP_RNG_GetNumber();
 8099b24:	f7ee fb52 	bl	80881cc <BSP_RNG_GetNumber>
 8099b28:	64b8      	str	r0, [r7, #72]	; 0x48
			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099b2a:	f7ee fb4f 	bl	80881cc <BSP_RNG_GetNumber>
 8099b2e:	4603      	mov	r3, r0
 8099b30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x1 = (uint16_t)((rng_val*(screenWidth-40))/0xFFFF);
 8099b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099b38:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099b3c:	3a28      	subs	r2, #40	; 0x28
 8099b3e:	fb02 f303 	mul.w	r3, r2, r3
 8099b42:	4a62      	ldr	r2, [pc, #392]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099b44:	fb82 1203 	smull	r1, r2, r2, r3
 8099b48:	441a      	add	r2, r3
 8099b4a:	13d2      	asrs	r2, r2, #15
 8099b4c:	17db      	asrs	r3, r3, #31
 8099b4e:	1ad3      	subs	r3, r2, r3
 8099b50:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			x1 += 20;
 8099b54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099b58:	3314      	adds	r3, #20
 8099b5a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099b5e:	f7ee fb35 	bl	80881cc <BSP_RNG_GetNumber>
 8099b62:	4603      	mov	r3, r0
 8099b64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x2 = (uint16_t)((rng_val*(screenWidth-40))/0xFFFF);
 8099b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099b6c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099b70:	3a28      	subs	r2, #40	; 0x28
 8099b72:	fb02 f303 	mul.w	r3, r2, r3
 8099b76:	4a55      	ldr	r2, [pc, #340]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099b78:	fb82 1203 	smull	r1, r2, r2, r3
 8099b7c:	441a      	add	r2, r3
 8099b7e:	13d2      	asrs	r2, r2, #15
 8099b80:	17db      	asrs	r3, r3, #31
 8099b82:	1ad3      	subs	r3, r2, r3
 8099b84:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			x2 += 20;
 8099b88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099b8c:	3314      	adds	r3, #20
 8099b8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099b92:	f7ee fb1b 	bl	80881cc <BSP_RNG_GetNumber>
 8099b96:	4603      	mov	r3, r0
 8099b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y1 = (uint16_t)((rng_val*(screenHeight-120))/0xFFFF);
 8099b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099ba0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099ba4:	3a78      	subs	r2, #120	; 0x78
 8099ba6:	fb02 f303 	mul.w	r3, r2, r3
 8099baa:	4a48      	ldr	r2, [pc, #288]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099bac:	fb82 1203 	smull	r1, r2, r2, r3
 8099bb0:	441a      	add	r2, r3
 8099bb2:	13d2      	asrs	r2, r2, #15
 8099bb4:	17db      	asrs	r3, r3, #31
 8099bb6:	1ad3      	subs	r3, r2, r3
 8099bb8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			y1 +=100;
 8099bbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099bc0:	3364      	adds	r3, #100	; 0x64
 8099bc2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099bc6:	f7ee fb01 	bl	80881cc <BSP_RNG_GetNumber>
 8099bca:	4603      	mov	r3, r0
 8099bcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y2 = (uint16_t)((rng_val*(screenHeight-120))/0xFFFF);
 8099bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099bd4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099bd8:	3a78      	subs	r2, #120	; 0x78
 8099bda:	fb02 f303 	mul.w	r3, r2, r3
 8099bde:	4a3b      	ldr	r2, [pc, #236]	; (8099ccc <LCD_Show_Feature+0x5f8>)
 8099be0:	fb82 1203 	smull	r1, r2, r2, r3
 8099be4:	441a      	add	r2, r3
 8099be6:	13d2      	asrs	r2, r2, #15
 8099be8:	17db      	asrs	r3, r3, #31
 8099bea:	1ad3      	subs	r3, r2, r3
 8099bec:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			y2 +=100;
 8099bf0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099bf4:	3364      	adds	r3, #100	; 0x64
 8099bf6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

			if (x1>x2)
 8099bfa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8099bfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099c02:	429a      	cmp	r2, r3
 8099c04:	d90b      	bls.n	8099c1e <LCD_Show_Feature+0x54a>
			{
				tmp= x1;
 8099c06:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				x1=x2;
 8099c0e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099c12:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				x2=tmp;
 8099c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8099c1a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			if (y1>y2)
 8099c1e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8099c22:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099c26:	429a      	cmp	r2, r3
 8099c28:	d90b      	bls.n	8099c42 <LCD_Show_Feature+0x56e>
			{
				tmp= y1;
 8099c2a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				y1=y2;
 8099c32:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099c36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				y2=tmp;
 8099c3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8099c3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			}

			if (x1+x2 >=screenWidth-20 ) x2 = screenWidth- x1-20;
 8099c42:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8099c46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8099c4a:	441a      	add	r2, r3
 8099c4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8099c50:	3b14      	subs	r3, #20
 8099c52:	429a      	cmp	r2, r3
 8099c54:	db08      	blt.n	8099c68 <LCD_Show_Feature+0x594>
 8099c56:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099c5a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099c5e:	1ad3      	subs	r3, r2, r3
 8099c60:	b29b      	uxth	r3, r3
 8099c62:	3b14      	subs	r3, #20
 8099c64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (y1+y2 >=screenHeight-20 ) y2 = screenHeight- y1-20;
 8099c68:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8099c6c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099c70:	441a      	add	r2, r3
 8099c72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8099c76:	3b14      	subs	r3, #20
 8099c78:	429a      	cmp	r2, r3
 8099c7a:	db08      	blt.n	8099c8e <LCD_Show_Feature+0x5ba>
 8099c7c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099c80:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099c84:	1ad3      	subs	r3, r2, r3
 8099c86:	b29b      	uxth	r3, r3
 8099c88:	3b14      	subs	r3, #20
 8099c8a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

			BSP_LCD_SetTextColor(color);
 8099c8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8099c90:	f7eb fe98 	bl	80859c4 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawRect(x1, y1, x2 , y2);
 8099c94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8099c98:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8099c9c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8099ca0:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8099ca4:	f7ec fa02 	bl	80860ac <BSP_LCD_DrawRect>
		while (CheckForUserInput() == 0)
 8099ca8:	f000 ffe8 	bl	809ac7c <CheckForUserInput>
 8099cac:	4603      	mov	r3, r0
 8099cae:	2b00      	cmp	r3, #0
 8099cb0:	f43f af38 	beq.w	8099b24 <LCD_Show_Feature+0x450>
		}

		break;
 8099cb4:	e0dd      	b.n	8099e72 <LCD_Show_Feature+0x79e>
	case 4:
		screenWidth = BSP_LCD_GetXSize();
 8099cb6:	f7eb fdd9 	bl	808586c <BSP_LCD_GetXSize>
 8099cba:	4603      	mov	r3, r0
 8099cbc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		screenHeight = BSP_LCD_GetYSize();
 8099cc0:	f7eb fde8 	bl	8085894 <BSP_LCD_GetYSize>
 8099cc4:	4603      	mov	r3, r0
 8099cc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		/* Random drawFillRect */
		while (CheckForUserInput() == 0)
 8099cca:	e043      	b.n	8099d54 <LCD_Show_Feature+0x680>
 8099ccc:	80008001 	.word	0x80008001
		{
			color = BSP_RNG_GetNumber();
 8099cd0:	f7ee fa7c 	bl	80881cc <BSP_RNG_GetNumber>
 8099cd4:	64b8      	str	r0, [r7, #72]	; 0x48
			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099cd6:	f7ee fa79 	bl	80881cc <BSP_RNG_GetNumber>
 8099cda:	4603      	mov	r3, r0
 8099cdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x1 = (uint16_t)((rng_val*(screenWidth-80))/0xFFFF);
 8099ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099ce4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099ce8:	3a50      	subs	r2, #80	; 0x50
 8099cea:	fb02 f303 	mul.w	r3, r2, r3
 8099cee:	4a63      	ldr	r2, [pc, #396]	; (8099e7c <LCD_Show_Feature+0x7a8>)
 8099cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8099cf4:	441a      	add	r2, r3
 8099cf6:	13d2      	asrs	r2, r2, #15
 8099cf8:	17db      	asrs	r3, r3, #31
 8099cfa:	1ad3      	subs	r3, r2, r3
 8099cfc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			x1 += 40;
 8099d00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099d04:	3328      	adds	r3, #40	; 0x28
 8099d06:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099d0a:	f7ee fa5f 	bl	80881cc <BSP_RNG_GetNumber>
 8099d0e:	4603      	mov	r3, r0
 8099d10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y1 = (uint16_t)((rng_val*(screenHeight-160))/0xFFFF);
 8099d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099d18:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099d1c:	3aa0      	subs	r2, #160	; 0xa0
 8099d1e:	fb02 f303 	mul.w	r3, r2, r3
 8099d22:	4a56      	ldr	r2, [pc, #344]	; (8099e7c <LCD_Show_Feature+0x7a8>)
 8099d24:	fb82 1203 	smull	r1, r2, r2, r3
 8099d28:	441a      	add	r2, r3
 8099d2a:	13d2      	asrs	r2, r2, #15
 8099d2c:	17db      	asrs	r3, r3, #31
 8099d2e:	1ad3      	subs	r3, r2, r3
 8099d30:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			y1 +=120;
 8099d34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099d38:	3378      	adds	r3, #120	; 0x78
 8099d3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			BSP_LCD_SetTextColor(color);
 8099d3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8099d40:	f7eb fe40 	bl	80859c4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(x1,y1, 20);
 8099d44:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8099d48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099d4c:	2214      	movs	r2, #20
 8099d4e:	4618      	mov	r0, r3
 8099d50:	f7ec fdc8 	bl	80868e4 <BSP_LCD_FillCircle>
		while (CheckForUserInput() == 0)
 8099d54:	f000 ff92 	bl	809ac7c <CheckForUserInput>
 8099d58:	4603      	mov	r3, r0
 8099d5a:	2b00      	cmp	r3, #0
 8099d5c:	d0b8      	beq.n	8099cd0 <LCD_Show_Feature+0x5fc>
		}

		break;
 8099d5e:	e088      	b.n	8099e72 <LCD_Show_Feature+0x79e>
	case 5:
		/* Draw Bitmap */
		OrgTick = HAL_GetTick();
 8099d60:	f7ef f9fe 	bl	8089160 <HAL_GetTick>
 8099d64:	6678      	str	r0, [r7, #100]	; 0x64
		FPS = 0;
 8099d66:	2300      	movs	r3, #0
 8099d68:	663b      	str	r3, [r7, #96]	; 0x60

		screenWidth = BSP_LCD_GetXSize();
 8099d6a:	f7eb fd7f 	bl	808586c <BSP_LCD_GetXSize>
 8099d6e:	4603      	mov	r3, r0
 8099d70:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		screenHeight = BSP_LCD_GetYSize();
 8099d74:	f7eb fd8e 	bl	8085894 <BSP_LCD_GetYSize>
 8099d78:	4603      	mov	r3, r0
 8099d7a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		while (CheckForUserInput() == 0)
 8099d7e:	e071      	b.n	8099e64 <LCD_Show_Feature+0x790>
		{
			/* Draw to numbers */
			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099d80:	f7ee fa24 	bl	80881cc <BSP_RNG_GetNumber>
 8099d84:	4603      	mov	r3, r0
 8099d86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			x1 = (uint16_t)((rng_val*(screenWidth-20))/0xFFFF);
 8099d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099d8e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8099d92:	3a14      	subs	r2, #20
 8099d94:	fb02 f303 	mul.w	r3, r2, r3
 8099d98:	4a38      	ldr	r2, [pc, #224]	; (8099e7c <LCD_Show_Feature+0x7a8>)
 8099d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8099d9e:	441a      	add	r2, r3
 8099da0:	13d2      	asrs	r2, r2, #15
 8099da2:	17db      	asrs	r3, r3, #31
 8099da4:	1ad3      	subs	r3, r2, r3
 8099da6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			x1 += 20;
 8099daa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099dae:	3314      	adds	r3, #20
 8099db0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			rng_val = (uint16_t)BSP_RNG_GetNumber();
 8099db4:	f7ee fa0a 	bl	80881cc <BSP_RNG_GetNumber>
 8099db8:	4603      	mov	r3, r0
 8099dba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y1 = (uint16_t)((rng_val*(screenHeight-120))/0xFFFF);
 8099dbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8099dc2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8099dc6:	3a78      	subs	r2, #120	; 0x78
 8099dc8:	fb02 f303 	mul.w	r3, r2, r3
 8099dcc:	4a2b      	ldr	r2, [pc, #172]	; (8099e7c <LCD_Show_Feature+0x7a8>)
 8099dce:	fb82 1203 	smull	r1, r2, r2, r3
 8099dd2:	441a      	add	r2, r3
 8099dd4:	13d2      	asrs	r2, r2, #15
 8099dd6:	17db      	asrs	r3, r3, #31
 8099dd8:	1ad3      	subs	r3, r2, r3
 8099dda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			y1 +=100;
 8099dde:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8099de2:	3364      	adds	r3, #100	; 0x64
 8099de4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			if (x1>screenWidth-80-20) x1 = screenWidth-80-20;
 8099de8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8099dec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8099df0:	3b64      	subs	r3, #100	; 0x64
 8099df2:	429a      	cmp	r2, r3
 8099df4:	dd04      	ble.n	8099e00 <LCD_Show_Feature+0x72c>
 8099df6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8099dfa:	3b64      	subs	r3, #100	; 0x64
 8099dfc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			if (y1>screenHeight-54-20) y1 = screenHeight-54-20;
 8099e00:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8099e04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8099e08:	3b4a      	subs	r3, #74	; 0x4a
 8099e0a:	429a      	cmp	r2, r3
 8099e0c:	dd04      	ble.n	8099e18 <LCD_Show_Feature+0x744>
 8099e0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8099e12:	3b4a      	subs	r3, #74	; 0x4a
 8099e14:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			BSP_LCD_DrawBitmap(x1, y1, (uint8_t *)stlogo);
 8099e18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8099e1c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8099e20:	4a17      	ldr	r2, [pc, #92]	; (8099e80 <LCD_Show_Feature+0x7ac>)
 8099e22:	4618      	mov	r0, r3
 8099e24:	f7ec fbfa 	bl	808661c <BSP_LCD_DrawBitmap>

			FPS++;
 8099e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8099e2a:	3301      	adds	r3, #1
 8099e2c:	663b      	str	r3, [r7, #96]	; 0x60

			CurrentTick= HAL_GetTick();
 8099e2e:	f7ef f997 	bl	8089160 <HAL_GetTick>
 8099e32:	6578      	str	r0, [r7, #84]	; 0x54
			if(CurrentTick - OrgTick >=1000) {
 8099e34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8099e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8099e38:	1ad3      	subs	r3, r2, r3
 8099e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8099e3e:	d311      	bcc.n	8099e64 <LCD_Show_Feature+0x790>
				OrgTick = CurrentTick;
 8099e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8099e42:	667b      	str	r3, [r7, #100]	; 0x64

				sprintf (StrBuffer,"FPS = %lu     ", FPS);
 8099e44:	f107 030c 	add.w	r3, r7, #12
 8099e48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8099e4a:	490e      	ldr	r1, [pc, #56]	; (8099e84 <LCD_Show_Feature+0x7b0>)
 8099e4c:	4618      	mov	r0, r3
 8099e4e:	f002 fc49 	bl	809c6e4 <siprintf>
				BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)StrBuffer, LEFT_MODE);
 8099e52:	f107 020c 	add.w	r2, r7, #12
 8099e56:	2303      	movs	r3, #3
 8099e58:	2114      	movs	r1, #20
 8099e5a:	2014      	movs	r0, #20
 8099e5c:	f7eb fea6 	bl	8085bac <BSP_LCD_DisplayStringAt>

				FPS=0;
 8099e60:	2300      	movs	r3, #0
 8099e62:	663b      	str	r3, [r7, #96]	; 0x60
		while (CheckForUserInput() == 0)
 8099e64:	f000 ff0a 	bl	809ac7c <CheckForUserInput>
 8099e68:	4603      	mov	r3, r0
 8099e6a:	2b00      	cmp	r3, #0
 8099e6c:	d088      	beq.n	8099d80 <LCD_Show_Feature+0x6ac>
		BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() / 2 - 40, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);


		BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - 100, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);*/

		break;
 8099e6e:	e000      	b.n	8099e72 <LCD_Show_Feature+0x79e>

	default :
		break;
 8099e70:	bf00      	nop
	}
}
 8099e72:	bf00      	nop
 8099e74:	376c      	adds	r7, #108	; 0x6c
 8099e76:	46bd      	mov	sp, r7
 8099e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8099e7a:	bf00      	nop
 8099e7c:	80008001 	.word	0x80008001
 8099e80:	0809f6a0 	.word	0x0809f6a0
 8099e84:	0809e770 	.word	0x0809e770

08099e88 <QSPI_demo>:
* @brief  QSPI Demo
* @param  None
* @retval None
*/
void QSPI_demo (void)
{ 
 8099e88:	b580      	push	{r7, lr}
 8099e8a:	b082      	sub	sp, #8
 8099e8c:	af00      	add	r7, sp, #0
  /* QSPI info structure */
  static QSPI_Info pQSPI_Info;
  uint8_t status;
  
  QSPI_SetHint();
 8099e8e:	f000 f927 	bl	809a0e0 <QSPI_SetHint>
  
  /*##-1- Configure the QSPI device ##########################################*/
  /* QSPI device configuration */ 
  status = BSP_QSPI_Init();
 8099e92:	f7ed fdd7 	bl	8087a44 <BSP_QSPI_Init>
 8099e96:	4603      	mov	r3, r0
 8099e98:	71fb      	strb	r3, [r7, #7]
  
  if (status == QSPI_NOT_SUPPORTED)
 8099e9a:	79fb      	ldrb	r3, [r7, #7]
 8099e9c:	2b04      	cmp	r3, #4
 8099e9e:	d124      	bne.n	8099eea <QSPI_demo+0x62>
  {
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 8099ea0:	2303      	movs	r3, #3
 8099ea2:	4a7b      	ldr	r2, [pc, #492]	; (809a090 <QSPI_demo+0x208>)
 8099ea4:	2164      	movs	r1, #100	; 0x64
 8099ea6:	2014      	movs	r0, #20
 8099ea8:	f7eb fe80 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8099eac:	2303      	movs	r3, #3
 8099eae:	4a79      	ldr	r2, [pc, #484]	; (809a094 <QSPI_demo+0x20c>)
 8099eb0:	2173      	movs	r1, #115	; 0x73
 8099eb2:	2014      	movs	r0, #20
 8099eb4:	f7eb fe7a 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 8099eb8:	2303      	movs	r3, #3
 8099eba:	4a77      	ldr	r2, [pc, #476]	; (809a098 <QSPI_demo+0x210>)
 8099ebc:	2191      	movs	r1, #145	; 0x91
 8099ebe:	2014      	movs	r0, #20
 8099ec0:	f7eb fe74 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 8099ec4:	2303      	movs	r3, #3
 8099ec6:	4a75      	ldr	r2, [pc, #468]	; (809a09c <QSPI_demo+0x214>)
 8099ec8:	21a0      	movs	r1, #160	; 0xa0
 8099eca:	2014      	movs	r0, #20
 8099ecc:	f7eb fe6e 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 8099ed0:	2303      	movs	r3, #3
 8099ed2:	4a73      	ldr	r2, [pc, #460]	; (809a0a0 <QSPI_demo+0x218>)
 8099ed4:	21af      	movs	r1, #175	; 0xaf
 8099ed6:	2014      	movs	r0, #20
 8099ed8:	f7eb fe68 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 8099edc:	2303      	movs	r3, #3
 8099ede:	4a71      	ldr	r2, [pc, #452]	; (809a0a4 <QSPI_demo+0x21c>)
 8099ee0:	21be      	movs	r1, #190	; 0xbe
 8099ee2:	2014      	movs	r0, #20
 8099ee4:	f7eb fe62 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099ee8:	e0c7      	b.n	809a07a <QSPI_demo+0x1f2>
  }
  else if (status == QSPI_ERROR)
 8099eea:	79fb      	ldrb	r3, [r7, #7]
 8099eec:	2b01      	cmp	r3, #1
 8099eee:	d10c      	bne.n	8099f0a <QSPI_demo+0x82>
  {
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 8099ef0:	2303      	movs	r3, #3
 8099ef2:	4a67      	ldr	r2, [pc, #412]	; (809a090 <QSPI_demo+0x208>)
 8099ef4:	2164      	movs	r1, #100	; 0x64
 8099ef6:	2014      	movs	r0, #20
 8099ef8:	f7eb fe58 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8099efc:	2303      	movs	r3, #3
 8099efe:	4a65      	ldr	r2, [pc, #404]	; (809a094 <QSPI_demo+0x20c>)
 8099f00:	2173      	movs	r1, #115	; 0x73
 8099f02:	2014      	movs	r0, #20
 8099f04:	f7eb fe52 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099f08:	e0b7      	b.n	809a07a <QSPI_demo+0x1f2>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 8099f0a:	2303      	movs	r3, #3
 8099f0c:	4a66      	ldr	r2, [pc, #408]	; (809a0a8 <QSPI_demo+0x220>)
 8099f0e:	2164      	movs	r1, #100	; 0x64
 8099f10:	2014      	movs	r0, #20
 8099f12:	f7eb fe4b 	bl	8085bac <BSP_LCD_DisplayStringAt>
    
    /*##-2- Read & check the QSPI info #######################################*/
    /* Initialize the structure */
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 8099f16:	4b65      	ldr	r3, [pc, #404]	; (809a0ac <QSPI_demo+0x224>)
 8099f18:	2200      	movs	r2, #0
 8099f1a:	601a      	str	r2, [r3, #0]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8099f1c:	4b63      	ldr	r3, [pc, #396]	; (809a0ac <QSPI_demo+0x224>)
 8099f1e:	2200      	movs	r2, #0
 8099f20:	605a      	str	r2, [r3, #4]
    pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8099f22:	4b62      	ldr	r3, [pc, #392]	; (809a0ac <QSPI_demo+0x224>)
 8099f24:	2200      	movs	r2, #0
 8099f26:	609a      	str	r2, [r3, #8]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8099f28:	4b60      	ldr	r3, [pc, #384]	; (809a0ac <QSPI_demo+0x224>)
 8099f2a:	2200      	movs	r2, #0
 8099f2c:	60da      	str	r2, [r3, #12]
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8099f2e:	4b5f      	ldr	r3, [pc, #380]	; (809a0ac <QSPI_demo+0x224>)
 8099f30:	2200      	movs	r2, #0
 8099f32:	611a      	str	r2, [r3, #16]
    
    /* Read the QSPI memory info */
    BSP_QSPI_GetInfo(&pQSPI_Info);
 8099f34:	485d      	ldr	r0, [pc, #372]	; (809a0ac <QSPI_demo+0x224>)
 8099f36:	f7ed fef5 	bl	8087d24 <BSP_QSPI_GetInfo>
    
    /* Test the correctness */
    if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 8099f3a:	4b5c      	ldr	r3, [pc, #368]	; (809a0ac <QSPI_demo+0x224>)
 8099f3c:	681b      	ldr	r3, [r3, #0]
 8099f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8099f42:	d113      	bne.n	8099f6c <QSPI_demo+0xe4>
 8099f44:	4b59      	ldr	r3, [pc, #356]	; (809a0ac <QSPI_demo+0x224>)
 8099f46:	685b      	ldr	r3, [r3, #4]
 8099f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8099f4c:	d10e      	bne.n	8099f6c <QSPI_demo+0xe4>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8099f4e:	4b57      	ldr	r3, [pc, #348]	; (809a0ac <QSPI_demo+0x224>)
 8099f50:	68db      	ldr	r3, [r3, #12]
    if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 8099f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8099f56:	d109      	bne.n	8099f6c <QSPI_demo+0xe4>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8099f58:	4b54      	ldr	r3, [pc, #336]	; (809a0ac <QSPI_demo+0x224>)
 8099f5a:	689b      	ldr	r3, [r3, #8]
 8099f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8099f60:	d104      	bne.n	8099f6c <QSPI_demo+0xe4>
       (pQSPI_Info.ProgPagesNumber != 65536))
 8099f62:	4b52      	ldr	r3, [pc, #328]	; (809a0ac <QSPI_demo+0x224>)
 8099f64:	691b      	ldr	r3, [r3, #16]
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8099f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8099f6a:	d00c      	beq.n	8099f86 <QSPI_demo+0xfe>
    {
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 8099f6c:	2303      	movs	r3, #3
 8099f6e:	4a50      	ldr	r2, [pc, #320]	; (809a0b0 <QSPI_demo+0x228>)
 8099f70:	2173      	movs	r1, #115	; 0x73
 8099f72:	2014      	movs	r0, #20
 8099f74:	f7eb fe1a 	bl	8085bac <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8099f78:	2303      	movs	r3, #3
 8099f7a:	4a46      	ldr	r2, [pc, #280]	; (809a094 <QSPI_demo+0x20c>)
 8099f7c:	2182      	movs	r1, #130	; 0x82
 8099f7e:	2014      	movs	r0, #20
 8099f80:	f7eb fe14 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099f84:	e079      	b.n	809a07a <QSPI_demo+0x1f2>
    }
    else
    {
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 8099f86:	2303      	movs	r3, #3
 8099f88:	4a4a      	ldr	r2, [pc, #296]	; (809a0b4 <QSPI_demo+0x22c>)
 8099f8a:	2173      	movs	r1, #115	; 0x73
 8099f8c:	2014      	movs	r0, #20
 8099f8e:	f7eb fe0d 	bl	8085bac <BSP_LCD_DisplayStringAt>
      
      /*##-3- Erase QSPI memory ################################################*/ 
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 8099f92:	2050      	movs	r0, #80	; 0x50
 8099f94:	f7ed fe82 	bl	8087c9c <BSP_QSPI_Erase_Block>
 8099f98:	4603      	mov	r3, r0
 8099f9a:	2b00      	cmp	r3, #0
 8099f9c:	d00c      	beq.n	8099fb8 <QSPI_demo+0x130>
      {
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 8099f9e:	2303      	movs	r3, #3
 8099fa0:	4a45      	ldr	r2, [pc, #276]	; (809a0b8 <QSPI_demo+0x230>)
 8099fa2:	2182      	movs	r1, #130	; 0x82
 8099fa4:	2014      	movs	r0, #20
 8099fa6:	f7eb fe01 	bl	8085bac <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8099faa:	2303      	movs	r3, #3
 8099fac:	4a39      	ldr	r2, [pc, #228]	; (809a094 <QSPI_demo+0x20c>)
 8099fae:	2191      	movs	r1, #145	; 0x91
 8099fb0:	2014      	movs	r0, #20
 8099fb2:	f7eb fdfb 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099fb6:	e060      	b.n	809a07a <QSPI_demo+0x1f2>
      }
      else
      {
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 8099fb8:	2303      	movs	r3, #3
 8099fba:	4a40      	ldr	r2, [pc, #256]	; (809a0bc <QSPI_demo+0x234>)
 8099fbc:	2182      	movs	r1, #130	; 0x82
 8099fbe:	2014      	movs	r0, #20
 8099fc0:	f7eb fdf4 	bl	8085bac <BSP_LCD_DisplayStringAt>
        
        /*##-4- QSPI memory read/write access  #################################*/   
        /* Fill the buffer to write */
        Fill_Buffer(qspi_aTxBuffer, BUFFER_SIZE, 0xD20F);   
 8099fc4:	f24d 220f 	movw	r2, #53775	; 0xd20f
 8099fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8099fcc:	483c      	ldr	r0, [pc, #240]	; (809a0c0 <QSPI_demo+0x238>)
 8099fce:	f000 f8fb 	bl	809a1c8 <Fill_Buffer>
        
        /* Write data to the QSPI memory */
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 8099fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8099fd6:	2150      	movs	r1, #80	; 0x50
 8099fd8:	4839      	ldr	r0, [pc, #228]	; (809a0c0 <QSPI_demo+0x238>)
 8099fda:	f7ed fde1 	bl	8087ba0 <BSP_QSPI_Write>
 8099fde:	4603      	mov	r3, r0
 8099fe0:	2b00      	cmp	r3, #0
 8099fe2:	d00c      	beq.n	8099ffe <QSPI_demo+0x176>
        {
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 8099fe4:	2303      	movs	r3, #3
 8099fe6:	4a37      	ldr	r2, [pc, #220]	; (809a0c4 <QSPI_demo+0x23c>)
 8099fe8:	2191      	movs	r1, #145	; 0x91
 8099fea:	2014      	movs	r0, #20
 8099fec:	f7eb fdde 	bl	8085bac <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8099ff0:	2303      	movs	r3, #3
 8099ff2:	4a28      	ldr	r2, [pc, #160]	; (809a094 <QSPI_demo+0x20c>)
 8099ff4:	21a0      	movs	r1, #160	; 0xa0
 8099ff6:	2014      	movs	r0, #20
 8099ff8:	f7eb fdd8 	bl	8085bac <BSP_LCD_DisplayStringAt>
 8099ffc:	e03d      	b.n	809a07a <QSPI_demo+0x1f2>
        }
        else
        {
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 8099ffe:	2303      	movs	r3, #3
 809a000:	4a31      	ldr	r2, [pc, #196]	; (809a0c8 <QSPI_demo+0x240>)
 809a002:	2191      	movs	r1, #145	; 0x91
 809a004:	2014      	movs	r0, #20
 809a006:	f7eb fdd1 	bl	8085bac <BSP_LCD_DisplayStringAt>
          
          /* Read back data from the QSPI memory */
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 809a00a:	f44f 7200 	mov.w	r2, #512	; 0x200
 809a00e:	2150      	movs	r1, #80	; 0x50
 809a010:	482e      	ldr	r0, [pc, #184]	; (809a0cc <QSPI_demo+0x244>)
 809a012:	f7ed fd6f 	bl	8087af4 <BSP_QSPI_Read>
 809a016:	4603      	mov	r3, r0
 809a018:	2b00      	cmp	r3, #0
 809a01a:	d00c      	beq.n	809a036 <QSPI_demo+0x1ae>
          {
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 809a01c:	2303      	movs	r3, #3
 809a01e:	4a2c      	ldr	r2, [pc, #176]	; (809a0d0 <QSPI_demo+0x248>)
 809a020:	21a0      	movs	r1, #160	; 0xa0
 809a022:	2014      	movs	r0, #20
 809a024:	f7eb fdc2 	bl	8085bac <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 809a028:	2303      	movs	r3, #3
 809a02a:	4a1a      	ldr	r2, [pc, #104]	; (809a094 <QSPI_demo+0x20c>)
 809a02c:	21af      	movs	r1, #175	; 0xaf
 809a02e:	2014      	movs	r0, #20
 809a030:	f7eb fdbc 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a034:	e021      	b.n	809a07a <QSPI_demo+0x1f2>
          }
          else
          {
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 809a036:	2303      	movs	r3, #3
 809a038:	4a26      	ldr	r2, [pc, #152]	; (809a0d4 <QSPI_demo+0x24c>)
 809a03a:	21a0      	movs	r1, #160	; 0xa0
 809a03c:	2014      	movs	r0, #20
 809a03e:	f7eb fdb5 	bl	8085bac <BSP_LCD_DisplayStringAt>
            
            /*##-5- Checking data integrity ############################################*/  
            if(Buffercmp(qspi_aRxBuffer, qspi_aTxBuffer, BUFFER_SIZE) > 0)
 809a042:	f44f 7200 	mov.w	r2, #512	; 0x200
 809a046:	491e      	ldr	r1, [pc, #120]	; (809a0c0 <QSPI_demo+0x238>)
 809a048:	4820      	ldr	r0, [pc, #128]	; (809a0cc <QSPI_demo+0x244>)
 809a04a:	f000 f8df 	bl	809a20c <Buffercmp>
 809a04e:	4603      	mov	r3, r0
 809a050:	2b00      	cmp	r3, #0
 809a052:	d00c      	beq.n	809a06e <QSPI_demo+0x1e6>
            {
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 809a054:	2303      	movs	r3, #3
 809a056:	4a20      	ldr	r2, [pc, #128]	; (809a0d8 <QSPI_demo+0x250>)
 809a058:	21af      	movs	r1, #175	; 0xaf
 809a05a:	2014      	movs	r0, #20
 809a05c:	f7eb fda6 	bl	8085bac <BSP_LCD_DisplayStringAt>
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 809a060:	2303      	movs	r3, #3
 809a062:	4a0c      	ldr	r2, [pc, #48]	; (809a094 <QSPI_demo+0x20c>)
 809a064:	21be      	movs	r1, #190	; 0xbe
 809a066:	2014      	movs	r0, #20
 809a068:	f7eb fda0 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a06c:	e005      	b.n	809a07a <QSPI_demo+0x1f2>
            }
            else
            {    
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 809a06e:	2303      	movs	r3, #3
 809a070:	4a1a      	ldr	r2, [pc, #104]	; (809a0dc <QSPI_demo+0x254>)
 809a072:	21af      	movs	r1, #175	; 0xaf
 809a074:	2014      	movs	r0, #20
 809a076:	f7eb fd99 	bl	8085bac <BSP_LCD_DisplayStringAt>
    }
  }
  
  while (1)
  {    
    if(CheckForUserInput() > 0)
 809a07a:	f000 fdff 	bl	809ac7c <CheckForUserInput>
 809a07e:	4603      	mov	r3, r0
 809a080:	2b00      	cmp	r3, #0
 809a082:	d100      	bne.n	809a086 <QSPI_demo+0x1fe>
 809a084:	e7f9      	b.n	809a07a <QSPI_demo+0x1f2>
    {
      return;
 809a086:	bf00      	nop
    }
  }
}
 809a088:	3708      	adds	r7, #8
 809a08a:	46bd      	mov	sp, r7
 809a08c:	bd80      	pop	{r7, pc}
 809a08e:	bf00      	nop
 809a090:	0809e798 	.word	0x0809e798
 809a094:	0809e7b8 	.word	0x0809e7b8
 809a098:	0809e7cc 	.word	0x0809e7cc
 809a09c:	0809e7f0 	.word	0x0809e7f0
 809a0a0:	0809e810 	.word	0x0809e810
 809a0a4:	0809e834 	.word	0x0809e834
 809a0a8:	0809e854 	.word	0x0809e854
 809a0ac:	2002c778 	.word	0x2002c778
 809a0b0:	0809e870 	.word	0x0809e870
 809a0b4:	0809e888 	.word	0x0809e888
 809a0b8:	0809e8a0 	.word	0x0809e8a0
 809a0bc:	0809e8b8 	.word	0x0809e8b8
 809a0c0:	2002f494 	.word	0x2002f494
 809a0c4:	0809e8cc 	.word	0x0809e8cc
 809a0c8:	0809e8e4 	.word	0x0809e8e4
 809a0cc:	2002f294 	.word	0x2002f294
 809a0d0:	0809e8fc 	.word	0x0809e8fc
 809a0d4:	0809e910 	.word	0x0809e910
 809a0d8:	0809e928 	.word	0x0809e928
 809a0dc:	0809e940 	.word	0x0809e940

0809a0e0 <QSPI_SetHint>:
* @brief  Display QSPI Demo Hint
* @param  None
* @retval None
*/
static void QSPI_SetHint(void)
{
 809a0e0:	b598      	push	{r3, r4, r7, lr}
 809a0e2:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 809a0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a0e8:	f7eb fce2 	bl	8085ab0 <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809a0ec:	482f      	ldr	r0, [pc, #188]	; (809a1ac <QSPI_SetHint+0xcc>)
 809a0ee:	f7eb fc69 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809a0f2:	f7eb fbbb 	bl	808586c <BSP_LCD_GetXSize>
 809a0f6:	4603      	mov	r3, r0
 809a0f8:	b29a      	uxth	r2, r3
 809a0fa:	2350      	movs	r3, #80	; 0x50
 809a0fc:	2100      	movs	r1, #0
 809a0fe:	2000      	movs	r0, #0
 809a100:	f7ec fb66 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809a104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a108:	f7eb fc5c 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 809a10c:	4827      	ldr	r0, [pc, #156]	; (809a1ac <QSPI_SetHint+0xcc>)
 809a10e:	f7eb fc85 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 809a112:	4827      	ldr	r0, [pc, #156]	; (809a1b0 <QSPI_SetHint+0xd0>)
 809a114:	f7eb fc9c 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 809a118:	2301      	movs	r3, #1
 809a11a:	4a26      	ldr	r2, [pc, #152]	; (809a1b4 <QSPI_SetHint+0xd4>)
 809a11c:	2100      	movs	r1, #0
 809a11e:	2000      	movs	r0, #0
 809a120:	f7eb fd44 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 809a124:	4824      	ldr	r0, [pc, #144]	; (809a1b8 <QSPI_SetHint+0xd8>)
 809a126:	f7eb fc93 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 809a12a:	2301      	movs	r3, #1
 809a12c:	4a23      	ldr	r2, [pc, #140]	; (809a1bc <QSPI_SetHint+0xdc>)
 809a12e:	211e      	movs	r1, #30
 809a130:	2000      	movs	r0, #0
 809a132:	f7eb fd3b 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE); 
 809a136:	2301      	movs	r3, #1
 809a138:	4a21      	ldr	r2, [pc, #132]	; (809a1c0 <QSPI_SetHint+0xe0>)
 809a13a:	212d      	movs	r1, #45	; 0x2d
 809a13c:	2000      	movs	r0, #0
 809a13e:	f7eb fd35 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE); 
 809a142:	2301      	movs	r3, #1
 809a144:	4a1f      	ldr	r2, [pc, #124]	; (809a1c4 <QSPI_SetHint+0xe4>)
 809a146:	213c      	movs	r1, #60	; 0x3c
 809a148:	2000      	movs	r0, #0
 809a14a:	f7eb fd2f 	bl	8085bac <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 809a14e:	4817      	ldr	r0, [pc, #92]	; (809a1ac <QSPI_SetHint+0xcc>)
 809a150:	f7eb fc38 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 809a154:	f7eb fb8a 	bl	808586c <BSP_LCD_GetXSize>
 809a158:	4603      	mov	r3, r0
 809a15a:	b29b      	uxth	r3, r3
 809a15c:	3b14      	subs	r3, #20
 809a15e:	b29c      	uxth	r4, r3
 809a160:	f7eb fb98 	bl	8085894 <BSP_LCD_GetYSize>
 809a164:	4603      	mov	r3, r0
 809a166:	b29b      	uxth	r3, r3
 809a168:	3b64      	subs	r3, #100	; 0x64
 809a16a:	b29b      	uxth	r3, r3
 809a16c:	4622      	mov	r2, r4
 809a16e:	215a      	movs	r1, #90	; 0x5a
 809a170:	200a      	movs	r0, #10
 809a172:	f7eb ff9b 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 809a176:	f7eb fb79 	bl	808586c <BSP_LCD_GetXSize>
 809a17a:	4603      	mov	r3, r0
 809a17c:	b29b      	uxth	r3, r3
 809a17e:	3b16      	subs	r3, #22
 809a180:	b29c      	uxth	r4, r3
 809a182:	f7eb fb87 	bl	8085894 <BSP_LCD_GetYSize>
 809a186:	4603      	mov	r3, r0
 809a188:	b29b      	uxth	r3, r3
 809a18a:	3b66      	subs	r3, #102	; 0x66
 809a18c:	b29b      	uxth	r3, r3
 809a18e:	4622      	mov	r2, r4
 809a190:	215b      	movs	r1, #91	; 0x5b
 809a192:	200b      	movs	r0, #11
 809a194:	f7eb ff8a 	bl	80860ac <BSP_LCD_DrawRect>
  
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809a198:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809a19c:	f7eb fc12 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 809a1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a1a4:	f7eb fc3a 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 809a1a8:	bf00      	nop
 809a1aa:	bd98      	pop	{r3, r4, r7, pc}
 809a1ac:	ff0000ff 	.word	0xff0000ff
 809a1b0:	2000b36c 	.word	0x2000b36c
 809a1b4:	0809e958 	.word	0x0809e958
 809a1b8:	2000b354 	.word	0x2000b354
 809a1bc:	0809e960 	.word	0x0809e960
 809a1c0:	0809e980 	.word	0x0809e980
 809a1c4:	0809e9a0 	.word	0x0809e9a0

0809a1c8 <Fill_Buffer>:
* @param  uwBufferLenght: size of the buffer to fill
* @param  uwOffset: first value to fill on the buffer
* @retval None
*/
static void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 809a1c8:	b480      	push	{r7}
 809a1ca:	b087      	sub	sp, #28
 809a1cc:	af00      	add	r7, sp, #0
 809a1ce:	60f8      	str	r0, [r7, #12]
 809a1d0:	60b9      	str	r1, [r7, #8]
 809a1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 809a1d4:	2300      	movs	r3, #0
 809a1d6:	617b      	str	r3, [r7, #20]
  
  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 809a1d8:	2300      	movs	r3, #0
 809a1da:	617b      	str	r3, [r7, #20]
 809a1dc:	e00c      	b.n	809a1f8 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 809a1de:	697b      	ldr	r3, [r7, #20]
 809a1e0:	b2d9      	uxtb	r1, r3
 809a1e2:	687b      	ldr	r3, [r7, #4]
 809a1e4:	b2da      	uxtb	r2, r3
 809a1e6:	68f8      	ldr	r0, [r7, #12]
 809a1e8:	697b      	ldr	r3, [r7, #20]
 809a1ea:	4403      	add	r3, r0
 809a1ec:	440a      	add	r2, r1
 809a1ee:	b2d2      	uxtb	r2, r2
 809a1f0:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 809a1f2:	697b      	ldr	r3, [r7, #20]
 809a1f4:	3301      	adds	r3, #1
 809a1f6:	617b      	str	r3, [r7, #20]
 809a1f8:	697a      	ldr	r2, [r7, #20]
 809a1fa:	68bb      	ldr	r3, [r7, #8]
 809a1fc:	429a      	cmp	r2, r3
 809a1fe:	d3ee      	bcc.n	809a1de <Fill_Buffer+0x16>
  }
}
 809a200:	bf00      	nop
 809a202:	371c      	adds	r7, #28
 809a204:	46bd      	mov	sp, r7
 809a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a20a:	4770      	bx	lr

0809a20c <Buffercmp>:
* @param  BufferLength: buffer's length
* @retval 1: pBuffer identical to pBuffer1
*         0: pBuffer differs from pBuffer1
*/
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
{
 809a20c:	b480      	push	{r7}
 809a20e:	b085      	sub	sp, #20
 809a210:	af00      	add	r7, sp, #0
 809a212:	60f8      	str	r0, [r7, #12]
 809a214:	60b9      	str	r1, [r7, #8]
 809a216:	607a      	str	r2, [r7, #4]
  while (BufferLength--)
 809a218:	e00d      	b.n	809a236 <Buffercmp+0x2a>
  {
    if (*pBuffer1 != *pBuffer2)
 809a21a:	68fb      	ldr	r3, [r7, #12]
 809a21c:	781a      	ldrb	r2, [r3, #0]
 809a21e:	68bb      	ldr	r3, [r7, #8]
 809a220:	781b      	ldrb	r3, [r3, #0]
 809a222:	429a      	cmp	r2, r3
 809a224:	d001      	beq.n	809a22a <Buffercmp+0x1e>
    {
      return 1;
 809a226:	2301      	movs	r3, #1
 809a228:	e00b      	b.n	809a242 <Buffercmp+0x36>
    }
    
    pBuffer1++;
 809a22a:	68fb      	ldr	r3, [r7, #12]
 809a22c:	3301      	adds	r3, #1
 809a22e:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 809a230:	68bb      	ldr	r3, [r7, #8]
 809a232:	3301      	adds	r3, #1
 809a234:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 809a236:	687b      	ldr	r3, [r7, #4]
 809a238:	1e5a      	subs	r2, r3, #1
 809a23a:	607a      	str	r2, [r7, #4]
 809a23c:	2b00      	cmp	r3, #0
 809a23e:	d1ec      	bne.n	809a21a <Buffercmp+0xe>
  }
  
  return 0;
 809a240:	2300      	movs	r3, #0
}
 809a242:	4618      	mov	r0, r3
 809a244:	3714      	adds	r7, #20
 809a246:	46bd      	mov	sp, r7
 809a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a24c:	4770      	bx	lr
	...

0809a250 <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 809a250:	b580      	push	{r7, lr}
 809a252:	af00      	add	r7, sp, #0

  SDRAM_SetHint();
 809a254:	f000 f89a 	bl	809a38c <SDRAM_SetHint>

  /* SDRAM device configuration */
  if (BSP_SDRAM_Init() != SDRAM_OK)
 809a258:	f7ee f9ca 	bl	80885f0 <BSP_SDRAM_Init>
 809a25c:	4603      	mov	r3, r0
 809a25e:	2b00      	cmp	r3, #0
 809a260:	d00c      	beq.n	809a27c <SDRAM_demo+0x2c>
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 809a262:	2303      	movs	r3, #3
 809a264:	4a3c      	ldr	r2, [pc, #240]	; (809a358 <SDRAM_demo+0x108>)
 809a266:	2173      	movs	r1, #115	; 0x73
 809a268:	2014      	movs	r0, #20
 809a26a:	f7eb fc9f 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a26e:	2303      	movs	r3, #3
 809a270:	4a3a      	ldr	r2, [pc, #232]	; (809a35c <SDRAM_demo+0x10c>)
 809a272:	2182      	movs	r1, #130	; 0x82
 809a274:	2014      	movs	r0, #20
 809a276:	f7eb fc99 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a27a:	e005      	b.n	809a288 <SDRAM_demo+0x38>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 809a27c:	2303      	movs	r3, #3
 809a27e:	4a38      	ldr	r2, [pc, #224]	; (809a360 <SDRAM_demo+0x110>)
 809a280:	2164      	movs	r1, #100	; 0x64
 809a282:	2014      	movs	r0, #20
 809a284:	f7eb fc92 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }
  /* Fill the buffer to write */
  Fill_Buffer(sdram_aTxBuffer, SDRAM_BUFFER_SIZE, 0xA244250F);
 809a288:	4a36      	ldr	r2, [pc, #216]	; (809a364 <SDRAM_demo+0x114>)
 809a28a:	f44f 7180 	mov.w	r1, #256	; 0x100
 809a28e:	4836      	ldr	r0, [pc, #216]	; (809a368 <SDRAM_demo+0x118>)
 809a290:	f000 f8e8 	bl	809a464 <Fill_Buffer>

  /* Write data to the SDRAM memory */
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 809a294:	4b35      	ldr	r3, [pc, #212]	; (809a36c <SDRAM_demo+0x11c>)
 809a296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 809a29a:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a29e:	4932      	ldr	r1, [pc, #200]	; (809a368 <SDRAM_demo+0x118>)
 809a2a0:	4618      	mov	r0, r3
 809a2a2:	f7ee fa93 	bl	80887cc <BSP_SDRAM_WriteData>
 809a2a6:	4603      	mov	r3, r0
 809a2a8:	2b00      	cmp	r3, #0
 809a2aa:	d00c      	beq.n	809a2c6 <SDRAM_demo+0x76>
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 809a2ac:	2303      	movs	r3, #3
 809a2ae:	4a30      	ldr	r2, [pc, #192]	; (809a370 <SDRAM_demo+0x120>)
 809a2b0:	2173      	movs	r1, #115	; 0x73
 809a2b2:	2014      	movs	r0, #20
 809a2b4:	f7eb fc7a 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a2b8:	2303      	movs	r3, #3
 809a2ba:	4a28      	ldr	r2, [pc, #160]	; (809a35c <SDRAM_demo+0x10c>)
 809a2bc:	2182      	movs	r1, #130	; 0x82
 809a2be:	2014      	movs	r0, #20
 809a2c0:	f7eb fc74 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a2c4:	e005      	b.n	809a2d2 <SDRAM_demo+0x82>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 809a2c6:	2303      	movs	r3, #3
 809a2c8:	4a2a      	ldr	r2, [pc, #168]	; (809a374 <SDRAM_demo+0x124>)
 809a2ca:	2173      	movs	r1, #115	; 0x73
 809a2cc:	2014      	movs	r0, #20
 809a2ce:	f7eb fc6d 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  /* Read back data from the SDRAM memory */
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 809a2d2:	4b26      	ldr	r3, [pc, #152]	; (809a36c <SDRAM_demo+0x11c>)
 809a2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 809a2d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a2dc:	4926      	ldr	r1, [pc, #152]	; (809a378 <SDRAM_demo+0x128>)
 809a2de:	4618      	mov	r0, r3
 809a2e0:	f7ee fa44 	bl	808876c <BSP_SDRAM_ReadData>
 809a2e4:	4603      	mov	r3, r0
 809a2e6:	2b00      	cmp	r3, #0
 809a2e8:	d00c      	beq.n	809a304 <SDRAM_demo+0xb4>
  {
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 809a2ea:	2303      	movs	r3, #3
 809a2ec:	4a23      	ldr	r2, [pc, #140]	; (809a37c <SDRAM_demo+0x12c>)
 809a2ee:	2182      	movs	r1, #130	; 0x82
 809a2f0:	2014      	movs	r0, #20
 809a2f2:	f7eb fc5b 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a2f6:	2303      	movs	r3, #3
 809a2f8:	4a18      	ldr	r2, [pc, #96]	; (809a35c <SDRAM_demo+0x10c>)
 809a2fa:	2191      	movs	r1, #145	; 0x91
 809a2fc:	2014      	movs	r0, #20
 809a2fe:	f7eb fc55 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a302:	e005      	b.n	809a310 <SDRAM_demo+0xc0>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 809a304:	2303      	movs	r3, #3
 809a306:	4a1e      	ldr	r2, [pc, #120]	; (809a380 <SDRAM_demo+0x130>)
 809a308:	2182      	movs	r1, #130	; 0x82
 809a30a:	2014      	movs	r0, #20
 809a30c:	f7eb fc4e 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  if (Buffercmp(sdram_aTxBuffer, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) > 0)
 809a310:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a314:	4918      	ldr	r1, [pc, #96]	; (809a378 <SDRAM_demo+0x128>)
 809a316:	4814      	ldr	r0, [pc, #80]	; (809a368 <SDRAM_demo+0x118>)
 809a318:	f000 f8c4 	bl	809a4a4 <Buffercmp>
 809a31c:	4603      	mov	r3, r0
 809a31e:	2b00      	cmp	r3, #0
 809a320:	d00c      	beq.n	809a33c <SDRAM_demo+0xec>
  {
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 809a322:	2303      	movs	r3, #3
 809a324:	4a17      	ldr	r2, [pc, #92]	; (809a384 <SDRAM_demo+0x134>)
 809a326:	2191      	movs	r1, #145	; 0x91
 809a328:	2014      	movs	r0, #20
 809a32a:	f7eb fc3f 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a32e:	2303      	movs	r3, #3
 809a330:	4a0a      	ldr	r2, [pc, #40]	; (809a35c <SDRAM_demo+0x10c>)
 809a332:	21a0      	movs	r1, #160	; 0xa0
 809a334:	2014      	movs	r0, #20
 809a336:	f7eb fc39 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a33a:	e005      	b.n	809a348 <SDRAM_demo+0xf8>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 809a33c:	2303      	movs	r3, #3
 809a33e:	4a12      	ldr	r2, [pc, #72]	; (809a388 <SDRAM_demo+0x138>)
 809a340:	2191      	movs	r1, #145	; 0x91
 809a342:	2014      	movs	r0, #20
 809a344:	f7eb fc32 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (CheckForUserInput() > 0)
 809a348:	f000 fc98 	bl	809ac7c <CheckForUserInput>
 809a34c:	4603      	mov	r3, r0
 809a34e:	2b00      	cmp	r3, #0
 809a350:	d100      	bne.n	809a354 <SDRAM_demo+0x104>
 809a352:	e7f9      	b.n	809a348 <SDRAM_demo+0xf8>
    {
      return;
 809a354:	bf00      	nop
    }
  }
}
 809a356:	bd80      	pop	{r7, pc}
 809a358:	0809e9c0 	.word	0x0809e9c0
 809a35c:	0809e9e0 	.word	0x0809e9e0
 809a360:	0809e9f4 	.word	0x0809e9f4
 809a364:	a244250f 	.word	0xa244250f
 809a368:	2002c78c 	.word	0x2002c78c
 809a36c:	c007f800 	.word	0xc007f800
 809a370:	0809ea10 	.word	0x0809ea10
 809a374:	0809ea28 	.word	0x0809ea28
 809a378:	2002cb8c 	.word	0x2002cb8c
 809a37c:	0809ea3c 	.word	0x0809ea3c
 809a380:	0809ea54 	.word	0x0809ea54
 809a384:	0809ea68 	.word	0x0809ea68
 809a388:	0809ea80 	.word	0x0809ea80

0809a38c <SDRAM_SetHint>:
  * @brief  Display SDRAM Demo Hint
  * @param  None
  * @retval None
  */
static void SDRAM_SetHint(void)
{
 809a38c:	b598      	push	{r3, r4, r7, lr}
 809a38e:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 809a390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a394:	f7eb fb8c 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809a398:	482c      	ldr	r0, [pc, #176]	; (809a44c <SDRAM_SetHint+0xc0>)
 809a39a:	f7eb fb13 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809a39e:	f7eb fa65 	bl	808586c <BSP_LCD_GetXSize>
 809a3a2:	4603      	mov	r3, r0
 809a3a4:	b29a      	uxth	r2, r3
 809a3a6:	2350      	movs	r3, #80	; 0x50
 809a3a8:	2100      	movs	r1, #0
 809a3aa:	2000      	movs	r0, #0
 809a3ac:	f7ec fa10 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809a3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a3b4:	f7eb fb06 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 809a3b8:	4824      	ldr	r0, [pc, #144]	; (809a44c <SDRAM_SetHint+0xc0>)
 809a3ba:	f7eb fb2f 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 809a3be:	4824      	ldr	r0, [pc, #144]	; (809a450 <SDRAM_SetHint+0xc4>)
 809a3c0:	f7eb fb46 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 809a3c4:	2301      	movs	r3, #1
 809a3c6:	4a23      	ldr	r2, [pc, #140]	; (809a454 <SDRAM_SetHint+0xc8>)
 809a3c8:	2100      	movs	r1, #0
 809a3ca:	2000      	movs	r0, #0
 809a3cc:	f7eb fbee 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 809a3d0:	4821      	ldr	r0, [pc, #132]	; (809a458 <SDRAM_SetHint+0xcc>)
 809a3d2:	f7eb fb3d 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 809a3d6:	2301      	movs	r3, #1
 809a3d8:	4a20      	ldr	r2, [pc, #128]	; (809a45c <SDRAM_SetHint+0xd0>)
 809a3da:	211e      	movs	r1, #30
 809a3dc:	2000      	movs	r0, #0
 809a3de:	f7eb fbe5 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 809a3e2:	2301      	movs	r3, #1
 809a3e4:	4a1e      	ldr	r2, [pc, #120]	; (809a460 <SDRAM_SetHint+0xd4>)
 809a3e6:	212d      	movs	r1, #45	; 0x2d
 809a3e8:	2000      	movs	r0, #0
 809a3ea:	f7eb fbdf 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809a3ee:	4817      	ldr	r0, [pc, #92]	; (809a44c <SDRAM_SetHint+0xc0>)
 809a3f0:	f7eb fae8 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 809a3f4:	f7eb fa3a 	bl	808586c <BSP_LCD_GetXSize>
 809a3f8:	4603      	mov	r3, r0
 809a3fa:	b29b      	uxth	r3, r3
 809a3fc:	3b14      	subs	r3, #20
 809a3fe:	b29c      	uxth	r4, r3
 809a400:	f7eb fa48 	bl	8085894 <BSP_LCD_GetYSize>
 809a404:	4603      	mov	r3, r0
 809a406:	b29b      	uxth	r3, r3
 809a408:	3b64      	subs	r3, #100	; 0x64
 809a40a:	b29b      	uxth	r3, r3
 809a40c:	4622      	mov	r2, r4
 809a40e:	215a      	movs	r1, #90	; 0x5a
 809a410:	200a      	movs	r0, #10
 809a412:	f7eb fe4b 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 809a416:	f7eb fa29 	bl	808586c <BSP_LCD_GetXSize>
 809a41a:	4603      	mov	r3, r0
 809a41c:	b29b      	uxth	r3, r3
 809a41e:	3b16      	subs	r3, #22
 809a420:	b29c      	uxth	r4, r3
 809a422:	f7eb fa37 	bl	8085894 <BSP_LCD_GetYSize>
 809a426:	4603      	mov	r3, r0
 809a428:	b29b      	uxth	r3, r3
 809a42a:	3b66      	subs	r3, #102	; 0x66
 809a42c:	b29b      	uxth	r3, r3
 809a42e:	4622      	mov	r2, r4
 809a430:	215b      	movs	r1, #91	; 0x5b
 809a432:	200b      	movs	r0, #11
 809a434:	f7eb fe3a 	bl	80860ac <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809a438:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809a43c:	f7eb fac2 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809a440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a444:	f7eb faea 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 809a448:	bf00      	nop
 809a44a:	bd98      	pop	{r3, r4, r7, pc}
 809a44c:	ff0000ff 	.word	0xff0000ff
 809a450:	2000b36c 	.word	0x2000b36c
 809a454:	0809ea94 	.word	0x0809ea94
 809a458:	2000b354 	.word	0x2000b354
 809a45c:	0809ea9c 	.word	0x0809ea9c
 809a460:	0809eabc 	.word	0x0809eabc

0809a464 <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 809a464:	b480      	push	{r7}
 809a466:	b087      	sub	sp, #28
 809a468:	af00      	add	r7, sp, #0
 809a46a:	60f8      	str	r0, [r7, #12]
 809a46c:	60b9      	str	r1, [r7, #8]
 809a46e:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 809a470:	2300      	movs	r3, #0
 809a472:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 809a474:	2300      	movs	r3, #0
 809a476:	617b      	str	r3, [r7, #20]
 809a478:	e00a      	b.n	809a490 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 809a47a:	697b      	ldr	r3, [r7, #20]
 809a47c:	009b      	lsls	r3, r3, #2
 809a47e:	68fa      	ldr	r2, [r7, #12]
 809a480:	4413      	add	r3, r2
 809a482:	6979      	ldr	r1, [r7, #20]
 809a484:	687a      	ldr	r2, [r7, #4]
 809a486:	440a      	add	r2, r1
 809a488:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 809a48a:	697b      	ldr	r3, [r7, #20]
 809a48c:	3301      	adds	r3, #1
 809a48e:	617b      	str	r3, [r7, #20]
 809a490:	697a      	ldr	r2, [r7, #20]
 809a492:	68bb      	ldr	r3, [r7, #8]
 809a494:	429a      	cmp	r2, r3
 809a496:	d3f0      	bcc.n	809a47a <Fill_Buffer+0x16>
  }
}
 809a498:	bf00      	nop
 809a49a:	371c      	adds	r7, #28
 809a49c:	46bd      	mov	sp, r7
 809a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a4a2:	4770      	bx	lr

0809a4a4 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 809a4a4:	b480      	push	{r7}
 809a4a6:	b085      	sub	sp, #20
 809a4a8:	af00      	add	r7, sp, #0
 809a4aa:	60f8      	str	r0, [r7, #12]
 809a4ac:	60b9      	str	r1, [r7, #8]
 809a4ae:	4613      	mov	r3, r2
 809a4b0:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 809a4b2:	e00d      	b.n	809a4d0 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 809a4b4:	68fb      	ldr	r3, [r7, #12]
 809a4b6:	681a      	ldr	r2, [r3, #0]
 809a4b8:	68bb      	ldr	r3, [r7, #8]
 809a4ba:	681b      	ldr	r3, [r3, #0]
 809a4bc:	429a      	cmp	r2, r3
 809a4be:	d001      	beq.n	809a4c4 <Buffercmp+0x20>
    {
      return 1;
 809a4c0:	2301      	movs	r3, #1
 809a4c2:	e00b      	b.n	809a4dc <Buffercmp+0x38>
    }

    pBuffer1++;
 809a4c4:	68fb      	ldr	r3, [r7, #12]
 809a4c6:	3304      	adds	r3, #4
 809a4c8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 809a4ca:	68bb      	ldr	r3, [r7, #8]
 809a4cc:	3304      	adds	r3, #4
 809a4ce:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 809a4d0:	88fb      	ldrh	r3, [r7, #6]
 809a4d2:	1e5a      	subs	r2, r3, #1
 809a4d4:	80fa      	strh	r2, [r7, #6]
 809a4d6:	2b00      	cmp	r3, #0
 809a4d8:	d1ec      	bne.n	809a4b4 <Buffercmp+0x10>
  }

  return 0;
 809a4da:	2300      	movs	r3, #0
}
 809a4dc:	4618      	mov	r0, r3
 809a4de:	3714      	adds	r7, #20
 809a4e0:	46bd      	mov	sp, r7
 809a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a4e6:	4770      	bx	lr

0809a4e8 <SCB_InvalidateDCache_by_Addr>:
{
 809a4e8:	b480      	push	{r7}
 809a4ea:	b087      	sub	sp, #28
 809a4ec:	af00      	add	r7, sp, #0
 809a4ee:	6078      	str	r0, [r7, #4]
 809a4f0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 809a4f2:	683b      	ldr	r3, [r7, #0]
 809a4f4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 809a4f6:	687b      	ldr	r3, [r7, #4]
 809a4f8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32U;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 809a4fa:	2320      	movs	r3, #32
 809a4fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 809a4fe:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 809a502:	e00b      	b.n	809a51c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 809a504:	4a0c      	ldr	r2, [pc, #48]	; (809a538 <SCB_InvalidateDCache_by_Addr+0x50>)
 809a506:	693b      	ldr	r3, [r7, #16]
 809a508:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += linesize;
 809a50c:	68fb      	ldr	r3, [r7, #12]
 809a50e:	693a      	ldr	r2, [r7, #16]
 809a510:	4413      	add	r3, r2
 809a512:	613b      	str	r3, [r7, #16]
      op_size -= linesize;
 809a514:	697a      	ldr	r2, [r7, #20]
 809a516:	68fb      	ldr	r3, [r7, #12]
 809a518:	1ad3      	subs	r3, r2, r3
 809a51a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 809a51c:	697b      	ldr	r3, [r7, #20]
 809a51e:	2b00      	cmp	r3, #0
 809a520:	dcf0      	bgt.n	809a504 <SCB_InvalidateDCache_by_Addr+0x1c>
 809a522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 809a526:	f3bf 8f6f 	isb	sy
}
 809a52a:	bf00      	nop
 809a52c:	371c      	adds	r7, #28
 809a52e:	46bd      	mov	sp, r7
 809a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a534:	4770      	bx	lr
 809a536:	bf00      	nop
 809a538:	e000ed00 	.word	0xe000ed00

0809a53c <SCB_CleanDCache_by_Addr>:
{
 809a53c:	b480      	push	{r7}
 809a53e:	b087      	sub	sp, #28
 809a540:	af00      	add	r7, sp, #0
 809a542:	6078      	str	r0, [r7, #4]
 809a544:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 809a546:	683b      	ldr	r3, [r7, #0]
 809a548:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 809a54a:	687b      	ldr	r3, [r7, #4]
 809a54c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32U;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 809a54e:	2320      	movs	r3, #32
 809a550:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 809a552:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 809a556:	e00b      	b.n	809a570 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 809a558:	4a0c      	ldr	r2, [pc, #48]	; (809a58c <SCB_CleanDCache_by_Addr+0x50>)
 809a55a:	693b      	ldr	r3, [r7, #16]
 809a55c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += linesize;
 809a560:	68fb      	ldr	r3, [r7, #12]
 809a562:	693a      	ldr	r2, [r7, #16]
 809a564:	4413      	add	r3, r2
 809a566:	613b      	str	r3, [r7, #16]
      op_size -= linesize;
 809a568:	697a      	ldr	r2, [r7, #20]
 809a56a:	68fb      	ldr	r3, [r7, #12]
 809a56c:	1ad3      	subs	r3, r2, r3
 809a56e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 809a570:	697b      	ldr	r3, [r7, #20]
 809a572:	2b00      	cmp	r3, #0
 809a574:	dcf0      	bgt.n	809a558 <SCB_CleanDCache_by_Addr+0x1c>
 809a576:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 809a57a:	f3bf 8f6f 	isb	sy
}
 809a57e:	bf00      	nop
 809a580:	371c      	adds	r7, #28
 809a582:	46bd      	mov	sp, r7
 809a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a588:	4770      	bx	lr
 809a58a:	bf00      	nop
 809a58c:	e000ed00 	.word	0xe000ed00

0809a590 <SDRAM_DMA_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_DMA_demo (void)
{
 809a590:	b580      	push	{r7, lr}
 809a592:	af00      	add	r7, sp, #0

  SDRAM_DMA_SetHint();
 809a594:	f000 f8e4 	bl	809a760 <SDRAM_DMA_SetHint>

  /* -1- SDRAM device configuration */
  if (BSP_SDRAM_Init() != SDRAM_OK)
 809a598:	f7ee f82a 	bl	80885f0 <BSP_SDRAM_Init>
 809a59c:	4603      	mov	r3, r0
 809a59e:	2b00      	cmp	r3, #0
 809a5a0:	d00c      	beq.n	809a5bc <SDRAM_DMA_demo+0x2c>
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 809a5a2:	2303      	movs	r3, #3
 809a5a4:	4a4a      	ldr	r2, [pc, #296]	; (809a6d0 <SDRAM_DMA_demo+0x140>)
 809a5a6:	2173      	movs	r1, #115	; 0x73
 809a5a8:	2014      	movs	r0, #20
 809a5aa:	f7eb faff 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a5ae:	2303      	movs	r3, #3
 809a5b0:	4a48      	ldr	r2, [pc, #288]	; (809a6d4 <SDRAM_DMA_demo+0x144>)
 809a5b2:	2182      	movs	r1, #130	; 0x82
 809a5b4:	2014      	movs	r0, #20
 809a5b6:	f7eb faf9 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a5ba:	e005      	b.n	809a5c8 <SDRAM_DMA_demo+0x38>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 809a5bc:	2303      	movs	r3, #3
 809a5be:	4a46      	ldr	r2, [pc, #280]	; (809a6d8 <SDRAM_DMA_demo+0x148>)
 809a5c0:	2164      	movs	r1, #100	; 0x64
 809a5c2:	2014      	movs	r0, #20
 809a5c4:	f7eb faf2 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  /* -2- Fill the buffer to write */
  Fill_Buffer(sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE, 0xA244250F);
 809a5c8:	4a44      	ldr	r2, [pc, #272]	; (809a6dc <SDRAM_DMA_demo+0x14c>)
 809a5ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 809a5ce:	4844      	ldr	r0, [pc, #272]	; (809a6e0 <SDRAM_DMA_demo+0x150>)
 809a5d0:	f000 f932 	bl	809a838 <Fill_Buffer>

  /* -3- Write data to the SDRAM memory using DMA */
  uwDMA_Transfer_Complete = 0;
 809a5d4:	4b43      	ldr	r3, [pc, #268]	; (809a6e4 <SDRAM_DMA_demo+0x154>)
 809a5d6:	2200      	movs	r2, #0
 809a5d8:	601a      	str	r2, [r3, #0]
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 809a5da:	4b43      	ldr	r3, [pc, #268]	; (809a6e8 <SDRAM_DMA_demo+0x158>)
 809a5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 809a5e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a5e4:	493e      	ldr	r1, [pc, #248]	; (809a6e0 <SDRAM_DMA_demo+0x150>)
 809a5e6:	4618      	mov	r0, r3
 809a5e8:	f7ee f908 	bl	80887fc <BSP_SDRAM_WriteData_DMA>
 809a5ec:	4603      	mov	r3, r0
 809a5ee:	2b00      	cmp	r3, #0
 809a5f0:	d00c      	beq.n	809a60c <SDRAM_DMA_demo+0x7c>
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 809a5f2:	2303      	movs	r3, #3
 809a5f4:	4a3d      	ldr	r2, [pc, #244]	; (809a6ec <SDRAM_DMA_demo+0x15c>)
 809a5f6:	2173      	movs	r1, #115	; 0x73
 809a5f8:	2014      	movs	r0, #20
 809a5fa:	f7eb fad7 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a5fe:	2303      	movs	r3, #3
 809a600:	4a34      	ldr	r2, [pc, #208]	; (809a6d4 <SDRAM_DMA_demo+0x144>)
 809a602:	2182      	movs	r1, #130	; 0x82
 809a604:	2014      	movs	r0, #20
 809a606:	f7eb fad1 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a60a:	e005      	b.n	809a618 <SDRAM_DMA_demo+0x88>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 809a60c:	2303      	movs	r3, #3
 809a60e:	4a38      	ldr	r2, [pc, #224]	; (809a6f0 <SDRAM_DMA_demo+0x160>)
 809a610:	2173      	movs	r1, #115	; 0x73
 809a612:	2014      	movs	r0, #20
 809a614:	f7eb faca 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  /* Wait until DMA transfer is complete */
  while (!uwDMA_Transfer_Complete)
 809a618:	bf00      	nop
 809a61a:	4b32      	ldr	r3, [pc, #200]	; (809a6e4 <SDRAM_DMA_demo+0x154>)
 809a61c:	681b      	ldr	r3, [r3, #0]
 809a61e:	2b00      	cmp	r3, #0
 809a620:	d0fb      	beq.n	809a61a <SDRAM_DMA_demo+0x8a>
  {}
  BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM WRITE DMA : COMPLETED", LEFT_MODE);
 809a622:	2303      	movs	r3, #3
 809a624:	4a33      	ldr	r2, [pc, #204]	; (809a6f4 <SDRAM_DMA_demo+0x164>)
 809a626:	2182      	movs	r1, #130	; 0x82
 809a628:	2014      	movs	r0, #20
 809a62a:	f7eb fabf 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* -4- Read back data from the SDRAM memory using DMA */
  uwDMA_Transfer_Complete = 0;
 809a62e:	4b2d      	ldr	r3, [pc, #180]	; (809a6e4 <SDRAM_DMA_demo+0x154>)
 809a630:	2200      	movs	r2, #0
 809a632:	601a      	str	r2, [r3, #0]
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 809a634:	4b2c      	ldr	r3, [pc, #176]	; (809a6e8 <SDRAM_DMA_demo+0x158>)
 809a636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 809a63a:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a63e:	492e      	ldr	r1, [pc, #184]	; (809a6f8 <SDRAM_DMA_demo+0x168>)
 809a640:	4618      	mov	r0, r3
 809a642:	f7ee f8ab 	bl	808879c <BSP_SDRAM_ReadData_DMA>
 809a646:	4603      	mov	r3, r0
 809a648:	2b00      	cmp	r3, #0
 809a64a:	d00c      	beq.n	809a666 <SDRAM_DMA_demo+0xd6>
  {
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 809a64c:	2303      	movs	r3, #3
 809a64e:	4a2b      	ldr	r2, [pc, #172]	; (809a6fc <SDRAM_DMA_demo+0x16c>)
 809a650:	2191      	movs	r1, #145	; 0x91
 809a652:	2014      	movs	r0, #20
 809a654:	f7eb faaa 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM  Test Aborted", LEFT_MODE);
 809a658:	2303      	movs	r3, #3
 809a65a:	4a29      	ldr	r2, [pc, #164]	; (809a700 <SDRAM_DMA_demo+0x170>)
 809a65c:	21a0      	movs	r1, #160	; 0xa0
 809a65e:	2014      	movs	r0, #20
 809a660:	f7eb faa4 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a664:	e005      	b.n	809a672 <SDRAM_DMA_demo+0xe2>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 809a666:	2303      	movs	r3, #3
 809a668:	4a26      	ldr	r2, [pc, #152]	; (809a704 <SDRAM_DMA_demo+0x174>)
 809a66a:	2191      	movs	r1, #145	; 0x91
 809a66c:	2014      	movs	r0, #20
 809a66e:	f7eb fa9d 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  /* Wait until DMA transfer is complete */
  while (!uwDMA_Transfer_Complete)
 809a672:	bf00      	nop
 809a674:	4b1b      	ldr	r3, [pc, #108]	; (809a6e4 <SDRAM_DMA_demo+0x154>)
 809a676:	681b      	ldr	r3, [r3, #0]
 809a678:	2b00      	cmp	r3, #0
 809a67a:	d0fb      	beq.n	809a674 <SDRAM_DMA_demo+0xe4>
  {}
  BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM READ  DMA : COMPLETED", LEFT_MODE);
 809a67c:	2303      	movs	r3, #3
 809a67e:	4a22      	ldr	r2, [pc, #136]	; (809a708 <SDRAM_DMA_demo+0x178>)
 809a680:	21a0      	movs	r1, #160	; 0xa0
 809a682:	2014      	movs	r0, #20
 809a684:	f7eb fa92 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* -5- Compare both buffers */
  if (Buffercmp(sdram_aTxBuffer, sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) > 0)
 809a688:	f44f 7280 	mov.w	r2, #256	; 0x100
 809a68c:	491a      	ldr	r1, [pc, #104]	; (809a6f8 <SDRAM_DMA_demo+0x168>)
 809a68e:	4814      	ldr	r0, [pc, #80]	; (809a6e0 <SDRAM_DMA_demo+0x150>)
 809a690:	f000 f8f6 	bl	809a880 <Buffercmp>
 809a694:	4603      	mov	r3, r0
 809a696:	2b00      	cmp	r3, #0
 809a698:	d00c      	beq.n	809a6b4 <SDRAM_DMA_demo+0x124>
  {
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 809a69a:	2303      	movs	r3, #3
 809a69c:	4a1b      	ldr	r2, [pc, #108]	; (809a70c <SDRAM_DMA_demo+0x17c>)
 809a69e:	21af      	movs	r1, #175	; 0xaf
 809a6a0:	2014      	movs	r0, #20
 809a6a2:	f7eb fa83 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 809a6a6:	2303      	movs	r3, #3
 809a6a8:	4a0a      	ldr	r2, [pc, #40]	; (809a6d4 <SDRAM_DMA_demo+0x144>)
 809a6aa:	21be      	movs	r1, #190	; 0xbe
 809a6ac:	2014      	movs	r0, #20
 809a6ae:	f7eb fa7d 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809a6b2:	e005      	b.n	809a6c0 <SDRAM_DMA_demo+0x130>
  }
  else
  {
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFULL", LEFT_MODE);
 809a6b4:	2303      	movs	r3, #3
 809a6b6:	4a16      	ldr	r2, [pc, #88]	; (809a710 <SDRAM_DMA_demo+0x180>)
 809a6b8:	21af      	movs	r1, #175	; 0xaf
 809a6ba:	2014      	movs	r0, #20
 809a6bc:	f7eb fa76 	bl	8085bac <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (CheckForUserInput() > 0)
 809a6c0:	f000 fadc 	bl	809ac7c <CheckForUserInput>
 809a6c4:	4603      	mov	r3, r0
 809a6c6:	2b00      	cmp	r3, #0
 809a6c8:	d100      	bne.n	809a6cc <SDRAM_DMA_demo+0x13c>
 809a6ca:	e7f9      	b.n	809a6c0 <SDRAM_DMA_demo+0x130>
    {
      return;
 809a6cc:	bf00      	nop
    }
  }
}
 809a6ce:	bd80      	pop	{r7, pc}
 809a6d0:	0809ead4 	.word	0x0809ead4
 809a6d4:	0809eaf4 	.word	0x0809eaf4
 809a6d8:	0809eb08 	.word	0x0809eb08
 809a6dc:	a244250f 	.word	0xa244250f
 809a6e0:	2002cfa0 	.word	0x2002cfa0
 809a6e4:	2002d7a0 	.word	0x2002d7a0
 809a6e8:	c007f800 	.word	0xc007f800
 809a6ec:	0809eb24 	.word	0x0809eb24
 809a6f0:	0809eb40 	.word	0x0809eb40
 809a6f4:	0809eb5c 	.word	0x0809eb5c
 809a6f8:	2002d3a0 	.word	0x2002d3a0
 809a6fc:	0809eb78 	.word	0x0809eb78
 809a700:	0809eb94 	.word	0x0809eb94
 809a704:	0809eba8 	.word	0x0809eba8
 809a708:	0809ebc4 	.word	0x0809ebc4
 809a70c:	0809ebe0 	.word	0x0809ebe0
 809a710:	0809ebf8 	.word	0x0809ebf8

0809a714 <HAL_SDRAM_DMA_XferCpltCallback>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void HAL_SDRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 809a714:	b480      	push	{r7}
 809a716:	b083      	sub	sp, #12
 809a718:	af00      	add	r7, sp, #0
 809a71a:	6078      	str	r0, [r7, #4]
  /* Set transfer complete flag */
  uwDMA_Transfer_Complete = 1;
 809a71c:	4b04      	ldr	r3, [pc, #16]	; (809a730 <HAL_SDRAM_DMA_XferCpltCallback+0x1c>)
 809a71e:	2201      	movs	r2, #1
 809a720:	601a      	str	r2, [r3, #0]
}
 809a722:	bf00      	nop
 809a724:	370c      	adds	r7, #12
 809a726:	46bd      	mov	sp, r7
 809a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 809a72c:	4770      	bx	lr
 809a72e:	bf00      	nop
 809a730:	2002d7a0 	.word	0x2002d7a0

0809a734 <HAL_SDRAM_DMA_XferErrorCallback>:
  * @param  hdma: DMA handle
  * @retval None
  */

void HAL_SDRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 809a734:	b580      	push	{r7, lr}
 809a736:	b082      	sub	sp, #8
 809a738:	af00      	add	r7, sp, #0
 809a73a:	6078      	str	r0, [r7, #4]
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 809a73c:	4806      	ldr	r0, [pc, #24]	; (809a758 <HAL_SDRAM_DMA_XferErrorCallback+0x24>)
 809a73e:	f7eb f941 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 809a742:	2303      	movs	r3, #3
 809a744:	4a05      	ldr	r2, [pc, #20]	; (809a75c <HAL_SDRAM_DMA_XferErrorCallback+0x28>)
 809a746:	21d7      	movs	r1, #215	; 0xd7
 809a748:	2014      	movs	r0, #20
 809a74a:	f7eb fa2f 	bl	8085bac <BSP_LCD_DisplayStringAt>
}
 809a74e:	bf00      	nop
 809a750:	3708      	adds	r7, #8
 809a752:	46bd      	mov	sp, r7
 809a754:	bd80      	pop	{r7, pc}
 809a756:	bf00      	nop
 809a758:	ffff0000 	.word	0xffff0000
 809a75c:	0809ec18 	.word	0x0809ec18

0809a760 <SDRAM_DMA_SetHint>:
  * @brief  Display SDRAM Demo Hint
  * @param  None
  * @retval None
  */
static void SDRAM_DMA_SetHint(void)
{
 809a760:	b598      	push	{r3, r4, r7, lr}
 809a762:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 809a764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a768:	f7eb f9a2 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809a76c:	482c      	ldr	r0, [pc, #176]	; (809a820 <SDRAM_DMA_SetHint+0xc0>)
 809a76e:	f7eb f929 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809a772:	f7eb f87b 	bl	808586c <BSP_LCD_GetXSize>
 809a776:	4603      	mov	r3, r0
 809a778:	b29a      	uxth	r2, r3
 809a77a:	2350      	movs	r3, #80	; 0x50
 809a77c:	2100      	movs	r1, #0
 809a77e:	2000      	movs	r0, #0
 809a780:	f7ec f826 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809a784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a788:	f7eb f91c 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 809a78c:	4824      	ldr	r0, [pc, #144]	; (809a820 <SDRAM_DMA_SetHint+0xc0>)
 809a78e:	f7eb f945 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 809a792:	4824      	ldr	r0, [pc, #144]	; (809a824 <SDRAM_DMA_SetHint+0xc4>)
 809a794:	f7eb f95c 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM DMA", CENTER_MODE);
 809a798:	2301      	movs	r3, #1
 809a79a:	4a23      	ldr	r2, [pc, #140]	; (809a828 <SDRAM_DMA_SetHint+0xc8>)
 809a79c:	2100      	movs	r1, #0
 809a79e:	2000      	movs	r0, #0
 809a7a0:	f7eb fa04 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 809a7a4:	4821      	ldr	r0, [pc, #132]	; (809a82c <SDRAM_DMA_SetHint+0xcc>)
 809a7a6:	f7eb f953 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 809a7aa:	2301      	movs	r3, #1
 809a7ac:	4a20      	ldr	r2, [pc, #128]	; (809a830 <SDRAM_DMA_SetHint+0xd0>)
 809a7ae:	211e      	movs	r1, #30
 809a7b0:	2000      	movs	r0, #0
 809a7b2:	f7eb f9fb 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 809a7b6:	2301      	movs	r3, #1
 809a7b8:	4a1e      	ldr	r2, [pc, #120]	; (809a834 <SDRAM_DMA_SetHint+0xd4>)
 809a7ba:	212d      	movs	r1, #45	; 0x2d
 809a7bc:	2000      	movs	r0, #0
 809a7be:	f7eb f9f5 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809a7c2:	4817      	ldr	r0, [pc, #92]	; (809a820 <SDRAM_DMA_SetHint+0xc0>)
 809a7c4:	f7eb f8fe 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 809a7c8:	f7eb f850 	bl	808586c <BSP_LCD_GetXSize>
 809a7cc:	4603      	mov	r3, r0
 809a7ce:	b29b      	uxth	r3, r3
 809a7d0:	3b14      	subs	r3, #20
 809a7d2:	b29c      	uxth	r4, r3
 809a7d4:	f7eb f85e 	bl	8085894 <BSP_LCD_GetYSize>
 809a7d8:	4603      	mov	r3, r0
 809a7da:	b29b      	uxth	r3, r3
 809a7dc:	3b64      	subs	r3, #100	; 0x64
 809a7de:	b29b      	uxth	r3, r3
 809a7e0:	4622      	mov	r2, r4
 809a7e2:	215a      	movs	r1, #90	; 0x5a
 809a7e4:	200a      	movs	r0, #10
 809a7e6:	f7eb fc61 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 809a7ea:	f7eb f83f 	bl	808586c <BSP_LCD_GetXSize>
 809a7ee:	4603      	mov	r3, r0
 809a7f0:	b29b      	uxth	r3, r3
 809a7f2:	3b16      	subs	r3, #22
 809a7f4:	b29c      	uxth	r4, r3
 809a7f6:	f7eb f84d 	bl	8085894 <BSP_LCD_GetYSize>
 809a7fa:	4603      	mov	r3, r0
 809a7fc:	b29b      	uxth	r3, r3
 809a7fe:	3b66      	subs	r3, #102	; 0x66
 809a800:	b29b      	uxth	r3, r3
 809a802:	4622      	mov	r2, r4
 809a804:	215b      	movs	r1, #91	; 0x5b
 809a806:	200b      	movs	r0, #11
 809a808:	f7eb fc50 	bl	80860ac <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809a80c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809a810:	f7eb f8d8 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809a814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809a818:	f7eb f900 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 809a81c:	bf00      	nop
 809a81e:	bd98      	pop	{r3, r4, r7, pc}
 809a820:	ff0000ff 	.word	0xff0000ff
 809a824:	2000b36c 	.word	0x2000b36c
 809a828:	0809ec24 	.word	0x0809ec24
 809a82c:	2000b354 	.word	0x2000b354
 809a830:	0809ec30 	.word	0x0809ec30
 809a834:	0809ec50 	.word	0x0809ec50

0809a838 <Fill_Buffer>:
  * @param  uwBufferLength: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
 809a838:	b580      	push	{r7, lr}
 809a83a:	b086      	sub	sp, #24
 809a83c:	af00      	add	r7, sp, #0
 809a83e:	60f8      	str	r0, [r7, #12]
 809a840:	60b9      	str	r1, [r7, #8]
 809a842:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 809a844:	2300      	movs	r3, #0
 809a846:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 809a848:	2300      	movs	r3, #0
 809a84a:	617b      	str	r3, [r7, #20]
 809a84c:	e00a      	b.n	809a864 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 809a84e:	697b      	ldr	r3, [r7, #20]
 809a850:	009b      	lsls	r3, r3, #2
 809a852:	68fa      	ldr	r2, [r7, #12]
 809a854:	4413      	add	r3, r2
 809a856:	6979      	ldr	r1, [r7, #20]
 809a858:	687a      	ldr	r2, [r7, #4]
 809a85a:	440a      	add	r2, r1
 809a85c:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 809a85e:	697b      	ldr	r3, [r7, #20]
 809a860:	3301      	adds	r3, #1
 809a862:	617b      	str	r3, [r7, #20]
 809a864:	697a      	ldr	r2, [r7, #20]
 809a866:	68bb      	ldr	r3, [r7, #8]
 809a868:	429a      	cmp	r2, r3
 809a86a:	d3f0      	bcc.n	809a84e <Fill_Buffer+0x16>
  }

  /* Clean Data Cache to update the content of the SRAM */
  SCB_CleanDCache_by_Addr((uint32_t*)pBuffer, uwBufferLength*4);
 809a86c:	68bb      	ldr	r3, [r7, #8]
 809a86e:	009b      	lsls	r3, r3, #2
 809a870:	4619      	mov	r1, r3
 809a872:	68f8      	ldr	r0, [r7, #12]
 809a874:	f7ff fe62 	bl	809a53c <SCB_CleanDCache_by_Addr>
}
 809a878:	bf00      	nop
 809a87a:	3718      	adds	r7, #24
 809a87c:	46bd      	mov	sp, r7
 809a87e:	bd80      	pop	{r7, pc}

0809a880 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 809a880:	b580      	push	{r7, lr}
 809a882:	b084      	sub	sp, #16
 809a884:	af00      	add	r7, sp, #0
 809a886:	60f8      	str	r0, [r7, #12]
 809a888:	60b9      	str	r1, [r7, #8]
 809a88a:	4613      	mov	r3, r2
 809a88c:	80fb      	strh	r3, [r7, #6]
  /* Invalidate Data Cache to get the updated content of the SRAM */
  SCB_InvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);
 809a88e:	88fb      	ldrh	r3, [r7, #6]
 809a890:	009b      	lsls	r3, r3, #2
 809a892:	4619      	mov	r1, r3
 809a894:	68b8      	ldr	r0, [r7, #8]
 809a896:	f7ff fe27 	bl	809a4e8 <SCB_InvalidateDCache_by_Addr>

  while (BufferLength--)
 809a89a:	e00d      	b.n	809a8b8 <Buffercmp+0x38>
  {
    if (*pBuffer1 != *pBuffer2)
 809a89c:	68fb      	ldr	r3, [r7, #12]
 809a89e:	681a      	ldr	r2, [r3, #0]
 809a8a0:	68bb      	ldr	r3, [r7, #8]
 809a8a2:	681b      	ldr	r3, [r3, #0]
 809a8a4:	429a      	cmp	r2, r3
 809a8a6:	d001      	beq.n	809a8ac <Buffercmp+0x2c>
    {
      return 1;
 809a8a8:	2301      	movs	r3, #1
 809a8aa:	e00b      	b.n	809a8c4 <Buffercmp+0x44>
    }

    pBuffer1++;
 809a8ac:	68fb      	ldr	r3, [r7, #12]
 809a8ae:	3304      	adds	r3, #4
 809a8b0:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 809a8b2:	68bb      	ldr	r3, [r7, #8]
 809a8b4:	3304      	adds	r3, #4
 809a8b6:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 809a8b8:	88fb      	ldrh	r3, [r7, #6]
 809a8ba:	1e5a      	subs	r2, r3, #1
 809a8bc:	80fa      	strh	r2, [r7, #6]
 809a8be:	2b00      	cmp	r3, #0
 809a8c0:	d1ec      	bne.n	809a89c <Buffercmp+0x1c>
  }

  return 0;
 809a8c2:	2300      	movs	r3, #0
}
 809a8c4:	4618      	mov	r0, r3
 809a8c6:	3710      	adds	r7, #16
 809a8c8:	46bd      	mov	sp, r7
 809a8ca:	bd80      	pop	{r7, pc}

0809a8cc <SENSORS_Demo>:
 * @brief  Keys Demo
 * @param  None
 * @retval None
 */
void SENSORS_Demo (void)
{
 809a8cc:	b5b0      	push	{r4, r5, r7, lr}
 809a8ce:	b0a2      	sub	sp, #136	; 0x88
 809a8d0:	af02      	add	r7, sp, #8
	uint8_t status = MAG_OK;
 809a8d2:	2300      	movs	r3, #0
 809a8d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t statusPressure = PRESSURE_OK;
 809a8d8:	2300      	movs	r3, #0
 809a8da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	angularRate_t angularRate;
	magnetic_t mag;
	float temperature;
	float pressure;

	SENSORS_SetHint();
 809a8de:	f000 f985 	bl	809abec <SENSORS_SetHint>

	while (CheckForUserInput() == 0)
 809a8e2:	e15d      	b.n	809aba0 <SENSORS_Demo+0x2d4>
	{
		HAL_Delay(100);
 809a8e4:	2064      	movs	r0, #100	; 0x64
 809a8e6:	f7ee fc47 	bl	8089178 <HAL_Delay>
		status = BSP_MAG_ReadValues(&mag);
 809a8ea:	f107 0308 	add.w	r3, r7, #8
 809a8ee:	4618      	mov	r0, r3
 809a8f0:	f7ec fe24 	bl	808753c <BSP_MAG_ReadValues>
 809a8f4:	4603      	mov	r3, r0
 809a8f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status == MAG_OK) {
 809a8fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 809a8fe:	2b00      	cmp	r3, #0
 809a900:	d118      	bne.n	809a934 <SENSORS_Demo+0x68>
			sprintf((char*)&strbuff, "Mag (OK): X= %i, Y=%i, Z=%i     ", (int)mag.x, (int)mag.y, (int)mag.z);
 809a902:	edd7 7a02 	vldr	s15, [r7, #8]
 809a906:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 809a90a:	edd7 7a03 	vldr	s15, [r7, #12]
 809a90e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 809a912:	edd7 7a04 	vldr	s15, [r7, #16]
 809a916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809a91a:	ee17 3a90 	vmov	r3, s15
 809a91e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 809a922:	9300      	str	r3, [sp, #0]
 809a924:	ee16 3a90 	vmov	r3, s13
 809a928:	ee17 2a10 	vmov	r2, s14
 809a92c:	49a1      	ldr	r1, [pc, #644]	; (809abb4 <SENSORS_Demo+0x2e8>)
 809a92e:	f001 fed9 	bl	809c6e4 <siprintf>
 809a932:	e00f      	b.n	809a954 <SENSORS_Demo+0x88>
		}
		else {
			sprintf((char*)&strbuff, "Mag (Failed):                                       ");
 809a934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809a938:	4a9f      	ldr	r2, [pc, #636]	; (809abb8 <SENSORS_Demo+0x2ec>)
 809a93a:	461c      	mov	r4, r3
 809a93c:	4615      	mov	r5, r2
 809a93e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a94a:	e895 0003 	ldmia.w	r5, {r0, r1}
 809a94e:	6020      	str	r0, [r4, #0]
 809a950:	3404      	adds	r4, #4
 809a952:	7021      	strb	r1, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)strbuff, LEFT_MODE);
 809a954:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809a958:	2303      	movs	r3, #3
 809a95a:	2164      	movs	r1, #100	; 0x64
 809a95c:	2014      	movs	r0, #20
 809a95e:	f7eb f925 	bl	8085bac <BSP_LCD_DisplayStringAt>

		status = BSP_ACC_ReadValues(&acc);
 809a962:	f107 0320 	add.w	r3, r7, #32
 809a966:	4618      	mov	r0, r3
 809a968:	f7e9 fe72 	bl	8084650 <BSP_ACC_ReadValues>
 809a96c:	4603      	mov	r3, r0
 809a96e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status == ACC_OK) {
 809a972:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 809a976:	2b00      	cmp	r3, #0
 809a978:	d118      	bne.n	809a9ac <SENSORS_Demo+0xe0>
			sprintf((char*)&strbuff, "Acc (OK): X= %i, Y=%i, Z=%i     ", (int)acc.x, (int)acc.y, (int)acc.z);
 809a97a:	edd7 7a08 	vldr	s15, [r7, #32]
 809a97e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 809a982:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 809a986:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 809a98a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 809a98e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809a992:	ee17 3a90 	vmov	r3, s15
 809a996:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 809a99a:	9300      	str	r3, [sp, #0]
 809a99c:	ee16 3a90 	vmov	r3, s13
 809a9a0:	ee17 2a10 	vmov	r2, s14
 809a9a4:	4985      	ldr	r1, [pc, #532]	; (809abbc <SENSORS_Demo+0x2f0>)
 809a9a6:	f001 fe9d 	bl	809c6e4 <siprintf>
 809a9aa:	e00f      	b.n	809a9cc <SENSORS_Demo+0x100>
		}
		else {
			sprintf((char*)&strbuff, "Acc (Failed):                                       ");
 809a9ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809a9b0:	4a83      	ldr	r2, [pc, #524]	; (809abc0 <SENSORS_Demo+0x2f4>)
 809a9b2:	461c      	mov	r4, r3
 809a9b4:	4615      	mov	r5, r2
 809a9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a9b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a9ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a9bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a9be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809a9c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809a9c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 809a9c6:	6020      	str	r0, [r4, #0]
 809a9c8:	3404      	adds	r4, #4
 809a9ca:	7021      	strb	r1, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 120, (uint8_t *)strbuff, LEFT_MODE);
 809a9cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809a9d0:	2303      	movs	r3, #3
 809a9d2:	2178      	movs	r1, #120	; 0x78
 809a9d4:	2014      	movs	r0, #20
 809a9d6:	f7eb f8e9 	bl	8085bac <BSP_LCD_DisplayStringAt>

		status = BSP_GYRO_ReadValues(&angularRate);
 809a9da:	f107 0314 	add.w	r3, r7, #20
 809a9de:	4618      	mov	r0, r3
 809a9e0:	f7e9 fe74 	bl	80846cc <BSP_GYRO_ReadValues>
 809a9e4:	4603      	mov	r3, r0
 809a9e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status == ACC_OK) {
 809a9ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 809a9ee:	2b00      	cmp	r3, #0
 809a9f0:	d118      	bne.n	809aa24 <SENSORS_Demo+0x158>
			sprintf((char*)&strbuff, "Gyro (OK): X= %i, Y=%i, Z=%i     ", (int)angularRate.x, (int)angularRate.y, (int)angularRate.z);
 809a9f2:	edd7 7a05 	vldr	s15, [r7, #20]
 809a9f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 809a9fa:	edd7 7a06 	vldr	s15, [r7, #24]
 809a9fe:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 809aa02:	edd7 7a07 	vldr	s15, [r7, #28]
 809aa06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809aa0a:	ee17 3a90 	vmov	r3, s15
 809aa0e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 809aa12:	9300      	str	r3, [sp, #0]
 809aa14:	ee16 3a90 	vmov	r3, s13
 809aa18:	ee17 2a10 	vmov	r2, s14
 809aa1c:	4969      	ldr	r1, [pc, #420]	; (809abc4 <SENSORS_Demo+0x2f8>)
 809aa1e:	f001 fe61 	bl	809c6e4 <siprintf>
 809aa22:	e00f      	b.n	809aa44 <SENSORS_Demo+0x178>
		}
		else {
			sprintf((char*)&strbuff, "Gyro (Failed):                                      ");
 809aa24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809aa28:	4a67      	ldr	r2, [pc, #412]	; (809abc8 <SENSORS_Demo+0x2fc>)
 809aa2a:	461c      	mov	r4, r3
 809aa2c:	4615      	mov	r5, r2
 809aa2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 809aa3e:	6020      	str	r0, [r4, #0]
 809aa40:	3404      	adds	r4, #4
 809aa42:	7021      	strb	r1, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 140, (uint8_t *)strbuff, LEFT_MODE);
 809aa44:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809aa48:	2303      	movs	r3, #3
 809aa4a:	218c      	movs	r1, #140	; 0x8c
 809aa4c:	2014      	movs	r0, #20
 809aa4e:	f7eb f8ad 	bl	8085bac <BSP_LCD_DisplayStringAt>

		statusPressure = BSP_PRESSURE_ReadCompensatedValues(&pressure, &temperature);
 809aa52:	1d3a      	adds	r2, r7, #4
 809aa54:	463b      	mov	r3, r7
 809aa56:	4611      	mov	r1, r2
 809aa58:	4618      	mov	r0, r3
 809aa5a:	f7ec ff2f 	bl	80878bc <BSP_PRESSURE_ReadCompensatedValues>
 809aa5e:	4603      	mov	r3, r0
 809aa60:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
		if (statusPressure == PRESSURE_OK) {
 809aa64:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 809aa68:	2b00      	cmp	r3, #0
 809aa6a:	d10c      	bne.n	809aa86 <SENSORS_Demo+0x1ba>
			sprintf((char*)&strbuff, "Pressure (OK): %i     ", (int)pressure);
 809aa6c:	edd7 7a00 	vldr	s15, [r7]
 809aa70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809aa74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809aa78:	ee17 2a90 	vmov	r2, s15
 809aa7c:	4953      	ldr	r1, [pc, #332]	; (809abcc <SENSORS_Demo+0x300>)
 809aa7e:	4618      	mov	r0, r3
 809aa80:	f001 fe30 	bl	809c6e4 <siprintf>
 809aa84:	e00e      	b.n	809aaa4 <SENSORS_Demo+0x1d8>
		}
		else {
			sprintf((char*)&strbuff, "Pressure (Failed):                                      ");
 809aa86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809aa8a:	4a51      	ldr	r2, [pc, #324]	; (809abd0 <SENSORS_Demo+0x304>)
 809aa8c:	461c      	mov	r4, r3
 809aa8e:	4615      	mov	r5, r2
 809aa90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aa9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aa9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 809aaa0:	c403      	stmia	r4!, {r0, r1}
 809aaa2:	7022      	strb	r2, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)strbuff, LEFT_MODE);
 809aaa4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809aaa8:	2303      	movs	r3, #3
 809aaaa:	21a0      	movs	r1, #160	; 0xa0
 809aaac:	2014      	movs	r0, #20
 809aaae:	f7eb f87d 	bl	8085bac <BSP_LCD_DisplayStringAt>

		if (statusPressure == PRESSURE_OK) {
 809aab2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 809aab6:	2b00      	cmp	r3, #0
 809aab8:	d10c      	bne.n	809aad4 <SENSORS_Demo+0x208>
			sprintf((char*)&strbuff, "Temperature (PRESSURE) ( OK): %i C     ", (int)temperature);
 809aaba:	edd7 7a01 	vldr	s15, [r7, #4]
 809aabe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809aac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809aac6:	ee17 2a90 	vmov	r2, s15
 809aaca:	4942      	ldr	r1, [pc, #264]	; (809abd4 <SENSORS_Demo+0x308>)
 809aacc:	4618      	mov	r0, r3
 809aace:	f001 fe09 	bl	809c6e4 <siprintf>
 809aad2:	e00a      	b.n	809aaea <SENSORS_Demo+0x21e>
		}
		else {
			sprintf((char*)&strbuff, "Temperature (PRESSURE) (NOK):");
 809aad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809aad8:	4a3f      	ldr	r2, [pc, #252]	; (809abd8 <SENSORS_Demo+0x30c>)
 809aada:	461c      	mov	r4, r3
 809aadc:	4615      	mov	r5, r2
 809aade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809aae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809aae2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 809aae6:	c407      	stmia	r4!, {r0, r1, r2}
 809aae8:	8023      	strh	r3, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 240, (uint8_t *)strbuff, LEFT_MODE);
 809aaea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809aaee:	2303      	movs	r3, #3
 809aaf0:	21f0      	movs	r1, #240	; 0xf0
 809aaf2:	2014      	movs	r0, #20
 809aaf4:	f7eb f85a 	bl	8085bac <BSP_LCD_DisplayStringAt>

		status = BSP_MAG_ReadTemperature(&temperature);
 809aaf8:	1d3b      	adds	r3, r7, #4
 809aafa:	4618      	mov	r0, r3
 809aafc:	f7ec fd6e 	bl	80875dc <BSP_MAG_ReadTemperature>
 809ab00:	4603      	mov	r3, r0
 809ab02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status == ACC_OK) {
 809ab06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 809ab0a:	2b00      	cmp	r3, #0
 809ab0c:	d10c      	bne.n	809ab28 <SENSORS_Demo+0x25c>
			sprintf((char*)&strbuff, "Temperature (MAG) ( OK): %i C     ", (int)temperature);
 809ab0e:	edd7 7a01 	vldr	s15, [r7, #4]
 809ab12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809ab16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809ab1a:	ee17 2a90 	vmov	r2, s15
 809ab1e:	492f      	ldr	r1, [pc, #188]	; (809abdc <SENSORS_Demo+0x310>)
 809ab20:	4618      	mov	r0, r3
 809ab22:	f001 fddf 	bl	809c6e4 <siprintf>
 809ab26:	e00a      	b.n	809ab3e <SENSORS_Demo+0x272>
		}
		else {
			sprintf((char*)&strbuff, "Temperature (MAG) (NOK):");
 809ab28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809ab2c:	4a2c      	ldr	r2, [pc, #176]	; (809abe0 <SENSORS_Demo+0x314>)
 809ab2e:	461c      	mov	r4, r3
 809ab30:	4615      	mov	r5, r2
 809ab32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809ab34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809ab36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 809ab3a:	c403      	stmia	r4!, {r0, r1}
 809ab3c:	7022      	strb	r2, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 200, (uint8_t *)strbuff, LEFT_MODE);
 809ab3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809ab42:	2303      	movs	r3, #3
 809ab44:	21c8      	movs	r1, #200	; 0xc8
 809ab46:	2014      	movs	r0, #20
 809ab48:	f7eb f830 	bl	8085bac <BSP_LCD_DisplayStringAt>

		status = BSP_ACC_ReadTemperature(&temperature);
 809ab4c:	1d3b      	adds	r3, r7, #4
 809ab4e:	4618      	mov	r0, r3
 809ab50:	f7e9 fdfa 	bl	8084748 <BSP_ACC_ReadTemperature>
 809ab54:	4603      	mov	r3, r0
 809ab56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status == ACC_OK) {
 809ab5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 809ab5e:	2b00      	cmp	r3, #0
 809ab60:	d10c      	bne.n	809ab7c <SENSORS_Demo+0x2b0>
			sprintf((char*)&strbuff, "Temperature (ACC) ( OK): %i C     ", (int)temperature);
 809ab62:	edd7 7a01 	vldr	s15, [r7, #4]
 809ab66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 809ab6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809ab6e:	ee17 2a90 	vmov	r2, s15
 809ab72:	491c      	ldr	r1, [pc, #112]	; (809abe4 <SENSORS_Demo+0x318>)
 809ab74:	4618      	mov	r0, r3
 809ab76:	f001 fdb5 	bl	809c6e4 <siprintf>
 809ab7a:	e00a      	b.n	809ab92 <SENSORS_Demo+0x2c6>
		}
		else {
			sprintf((char*)&strbuff, "Temperature (ACC) (NOK):");
 809ab7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 809ab80:	4a19      	ldr	r2, [pc, #100]	; (809abe8 <SENSORS_Demo+0x31c>)
 809ab82:	461c      	mov	r4, r3
 809ab84:	4615      	mov	r5, r2
 809ab86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 809ab88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 809ab8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 809ab8e:	c403      	stmia	r4!, {r0, r1}
 809ab90:	7022      	strb	r2, [r4, #0]
		}

		BSP_LCD_DisplayStringAt(20, 220, (uint8_t *)strbuff, LEFT_MODE);
 809ab92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 809ab96:	2303      	movs	r3, #3
 809ab98:	21dc      	movs	r1, #220	; 0xdc
 809ab9a:	2014      	movs	r0, #20
 809ab9c:	f7eb f806 	bl	8085bac <BSP_LCD_DisplayStringAt>
	while (CheckForUserInput() == 0)
 809aba0:	f000 f86c 	bl	809ac7c <CheckForUserInput>
 809aba4:	4603      	mov	r3, r0
 809aba6:	2b00      	cmp	r3, #0
 809aba8:	f43f ae9c 	beq.w	809a8e4 <SENSORS_Demo+0x18>
	}

	//__disable_irq();
}
 809abac:	bf00      	nop
 809abae:	3780      	adds	r7, #128	; 0x80
 809abb0:	46bd      	mov	sp, r7
 809abb2:	bdb0      	pop	{r4, r5, r7, pc}
 809abb4:	0809ec68 	.word	0x0809ec68
 809abb8:	0809ec8c 	.word	0x0809ec8c
 809abbc:	0809ecc4 	.word	0x0809ecc4
 809abc0:	0809ece8 	.word	0x0809ece8
 809abc4:	0809ed20 	.word	0x0809ed20
 809abc8:	0809ed44 	.word	0x0809ed44
 809abcc:	0809ed7c 	.word	0x0809ed7c
 809abd0:	0809ed94 	.word	0x0809ed94
 809abd4:	0809edd0 	.word	0x0809edd0
 809abd8:	0809edf8 	.word	0x0809edf8
 809abdc:	0809ee18 	.word	0x0809ee18
 809abe0:	0809ee3c 	.word	0x0809ee3c
 809abe4:	0809ee58 	.word	0x0809ee58
 809abe8:	0809ee7c 	.word	0x0809ee7c

0809abec <SENSORS_SetHint>:
 * @brief  Display SD Demo Hint
 * @param  None
 * @retval None
 */
static void SENSORS_SetHint(void)
{
 809abec:	b580      	push	{r7, lr}
 809abee:	af00      	add	r7, sp, #0
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 809abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809abf4:	f7ea ff5c 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set LCD Demo description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809abf8:	481a      	ldr	r0, [pc, #104]	; (809ac64 <SENSORS_SetHint+0x78>)
 809abfa:	f7ea fee3 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809abfe:	f7ea fe35 	bl	808586c <BSP_LCD_GetXSize>
 809ac02:	4603      	mov	r3, r0
 809ac04:	b29a      	uxth	r2, r3
 809ac06:	2350      	movs	r3, #80	; 0x50
 809ac08:	2100      	movs	r1, #0
 809ac0a:	2000      	movs	r0, #0
 809ac0c:	f7eb fde0 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809ac10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809ac14:	f7ea fed6 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 809ac18:	4812      	ldr	r0, [pc, #72]	; (809ac64 <SENSORS_SetHint+0x78>)
 809ac1a:	f7ea feff 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 809ac1e:	4812      	ldr	r0, [pc, #72]	; (809ac68 <SENSORS_SetHint+0x7c>)
 809ac20:	f7ea ff16 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SENSORS", CENTER_MODE);
 809ac24:	2301      	movs	r3, #1
 809ac26:	4a11      	ldr	r2, [pc, #68]	; (809ac6c <SENSORS_SetHint+0x80>)
 809ac28:	2100      	movs	r1, #0
 809ac2a:	2000      	movs	r0, #0
 809ac2c:	f7ea ffbe 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 809ac30:	480f      	ldr	r0, [pc, #60]	; (809ac70 <SENSORS_SetHint+0x84>)
 809ac32:	f7ea ff0d 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows sensors", CENTER_MODE);
 809ac36:	2301      	movs	r3, #1
 809ac38:	4a0e      	ldr	r2, [pc, #56]	; (809ac74 <SENSORS_SetHint+0x88>)
 809ac3a:	211e      	movs	r1, #30
 809ac3c:	2000      	movs	r0, #0
 809ac3e:	f7ea ffb5 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"values  ", CENTER_MODE);
 809ac42:	2301      	movs	r3, #1
 809ac44:	4a0c      	ldr	r2, [pc, #48]	; (809ac78 <SENSORS_SetHint+0x8c>)
 809ac46:	212d      	movs	r1, #45	; 0x2d
 809ac48:	2000      	movs	r0, #0
 809ac4a:	f7ea ffaf 	bl	8085bac <BSP_LCD_DisplayStringAt>
	/* Set the LCD Text Color */
	/*BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
	BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
	BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);*/

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809ac4e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809ac52:	f7ea feb7 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809ac56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809ac5a:	f7ea fedf 	bl	8085a1c <BSP_LCD_SetBackColor>
}
 809ac5e:	bf00      	nop
 809ac60:	bd80      	pop	{r7, pc}
 809ac62:	bf00      	nop
 809ac64:	ff0000ff 	.word	0xff0000ff
 809ac68:	2000b36c 	.word	0x2000b36c
 809ac6c:	0809ee98 	.word	0x0809ee98
 809ac70:	2000b354 	.word	0x2000b354
 809ac74:	0809eea0 	.word	0x0809eea0
 809ac78:	0809eebc 	.word	0x0809eebc

0809ac7c <CheckForUserInput>:
 * @brief  Check for user input.
 * @param  None
 * @retval Input state (1 : active / 0 : Inactive)
 */
uint8_t CheckForUserInput(void)
{
 809ac7c:	b580      	push	{r7, lr}
 809ac7e:	af00      	add	r7, sp, #0
	if (BSP_PB_GetState(BUTTON_A) != RESET)
 809ac80:	f44f 7084 	mov.w	r0, #264	; 0x108
 809ac84:	f7e9 f90c 	bl	8083ea0 <BSP_PB_GetState>
 809ac88:	4603      	mov	r3, r0
 809ac8a:	2b00      	cmp	r3, #0
 809ac8c:	d00c      	beq.n	809aca8 <CheckForUserInput+0x2c>
	{
		HAL_Delay(10);
 809ac8e:	200a      	movs	r0, #10
 809ac90:	f7ee fa72 	bl	8089178 <HAL_Delay>
		while (BSP_PB_GetState(BUTTON_A) != RESET);
 809ac94:	bf00      	nop
 809ac96:	f44f 7084 	mov.w	r0, #264	; 0x108
 809ac9a:	f7e9 f901 	bl	8083ea0 <BSP_PB_GetState>
 809ac9e:	4603      	mov	r3, r0
 809aca0:	2b00      	cmp	r3, #0
 809aca2:	d1f8      	bne.n	809ac96 <CheckForUserInput+0x1a>
		return 1 ;
 809aca4:	2301      	movs	r3, #1
 809aca6:	e000      	b.n	809acaa <CheckForUserInput+0x2e>
	}
	return 0;
 809aca8:	2300      	movs	r3, #0
}
 809acaa:	4618      	mov	r0, r3
 809acac:	bd80      	pop	{r7, pc}
	...

0809acb0 <Display_DemoDescription>:
 * @brief  Display main demo messages.
 * @param  None
 * @retval None
 */
static void Display_DemoDescription(void)
{
 809acb0:	b590      	push	{r4, r7, lr}
 809acb2:	b08f      	sub	sp, #60	; 0x3c
 809acb4:	af00      	add	r7, sp, #0
	uint8_t desc[50];

	/* Set LCD Background Layer  */
	BSP_LCD_SelectLayer(LTDC_FOREGROUND_LAYER);
 809acb6:	2001      	movs	r0, #1
 809acb8:	f7ea fe60 	bl	808597c <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 809acbc:	4846      	ldr	r0, [pc, #280]	; (809add8 <Display_DemoDescription+0x128>)
 809acbe:	f7ea fec7 	bl	8085a50 <BSP_LCD_SetFont>

	BSP_LCD_SetColorKeying(LTDC_FOREGROUND_LAYER, LCD_COLOR_BLACK);
 809acc2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 809acc6:	2001      	movs	r0, #1
 809acc8:	f7ea fe68 	bl	808599c <BSP_LCD_SetColorKeying>

	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 809accc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809acd0:	f7ea fea4 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 809acd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809acd8:	f7ea feea 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set LCD Background Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 809acdc:	2000      	movs	r0, #0
 809acde:	f7ea fe4d 	bl	808597c <BSP_LCD_SelectLayer>

	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 809ace2:	483d      	ldr	r0, [pc, #244]	; (809add8 <Display_DemoDescription+0x128>)
 809ace4:	f7ea feb4 	bl	8085a50 <BSP_LCD_SetFont>

	/* Clear the LCD */
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809ace8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809acec:	f7ea fe96 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 809acf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809acf4:	f7ea fedc 	bl	8085ab0 <BSP_LCD_Clear>

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 809acf8:	4838      	ldr	r0, [pc, #224]	; (809addc <Display_DemoDescription+0x12c>)
 809acfa:	f7ea fe63 	bl	80859c4 <BSP_LCD_SetTextColor>

	/* Display LCD messages */
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"ARM-ADA Next Gen", CENTER_MODE);
 809acfe:	2301      	movs	r3, #1
 809ad00:	4a37      	ldr	r2, [pc, #220]	; (809ade0 <Display_DemoDescription+0x130>)
 809ad02:	210a      	movs	r1, #10
 809ad04:	2000      	movs	r0, #0
 809ad06:	f7ea ff51 	bl	8085bac <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Firmware tests", CENTER_MODE);
 809ad0a:	2301      	movs	r3, #1
 809ad0c:	4a35      	ldr	r2, [pc, #212]	; (809ade4 <Display_DemoDescription+0x134>)
 809ad0e:	2123      	movs	r1, #35	; 0x23
 809ad10:	2000      	movs	r0, #0
 809ad12:	f7ea ff4b 	bl	8085bac <BSP_LCD_DisplayStringAt>

	/* Draw Bitmap */
	BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 809ad16:	f7ea fda9 	bl	808586c <BSP_LCD_GetXSize>
 809ad1a:	4603      	mov	r3, r0
 809ad1c:	3b50      	subs	r3, #80	; 0x50
 809ad1e:	085b      	lsrs	r3, r3, #1
 809ad20:	4a31      	ldr	r2, [pc, #196]	; (809ade8 <Display_DemoDescription+0x138>)
 809ad22:	2141      	movs	r1, #65	; 0x41
 809ad24:	4618      	mov	r0, r3
 809ad26:	f7eb fc79 	bl	808661c <BSP_LCD_DrawBitmap>

	BSP_LCD_SetFont(&Font12);
 809ad2a:	4830      	ldr	r0, [pc, #192]	; (809adec <Display_DemoDescription+0x13c>)
 809ad2c:	f7ea fe90 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"INSA - GEI 2019", CENTER_MODE);
 809ad30:	f7ea fdb0 	bl	8085894 <BSP_LCD_GetYSize>
 809ad34:	4603      	mov	r3, r0
 809ad36:	b29b      	uxth	r3, r3
 809ad38:	3b14      	subs	r3, #20
 809ad3a:	b299      	uxth	r1, r3
 809ad3c:	2301      	movs	r3, #1
 809ad3e:	4a2c      	ldr	r2, [pc, #176]	; (809adf0 <Display_DemoDescription+0x140>)
 809ad40:	2000      	movs	r0, #0
 809ad42:	f7ea ff33 	bl	8085bac <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 809ad46:	482b      	ldr	r0, [pc, #172]	; (809adf4 <Display_DemoDescription+0x144>)
 809ad48:	f7ea fe82 	bl	8085a50 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809ad4c:	482a      	ldr	r0, [pc, #168]	; (809adf8 <Display_DemoDescription+0x148>)
 809ad4e:	f7ea fe39 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 809ad52:	f7ea fd9f 	bl	8085894 <BSP_LCD_GetYSize>
 809ad56:	4603      	mov	r3, r0
 809ad58:	085b      	lsrs	r3, r3, #1
 809ad5a:	b29b      	uxth	r3, r3
 809ad5c:	330f      	adds	r3, #15
 809ad5e:	b29c      	uxth	r4, r3
 809ad60:	f7ea fd84 	bl	808586c <BSP_LCD_GetXSize>
 809ad64:	4603      	mov	r3, r0
 809ad66:	b29a      	uxth	r2, r3
 809ad68:	233c      	movs	r3, #60	; 0x3c
 809ad6a:	4621      	mov	r1, r4
 809ad6c:	2000      	movs	r0, #0
 809ad6e:	f7eb fd2f 	bl	80867d0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809ad72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809ad76:	f7ea fe25 	bl	80859c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 809ad7a:	481f      	ldr	r0, [pc, #124]	; (809adf8 <Display_DemoDescription+0x148>)
 809ad7c:	f7ea fe4e 	bl	8085a1c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press A (Red) to start ", CENTER_MODE);
 809ad80:	f7ea fd88 	bl	8085894 <BSP_LCD_GetYSize>
 809ad84:	4603      	mov	r3, r0
 809ad86:	085b      	lsrs	r3, r3, #1
 809ad88:	b29b      	uxth	r3, r3
 809ad8a:	331e      	adds	r3, #30
 809ad8c:	b299      	uxth	r1, r3
 809ad8e:	2301      	movs	r3, #1
 809ad90:	4a1a      	ldr	r2, [pc, #104]	; (809adfc <Display_DemoDescription+0x14c>)
 809ad92:	2000      	movs	r0, #0
 809ad94:	f7ea ff0a 	bl	8085bac <BSP_LCD_DisplayStringAt>
	sprintf((char *)desc, "%s example", BSP_examples[DemoIndex].DemoName);
 809ad98:	4b19      	ldr	r3, [pc, #100]	; (809ae00 <Display_DemoDescription+0x150>)
 809ad9a:	781b      	ldrb	r3, [r3, #0]
 809ad9c:	461a      	mov	r2, r3
 809ad9e:	4613      	mov	r3, r2
 809ada0:	011b      	lsls	r3, r3, #4
 809ada2:	1a9b      	subs	r3, r3, r2
 809ada4:	009b      	lsls	r3, r3, #2
 809ada6:	4a17      	ldr	r2, [pc, #92]	; (809ae04 <Display_DemoDescription+0x154>)
 809ada8:	4413      	add	r3, r2
 809adaa:	1d1a      	adds	r2, r3, #4
 809adac:	1d3b      	adds	r3, r7, #4
 809adae:	4916      	ldr	r1, [pc, #88]	; (809ae08 <Display_DemoDescription+0x158>)
 809adb0:	4618      	mov	r0, r3
 809adb2:	f001 fc97 	bl	809c6e4 <siprintf>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 809adb6:	f7ea fd6d 	bl	8085894 <BSP_LCD_GetYSize>
 809adba:	4603      	mov	r3, r0
 809adbc:	085b      	lsrs	r3, r3, #1
 809adbe:	b29b      	uxth	r3, r3
 809adc0:	332d      	adds	r3, #45	; 0x2d
 809adc2:	b299      	uxth	r1, r3
 809adc4:	1d3a      	adds	r2, r7, #4
 809adc6:	2301      	movs	r3, #1
 809adc8:	2000      	movs	r0, #0
 809adca:	f7ea feef 	bl	8085bac <BSP_LCD_DisplayStringAt>
}
 809adce:	bf00      	nop
 809add0:	373c      	adds	r7, #60	; 0x3c
 809add2:	46bd      	mov	sp, r7
 809add4:	bd90      	pop	{r4, r7, pc}
 809add6:	bf00      	nop
 809add8:	2000b36c 	.word	0x2000b36c
 809addc:	ff000080 	.word	0xff000080
 809ade0:	0809eec8 	.word	0x0809eec8
 809ade4:	0809eedc 	.word	0x0809eedc
 809ade8:	0809f6a0 	.word	0x0809f6a0
 809adec:	2000b354 	.word	0x2000b354
 809adf0:	0809eeec 	.word	0x0809eeec
 809adf4:	2000b35c 	.word	0x2000b35c
 809adf8:	ff0000ff 	.word	0xff0000ff
 809adfc:	0809eefc 	.word	0x0809eefc
 809ae00:	2002d7a4 	.word	0x2002d7a4
 809ae04:	2000b0b4 	.word	0x2000b0b4
 809ae08:	0809ef14 	.word	0x0809ef14

0809ae0c <TESTS_Run>:

void TESTS_Run(void)
{
 809ae0c:	b580      	push	{r7, lr}
 809ae0e:	af00      	add	r7, sp, #0
	Display_DemoDescription();
 809ae10:	f7ff ff4e 	bl	809acb0 <Display_DemoDescription>

	/* Wait For User inputs */
	while (1)
	{
		if (BSP_PB_GetState(BUTTON_A) != RESET)
 809ae14:	f44f 7084 	mov.w	r0, #264	; 0x108
 809ae18:	f7e9 f842 	bl	8083ea0 <BSP_PB_GetState>
 809ae1c:	4603      	mov	r3, r0
 809ae1e:	2b00      	cmp	r3, #0
 809ae20:	d0f8      	beq.n	809ae14 <TESTS_Run+0x8>
		{
			HAL_Delay(100);
 809ae22:	2064      	movs	r0, #100	; 0x64
 809ae24:	f7ee f9a8 	bl	8089178 <HAL_Delay>
			while (BSP_PB_GetState(BUTTON_A) != RESET);
 809ae28:	bf00      	nop
 809ae2a:	f44f 7084 	mov.w	r0, #264	; 0x108
 809ae2e:	f7e9 f837 	bl	8083ea0 <BSP_PB_GetState>
 809ae32:	4603      	mov	r3, r0
 809ae34:	2b00      	cmp	r3, #0
 809ae36:	d1f8      	bne.n	809ae2a <TESTS_Run+0x1e>

			BSP_examples[DemoIndex++].DemoFunc();
 809ae38:	4b0f      	ldr	r3, [pc, #60]	; (809ae78 <TESTS_Run+0x6c>)
 809ae3a:	781b      	ldrb	r3, [r3, #0]
 809ae3c:	1c5a      	adds	r2, r3, #1
 809ae3e:	b2d1      	uxtb	r1, r2
 809ae40:	4a0d      	ldr	r2, [pc, #52]	; (809ae78 <TESTS_Run+0x6c>)
 809ae42:	7011      	strb	r1, [r2, #0]
 809ae44:	4619      	mov	r1, r3
 809ae46:	4a0d      	ldr	r2, [pc, #52]	; (809ae7c <TESTS_Run+0x70>)
 809ae48:	460b      	mov	r3, r1
 809ae4a:	011b      	lsls	r3, r3, #4
 809ae4c:	1a5b      	subs	r3, r3, r1
 809ae4e:	009b      	lsls	r3, r3, #2
 809ae50:	4413      	add	r3, r2
 809ae52:	681b      	ldr	r3, [r3, #0]
 809ae54:	4798      	blx	r3

			if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 809ae56:	4b08      	ldr	r3, [pc, #32]	; (809ae78 <TESTS_Run+0x6c>)
 809ae58:	781b      	ldrb	r3, [r3, #0]
 809ae5a:	2b0a      	cmp	r3, #10
 809ae5c:	d908      	bls.n	809ae70 <TESTS_Run+0x64>
			{
				/* Increment number of loops which be used by EEPROM example */
				NbLoop++;
 809ae5e:	4b08      	ldr	r3, [pc, #32]	; (809ae80 <TESTS_Run+0x74>)
 809ae60:	781b      	ldrb	r3, [r3, #0]
 809ae62:	3301      	adds	r3, #1
 809ae64:	b2da      	uxtb	r2, r3
 809ae66:	4b06      	ldr	r3, [pc, #24]	; (809ae80 <TESTS_Run+0x74>)
 809ae68:	701a      	strb	r2, [r3, #0]
				DemoIndex = 0;
 809ae6a:	4b03      	ldr	r3, [pc, #12]	; (809ae78 <TESTS_Run+0x6c>)
 809ae6c:	2200      	movs	r2, #0
 809ae6e:	701a      	strb	r2, [r3, #0]
			}
			Display_DemoDescription();
 809ae70:	f7ff ff1e 	bl	809acb0 <Display_DemoDescription>
		if (BSP_PB_GetState(BUTTON_A) != RESET)
 809ae74:	e7ce      	b.n	809ae14 <TESTS_Run+0x8>
 809ae76:	bf00      	nop
 809ae78:	2002d7a4 	.word	0x2002d7a4
 809ae7c:	2000b0b4 	.word	0x2000b0b4
 809ae80:	2000b348 	.word	0x2000b348

0809ae84 <Touchscreen_demo>:
  * @brief  Touchscreen Demo
  * @param  None
  * @retval None
  */
void Touchscreen_demo (void)
{
 809ae84:	b590      	push	{r4, r7, lr}
 809ae86:	b08b      	sub	sp, #44	; 0x2c
 809ae88:	af00      	add	r7, sp, #0
  uint8_t  status = 0;
 809ae8a:	2300      	movs	r3, #0
 809ae8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint16_t x, y;
  uint8_t  state = 0;
 809ae90:	2300      	movs	r3, #0
 809ae92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t  text[30];
  uint8_t  radius;
  uint8_t  radius_previous = 0;
 809ae96:	2300      	movs	r3, #0
 809ae98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  Touchscreen_SetHint();
 809ae9c:	f000 fabe 	bl	809b41c <Touchscreen_SetHint>

  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 809aea0:	f7ea fce4 	bl	808586c <BSP_LCD_GetXSize>
 809aea4:	4603      	mov	r3, r0
 809aea6:	b29c      	uxth	r4, r3
 809aea8:	f7ea fcf4 	bl	8085894 <BSP_LCD_GetYSize>
 809aeac:	4603      	mov	r3, r0
 809aeae:	b29b      	uxth	r3, r3
 809aeb0:	4619      	mov	r1, r3
 809aeb2:	4620      	mov	r0, r4
 809aeb4:	f7ed fe60 	bl	8088b78 <BSP_TS_Init>
 809aeb8:	4603      	mov	r3, r0
 809aeba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  if (status != TS_OK)
 809aebe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 809aec2:	2b00      	cmp	r3, #0
 809aec4:	d01d      	beq.n	809af02 <Touchscreen_demo+0x7e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809aec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809aeca:	f7ea fda7 	bl	8085a1c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 809aece:	4896      	ldr	r0, [pc, #600]	; (809b128 <Touchscreen_demo+0x2a4>)
 809aed0:	f7ea fd78 	bl	80859c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 809aed4:	f7ea fcde 	bl	8085894 <BSP_LCD_GetYSize>
 809aed8:	4603      	mov	r3, r0
 809aeda:	b29b      	uxth	r3, r3
 809aedc:	3b5f      	subs	r3, #95	; 0x5f
 809aede:	b299      	uxth	r1, r3
 809aee0:	2301      	movs	r3, #1
 809aee2:	4a92      	ldr	r2, [pc, #584]	; (809b12c <Touchscreen_demo+0x2a8>)
 809aee4:	2000      	movs	r0, #0
 809aee6:	f7ea fe61 	bl	8085bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 809aeea:	f7ea fcd3 	bl	8085894 <BSP_LCD_GetYSize>
 809aeee:	4603      	mov	r3, r0
 809aef0:	b29b      	uxth	r3, r3
 809aef2:	3b50      	subs	r3, #80	; 0x50
 809aef4:	b299      	uxth	r1, r3
 809aef6:	2301      	movs	r3, #1
 809aef8:	4a8d      	ldr	r2, [pc, #564]	; (809b130 <Touchscreen_demo+0x2ac>)
 809aefa:	2000      	movs	r0, #0
 809aefc:	f7ea fe56 	bl	8085bac <BSP_LCD_DisplayStringAt>
 809af00:	e004      	b.n	809af0c <Touchscreen_demo+0x88>
  }
  else
  {
    Touchscreen_DrawBackground(state);
 809af02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809af06:	4618      	mov	r0, r3
 809af08:	f000 faf4 	bl	809b4f4 <Touchscreen_DrawBackground>
  }

  while (1)
  {
    if (status == TS_OK)
 809af0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 809af10:	2b00      	cmp	r3, #0
 809af12:	f040 826f 	bne.w	809b3f4 <Touchscreen_demo+0x570>
    {
      /* Check in polling mode in touch screen the touch status and coordinates */
      /* if touch occurred                                                      */
      BSP_TS_GetState(&TS_State);
 809af16:	4887      	ldr	r0, [pc, #540]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af18:	f7ed fe6e 	bl	8088bf8 <BSP_TS_GetState>
      if(TS_State.touchDetected)
 809af1c:	4b85      	ldr	r3, [pc, #532]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af1e:	781b      	ldrb	r3, [r3, #0]
 809af20:	2b00      	cmp	r3, #0
 809af22:	f000 8267 	beq.w	809b3f4 <Touchscreen_demo+0x570>
      {
        /* Get X and Y position of the touch post calibrated */
        x = TS_State.touchX[0];
 809af26:	4b83      	ldr	r3, [pc, #524]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af28:	885b      	ldrh	r3, [r3, #2]
 809af2a:	847b      	strh	r3, [r7, #34]	; 0x22
        y = TS_State.touchY[0];
 809af2c:	4b81      	ldr	r3, [pc, #516]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af2e:	899b      	ldrh	r3, [r3, #12]
 809af30:	843b      	strh	r3, [r7, #32]

        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 809af32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809af36:	f7ea fd71 	bl	8085a1c <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 809af3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 809af3e:	f7ea fd41 	bl	80859c4 <BSP_LCD_SetTextColor>
        sprintf((char*)text, "Nb touch detected = %d", TS_State.touchDetected);
 809af42:	4b7c      	ldr	r3, [pc, #496]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af44:	781b      	ldrb	r3, [r3, #0]
 809af46:	461a      	mov	r2, r3
 809af48:	463b      	mov	r3, r7
 809af4a:	497b      	ldr	r1, [pc, #492]	; (809b138 <Touchscreen_demo+0x2b4>)
 809af4c:	4618      	mov	r0, r3
 809af4e:	f001 fbc9 	bl	809c6e4 <siprintf>
        BSP_LCD_DisplayStringAt(15, BSP_LCD_GetYSize() - 40, (uint8_t *)&text, LEFT_MODE);
 809af52:	f7ea fc9f 	bl	8085894 <BSP_LCD_GetYSize>
 809af56:	4603      	mov	r3, r0
 809af58:	b29b      	uxth	r3, r3
 809af5a:	3b28      	subs	r3, #40	; 0x28
 809af5c:	b299      	uxth	r1, r3
 809af5e:	463a      	mov	r2, r7
 809af60:	2303      	movs	r3, #3
 809af62:	200f      	movs	r0, #15
 809af64:	f7ea fe22 	bl	8085bac <BSP_LCD_DisplayStringAt>

        /* Display 1st touch detected coordinates */
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 809af68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 809af6a:	8c3b      	ldrh	r3, [r7, #32]
 809af6c:	4638      	mov	r0, r7
 809af6e:	4973      	ldr	r1, [pc, #460]	; (809b13c <Touchscreen_demo+0x2b8>)
 809af70:	f001 fbb8 	bl	809c6e4 <siprintf>
        BSP_LCD_DisplayStringAt(15,
                                BSP_LCD_GetYSize() - 25,
 809af74:	f7ea fc8e 	bl	8085894 <BSP_LCD_GetYSize>
 809af78:	4603      	mov	r3, r0
        BSP_LCD_DisplayStringAt(15,
 809af7a:	b29b      	uxth	r3, r3
 809af7c:	3b19      	subs	r3, #25
 809af7e:	b299      	uxth	r1, r3
 809af80:	463a      	mov	r2, r7
 809af82:	2303      	movs	r3, #3
 809af84:	200f      	movs	r0, #15
 809af86:	f7ea fe11 	bl	8085bac <BSP_LCD_DisplayStringAt>
                                (uint8_t *)&text,
                                LEFT_MODE);

        if (TS_State.touchDetected >= 2)  /* Display 2nd touch detected coordinates if applicable */
 809af8a:	4b6a      	ldr	r3, [pc, #424]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af8c:	781b      	ldrb	r3, [r3, #0]
 809af8e:	2b01      	cmp	r3, #1
 809af90:	d909      	bls.n	809afa6 <Touchscreen_demo+0x122>
        {
          sprintf((char*)text, "2[%d,%d]    ", TS_State.touchX[1], TS_State.touchY[1]);
 809af92:	4b68      	ldr	r3, [pc, #416]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af94:	889b      	ldrh	r3, [r3, #4]
 809af96:	461a      	mov	r2, r3
 809af98:	4b66      	ldr	r3, [pc, #408]	; (809b134 <Touchscreen_demo+0x2b0>)
 809af9a:	89db      	ldrh	r3, [r3, #14]
 809af9c:	4638      	mov	r0, r7
 809af9e:	4968      	ldr	r1, [pc, #416]	; (809b140 <Touchscreen_demo+0x2bc>)
 809afa0:	f001 fba0 	bl	809c6e4 <siprintf>
 809afa4:	e009      	b.n	809afba <Touchscreen_demo+0x136>
        }
        else
        {
          sprintf((char*)text, "              ");
 809afa6:	463b      	mov	r3, r7
 809afa8:	4a66      	ldr	r2, [pc, #408]	; (809b144 <Touchscreen_demo+0x2c0>)
 809afaa:	461c      	mov	r4, r3
 809afac:	4613      	mov	r3, r2
 809afae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 809afb0:	c407      	stmia	r4!, {r0, r1, r2}
 809afb2:	8023      	strh	r3, [r4, #0]
 809afb4:	3402      	adds	r4, #2
 809afb6:	0c1b      	lsrs	r3, r3, #16
 809afb8:	7023      	strb	r3, [r4, #0]
        }
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 809afba:	f7ea fc57 	bl	808586c <BSP_LCD_GetXSize>
 809afbe:	4603      	mov	r3, r0
 809afc0:	3b1e      	subs	r3, #30
 809afc2:	4a61      	ldr	r2, [pc, #388]	; (809b148 <Touchscreen_demo+0x2c4>)
 809afc4:	fba2 2303 	umull	r2, r3, r2, r3
 809afc8:	089b      	lsrs	r3, r3, #2
 809afca:	b29b      	uxth	r3, r3
 809afcc:	330f      	adds	r3, #15
 809afce:	b29c      	uxth	r4, r3
                                BSP_LCD_GetYSize() - 25,
 809afd0:	f7ea fc60 	bl	8085894 <BSP_LCD_GetYSize>
 809afd4:	4603      	mov	r3, r0
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 809afd6:	b29b      	uxth	r3, r3
 809afd8:	3b19      	subs	r3, #25
 809afda:	b299      	uxth	r1, r3
 809afdc:	463a      	mov	r2, r7
 809afde:	2303      	movs	r3, #3
 809afe0:	4620      	mov	r0, r4
 809afe2:	f7ea fde3 	bl	8085bac <BSP_LCD_DisplayStringAt>
                                (uint8_t *)&text,
                                LEFT_MODE);

        if (TS_State.touchDetected >= 3)  /* Display 3rd touch detected coordinates if applicable */
 809afe6:	4b53      	ldr	r3, [pc, #332]	; (809b134 <Touchscreen_demo+0x2b0>)
 809afe8:	781b      	ldrb	r3, [r3, #0]
 809afea:	2b02      	cmp	r3, #2
 809afec:	d909      	bls.n	809b002 <Touchscreen_demo+0x17e>
        {
          sprintf((char*)text, "3[%d,%d]    ", TS_State.touchX[2], TS_State.touchY[2]);
 809afee:	4b51      	ldr	r3, [pc, #324]	; (809b134 <Touchscreen_demo+0x2b0>)
 809aff0:	88db      	ldrh	r3, [r3, #6]
 809aff2:	461a      	mov	r2, r3
 809aff4:	4b4f      	ldr	r3, [pc, #316]	; (809b134 <Touchscreen_demo+0x2b0>)
 809aff6:	8a1b      	ldrh	r3, [r3, #16]
 809aff8:	4638      	mov	r0, r7
 809affa:	4954      	ldr	r1, [pc, #336]	; (809b14c <Touchscreen_demo+0x2c8>)
 809affc:	f001 fb72 	bl	809c6e4 <siprintf>
 809b000:	e009      	b.n	809b016 <Touchscreen_demo+0x192>
        }
        else
        {
          sprintf((char*)text, "              ");
 809b002:	463b      	mov	r3, r7
 809b004:	4a4f      	ldr	r2, [pc, #316]	; (809b144 <Touchscreen_demo+0x2c0>)
 809b006:	461c      	mov	r4, r3
 809b008:	4613      	mov	r3, r2
 809b00a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 809b00c:	c407      	stmia	r4!, {r0, r1, r2}
 809b00e:	8023      	strh	r3, [r4, #0]
 809b010:	3402      	adds	r4, #2
 809b012:	0c1b      	lsrs	r3, r3, #16
 809b014:	7023      	strb	r3, [r4, #0]
        }
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 809b016:	f7ea fc29 	bl	808586c <BSP_LCD_GetXSize>
 809b01a:	4602      	mov	r2, r0
 809b01c:	4b4c      	ldr	r3, [pc, #304]	; (809b150 <Touchscreen_demo+0x2cc>)
 809b01e:	4413      	add	r3, r2
 809b020:	005b      	lsls	r3, r3, #1
 809b022:	4a49      	ldr	r2, [pc, #292]	; (809b148 <Touchscreen_demo+0x2c4>)
 809b024:	fba2 2303 	umull	r2, r3, r2, r3
 809b028:	089b      	lsrs	r3, r3, #2
 809b02a:	b29b      	uxth	r3, r3
 809b02c:	330f      	adds	r3, #15
 809b02e:	b29c      	uxth	r4, r3
                                BSP_LCD_GetYSize() - 25,
 809b030:	f7ea fc30 	bl	8085894 <BSP_LCD_GetYSize>
 809b034:	4603      	mov	r3, r0
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 809b036:	b29b      	uxth	r3, r3
 809b038:	3b19      	subs	r3, #25
 809b03a:	b299      	uxth	r1, r3
 809b03c:	463a      	mov	r2, r7
 809b03e:	2303      	movs	r3, #3
 809b040:	4620      	mov	r0, r4
 809b042:	f7ea fdb3 	bl	8085bac <BSP_LCD_DisplayStringAt>
                                (uint8_t *)&text,
                                LEFT_MODE);

        if (TS_State.touchDetected >= 4)  /* Display 4th touch detected coordinates if applicable */
 809b046:	4b3b      	ldr	r3, [pc, #236]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b048:	781b      	ldrb	r3, [r3, #0]
 809b04a:	2b03      	cmp	r3, #3
 809b04c:	d909      	bls.n	809b062 <Touchscreen_demo+0x1de>
        {
          sprintf((char*)text, "4[%d,%d]    ", TS_State.touchX[3], TS_State.touchY[3]);
 809b04e:	4b39      	ldr	r3, [pc, #228]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b050:	891b      	ldrh	r3, [r3, #8]
 809b052:	461a      	mov	r2, r3
 809b054:	4b37      	ldr	r3, [pc, #220]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b056:	8a5b      	ldrh	r3, [r3, #18]
 809b058:	4638      	mov	r0, r7
 809b05a:	493e      	ldr	r1, [pc, #248]	; (809b154 <Touchscreen_demo+0x2d0>)
 809b05c:	f001 fb42 	bl	809c6e4 <siprintf>
 809b060:	e009      	b.n	809b076 <Touchscreen_demo+0x1f2>
        }
        else
        {
          sprintf((char*)text, "              ");
 809b062:	463b      	mov	r3, r7
 809b064:	4a37      	ldr	r2, [pc, #220]	; (809b144 <Touchscreen_demo+0x2c0>)
 809b066:	461c      	mov	r4, r3
 809b068:	4613      	mov	r3, r2
 809b06a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 809b06c:	c407      	stmia	r4!, {r0, r1, r2}
 809b06e:	8023      	strh	r3, [r4, #0]
 809b070:	3402      	adds	r4, #2
 809b072:	0c1b      	lsrs	r3, r3, #16
 809b074:	7023      	strb	r3, [r4, #0]
        }
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 809b076:	f7ea fbf9 	bl	808586c <BSP_LCD_GetXSize>
 809b07a:	4602      	mov	r2, r0
 809b07c:	4613      	mov	r3, r2
 809b07e:	005b      	lsls	r3, r3, #1
 809b080:	4413      	add	r3, r2
 809b082:	3b5a      	subs	r3, #90	; 0x5a
 809b084:	4a30      	ldr	r2, [pc, #192]	; (809b148 <Touchscreen_demo+0x2c4>)
 809b086:	fba2 2303 	umull	r2, r3, r2, r3
 809b08a:	089b      	lsrs	r3, r3, #2
 809b08c:	b29b      	uxth	r3, r3
 809b08e:	330f      	adds	r3, #15
 809b090:	b29c      	uxth	r4, r3
                                BSP_LCD_GetYSize() - 25,
 809b092:	f7ea fbff 	bl	8085894 <BSP_LCD_GetYSize>
 809b096:	4603      	mov	r3, r0
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 809b098:	b29b      	uxth	r3, r3
 809b09a:	3b19      	subs	r3, #25
 809b09c:	b299      	uxth	r1, r3
 809b09e:	463a      	mov	r2, r7
 809b0a0:	2303      	movs	r3, #3
 809b0a2:	4620      	mov	r0, r4
 809b0a4:	f7ea fd82 	bl	8085bac <BSP_LCD_DisplayStringAt>
                                (uint8_t *)&text,
                                LEFT_MODE);

        if (TS_State.touchDetected >= 5)  /* Display 5th touch detected coordinates if applicable */
 809b0a8:	4b22      	ldr	r3, [pc, #136]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b0aa:	781b      	ldrb	r3, [r3, #0]
 809b0ac:	2b04      	cmp	r3, #4
 809b0ae:	d909      	bls.n	809b0c4 <Touchscreen_demo+0x240>
        {
          sprintf((char*)text, "5[%d,%d]    ", TS_State.touchX[4], TS_State.touchY[4]);
 809b0b0:	4b20      	ldr	r3, [pc, #128]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b0b2:	895b      	ldrh	r3, [r3, #10]
 809b0b4:	461a      	mov	r2, r3
 809b0b6:	4b1f      	ldr	r3, [pc, #124]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b0b8:	8a9b      	ldrh	r3, [r3, #20]
 809b0ba:	4638      	mov	r0, r7
 809b0bc:	4926      	ldr	r1, [pc, #152]	; (809b158 <Touchscreen_demo+0x2d4>)
 809b0be:	f001 fb11 	bl	809c6e4 <siprintf>
 809b0c2:	e009      	b.n	809b0d8 <Touchscreen_demo+0x254>
        }
        else
        {
          sprintf((char*)text, "              ");
 809b0c4:	463b      	mov	r3, r7
 809b0c6:	4a1f      	ldr	r2, [pc, #124]	; (809b144 <Touchscreen_demo+0x2c0>)
 809b0c8:	461c      	mov	r4, r3
 809b0ca:	4613      	mov	r3, r2
 809b0cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 809b0ce:	c407      	stmia	r4!, {r0, r1, r2}
 809b0d0:	8023      	strh	r3, [r4, #0]
 809b0d2:	3402      	adds	r4, #2
 809b0d4:	0c1b      	lsrs	r3, r3, #16
 809b0d6:	7023      	strb	r3, [r4, #0]
        }
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 809b0d8:	f7ea fbc8 	bl	808586c <BSP_LCD_GetXSize>
 809b0dc:	4602      	mov	r2, r0
 809b0de:	4b1f      	ldr	r3, [pc, #124]	; (809b15c <Touchscreen_demo+0x2d8>)
 809b0e0:	4413      	add	r3, r2
 809b0e2:	009b      	lsls	r3, r3, #2
 809b0e4:	4a18      	ldr	r2, [pc, #96]	; (809b148 <Touchscreen_demo+0x2c4>)
 809b0e6:	fba2 2303 	umull	r2, r3, r2, r3
 809b0ea:	089b      	lsrs	r3, r3, #2
 809b0ec:	b29b      	uxth	r3, r3
 809b0ee:	330f      	adds	r3, #15
 809b0f0:	b29c      	uxth	r4, r3
                                BSP_LCD_GetYSize() - 25,
 809b0f2:	f7ea fbcf 	bl	8085894 <BSP_LCD_GetYSize>
 809b0f6:	4603      	mov	r3, r0
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 809b0f8:	b29b      	uxth	r3, r3
 809b0fa:	3b19      	subs	r3, #25
 809b0fc:	b299      	uxth	r1, r3
 809b0fe:	463a      	mov	r2, r7
 809b100:	2303      	movs	r3, #3
 809b102:	4620      	mov	r0, r4
 809b104:	f7ea fd52 	bl	8085bac <BSP_LCD_DisplayStringAt>
                                (uint8_t *)&text,
                                LEFT_MODE);

        /* Calculate circle radius to fill according to finger pressure applied on screen (weight) */
        radius = TS_State.touchWeight[0]/3;
 809b108:	4b0a      	ldr	r3, [pc, #40]	; (809b134 <Touchscreen_demo+0x2b0>)
 809b10a:	7d9b      	ldrb	r3, [r3, #22]
 809b10c:	4a14      	ldr	r2, [pc, #80]	; (809b160 <Touchscreen_demo+0x2dc>)
 809b10e:	fba2 2303 	umull	r2, r3, r2, r3
 809b112:	085b      	lsrs	r3, r3, #1
 809b114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if (radius > CIRCLE_RADIUS)
 809b118:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b11c:	2b1e      	cmp	r3, #30
 809b11e:	d921      	bls.n	809b164 <Touchscreen_demo+0x2e0>
        {
          radius = CIRCLE_RADIUS;
 809b120:	231e      	movs	r3, #30
 809b122:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 809b126:	e024      	b.n	809b172 <Touchscreen_demo+0x2ee>
 809b128:	ffff0000 	.word	0xffff0000
 809b12c:	0809ef20 	.word	0x0809ef20
 809b130:	0809ef28 	.word	0x0809ef28
 809b134:	2002d7a8 	.word	0x2002d7a8
 809b138:	0809ef4c 	.word	0x0809ef4c
 809b13c:	0809ef64 	.word	0x0809ef64
 809b140:	0809ef74 	.word	0x0809ef74
 809b144:	0809ef84 	.word	0x0809ef84
 809b148:	cccccccd 	.word	0xcccccccd
 809b14c:	0809ef94 	.word	0x0809ef94
 809b150:	7fffffe2 	.word	0x7fffffe2
 809b154:	0809efa4 	.word	0x0809efa4
 809b158:	0809efb4 	.word	0x0809efb4
 809b15c:	3fffffe2 	.word	0x3fffffe2
 809b160:	aaaaaaab 	.word	0xaaaaaaab
        }
        else if (radius < 1)
 809b164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b168:	2b00      	cmp	r3, #0
 809b16a:	d102      	bne.n	809b172 <Touchscreen_demo+0x2ee>
        {
          radius = 1;
 809b16c:	2301      	movs	r3, #1
 809b16e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }


        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 809b172:	8c3c      	ldrh	r4, [r7, #32]
 809b174:	f7ea fb8e 	bl	8085894 <BSP_LCD_GetYSize>
 809b178:	4603      	mov	r3, r0
 809b17a:	3b78      	subs	r3, #120	; 0x78
 809b17c:	429c      	cmp	r4, r3
 809b17e:	f240 8139 	bls.w	809b3f4 <Touchscreen_demo+0x570>
            (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 809b182:	8c3c      	ldrh	r4, [r7, #32]
 809b184:	f7ea fb86 	bl	8085894 <BSP_LCD_GetYSize>
 809b188:	4603      	mov	r3, r0
 809b18a:	3b3c      	subs	r3, #60	; 0x3c
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 809b18c:	429c      	cmp	r4, r3
 809b18e:	f080 8131 	bcs.w	809b3f4 <Touchscreen_demo+0x570>
        {

          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 809b192:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b194:	f7ea fb6a 	bl	808586c <BSP_LCD_GetXSize>
 809b198:	4602      	mov	r2, r0
 809b19a:	4b9d      	ldr	r3, [pc, #628]	; (809b410 <Touchscreen_demo+0x58c>)
 809b19c:	fba3 2302 	umull	r2, r3, r3, r2
 809b1a0:	089b      	lsrs	r3, r3, #2
 809b1a2:	3b1e      	subs	r3, #30
 809b1a4:	429c      	cmp	r4, r3
 809b1a6:	d93c      	bls.n	809b222 <Touchscreen_demo+0x39e>
              (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 809b1a8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b1aa:	f7ea fb5f 	bl	808586c <BSP_LCD_GetXSize>
 809b1ae:	4602      	mov	r2, r0
 809b1b0:	4b97      	ldr	r3, [pc, #604]	; (809b410 <Touchscreen_demo+0x58c>)
 809b1b2:	fba3 2302 	umull	r2, r3, r3, r2
 809b1b6:	089b      	lsrs	r3, r3, #2
 809b1b8:	331e      	adds	r3, #30
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 809b1ba:	429c      	cmp	r4, r3
 809b1bc:	d231      	bcs.n	809b222 <Touchscreen_demo+0x39e>
          {
            if ((radius != radius_previous) || (state != 1))
 809b1be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b1c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 809b1c6:	429a      	cmp	r2, r3
 809b1c8:	d103      	bne.n	809b1d2 <Touchscreen_demo+0x34e>
 809b1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b1ce:	2b01      	cmp	r3, #1
 809b1d0:	d027      	beq.n	809b222 <Touchscreen_demo+0x39e>
            {
              if (state != 1) /* Erase previous filled circle */
 809b1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b1d6:	2b01      	cmp	r3, #1
 809b1d8:	d004      	beq.n	809b1e4 <Touchscreen_demo+0x360>
              {
                Touchscreen_DrawBackground(state);
 809b1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b1de:	4618      	mov	r0, r3
 809b1e0:	f000 f988 	bl	809b4f4 <Touchscreen_DrawBackground>
              }
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809b1e4:	488b      	ldr	r0, [pc, #556]	; (809b414 <Touchscreen_demo+0x590>)
 809b1e6:	f7ea fbed 	bl	80859c4 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 809b1ea:	f7ea fb3f 	bl	808586c <BSP_LCD_GetXSize>
 809b1ee:	4602      	mov	r2, r0
 809b1f0:	4b87      	ldr	r3, [pc, #540]	; (809b410 <Touchscreen_demo+0x58c>)
 809b1f2:	fba3 2302 	umull	r2, r3, r3, r2
 809b1f6:	089b      	lsrs	r3, r3, #2
 809b1f8:	b29c      	uxth	r4, r3
 809b1fa:	f7ea fb4b 	bl	8085894 <BSP_LCD_GetYSize>
 809b1fe:	4603      	mov	r3, r0
 809b200:	b29b      	uxth	r3, r3
 809b202:	3b5a      	subs	r3, #90	; 0x5a
 809b204:	b29b      	uxth	r3, r3
 809b206:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b20a:	b292      	uxth	r2, r2
 809b20c:	4619      	mov	r1, r3
 809b20e:	4620      	mov	r0, r4
 809b210:	f7eb fb68 	bl	80868e4 <BSP_LCD_FillCircle>
              radius_previous = radius;
 809b214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
              state = 1;
 809b21c:	2301      	movs	r3, #1
 809b21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
          }
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 809b222:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b224:	f7ea fb22 	bl	808586c <BSP_LCD_GetXSize>
 809b228:	4603      	mov	r3, r0
 809b22a:	005b      	lsls	r3, r3, #1
 809b22c:	4a78      	ldr	r2, [pc, #480]	; (809b410 <Touchscreen_demo+0x58c>)
 809b22e:	fba2 2303 	umull	r2, r3, r2, r3
 809b232:	089b      	lsrs	r3, r3, #2
 809b234:	3b1e      	subs	r3, #30
 809b236:	429c      	cmp	r4, r3
 809b238:	d93e      	bls.n	809b2b8 <Touchscreen_demo+0x434>
              (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 809b23a:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b23c:	f7ea fb16 	bl	808586c <BSP_LCD_GetXSize>
 809b240:	4603      	mov	r3, r0
 809b242:	005b      	lsls	r3, r3, #1
 809b244:	4a72      	ldr	r2, [pc, #456]	; (809b410 <Touchscreen_demo+0x58c>)
 809b246:	fba2 2303 	umull	r2, r3, r2, r3
 809b24a:	089b      	lsrs	r3, r3, #2
 809b24c:	331e      	adds	r3, #30
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 809b24e:	429c      	cmp	r4, r3
 809b250:	d232      	bcs.n	809b2b8 <Touchscreen_demo+0x434>
          {
            if ((radius != radius_previous) || (state != 2))
 809b252:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b256:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 809b25a:	429a      	cmp	r2, r3
 809b25c:	d103      	bne.n	809b266 <Touchscreen_demo+0x3e2>
 809b25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b262:	2b02      	cmp	r3, #2
 809b264:	d028      	beq.n	809b2b8 <Touchscreen_demo+0x434>
            {
              if (state != 2) /* Erase previous filled circle */
 809b266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b26a:	2b02      	cmp	r3, #2
 809b26c:	d004      	beq.n	809b278 <Touchscreen_demo+0x3f4>
              {
                Touchscreen_DrawBackground(state);
 809b26e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b272:	4618      	mov	r0, r3
 809b274:	f000 f93e 	bl	809b4f4 <Touchscreen_DrawBackground>
              }
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 809b278:	4867      	ldr	r0, [pc, #412]	; (809b418 <Touchscreen_demo+0x594>)
 809b27a:	f7ea fba3 	bl	80859c4 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 809b27e:	f7ea faf5 	bl	808586c <BSP_LCD_GetXSize>
 809b282:	4603      	mov	r3, r0
 809b284:	005b      	lsls	r3, r3, #1
 809b286:	4a62      	ldr	r2, [pc, #392]	; (809b410 <Touchscreen_demo+0x58c>)
 809b288:	fba2 2303 	umull	r2, r3, r2, r3
 809b28c:	089b      	lsrs	r3, r3, #2
 809b28e:	b29c      	uxth	r4, r3
 809b290:	f7ea fb00 	bl	8085894 <BSP_LCD_GetYSize>
 809b294:	4603      	mov	r3, r0
 809b296:	b29b      	uxth	r3, r3
 809b298:	3b5a      	subs	r3, #90	; 0x5a
 809b29a:	b29b      	uxth	r3, r3
 809b29c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b2a0:	b292      	uxth	r2, r2
 809b2a2:	4619      	mov	r1, r3
 809b2a4:	4620      	mov	r0, r4
 809b2a6:	f7eb fb1d 	bl	80868e4 <BSP_LCD_FillCircle>
              radius_previous = radius;
 809b2aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b2ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
              state = 2;
 809b2b2:	2302      	movs	r3, #2
 809b2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
          }

          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 809b2b8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b2ba:	f7ea fad7 	bl	808586c <BSP_LCD_GetXSize>
 809b2be:	4602      	mov	r2, r0
 809b2c0:	4613      	mov	r3, r2
 809b2c2:	005b      	lsls	r3, r3, #1
 809b2c4:	4413      	add	r3, r2
 809b2c6:	4a52      	ldr	r2, [pc, #328]	; (809b410 <Touchscreen_demo+0x58c>)
 809b2c8:	fba2 2303 	umull	r2, r3, r2, r3
 809b2cc:	089b      	lsrs	r3, r3, #2
 809b2ce:	3b1e      	subs	r3, #30
 809b2d0:	429c      	cmp	r4, r3
 809b2d2:	d943      	bls.n	809b35c <Touchscreen_demo+0x4d8>
              (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 809b2d4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b2d6:	f7ea fac9 	bl	808586c <BSP_LCD_GetXSize>
 809b2da:	4602      	mov	r2, r0
 809b2dc:	4613      	mov	r3, r2
 809b2de:	005b      	lsls	r3, r3, #1
 809b2e0:	4413      	add	r3, r2
 809b2e2:	4a4b      	ldr	r2, [pc, #300]	; (809b410 <Touchscreen_demo+0x58c>)
 809b2e4:	fba2 2303 	umull	r2, r3, r2, r3
 809b2e8:	089b      	lsrs	r3, r3, #2
 809b2ea:	331e      	adds	r3, #30
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 809b2ec:	429c      	cmp	r4, r3
 809b2ee:	d235      	bcs.n	809b35c <Touchscreen_demo+0x4d8>
          {
            if ((radius != radius_previous) || (state != 4))
 809b2f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b2f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 809b2f8:	429a      	cmp	r2, r3
 809b2fa:	d103      	bne.n	809b304 <Touchscreen_demo+0x480>
 809b2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b300:	2b04      	cmp	r3, #4
 809b302:	d02b      	beq.n	809b35c <Touchscreen_demo+0x4d8>
            {
              if (state != 4) /* Erase previous filled circle */
 809b304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b308:	2b04      	cmp	r3, #4
 809b30a:	d004      	beq.n	809b316 <Touchscreen_demo+0x492>
              {
                Touchscreen_DrawBackground(state);
 809b30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b310:	4618      	mov	r0, r3
 809b312:	f000 f8ef 	bl	809b4f4 <Touchscreen_DrawBackground>
              }
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 809b316:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 809b31a:	f7ea fb53 	bl	80859c4 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 809b31e:	f7ea faa5 	bl	808586c <BSP_LCD_GetXSize>
 809b322:	4602      	mov	r2, r0
 809b324:	4613      	mov	r3, r2
 809b326:	005b      	lsls	r3, r3, #1
 809b328:	4413      	add	r3, r2
 809b32a:	4a39      	ldr	r2, [pc, #228]	; (809b410 <Touchscreen_demo+0x58c>)
 809b32c:	fba2 2303 	umull	r2, r3, r2, r3
 809b330:	089b      	lsrs	r3, r3, #2
 809b332:	b29c      	uxth	r4, r3
 809b334:	f7ea faae 	bl	8085894 <BSP_LCD_GetYSize>
 809b338:	4603      	mov	r3, r0
 809b33a:	b29b      	uxth	r3, r3
 809b33c:	3b5a      	subs	r3, #90	; 0x5a
 809b33e:	b29b      	uxth	r3, r3
 809b340:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b344:	b292      	uxth	r2, r2
 809b346:	4619      	mov	r1, r3
 809b348:	4620      	mov	r0, r4
 809b34a:	f7eb facb 	bl	80868e4 <BSP_LCD_FillCircle>
              radius_previous = radius;
 809b34e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b352:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
              state = 4;
 809b356:	2304      	movs	r3, #4
 809b358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
          }

          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 809b35c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b35e:	f7ea fa85 	bl	808586c <BSP_LCD_GetXSize>
 809b362:	4603      	mov	r3, r0
 809b364:	009b      	lsls	r3, r3, #2
 809b366:	4a2a      	ldr	r2, [pc, #168]	; (809b410 <Touchscreen_demo+0x58c>)
 809b368:	fba2 2303 	umull	r2, r3, r2, r3
 809b36c:	089b      	lsrs	r3, r3, #2
 809b36e:	3b1e      	subs	r3, #30
 809b370:	429c      	cmp	r4, r3
 809b372:	d93f      	bls.n	809b3f4 <Touchscreen_demo+0x570>
              (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 809b374:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 809b376:	f7ea fa79 	bl	808586c <BSP_LCD_GetXSize>
 809b37a:	4603      	mov	r3, r0
 809b37c:	009b      	lsls	r3, r3, #2
 809b37e:	4a24      	ldr	r2, [pc, #144]	; (809b410 <Touchscreen_demo+0x58c>)
 809b380:	fba2 2303 	umull	r2, r3, r2, r3
 809b384:	089b      	lsrs	r3, r3, #2
 809b386:	331e      	adds	r3, #30
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 809b388:	429c      	cmp	r4, r3
 809b38a:	d233      	bcs.n	809b3f4 <Touchscreen_demo+0x570>
          {
            if ((radius != radius_previous) || (state != 8))
 809b38c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b390:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 809b394:	429a      	cmp	r2, r3
 809b396:	d103      	bne.n	809b3a0 <Touchscreen_demo+0x51c>
 809b398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b39c:	2b08      	cmp	r3, #8
 809b39e:	d029      	beq.n	809b3f4 <Touchscreen_demo+0x570>
            {
              if (state != 8) /* Erase previous filled circle */
 809b3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b3a4:	2b08      	cmp	r3, #8
 809b3a6:	d004      	beq.n	809b3b2 <Touchscreen_demo+0x52e>
              {
                Touchscreen_DrawBackground(state);
 809b3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 809b3ac:	4618      	mov	r0, r3
 809b3ae:	f000 f8a1 	bl	809b4f4 <Touchscreen_DrawBackground>
              }
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 809b3b2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 809b3b6:	f7ea fb05 	bl	80859c4 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 809b3ba:	f7ea fa57 	bl	808586c <BSP_LCD_GetXSize>
 809b3be:	4603      	mov	r3, r0
 809b3c0:	009b      	lsls	r3, r3, #2
 809b3c2:	4a13      	ldr	r2, [pc, #76]	; (809b410 <Touchscreen_demo+0x58c>)
 809b3c4:	fba2 2303 	umull	r2, r3, r2, r3
 809b3c8:	089b      	lsrs	r3, r3, #2
 809b3ca:	b29c      	uxth	r4, r3
 809b3cc:	f7ea fa62 	bl	8085894 <BSP_LCD_GetYSize>
 809b3d0:	4603      	mov	r3, r0
 809b3d2:	b29b      	uxth	r3, r3
 809b3d4:	3b5a      	subs	r3, #90	; 0x5a
 809b3d6:	b29b      	uxth	r3, r3
 809b3d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 809b3dc:	b292      	uxth	r2, r2
 809b3de:	4619      	mov	r1, r3
 809b3e0:	4620      	mov	r0, r4
 809b3e2:	f7eb fa7f 	bl	80868e4 <BSP_LCD_FillCircle>
              radius_previous = radius;
 809b3e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 809b3ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
              state = 8;
 809b3ee:	2308      	movs	r3, #8
 809b3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

      } /* of if(TS_State.touchDetected) */
    }

    if (CheckForUserInput() > 0)
 809b3f4:	f7ff fc42 	bl	809ac7c <CheckForUserInput>
 809b3f8:	4603      	mov	r3, r0
 809b3fa:	2b00      	cmp	r3, #0
 809b3fc:	d103      	bne.n	809b406 <Touchscreen_demo+0x582>
    {
      return;
    }

    HAL_Delay(10);
 809b3fe:	200a      	movs	r0, #10
 809b400:	f7ed feba 	bl	8089178 <HAL_Delay>
    if (status == TS_OK)
 809b404:	e582      	b.n	809af0c <Touchscreen_demo+0x88>
      return;
 809b406:	bf00      	nop
  }
}
 809b408:	372c      	adds	r7, #44	; 0x2c
 809b40a:	46bd      	mov	sp, r7
 809b40c:	bd90      	pop	{r4, r7, pc}
 809b40e:	bf00      	nop
 809b410:	cccccccd 	.word	0xcccccccd
 809b414:	ff0000ff 	.word	0xff0000ff
 809b418:	ffff0000 	.word	0xffff0000

0809b41c <Touchscreen_SetHint>:
  * @brief  Display TS Demo Hint
  * @param  None
  * @retval None
  */
static void Touchscreen_SetHint(void)
{
 809b41c:	b598      	push	{r3, r4, r7, lr}
 809b41e:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 809b420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b424:	f7ea fb44 	bl	8085ab0 <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809b428:	482b      	ldr	r0, [pc, #172]	; (809b4d8 <Touchscreen_SetHint+0xbc>)
 809b42a:	f7ea facb 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 809b42e:	f7ea fa1d 	bl	808586c <BSP_LCD_GetXSize>
 809b432:	4603      	mov	r3, r0
 809b434:	b29a      	uxth	r2, r3
 809b436:	2350      	movs	r3, #80	; 0x50
 809b438:	2100      	movs	r1, #0
 809b43a:	2000      	movs	r0, #0
 809b43c:	f7eb f9c8 	bl	80867d0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b444:	f7ea fabe 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 809b448:	4823      	ldr	r0, [pc, #140]	; (809b4d8 <Touchscreen_SetHint+0xbc>)
 809b44a:	f7ea fae7 	bl	8085a1c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 809b44e:	4823      	ldr	r0, [pc, #140]	; (809b4dc <Touchscreen_SetHint+0xc0>)
 809b450:	f7ea fafe 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen", CENTER_MODE);
 809b454:	2301      	movs	r3, #1
 809b456:	4a22      	ldr	r2, [pc, #136]	; (809b4e0 <Touchscreen_SetHint+0xc4>)
 809b458:	2100      	movs	r1, #0
 809b45a:	2000      	movs	r0, #0
 809b45c:	f7ea fba6 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 809b460:	4820      	ldr	r0, [pc, #128]	; (809b4e4 <Touchscreen_SetHint+0xc8>)
 809b462:	f7ea faf5 	bl	8085a50 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 809b466:	2301      	movs	r3, #1
 809b468:	4a1f      	ldr	r2, [pc, #124]	; (809b4e8 <Touchscreen_SetHint+0xcc>)
 809b46a:	211e      	movs	r1, #30
 809b46c:	2000      	movs	r0, #0
 809b46e:	f7ea fb9d 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"fill the colored circles according to pressure applied", CENTER_MODE);
 809b472:	2301      	movs	r3, #1
 809b474:	4a1d      	ldr	r2, [pc, #116]	; (809b4ec <Touchscreen_SetHint+0xd0>)
 809b476:	212d      	movs	r1, #45	; 0x2d
 809b478:	2000      	movs	r0, #0
 809b47a:	f7ea fb97 	bl	8085bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Up to 5 finger touch coordinates are displayed", CENTER_MODE);
 809b47e:	2301      	movs	r3, #1
 809b480:	4a1b      	ldr	r2, [pc, #108]	; (809b4f0 <Touchscreen_SetHint+0xd4>)
 809b482:	213c      	movs	r1, #60	; 0x3c
 809b484:	2000      	movs	r0, #0
 809b486:	f7ea fb91 	bl	8085bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809b48a:	4813      	ldr	r0, [pc, #76]	; (809b4d8 <Touchscreen_SetHint+0xbc>)
 809b48c:	f7ea fa9a 	bl	80859c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 809b490:	f7ea f9ec 	bl	808586c <BSP_LCD_GetXSize>
 809b494:	4603      	mov	r3, r0
 809b496:	b29b      	uxth	r3, r3
 809b498:	3b14      	subs	r3, #20
 809b49a:	b29c      	uxth	r4, r3
 809b49c:	f7ea f9fa 	bl	8085894 <BSP_LCD_GetYSize>
 809b4a0:	4603      	mov	r3, r0
 809b4a2:	b29b      	uxth	r3, r3
 809b4a4:	3b64      	subs	r3, #100	; 0x64
 809b4a6:	b29b      	uxth	r3, r3
 809b4a8:	4622      	mov	r2, r4
 809b4aa:	215a      	movs	r1, #90	; 0x5a
 809b4ac:	200a      	movs	r0, #10
 809b4ae:	f7ea fdfd 	bl	80860ac <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 809b4b2:	f7ea f9db 	bl	808586c <BSP_LCD_GetXSize>
 809b4b6:	4603      	mov	r3, r0
 809b4b8:	b29b      	uxth	r3, r3
 809b4ba:	3b16      	subs	r3, #22
 809b4bc:	b29c      	uxth	r4, r3
 809b4be:	f7ea f9e9 	bl	8085894 <BSP_LCD_GetYSize>
 809b4c2:	4603      	mov	r3, r0
 809b4c4:	b29b      	uxth	r3, r3
 809b4c6:	3b66      	subs	r3, #102	; 0x66
 809b4c8:	b29b      	uxth	r3, r3
 809b4ca:	4622      	mov	r2, r4
 809b4cc:	215b      	movs	r1, #91	; 0x5b
 809b4ce:	200b      	movs	r0, #11
 809b4d0:	f7ea fdec 	bl	80860ac <BSP_LCD_DrawRect>

}
 809b4d4:	bf00      	nop
 809b4d6:	bd98      	pop	{r3, r4, r7, pc}
 809b4d8:	ff0000ff 	.word	0xff0000ff
 809b4dc:	2000b36c 	.word	0x2000b36c
 809b4e0:	0809efc4 	.word	0x0809efc4
 809b4e4:	2000b354 	.word	0x2000b354
 809b4e8:	0809efd0 	.word	0x0809efd0
 809b4ec:	0809eff0 	.word	0x0809eff0
 809b4f0:	0809f028 	.word	0x0809f028

0809b4f4 <Touchscreen_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
static void Touchscreen_DrawBackground (uint8_t state)
{
 809b4f4:	b590      	push	{r4, r7, lr}
 809b4f6:	b083      	sub	sp, #12
 809b4f8:	af00      	add	r7, sp, #0
 809b4fa:	4603      	mov	r3, r0
 809b4fc:	71fb      	strb	r3, [r7, #7]

  switch (state)
 809b4fe:	79fb      	ldrb	r3, [r7, #7]
 809b500:	2b08      	cmp	r3, #8
 809b502:	f200 818e 	bhi.w	809b822 <Touchscreen_DrawBackground+0x32e>
 809b506:	a201      	add	r2, pc, #4	; (adr r2, 809b50c <Touchscreen_DrawBackground+0x18>)
 809b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 809b50c:	0809b531 	.word	0x0809b531
 809b510:	0809b69b 	.word	0x0809b69b
 809b514:	0809b6f7 	.word	0x0809b6f7
 809b518:	0809b823 	.word	0x0809b823
 809b51c:	0809b757 	.word	0x0809b757
 809b520:	0809b823 	.word	0x0809b823
 809b524:	0809b823 	.word	0x0809b823
 809b528:	0809b823 	.word	0x0809b823
 809b52c:	0809b7c1 	.word	0x0809b7c1
  {

    case 0:
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809b530:	48be      	ldr	r0, [pc, #760]	; (809b82c <Touchscreen_DrawBackground+0x338>)
 809b532:	f7ea fa47 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 809b536:	f7ea f999 	bl	808586c <BSP_LCD_GetXSize>
 809b53a:	4602      	mov	r2, r0
 809b53c:	4bbc      	ldr	r3, [pc, #752]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b53e:	fba3 2302 	umull	r2, r3, r3, r2
 809b542:	089b      	lsrs	r3, r3, #2
 809b544:	b29c      	uxth	r4, r3
 809b546:	f7ea f9a5 	bl	8085894 <BSP_LCD_GetYSize>
 809b54a:	4603      	mov	r3, r0
 809b54c:	b29b      	uxth	r3, r3
 809b54e:	3b5a      	subs	r3, #90	; 0x5a
 809b550:	b29b      	uxth	r3, r3
 809b552:	221e      	movs	r2, #30
 809b554:	4619      	mov	r1, r3
 809b556:	4620      	mov	r0, r4
 809b558:	f7eb f9c4 	bl	80868e4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 809b55c:	48b5      	ldr	r0, [pc, #724]	; (809b834 <Touchscreen_DrawBackground+0x340>)
 809b55e:	f7ea fa31 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 809b562:	f7ea f983 	bl	808586c <BSP_LCD_GetXSize>
 809b566:	4603      	mov	r3, r0
 809b568:	005b      	lsls	r3, r3, #1
 809b56a:	4ab1      	ldr	r2, [pc, #708]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b56c:	fba2 2303 	umull	r2, r3, r2, r3
 809b570:	089b      	lsrs	r3, r3, #2
 809b572:	b29c      	uxth	r4, r3
 809b574:	f7ea f98e 	bl	8085894 <BSP_LCD_GetYSize>
 809b578:	4603      	mov	r3, r0
 809b57a:	b29b      	uxth	r3, r3
 809b57c:	3b5a      	subs	r3, #90	; 0x5a
 809b57e:	b29b      	uxth	r3, r3
 809b580:	221e      	movs	r2, #30
 809b582:	4619      	mov	r1, r3
 809b584:	4620      	mov	r0, r4
 809b586:	f7eb f9ad 	bl	80868e4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 809b58a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 809b58e:	f7ea fa19 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 809b592:	f7ea f96b 	bl	808586c <BSP_LCD_GetXSize>
 809b596:	4602      	mov	r2, r0
 809b598:	4613      	mov	r3, r2
 809b59a:	005b      	lsls	r3, r3, #1
 809b59c:	4413      	add	r3, r2
 809b59e:	4aa4      	ldr	r2, [pc, #656]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b5a0:	fba2 2303 	umull	r2, r3, r2, r3
 809b5a4:	089b      	lsrs	r3, r3, #2
 809b5a6:	b29c      	uxth	r4, r3
 809b5a8:	f7ea f974 	bl	8085894 <BSP_LCD_GetYSize>
 809b5ac:	4603      	mov	r3, r0
 809b5ae:	b29b      	uxth	r3, r3
 809b5b0:	3b5a      	subs	r3, #90	; 0x5a
 809b5b2:	b29b      	uxth	r3, r3
 809b5b4:	221e      	movs	r2, #30
 809b5b6:	4619      	mov	r1, r3
 809b5b8:	4620      	mov	r0, r4
 809b5ba:	f7eb f993 	bl	80868e4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 809b5be:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 809b5c2:	f7ea f9ff 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 809b5c6:	f7ea f951 	bl	808586c <BSP_LCD_GetXSize>
 809b5ca:	4603      	mov	r3, r0
 809b5cc:	009b      	lsls	r3, r3, #2
 809b5ce:	4a98      	ldr	r2, [pc, #608]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b5d0:	fba2 2303 	umull	r2, r3, r2, r3
 809b5d4:	089b      	lsrs	r3, r3, #2
 809b5d6:	b29c      	uxth	r4, r3
 809b5d8:	f7ea f95c 	bl	8085894 <BSP_LCD_GetYSize>
 809b5dc:	4603      	mov	r3, r0
 809b5de:	b29b      	uxth	r3, r3
 809b5e0:	3b5a      	subs	r3, #90	; 0x5a
 809b5e2:	b29b      	uxth	r3, r3
 809b5e4:	221e      	movs	r2, #30
 809b5e6:	4619      	mov	r1, r3
 809b5e8:	4620      	mov	r0, r4
 809b5ea:	f7eb f97b 	bl	80868e4 <BSP_LCD_FillCircle>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b5f2:	f7ea f9e7 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 809b5f6:	f7ea f939 	bl	808586c <BSP_LCD_GetXSize>
 809b5fa:	4602      	mov	r2, r0
 809b5fc:	4b8c      	ldr	r3, [pc, #560]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b5fe:	fba3 2302 	umull	r2, r3, r3, r2
 809b602:	089b      	lsrs	r3, r3, #2
 809b604:	b29c      	uxth	r4, r3
 809b606:	f7ea f945 	bl	8085894 <BSP_LCD_GetYSize>
 809b60a:	4603      	mov	r3, r0
 809b60c:	b29b      	uxth	r3, r3
 809b60e:	3b5a      	subs	r3, #90	; 0x5a
 809b610:	b29b      	uxth	r3, r3
 809b612:	221c      	movs	r2, #28
 809b614:	4619      	mov	r1, r3
 809b616:	4620      	mov	r0, r4
 809b618:	f7eb f964 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 809b61c:	f7ea f926 	bl	808586c <BSP_LCD_GetXSize>
 809b620:	4603      	mov	r3, r0
 809b622:	005b      	lsls	r3, r3, #1
 809b624:	4a82      	ldr	r2, [pc, #520]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b626:	fba2 2303 	umull	r2, r3, r2, r3
 809b62a:	089b      	lsrs	r3, r3, #2
 809b62c:	b29c      	uxth	r4, r3
 809b62e:	f7ea f931 	bl	8085894 <BSP_LCD_GetYSize>
 809b632:	4603      	mov	r3, r0
 809b634:	b29b      	uxth	r3, r3
 809b636:	3b5a      	subs	r3, #90	; 0x5a
 809b638:	b29b      	uxth	r3, r3
 809b63a:	221c      	movs	r2, #28
 809b63c:	4619      	mov	r1, r3
 809b63e:	4620      	mov	r0, r4
 809b640:	f7eb f950 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 809b644:	f7ea f912 	bl	808586c <BSP_LCD_GetXSize>
 809b648:	4602      	mov	r2, r0
 809b64a:	4613      	mov	r3, r2
 809b64c:	005b      	lsls	r3, r3, #1
 809b64e:	4413      	add	r3, r2
 809b650:	4a77      	ldr	r2, [pc, #476]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b652:	fba2 2303 	umull	r2, r3, r2, r3
 809b656:	089b      	lsrs	r3, r3, #2
 809b658:	b29c      	uxth	r4, r3
 809b65a:	f7ea f91b 	bl	8085894 <BSP_LCD_GetYSize>
 809b65e:	4603      	mov	r3, r0
 809b660:	b29b      	uxth	r3, r3
 809b662:	3b5a      	subs	r3, #90	; 0x5a
 809b664:	b29b      	uxth	r3, r3
 809b666:	221c      	movs	r2, #28
 809b668:	4619      	mov	r1, r3
 809b66a:	4620      	mov	r0, r4
 809b66c:	f7eb f93a 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 809b670:	f7ea f8fc 	bl	808586c <BSP_LCD_GetXSize>
 809b674:	4603      	mov	r3, r0
 809b676:	009b      	lsls	r3, r3, #2
 809b678:	4a6d      	ldr	r2, [pc, #436]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b67a:	fba2 2303 	umull	r2, r3, r2, r3
 809b67e:	089b      	lsrs	r3, r3, #2
 809b680:	b29c      	uxth	r4, r3
 809b682:	f7ea f907 	bl	8085894 <BSP_LCD_GetYSize>
 809b686:	4603      	mov	r3, r0
 809b688:	b29b      	uxth	r3, r3
 809b68a:	3b5a      	subs	r3, #90	; 0x5a
 809b68c:	b29b      	uxth	r3, r3
 809b68e:	221c      	movs	r2, #28
 809b690:	4619      	mov	r1, r3
 809b692:	4620      	mov	r0, r4
 809b694:	f7eb f926 	bl	80868e4 <BSP_LCD_FillCircle>
      break;
 809b698:	e0c3      	b.n	809b822 <Touchscreen_DrawBackground+0x32e>

    case 1:
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 809b69a:	4864      	ldr	r0, [pc, #400]	; (809b82c <Touchscreen_DrawBackground+0x338>)
 809b69c:	f7ea f992 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 809b6a0:	f7ea f8e4 	bl	808586c <BSP_LCD_GetXSize>
 809b6a4:	4602      	mov	r2, r0
 809b6a6:	4b62      	ldr	r3, [pc, #392]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b6a8:	fba3 2302 	umull	r2, r3, r3, r2
 809b6ac:	089b      	lsrs	r3, r3, #2
 809b6ae:	b29c      	uxth	r4, r3
 809b6b0:	f7ea f8f0 	bl	8085894 <BSP_LCD_GetYSize>
 809b6b4:	4603      	mov	r3, r0
 809b6b6:	b29b      	uxth	r3, r3
 809b6b8:	3b5a      	subs	r3, #90	; 0x5a
 809b6ba:	b29b      	uxth	r3, r3
 809b6bc:	221e      	movs	r2, #30
 809b6be:	4619      	mov	r1, r3
 809b6c0:	4620      	mov	r0, r4
 809b6c2:	f7eb f90f 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b6c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b6ca:	f7ea f97b 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 809b6ce:	f7ea f8cd 	bl	808586c <BSP_LCD_GetXSize>
 809b6d2:	4602      	mov	r2, r0
 809b6d4:	4b56      	ldr	r3, [pc, #344]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b6d6:	fba3 2302 	umull	r2, r3, r3, r2
 809b6da:	089b      	lsrs	r3, r3, #2
 809b6dc:	b29c      	uxth	r4, r3
 809b6de:	f7ea f8d9 	bl	8085894 <BSP_LCD_GetYSize>
 809b6e2:	4603      	mov	r3, r0
 809b6e4:	b29b      	uxth	r3, r3
 809b6e6:	3b5a      	subs	r3, #90	; 0x5a
 809b6e8:	b29b      	uxth	r3, r3
 809b6ea:	221c      	movs	r2, #28
 809b6ec:	4619      	mov	r1, r3
 809b6ee:	4620      	mov	r0, r4
 809b6f0:	f7eb f8f8 	bl	80868e4 <BSP_LCD_FillCircle>
      break;
 809b6f4:	e095      	b.n	809b822 <Touchscreen_DrawBackground+0x32e>

    case 2:
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 809b6f6:	484f      	ldr	r0, [pc, #316]	; (809b834 <Touchscreen_DrawBackground+0x340>)
 809b6f8:	f7ea f964 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 809b6fc:	f7ea f8b6 	bl	808586c <BSP_LCD_GetXSize>
 809b700:	4603      	mov	r3, r0
 809b702:	005b      	lsls	r3, r3, #1
 809b704:	4a4a      	ldr	r2, [pc, #296]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b706:	fba2 2303 	umull	r2, r3, r2, r3
 809b70a:	089b      	lsrs	r3, r3, #2
 809b70c:	b29c      	uxth	r4, r3
 809b70e:	f7ea f8c1 	bl	8085894 <BSP_LCD_GetYSize>
 809b712:	4603      	mov	r3, r0
 809b714:	b29b      	uxth	r3, r3
 809b716:	3b5a      	subs	r3, #90	; 0x5a
 809b718:	b29b      	uxth	r3, r3
 809b71a:	221e      	movs	r2, #30
 809b71c:	4619      	mov	r1, r3
 809b71e:	4620      	mov	r0, r4
 809b720:	f7eb f8e0 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b728:	f7ea f94c 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 809b72c:	f7ea f89e 	bl	808586c <BSP_LCD_GetXSize>
 809b730:	4603      	mov	r3, r0
 809b732:	005b      	lsls	r3, r3, #1
 809b734:	4a3e      	ldr	r2, [pc, #248]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b736:	fba2 2303 	umull	r2, r3, r2, r3
 809b73a:	089b      	lsrs	r3, r3, #2
 809b73c:	b29c      	uxth	r4, r3
 809b73e:	f7ea f8a9 	bl	8085894 <BSP_LCD_GetYSize>
 809b742:	4603      	mov	r3, r0
 809b744:	b29b      	uxth	r3, r3
 809b746:	3b5a      	subs	r3, #90	; 0x5a
 809b748:	b29b      	uxth	r3, r3
 809b74a:	221c      	movs	r2, #28
 809b74c:	4619      	mov	r1, r3
 809b74e:	4620      	mov	r0, r4
 809b750:	f7eb f8c8 	bl	80868e4 <BSP_LCD_FillCircle>
      break;
 809b754:	e065      	b.n	809b822 <Touchscreen_DrawBackground+0x32e>

    case 4:
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 809b756:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 809b75a:	f7ea f933 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 809b75e:	f7ea f885 	bl	808586c <BSP_LCD_GetXSize>
 809b762:	4602      	mov	r2, r0
 809b764:	4613      	mov	r3, r2
 809b766:	005b      	lsls	r3, r3, #1
 809b768:	4413      	add	r3, r2
 809b76a:	4a31      	ldr	r2, [pc, #196]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b76c:	fba2 2303 	umull	r2, r3, r2, r3
 809b770:	089b      	lsrs	r3, r3, #2
 809b772:	b29c      	uxth	r4, r3
 809b774:	f7ea f88e 	bl	8085894 <BSP_LCD_GetYSize>
 809b778:	4603      	mov	r3, r0
 809b77a:	b29b      	uxth	r3, r3
 809b77c:	3b5a      	subs	r3, #90	; 0x5a
 809b77e:	b29b      	uxth	r3, r3
 809b780:	221e      	movs	r2, #30
 809b782:	4619      	mov	r1, r3
 809b784:	4620      	mov	r0, r4
 809b786:	f7eb f8ad 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b78e:	f7ea f919 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 809b792:	f7ea f86b 	bl	808586c <BSP_LCD_GetXSize>
 809b796:	4602      	mov	r2, r0
 809b798:	4613      	mov	r3, r2
 809b79a:	005b      	lsls	r3, r3, #1
 809b79c:	4413      	add	r3, r2
 809b79e:	4a24      	ldr	r2, [pc, #144]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b7a0:	fba2 2303 	umull	r2, r3, r2, r3
 809b7a4:	089b      	lsrs	r3, r3, #2
 809b7a6:	b29c      	uxth	r4, r3
 809b7a8:	f7ea f874 	bl	8085894 <BSP_LCD_GetYSize>
 809b7ac:	4603      	mov	r3, r0
 809b7ae:	b29b      	uxth	r3, r3
 809b7b0:	3b5a      	subs	r3, #90	; 0x5a
 809b7b2:	b29b      	uxth	r3, r3
 809b7b4:	221c      	movs	r2, #28
 809b7b6:	4619      	mov	r1, r3
 809b7b8:	4620      	mov	r0, r4
 809b7ba:	f7eb f893 	bl	80868e4 <BSP_LCD_FillCircle>
      break;
 809b7be:	e030      	b.n	809b822 <Touchscreen_DrawBackground+0x32e>

    case 8:
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 809b7c0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 809b7c4:	f7ea f8fe 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 809b7c8:	f7ea f850 	bl	808586c <BSP_LCD_GetXSize>
 809b7cc:	4603      	mov	r3, r0
 809b7ce:	009b      	lsls	r3, r3, #2
 809b7d0:	4a17      	ldr	r2, [pc, #92]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 809b7d6:	089b      	lsrs	r3, r3, #2
 809b7d8:	b29c      	uxth	r4, r3
 809b7da:	f7ea f85b 	bl	8085894 <BSP_LCD_GetYSize>
 809b7de:	4603      	mov	r3, r0
 809b7e0:	b29b      	uxth	r3, r3
 809b7e2:	3b5a      	subs	r3, #90	; 0x5a
 809b7e4:	b29b      	uxth	r3, r3
 809b7e6:	221e      	movs	r2, #30
 809b7e8:	4619      	mov	r1, r3
 809b7ea:	4620      	mov	r0, r4
 809b7ec:	f7eb f87a 	bl	80868e4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 809b7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809b7f4:	f7ea f8e6 	bl	80859c4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 809b7f8:	f7ea f838 	bl	808586c <BSP_LCD_GetXSize>
 809b7fc:	4603      	mov	r3, r0
 809b7fe:	009b      	lsls	r3, r3, #2
 809b800:	4a0b      	ldr	r2, [pc, #44]	; (809b830 <Touchscreen_DrawBackground+0x33c>)
 809b802:	fba2 2303 	umull	r2, r3, r2, r3
 809b806:	089b      	lsrs	r3, r3, #2
 809b808:	b29c      	uxth	r4, r3
 809b80a:	f7ea f843 	bl	8085894 <BSP_LCD_GetYSize>
 809b80e:	4603      	mov	r3, r0
 809b810:	b29b      	uxth	r3, r3
 809b812:	3b5a      	subs	r3, #90	; 0x5a
 809b814:	b29b      	uxth	r3, r3
 809b816:	221c      	movs	r2, #28
 809b818:	4619      	mov	r1, r3
 809b81a:	4620      	mov	r0, r4
 809b81c:	f7eb f862 	bl	80868e4 <BSP_LCD_FillCircle>
      break;
 809b820:	bf00      	nop

  }
}
 809b822:	bf00      	nop
 809b824:	370c      	adds	r7, #12
 809b826:	46bd      	mov	sp, r7
 809b828:	bd90      	pop	{r4, r7, pc}
 809b82a:	bf00      	nop
 809b82c:	ff0000ff 	.word	0xff0000ff
 809b830:	cccccccd 	.word	0xcccccccd
 809b834:	ffff0000 	.word	0xffff0000

0809b838 <SCB_EnableICache>:
{
 809b838:	b480      	push	{r7}
 809b83a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 809b83c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 809b840:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 809b844:	4b09      	ldr	r3, [pc, #36]	; (809b86c <SCB_EnableICache+0x34>)
 809b846:	2200      	movs	r2, #0
 809b848:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 809b84c:	4b07      	ldr	r3, [pc, #28]	; (809b86c <SCB_EnableICache+0x34>)
 809b84e:	695b      	ldr	r3, [r3, #20]
 809b850:	4a06      	ldr	r2, [pc, #24]	; (809b86c <SCB_EnableICache+0x34>)
 809b852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 809b856:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 809b858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 809b85c:	f3bf 8f6f 	isb	sy
}
 809b860:	bf00      	nop
 809b862:	46bd      	mov	sp, r7
 809b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 809b868:	4770      	bx	lr
 809b86a:	bf00      	nop
 809b86c:	e000ed00 	.word	0xe000ed00

0809b870 <SCB_EnableDCache>:
{
 809b870:	b480      	push	{r7}
 809b872:	b085      	sub	sp, #20
 809b874:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 809b876:	4b1d      	ldr	r3, [pc, #116]	; (809b8ec <SCB_EnableDCache+0x7c>)
 809b878:	2200      	movs	r2, #0
 809b87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 809b87e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 809b882:	4b1a      	ldr	r3, [pc, #104]	; (809b8ec <SCB_EnableDCache+0x7c>)
 809b884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 809b888:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 809b88a:	687b      	ldr	r3, [r7, #4]
 809b88c:	0b5b      	lsrs	r3, r3, #13
 809b88e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 809b892:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 809b894:	687b      	ldr	r3, [r7, #4]
 809b896:	08db      	lsrs	r3, r3, #3
 809b898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 809b89c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 809b89e:	68fb      	ldr	r3, [r7, #12]
 809b8a0:	015a      	lsls	r2, r3, #5
 809b8a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 809b8a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 809b8a8:	68ba      	ldr	r2, [r7, #8]
 809b8aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 809b8ac:	490f      	ldr	r1, [pc, #60]	; (809b8ec <SCB_EnableDCache+0x7c>)
 809b8ae:	4313      	orrs	r3, r2
 809b8b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 809b8b4:	68bb      	ldr	r3, [r7, #8]
 809b8b6:	1e5a      	subs	r2, r3, #1
 809b8b8:	60ba      	str	r2, [r7, #8]
 809b8ba:	2b00      	cmp	r3, #0
 809b8bc:	d1ef      	bne.n	809b89e <SCB_EnableDCache+0x2e>
    } while(sets--);
 809b8be:	68fb      	ldr	r3, [r7, #12]
 809b8c0:	1e5a      	subs	r2, r3, #1
 809b8c2:	60fa      	str	r2, [r7, #12]
 809b8c4:	2b00      	cmp	r3, #0
 809b8c6:	d1e5      	bne.n	809b894 <SCB_EnableDCache+0x24>
 809b8c8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 809b8cc:	4b07      	ldr	r3, [pc, #28]	; (809b8ec <SCB_EnableDCache+0x7c>)
 809b8ce:	695b      	ldr	r3, [r3, #20]
 809b8d0:	4a06      	ldr	r2, [pc, #24]	; (809b8ec <SCB_EnableDCache+0x7c>)
 809b8d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 809b8d6:	6153      	str	r3, [r2, #20]
 809b8d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 809b8dc:	f3bf 8f6f 	isb	sy
}
 809b8e0:	bf00      	nop
 809b8e2:	3714      	adds	r7, #20
 809b8e4:	46bd      	mov	sp, r7
 809b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 809b8ea:	4770      	bx	lr
 809b8ec:	e000ed00 	.word	0xe000ed00

0809b8f0 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 809b8f0:	b580      	push	{r7, lr}
 809b8f2:	b082      	sub	sp, #8
 809b8f4:	af00      	add	r7, sp, #0
	uint8_t  lcd_status = LCD_OK;
 809b8f6:	2300      	movs	r3, #0
 809b8f8:	71fb      	strb	r3, [r7, #7]

	/* Enable the FPU */
	CPU_EnableFPU();
 809b8fa:	f000 f8db 	bl	809bab4 <CPU_EnableFPU>

	/* Enable User fault, Bus fault, Memory Fault handlers */
	CPU_EnableFaultHandler();
 809b8fe:	f000 f8e7 	bl	809bad0 <CPU_EnableFaultHandler>

	/* Enable the CPU Cache */
	CPU_CACHE_Enable();
 809b902:	f000 f8cf 	bl	809baa4 <CPU_CACHE_Enable>

	/* Configure the system clock to 200 Mhz */
	SystemClock_Config();
 809b906:	f000 f82f 	bl	809b968 <SystemClock_Config>
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
	 */
	HAL_Init();
 809b90a:	f7ed fbf9 	bl	8089100 <HAL_Init>

	/* Configure system and BSP peripherals (except LCD) */
	MAIN_SystemInit();
 809b90e:	f000 f8ef 	bl	809baf0 <MAIN_SystemInit>

	/*##-1- Initialize the LCD #################################################*/
	/* Initialize the LCD */
	lcd_status = BSP_LCD_Init();
 809b912:	f7e9 ff3b 	bl	808578c <BSP_LCD_Init>
 809b916:	4603      	mov	r3, r0
 809b918:	71fb      	strb	r3, [r7, #7]
	ASSERT(lcd_status != LCD_OK);
 809b91a:	79fb      	ldrb	r3, [r7, #7]
 809b91c:	2b00      	cmp	r3, #0
 809b91e:	d004      	beq.n	809b92a <main+0x3a>
 809b920:	4b0e      	ldr	r3, [pc, #56]	; (809b95c <main+0x6c>)
 809b922:	681b      	ldr	r3, [r3, #0]
 809b924:	3301      	adds	r3, #1
 809b926:	4a0d      	ldr	r2, [pc, #52]	; (809b95c <main+0x6c>)
 809b928:	6013      	str	r3, [r2, #0]

	/* Initialize the LCD Layers */
	//BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
	BSP_LCD_LayerRgb565Init(LTDC_FOREGROUND_LAYER, LCD_FRAME_BUFFER_LAYER_FOREGROUND);
 809b92a:	4b0d      	ldr	r3, [pc, #52]	; (809b960 <main+0x70>)
 809b92c:	4619      	mov	r1, r3
 809b92e:	2001      	movs	r0, #1
 809b930:	f7e9 ffc4 	bl	80858bc <BSP_LCD_LayerRgb565Init>
	BSP_LCD_LayerRgb565Init(LTDC_BACKGROUND_LAYER, LCD_FRAME_BUFFER_LAYER_BACKGROUND);
 809b934:	4b0b      	ldr	r3, [pc, #44]	; (809b964 <main+0x74>)
 809b936:	4619      	mov	r1, r3
 809b938:	2000      	movs	r0, #0
 809b93a:	f7e9 ffbf 	bl	80858bc <BSP_LCD_LayerRgb565Init>

	BSP_LCD_ResetScreen();
 809b93e:	f7ea f8df 	bl	8085b00 <BSP_LCD_ResetScreen>

	if (BSP_PB_GetState(BUTTON_X) != RESET)	{
 809b942:	f44f 7081 	mov.w	r0, #258	; 0x102
 809b946:	f7e8 faab 	bl	8083ea0 <BSP_PB_GetState>
 809b94a:	4603      	mov	r3, r0
 809b94c:	2b00      	cmp	r3, #0
 809b94e:	d001      	beq.n	809b954 <main+0x64>
		TESTS_Run();
 809b950:	f7ff fa5c 	bl	809ae0c <TESTS_Run>
	}

	LEGACY_System();
 809b954:	f7f7 ff76 	bl	8093844 <LEGACY_System>

	for (;;); /* Never leave main function */
 809b958:	e7fe      	b.n	809b958 <main+0x68>
 809b95a:	bf00      	nop
 809b95c:	2002d7d4 	.word	0x2002d7d4
 809b960:	c0000000 	.word	0xc0000000
 809b964:	c003fc00 	.word	0xc003fc00

0809b968 <SystemClock_Config>:
 *            Flash Latency(WS)              = 7 (formerly 5)
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 809b968:	b580      	push	{r7, lr}
 809b96a:	b092      	sub	sp, #72	; 0x48
 809b96c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 809b96e:	2300      	movs	r3, #0
 809b970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 809b974:	2301      	movs	r3, #1
 809b976:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 809b978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 809b97c:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 809b97e:	2302      	movs	r3, #2
 809b980:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 809b982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 809b986:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 809b988:	2319      	movs	r3, #25
 809b98a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 809b98c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 809b990:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 809b992:	2302      	movs	r3, #2
 809b994:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 809b996:	2309      	movs	r3, #9
 809b998:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 809b99a:	463b      	mov	r3, r7
 809b99c:	4618      	mov	r0, r3
 809b99e:	f7f0 fdc1 	bl	808c524 <HAL_RCC_OscConfig>
 809b9a2:	4603      	mov	r3, r0
 809b9a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != HAL_OK)
 809b9a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 809b9ac:	2b00      	cmp	r3, #0
 809b9ae:	d000      	beq.n	809b9b2 <SystemClock_Config+0x4a>
	{
		while(1) { ; }
 809b9b0:	e7fe      	b.n	809b9b0 <SystemClock_Config+0x48>
	}

	/* Activate the OverDrive to reach the 216 MHz Frequency */
	ret = HAL_PWREx_EnableOverDrive();
 809b9b2:	f7ef fff7 	bl	808b9a4 <HAL_PWREx_EnableOverDrive>
 809b9b6:	4603      	mov	r3, r0
 809b9b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != HAL_OK)
 809b9bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 809b9c0:	2b00      	cmp	r3, #0
 809b9c2:	d000      	beq.n	809b9c6 <SystemClock_Config+0x5e>
	{
		while(1) { ; }
 809b9c4:	e7fe      	b.n	809b9c4 <SystemClock_Config+0x5c>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 809b9c6:	230f      	movs	r3, #15
 809b9c8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 809b9ca:	2302      	movs	r3, #2
 809b9cc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 809b9ce:	2300      	movs	r3, #0
 809b9d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 809b9d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 809b9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 809b9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 809b9dc:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 809b9de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 809b9e2:	2107      	movs	r1, #7
 809b9e4:	4618      	mov	r0, r3
 809b9e6:	f7f1 f80d 	bl	808ca04 <HAL_RCC_ClockConfig>
 809b9ea:	4603      	mov	r3, r0
 809b9ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(ret != HAL_OK)
 809b9f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 809b9f4:	2b00      	cmp	r3, #0
 809b9f6:	d000      	beq.n	809b9fa <SystemClock_Config+0x92>
	{
		while(1) { ; }
 809b9f8:	e7fe      	b.n	809b9f8 <SystemClock_Config+0x90>
	}
}
 809b9fa:	bf00      	nop
 809b9fc:	3748      	adds	r7, #72	; 0x48
 809b9fe:	46bd      	mov	sp, r7
 809ba00:	bd80      	pop	{r7, pc}
	...

0809ba04 <HAL_GPIO_EXTI_Callback>:
 * @brief EXTI line detection callbacks.
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 809ba04:	b580      	push	{r7, lr}
 809ba06:	b082      	sub	sp, #8
 809ba08:	af00      	add	r7, sp, #0
 809ba0a:	4603      	mov	r3, r0
 809ba0c:	80fb      	strh	r3, [r7, #6]
	static uint32_t debounce_time = 0;
	static volatile uint32_t counter_mag=0;
	static volatile uint32_t counter_acc_gyro=0;

	switch (GPIO_Pin)
 809ba0e:	88fb      	ldrh	r3, [r7, #6]
 809ba10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 809ba14:	d00f      	beq.n	809ba36 <HAL_GPIO_EXTI_Callback+0x32>
 809ba16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 809ba1a:	dc05      	bgt.n	809ba28 <HAL_GPIO_EXTI_Callback+0x24>
 809ba1c:	2b40      	cmp	r3, #64	; 0x40
 809ba1e:	d018      	beq.n	809ba52 <HAL_GPIO_EXTI_Callback+0x4e>
 809ba20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 809ba24:	d01b      	beq.n	809ba5e <HAL_GPIO_EXTI_Callback+0x5a>
		}
		break;

	default:
		/* Unknown interrupt */
		break;
 809ba26:	e030      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
	switch (GPIO_Pin)
 809ba28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 809ba2c:	d01d      	beq.n	809ba6a <HAL_GPIO_EXTI_Callback+0x66>
 809ba2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 809ba32:	d025      	beq.n	809ba80 <HAL_GPIO_EXTI_Callback+0x7c>
		break;
 809ba34:	e029      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
		if ((HAL_GetTick() - debounce_time) > 50)
 809ba36:	f7ed fb93 	bl	8089160 <HAL_GetTick>
 809ba3a:	4602      	mov	r2, r0
 809ba3c:	4b15      	ldr	r3, [pc, #84]	; (809ba94 <HAL_GPIO_EXTI_Callback+0x90>)
 809ba3e:	681b      	ldr	r3, [r3, #0]
 809ba40:	1ad3      	subs	r3, r2, r3
 809ba42:	2b32      	cmp	r3, #50	; 0x32
 809ba44:	d91e      	bls.n	809ba84 <HAL_GPIO_EXTI_Callback+0x80>
			debounce_time = HAL_GetTick();
 809ba46:	f7ed fb8b 	bl	8089160 <HAL_GetTick>
 809ba4a:	4602      	mov	r2, r0
 809ba4c:	4b11      	ldr	r3, [pc, #68]	; (809ba94 <HAL_GPIO_EXTI_Callback+0x90>)
 809ba4e:	601a      	str	r2, [r3, #0]
		break;
 809ba50:	e018      	b.n	809ba84 <HAL_GPIO_EXTI_Callback+0x80>
		counter_mag++;
 809ba52:	4b11      	ldr	r3, [pc, #68]	; (809ba98 <HAL_GPIO_EXTI_Callback+0x94>)
 809ba54:	681b      	ldr	r3, [r3, #0]
 809ba56:	3301      	adds	r3, #1
 809ba58:	4a0f      	ldr	r2, [pc, #60]	; (809ba98 <HAL_GPIO_EXTI_Callback+0x94>)
 809ba5a:	6013      	str	r3, [r2, #0]
		break;
 809ba5c:	e015      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
		counter_acc_gyro++;
 809ba5e:	4b0f      	ldr	r3, [pc, #60]	; (809ba9c <HAL_GPIO_EXTI_Callback+0x98>)
 809ba60:	681b      	ldr	r3, [r3, #0]
 809ba62:	3301      	adds	r3, #1
 809ba64:	4a0d      	ldr	r2, [pc, #52]	; (809ba9c <HAL_GPIO_EXTI_Callback+0x98>)
 809ba66:	6013      	str	r3, [r2, #0]
		break;
 809ba68:	e00f      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
		if (HAL_GPIO_ReadPin(TS_INT_GPIO_PORT, TS_INT_PIN))
 809ba6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 809ba6e:	480c      	ldr	r0, [pc, #48]	; (809baa0 <HAL_GPIO_EXTI_Callback+0x9c>)
 809ba70:	f7ee fe5e 	bl	808a730 <HAL_GPIO_ReadPin>
 809ba74:	4603      	mov	r3, r0
 809ba76:	2b00      	cmp	r3, #0
 809ba78:	d006      	beq.n	809ba88 <HAL_GPIO_EXTI_Callback+0x84>
			BSP_TS_ITClear();
 809ba7a:	f7ed fb27 	bl	80890cc <BSP_TS_ITClear>
		break;
 809ba7e:	e003      	b.n	809ba88 <HAL_GPIO_EXTI_Callback+0x84>
		break;
 809ba80:	bf00      	nop
 809ba82:	e002      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
		break;
 809ba84:	bf00      	nop
 809ba86:	e000      	b.n	809ba8a <HAL_GPIO_EXTI_Callback+0x86>
		break;
 809ba88:	bf00      	nop
	}
}
 809ba8a:	bf00      	nop
 809ba8c:	3708      	adds	r7, #8
 809ba8e:	46bd      	mov	sp, r7
 809ba90:	bd80      	pop	{r7, pc}
 809ba92:	bf00      	nop
 809ba94:	2002d7d8 	.word	0x2002d7d8
 809ba98:	2002d7dc 	.word	0x2002d7dc
 809ba9c:	2002d7e0 	.word	0x2002d7e0
 809baa0:	40022000 	.word	0x40022000

0809baa4 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 809baa4:	b580      	push	{r7, lr}
 809baa6:	af00      	add	r7, sp, #0
	/* Enable I-Cache */
	SCB_EnableICache();
 809baa8:	f7ff fec6 	bl	809b838 <SCB_EnableICache>

	/* Enable D-Cache */
	SCB_EnableDCache();
 809baac:	f7ff fee0 	bl	809b870 <SCB_EnableDCache>
}
 809bab0:	bf00      	nop
 809bab2:	bd80      	pop	{r7, pc}

0809bab4 <CPU_EnableFPU>:
 * @brief  FPU Coprocessors enable.
 * @param  None
 * @retval None
 */
static void CPU_EnableFPU(void)
{
 809bab4:	b480      	push	{r7}
 809bab6:	af00      	add	r7, sp, #0
	SCB->CPACR=(0x3<<20)+(0x3<<22); // Enable full access to CP11 and CP10 FPU
 809bab8:	4b04      	ldr	r3, [pc, #16]	; (809bacc <CPU_EnableFPU+0x18>)
 809baba:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 809babe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 809bac2:	bf00      	nop
 809bac4:	46bd      	mov	sp, r7
 809bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 809baca:	4770      	bx	lr
 809bacc:	e000ed00 	.word	0xe000ed00

0809bad0 <CPU_EnableFaultHandler>:
 * @brief  Fault Manager Enable.
 * @param  None
 * @retval None
 */
static void CPU_EnableFaultHandler(void)
{
 809bad0:	b480      	push	{r7}
 809bad2:	af00      	add	r7, sp, #0
	SCB->SHCSR = SCB->SHCSR | (SCB_SHCSR_BUSFAULTENA_Msk + SCB_SHCSR_MEMFAULTENA_Msk + SCB_SHCSR_USGFAULTENA_Msk);
 809bad4:	4b05      	ldr	r3, [pc, #20]	; (809baec <CPU_EnableFaultHandler+0x1c>)
 809bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 809bad8:	4a04      	ldr	r2, [pc, #16]	; (809baec <CPU_EnableFaultHandler+0x1c>)
 809bada:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 809bade:	6253      	str	r3, [r2, #36]	; 0x24
}
 809bae0:	bf00      	nop
 809bae2:	46bd      	mov	sp, r7
 809bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 809bae8:	4770      	bx	lr
 809baea:	bf00      	nop
 809baec:	e000ed00 	.word	0xe000ed00

0809baf0 <MAIN_SystemInit>:
 * @brief  Fault Manager Enable.
 * @param  None
 * @retval None
 */
static void MAIN_SystemInit(void)
{
 809baf0:	b580      	push	{r7, lr}
 809baf2:	af00      	add	r7, sp, #0
	/* Init standard IO serial link */
	BSP_STDIO_Init();
 809baf4:	f7ec ff92 	bl	8088a1c <BSP_STDIO_Init>

	/* Init led1 */
	BSP_LED_Init(LED1);
 809baf8:	2000      	movs	r0, #0
 809bafa:	f7e8 f911 	bl	8083d20 <BSP_LED_Init>

	/* Configure the User Button in GPIO Mode */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 809bafe:	2100      	movs	r1, #0
 809bb00:	2002      	movs	r0, #2
 809bb02:	f7e8 f941 	bl	8083d88 <BSP_PB_Init>

	/* Init External SRAM */
	BSP_SDRAM_Init();
 809bb06:	f7ec fd73 	bl	80885f0 <BSP_SDRAM_Init>

	/* Init QSPI */
	BSP_QSPI_Init();
 809bb0a:	f7eb ff9b 	bl	8087a44 <BSP_QSPI_Init>
	BSP_QSPI_EnableMemoryMappedMode();
 809bb0e:	f7ec f929 	bl	8087d64 <BSP_QSPI_EnableMemoryMappedMode>

	/* Init Keys */
	BSP_KEYS_Init();
 809bb12:	f7e9 fcef 	bl	80854f4 <BSP_KEYS_Init>

	/* Init magnetic sensor */
	BSP_MAG_Init();
 809bb16:	f7eb fc8f 	bl	8087438 <BSP_MAG_Init>

	/* Init accelerometer and gyroscope sensor */
	BSP_ACC_GYRO_Init();
 809bb1a:	f7e8 fcc7 	bl	80844ac <BSP_ACC_GYRO_Init>

	/* Init pressure sensor */
	BSP_PRESSURE_Init();
 809bb1e:	f7eb fe4f 	bl	80877c0 <BSP_PRESSURE_Init>

	/* Init WIFI */
	//BSP_WIFI_Init();

	/* Init RNG */
	BSP_RNG_InitGenerator();
 809bb22:	f7ec fb47 	bl	80881b4 <BSP_RNG_InitGenerator>

}
 809bb26:	bf00      	nop
 809bb28:	bd80      	pop	{r7, pc}
	...

0809bb2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 809bb2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 809bb64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 809bb30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 809bb32:	e003      	b.n	809bb3c <LoopCopyDataInit>

0809bb34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 809bb34:	4b0c      	ldr	r3, [pc, #48]	; (809bb68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 809bb36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 809bb38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 809bb3a:	3104      	adds	r1, #4

0809bb3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 809bb3c:	480b      	ldr	r0, [pc, #44]	; (809bb6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 809bb3e:	4b0c      	ldr	r3, [pc, #48]	; (809bb70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 809bb40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 809bb42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 809bb44:	d3f6      	bcc.n	809bb34 <CopyDataInit>
  ldr  r2, =_sbss
 809bb46:	4a0b      	ldr	r2, [pc, #44]	; (809bb74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 809bb48:	e002      	b.n	809bb50 <LoopFillZerobss>

0809bb4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 809bb4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 809bb4c:	f842 3b04 	str.w	r3, [r2], #4

0809bb50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 809bb50:	4b09      	ldr	r3, [pc, #36]	; (809bb78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 809bb52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 809bb54:	d3f9      	bcc.n	809bb4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 809bb56:	f000 f8f5 	bl	809bd44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 809bb5a:	f000 f92f 	bl	809bdbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 809bb5e:	f7ff fec7 	bl	809b8f0 <main>
  bx  lr    
 809bb62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 809bb64:	20001400 	.word	0x20001400
  ldr  r3, =_sidata
 809bb68:	080a5740 	.word	0x080a5740
  ldr  r0, =_sdata
 809bb6c:	2000b000 	.word	0x2000b000
  ldr  r3, =_edata
 809bb70:	2000b548 	.word	0x2000b548
  ldr  r2, =_sbss
 809bb74:	2000b560 	.word	0x2000b560
  ldr  r3, = _ebss
 809bb78:	2002f698 	.word	0x2002f698

0809bb7c <SetStack>:
*/
	.section	.text.SetStack
	.type	SetStack, %function
	.global SetStack
SetStack:
	CPSID	i // Disable interrupts
 809bb7c:	b672      	cpsid	i

	//LDR 	R0, =__initial_sp
	MSR		MSP, R0
 809bb7e:	f380 8808 	msr	MSP, r0
	MSR		PSP, R1
 809bb82:	f381 8809 	msr	PSP, r1

	MOV		R0, #0
 809bb86:	f04f 0000 	mov.w	r0, #0
	MSR		CONTROL, R0 // MSP in use, Privileged, Float point registers will not be saved
 809bb8a:	f380 8814 	msr	CONTROL, r0

	ISB		// Flush cache
 809bb8e:	f3bf 8f6f 	isb	sy

	LDR 	R0, =#0xDEADBEEF
 809bb92:	4808      	ldr	r0, [pc, #32]	; (809bbb4 <SetStack_LoopApplicationStack+0xe>)
	LDR		R1, =#__system_stack_start__
 809bb94:	4908      	ldr	r1, [pc, #32]	; (809bbb8 <SetStack_LoopApplicationStack+0x12>)
	LDR		R2, =#__system_stack_end__
 809bb96:	4a09      	ldr	r2, [pc, #36]	; (809bbbc <SetStack_LoopApplicationStack+0x16>)

0809bb98 <SetStack_LoopSystemStack>:

SetStack_LoopSystemStack:
	STR		R0,[R1]
 809bb98:	6008      	str	r0, [r1, #0]
	ADD		R1,R1,#4
 809bb9a:	f101 0104 	add.w	r1, r1, #4
	CMP		R1,R2
 809bb9e:	4291      	cmp	r1, r2
	BNE		SetStack_LoopSystemStack
 809bba0:	d1fa      	bne.n	809bb98 <SetStack_LoopSystemStack>

	LDR		R1, =#__app_stack_start__
 809bba2:	4907      	ldr	r1, [pc, #28]	; (809bbc0 <SetStack_LoopApplicationStack+0x1a>)
	LDR		R2, =#__app_stack_end__
 809bba4:	4a07      	ldr	r2, [pc, #28]	; (809bbc4 <SetStack_LoopApplicationStack+0x1e>)

0809bba6 <SetStack_LoopApplicationStack>:
SetStack_LoopApplicationStack:
	STR		R0,[R1]
 809bba6:	6008      	str	r0, [r1, #0]
	ADD		R1,R1,#4
 809bba8:	f101 0104 	add.w	r1, r1, #4
	CMP		R1,R2
 809bbac:	4291      	cmp	r1, r2
	BNE		SetStack_LoopApplicationStack
 809bbae:	d1fa      	bne.n	809bba6 <SetStack_LoopApplicationStack>

	CPSIE	i // Enable back interrupts
 809bbb0:	b662      	cpsie	i
	BX		LR
 809bbb2:	4770      	bx	lr
	LDR 	R0, =#0xDEADBEEF
 809bbb4:	deadbeef 	.word	0xdeadbeef
	LDR		R1, =#__system_stack_start__
 809bbb8:	20001000 	.word	0x20001000
	LDR		R2, =#__system_stack_end__
 809bbbc:	20001400 	.word	0x20001400
	LDR		R1, =#__app_stack_start__
 809bbc0:	20000000 	.word	0x20000000
	LDR		R2, =#__app_stack_end__
 809bbc4:	20001000 	.word	0x20001000

0809bbc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 809bbc8:	e7fe      	b.n	809bbc8 <ADC_IRQHandler>

0809bbca <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 809bbca:	b580      	push	{r7, lr}
 809bbcc:	b084      	sub	sp, #16
 809bbce:	af00      	add	r7, sp, #0
	RNG_HandleTypeDef RNG_Handle;

	RNG_Handle.State = HAL_RNG_STATE_READY;
 809bbd0:	2301      	movs	r3, #1
 809bbd2:	737b      	strb	r3, [r7, #13]
	HAL_RNG_MspInit(&RNG_Handle);
 809bbd4:	1d3b      	adds	r3, r7, #4
 809bbd6:	4618      	mov	r0, r3
 809bbd8:	f7ec fb0e 	bl	80881f8 <HAL_RNG_MspInit>
}
 809bbdc:	bf00      	nop
 809bbde:	3710      	adds	r7, #16
 809bbe0:	46bd      	mov	sp, r7
 809bbe2:	bd80      	pop	{r7, pc}

0809bbe4 <NMI_Handler>:
 * @brief   This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 809bbe4:	b480      	push	{r7}
 809bbe6:	af00      	add	r7, sp, #0
	asm ("MOV		R0, #0\n\t"
 809bbe8:	f04f 0000 	mov.w	r0, #0
 809bbec:	4669      	mov	r1, sp
 809bbee:	f7f7 bc1f 	b.w	8093430 <PANIC_ReadStack>
			"MOV 	R1, SP\n\t"
			"B       PANIC_ReadStack\n\t");

	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 809bbf2:	e7fe      	b.n	809bbf2 <NMI_Handler+0xe>

0809bbf4 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 809bbf4:	b480      	push	{r7}
 809bbf6:	af00      	add	r7, sp, #0
	asm ("MOV		R0, #1\n\t"
 809bbf8:	f04f 0001 	mov.w	r0, #1
 809bbfc:	4669      	mov	r1, sp
 809bbfe:	f7f7 bc17 	b.w	8093430 <PANIC_ReadStack>
			"MOV 	R1, SP\n\t"
			"B       PANIC_ReadStack\n\t");


	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 809bc02:	e7fe      	b.n	809bc02 <HardFault_Handler+0xe>

0809bc04 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 809bc04:	b480      	push	{r7}
 809bc06:	af00      	add	r7, sp, #0
	asm ("MOV		R0, #2\n\t"
 809bc08:	f04f 0002 	mov.w	r0, #2
 809bc0c:	4669      	mov	r1, sp
 809bc0e:	f7f7 bc0f 	b.w	8093430 <PANIC_ReadStack>
			"MOV 	R1, SP\n\t"
			"B       PANIC_ReadStack\n\t");

	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 809bc12:	e7fe      	b.n	809bc12 <MemManage_Handler+0xe>

0809bc14 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 809bc14:	b480      	push	{r7}
 809bc16:	af00      	add	r7, sp, #0
	asm ("MOV		R0, #3\n\t"
 809bc18:	f04f 0003 	mov.w	r0, #3
 809bc1c:	4669      	mov	r1, sp
 809bc1e:	f7f7 bc07 	b.w	8093430 <PANIC_ReadStack>
			"MOV 	R1, SP\n\t"
			"B       PANIC_ReadStack\n\t");

	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 809bc22:	e7fe      	b.n	809bc22 <BusFault_Handler+0xe>

0809bc24 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 809bc24:	b480      	push	{r7}
 809bc26:	af00      	add	r7, sp, #0
	asm ("MOV		R0, #4\n\t"
 809bc28:	f04f 0004 	mov.w	r0, #4
 809bc2c:	4669      	mov	r1, sp
 809bc2e:	f7f7 bbff 	b.w	8093430 <PANIC_ReadStack>
			"MOV 	R1, SP\n\t"
			"B       PANIC_ReadStack\n\t");

	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 809bc32:	e7fe      	b.n	809bc32 <UsageFault_Handler+0xe>

0809bc34 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 809bc34:	b480      	push	{r7}
 809bc36:	af00      	add	r7, sp, #0
}
 809bc38:	bf00      	nop
 809bc3a:	46bd      	mov	sp, r7
 809bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 809bc40:	4770      	bx	lr

0809bc42 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 809bc42:	b580      	push	{r7, lr}
 809bc44:	af00      	add	r7, sp, #0
	HAL_IncTick();
 809bc46:	f7ed fa77 	bl	8089138 <HAL_IncTick>
}
 809bc4a:	bf00      	nop
 809bc4c:	bd80      	pop	{r7, pc}

0809bc4e <EXTI0_IRQHandler>:
 * @brief  This function handles External line 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 809bc4e:	b580      	push	{r7, lr}
 809bc50:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 809bc52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 809bc56:	f7ee fd9d 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
}
 809bc5a:	bf00      	nop
 809bc5c:	bd80      	pop	{r7, pc}

0809bc5e <EXTI2_IRQHandler>:
 * @brief  This function handles External line 2 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI2_IRQHandler(void)
{
 809bc5e:	b580      	push	{r7, lr}
 809bc60:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 809bc62:	2004      	movs	r0, #4
 809bc64:	f7ee fd96 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
}
 809bc68:	bf00      	nop
 809bc6a:	bd80      	pop	{r7, pc}

0809bc6c <EXTI9_5_IRQHandler>:
 * @brief  This function handles External line 9_5 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)
{
 809bc6c:	b580      	push	{r7, lr}
 809bc6e:	af00      	add	r7, sp, #0
	/* Interrupt handler shared between ACC GYRo DRDY and MAG DRDY interrupt */
	if (__HAL_GPIO_EXTI_GET_IT(ACC_GYRO_DRDY_PIN ) != RESET)
 809bc70:	4b07      	ldr	r3, [pc, #28]	; (809bc90 <EXTI9_5_IRQHandler+0x24>)
 809bc72:	695b      	ldr	r3, [r3, #20]
 809bc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 809bc78:	2b00      	cmp	r3, #0
 809bc7a:	d004      	beq.n	809bc86 <EXTI9_5_IRQHandler+0x1a>
	{
		HAL_GPIO_EXTI_IRQHandler(ACC_GYRO_DRDY_PIN );   /* SD detect event or touch screen interrupt */
 809bc7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 809bc80:	f7ee fd88 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
	}
	else
	{     /* User button event or Touch screen interrupt */
		HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_PIN);
	}
}
 809bc84:	e002      	b.n	809bc8c <EXTI9_5_IRQHandler+0x20>
		HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_PIN);
 809bc86:	2040      	movs	r0, #64	; 0x40
 809bc88:	f7ee fd84 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
}
 809bc8c:	bf00      	nop
 809bc8e:	bd80      	pop	{r7, pc}
 809bc90:	40013c00 	.word	0x40013c00

0809bc94 <EXTI15_10_IRQHandler>:
 * @brief  This function handles External line 15_10 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)
{
 809bc94:	b580      	push	{r7, lr}
 809bc96:	af00      	add	r7, sp, #0
	/* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
	if (__HAL_GPIO_EXTI_GET_IT(KEY_BUTTON_PIN) == RESET)
 809bc98:	4b08      	ldr	r3, [pc, #32]	; (809bcbc <EXTI15_10_IRQHandler+0x28>)
 809bc9a:	695b      	ldr	r3, [r3, #20]
 809bc9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 809bca0:	2b00      	cmp	r3, #0
 809bca2:	d104      	bne.n	809bcae <EXTI15_10_IRQHandler+0x1a>
	{
		HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 809bca4:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 809bca8:	f7ee fd74 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
	}
	else
	{     /* User button event or Touch screen interrupt */
		HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
	}
}
 809bcac:	e003      	b.n	809bcb6 <EXTI15_10_IRQHandler+0x22>
		HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 809bcae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 809bcb2:	f7ee fd6f 	bl	808a794 <HAL_GPIO_EXTI_IRQHandler>
}
 809bcb6:	bf00      	nop
 809bcb8:	bd80      	pop	{r7, pc}
 809bcba:	bf00      	nop
 809bcbc:	40013c00 	.word	0x40013c00

0809bcc0 <DMA2_Stream7_IRQHandler>:
 * @brief This function handles DMA2 Stream 7 interrupt request.
 * @param None
 * @retval None
 */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 809bcc0:	b580      	push	{r7, lr}
 809bcc2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 809bcc4:	4b03      	ldr	r3, [pc, #12]	; (809bcd4 <DMA2_Stream7_IRQHandler+0x14>)
 809bcc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 809bcc8:	4618      	mov	r0, r3
 809bcca:	f7ed fd7b 	bl	80897c4 <HAL_DMA_IRQHandler>
}
 809bcce:	bf00      	nop
 809bcd0:	bd80      	pop	{r7, pc}
 809bcd2:	bf00      	nop
 809bcd4:	2000b6ac 	.word	0x2000b6ac

0809bcd8 <DMA2_Stream0_IRQHandler>:
/**
 * @brief  Handles SDRAM DMA transfer interrupt request.
 * @retval None
 */
void BSP_SDRAM_DMA_IRQHandler(void)
{
 809bcd8:	b580      	push	{r7, lr}
 809bcda:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(sdramHandle.hdma);
 809bcdc:	4b03      	ldr	r3, [pc, #12]	; (809bcec <DMA2_Stream0_IRQHandler+0x14>)
 809bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 809bce0:	4618      	mov	r0, r3
 809bce2:	f7ed fd6f 	bl	80897c4 <HAL_DMA_IRQHandler>
}
 809bce6:	bf00      	nop
 809bce8:	bd80      	pop	{r7, pc}
 809bcea:	bf00      	nop
 809bcec:	2002da64 	.word	0x2002da64

0809bcf0 <DMA2_Stream1_IRQHandler>:
 * @brief  DMA interrupt handler.
 * @param  None
 * @retval None
 */
void DMA2_Stream1_IRQHandler(void)
{
 809bcf0:	b580      	push	{r7, lr}
 809bcf2:	af00      	add	r7, sp, #0
	BSP_CAMERA_DMA_IRQHandler();
 809bcf4:	f7ff fffc 	bl	809bcf0 <DMA2_Stream1_IRQHandler>
}
 809bcf8:	bf00      	nop
 809bcfa:	bd80      	pop	{r7, pc}

0809bcfc <DMA2_Stream4_IRQHandler>:
 * @brief  This function handles DMA2 Stream 6 interrupt request.
 * @param  None
 * @retval None
 */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 809bcfc:	b580      	push	{r7, lr}
 809bcfe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 809bd00:	4b03      	ldr	r3, [pc, #12]	; (809bd10 <DMA2_Stream4_IRQHandler+0x14>)
 809bd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 809bd04:	4618      	mov	r0, r3
 809bd06:	f7ed fd5d 	bl	80897c4 <HAL_DMA_IRQHandler>
}
 809bd0a:	bf00      	nop
 809bd0c:	bd80      	pop	{r7, pc}
 809bd0e:	bf00      	nop
 809bd10:	2000b628 	.word	0x2000b628

0809bd14 <DCMI_IRQHandler>:
 * @brief  DCMI interrupt handler.
 * @param  None
 * @retval None
 */
void DCMI_IRQHandler(void)
{
 809bd14:	b580      	push	{r7, lr}
 809bd16:	af00      	add	r7, sp, #0
	BSP_CAMERA_IRQHandler();
 809bd18:	f7ff fffc 	bl	809bd14 <DCMI_IRQHandler>
}
 809bd1c:	bf00      	nop
 809bd1e:	bd80      	pop	{r7, pc}

0809bd20 <DMA2D_IRQHandler>:
 * @brief  This function handles DMA2D Handler.
 * @param  None
 * @retval None
 */
void DMA2D_IRQHandler(void)
{
 809bd20:	b580      	push	{r7, lr}
 809bd22:	af00      	add	r7, sp, #0
	BSP_LCD_DMA2D_IRQHandler();
 809bd24:	f7eb fb67 	bl	80873f6 <BSP_LCD_DMA2D_IRQHandler>
}
 809bd28:	bf00      	nop
 809bd2a:	bd80      	pop	{r7, pc}

0809bd2c <USART1_IRQHandler>:
 * @brief  This function handles stdio (COM1 / USART1) Handler.
 * @param  None
 * @retval None
 */
void USART1_IRQHandler(void)
{
 809bd2c:	b580      	push	{r7, lr}
 809bd2e:	af00      	add	r7, sp, #0
	BSP_STDIO_IRQHandler();
 809bd30:	f7ec fede 	bl	8088af0 <BSP_STDIO_IRQHandler>
}
 809bd34:	bf00      	nop
 809bd36:	bd80      	pop	{r7, pc}

0809bd38 <USART6_IRQHandler>:
 * @brief  This function handles Wifi (COM2 / USART6) Handler.
 * @param  None
 * @retval None
 */
void USART6_IRQHandler(void)
{
 809bd38:	b580      	push	{r7, lr}
 809bd3a:	af00      	add	r7, sp, #0
	BSP_WIFI_IRQHandler();
 809bd3c:	f7ed f9d6 	bl	80890ec <BSP_WIFI_IRQHandler>
}
 809bd40:	bf00      	nop
 809bd42:	bd80      	pop	{r7, pc}

0809bd44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 809bd44:	b480      	push	{r7}
 809bd46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 809bd48:	4b15      	ldr	r3, [pc, #84]	; (809bda0 <SystemInit+0x5c>)
 809bd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 809bd4e:	4a14      	ldr	r2, [pc, #80]	; (809bda0 <SystemInit+0x5c>)
 809bd50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 809bd54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 809bd58:	4b12      	ldr	r3, [pc, #72]	; (809bda4 <SystemInit+0x60>)
 809bd5a:	681b      	ldr	r3, [r3, #0]
 809bd5c:	4a11      	ldr	r2, [pc, #68]	; (809bda4 <SystemInit+0x60>)
 809bd5e:	f043 0301 	orr.w	r3, r3, #1
 809bd62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 809bd64:	4b0f      	ldr	r3, [pc, #60]	; (809bda4 <SystemInit+0x60>)
 809bd66:	2200      	movs	r2, #0
 809bd68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 809bd6a:	4b0e      	ldr	r3, [pc, #56]	; (809bda4 <SystemInit+0x60>)
 809bd6c:	681a      	ldr	r2, [r3, #0]
 809bd6e:	490d      	ldr	r1, [pc, #52]	; (809bda4 <SystemInit+0x60>)
 809bd70:	4b0d      	ldr	r3, [pc, #52]	; (809bda8 <SystemInit+0x64>)
 809bd72:	4013      	ands	r3, r2
 809bd74:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 809bd76:	4b0b      	ldr	r3, [pc, #44]	; (809bda4 <SystemInit+0x60>)
 809bd78:	4a0c      	ldr	r2, [pc, #48]	; (809bdac <SystemInit+0x68>)
 809bd7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 809bd7c:	4b09      	ldr	r3, [pc, #36]	; (809bda4 <SystemInit+0x60>)
 809bd7e:	681b      	ldr	r3, [r3, #0]
 809bd80:	4a08      	ldr	r2, [pc, #32]	; (809bda4 <SystemInit+0x60>)
 809bd82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 809bd86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 809bd88:	4b06      	ldr	r3, [pc, #24]	; (809bda4 <SystemInit+0x60>)
 809bd8a:	2200      	movs	r2, #0
 809bd8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 809bd8e:	4b04      	ldr	r3, [pc, #16]	; (809bda0 <SystemInit+0x5c>)
 809bd90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 809bd94:	609a      	str	r2, [r3, #8]
#endif
}
 809bd96:	bf00      	nop
 809bd98:	46bd      	mov	sp, r7
 809bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 809bd9e:	4770      	bx	lr
 809bda0:	e000ed00 	.word	0xe000ed00
 809bda4:	40023800 	.word	0x40023800
 809bda8:	fef6ffff 	.word	0xfef6ffff
 809bdac:	24003010 	.word	0x24003010

0809bdb0 <__errno>:
 809bdb0:	4b01      	ldr	r3, [pc, #4]	; (809bdb8 <__errno+0x8>)
 809bdb2:	6818      	ldr	r0, [r3, #0]
 809bdb4:	4770      	bx	lr
 809bdb6:	bf00      	nop
 809bdb8:	2000b378 	.word	0x2000b378

0809bdbc <__libc_init_array>:
 809bdbc:	b570      	push	{r4, r5, r6, lr}
 809bdbe:	4e0d      	ldr	r6, [pc, #52]	; (809bdf4 <__libc_init_array+0x38>)
 809bdc0:	4c0d      	ldr	r4, [pc, #52]	; (809bdf8 <__libc_init_array+0x3c>)
 809bdc2:	1ba4      	subs	r4, r4, r6
 809bdc4:	10a4      	asrs	r4, r4, #2
 809bdc6:	2500      	movs	r5, #0
 809bdc8:	42a5      	cmp	r5, r4
 809bdca:	d109      	bne.n	809bde0 <__libc_init_array+0x24>
 809bdcc:	4e0b      	ldr	r6, [pc, #44]	; (809bdfc <__libc_init_array+0x40>)
 809bdce:	4c0c      	ldr	r4, [pc, #48]	; (809be00 <__libc_init_array+0x44>)
 809bdd0:	f002 f860 	bl	809de94 <_init>
 809bdd4:	1ba4      	subs	r4, r4, r6
 809bdd6:	10a4      	asrs	r4, r4, #2
 809bdd8:	2500      	movs	r5, #0
 809bdda:	42a5      	cmp	r5, r4
 809bddc:	d105      	bne.n	809bdea <__libc_init_array+0x2e>
 809bdde:	bd70      	pop	{r4, r5, r6, pc}
 809bde0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 809bde4:	4798      	blx	r3
 809bde6:	3501      	adds	r5, #1
 809bde8:	e7ee      	b.n	809bdc8 <__libc_init_array+0xc>
 809bdea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 809bdee:	4798      	blx	r3
 809bdf0:	3501      	adds	r5, #1
 809bdf2:	e7f2      	b.n	809bdda <__libc_init_array+0x1e>
 809bdf4:	080a5738 	.word	0x080a5738
 809bdf8:	080a5738 	.word	0x080a5738
 809bdfc:	080a5738 	.word	0x080a5738
 809be00:	080a573c 	.word	0x080a573c

0809be04 <memcpy>:
 809be04:	b510      	push	{r4, lr}
 809be06:	1e43      	subs	r3, r0, #1
 809be08:	440a      	add	r2, r1
 809be0a:	4291      	cmp	r1, r2
 809be0c:	d100      	bne.n	809be10 <memcpy+0xc>
 809be0e:	bd10      	pop	{r4, pc}
 809be10:	f811 4b01 	ldrb.w	r4, [r1], #1
 809be14:	f803 4f01 	strb.w	r4, [r3, #1]!
 809be18:	e7f7      	b.n	809be0a <memcpy+0x6>

0809be1a <memset>:
 809be1a:	4402      	add	r2, r0
 809be1c:	4603      	mov	r3, r0
 809be1e:	4293      	cmp	r3, r2
 809be20:	d100      	bne.n	809be24 <memset+0xa>
 809be22:	4770      	bx	lr
 809be24:	f803 1b01 	strb.w	r1, [r3], #1
 809be28:	e7f9      	b.n	809be1e <memset+0x4>

0809be2a <__cvt>:
 809be2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 809be2e:	ec55 4b10 	vmov	r4, r5, d0
 809be32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 809be34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 809be38:	2d00      	cmp	r5, #0
 809be3a:	460e      	mov	r6, r1
 809be3c:	4691      	mov	r9, r2
 809be3e:	4619      	mov	r1, r3
 809be40:	bfb8      	it	lt
 809be42:	4622      	movlt	r2, r4
 809be44:	462b      	mov	r3, r5
 809be46:	f027 0720 	bic.w	r7, r7, #32
 809be4a:	bfbb      	ittet	lt
 809be4c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 809be50:	461d      	movlt	r5, r3
 809be52:	2300      	movge	r3, #0
 809be54:	232d      	movlt	r3, #45	; 0x2d
 809be56:	bfb8      	it	lt
 809be58:	4614      	movlt	r4, r2
 809be5a:	2f46      	cmp	r7, #70	; 0x46
 809be5c:	700b      	strb	r3, [r1, #0]
 809be5e:	d004      	beq.n	809be6a <__cvt+0x40>
 809be60:	2f45      	cmp	r7, #69	; 0x45
 809be62:	d100      	bne.n	809be66 <__cvt+0x3c>
 809be64:	3601      	adds	r6, #1
 809be66:	2102      	movs	r1, #2
 809be68:	e000      	b.n	809be6c <__cvt+0x42>
 809be6a:	2103      	movs	r1, #3
 809be6c:	ab03      	add	r3, sp, #12
 809be6e:	9301      	str	r3, [sp, #4]
 809be70:	ab02      	add	r3, sp, #8
 809be72:	9300      	str	r3, [sp, #0]
 809be74:	4632      	mov	r2, r6
 809be76:	4653      	mov	r3, sl
 809be78:	ec45 4b10 	vmov	d0, r4, r5
 809be7c:	f000 fce0 	bl	809c840 <_dtoa_r>
 809be80:	2f47      	cmp	r7, #71	; 0x47
 809be82:	4680      	mov	r8, r0
 809be84:	d102      	bne.n	809be8c <__cvt+0x62>
 809be86:	f019 0f01 	tst.w	r9, #1
 809be8a:	d026      	beq.n	809beda <__cvt+0xb0>
 809be8c:	2f46      	cmp	r7, #70	; 0x46
 809be8e:	eb08 0906 	add.w	r9, r8, r6
 809be92:	d111      	bne.n	809beb8 <__cvt+0x8e>
 809be94:	f898 3000 	ldrb.w	r3, [r8]
 809be98:	2b30      	cmp	r3, #48	; 0x30
 809be9a:	d10a      	bne.n	809beb2 <__cvt+0x88>
 809be9c:	2200      	movs	r2, #0
 809be9e:	2300      	movs	r3, #0
 809bea0:	4620      	mov	r0, r4
 809bea2:	4629      	mov	r1, r5
 809bea4:	f7e4 fd50 	bl	8080948 <__aeabi_dcmpeq>
 809bea8:	b918      	cbnz	r0, 809beb2 <__cvt+0x88>
 809beaa:	f1c6 0601 	rsb	r6, r6, #1
 809beae:	f8ca 6000 	str.w	r6, [sl]
 809beb2:	f8da 3000 	ldr.w	r3, [sl]
 809beb6:	4499      	add	r9, r3
 809beb8:	2200      	movs	r2, #0
 809beba:	2300      	movs	r3, #0
 809bebc:	4620      	mov	r0, r4
 809bebe:	4629      	mov	r1, r5
 809bec0:	f7e4 fd42 	bl	8080948 <__aeabi_dcmpeq>
 809bec4:	b938      	cbnz	r0, 809bed6 <__cvt+0xac>
 809bec6:	2230      	movs	r2, #48	; 0x30
 809bec8:	9b03      	ldr	r3, [sp, #12]
 809beca:	454b      	cmp	r3, r9
 809becc:	d205      	bcs.n	809beda <__cvt+0xb0>
 809bece:	1c59      	adds	r1, r3, #1
 809bed0:	9103      	str	r1, [sp, #12]
 809bed2:	701a      	strb	r2, [r3, #0]
 809bed4:	e7f8      	b.n	809bec8 <__cvt+0x9e>
 809bed6:	f8cd 900c 	str.w	r9, [sp, #12]
 809beda:	9b03      	ldr	r3, [sp, #12]
 809bedc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 809bede:	eba3 0308 	sub.w	r3, r3, r8
 809bee2:	4640      	mov	r0, r8
 809bee4:	6013      	str	r3, [r2, #0]
 809bee6:	b004      	add	sp, #16
 809bee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0809beec <__exponent>:
 809beec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 809beee:	2900      	cmp	r1, #0
 809bef0:	4604      	mov	r4, r0
 809bef2:	bfba      	itte	lt
 809bef4:	4249      	neglt	r1, r1
 809bef6:	232d      	movlt	r3, #45	; 0x2d
 809bef8:	232b      	movge	r3, #43	; 0x2b
 809befa:	2909      	cmp	r1, #9
 809befc:	f804 2b02 	strb.w	r2, [r4], #2
 809bf00:	7043      	strb	r3, [r0, #1]
 809bf02:	dd20      	ble.n	809bf46 <__exponent+0x5a>
 809bf04:	f10d 0307 	add.w	r3, sp, #7
 809bf08:	461f      	mov	r7, r3
 809bf0a:	260a      	movs	r6, #10
 809bf0c:	fb91 f5f6 	sdiv	r5, r1, r6
 809bf10:	fb06 1115 	mls	r1, r6, r5, r1
 809bf14:	3130      	adds	r1, #48	; 0x30
 809bf16:	2d09      	cmp	r5, #9
 809bf18:	f803 1c01 	strb.w	r1, [r3, #-1]
 809bf1c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 809bf20:	4629      	mov	r1, r5
 809bf22:	dc09      	bgt.n	809bf38 <__exponent+0x4c>
 809bf24:	3130      	adds	r1, #48	; 0x30
 809bf26:	3b02      	subs	r3, #2
 809bf28:	f802 1c01 	strb.w	r1, [r2, #-1]
 809bf2c:	42bb      	cmp	r3, r7
 809bf2e:	4622      	mov	r2, r4
 809bf30:	d304      	bcc.n	809bf3c <__exponent+0x50>
 809bf32:	1a10      	subs	r0, r2, r0
 809bf34:	b003      	add	sp, #12
 809bf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809bf38:	4613      	mov	r3, r2
 809bf3a:	e7e7      	b.n	809bf0c <__exponent+0x20>
 809bf3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 809bf40:	f804 2b01 	strb.w	r2, [r4], #1
 809bf44:	e7f2      	b.n	809bf2c <__exponent+0x40>
 809bf46:	2330      	movs	r3, #48	; 0x30
 809bf48:	4419      	add	r1, r3
 809bf4a:	7083      	strb	r3, [r0, #2]
 809bf4c:	1d02      	adds	r2, r0, #4
 809bf4e:	70c1      	strb	r1, [r0, #3]
 809bf50:	e7ef      	b.n	809bf32 <__exponent+0x46>
	...

0809bf54 <_printf_float>:
 809bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809bf58:	b08d      	sub	sp, #52	; 0x34
 809bf5a:	460c      	mov	r4, r1
 809bf5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 809bf60:	4616      	mov	r6, r2
 809bf62:	461f      	mov	r7, r3
 809bf64:	4605      	mov	r5, r0
 809bf66:	f001 fa23 	bl	809d3b0 <_localeconv_r>
 809bf6a:	6803      	ldr	r3, [r0, #0]
 809bf6c:	9304      	str	r3, [sp, #16]
 809bf6e:	4618      	mov	r0, r3
 809bf70:	f7e4 f86e 	bl	8080050 <strlen>
 809bf74:	2300      	movs	r3, #0
 809bf76:	930a      	str	r3, [sp, #40]	; 0x28
 809bf78:	f8d8 3000 	ldr.w	r3, [r8]
 809bf7c:	9005      	str	r0, [sp, #20]
 809bf7e:	3307      	adds	r3, #7
 809bf80:	f023 0307 	bic.w	r3, r3, #7
 809bf84:	f103 0208 	add.w	r2, r3, #8
 809bf88:	f894 a018 	ldrb.w	sl, [r4, #24]
 809bf8c:	f8d4 b000 	ldr.w	fp, [r4]
 809bf90:	f8c8 2000 	str.w	r2, [r8]
 809bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 809bf98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 809bf9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 809bfa0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 809bfa4:	9307      	str	r3, [sp, #28]
 809bfa6:	f8cd 8018 	str.w	r8, [sp, #24]
 809bfaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 809bfae:	4ba7      	ldr	r3, [pc, #668]	; (809c24c <_printf_float+0x2f8>)
 809bfb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 809bfb4:	f7e4 fcfa 	bl	80809ac <__aeabi_dcmpun>
 809bfb8:	bb70      	cbnz	r0, 809c018 <_printf_float+0xc4>
 809bfba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 809bfbe:	4ba3      	ldr	r3, [pc, #652]	; (809c24c <_printf_float+0x2f8>)
 809bfc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 809bfc4:	f7e4 fcd4 	bl	8080970 <__aeabi_dcmple>
 809bfc8:	bb30      	cbnz	r0, 809c018 <_printf_float+0xc4>
 809bfca:	2200      	movs	r2, #0
 809bfcc:	2300      	movs	r3, #0
 809bfce:	4640      	mov	r0, r8
 809bfd0:	4649      	mov	r1, r9
 809bfd2:	f7e4 fcc3 	bl	808095c <__aeabi_dcmplt>
 809bfd6:	b110      	cbz	r0, 809bfde <_printf_float+0x8a>
 809bfd8:	232d      	movs	r3, #45	; 0x2d
 809bfda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 809bfde:	4a9c      	ldr	r2, [pc, #624]	; (809c250 <_printf_float+0x2fc>)
 809bfe0:	4b9c      	ldr	r3, [pc, #624]	; (809c254 <_printf_float+0x300>)
 809bfe2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 809bfe6:	bf8c      	ite	hi
 809bfe8:	4690      	movhi	r8, r2
 809bfea:	4698      	movls	r8, r3
 809bfec:	2303      	movs	r3, #3
 809bfee:	f02b 0204 	bic.w	r2, fp, #4
 809bff2:	6123      	str	r3, [r4, #16]
 809bff4:	6022      	str	r2, [r4, #0]
 809bff6:	f04f 0900 	mov.w	r9, #0
 809bffa:	9700      	str	r7, [sp, #0]
 809bffc:	4633      	mov	r3, r6
 809bffe:	aa0b      	add	r2, sp, #44	; 0x2c
 809c000:	4621      	mov	r1, r4
 809c002:	4628      	mov	r0, r5
 809c004:	f000 f9e6 	bl	809c3d4 <_printf_common>
 809c008:	3001      	adds	r0, #1
 809c00a:	f040 808d 	bne.w	809c128 <_printf_float+0x1d4>
 809c00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809c012:	b00d      	add	sp, #52	; 0x34
 809c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809c018:	4642      	mov	r2, r8
 809c01a:	464b      	mov	r3, r9
 809c01c:	4640      	mov	r0, r8
 809c01e:	4649      	mov	r1, r9
 809c020:	f7e4 fcc4 	bl	80809ac <__aeabi_dcmpun>
 809c024:	b110      	cbz	r0, 809c02c <_printf_float+0xd8>
 809c026:	4a8c      	ldr	r2, [pc, #560]	; (809c258 <_printf_float+0x304>)
 809c028:	4b8c      	ldr	r3, [pc, #560]	; (809c25c <_printf_float+0x308>)
 809c02a:	e7da      	b.n	809bfe2 <_printf_float+0x8e>
 809c02c:	6861      	ldr	r1, [r4, #4]
 809c02e:	1c4b      	adds	r3, r1, #1
 809c030:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 809c034:	a80a      	add	r0, sp, #40	; 0x28
 809c036:	d13e      	bne.n	809c0b6 <_printf_float+0x162>
 809c038:	2306      	movs	r3, #6
 809c03a:	6063      	str	r3, [r4, #4]
 809c03c:	2300      	movs	r3, #0
 809c03e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 809c042:	ab09      	add	r3, sp, #36	; 0x24
 809c044:	9300      	str	r3, [sp, #0]
 809c046:	ec49 8b10 	vmov	d0, r8, r9
 809c04a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 809c04e:	6022      	str	r2, [r4, #0]
 809c050:	f8cd a004 	str.w	sl, [sp, #4]
 809c054:	6861      	ldr	r1, [r4, #4]
 809c056:	4628      	mov	r0, r5
 809c058:	f7ff fee7 	bl	809be2a <__cvt>
 809c05c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 809c060:	2b47      	cmp	r3, #71	; 0x47
 809c062:	4680      	mov	r8, r0
 809c064:	d109      	bne.n	809c07a <_printf_float+0x126>
 809c066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809c068:	1cd8      	adds	r0, r3, #3
 809c06a:	db02      	blt.n	809c072 <_printf_float+0x11e>
 809c06c:	6862      	ldr	r2, [r4, #4]
 809c06e:	4293      	cmp	r3, r2
 809c070:	dd47      	ble.n	809c102 <_printf_float+0x1ae>
 809c072:	f1aa 0a02 	sub.w	sl, sl, #2
 809c076:	fa5f fa8a 	uxtb.w	sl, sl
 809c07a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 809c07e:	9909      	ldr	r1, [sp, #36]	; 0x24
 809c080:	d824      	bhi.n	809c0cc <_printf_float+0x178>
 809c082:	3901      	subs	r1, #1
 809c084:	4652      	mov	r2, sl
 809c086:	f104 0050 	add.w	r0, r4, #80	; 0x50
 809c08a:	9109      	str	r1, [sp, #36]	; 0x24
 809c08c:	f7ff ff2e 	bl	809beec <__exponent>
 809c090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 809c092:	1813      	adds	r3, r2, r0
 809c094:	2a01      	cmp	r2, #1
 809c096:	4681      	mov	r9, r0
 809c098:	6123      	str	r3, [r4, #16]
 809c09a:	dc02      	bgt.n	809c0a2 <_printf_float+0x14e>
 809c09c:	6822      	ldr	r2, [r4, #0]
 809c09e:	07d1      	lsls	r1, r2, #31
 809c0a0:	d501      	bpl.n	809c0a6 <_printf_float+0x152>
 809c0a2:	3301      	adds	r3, #1
 809c0a4:	6123      	str	r3, [r4, #16]
 809c0a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 809c0aa:	2b00      	cmp	r3, #0
 809c0ac:	d0a5      	beq.n	809bffa <_printf_float+0xa6>
 809c0ae:	232d      	movs	r3, #45	; 0x2d
 809c0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 809c0b4:	e7a1      	b.n	809bffa <_printf_float+0xa6>
 809c0b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 809c0ba:	f000 8177 	beq.w	809c3ac <_printf_float+0x458>
 809c0be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 809c0c2:	d1bb      	bne.n	809c03c <_printf_float+0xe8>
 809c0c4:	2900      	cmp	r1, #0
 809c0c6:	d1b9      	bne.n	809c03c <_printf_float+0xe8>
 809c0c8:	2301      	movs	r3, #1
 809c0ca:	e7b6      	b.n	809c03a <_printf_float+0xe6>
 809c0cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 809c0d0:	d119      	bne.n	809c106 <_printf_float+0x1b2>
 809c0d2:	2900      	cmp	r1, #0
 809c0d4:	6863      	ldr	r3, [r4, #4]
 809c0d6:	dd0c      	ble.n	809c0f2 <_printf_float+0x19e>
 809c0d8:	6121      	str	r1, [r4, #16]
 809c0da:	b913      	cbnz	r3, 809c0e2 <_printf_float+0x18e>
 809c0dc:	6822      	ldr	r2, [r4, #0]
 809c0de:	07d2      	lsls	r2, r2, #31
 809c0e0:	d502      	bpl.n	809c0e8 <_printf_float+0x194>
 809c0e2:	3301      	adds	r3, #1
 809c0e4:	440b      	add	r3, r1
 809c0e6:	6123      	str	r3, [r4, #16]
 809c0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809c0ea:	65a3      	str	r3, [r4, #88]	; 0x58
 809c0ec:	f04f 0900 	mov.w	r9, #0
 809c0f0:	e7d9      	b.n	809c0a6 <_printf_float+0x152>
 809c0f2:	b913      	cbnz	r3, 809c0fa <_printf_float+0x1a6>
 809c0f4:	6822      	ldr	r2, [r4, #0]
 809c0f6:	07d0      	lsls	r0, r2, #31
 809c0f8:	d501      	bpl.n	809c0fe <_printf_float+0x1aa>
 809c0fa:	3302      	adds	r3, #2
 809c0fc:	e7f3      	b.n	809c0e6 <_printf_float+0x192>
 809c0fe:	2301      	movs	r3, #1
 809c100:	e7f1      	b.n	809c0e6 <_printf_float+0x192>
 809c102:	f04f 0a67 	mov.w	sl, #103	; 0x67
 809c106:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 809c10a:	4293      	cmp	r3, r2
 809c10c:	db05      	blt.n	809c11a <_printf_float+0x1c6>
 809c10e:	6822      	ldr	r2, [r4, #0]
 809c110:	6123      	str	r3, [r4, #16]
 809c112:	07d1      	lsls	r1, r2, #31
 809c114:	d5e8      	bpl.n	809c0e8 <_printf_float+0x194>
 809c116:	3301      	adds	r3, #1
 809c118:	e7e5      	b.n	809c0e6 <_printf_float+0x192>
 809c11a:	2b00      	cmp	r3, #0
 809c11c:	bfd4      	ite	le
 809c11e:	f1c3 0302 	rsble	r3, r3, #2
 809c122:	2301      	movgt	r3, #1
 809c124:	4413      	add	r3, r2
 809c126:	e7de      	b.n	809c0e6 <_printf_float+0x192>
 809c128:	6823      	ldr	r3, [r4, #0]
 809c12a:	055a      	lsls	r2, r3, #21
 809c12c:	d407      	bmi.n	809c13e <_printf_float+0x1ea>
 809c12e:	6923      	ldr	r3, [r4, #16]
 809c130:	4642      	mov	r2, r8
 809c132:	4631      	mov	r1, r6
 809c134:	4628      	mov	r0, r5
 809c136:	47b8      	blx	r7
 809c138:	3001      	adds	r0, #1
 809c13a:	d12b      	bne.n	809c194 <_printf_float+0x240>
 809c13c:	e767      	b.n	809c00e <_printf_float+0xba>
 809c13e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 809c142:	f240 80dc 	bls.w	809c2fe <_printf_float+0x3aa>
 809c146:	2200      	movs	r2, #0
 809c148:	2300      	movs	r3, #0
 809c14a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 809c14e:	f7e4 fbfb 	bl	8080948 <__aeabi_dcmpeq>
 809c152:	2800      	cmp	r0, #0
 809c154:	d033      	beq.n	809c1be <_printf_float+0x26a>
 809c156:	2301      	movs	r3, #1
 809c158:	4a41      	ldr	r2, [pc, #260]	; (809c260 <_printf_float+0x30c>)
 809c15a:	4631      	mov	r1, r6
 809c15c:	4628      	mov	r0, r5
 809c15e:	47b8      	blx	r7
 809c160:	3001      	adds	r0, #1
 809c162:	f43f af54 	beq.w	809c00e <_printf_float+0xba>
 809c166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 809c16a:	429a      	cmp	r2, r3
 809c16c:	db02      	blt.n	809c174 <_printf_float+0x220>
 809c16e:	6823      	ldr	r3, [r4, #0]
 809c170:	07d8      	lsls	r0, r3, #31
 809c172:	d50f      	bpl.n	809c194 <_printf_float+0x240>
 809c174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 809c178:	4631      	mov	r1, r6
 809c17a:	4628      	mov	r0, r5
 809c17c:	47b8      	blx	r7
 809c17e:	3001      	adds	r0, #1
 809c180:	f43f af45 	beq.w	809c00e <_printf_float+0xba>
 809c184:	f04f 0800 	mov.w	r8, #0
 809c188:	f104 091a 	add.w	r9, r4, #26
 809c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c18e:	3b01      	subs	r3, #1
 809c190:	4543      	cmp	r3, r8
 809c192:	dc09      	bgt.n	809c1a8 <_printf_float+0x254>
 809c194:	6823      	ldr	r3, [r4, #0]
 809c196:	079b      	lsls	r3, r3, #30
 809c198:	f100 8103 	bmi.w	809c3a2 <_printf_float+0x44e>
 809c19c:	68e0      	ldr	r0, [r4, #12]
 809c19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809c1a0:	4298      	cmp	r0, r3
 809c1a2:	bfb8      	it	lt
 809c1a4:	4618      	movlt	r0, r3
 809c1a6:	e734      	b.n	809c012 <_printf_float+0xbe>
 809c1a8:	2301      	movs	r3, #1
 809c1aa:	464a      	mov	r2, r9
 809c1ac:	4631      	mov	r1, r6
 809c1ae:	4628      	mov	r0, r5
 809c1b0:	47b8      	blx	r7
 809c1b2:	3001      	adds	r0, #1
 809c1b4:	f43f af2b 	beq.w	809c00e <_printf_float+0xba>
 809c1b8:	f108 0801 	add.w	r8, r8, #1
 809c1bc:	e7e6      	b.n	809c18c <_printf_float+0x238>
 809c1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809c1c0:	2b00      	cmp	r3, #0
 809c1c2:	dc2b      	bgt.n	809c21c <_printf_float+0x2c8>
 809c1c4:	2301      	movs	r3, #1
 809c1c6:	4a26      	ldr	r2, [pc, #152]	; (809c260 <_printf_float+0x30c>)
 809c1c8:	4631      	mov	r1, r6
 809c1ca:	4628      	mov	r0, r5
 809c1cc:	47b8      	blx	r7
 809c1ce:	3001      	adds	r0, #1
 809c1d0:	f43f af1d 	beq.w	809c00e <_printf_float+0xba>
 809c1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809c1d6:	b923      	cbnz	r3, 809c1e2 <_printf_float+0x28e>
 809c1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c1da:	b913      	cbnz	r3, 809c1e2 <_printf_float+0x28e>
 809c1dc:	6823      	ldr	r3, [r4, #0]
 809c1de:	07d9      	lsls	r1, r3, #31
 809c1e0:	d5d8      	bpl.n	809c194 <_printf_float+0x240>
 809c1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 809c1e6:	4631      	mov	r1, r6
 809c1e8:	4628      	mov	r0, r5
 809c1ea:	47b8      	blx	r7
 809c1ec:	3001      	adds	r0, #1
 809c1ee:	f43f af0e 	beq.w	809c00e <_printf_float+0xba>
 809c1f2:	f04f 0900 	mov.w	r9, #0
 809c1f6:	f104 0a1a 	add.w	sl, r4, #26
 809c1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809c1fc:	425b      	negs	r3, r3
 809c1fe:	454b      	cmp	r3, r9
 809c200:	dc01      	bgt.n	809c206 <_printf_float+0x2b2>
 809c202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c204:	e794      	b.n	809c130 <_printf_float+0x1dc>
 809c206:	2301      	movs	r3, #1
 809c208:	4652      	mov	r2, sl
 809c20a:	4631      	mov	r1, r6
 809c20c:	4628      	mov	r0, r5
 809c20e:	47b8      	blx	r7
 809c210:	3001      	adds	r0, #1
 809c212:	f43f aefc 	beq.w	809c00e <_printf_float+0xba>
 809c216:	f109 0901 	add.w	r9, r9, #1
 809c21a:	e7ee      	b.n	809c1fa <_printf_float+0x2a6>
 809c21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 809c21e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 809c220:	429a      	cmp	r2, r3
 809c222:	bfa8      	it	ge
 809c224:	461a      	movge	r2, r3
 809c226:	2a00      	cmp	r2, #0
 809c228:	4691      	mov	r9, r2
 809c22a:	dd07      	ble.n	809c23c <_printf_float+0x2e8>
 809c22c:	4613      	mov	r3, r2
 809c22e:	4631      	mov	r1, r6
 809c230:	4642      	mov	r2, r8
 809c232:	4628      	mov	r0, r5
 809c234:	47b8      	blx	r7
 809c236:	3001      	adds	r0, #1
 809c238:	f43f aee9 	beq.w	809c00e <_printf_float+0xba>
 809c23c:	f104 031a 	add.w	r3, r4, #26
 809c240:	f04f 0b00 	mov.w	fp, #0
 809c244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 809c248:	9306      	str	r3, [sp, #24]
 809c24a:	e015      	b.n	809c278 <_printf_float+0x324>
 809c24c:	7fefffff 	.word	0x7fefffff
 809c250:	080a5478 	.word	0x080a5478
 809c254:	080a5474 	.word	0x080a5474
 809c258:	080a5480 	.word	0x080a5480
 809c25c:	080a547c 	.word	0x080a547c
 809c260:	080a5484 	.word	0x080a5484
 809c264:	2301      	movs	r3, #1
 809c266:	9a06      	ldr	r2, [sp, #24]
 809c268:	4631      	mov	r1, r6
 809c26a:	4628      	mov	r0, r5
 809c26c:	47b8      	blx	r7
 809c26e:	3001      	adds	r0, #1
 809c270:	f43f aecd 	beq.w	809c00e <_printf_float+0xba>
 809c274:	f10b 0b01 	add.w	fp, fp, #1
 809c278:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 809c27c:	ebaa 0309 	sub.w	r3, sl, r9
 809c280:	455b      	cmp	r3, fp
 809c282:	dcef      	bgt.n	809c264 <_printf_float+0x310>
 809c284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 809c288:	429a      	cmp	r2, r3
 809c28a:	44d0      	add	r8, sl
 809c28c:	db15      	blt.n	809c2ba <_printf_float+0x366>
 809c28e:	6823      	ldr	r3, [r4, #0]
 809c290:	07da      	lsls	r2, r3, #31
 809c292:	d412      	bmi.n	809c2ba <_printf_float+0x366>
 809c294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c296:	9909      	ldr	r1, [sp, #36]	; 0x24
 809c298:	eba3 020a 	sub.w	r2, r3, sl
 809c29c:	eba3 0a01 	sub.w	sl, r3, r1
 809c2a0:	4592      	cmp	sl, r2
 809c2a2:	bfa8      	it	ge
 809c2a4:	4692      	movge	sl, r2
 809c2a6:	f1ba 0f00 	cmp.w	sl, #0
 809c2aa:	dc0e      	bgt.n	809c2ca <_printf_float+0x376>
 809c2ac:	f04f 0800 	mov.w	r8, #0
 809c2b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 809c2b4:	f104 091a 	add.w	r9, r4, #26
 809c2b8:	e019      	b.n	809c2ee <_printf_float+0x39a>
 809c2ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 809c2be:	4631      	mov	r1, r6
 809c2c0:	4628      	mov	r0, r5
 809c2c2:	47b8      	blx	r7
 809c2c4:	3001      	adds	r0, #1
 809c2c6:	d1e5      	bne.n	809c294 <_printf_float+0x340>
 809c2c8:	e6a1      	b.n	809c00e <_printf_float+0xba>
 809c2ca:	4653      	mov	r3, sl
 809c2cc:	4642      	mov	r2, r8
 809c2ce:	4631      	mov	r1, r6
 809c2d0:	4628      	mov	r0, r5
 809c2d2:	47b8      	blx	r7
 809c2d4:	3001      	adds	r0, #1
 809c2d6:	d1e9      	bne.n	809c2ac <_printf_float+0x358>
 809c2d8:	e699      	b.n	809c00e <_printf_float+0xba>
 809c2da:	2301      	movs	r3, #1
 809c2dc:	464a      	mov	r2, r9
 809c2de:	4631      	mov	r1, r6
 809c2e0:	4628      	mov	r0, r5
 809c2e2:	47b8      	blx	r7
 809c2e4:	3001      	adds	r0, #1
 809c2e6:	f43f ae92 	beq.w	809c00e <_printf_float+0xba>
 809c2ea:	f108 0801 	add.w	r8, r8, #1
 809c2ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 809c2f2:	1a9b      	subs	r3, r3, r2
 809c2f4:	eba3 030a 	sub.w	r3, r3, sl
 809c2f8:	4543      	cmp	r3, r8
 809c2fa:	dcee      	bgt.n	809c2da <_printf_float+0x386>
 809c2fc:	e74a      	b.n	809c194 <_printf_float+0x240>
 809c2fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 809c300:	2a01      	cmp	r2, #1
 809c302:	dc01      	bgt.n	809c308 <_printf_float+0x3b4>
 809c304:	07db      	lsls	r3, r3, #31
 809c306:	d53a      	bpl.n	809c37e <_printf_float+0x42a>
 809c308:	2301      	movs	r3, #1
 809c30a:	4642      	mov	r2, r8
 809c30c:	4631      	mov	r1, r6
 809c30e:	4628      	mov	r0, r5
 809c310:	47b8      	blx	r7
 809c312:	3001      	adds	r0, #1
 809c314:	f43f ae7b 	beq.w	809c00e <_printf_float+0xba>
 809c318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 809c31c:	4631      	mov	r1, r6
 809c31e:	4628      	mov	r0, r5
 809c320:	47b8      	blx	r7
 809c322:	3001      	adds	r0, #1
 809c324:	f108 0801 	add.w	r8, r8, #1
 809c328:	f43f ae71 	beq.w	809c00e <_printf_float+0xba>
 809c32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c32e:	2200      	movs	r2, #0
 809c330:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 809c334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 809c338:	2300      	movs	r3, #0
 809c33a:	f7e4 fb05 	bl	8080948 <__aeabi_dcmpeq>
 809c33e:	b9c8      	cbnz	r0, 809c374 <_printf_float+0x420>
 809c340:	4653      	mov	r3, sl
 809c342:	4642      	mov	r2, r8
 809c344:	4631      	mov	r1, r6
 809c346:	4628      	mov	r0, r5
 809c348:	47b8      	blx	r7
 809c34a:	3001      	adds	r0, #1
 809c34c:	d10e      	bne.n	809c36c <_printf_float+0x418>
 809c34e:	e65e      	b.n	809c00e <_printf_float+0xba>
 809c350:	2301      	movs	r3, #1
 809c352:	4652      	mov	r2, sl
 809c354:	4631      	mov	r1, r6
 809c356:	4628      	mov	r0, r5
 809c358:	47b8      	blx	r7
 809c35a:	3001      	adds	r0, #1
 809c35c:	f43f ae57 	beq.w	809c00e <_printf_float+0xba>
 809c360:	f108 0801 	add.w	r8, r8, #1
 809c364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809c366:	3b01      	subs	r3, #1
 809c368:	4543      	cmp	r3, r8
 809c36a:	dcf1      	bgt.n	809c350 <_printf_float+0x3fc>
 809c36c:	464b      	mov	r3, r9
 809c36e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 809c372:	e6de      	b.n	809c132 <_printf_float+0x1de>
 809c374:	f04f 0800 	mov.w	r8, #0
 809c378:	f104 0a1a 	add.w	sl, r4, #26
 809c37c:	e7f2      	b.n	809c364 <_printf_float+0x410>
 809c37e:	2301      	movs	r3, #1
 809c380:	e7df      	b.n	809c342 <_printf_float+0x3ee>
 809c382:	2301      	movs	r3, #1
 809c384:	464a      	mov	r2, r9
 809c386:	4631      	mov	r1, r6
 809c388:	4628      	mov	r0, r5
 809c38a:	47b8      	blx	r7
 809c38c:	3001      	adds	r0, #1
 809c38e:	f43f ae3e 	beq.w	809c00e <_printf_float+0xba>
 809c392:	f108 0801 	add.w	r8, r8, #1
 809c396:	68e3      	ldr	r3, [r4, #12]
 809c398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 809c39a:	1a9b      	subs	r3, r3, r2
 809c39c:	4543      	cmp	r3, r8
 809c39e:	dcf0      	bgt.n	809c382 <_printf_float+0x42e>
 809c3a0:	e6fc      	b.n	809c19c <_printf_float+0x248>
 809c3a2:	f04f 0800 	mov.w	r8, #0
 809c3a6:	f104 0919 	add.w	r9, r4, #25
 809c3aa:	e7f4      	b.n	809c396 <_printf_float+0x442>
 809c3ac:	2900      	cmp	r1, #0
 809c3ae:	f43f ae8b 	beq.w	809c0c8 <_printf_float+0x174>
 809c3b2:	2300      	movs	r3, #0
 809c3b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 809c3b8:	ab09      	add	r3, sp, #36	; 0x24
 809c3ba:	9300      	str	r3, [sp, #0]
 809c3bc:	ec49 8b10 	vmov	d0, r8, r9
 809c3c0:	6022      	str	r2, [r4, #0]
 809c3c2:	f8cd a004 	str.w	sl, [sp, #4]
 809c3c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 809c3ca:	4628      	mov	r0, r5
 809c3cc:	f7ff fd2d 	bl	809be2a <__cvt>
 809c3d0:	4680      	mov	r8, r0
 809c3d2:	e648      	b.n	809c066 <_printf_float+0x112>

0809c3d4 <_printf_common>:
 809c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809c3d8:	4691      	mov	r9, r2
 809c3da:	461f      	mov	r7, r3
 809c3dc:	688a      	ldr	r2, [r1, #8]
 809c3de:	690b      	ldr	r3, [r1, #16]
 809c3e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 809c3e4:	4293      	cmp	r3, r2
 809c3e6:	bfb8      	it	lt
 809c3e8:	4613      	movlt	r3, r2
 809c3ea:	f8c9 3000 	str.w	r3, [r9]
 809c3ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 809c3f2:	4606      	mov	r6, r0
 809c3f4:	460c      	mov	r4, r1
 809c3f6:	b112      	cbz	r2, 809c3fe <_printf_common+0x2a>
 809c3f8:	3301      	adds	r3, #1
 809c3fa:	f8c9 3000 	str.w	r3, [r9]
 809c3fe:	6823      	ldr	r3, [r4, #0]
 809c400:	0699      	lsls	r1, r3, #26
 809c402:	bf42      	ittt	mi
 809c404:	f8d9 3000 	ldrmi.w	r3, [r9]
 809c408:	3302      	addmi	r3, #2
 809c40a:	f8c9 3000 	strmi.w	r3, [r9]
 809c40e:	6825      	ldr	r5, [r4, #0]
 809c410:	f015 0506 	ands.w	r5, r5, #6
 809c414:	d107      	bne.n	809c426 <_printf_common+0x52>
 809c416:	f104 0a19 	add.w	sl, r4, #25
 809c41a:	68e3      	ldr	r3, [r4, #12]
 809c41c:	f8d9 2000 	ldr.w	r2, [r9]
 809c420:	1a9b      	subs	r3, r3, r2
 809c422:	42ab      	cmp	r3, r5
 809c424:	dc28      	bgt.n	809c478 <_printf_common+0xa4>
 809c426:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 809c42a:	6822      	ldr	r2, [r4, #0]
 809c42c:	3300      	adds	r3, #0
 809c42e:	bf18      	it	ne
 809c430:	2301      	movne	r3, #1
 809c432:	0692      	lsls	r2, r2, #26
 809c434:	d42d      	bmi.n	809c492 <_printf_common+0xbe>
 809c436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 809c43a:	4639      	mov	r1, r7
 809c43c:	4630      	mov	r0, r6
 809c43e:	47c0      	blx	r8
 809c440:	3001      	adds	r0, #1
 809c442:	d020      	beq.n	809c486 <_printf_common+0xb2>
 809c444:	6823      	ldr	r3, [r4, #0]
 809c446:	68e5      	ldr	r5, [r4, #12]
 809c448:	f8d9 2000 	ldr.w	r2, [r9]
 809c44c:	f003 0306 	and.w	r3, r3, #6
 809c450:	2b04      	cmp	r3, #4
 809c452:	bf08      	it	eq
 809c454:	1aad      	subeq	r5, r5, r2
 809c456:	68a3      	ldr	r3, [r4, #8]
 809c458:	6922      	ldr	r2, [r4, #16]
 809c45a:	bf0c      	ite	eq
 809c45c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 809c460:	2500      	movne	r5, #0
 809c462:	4293      	cmp	r3, r2
 809c464:	bfc4      	itt	gt
 809c466:	1a9b      	subgt	r3, r3, r2
 809c468:	18ed      	addgt	r5, r5, r3
 809c46a:	f04f 0900 	mov.w	r9, #0
 809c46e:	341a      	adds	r4, #26
 809c470:	454d      	cmp	r5, r9
 809c472:	d11a      	bne.n	809c4aa <_printf_common+0xd6>
 809c474:	2000      	movs	r0, #0
 809c476:	e008      	b.n	809c48a <_printf_common+0xb6>
 809c478:	2301      	movs	r3, #1
 809c47a:	4652      	mov	r2, sl
 809c47c:	4639      	mov	r1, r7
 809c47e:	4630      	mov	r0, r6
 809c480:	47c0      	blx	r8
 809c482:	3001      	adds	r0, #1
 809c484:	d103      	bne.n	809c48e <_printf_common+0xba>
 809c486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809c48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809c48e:	3501      	adds	r5, #1
 809c490:	e7c3      	b.n	809c41a <_printf_common+0x46>
 809c492:	18e1      	adds	r1, r4, r3
 809c494:	1c5a      	adds	r2, r3, #1
 809c496:	2030      	movs	r0, #48	; 0x30
 809c498:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 809c49c:	4422      	add	r2, r4
 809c49e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 809c4a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 809c4a6:	3302      	adds	r3, #2
 809c4a8:	e7c5      	b.n	809c436 <_printf_common+0x62>
 809c4aa:	2301      	movs	r3, #1
 809c4ac:	4622      	mov	r2, r4
 809c4ae:	4639      	mov	r1, r7
 809c4b0:	4630      	mov	r0, r6
 809c4b2:	47c0      	blx	r8
 809c4b4:	3001      	adds	r0, #1
 809c4b6:	d0e6      	beq.n	809c486 <_printf_common+0xb2>
 809c4b8:	f109 0901 	add.w	r9, r9, #1
 809c4bc:	e7d8      	b.n	809c470 <_printf_common+0x9c>
	...

0809c4c0 <_printf_i>:
 809c4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 809c4c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 809c4c8:	460c      	mov	r4, r1
 809c4ca:	7e09      	ldrb	r1, [r1, #24]
 809c4cc:	b085      	sub	sp, #20
 809c4ce:	296e      	cmp	r1, #110	; 0x6e
 809c4d0:	4617      	mov	r7, r2
 809c4d2:	4606      	mov	r6, r0
 809c4d4:	4698      	mov	r8, r3
 809c4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 809c4d8:	f000 80b3 	beq.w	809c642 <_printf_i+0x182>
 809c4dc:	d822      	bhi.n	809c524 <_printf_i+0x64>
 809c4de:	2963      	cmp	r1, #99	; 0x63
 809c4e0:	d036      	beq.n	809c550 <_printf_i+0x90>
 809c4e2:	d80a      	bhi.n	809c4fa <_printf_i+0x3a>
 809c4e4:	2900      	cmp	r1, #0
 809c4e6:	f000 80b9 	beq.w	809c65c <_printf_i+0x19c>
 809c4ea:	2958      	cmp	r1, #88	; 0x58
 809c4ec:	f000 8083 	beq.w	809c5f6 <_printf_i+0x136>
 809c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 809c4f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 809c4f8:	e032      	b.n	809c560 <_printf_i+0xa0>
 809c4fa:	2964      	cmp	r1, #100	; 0x64
 809c4fc:	d001      	beq.n	809c502 <_printf_i+0x42>
 809c4fe:	2969      	cmp	r1, #105	; 0x69
 809c500:	d1f6      	bne.n	809c4f0 <_printf_i+0x30>
 809c502:	6820      	ldr	r0, [r4, #0]
 809c504:	6813      	ldr	r3, [r2, #0]
 809c506:	0605      	lsls	r5, r0, #24
 809c508:	f103 0104 	add.w	r1, r3, #4
 809c50c:	d52a      	bpl.n	809c564 <_printf_i+0xa4>
 809c50e:	681b      	ldr	r3, [r3, #0]
 809c510:	6011      	str	r1, [r2, #0]
 809c512:	2b00      	cmp	r3, #0
 809c514:	da03      	bge.n	809c51e <_printf_i+0x5e>
 809c516:	222d      	movs	r2, #45	; 0x2d
 809c518:	425b      	negs	r3, r3
 809c51a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 809c51e:	486f      	ldr	r0, [pc, #444]	; (809c6dc <_printf_i+0x21c>)
 809c520:	220a      	movs	r2, #10
 809c522:	e039      	b.n	809c598 <_printf_i+0xd8>
 809c524:	2973      	cmp	r1, #115	; 0x73
 809c526:	f000 809d 	beq.w	809c664 <_printf_i+0x1a4>
 809c52a:	d808      	bhi.n	809c53e <_printf_i+0x7e>
 809c52c:	296f      	cmp	r1, #111	; 0x6f
 809c52e:	d020      	beq.n	809c572 <_printf_i+0xb2>
 809c530:	2970      	cmp	r1, #112	; 0x70
 809c532:	d1dd      	bne.n	809c4f0 <_printf_i+0x30>
 809c534:	6823      	ldr	r3, [r4, #0]
 809c536:	f043 0320 	orr.w	r3, r3, #32
 809c53a:	6023      	str	r3, [r4, #0]
 809c53c:	e003      	b.n	809c546 <_printf_i+0x86>
 809c53e:	2975      	cmp	r1, #117	; 0x75
 809c540:	d017      	beq.n	809c572 <_printf_i+0xb2>
 809c542:	2978      	cmp	r1, #120	; 0x78
 809c544:	d1d4      	bne.n	809c4f0 <_printf_i+0x30>
 809c546:	2378      	movs	r3, #120	; 0x78
 809c548:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 809c54c:	4864      	ldr	r0, [pc, #400]	; (809c6e0 <_printf_i+0x220>)
 809c54e:	e055      	b.n	809c5fc <_printf_i+0x13c>
 809c550:	6813      	ldr	r3, [r2, #0]
 809c552:	1d19      	adds	r1, r3, #4
 809c554:	681b      	ldr	r3, [r3, #0]
 809c556:	6011      	str	r1, [r2, #0]
 809c558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 809c55c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 809c560:	2301      	movs	r3, #1
 809c562:	e08c      	b.n	809c67e <_printf_i+0x1be>
 809c564:	681b      	ldr	r3, [r3, #0]
 809c566:	6011      	str	r1, [r2, #0]
 809c568:	f010 0f40 	tst.w	r0, #64	; 0x40
 809c56c:	bf18      	it	ne
 809c56e:	b21b      	sxthne	r3, r3
 809c570:	e7cf      	b.n	809c512 <_printf_i+0x52>
 809c572:	6813      	ldr	r3, [r2, #0]
 809c574:	6825      	ldr	r5, [r4, #0]
 809c576:	1d18      	adds	r0, r3, #4
 809c578:	6010      	str	r0, [r2, #0]
 809c57a:	0628      	lsls	r0, r5, #24
 809c57c:	d501      	bpl.n	809c582 <_printf_i+0xc2>
 809c57e:	681b      	ldr	r3, [r3, #0]
 809c580:	e002      	b.n	809c588 <_printf_i+0xc8>
 809c582:	0668      	lsls	r0, r5, #25
 809c584:	d5fb      	bpl.n	809c57e <_printf_i+0xbe>
 809c586:	881b      	ldrh	r3, [r3, #0]
 809c588:	4854      	ldr	r0, [pc, #336]	; (809c6dc <_printf_i+0x21c>)
 809c58a:	296f      	cmp	r1, #111	; 0x6f
 809c58c:	bf14      	ite	ne
 809c58e:	220a      	movne	r2, #10
 809c590:	2208      	moveq	r2, #8
 809c592:	2100      	movs	r1, #0
 809c594:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 809c598:	6865      	ldr	r5, [r4, #4]
 809c59a:	60a5      	str	r5, [r4, #8]
 809c59c:	2d00      	cmp	r5, #0
 809c59e:	f2c0 8095 	blt.w	809c6cc <_printf_i+0x20c>
 809c5a2:	6821      	ldr	r1, [r4, #0]
 809c5a4:	f021 0104 	bic.w	r1, r1, #4
 809c5a8:	6021      	str	r1, [r4, #0]
 809c5aa:	2b00      	cmp	r3, #0
 809c5ac:	d13d      	bne.n	809c62a <_printf_i+0x16a>
 809c5ae:	2d00      	cmp	r5, #0
 809c5b0:	f040 808e 	bne.w	809c6d0 <_printf_i+0x210>
 809c5b4:	4665      	mov	r5, ip
 809c5b6:	2a08      	cmp	r2, #8
 809c5b8:	d10b      	bne.n	809c5d2 <_printf_i+0x112>
 809c5ba:	6823      	ldr	r3, [r4, #0]
 809c5bc:	07db      	lsls	r3, r3, #31
 809c5be:	d508      	bpl.n	809c5d2 <_printf_i+0x112>
 809c5c0:	6923      	ldr	r3, [r4, #16]
 809c5c2:	6862      	ldr	r2, [r4, #4]
 809c5c4:	429a      	cmp	r2, r3
 809c5c6:	bfde      	ittt	le
 809c5c8:	2330      	movle	r3, #48	; 0x30
 809c5ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 809c5ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 809c5d2:	ebac 0305 	sub.w	r3, ip, r5
 809c5d6:	6123      	str	r3, [r4, #16]
 809c5d8:	f8cd 8000 	str.w	r8, [sp]
 809c5dc:	463b      	mov	r3, r7
 809c5de:	aa03      	add	r2, sp, #12
 809c5e0:	4621      	mov	r1, r4
 809c5e2:	4630      	mov	r0, r6
 809c5e4:	f7ff fef6 	bl	809c3d4 <_printf_common>
 809c5e8:	3001      	adds	r0, #1
 809c5ea:	d14d      	bne.n	809c688 <_printf_i+0x1c8>
 809c5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809c5f0:	b005      	add	sp, #20
 809c5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 809c5f6:	4839      	ldr	r0, [pc, #228]	; (809c6dc <_printf_i+0x21c>)
 809c5f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 809c5fc:	6813      	ldr	r3, [r2, #0]
 809c5fe:	6821      	ldr	r1, [r4, #0]
 809c600:	1d1d      	adds	r5, r3, #4
 809c602:	681b      	ldr	r3, [r3, #0]
 809c604:	6015      	str	r5, [r2, #0]
 809c606:	060a      	lsls	r2, r1, #24
 809c608:	d50b      	bpl.n	809c622 <_printf_i+0x162>
 809c60a:	07ca      	lsls	r2, r1, #31
 809c60c:	bf44      	itt	mi
 809c60e:	f041 0120 	orrmi.w	r1, r1, #32
 809c612:	6021      	strmi	r1, [r4, #0]
 809c614:	b91b      	cbnz	r3, 809c61e <_printf_i+0x15e>
 809c616:	6822      	ldr	r2, [r4, #0]
 809c618:	f022 0220 	bic.w	r2, r2, #32
 809c61c:	6022      	str	r2, [r4, #0]
 809c61e:	2210      	movs	r2, #16
 809c620:	e7b7      	b.n	809c592 <_printf_i+0xd2>
 809c622:	064d      	lsls	r5, r1, #25
 809c624:	bf48      	it	mi
 809c626:	b29b      	uxthmi	r3, r3
 809c628:	e7ef      	b.n	809c60a <_printf_i+0x14a>
 809c62a:	4665      	mov	r5, ip
 809c62c:	fbb3 f1f2 	udiv	r1, r3, r2
 809c630:	fb02 3311 	mls	r3, r2, r1, r3
 809c634:	5cc3      	ldrb	r3, [r0, r3]
 809c636:	f805 3d01 	strb.w	r3, [r5, #-1]!
 809c63a:	460b      	mov	r3, r1
 809c63c:	2900      	cmp	r1, #0
 809c63e:	d1f5      	bne.n	809c62c <_printf_i+0x16c>
 809c640:	e7b9      	b.n	809c5b6 <_printf_i+0xf6>
 809c642:	6813      	ldr	r3, [r2, #0]
 809c644:	6825      	ldr	r5, [r4, #0]
 809c646:	6961      	ldr	r1, [r4, #20]
 809c648:	1d18      	adds	r0, r3, #4
 809c64a:	6010      	str	r0, [r2, #0]
 809c64c:	0628      	lsls	r0, r5, #24
 809c64e:	681b      	ldr	r3, [r3, #0]
 809c650:	d501      	bpl.n	809c656 <_printf_i+0x196>
 809c652:	6019      	str	r1, [r3, #0]
 809c654:	e002      	b.n	809c65c <_printf_i+0x19c>
 809c656:	066a      	lsls	r2, r5, #25
 809c658:	d5fb      	bpl.n	809c652 <_printf_i+0x192>
 809c65a:	8019      	strh	r1, [r3, #0]
 809c65c:	2300      	movs	r3, #0
 809c65e:	6123      	str	r3, [r4, #16]
 809c660:	4665      	mov	r5, ip
 809c662:	e7b9      	b.n	809c5d8 <_printf_i+0x118>
 809c664:	6813      	ldr	r3, [r2, #0]
 809c666:	1d19      	adds	r1, r3, #4
 809c668:	6011      	str	r1, [r2, #0]
 809c66a:	681d      	ldr	r5, [r3, #0]
 809c66c:	6862      	ldr	r2, [r4, #4]
 809c66e:	2100      	movs	r1, #0
 809c670:	4628      	mov	r0, r5
 809c672:	f7e3 fcf5 	bl	8080060 <memchr>
 809c676:	b108      	cbz	r0, 809c67c <_printf_i+0x1bc>
 809c678:	1b40      	subs	r0, r0, r5
 809c67a:	6060      	str	r0, [r4, #4]
 809c67c:	6863      	ldr	r3, [r4, #4]
 809c67e:	6123      	str	r3, [r4, #16]
 809c680:	2300      	movs	r3, #0
 809c682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 809c686:	e7a7      	b.n	809c5d8 <_printf_i+0x118>
 809c688:	6923      	ldr	r3, [r4, #16]
 809c68a:	462a      	mov	r2, r5
 809c68c:	4639      	mov	r1, r7
 809c68e:	4630      	mov	r0, r6
 809c690:	47c0      	blx	r8
 809c692:	3001      	adds	r0, #1
 809c694:	d0aa      	beq.n	809c5ec <_printf_i+0x12c>
 809c696:	6823      	ldr	r3, [r4, #0]
 809c698:	079b      	lsls	r3, r3, #30
 809c69a:	d413      	bmi.n	809c6c4 <_printf_i+0x204>
 809c69c:	68e0      	ldr	r0, [r4, #12]
 809c69e:	9b03      	ldr	r3, [sp, #12]
 809c6a0:	4298      	cmp	r0, r3
 809c6a2:	bfb8      	it	lt
 809c6a4:	4618      	movlt	r0, r3
 809c6a6:	e7a3      	b.n	809c5f0 <_printf_i+0x130>
 809c6a8:	2301      	movs	r3, #1
 809c6aa:	464a      	mov	r2, r9
 809c6ac:	4639      	mov	r1, r7
 809c6ae:	4630      	mov	r0, r6
 809c6b0:	47c0      	blx	r8
 809c6b2:	3001      	adds	r0, #1
 809c6b4:	d09a      	beq.n	809c5ec <_printf_i+0x12c>
 809c6b6:	3501      	adds	r5, #1
 809c6b8:	68e3      	ldr	r3, [r4, #12]
 809c6ba:	9a03      	ldr	r2, [sp, #12]
 809c6bc:	1a9b      	subs	r3, r3, r2
 809c6be:	42ab      	cmp	r3, r5
 809c6c0:	dcf2      	bgt.n	809c6a8 <_printf_i+0x1e8>
 809c6c2:	e7eb      	b.n	809c69c <_printf_i+0x1dc>
 809c6c4:	2500      	movs	r5, #0
 809c6c6:	f104 0919 	add.w	r9, r4, #25
 809c6ca:	e7f5      	b.n	809c6b8 <_printf_i+0x1f8>
 809c6cc:	2b00      	cmp	r3, #0
 809c6ce:	d1ac      	bne.n	809c62a <_printf_i+0x16a>
 809c6d0:	7803      	ldrb	r3, [r0, #0]
 809c6d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 809c6d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 809c6da:	e76c      	b.n	809c5b6 <_printf_i+0xf6>
 809c6dc:	080a5486 	.word	0x080a5486
 809c6e0:	080a5497 	.word	0x080a5497

0809c6e4 <siprintf>:
 809c6e4:	b40e      	push	{r1, r2, r3}
 809c6e6:	b500      	push	{lr}
 809c6e8:	b09c      	sub	sp, #112	; 0x70
 809c6ea:	ab1d      	add	r3, sp, #116	; 0x74
 809c6ec:	9002      	str	r0, [sp, #8]
 809c6ee:	9006      	str	r0, [sp, #24]
 809c6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 809c6f4:	4809      	ldr	r0, [pc, #36]	; (809c71c <siprintf+0x38>)
 809c6f6:	9107      	str	r1, [sp, #28]
 809c6f8:	9104      	str	r1, [sp, #16]
 809c6fa:	4909      	ldr	r1, [pc, #36]	; (809c720 <siprintf+0x3c>)
 809c6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 809c700:	9105      	str	r1, [sp, #20]
 809c702:	6800      	ldr	r0, [r0, #0]
 809c704:	9301      	str	r3, [sp, #4]
 809c706:	a902      	add	r1, sp, #8
 809c708:	f001 fa66 	bl	809dbd8 <_svfiprintf_r>
 809c70c:	9b02      	ldr	r3, [sp, #8]
 809c70e:	2200      	movs	r2, #0
 809c710:	701a      	strb	r2, [r3, #0]
 809c712:	b01c      	add	sp, #112	; 0x70
 809c714:	f85d eb04 	ldr.w	lr, [sp], #4
 809c718:	b003      	add	sp, #12
 809c71a:	4770      	bx	lr
 809c71c:	2000b378 	.word	0x2000b378
 809c720:	ffff0208 	.word	0xffff0208

0809c724 <quorem>:
 809c724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809c728:	6903      	ldr	r3, [r0, #16]
 809c72a:	690c      	ldr	r4, [r1, #16]
 809c72c:	42a3      	cmp	r3, r4
 809c72e:	4680      	mov	r8, r0
 809c730:	f2c0 8082 	blt.w	809c838 <quorem+0x114>
 809c734:	3c01      	subs	r4, #1
 809c736:	f101 0714 	add.w	r7, r1, #20
 809c73a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 809c73e:	f100 0614 	add.w	r6, r0, #20
 809c742:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 809c746:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 809c74a:	eb06 030c 	add.w	r3, r6, ip
 809c74e:	3501      	adds	r5, #1
 809c750:	eb07 090c 	add.w	r9, r7, ip
 809c754:	9301      	str	r3, [sp, #4]
 809c756:	fbb0 f5f5 	udiv	r5, r0, r5
 809c75a:	b395      	cbz	r5, 809c7c2 <quorem+0x9e>
 809c75c:	f04f 0a00 	mov.w	sl, #0
 809c760:	4638      	mov	r0, r7
 809c762:	46b6      	mov	lr, r6
 809c764:	46d3      	mov	fp, sl
 809c766:	f850 2b04 	ldr.w	r2, [r0], #4
 809c76a:	b293      	uxth	r3, r2
 809c76c:	fb05 a303 	mla	r3, r5, r3, sl
 809c770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 809c774:	b29b      	uxth	r3, r3
 809c776:	ebab 0303 	sub.w	r3, fp, r3
 809c77a:	0c12      	lsrs	r2, r2, #16
 809c77c:	f8de b000 	ldr.w	fp, [lr]
 809c780:	fb05 a202 	mla	r2, r5, r2, sl
 809c784:	fa13 f38b 	uxtah	r3, r3, fp
 809c788:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 809c78c:	fa1f fb82 	uxth.w	fp, r2
 809c790:	f8de 2000 	ldr.w	r2, [lr]
 809c794:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 809c798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 809c79c:	b29b      	uxth	r3, r3
 809c79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 809c7a2:	4581      	cmp	r9, r0
 809c7a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 809c7a8:	f84e 3b04 	str.w	r3, [lr], #4
 809c7ac:	d2db      	bcs.n	809c766 <quorem+0x42>
 809c7ae:	f856 300c 	ldr.w	r3, [r6, ip]
 809c7b2:	b933      	cbnz	r3, 809c7c2 <quorem+0x9e>
 809c7b4:	9b01      	ldr	r3, [sp, #4]
 809c7b6:	3b04      	subs	r3, #4
 809c7b8:	429e      	cmp	r6, r3
 809c7ba:	461a      	mov	r2, r3
 809c7bc:	d330      	bcc.n	809c820 <quorem+0xfc>
 809c7be:	f8c8 4010 	str.w	r4, [r8, #16]
 809c7c2:	4640      	mov	r0, r8
 809c7c4:	f001 f832 	bl	809d82c <__mcmp>
 809c7c8:	2800      	cmp	r0, #0
 809c7ca:	db25      	blt.n	809c818 <quorem+0xf4>
 809c7cc:	3501      	adds	r5, #1
 809c7ce:	4630      	mov	r0, r6
 809c7d0:	f04f 0c00 	mov.w	ip, #0
 809c7d4:	f857 2b04 	ldr.w	r2, [r7], #4
 809c7d8:	f8d0 e000 	ldr.w	lr, [r0]
 809c7dc:	b293      	uxth	r3, r2
 809c7de:	ebac 0303 	sub.w	r3, ip, r3
 809c7e2:	0c12      	lsrs	r2, r2, #16
 809c7e4:	fa13 f38e 	uxtah	r3, r3, lr
 809c7e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 809c7ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 809c7f0:	b29b      	uxth	r3, r3
 809c7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 809c7f6:	45b9      	cmp	r9, r7
 809c7f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 809c7fc:	f840 3b04 	str.w	r3, [r0], #4
 809c800:	d2e8      	bcs.n	809c7d4 <quorem+0xb0>
 809c802:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 809c806:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 809c80a:	b92a      	cbnz	r2, 809c818 <quorem+0xf4>
 809c80c:	3b04      	subs	r3, #4
 809c80e:	429e      	cmp	r6, r3
 809c810:	461a      	mov	r2, r3
 809c812:	d30b      	bcc.n	809c82c <quorem+0x108>
 809c814:	f8c8 4010 	str.w	r4, [r8, #16]
 809c818:	4628      	mov	r0, r5
 809c81a:	b003      	add	sp, #12
 809c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809c820:	6812      	ldr	r2, [r2, #0]
 809c822:	3b04      	subs	r3, #4
 809c824:	2a00      	cmp	r2, #0
 809c826:	d1ca      	bne.n	809c7be <quorem+0x9a>
 809c828:	3c01      	subs	r4, #1
 809c82a:	e7c5      	b.n	809c7b8 <quorem+0x94>
 809c82c:	6812      	ldr	r2, [r2, #0]
 809c82e:	3b04      	subs	r3, #4
 809c830:	2a00      	cmp	r2, #0
 809c832:	d1ef      	bne.n	809c814 <quorem+0xf0>
 809c834:	3c01      	subs	r4, #1
 809c836:	e7ea      	b.n	809c80e <quorem+0xea>
 809c838:	2000      	movs	r0, #0
 809c83a:	e7ee      	b.n	809c81a <quorem+0xf6>
 809c83c:	0000      	movs	r0, r0
	...

0809c840 <_dtoa_r>:
 809c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809c844:	ec57 6b10 	vmov	r6, r7, d0
 809c848:	b097      	sub	sp, #92	; 0x5c
 809c84a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 809c84c:	9106      	str	r1, [sp, #24]
 809c84e:	4604      	mov	r4, r0
 809c850:	920b      	str	r2, [sp, #44]	; 0x2c
 809c852:	9312      	str	r3, [sp, #72]	; 0x48
 809c854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 809c858:	e9cd 6700 	strd	r6, r7, [sp]
 809c85c:	b93d      	cbnz	r5, 809c86e <_dtoa_r+0x2e>
 809c85e:	2010      	movs	r0, #16
 809c860:	f000 fdb4 	bl	809d3cc <malloc>
 809c864:	6260      	str	r0, [r4, #36]	; 0x24
 809c866:	e9c0 5501 	strd	r5, r5, [r0, #4]
 809c86a:	6005      	str	r5, [r0, #0]
 809c86c:	60c5      	str	r5, [r0, #12]
 809c86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 809c870:	6819      	ldr	r1, [r3, #0]
 809c872:	b151      	cbz	r1, 809c88a <_dtoa_r+0x4a>
 809c874:	685a      	ldr	r2, [r3, #4]
 809c876:	604a      	str	r2, [r1, #4]
 809c878:	2301      	movs	r3, #1
 809c87a:	4093      	lsls	r3, r2
 809c87c:	608b      	str	r3, [r1, #8]
 809c87e:	4620      	mov	r0, r4
 809c880:	f000 fdf2 	bl	809d468 <_Bfree>
 809c884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 809c886:	2200      	movs	r2, #0
 809c888:	601a      	str	r2, [r3, #0]
 809c88a:	1e3b      	subs	r3, r7, #0
 809c88c:	bfbb      	ittet	lt
 809c88e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 809c892:	9301      	strlt	r3, [sp, #4]
 809c894:	2300      	movge	r3, #0
 809c896:	2201      	movlt	r2, #1
 809c898:	bfac      	ite	ge
 809c89a:	f8c8 3000 	strge.w	r3, [r8]
 809c89e:	f8c8 2000 	strlt.w	r2, [r8]
 809c8a2:	4baf      	ldr	r3, [pc, #700]	; (809cb60 <_dtoa_r+0x320>)
 809c8a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 809c8a8:	ea33 0308 	bics.w	r3, r3, r8
 809c8ac:	d114      	bne.n	809c8d8 <_dtoa_r+0x98>
 809c8ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 809c8b0:	f242 730f 	movw	r3, #9999	; 0x270f
 809c8b4:	6013      	str	r3, [r2, #0]
 809c8b6:	9b00      	ldr	r3, [sp, #0]
 809c8b8:	b923      	cbnz	r3, 809c8c4 <_dtoa_r+0x84>
 809c8ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 809c8be:	2800      	cmp	r0, #0
 809c8c0:	f000 8542 	beq.w	809d348 <_dtoa_r+0xb08>
 809c8c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 809c8c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 809cb74 <_dtoa_r+0x334>
 809c8ca:	2b00      	cmp	r3, #0
 809c8cc:	f000 8544 	beq.w	809d358 <_dtoa_r+0xb18>
 809c8d0:	f10b 0303 	add.w	r3, fp, #3
 809c8d4:	f000 bd3e 	b.w	809d354 <_dtoa_r+0xb14>
 809c8d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 809c8dc:	2200      	movs	r2, #0
 809c8de:	2300      	movs	r3, #0
 809c8e0:	4630      	mov	r0, r6
 809c8e2:	4639      	mov	r1, r7
 809c8e4:	f7e4 f830 	bl	8080948 <__aeabi_dcmpeq>
 809c8e8:	4681      	mov	r9, r0
 809c8ea:	b168      	cbz	r0, 809c908 <_dtoa_r+0xc8>
 809c8ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 809c8ee:	2301      	movs	r3, #1
 809c8f0:	6013      	str	r3, [r2, #0]
 809c8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 809c8f4:	2b00      	cmp	r3, #0
 809c8f6:	f000 8524 	beq.w	809d342 <_dtoa_r+0xb02>
 809c8fa:	4b9a      	ldr	r3, [pc, #616]	; (809cb64 <_dtoa_r+0x324>)
 809c8fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 809c8fe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 809c902:	6013      	str	r3, [r2, #0]
 809c904:	f000 bd28 	b.w	809d358 <_dtoa_r+0xb18>
 809c908:	aa14      	add	r2, sp, #80	; 0x50
 809c90a:	a915      	add	r1, sp, #84	; 0x54
 809c90c:	ec47 6b10 	vmov	d0, r6, r7
 809c910:	4620      	mov	r0, r4
 809c912:	f001 f802 	bl	809d91a <__d2b>
 809c916:	f3c8 550a 	ubfx	r5, r8, #20, #11
 809c91a:	9004      	str	r0, [sp, #16]
 809c91c:	2d00      	cmp	r5, #0
 809c91e:	d07c      	beq.n	809ca1a <_dtoa_r+0x1da>
 809c920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 809c924:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 809c928:	46b2      	mov	sl, r6
 809c92a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 809c92e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 809c932:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 809c936:	2200      	movs	r2, #0
 809c938:	4b8b      	ldr	r3, [pc, #556]	; (809cb68 <_dtoa_r+0x328>)
 809c93a:	4650      	mov	r0, sl
 809c93c:	4659      	mov	r1, fp
 809c93e:	f7e3 fbe3 	bl	8080108 <__aeabi_dsub>
 809c942:	a381      	add	r3, pc, #516	; (adr r3, 809cb48 <_dtoa_r+0x308>)
 809c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 809c948:	f7e3 fd96 	bl	8080478 <__aeabi_dmul>
 809c94c:	a380      	add	r3, pc, #512	; (adr r3, 809cb50 <_dtoa_r+0x310>)
 809c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 809c952:	f7e3 fbdb 	bl	808010c <__adddf3>
 809c956:	4606      	mov	r6, r0
 809c958:	4628      	mov	r0, r5
 809c95a:	460f      	mov	r7, r1
 809c95c:	f7e3 fd22 	bl	80803a4 <__aeabi_i2d>
 809c960:	a37d      	add	r3, pc, #500	; (adr r3, 809cb58 <_dtoa_r+0x318>)
 809c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 809c966:	f7e3 fd87 	bl	8080478 <__aeabi_dmul>
 809c96a:	4602      	mov	r2, r0
 809c96c:	460b      	mov	r3, r1
 809c96e:	4630      	mov	r0, r6
 809c970:	4639      	mov	r1, r7
 809c972:	f7e3 fbcb 	bl	808010c <__adddf3>
 809c976:	4606      	mov	r6, r0
 809c978:	460f      	mov	r7, r1
 809c97a:	f7e4 f82d 	bl	80809d8 <__aeabi_d2iz>
 809c97e:	2200      	movs	r2, #0
 809c980:	4682      	mov	sl, r0
 809c982:	2300      	movs	r3, #0
 809c984:	4630      	mov	r0, r6
 809c986:	4639      	mov	r1, r7
 809c988:	f7e3 ffe8 	bl	808095c <__aeabi_dcmplt>
 809c98c:	b148      	cbz	r0, 809c9a2 <_dtoa_r+0x162>
 809c98e:	4650      	mov	r0, sl
 809c990:	f7e3 fd08 	bl	80803a4 <__aeabi_i2d>
 809c994:	4632      	mov	r2, r6
 809c996:	463b      	mov	r3, r7
 809c998:	f7e3 ffd6 	bl	8080948 <__aeabi_dcmpeq>
 809c99c:	b908      	cbnz	r0, 809c9a2 <_dtoa_r+0x162>
 809c99e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 809c9a2:	f1ba 0f16 	cmp.w	sl, #22
 809c9a6:	d859      	bhi.n	809ca5c <_dtoa_r+0x21c>
 809c9a8:	4970      	ldr	r1, [pc, #448]	; (809cb6c <_dtoa_r+0x32c>)
 809c9aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 809c9ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 809c9b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 809c9b6:	f7e3 ffef 	bl	8080998 <__aeabi_dcmpgt>
 809c9ba:	2800      	cmp	r0, #0
 809c9bc:	d050      	beq.n	809ca60 <_dtoa_r+0x220>
 809c9be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 809c9c2:	2300      	movs	r3, #0
 809c9c4:	930f      	str	r3, [sp, #60]	; 0x3c
 809c9c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 809c9c8:	1b5d      	subs	r5, r3, r5
 809c9ca:	f1b5 0801 	subs.w	r8, r5, #1
 809c9ce:	bf49      	itett	mi
 809c9d0:	f1c5 0301 	rsbmi	r3, r5, #1
 809c9d4:	2300      	movpl	r3, #0
 809c9d6:	9305      	strmi	r3, [sp, #20]
 809c9d8:	f04f 0800 	movmi.w	r8, #0
 809c9dc:	bf58      	it	pl
 809c9de:	9305      	strpl	r3, [sp, #20]
 809c9e0:	f1ba 0f00 	cmp.w	sl, #0
 809c9e4:	db3e      	blt.n	809ca64 <_dtoa_r+0x224>
 809c9e6:	2300      	movs	r3, #0
 809c9e8:	44d0      	add	r8, sl
 809c9ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 809c9ee:	9307      	str	r3, [sp, #28]
 809c9f0:	9b06      	ldr	r3, [sp, #24]
 809c9f2:	2b09      	cmp	r3, #9
 809c9f4:	f200 8090 	bhi.w	809cb18 <_dtoa_r+0x2d8>
 809c9f8:	2b05      	cmp	r3, #5
 809c9fa:	bfc4      	itt	gt
 809c9fc:	3b04      	subgt	r3, #4
 809c9fe:	9306      	strgt	r3, [sp, #24]
 809ca00:	9b06      	ldr	r3, [sp, #24]
 809ca02:	f1a3 0302 	sub.w	r3, r3, #2
 809ca06:	bfcc      	ite	gt
 809ca08:	2500      	movgt	r5, #0
 809ca0a:	2501      	movle	r5, #1
 809ca0c:	2b03      	cmp	r3, #3
 809ca0e:	f200 808f 	bhi.w	809cb30 <_dtoa_r+0x2f0>
 809ca12:	e8df f003 	tbb	[pc, r3]
 809ca16:	7f7d      	.short	0x7f7d
 809ca18:	7131      	.short	0x7131
 809ca1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 809ca1e:	441d      	add	r5, r3
 809ca20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 809ca24:	2820      	cmp	r0, #32
 809ca26:	dd13      	ble.n	809ca50 <_dtoa_r+0x210>
 809ca28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 809ca2c:	9b00      	ldr	r3, [sp, #0]
 809ca2e:	fa08 f800 	lsl.w	r8, r8, r0
 809ca32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 809ca36:	fa23 f000 	lsr.w	r0, r3, r0
 809ca3a:	ea48 0000 	orr.w	r0, r8, r0
 809ca3e:	f7e3 fca1 	bl	8080384 <__aeabi_ui2d>
 809ca42:	2301      	movs	r3, #1
 809ca44:	4682      	mov	sl, r0
 809ca46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 809ca4a:	3d01      	subs	r5, #1
 809ca4c:	9313      	str	r3, [sp, #76]	; 0x4c
 809ca4e:	e772      	b.n	809c936 <_dtoa_r+0xf6>
 809ca50:	9b00      	ldr	r3, [sp, #0]
 809ca52:	f1c0 0020 	rsb	r0, r0, #32
 809ca56:	fa03 f000 	lsl.w	r0, r3, r0
 809ca5a:	e7f0      	b.n	809ca3e <_dtoa_r+0x1fe>
 809ca5c:	2301      	movs	r3, #1
 809ca5e:	e7b1      	b.n	809c9c4 <_dtoa_r+0x184>
 809ca60:	900f      	str	r0, [sp, #60]	; 0x3c
 809ca62:	e7b0      	b.n	809c9c6 <_dtoa_r+0x186>
 809ca64:	9b05      	ldr	r3, [sp, #20]
 809ca66:	eba3 030a 	sub.w	r3, r3, sl
 809ca6a:	9305      	str	r3, [sp, #20]
 809ca6c:	f1ca 0300 	rsb	r3, sl, #0
 809ca70:	9307      	str	r3, [sp, #28]
 809ca72:	2300      	movs	r3, #0
 809ca74:	930e      	str	r3, [sp, #56]	; 0x38
 809ca76:	e7bb      	b.n	809c9f0 <_dtoa_r+0x1b0>
 809ca78:	2301      	movs	r3, #1
 809ca7a:	930a      	str	r3, [sp, #40]	; 0x28
 809ca7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809ca7e:	2b00      	cmp	r3, #0
 809ca80:	dd59      	ble.n	809cb36 <_dtoa_r+0x2f6>
 809ca82:	9302      	str	r3, [sp, #8]
 809ca84:	4699      	mov	r9, r3
 809ca86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 809ca88:	2200      	movs	r2, #0
 809ca8a:	6072      	str	r2, [r6, #4]
 809ca8c:	2204      	movs	r2, #4
 809ca8e:	f102 0014 	add.w	r0, r2, #20
 809ca92:	4298      	cmp	r0, r3
 809ca94:	6871      	ldr	r1, [r6, #4]
 809ca96:	d953      	bls.n	809cb40 <_dtoa_r+0x300>
 809ca98:	4620      	mov	r0, r4
 809ca9a:	f000 fcb1 	bl	809d400 <_Balloc>
 809ca9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 809caa0:	6030      	str	r0, [r6, #0]
 809caa2:	f1b9 0f0e 	cmp.w	r9, #14
 809caa6:	f8d3 b000 	ldr.w	fp, [r3]
 809caaa:	f200 80e6 	bhi.w	809cc7a <_dtoa_r+0x43a>
 809caae:	2d00      	cmp	r5, #0
 809cab0:	f000 80e3 	beq.w	809cc7a <_dtoa_r+0x43a>
 809cab4:	ed9d 7b00 	vldr	d7, [sp]
 809cab8:	f1ba 0f00 	cmp.w	sl, #0
 809cabc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 809cac0:	dd74      	ble.n	809cbac <_dtoa_r+0x36c>
 809cac2:	4a2a      	ldr	r2, [pc, #168]	; (809cb6c <_dtoa_r+0x32c>)
 809cac4:	f00a 030f 	and.w	r3, sl, #15
 809cac8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 809cacc:	ed93 7b00 	vldr	d7, [r3]
 809cad0:	ea4f 162a 	mov.w	r6, sl, asr #4
 809cad4:	06f0      	lsls	r0, r6, #27
 809cad6:	ed8d 7b08 	vstr	d7, [sp, #32]
 809cada:	d565      	bpl.n	809cba8 <_dtoa_r+0x368>
 809cadc:	4b24      	ldr	r3, [pc, #144]	; (809cb70 <_dtoa_r+0x330>)
 809cade:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 809cae2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 809cae6:	f7e3 fdf1 	bl	80806cc <__aeabi_ddiv>
 809caea:	e9cd 0100 	strd	r0, r1, [sp]
 809caee:	f006 060f 	and.w	r6, r6, #15
 809caf2:	2503      	movs	r5, #3
 809caf4:	4f1e      	ldr	r7, [pc, #120]	; (809cb70 <_dtoa_r+0x330>)
 809caf6:	e04c      	b.n	809cb92 <_dtoa_r+0x352>
 809caf8:	2301      	movs	r3, #1
 809cafa:	930a      	str	r3, [sp, #40]	; 0x28
 809cafc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809cafe:	4453      	add	r3, sl
 809cb00:	f103 0901 	add.w	r9, r3, #1
 809cb04:	9302      	str	r3, [sp, #8]
 809cb06:	464b      	mov	r3, r9
 809cb08:	2b01      	cmp	r3, #1
 809cb0a:	bfb8      	it	lt
 809cb0c:	2301      	movlt	r3, #1
 809cb0e:	e7ba      	b.n	809ca86 <_dtoa_r+0x246>
 809cb10:	2300      	movs	r3, #0
 809cb12:	e7b2      	b.n	809ca7a <_dtoa_r+0x23a>
 809cb14:	2300      	movs	r3, #0
 809cb16:	e7f0      	b.n	809cafa <_dtoa_r+0x2ba>
 809cb18:	2501      	movs	r5, #1
 809cb1a:	2300      	movs	r3, #0
 809cb1c:	9306      	str	r3, [sp, #24]
 809cb1e:	950a      	str	r5, [sp, #40]	; 0x28
 809cb20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 809cb24:	9302      	str	r3, [sp, #8]
 809cb26:	4699      	mov	r9, r3
 809cb28:	2200      	movs	r2, #0
 809cb2a:	2312      	movs	r3, #18
 809cb2c:	920b      	str	r2, [sp, #44]	; 0x2c
 809cb2e:	e7aa      	b.n	809ca86 <_dtoa_r+0x246>
 809cb30:	2301      	movs	r3, #1
 809cb32:	930a      	str	r3, [sp, #40]	; 0x28
 809cb34:	e7f4      	b.n	809cb20 <_dtoa_r+0x2e0>
 809cb36:	2301      	movs	r3, #1
 809cb38:	9302      	str	r3, [sp, #8]
 809cb3a:	4699      	mov	r9, r3
 809cb3c:	461a      	mov	r2, r3
 809cb3e:	e7f5      	b.n	809cb2c <_dtoa_r+0x2ec>
 809cb40:	3101      	adds	r1, #1
 809cb42:	6071      	str	r1, [r6, #4]
 809cb44:	0052      	lsls	r2, r2, #1
 809cb46:	e7a2      	b.n	809ca8e <_dtoa_r+0x24e>
 809cb48:	636f4361 	.word	0x636f4361
 809cb4c:	3fd287a7 	.word	0x3fd287a7
 809cb50:	8b60c8b3 	.word	0x8b60c8b3
 809cb54:	3fc68a28 	.word	0x3fc68a28
 809cb58:	509f79fb 	.word	0x509f79fb
 809cb5c:	3fd34413 	.word	0x3fd34413
 809cb60:	7ff00000 	.word	0x7ff00000
 809cb64:	080a5485 	.word	0x080a5485
 809cb68:	3ff80000 	.word	0x3ff80000
 809cb6c:	080a54e8 	.word	0x080a54e8
 809cb70:	080a54c0 	.word	0x080a54c0
 809cb74:	080a54b1 	.word	0x080a54b1
 809cb78:	07f1      	lsls	r1, r6, #31
 809cb7a:	d508      	bpl.n	809cb8e <_dtoa_r+0x34e>
 809cb7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 809cb80:	e9d7 2300 	ldrd	r2, r3, [r7]
 809cb84:	f7e3 fc78 	bl	8080478 <__aeabi_dmul>
 809cb88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 809cb8c:	3501      	adds	r5, #1
 809cb8e:	1076      	asrs	r6, r6, #1
 809cb90:	3708      	adds	r7, #8
 809cb92:	2e00      	cmp	r6, #0
 809cb94:	d1f0      	bne.n	809cb78 <_dtoa_r+0x338>
 809cb96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 809cb9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cb9e:	f7e3 fd95 	bl	80806cc <__aeabi_ddiv>
 809cba2:	e9cd 0100 	strd	r0, r1, [sp]
 809cba6:	e01a      	b.n	809cbde <_dtoa_r+0x39e>
 809cba8:	2502      	movs	r5, #2
 809cbaa:	e7a3      	b.n	809caf4 <_dtoa_r+0x2b4>
 809cbac:	f000 80a0 	beq.w	809ccf0 <_dtoa_r+0x4b0>
 809cbb0:	f1ca 0600 	rsb	r6, sl, #0
 809cbb4:	4b9f      	ldr	r3, [pc, #636]	; (809ce34 <_dtoa_r+0x5f4>)
 809cbb6:	4fa0      	ldr	r7, [pc, #640]	; (809ce38 <_dtoa_r+0x5f8>)
 809cbb8:	f006 020f 	and.w	r2, r6, #15
 809cbbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 809cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 809cbc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 809cbc8:	f7e3 fc56 	bl	8080478 <__aeabi_dmul>
 809cbcc:	e9cd 0100 	strd	r0, r1, [sp]
 809cbd0:	1136      	asrs	r6, r6, #4
 809cbd2:	2300      	movs	r3, #0
 809cbd4:	2502      	movs	r5, #2
 809cbd6:	2e00      	cmp	r6, #0
 809cbd8:	d17f      	bne.n	809ccda <_dtoa_r+0x49a>
 809cbda:	2b00      	cmp	r3, #0
 809cbdc:	d1e1      	bne.n	809cba2 <_dtoa_r+0x362>
 809cbde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 809cbe0:	2b00      	cmp	r3, #0
 809cbe2:	f000 8087 	beq.w	809ccf4 <_dtoa_r+0x4b4>
 809cbe6:	e9dd 6700 	ldrd	r6, r7, [sp]
 809cbea:	2200      	movs	r2, #0
 809cbec:	4b93      	ldr	r3, [pc, #588]	; (809ce3c <_dtoa_r+0x5fc>)
 809cbee:	4630      	mov	r0, r6
 809cbf0:	4639      	mov	r1, r7
 809cbf2:	f7e3 feb3 	bl	808095c <__aeabi_dcmplt>
 809cbf6:	2800      	cmp	r0, #0
 809cbf8:	d07c      	beq.n	809ccf4 <_dtoa_r+0x4b4>
 809cbfa:	f1b9 0f00 	cmp.w	r9, #0
 809cbfe:	d079      	beq.n	809ccf4 <_dtoa_r+0x4b4>
 809cc00:	9b02      	ldr	r3, [sp, #8]
 809cc02:	2b00      	cmp	r3, #0
 809cc04:	dd35      	ble.n	809cc72 <_dtoa_r+0x432>
 809cc06:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 809cc0a:	9308      	str	r3, [sp, #32]
 809cc0c:	4639      	mov	r1, r7
 809cc0e:	2200      	movs	r2, #0
 809cc10:	4b8b      	ldr	r3, [pc, #556]	; (809ce40 <_dtoa_r+0x600>)
 809cc12:	4630      	mov	r0, r6
 809cc14:	f7e3 fc30 	bl	8080478 <__aeabi_dmul>
 809cc18:	e9cd 0100 	strd	r0, r1, [sp]
 809cc1c:	9f02      	ldr	r7, [sp, #8]
 809cc1e:	3501      	adds	r5, #1
 809cc20:	4628      	mov	r0, r5
 809cc22:	f7e3 fbbf 	bl	80803a4 <__aeabi_i2d>
 809cc26:	e9dd 2300 	ldrd	r2, r3, [sp]
 809cc2a:	f7e3 fc25 	bl	8080478 <__aeabi_dmul>
 809cc2e:	2200      	movs	r2, #0
 809cc30:	4b84      	ldr	r3, [pc, #528]	; (809ce44 <_dtoa_r+0x604>)
 809cc32:	f7e3 fa6b 	bl	808010c <__adddf3>
 809cc36:	4605      	mov	r5, r0
 809cc38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 809cc3c:	2f00      	cmp	r7, #0
 809cc3e:	d15d      	bne.n	809ccfc <_dtoa_r+0x4bc>
 809cc40:	2200      	movs	r2, #0
 809cc42:	4b81      	ldr	r3, [pc, #516]	; (809ce48 <_dtoa_r+0x608>)
 809cc44:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cc48:	f7e3 fa5e 	bl	8080108 <__aeabi_dsub>
 809cc4c:	462a      	mov	r2, r5
 809cc4e:	4633      	mov	r3, r6
 809cc50:	e9cd 0100 	strd	r0, r1, [sp]
 809cc54:	f7e3 fea0 	bl	8080998 <__aeabi_dcmpgt>
 809cc58:	2800      	cmp	r0, #0
 809cc5a:	f040 8288 	bne.w	809d16e <_dtoa_r+0x92e>
 809cc5e:	462a      	mov	r2, r5
 809cc60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 809cc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cc68:	f7e3 fe78 	bl	808095c <__aeabi_dcmplt>
 809cc6c:	2800      	cmp	r0, #0
 809cc6e:	f040 827c 	bne.w	809d16a <_dtoa_r+0x92a>
 809cc72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 809cc76:	e9cd 2300 	strd	r2, r3, [sp]
 809cc7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 809cc7c:	2b00      	cmp	r3, #0
 809cc7e:	f2c0 8150 	blt.w	809cf22 <_dtoa_r+0x6e2>
 809cc82:	f1ba 0f0e 	cmp.w	sl, #14
 809cc86:	f300 814c 	bgt.w	809cf22 <_dtoa_r+0x6e2>
 809cc8a:	4b6a      	ldr	r3, [pc, #424]	; (809ce34 <_dtoa_r+0x5f4>)
 809cc8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 809cc90:	ed93 7b00 	vldr	d7, [r3]
 809cc94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809cc96:	2b00      	cmp	r3, #0
 809cc98:	ed8d 7b02 	vstr	d7, [sp, #8]
 809cc9c:	f280 80d8 	bge.w	809ce50 <_dtoa_r+0x610>
 809cca0:	f1b9 0f00 	cmp.w	r9, #0
 809cca4:	f300 80d4 	bgt.w	809ce50 <_dtoa_r+0x610>
 809cca8:	f040 825e 	bne.w	809d168 <_dtoa_r+0x928>
 809ccac:	2200      	movs	r2, #0
 809ccae:	4b66      	ldr	r3, [pc, #408]	; (809ce48 <_dtoa_r+0x608>)
 809ccb0:	ec51 0b17 	vmov	r0, r1, d7
 809ccb4:	f7e3 fbe0 	bl	8080478 <__aeabi_dmul>
 809ccb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 809ccbc:	f7e3 fe62 	bl	8080984 <__aeabi_dcmpge>
 809ccc0:	464f      	mov	r7, r9
 809ccc2:	464e      	mov	r6, r9
 809ccc4:	2800      	cmp	r0, #0
 809ccc6:	f040 8234 	bne.w	809d132 <_dtoa_r+0x8f2>
 809ccca:	2331      	movs	r3, #49	; 0x31
 809cccc:	f10b 0501 	add.w	r5, fp, #1
 809ccd0:	f88b 3000 	strb.w	r3, [fp]
 809ccd4:	f10a 0a01 	add.w	sl, sl, #1
 809ccd8:	e22f      	b.n	809d13a <_dtoa_r+0x8fa>
 809ccda:	07f2      	lsls	r2, r6, #31
 809ccdc:	d505      	bpl.n	809ccea <_dtoa_r+0x4aa>
 809ccde:	e9d7 2300 	ldrd	r2, r3, [r7]
 809cce2:	f7e3 fbc9 	bl	8080478 <__aeabi_dmul>
 809cce6:	3501      	adds	r5, #1
 809cce8:	2301      	movs	r3, #1
 809ccea:	1076      	asrs	r6, r6, #1
 809ccec:	3708      	adds	r7, #8
 809ccee:	e772      	b.n	809cbd6 <_dtoa_r+0x396>
 809ccf0:	2502      	movs	r5, #2
 809ccf2:	e774      	b.n	809cbde <_dtoa_r+0x39e>
 809ccf4:	f8cd a020 	str.w	sl, [sp, #32]
 809ccf8:	464f      	mov	r7, r9
 809ccfa:	e791      	b.n	809cc20 <_dtoa_r+0x3e0>
 809ccfc:	4b4d      	ldr	r3, [pc, #308]	; (809ce34 <_dtoa_r+0x5f4>)
 809ccfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 809cd02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 809cd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809cd08:	2b00      	cmp	r3, #0
 809cd0a:	d047      	beq.n	809cd9c <_dtoa_r+0x55c>
 809cd0c:	4602      	mov	r2, r0
 809cd0e:	460b      	mov	r3, r1
 809cd10:	2000      	movs	r0, #0
 809cd12:	494e      	ldr	r1, [pc, #312]	; (809ce4c <_dtoa_r+0x60c>)
 809cd14:	f7e3 fcda 	bl	80806cc <__aeabi_ddiv>
 809cd18:	462a      	mov	r2, r5
 809cd1a:	4633      	mov	r3, r6
 809cd1c:	f7e3 f9f4 	bl	8080108 <__aeabi_dsub>
 809cd20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 809cd24:	465d      	mov	r5, fp
 809cd26:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cd2a:	f7e3 fe55 	bl	80809d8 <__aeabi_d2iz>
 809cd2e:	4606      	mov	r6, r0
 809cd30:	f7e3 fb38 	bl	80803a4 <__aeabi_i2d>
 809cd34:	4602      	mov	r2, r0
 809cd36:	460b      	mov	r3, r1
 809cd38:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cd3c:	f7e3 f9e4 	bl	8080108 <__aeabi_dsub>
 809cd40:	3630      	adds	r6, #48	; 0x30
 809cd42:	f805 6b01 	strb.w	r6, [r5], #1
 809cd46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 809cd4a:	e9cd 0100 	strd	r0, r1, [sp]
 809cd4e:	f7e3 fe05 	bl	808095c <__aeabi_dcmplt>
 809cd52:	2800      	cmp	r0, #0
 809cd54:	d163      	bne.n	809ce1e <_dtoa_r+0x5de>
 809cd56:	e9dd 2300 	ldrd	r2, r3, [sp]
 809cd5a:	2000      	movs	r0, #0
 809cd5c:	4937      	ldr	r1, [pc, #220]	; (809ce3c <_dtoa_r+0x5fc>)
 809cd5e:	f7e3 f9d3 	bl	8080108 <__aeabi_dsub>
 809cd62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 809cd66:	f7e3 fdf9 	bl	808095c <__aeabi_dcmplt>
 809cd6a:	2800      	cmp	r0, #0
 809cd6c:	f040 80b7 	bne.w	809cede <_dtoa_r+0x69e>
 809cd70:	eba5 030b 	sub.w	r3, r5, fp
 809cd74:	429f      	cmp	r7, r3
 809cd76:	f77f af7c 	ble.w	809cc72 <_dtoa_r+0x432>
 809cd7a:	2200      	movs	r2, #0
 809cd7c:	4b30      	ldr	r3, [pc, #192]	; (809ce40 <_dtoa_r+0x600>)
 809cd7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 809cd82:	f7e3 fb79 	bl	8080478 <__aeabi_dmul>
 809cd86:	2200      	movs	r2, #0
 809cd88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 809cd8c:	4b2c      	ldr	r3, [pc, #176]	; (809ce40 <_dtoa_r+0x600>)
 809cd8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cd92:	f7e3 fb71 	bl	8080478 <__aeabi_dmul>
 809cd96:	e9cd 0100 	strd	r0, r1, [sp]
 809cd9a:	e7c4      	b.n	809cd26 <_dtoa_r+0x4e6>
 809cd9c:	462a      	mov	r2, r5
 809cd9e:	4633      	mov	r3, r6
 809cda0:	f7e3 fb6a 	bl	8080478 <__aeabi_dmul>
 809cda4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 809cda8:	eb0b 0507 	add.w	r5, fp, r7
 809cdac:	465e      	mov	r6, fp
 809cdae:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cdb2:	f7e3 fe11 	bl	80809d8 <__aeabi_d2iz>
 809cdb6:	4607      	mov	r7, r0
 809cdb8:	f7e3 faf4 	bl	80803a4 <__aeabi_i2d>
 809cdbc:	3730      	adds	r7, #48	; 0x30
 809cdbe:	4602      	mov	r2, r0
 809cdc0:	460b      	mov	r3, r1
 809cdc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cdc6:	f7e3 f99f 	bl	8080108 <__aeabi_dsub>
 809cdca:	f806 7b01 	strb.w	r7, [r6], #1
 809cdce:	42ae      	cmp	r6, r5
 809cdd0:	e9cd 0100 	strd	r0, r1, [sp]
 809cdd4:	f04f 0200 	mov.w	r2, #0
 809cdd8:	d126      	bne.n	809ce28 <_dtoa_r+0x5e8>
 809cdda:	4b1c      	ldr	r3, [pc, #112]	; (809ce4c <_dtoa_r+0x60c>)
 809cddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 809cde0:	f7e3 f994 	bl	808010c <__adddf3>
 809cde4:	4602      	mov	r2, r0
 809cde6:	460b      	mov	r3, r1
 809cde8:	e9dd 0100 	ldrd	r0, r1, [sp]
 809cdec:	f7e3 fdd4 	bl	8080998 <__aeabi_dcmpgt>
 809cdf0:	2800      	cmp	r0, #0
 809cdf2:	d174      	bne.n	809cede <_dtoa_r+0x69e>
 809cdf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 809cdf8:	2000      	movs	r0, #0
 809cdfa:	4914      	ldr	r1, [pc, #80]	; (809ce4c <_dtoa_r+0x60c>)
 809cdfc:	f7e3 f984 	bl	8080108 <__aeabi_dsub>
 809ce00:	4602      	mov	r2, r0
 809ce02:	460b      	mov	r3, r1
 809ce04:	e9dd 0100 	ldrd	r0, r1, [sp]
 809ce08:	f7e3 fda8 	bl	808095c <__aeabi_dcmplt>
 809ce0c:	2800      	cmp	r0, #0
 809ce0e:	f43f af30 	beq.w	809cc72 <_dtoa_r+0x432>
 809ce12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 809ce16:	2b30      	cmp	r3, #48	; 0x30
 809ce18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 809ce1c:	d002      	beq.n	809ce24 <_dtoa_r+0x5e4>
 809ce1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 809ce22:	e04a      	b.n	809ceba <_dtoa_r+0x67a>
 809ce24:	4615      	mov	r5, r2
 809ce26:	e7f4      	b.n	809ce12 <_dtoa_r+0x5d2>
 809ce28:	4b05      	ldr	r3, [pc, #20]	; (809ce40 <_dtoa_r+0x600>)
 809ce2a:	f7e3 fb25 	bl	8080478 <__aeabi_dmul>
 809ce2e:	e9cd 0100 	strd	r0, r1, [sp]
 809ce32:	e7bc      	b.n	809cdae <_dtoa_r+0x56e>
 809ce34:	080a54e8 	.word	0x080a54e8
 809ce38:	080a54c0 	.word	0x080a54c0
 809ce3c:	3ff00000 	.word	0x3ff00000
 809ce40:	40240000 	.word	0x40240000
 809ce44:	401c0000 	.word	0x401c0000
 809ce48:	40140000 	.word	0x40140000
 809ce4c:	3fe00000 	.word	0x3fe00000
 809ce50:	e9dd 6700 	ldrd	r6, r7, [sp]
 809ce54:	465d      	mov	r5, fp
 809ce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 809ce5a:	4630      	mov	r0, r6
 809ce5c:	4639      	mov	r1, r7
 809ce5e:	f7e3 fc35 	bl	80806cc <__aeabi_ddiv>
 809ce62:	f7e3 fdb9 	bl	80809d8 <__aeabi_d2iz>
 809ce66:	4680      	mov	r8, r0
 809ce68:	f7e3 fa9c 	bl	80803a4 <__aeabi_i2d>
 809ce6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 809ce70:	f7e3 fb02 	bl	8080478 <__aeabi_dmul>
 809ce74:	4602      	mov	r2, r0
 809ce76:	460b      	mov	r3, r1
 809ce78:	4630      	mov	r0, r6
 809ce7a:	4639      	mov	r1, r7
 809ce7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 809ce80:	f7e3 f942 	bl	8080108 <__aeabi_dsub>
 809ce84:	f805 6b01 	strb.w	r6, [r5], #1
 809ce88:	eba5 060b 	sub.w	r6, r5, fp
 809ce8c:	45b1      	cmp	r9, r6
 809ce8e:	4602      	mov	r2, r0
 809ce90:	460b      	mov	r3, r1
 809ce92:	d139      	bne.n	809cf08 <_dtoa_r+0x6c8>
 809ce94:	f7e3 f93a 	bl	808010c <__adddf3>
 809ce98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 809ce9c:	4606      	mov	r6, r0
 809ce9e:	460f      	mov	r7, r1
 809cea0:	f7e3 fd7a 	bl	8080998 <__aeabi_dcmpgt>
 809cea4:	b9c8      	cbnz	r0, 809ceda <_dtoa_r+0x69a>
 809cea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 809ceaa:	4630      	mov	r0, r6
 809ceac:	4639      	mov	r1, r7
 809ceae:	f7e3 fd4b 	bl	8080948 <__aeabi_dcmpeq>
 809ceb2:	b110      	cbz	r0, 809ceba <_dtoa_r+0x67a>
 809ceb4:	f018 0f01 	tst.w	r8, #1
 809ceb8:	d10f      	bne.n	809ceda <_dtoa_r+0x69a>
 809ceba:	9904      	ldr	r1, [sp, #16]
 809cebc:	4620      	mov	r0, r4
 809cebe:	f000 fad3 	bl	809d468 <_Bfree>
 809cec2:	2300      	movs	r3, #0
 809cec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 809cec6:	702b      	strb	r3, [r5, #0]
 809cec8:	f10a 0301 	add.w	r3, sl, #1
 809cecc:	6013      	str	r3, [r2, #0]
 809cece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 809ced0:	2b00      	cmp	r3, #0
 809ced2:	f000 8241 	beq.w	809d358 <_dtoa_r+0xb18>
 809ced6:	601d      	str	r5, [r3, #0]
 809ced8:	e23e      	b.n	809d358 <_dtoa_r+0xb18>
 809ceda:	f8cd a020 	str.w	sl, [sp, #32]
 809cede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 809cee2:	2a39      	cmp	r2, #57	; 0x39
 809cee4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 809cee8:	d108      	bne.n	809cefc <_dtoa_r+0x6bc>
 809ceea:	459b      	cmp	fp, r3
 809ceec:	d10a      	bne.n	809cf04 <_dtoa_r+0x6c4>
 809ceee:	9b08      	ldr	r3, [sp, #32]
 809cef0:	3301      	adds	r3, #1
 809cef2:	9308      	str	r3, [sp, #32]
 809cef4:	2330      	movs	r3, #48	; 0x30
 809cef6:	f88b 3000 	strb.w	r3, [fp]
 809cefa:	465b      	mov	r3, fp
 809cefc:	781a      	ldrb	r2, [r3, #0]
 809cefe:	3201      	adds	r2, #1
 809cf00:	701a      	strb	r2, [r3, #0]
 809cf02:	e78c      	b.n	809ce1e <_dtoa_r+0x5de>
 809cf04:	461d      	mov	r5, r3
 809cf06:	e7ea      	b.n	809cede <_dtoa_r+0x69e>
 809cf08:	2200      	movs	r2, #0
 809cf0a:	4b9b      	ldr	r3, [pc, #620]	; (809d178 <_dtoa_r+0x938>)
 809cf0c:	f7e3 fab4 	bl	8080478 <__aeabi_dmul>
 809cf10:	2200      	movs	r2, #0
 809cf12:	2300      	movs	r3, #0
 809cf14:	4606      	mov	r6, r0
 809cf16:	460f      	mov	r7, r1
 809cf18:	f7e3 fd16 	bl	8080948 <__aeabi_dcmpeq>
 809cf1c:	2800      	cmp	r0, #0
 809cf1e:	d09a      	beq.n	809ce56 <_dtoa_r+0x616>
 809cf20:	e7cb      	b.n	809ceba <_dtoa_r+0x67a>
 809cf22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 809cf24:	2a00      	cmp	r2, #0
 809cf26:	f000 808b 	beq.w	809d040 <_dtoa_r+0x800>
 809cf2a:	9a06      	ldr	r2, [sp, #24]
 809cf2c:	2a01      	cmp	r2, #1
 809cf2e:	dc6e      	bgt.n	809d00e <_dtoa_r+0x7ce>
 809cf30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 809cf32:	2a00      	cmp	r2, #0
 809cf34:	d067      	beq.n	809d006 <_dtoa_r+0x7c6>
 809cf36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 809cf3a:	9f07      	ldr	r7, [sp, #28]
 809cf3c:	9d05      	ldr	r5, [sp, #20]
 809cf3e:	9a05      	ldr	r2, [sp, #20]
 809cf40:	2101      	movs	r1, #1
 809cf42:	441a      	add	r2, r3
 809cf44:	4620      	mov	r0, r4
 809cf46:	9205      	str	r2, [sp, #20]
 809cf48:	4498      	add	r8, r3
 809cf4a:	f000 fb2d 	bl	809d5a8 <__i2b>
 809cf4e:	4606      	mov	r6, r0
 809cf50:	2d00      	cmp	r5, #0
 809cf52:	dd0c      	ble.n	809cf6e <_dtoa_r+0x72e>
 809cf54:	f1b8 0f00 	cmp.w	r8, #0
 809cf58:	dd09      	ble.n	809cf6e <_dtoa_r+0x72e>
 809cf5a:	4545      	cmp	r5, r8
 809cf5c:	9a05      	ldr	r2, [sp, #20]
 809cf5e:	462b      	mov	r3, r5
 809cf60:	bfa8      	it	ge
 809cf62:	4643      	movge	r3, r8
 809cf64:	1ad2      	subs	r2, r2, r3
 809cf66:	9205      	str	r2, [sp, #20]
 809cf68:	1aed      	subs	r5, r5, r3
 809cf6a:	eba8 0803 	sub.w	r8, r8, r3
 809cf6e:	9b07      	ldr	r3, [sp, #28]
 809cf70:	b1eb      	cbz	r3, 809cfae <_dtoa_r+0x76e>
 809cf72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809cf74:	2b00      	cmp	r3, #0
 809cf76:	d067      	beq.n	809d048 <_dtoa_r+0x808>
 809cf78:	b18f      	cbz	r7, 809cf9e <_dtoa_r+0x75e>
 809cf7a:	4631      	mov	r1, r6
 809cf7c:	463a      	mov	r2, r7
 809cf7e:	4620      	mov	r0, r4
 809cf80:	f000 fbb2 	bl	809d6e8 <__pow5mult>
 809cf84:	9a04      	ldr	r2, [sp, #16]
 809cf86:	4601      	mov	r1, r0
 809cf88:	4606      	mov	r6, r0
 809cf8a:	4620      	mov	r0, r4
 809cf8c:	f000 fb15 	bl	809d5ba <__multiply>
 809cf90:	9904      	ldr	r1, [sp, #16]
 809cf92:	9008      	str	r0, [sp, #32]
 809cf94:	4620      	mov	r0, r4
 809cf96:	f000 fa67 	bl	809d468 <_Bfree>
 809cf9a:	9b08      	ldr	r3, [sp, #32]
 809cf9c:	9304      	str	r3, [sp, #16]
 809cf9e:	9b07      	ldr	r3, [sp, #28]
 809cfa0:	1bda      	subs	r2, r3, r7
 809cfa2:	d004      	beq.n	809cfae <_dtoa_r+0x76e>
 809cfa4:	9904      	ldr	r1, [sp, #16]
 809cfa6:	4620      	mov	r0, r4
 809cfa8:	f000 fb9e 	bl	809d6e8 <__pow5mult>
 809cfac:	9004      	str	r0, [sp, #16]
 809cfae:	2101      	movs	r1, #1
 809cfb0:	4620      	mov	r0, r4
 809cfb2:	f000 faf9 	bl	809d5a8 <__i2b>
 809cfb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 809cfb8:	4607      	mov	r7, r0
 809cfba:	2b00      	cmp	r3, #0
 809cfbc:	f000 81d0 	beq.w	809d360 <_dtoa_r+0xb20>
 809cfc0:	461a      	mov	r2, r3
 809cfc2:	4601      	mov	r1, r0
 809cfc4:	4620      	mov	r0, r4
 809cfc6:	f000 fb8f 	bl	809d6e8 <__pow5mult>
 809cfca:	9b06      	ldr	r3, [sp, #24]
 809cfcc:	2b01      	cmp	r3, #1
 809cfce:	4607      	mov	r7, r0
 809cfd0:	dc40      	bgt.n	809d054 <_dtoa_r+0x814>
 809cfd2:	9b00      	ldr	r3, [sp, #0]
 809cfd4:	2b00      	cmp	r3, #0
 809cfd6:	d139      	bne.n	809d04c <_dtoa_r+0x80c>
 809cfd8:	9b01      	ldr	r3, [sp, #4]
 809cfda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 809cfde:	2b00      	cmp	r3, #0
 809cfe0:	d136      	bne.n	809d050 <_dtoa_r+0x810>
 809cfe2:	9b01      	ldr	r3, [sp, #4]
 809cfe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 809cfe8:	0d1b      	lsrs	r3, r3, #20
 809cfea:	051b      	lsls	r3, r3, #20
 809cfec:	b12b      	cbz	r3, 809cffa <_dtoa_r+0x7ba>
 809cfee:	9b05      	ldr	r3, [sp, #20]
 809cff0:	3301      	adds	r3, #1
 809cff2:	9305      	str	r3, [sp, #20]
 809cff4:	f108 0801 	add.w	r8, r8, #1
 809cff8:	2301      	movs	r3, #1
 809cffa:	9307      	str	r3, [sp, #28]
 809cffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 809cffe:	2b00      	cmp	r3, #0
 809d000:	d12a      	bne.n	809d058 <_dtoa_r+0x818>
 809d002:	2001      	movs	r0, #1
 809d004:	e030      	b.n	809d068 <_dtoa_r+0x828>
 809d006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 809d008:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 809d00c:	e795      	b.n	809cf3a <_dtoa_r+0x6fa>
 809d00e:	9b07      	ldr	r3, [sp, #28]
 809d010:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 809d014:	42bb      	cmp	r3, r7
 809d016:	bfbf      	itttt	lt
 809d018:	9b07      	ldrlt	r3, [sp, #28]
 809d01a:	9707      	strlt	r7, [sp, #28]
 809d01c:	1afa      	sublt	r2, r7, r3
 809d01e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 809d020:	bfbb      	ittet	lt
 809d022:	189b      	addlt	r3, r3, r2
 809d024:	930e      	strlt	r3, [sp, #56]	; 0x38
 809d026:	1bdf      	subge	r7, r3, r7
 809d028:	2700      	movlt	r7, #0
 809d02a:	f1b9 0f00 	cmp.w	r9, #0
 809d02e:	bfb5      	itete	lt
 809d030:	9b05      	ldrlt	r3, [sp, #20]
 809d032:	9d05      	ldrge	r5, [sp, #20]
 809d034:	eba3 0509 	sublt.w	r5, r3, r9
 809d038:	464b      	movge	r3, r9
 809d03a:	bfb8      	it	lt
 809d03c:	2300      	movlt	r3, #0
 809d03e:	e77e      	b.n	809cf3e <_dtoa_r+0x6fe>
 809d040:	9f07      	ldr	r7, [sp, #28]
 809d042:	9d05      	ldr	r5, [sp, #20]
 809d044:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 809d046:	e783      	b.n	809cf50 <_dtoa_r+0x710>
 809d048:	9a07      	ldr	r2, [sp, #28]
 809d04a:	e7ab      	b.n	809cfa4 <_dtoa_r+0x764>
 809d04c:	2300      	movs	r3, #0
 809d04e:	e7d4      	b.n	809cffa <_dtoa_r+0x7ba>
 809d050:	9b00      	ldr	r3, [sp, #0]
 809d052:	e7d2      	b.n	809cffa <_dtoa_r+0x7ba>
 809d054:	2300      	movs	r3, #0
 809d056:	9307      	str	r3, [sp, #28]
 809d058:	693b      	ldr	r3, [r7, #16]
 809d05a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 809d05e:	6918      	ldr	r0, [r3, #16]
 809d060:	f000 fa54 	bl	809d50c <__hi0bits>
 809d064:	f1c0 0020 	rsb	r0, r0, #32
 809d068:	4440      	add	r0, r8
 809d06a:	f010 001f 	ands.w	r0, r0, #31
 809d06e:	d047      	beq.n	809d100 <_dtoa_r+0x8c0>
 809d070:	f1c0 0320 	rsb	r3, r0, #32
 809d074:	2b04      	cmp	r3, #4
 809d076:	dd3b      	ble.n	809d0f0 <_dtoa_r+0x8b0>
 809d078:	9b05      	ldr	r3, [sp, #20]
 809d07a:	f1c0 001c 	rsb	r0, r0, #28
 809d07e:	4403      	add	r3, r0
 809d080:	9305      	str	r3, [sp, #20]
 809d082:	4405      	add	r5, r0
 809d084:	4480      	add	r8, r0
 809d086:	9b05      	ldr	r3, [sp, #20]
 809d088:	2b00      	cmp	r3, #0
 809d08a:	dd05      	ble.n	809d098 <_dtoa_r+0x858>
 809d08c:	461a      	mov	r2, r3
 809d08e:	9904      	ldr	r1, [sp, #16]
 809d090:	4620      	mov	r0, r4
 809d092:	f000 fb77 	bl	809d784 <__lshift>
 809d096:	9004      	str	r0, [sp, #16]
 809d098:	f1b8 0f00 	cmp.w	r8, #0
 809d09c:	dd05      	ble.n	809d0aa <_dtoa_r+0x86a>
 809d09e:	4639      	mov	r1, r7
 809d0a0:	4642      	mov	r2, r8
 809d0a2:	4620      	mov	r0, r4
 809d0a4:	f000 fb6e 	bl	809d784 <__lshift>
 809d0a8:	4607      	mov	r7, r0
 809d0aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 809d0ac:	b353      	cbz	r3, 809d104 <_dtoa_r+0x8c4>
 809d0ae:	4639      	mov	r1, r7
 809d0b0:	9804      	ldr	r0, [sp, #16]
 809d0b2:	f000 fbbb 	bl	809d82c <__mcmp>
 809d0b6:	2800      	cmp	r0, #0
 809d0b8:	da24      	bge.n	809d104 <_dtoa_r+0x8c4>
 809d0ba:	2300      	movs	r3, #0
 809d0bc:	220a      	movs	r2, #10
 809d0be:	9904      	ldr	r1, [sp, #16]
 809d0c0:	4620      	mov	r0, r4
 809d0c2:	f000 f9e8 	bl	809d496 <__multadd>
 809d0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809d0c8:	9004      	str	r0, [sp, #16]
 809d0ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 809d0ce:	2b00      	cmp	r3, #0
 809d0d0:	f000 814d 	beq.w	809d36e <_dtoa_r+0xb2e>
 809d0d4:	2300      	movs	r3, #0
 809d0d6:	4631      	mov	r1, r6
 809d0d8:	220a      	movs	r2, #10
 809d0da:	4620      	mov	r0, r4
 809d0dc:	f000 f9db 	bl	809d496 <__multadd>
 809d0e0:	9b02      	ldr	r3, [sp, #8]
 809d0e2:	2b00      	cmp	r3, #0
 809d0e4:	4606      	mov	r6, r0
 809d0e6:	dc4f      	bgt.n	809d188 <_dtoa_r+0x948>
 809d0e8:	9b06      	ldr	r3, [sp, #24]
 809d0ea:	2b02      	cmp	r3, #2
 809d0ec:	dd4c      	ble.n	809d188 <_dtoa_r+0x948>
 809d0ee:	e011      	b.n	809d114 <_dtoa_r+0x8d4>
 809d0f0:	d0c9      	beq.n	809d086 <_dtoa_r+0x846>
 809d0f2:	9a05      	ldr	r2, [sp, #20]
 809d0f4:	331c      	adds	r3, #28
 809d0f6:	441a      	add	r2, r3
 809d0f8:	9205      	str	r2, [sp, #20]
 809d0fa:	441d      	add	r5, r3
 809d0fc:	4498      	add	r8, r3
 809d0fe:	e7c2      	b.n	809d086 <_dtoa_r+0x846>
 809d100:	4603      	mov	r3, r0
 809d102:	e7f6      	b.n	809d0f2 <_dtoa_r+0x8b2>
 809d104:	f1b9 0f00 	cmp.w	r9, #0
 809d108:	dc38      	bgt.n	809d17c <_dtoa_r+0x93c>
 809d10a:	9b06      	ldr	r3, [sp, #24]
 809d10c:	2b02      	cmp	r3, #2
 809d10e:	dd35      	ble.n	809d17c <_dtoa_r+0x93c>
 809d110:	f8cd 9008 	str.w	r9, [sp, #8]
 809d114:	9b02      	ldr	r3, [sp, #8]
 809d116:	b963      	cbnz	r3, 809d132 <_dtoa_r+0x8f2>
 809d118:	4639      	mov	r1, r7
 809d11a:	2205      	movs	r2, #5
 809d11c:	4620      	mov	r0, r4
 809d11e:	f000 f9ba 	bl	809d496 <__multadd>
 809d122:	4601      	mov	r1, r0
 809d124:	4607      	mov	r7, r0
 809d126:	9804      	ldr	r0, [sp, #16]
 809d128:	f000 fb80 	bl	809d82c <__mcmp>
 809d12c:	2800      	cmp	r0, #0
 809d12e:	f73f adcc 	bgt.w	809ccca <_dtoa_r+0x48a>
 809d132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809d134:	465d      	mov	r5, fp
 809d136:	ea6f 0a03 	mvn.w	sl, r3
 809d13a:	f04f 0900 	mov.w	r9, #0
 809d13e:	4639      	mov	r1, r7
 809d140:	4620      	mov	r0, r4
 809d142:	f000 f991 	bl	809d468 <_Bfree>
 809d146:	2e00      	cmp	r6, #0
 809d148:	f43f aeb7 	beq.w	809ceba <_dtoa_r+0x67a>
 809d14c:	f1b9 0f00 	cmp.w	r9, #0
 809d150:	d005      	beq.n	809d15e <_dtoa_r+0x91e>
 809d152:	45b1      	cmp	r9, r6
 809d154:	d003      	beq.n	809d15e <_dtoa_r+0x91e>
 809d156:	4649      	mov	r1, r9
 809d158:	4620      	mov	r0, r4
 809d15a:	f000 f985 	bl	809d468 <_Bfree>
 809d15e:	4631      	mov	r1, r6
 809d160:	4620      	mov	r0, r4
 809d162:	f000 f981 	bl	809d468 <_Bfree>
 809d166:	e6a8      	b.n	809ceba <_dtoa_r+0x67a>
 809d168:	2700      	movs	r7, #0
 809d16a:	463e      	mov	r6, r7
 809d16c:	e7e1      	b.n	809d132 <_dtoa_r+0x8f2>
 809d16e:	f8dd a020 	ldr.w	sl, [sp, #32]
 809d172:	463e      	mov	r6, r7
 809d174:	e5a9      	b.n	809ccca <_dtoa_r+0x48a>
 809d176:	bf00      	nop
 809d178:	40240000 	.word	0x40240000
 809d17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 809d17e:	f8cd 9008 	str.w	r9, [sp, #8]
 809d182:	2b00      	cmp	r3, #0
 809d184:	f000 80fa 	beq.w	809d37c <_dtoa_r+0xb3c>
 809d188:	2d00      	cmp	r5, #0
 809d18a:	dd05      	ble.n	809d198 <_dtoa_r+0x958>
 809d18c:	4631      	mov	r1, r6
 809d18e:	462a      	mov	r2, r5
 809d190:	4620      	mov	r0, r4
 809d192:	f000 faf7 	bl	809d784 <__lshift>
 809d196:	4606      	mov	r6, r0
 809d198:	9b07      	ldr	r3, [sp, #28]
 809d19a:	2b00      	cmp	r3, #0
 809d19c:	d04c      	beq.n	809d238 <_dtoa_r+0x9f8>
 809d19e:	6871      	ldr	r1, [r6, #4]
 809d1a0:	4620      	mov	r0, r4
 809d1a2:	f000 f92d 	bl	809d400 <_Balloc>
 809d1a6:	6932      	ldr	r2, [r6, #16]
 809d1a8:	3202      	adds	r2, #2
 809d1aa:	4605      	mov	r5, r0
 809d1ac:	0092      	lsls	r2, r2, #2
 809d1ae:	f106 010c 	add.w	r1, r6, #12
 809d1b2:	300c      	adds	r0, #12
 809d1b4:	f7fe fe26 	bl	809be04 <memcpy>
 809d1b8:	2201      	movs	r2, #1
 809d1ba:	4629      	mov	r1, r5
 809d1bc:	4620      	mov	r0, r4
 809d1be:	f000 fae1 	bl	809d784 <__lshift>
 809d1c2:	9b00      	ldr	r3, [sp, #0]
 809d1c4:	f8cd b014 	str.w	fp, [sp, #20]
 809d1c8:	f003 0301 	and.w	r3, r3, #1
 809d1cc:	46b1      	mov	r9, r6
 809d1ce:	9307      	str	r3, [sp, #28]
 809d1d0:	4606      	mov	r6, r0
 809d1d2:	4639      	mov	r1, r7
 809d1d4:	9804      	ldr	r0, [sp, #16]
 809d1d6:	f7ff faa5 	bl	809c724 <quorem>
 809d1da:	4649      	mov	r1, r9
 809d1dc:	4605      	mov	r5, r0
 809d1de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 809d1e2:	9804      	ldr	r0, [sp, #16]
 809d1e4:	f000 fb22 	bl	809d82c <__mcmp>
 809d1e8:	4632      	mov	r2, r6
 809d1ea:	9000      	str	r0, [sp, #0]
 809d1ec:	4639      	mov	r1, r7
 809d1ee:	4620      	mov	r0, r4
 809d1f0:	f000 fb36 	bl	809d860 <__mdiff>
 809d1f4:	68c3      	ldr	r3, [r0, #12]
 809d1f6:	4602      	mov	r2, r0
 809d1f8:	bb03      	cbnz	r3, 809d23c <_dtoa_r+0x9fc>
 809d1fa:	4601      	mov	r1, r0
 809d1fc:	9008      	str	r0, [sp, #32]
 809d1fe:	9804      	ldr	r0, [sp, #16]
 809d200:	f000 fb14 	bl	809d82c <__mcmp>
 809d204:	9a08      	ldr	r2, [sp, #32]
 809d206:	4603      	mov	r3, r0
 809d208:	4611      	mov	r1, r2
 809d20a:	4620      	mov	r0, r4
 809d20c:	9308      	str	r3, [sp, #32]
 809d20e:	f000 f92b 	bl	809d468 <_Bfree>
 809d212:	9b08      	ldr	r3, [sp, #32]
 809d214:	b9a3      	cbnz	r3, 809d240 <_dtoa_r+0xa00>
 809d216:	9a06      	ldr	r2, [sp, #24]
 809d218:	b992      	cbnz	r2, 809d240 <_dtoa_r+0xa00>
 809d21a:	9a07      	ldr	r2, [sp, #28]
 809d21c:	b982      	cbnz	r2, 809d240 <_dtoa_r+0xa00>
 809d21e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 809d222:	d029      	beq.n	809d278 <_dtoa_r+0xa38>
 809d224:	9b00      	ldr	r3, [sp, #0]
 809d226:	2b00      	cmp	r3, #0
 809d228:	dd01      	ble.n	809d22e <_dtoa_r+0x9ee>
 809d22a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 809d22e:	9b05      	ldr	r3, [sp, #20]
 809d230:	1c5d      	adds	r5, r3, #1
 809d232:	f883 8000 	strb.w	r8, [r3]
 809d236:	e782      	b.n	809d13e <_dtoa_r+0x8fe>
 809d238:	4630      	mov	r0, r6
 809d23a:	e7c2      	b.n	809d1c2 <_dtoa_r+0x982>
 809d23c:	2301      	movs	r3, #1
 809d23e:	e7e3      	b.n	809d208 <_dtoa_r+0x9c8>
 809d240:	9a00      	ldr	r2, [sp, #0]
 809d242:	2a00      	cmp	r2, #0
 809d244:	db04      	blt.n	809d250 <_dtoa_r+0xa10>
 809d246:	d125      	bne.n	809d294 <_dtoa_r+0xa54>
 809d248:	9a06      	ldr	r2, [sp, #24]
 809d24a:	bb1a      	cbnz	r2, 809d294 <_dtoa_r+0xa54>
 809d24c:	9a07      	ldr	r2, [sp, #28]
 809d24e:	bb0a      	cbnz	r2, 809d294 <_dtoa_r+0xa54>
 809d250:	2b00      	cmp	r3, #0
 809d252:	ddec      	ble.n	809d22e <_dtoa_r+0x9ee>
 809d254:	2201      	movs	r2, #1
 809d256:	9904      	ldr	r1, [sp, #16]
 809d258:	4620      	mov	r0, r4
 809d25a:	f000 fa93 	bl	809d784 <__lshift>
 809d25e:	4639      	mov	r1, r7
 809d260:	9004      	str	r0, [sp, #16]
 809d262:	f000 fae3 	bl	809d82c <__mcmp>
 809d266:	2800      	cmp	r0, #0
 809d268:	dc03      	bgt.n	809d272 <_dtoa_r+0xa32>
 809d26a:	d1e0      	bne.n	809d22e <_dtoa_r+0x9ee>
 809d26c:	f018 0f01 	tst.w	r8, #1
 809d270:	d0dd      	beq.n	809d22e <_dtoa_r+0x9ee>
 809d272:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 809d276:	d1d8      	bne.n	809d22a <_dtoa_r+0x9ea>
 809d278:	9b05      	ldr	r3, [sp, #20]
 809d27a:	9a05      	ldr	r2, [sp, #20]
 809d27c:	1c5d      	adds	r5, r3, #1
 809d27e:	2339      	movs	r3, #57	; 0x39
 809d280:	7013      	strb	r3, [r2, #0]
 809d282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 809d286:	2b39      	cmp	r3, #57	; 0x39
 809d288:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 809d28c:	d04f      	beq.n	809d32e <_dtoa_r+0xaee>
 809d28e:	3301      	adds	r3, #1
 809d290:	7013      	strb	r3, [r2, #0]
 809d292:	e754      	b.n	809d13e <_dtoa_r+0x8fe>
 809d294:	9a05      	ldr	r2, [sp, #20]
 809d296:	2b00      	cmp	r3, #0
 809d298:	f102 0501 	add.w	r5, r2, #1
 809d29c:	dd06      	ble.n	809d2ac <_dtoa_r+0xa6c>
 809d29e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 809d2a2:	d0e9      	beq.n	809d278 <_dtoa_r+0xa38>
 809d2a4:	f108 0801 	add.w	r8, r8, #1
 809d2a8:	9b05      	ldr	r3, [sp, #20]
 809d2aa:	e7c2      	b.n	809d232 <_dtoa_r+0x9f2>
 809d2ac:	9a02      	ldr	r2, [sp, #8]
 809d2ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 809d2b2:	eba5 030b 	sub.w	r3, r5, fp
 809d2b6:	4293      	cmp	r3, r2
 809d2b8:	d021      	beq.n	809d2fe <_dtoa_r+0xabe>
 809d2ba:	2300      	movs	r3, #0
 809d2bc:	220a      	movs	r2, #10
 809d2be:	9904      	ldr	r1, [sp, #16]
 809d2c0:	4620      	mov	r0, r4
 809d2c2:	f000 f8e8 	bl	809d496 <__multadd>
 809d2c6:	45b1      	cmp	r9, r6
 809d2c8:	9004      	str	r0, [sp, #16]
 809d2ca:	f04f 0300 	mov.w	r3, #0
 809d2ce:	f04f 020a 	mov.w	r2, #10
 809d2d2:	4649      	mov	r1, r9
 809d2d4:	4620      	mov	r0, r4
 809d2d6:	d105      	bne.n	809d2e4 <_dtoa_r+0xaa4>
 809d2d8:	f000 f8dd 	bl	809d496 <__multadd>
 809d2dc:	4681      	mov	r9, r0
 809d2de:	4606      	mov	r6, r0
 809d2e0:	9505      	str	r5, [sp, #20]
 809d2e2:	e776      	b.n	809d1d2 <_dtoa_r+0x992>
 809d2e4:	f000 f8d7 	bl	809d496 <__multadd>
 809d2e8:	4631      	mov	r1, r6
 809d2ea:	4681      	mov	r9, r0
 809d2ec:	2300      	movs	r3, #0
 809d2ee:	220a      	movs	r2, #10
 809d2f0:	4620      	mov	r0, r4
 809d2f2:	f000 f8d0 	bl	809d496 <__multadd>
 809d2f6:	4606      	mov	r6, r0
 809d2f8:	e7f2      	b.n	809d2e0 <_dtoa_r+0xaa0>
 809d2fa:	f04f 0900 	mov.w	r9, #0
 809d2fe:	2201      	movs	r2, #1
 809d300:	9904      	ldr	r1, [sp, #16]
 809d302:	4620      	mov	r0, r4
 809d304:	f000 fa3e 	bl	809d784 <__lshift>
 809d308:	4639      	mov	r1, r7
 809d30a:	9004      	str	r0, [sp, #16]
 809d30c:	f000 fa8e 	bl	809d82c <__mcmp>
 809d310:	2800      	cmp	r0, #0
 809d312:	dcb6      	bgt.n	809d282 <_dtoa_r+0xa42>
 809d314:	d102      	bne.n	809d31c <_dtoa_r+0xadc>
 809d316:	f018 0f01 	tst.w	r8, #1
 809d31a:	d1b2      	bne.n	809d282 <_dtoa_r+0xa42>
 809d31c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 809d320:	2b30      	cmp	r3, #48	; 0x30
 809d322:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 809d326:	f47f af0a 	bne.w	809d13e <_dtoa_r+0x8fe>
 809d32a:	4615      	mov	r5, r2
 809d32c:	e7f6      	b.n	809d31c <_dtoa_r+0xadc>
 809d32e:	4593      	cmp	fp, r2
 809d330:	d105      	bne.n	809d33e <_dtoa_r+0xafe>
 809d332:	2331      	movs	r3, #49	; 0x31
 809d334:	f10a 0a01 	add.w	sl, sl, #1
 809d338:	f88b 3000 	strb.w	r3, [fp]
 809d33c:	e6ff      	b.n	809d13e <_dtoa_r+0x8fe>
 809d33e:	4615      	mov	r5, r2
 809d340:	e79f      	b.n	809d282 <_dtoa_r+0xa42>
 809d342:	f8df b064 	ldr.w	fp, [pc, #100]	; 809d3a8 <_dtoa_r+0xb68>
 809d346:	e007      	b.n	809d358 <_dtoa_r+0xb18>
 809d348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 809d34a:	f8df b060 	ldr.w	fp, [pc, #96]	; 809d3ac <_dtoa_r+0xb6c>
 809d34e:	b11b      	cbz	r3, 809d358 <_dtoa_r+0xb18>
 809d350:	f10b 0308 	add.w	r3, fp, #8
 809d354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 809d356:	6013      	str	r3, [r2, #0]
 809d358:	4658      	mov	r0, fp
 809d35a:	b017      	add	sp, #92	; 0x5c
 809d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809d360:	9b06      	ldr	r3, [sp, #24]
 809d362:	2b01      	cmp	r3, #1
 809d364:	f77f ae35 	ble.w	809cfd2 <_dtoa_r+0x792>
 809d368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 809d36a:	9307      	str	r3, [sp, #28]
 809d36c:	e649      	b.n	809d002 <_dtoa_r+0x7c2>
 809d36e:	9b02      	ldr	r3, [sp, #8]
 809d370:	2b00      	cmp	r3, #0
 809d372:	dc03      	bgt.n	809d37c <_dtoa_r+0xb3c>
 809d374:	9b06      	ldr	r3, [sp, #24]
 809d376:	2b02      	cmp	r3, #2
 809d378:	f73f aecc 	bgt.w	809d114 <_dtoa_r+0x8d4>
 809d37c:	465d      	mov	r5, fp
 809d37e:	4639      	mov	r1, r7
 809d380:	9804      	ldr	r0, [sp, #16]
 809d382:	f7ff f9cf 	bl	809c724 <quorem>
 809d386:	f100 0830 	add.w	r8, r0, #48	; 0x30
 809d38a:	f805 8b01 	strb.w	r8, [r5], #1
 809d38e:	9a02      	ldr	r2, [sp, #8]
 809d390:	eba5 030b 	sub.w	r3, r5, fp
 809d394:	429a      	cmp	r2, r3
 809d396:	ddb0      	ble.n	809d2fa <_dtoa_r+0xaba>
 809d398:	2300      	movs	r3, #0
 809d39a:	220a      	movs	r2, #10
 809d39c:	9904      	ldr	r1, [sp, #16]
 809d39e:	4620      	mov	r0, r4
 809d3a0:	f000 f879 	bl	809d496 <__multadd>
 809d3a4:	9004      	str	r0, [sp, #16]
 809d3a6:	e7ea      	b.n	809d37e <_dtoa_r+0xb3e>
 809d3a8:	080a5484 	.word	0x080a5484
 809d3ac:	080a54a8 	.word	0x080a54a8

0809d3b0 <_localeconv_r>:
 809d3b0:	4b04      	ldr	r3, [pc, #16]	; (809d3c4 <_localeconv_r+0x14>)
 809d3b2:	681b      	ldr	r3, [r3, #0]
 809d3b4:	6a18      	ldr	r0, [r3, #32]
 809d3b6:	4b04      	ldr	r3, [pc, #16]	; (809d3c8 <_localeconv_r+0x18>)
 809d3b8:	2800      	cmp	r0, #0
 809d3ba:	bf08      	it	eq
 809d3bc:	4618      	moveq	r0, r3
 809d3be:	30f0      	adds	r0, #240	; 0xf0
 809d3c0:	4770      	bx	lr
 809d3c2:	bf00      	nop
 809d3c4:	2000b378 	.word	0x2000b378
 809d3c8:	2000b3dc 	.word	0x2000b3dc

0809d3cc <malloc>:
 809d3cc:	4b02      	ldr	r3, [pc, #8]	; (809d3d8 <malloc+0xc>)
 809d3ce:	4601      	mov	r1, r0
 809d3d0:	6818      	ldr	r0, [r3, #0]
 809d3d2:	f000 bb4d 	b.w	809da70 <_malloc_r>
 809d3d6:	bf00      	nop
 809d3d8:	2000b378 	.word	0x2000b378

0809d3dc <__ascii_mbtowc>:
 809d3dc:	b082      	sub	sp, #8
 809d3de:	b901      	cbnz	r1, 809d3e2 <__ascii_mbtowc+0x6>
 809d3e0:	a901      	add	r1, sp, #4
 809d3e2:	b142      	cbz	r2, 809d3f6 <__ascii_mbtowc+0x1a>
 809d3e4:	b14b      	cbz	r3, 809d3fa <__ascii_mbtowc+0x1e>
 809d3e6:	7813      	ldrb	r3, [r2, #0]
 809d3e8:	600b      	str	r3, [r1, #0]
 809d3ea:	7812      	ldrb	r2, [r2, #0]
 809d3ec:	1c10      	adds	r0, r2, #0
 809d3ee:	bf18      	it	ne
 809d3f0:	2001      	movne	r0, #1
 809d3f2:	b002      	add	sp, #8
 809d3f4:	4770      	bx	lr
 809d3f6:	4610      	mov	r0, r2
 809d3f8:	e7fb      	b.n	809d3f2 <__ascii_mbtowc+0x16>
 809d3fa:	f06f 0001 	mvn.w	r0, #1
 809d3fe:	e7f8      	b.n	809d3f2 <__ascii_mbtowc+0x16>

0809d400 <_Balloc>:
 809d400:	b570      	push	{r4, r5, r6, lr}
 809d402:	6a45      	ldr	r5, [r0, #36]	; 0x24
 809d404:	4604      	mov	r4, r0
 809d406:	460e      	mov	r6, r1
 809d408:	b93d      	cbnz	r5, 809d41a <_Balloc+0x1a>
 809d40a:	2010      	movs	r0, #16
 809d40c:	f7ff ffde 	bl	809d3cc <malloc>
 809d410:	6260      	str	r0, [r4, #36]	; 0x24
 809d412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 809d416:	6005      	str	r5, [r0, #0]
 809d418:	60c5      	str	r5, [r0, #12]
 809d41a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 809d41c:	68eb      	ldr	r3, [r5, #12]
 809d41e:	b183      	cbz	r3, 809d442 <_Balloc+0x42>
 809d420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 809d422:	68db      	ldr	r3, [r3, #12]
 809d424:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 809d428:	b9b8      	cbnz	r0, 809d45a <_Balloc+0x5a>
 809d42a:	2101      	movs	r1, #1
 809d42c:	fa01 f506 	lsl.w	r5, r1, r6
 809d430:	1d6a      	adds	r2, r5, #5
 809d432:	0092      	lsls	r2, r2, #2
 809d434:	4620      	mov	r0, r4
 809d436:	f000 fabf 	bl	809d9b8 <_calloc_r>
 809d43a:	b160      	cbz	r0, 809d456 <_Balloc+0x56>
 809d43c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 809d440:	e00e      	b.n	809d460 <_Balloc+0x60>
 809d442:	2221      	movs	r2, #33	; 0x21
 809d444:	2104      	movs	r1, #4
 809d446:	4620      	mov	r0, r4
 809d448:	f000 fab6 	bl	809d9b8 <_calloc_r>
 809d44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 809d44e:	60e8      	str	r0, [r5, #12]
 809d450:	68db      	ldr	r3, [r3, #12]
 809d452:	2b00      	cmp	r3, #0
 809d454:	d1e4      	bne.n	809d420 <_Balloc+0x20>
 809d456:	2000      	movs	r0, #0
 809d458:	bd70      	pop	{r4, r5, r6, pc}
 809d45a:	6802      	ldr	r2, [r0, #0]
 809d45c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 809d460:	2300      	movs	r3, #0
 809d462:	e9c0 3303 	strd	r3, r3, [r0, #12]
 809d466:	e7f7      	b.n	809d458 <_Balloc+0x58>

0809d468 <_Bfree>:
 809d468:	b570      	push	{r4, r5, r6, lr}
 809d46a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 809d46c:	4606      	mov	r6, r0
 809d46e:	460d      	mov	r5, r1
 809d470:	b93c      	cbnz	r4, 809d482 <_Bfree+0x1a>
 809d472:	2010      	movs	r0, #16
 809d474:	f7ff ffaa 	bl	809d3cc <malloc>
 809d478:	6270      	str	r0, [r6, #36]	; 0x24
 809d47a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 809d47e:	6004      	str	r4, [r0, #0]
 809d480:	60c4      	str	r4, [r0, #12]
 809d482:	b13d      	cbz	r5, 809d494 <_Bfree+0x2c>
 809d484:	6a73      	ldr	r3, [r6, #36]	; 0x24
 809d486:	686a      	ldr	r2, [r5, #4]
 809d488:	68db      	ldr	r3, [r3, #12]
 809d48a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 809d48e:	6029      	str	r1, [r5, #0]
 809d490:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 809d494:	bd70      	pop	{r4, r5, r6, pc}

0809d496 <__multadd>:
 809d496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 809d49a:	690d      	ldr	r5, [r1, #16]
 809d49c:	461f      	mov	r7, r3
 809d49e:	4606      	mov	r6, r0
 809d4a0:	460c      	mov	r4, r1
 809d4a2:	f101 0c14 	add.w	ip, r1, #20
 809d4a6:	2300      	movs	r3, #0
 809d4a8:	f8dc 0000 	ldr.w	r0, [ip]
 809d4ac:	b281      	uxth	r1, r0
 809d4ae:	fb02 7101 	mla	r1, r2, r1, r7
 809d4b2:	0c0f      	lsrs	r7, r1, #16
 809d4b4:	0c00      	lsrs	r0, r0, #16
 809d4b6:	fb02 7000 	mla	r0, r2, r0, r7
 809d4ba:	b289      	uxth	r1, r1
 809d4bc:	3301      	adds	r3, #1
 809d4be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 809d4c2:	429d      	cmp	r5, r3
 809d4c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 809d4c8:	f84c 1b04 	str.w	r1, [ip], #4
 809d4cc:	dcec      	bgt.n	809d4a8 <__multadd+0x12>
 809d4ce:	b1d7      	cbz	r7, 809d506 <__multadd+0x70>
 809d4d0:	68a3      	ldr	r3, [r4, #8]
 809d4d2:	42ab      	cmp	r3, r5
 809d4d4:	dc12      	bgt.n	809d4fc <__multadd+0x66>
 809d4d6:	6861      	ldr	r1, [r4, #4]
 809d4d8:	4630      	mov	r0, r6
 809d4da:	3101      	adds	r1, #1
 809d4dc:	f7ff ff90 	bl	809d400 <_Balloc>
 809d4e0:	6922      	ldr	r2, [r4, #16]
 809d4e2:	3202      	adds	r2, #2
 809d4e4:	f104 010c 	add.w	r1, r4, #12
 809d4e8:	4680      	mov	r8, r0
 809d4ea:	0092      	lsls	r2, r2, #2
 809d4ec:	300c      	adds	r0, #12
 809d4ee:	f7fe fc89 	bl	809be04 <memcpy>
 809d4f2:	4621      	mov	r1, r4
 809d4f4:	4630      	mov	r0, r6
 809d4f6:	f7ff ffb7 	bl	809d468 <_Bfree>
 809d4fa:	4644      	mov	r4, r8
 809d4fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 809d500:	3501      	adds	r5, #1
 809d502:	615f      	str	r7, [r3, #20]
 809d504:	6125      	str	r5, [r4, #16]
 809d506:	4620      	mov	r0, r4
 809d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0809d50c <__hi0bits>:
 809d50c:	0c02      	lsrs	r2, r0, #16
 809d50e:	0412      	lsls	r2, r2, #16
 809d510:	4603      	mov	r3, r0
 809d512:	b9b2      	cbnz	r2, 809d542 <__hi0bits+0x36>
 809d514:	0403      	lsls	r3, r0, #16
 809d516:	2010      	movs	r0, #16
 809d518:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 809d51c:	bf04      	itt	eq
 809d51e:	021b      	lsleq	r3, r3, #8
 809d520:	3008      	addeq	r0, #8
 809d522:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 809d526:	bf04      	itt	eq
 809d528:	011b      	lsleq	r3, r3, #4
 809d52a:	3004      	addeq	r0, #4
 809d52c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 809d530:	bf04      	itt	eq
 809d532:	009b      	lsleq	r3, r3, #2
 809d534:	3002      	addeq	r0, #2
 809d536:	2b00      	cmp	r3, #0
 809d538:	db06      	blt.n	809d548 <__hi0bits+0x3c>
 809d53a:	005b      	lsls	r3, r3, #1
 809d53c:	d503      	bpl.n	809d546 <__hi0bits+0x3a>
 809d53e:	3001      	adds	r0, #1
 809d540:	4770      	bx	lr
 809d542:	2000      	movs	r0, #0
 809d544:	e7e8      	b.n	809d518 <__hi0bits+0xc>
 809d546:	2020      	movs	r0, #32
 809d548:	4770      	bx	lr

0809d54a <__lo0bits>:
 809d54a:	6803      	ldr	r3, [r0, #0]
 809d54c:	f013 0207 	ands.w	r2, r3, #7
 809d550:	4601      	mov	r1, r0
 809d552:	d00b      	beq.n	809d56c <__lo0bits+0x22>
 809d554:	07da      	lsls	r2, r3, #31
 809d556:	d423      	bmi.n	809d5a0 <__lo0bits+0x56>
 809d558:	0798      	lsls	r0, r3, #30
 809d55a:	bf49      	itett	mi
 809d55c:	085b      	lsrmi	r3, r3, #1
 809d55e:	089b      	lsrpl	r3, r3, #2
 809d560:	2001      	movmi	r0, #1
 809d562:	600b      	strmi	r3, [r1, #0]
 809d564:	bf5c      	itt	pl
 809d566:	600b      	strpl	r3, [r1, #0]
 809d568:	2002      	movpl	r0, #2
 809d56a:	4770      	bx	lr
 809d56c:	b298      	uxth	r0, r3
 809d56e:	b9a8      	cbnz	r0, 809d59c <__lo0bits+0x52>
 809d570:	0c1b      	lsrs	r3, r3, #16
 809d572:	2010      	movs	r0, #16
 809d574:	f013 0fff 	tst.w	r3, #255	; 0xff
 809d578:	bf04      	itt	eq
 809d57a:	0a1b      	lsreq	r3, r3, #8
 809d57c:	3008      	addeq	r0, #8
 809d57e:	071a      	lsls	r2, r3, #28
 809d580:	bf04      	itt	eq
 809d582:	091b      	lsreq	r3, r3, #4
 809d584:	3004      	addeq	r0, #4
 809d586:	079a      	lsls	r2, r3, #30
 809d588:	bf04      	itt	eq
 809d58a:	089b      	lsreq	r3, r3, #2
 809d58c:	3002      	addeq	r0, #2
 809d58e:	07da      	lsls	r2, r3, #31
 809d590:	d402      	bmi.n	809d598 <__lo0bits+0x4e>
 809d592:	085b      	lsrs	r3, r3, #1
 809d594:	d006      	beq.n	809d5a4 <__lo0bits+0x5a>
 809d596:	3001      	adds	r0, #1
 809d598:	600b      	str	r3, [r1, #0]
 809d59a:	4770      	bx	lr
 809d59c:	4610      	mov	r0, r2
 809d59e:	e7e9      	b.n	809d574 <__lo0bits+0x2a>
 809d5a0:	2000      	movs	r0, #0
 809d5a2:	4770      	bx	lr
 809d5a4:	2020      	movs	r0, #32
 809d5a6:	4770      	bx	lr

0809d5a8 <__i2b>:
 809d5a8:	b510      	push	{r4, lr}
 809d5aa:	460c      	mov	r4, r1
 809d5ac:	2101      	movs	r1, #1
 809d5ae:	f7ff ff27 	bl	809d400 <_Balloc>
 809d5b2:	2201      	movs	r2, #1
 809d5b4:	6144      	str	r4, [r0, #20]
 809d5b6:	6102      	str	r2, [r0, #16]
 809d5b8:	bd10      	pop	{r4, pc}

0809d5ba <__multiply>:
 809d5ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809d5be:	4614      	mov	r4, r2
 809d5c0:	690a      	ldr	r2, [r1, #16]
 809d5c2:	6923      	ldr	r3, [r4, #16]
 809d5c4:	429a      	cmp	r2, r3
 809d5c6:	bfb8      	it	lt
 809d5c8:	460b      	movlt	r3, r1
 809d5ca:	4688      	mov	r8, r1
 809d5cc:	bfbc      	itt	lt
 809d5ce:	46a0      	movlt	r8, r4
 809d5d0:	461c      	movlt	r4, r3
 809d5d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 809d5d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 809d5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 809d5de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 809d5e2:	eb07 0609 	add.w	r6, r7, r9
 809d5e6:	42b3      	cmp	r3, r6
 809d5e8:	bfb8      	it	lt
 809d5ea:	3101      	addlt	r1, #1
 809d5ec:	f7ff ff08 	bl	809d400 <_Balloc>
 809d5f0:	f100 0514 	add.w	r5, r0, #20
 809d5f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 809d5f8:	462b      	mov	r3, r5
 809d5fa:	2200      	movs	r2, #0
 809d5fc:	4573      	cmp	r3, lr
 809d5fe:	d316      	bcc.n	809d62e <__multiply+0x74>
 809d600:	f104 0214 	add.w	r2, r4, #20
 809d604:	f108 0114 	add.w	r1, r8, #20
 809d608:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 809d60c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 809d610:	9300      	str	r3, [sp, #0]
 809d612:	9b00      	ldr	r3, [sp, #0]
 809d614:	9201      	str	r2, [sp, #4]
 809d616:	4293      	cmp	r3, r2
 809d618:	d80c      	bhi.n	809d634 <__multiply+0x7a>
 809d61a:	2e00      	cmp	r6, #0
 809d61c:	dd03      	ble.n	809d626 <__multiply+0x6c>
 809d61e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 809d622:	2b00      	cmp	r3, #0
 809d624:	d05d      	beq.n	809d6e2 <__multiply+0x128>
 809d626:	6106      	str	r6, [r0, #16]
 809d628:	b003      	add	sp, #12
 809d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809d62e:	f843 2b04 	str.w	r2, [r3], #4
 809d632:	e7e3      	b.n	809d5fc <__multiply+0x42>
 809d634:	f8b2 b000 	ldrh.w	fp, [r2]
 809d638:	f1bb 0f00 	cmp.w	fp, #0
 809d63c:	d023      	beq.n	809d686 <__multiply+0xcc>
 809d63e:	4689      	mov	r9, r1
 809d640:	46ac      	mov	ip, r5
 809d642:	f04f 0800 	mov.w	r8, #0
 809d646:	f859 4b04 	ldr.w	r4, [r9], #4
 809d64a:	f8dc a000 	ldr.w	sl, [ip]
 809d64e:	b2a3      	uxth	r3, r4
 809d650:	fa1f fa8a 	uxth.w	sl, sl
 809d654:	fb0b a303 	mla	r3, fp, r3, sl
 809d658:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 809d65c:	f8dc 4000 	ldr.w	r4, [ip]
 809d660:	4443      	add	r3, r8
 809d662:	ea4f 4814 	mov.w	r8, r4, lsr #16
 809d666:	fb0b 840a 	mla	r4, fp, sl, r8
 809d66a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 809d66e:	46e2      	mov	sl, ip
 809d670:	b29b      	uxth	r3, r3
 809d672:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 809d676:	454f      	cmp	r7, r9
 809d678:	ea4f 4814 	mov.w	r8, r4, lsr #16
 809d67c:	f84a 3b04 	str.w	r3, [sl], #4
 809d680:	d82b      	bhi.n	809d6da <__multiply+0x120>
 809d682:	f8cc 8004 	str.w	r8, [ip, #4]
 809d686:	9b01      	ldr	r3, [sp, #4]
 809d688:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 809d68c:	3204      	adds	r2, #4
 809d68e:	f1ba 0f00 	cmp.w	sl, #0
 809d692:	d020      	beq.n	809d6d6 <__multiply+0x11c>
 809d694:	682b      	ldr	r3, [r5, #0]
 809d696:	4689      	mov	r9, r1
 809d698:	46a8      	mov	r8, r5
 809d69a:	f04f 0b00 	mov.w	fp, #0
 809d69e:	f8b9 c000 	ldrh.w	ip, [r9]
 809d6a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 809d6a6:	fb0a 440c 	mla	r4, sl, ip, r4
 809d6aa:	445c      	add	r4, fp
 809d6ac:	46c4      	mov	ip, r8
 809d6ae:	b29b      	uxth	r3, r3
 809d6b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 809d6b4:	f84c 3b04 	str.w	r3, [ip], #4
 809d6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 809d6bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 809d6c0:	0c1b      	lsrs	r3, r3, #16
 809d6c2:	fb0a b303 	mla	r3, sl, r3, fp
 809d6c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 809d6ca:	454f      	cmp	r7, r9
 809d6cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 809d6d0:	d805      	bhi.n	809d6de <__multiply+0x124>
 809d6d2:	f8c8 3004 	str.w	r3, [r8, #4]
 809d6d6:	3504      	adds	r5, #4
 809d6d8:	e79b      	b.n	809d612 <__multiply+0x58>
 809d6da:	46d4      	mov	ip, sl
 809d6dc:	e7b3      	b.n	809d646 <__multiply+0x8c>
 809d6de:	46e0      	mov	r8, ip
 809d6e0:	e7dd      	b.n	809d69e <__multiply+0xe4>
 809d6e2:	3e01      	subs	r6, #1
 809d6e4:	e799      	b.n	809d61a <__multiply+0x60>
	...

0809d6e8 <__pow5mult>:
 809d6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 809d6ec:	4615      	mov	r5, r2
 809d6ee:	f012 0203 	ands.w	r2, r2, #3
 809d6f2:	4606      	mov	r6, r0
 809d6f4:	460f      	mov	r7, r1
 809d6f6:	d007      	beq.n	809d708 <__pow5mult+0x20>
 809d6f8:	3a01      	subs	r2, #1
 809d6fa:	4c21      	ldr	r4, [pc, #132]	; (809d780 <__pow5mult+0x98>)
 809d6fc:	2300      	movs	r3, #0
 809d6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 809d702:	f7ff fec8 	bl	809d496 <__multadd>
 809d706:	4607      	mov	r7, r0
 809d708:	10ad      	asrs	r5, r5, #2
 809d70a:	d035      	beq.n	809d778 <__pow5mult+0x90>
 809d70c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 809d70e:	b93c      	cbnz	r4, 809d720 <__pow5mult+0x38>
 809d710:	2010      	movs	r0, #16
 809d712:	f7ff fe5b 	bl	809d3cc <malloc>
 809d716:	6270      	str	r0, [r6, #36]	; 0x24
 809d718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 809d71c:	6004      	str	r4, [r0, #0]
 809d71e:	60c4      	str	r4, [r0, #12]
 809d720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 809d724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 809d728:	b94c      	cbnz	r4, 809d73e <__pow5mult+0x56>
 809d72a:	f240 2171 	movw	r1, #625	; 0x271
 809d72e:	4630      	mov	r0, r6
 809d730:	f7ff ff3a 	bl	809d5a8 <__i2b>
 809d734:	2300      	movs	r3, #0
 809d736:	f8c8 0008 	str.w	r0, [r8, #8]
 809d73a:	4604      	mov	r4, r0
 809d73c:	6003      	str	r3, [r0, #0]
 809d73e:	f04f 0800 	mov.w	r8, #0
 809d742:	07eb      	lsls	r3, r5, #31
 809d744:	d50a      	bpl.n	809d75c <__pow5mult+0x74>
 809d746:	4639      	mov	r1, r7
 809d748:	4622      	mov	r2, r4
 809d74a:	4630      	mov	r0, r6
 809d74c:	f7ff ff35 	bl	809d5ba <__multiply>
 809d750:	4639      	mov	r1, r7
 809d752:	4681      	mov	r9, r0
 809d754:	4630      	mov	r0, r6
 809d756:	f7ff fe87 	bl	809d468 <_Bfree>
 809d75a:	464f      	mov	r7, r9
 809d75c:	106d      	asrs	r5, r5, #1
 809d75e:	d00b      	beq.n	809d778 <__pow5mult+0x90>
 809d760:	6820      	ldr	r0, [r4, #0]
 809d762:	b938      	cbnz	r0, 809d774 <__pow5mult+0x8c>
 809d764:	4622      	mov	r2, r4
 809d766:	4621      	mov	r1, r4
 809d768:	4630      	mov	r0, r6
 809d76a:	f7ff ff26 	bl	809d5ba <__multiply>
 809d76e:	6020      	str	r0, [r4, #0]
 809d770:	f8c0 8000 	str.w	r8, [r0]
 809d774:	4604      	mov	r4, r0
 809d776:	e7e4      	b.n	809d742 <__pow5mult+0x5a>
 809d778:	4638      	mov	r0, r7
 809d77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809d77e:	bf00      	nop
 809d780:	080a55b0 	.word	0x080a55b0

0809d784 <__lshift>:
 809d784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809d788:	460c      	mov	r4, r1
 809d78a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 809d78e:	6923      	ldr	r3, [r4, #16]
 809d790:	6849      	ldr	r1, [r1, #4]
 809d792:	eb0a 0903 	add.w	r9, sl, r3
 809d796:	68a3      	ldr	r3, [r4, #8]
 809d798:	4607      	mov	r7, r0
 809d79a:	4616      	mov	r6, r2
 809d79c:	f109 0501 	add.w	r5, r9, #1
 809d7a0:	42ab      	cmp	r3, r5
 809d7a2:	db32      	blt.n	809d80a <__lshift+0x86>
 809d7a4:	4638      	mov	r0, r7
 809d7a6:	f7ff fe2b 	bl	809d400 <_Balloc>
 809d7aa:	2300      	movs	r3, #0
 809d7ac:	4680      	mov	r8, r0
 809d7ae:	f100 0114 	add.w	r1, r0, #20
 809d7b2:	461a      	mov	r2, r3
 809d7b4:	4553      	cmp	r3, sl
 809d7b6:	db2b      	blt.n	809d810 <__lshift+0x8c>
 809d7b8:	6920      	ldr	r0, [r4, #16]
 809d7ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 809d7be:	f104 0314 	add.w	r3, r4, #20
 809d7c2:	f016 021f 	ands.w	r2, r6, #31
 809d7c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 809d7ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 809d7ce:	d025      	beq.n	809d81c <__lshift+0x98>
 809d7d0:	f1c2 0e20 	rsb	lr, r2, #32
 809d7d4:	2000      	movs	r0, #0
 809d7d6:	681e      	ldr	r6, [r3, #0]
 809d7d8:	468a      	mov	sl, r1
 809d7da:	4096      	lsls	r6, r2
 809d7dc:	4330      	orrs	r0, r6
 809d7de:	f84a 0b04 	str.w	r0, [sl], #4
 809d7e2:	f853 0b04 	ldr.w	r0, [r3], #4
 809d7e6:	459c      	cmp	ip, r3
 809d7e8:	fa20 f00e 	lsr.w	r0, r0, lr
 809d7ec:	d814      	bhi.n	809d818 <__lshift+0x94>
 809d7ee:	6048      	str	r0, [r1, #4]
 809d7f0:	b108      	cbz	r0, 809d7f6 <__lshift+0x72>
 809d7f2:	f109 0502 	add.w	r5, r9, #2
 809d7f6:	3d01      	subs	r5, #1
 809d7f8:	4638      	mov	r0, r7
 809d7fa:	f8c8 5010 	str.w	r5, [r8, #16]
 809d7fe:	4621      	mov	r1, r4
 809d800:	f7ff fe32 	bl	809d468 <_Bfree>
 809d804:	4640      	mov	r0, r8
 809d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809d80a:	3101      	adds	r1, #1
 809d80c:	005b      	lsls	r3, r3, #1
 809d80e:	e7c7      	b.n	809d7a0 <__lshift+0x1c>
 809d810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 809d814:	3301      	adds	r3, #1
 809d816:	e7cd      	b.n	809d7b4 <__lshift+0x30>
 809d818:	4651      	mov	r1, sl
 809d81a:	e7dc      	b.n	809d7d6 <__lshift+0x52>
 809d81c:	3904      	subs	r1, #4
 809d81e:	f853 2b04 	ldr.w	r2, [r3], #4
 809d822:	f841 2f04 	str.w	r2, [r1, #4]!
 809d826:	459c      	cmp	ip, r3
 809d828:	d8f9      	bhi.n	809d81e <__lshift+0x9a>
 809d82a:	e7e4      	b.n	809d7f6 <__lshift+0x72>

0809d82c <__mcmp>:
 809d82c:	6903      	ldr	r3, [r0, #16]
 809d82e:	690a      	ldr	r2, [r1, #16]
 809d830:	1a9b      	subs	r3, r3, r2
 809d832:	b530      	push	{r4, r5, lr}
 809d834:	d10c      	bne.n	809d850 <__mcmp+0x24>
 809d836:	0092      	lsls	r2, r2, #2
 809d838:	3014      	adds	r0, #20
 809d83a:	3114      	adds	r1, #20
 809d83c:	1884      	adds	r4, r0, r2
 809d83e:	4411      	add	r1, r2
 809d840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 809d844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 809d848:	4295      	cmp	r5, r2
 809d84a:	d003      	beq.n	809d854 <__mcmp+0x28>
 809d84c:	d305      	bcc.n	809d85a <__mcmp+0x2e>
 809d84e:	2301      	movs	r3, #1
 809d850:	4618      	mov	r0, r3
 809d852:	bd30      	pop	{r4, r5, pc}
 809d854:	42a0      	cmp	r0, r4
 809d856:	d3f3      	bcc.n	809d840 <__mcmp+0x14>
 809d858:	e7fa      	b.n	809d850 <__mcmp+0x24>
 809d85a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 809d85e:	e7f7      	b.n	809d850 <__mcmp+0x24>

0809d860 <__mdiff>:
 809d860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809d864:	460d      	mov	r5, r1
 809d866:	4607      	mov	r7, r0
 809d868:	4611      	mov	r1, r2
 809d86a:	4628      	mov	r0, r5
 809d86c:	4614      	mov	r4, r2
 809d86e:	f7ff ffdd 	bl	809d82c <__mcmp>
 809d872:	1e06      	subs	r6, r0, #0
 809d874:	d108      	bne.n	809d888 <__mdiff+0x28>
 809d876:	4631      	mov	r1, r6
 809d878:	4638      	mov	r0, r7
 809d87a:	f7ff fdc1 	bl	809d400 <_Balloc>
 809d87e:	2301      	movs	r3, #1
 809d880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 809d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809d888:	bfa4      	itt	ge
 809d88a:	4623      	movge	r3, r4
 809d88c:	462c      	movge	r4, r5
 809d88e:	4638      	mov	r0, r7
 809d890:	6861      	ldr	r1, [r4, #4]
 809d892:	bfa6      	itte	ge
 809d894:	461d      	movge	r5, r3
 809d896:	2600      	movge	r6, #0
 809d898:	2601      	movlt	r6, #1
 809d89a:	f7ff fdb1 	bl	809d400 <_Balloc>
 809d89e:	692b      	ldr	r3, [r5, #16]
 809d8a0:	60c6      	str	r6, [r0, #12]
 809d8a2:	6926      	ldr	r6, [r4, #16]
 809d8a4:	f105 0914 	add.w	r9, r5, #20
 809d8a8:	f104 0214 	add.w	r2, r4, #20
 809d8ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 809d8b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 809d8b4:	f100 0514 	add.w	r5, r0, #20
 809d8b8:	f04f 0e00 	mov.w	lr, #0
 809d8bc:	f852 ab04 	ldr.w	sl, [r2], #4
 809d8c0:	f859 4b04 	ldr.w	r4, [r9], #4
 809d8c4:	fa1e f18a 	uxtah	r1, lr, sl
 809d8c8:	b2a3      	uxth	r3, r4
 809d8ca:	1ac9      	subs	r1, r1, r3
 809d8cc:	0c23      	lsrs	r3, r4, #16
 809d8ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 809d8d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 809d8d6:	b289      	uxth	r1, r1
 809d8d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 809d8dc:	45c8      	cmp	r8, r9
 809d8de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 809d8e2:	4694      	mov	ip, r2
 809d8e4:	f845 3b04 	str.w	r3, [r5], #4
 809d8e8:	d8e8      	bhi.n	809d8bc <__mdiff+0x5c>
 809d8ea:	45bc      	cmp	ip, r7
 809d8ec:	d304      	bcc.n	809d8f8 <__mdiff+0x98>
 809d8ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 809d8f2:	b183      	cbz	r3, 809d916 <__mdiff+0xb6>
 809d8f4:	6106      	str	r6, [r0, #16]
 809d8f6:	e7c5      	b.n	809d884 <__mdiff+0x24>
 809d8f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 809d8fc:	fa1e f381 	uxtah	r3, lr, r1
 809d900:	141a      	asrs	r2, r3, #16
 809d902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 809d906:	b29b      	uxth	r3, r3
 809d908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 809d90c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 809d910:	f845 3b04 	str.w	r3, [r5], #4
 809d914:	e7e9      	b.n	809d8ea <__mdiff+0x8a>
 809d916:	3e01      	subs	r6, #1
 809d918:	e7e9      	b.n	809d8ee <__mdiff+0x8e>

0809d91a <__d2b>:
 809d91a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 809d91e:	460e      	mov	r6, r1
 809d920:	2101      	movs	r1, #1
 809d922:	ec59 8b10 	vmov	r8, r9, d0
 809d926:	4615      	mov	r5, r2
 809d928:	f7ff fd6a 	bl	809d400 <_Balloc>
 809d92c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 809d930:	4607      	mov	r7, r0
 809d932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809d936:	bb34      	cbnz	r4, 809d986 <__d2b+0x6c>
 809d938:	9301      	str	r3, [sp, #4]
 809d93a:	f1b8 0300 	subs.w	r3, r8, #0
 809d93e:	d027      	beq.n	809d990 <__d2b+0x76>
 809d940:	a802      	add	r0, sp, #8
 809d942:	f840 3d08 	str.w	r3, [r0, #-8]!
 809d946:	f7ff fe00 	bl	809d54a <__lo0bits>
 809d94a:	9900      	ldr	r1, [sp, #0]
 809d94c:	b1f0      	cbz	r0, 809d98c <__d2b+0x72>
 809d94e:	9a01      	ldr	r2, [sp, #4]
 809d950:	f1c0 0320 	rsb	r3, r0, #32
 809d954:	fa02 f303 	lsl.w	r3, r2, r3
 809d958:	430b      	orrs	r3, r1
 809d95a:	40c2      	lsrs	r2, r0
 809d95c:	617b      	str	r3, [r7, #20]
 809d95e:	9201      	str	r2, [sp, #4]
 809d960:	9b01      	ldr	r3, [sp, #4]
 809d962:	61bb      	str	r3, [r7, #24]
 809d964:	2b00      	cmp	r3, #0
 809d966:	bf14      	ite	ne
 809d968:	2102      	movne	r1, #2
 809d96a:	2101      	moveq	r1, #1
 809d96c:	6139      	str	r1, [r7, #16]
 809d96e:	b1c4      	cbz	r4, 809d9a2 <__d2b+0x88>
 809d970:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 809d974:	4404      	add	r4, r0
 809d976:	6034      	str	r4, [r6, #0]
 809d978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 809d97c:	6028      	str	r0, [r5, #0]
 809d97e:	4638      	mov	r0, r7
 809d980:	b003      	add	sp, #12
 809d982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 809d986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 809d98a:	e7d5      	b.n	809d938 <__d2b+0x1e>
 809d98c:	6179      	str	r1, [r7, #20]
 809d98e:	e7e7      	b.n	809d960 <__d2b+0x46>
 809d990:	a801      	add	r0, sp, #4
 809d992:	f7ff fdda 	bl	809d54a <__lo0bits>
 809d996:	9b01      	ldr	r3, [sp, #4]
 809d998:	617b      	str	r3, [r7, #20]
 809d99a:	2101      	movs	r1, #1
 809d99c:	6139      	str	r1, [r7, #16]
 809d99e:	3020      	adds	r0, #32
 809d9a0:	e7e5      	b.n	809d96e <__d2b+0x54>
 809d9a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 809d9a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 809d9aa:	6030      	str	r0, [r6, #0]
 809d9ac:	6918      	ldr	r0, [r3, #16]
 809d9ae:	f7ff fdad 	bl	809d50c <__hi0bits>
 809d9b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 809d9b6:	e7e1      	b.n	809d97c <__d2b+0x62>

0809d9b8 <_calloc_r>:
 809d9b8:	b538      	push	{r3, r4, r5, lr}
 809d9ba:	fb02 f401 	mul.w	r4, r2, r1
 809d9be:	4621      	mov	r1, r4
 809d9c0:	f000 f856 	bl	809da70 <_malloc_r>
 809d9c4:	4605      	mov	r5, r0
 809d9c6:	b118      	cbz	r0, 809d9d0 <_calloc_r+0x18>
 809d9c8:	4622      	mov	r2, r4
 809d9ca:	2100      	movs	r1, #0
 809d9cc:	f7fe fa25 	bl	809be1a <memset>
 809d9d0:	4628      	mov	r0, r5
 809d9d2:	bd38      	pop	{r3, r4, r5, pc}

0809d9d4 <_free_r>:
 809d9d4:	b538      	push	{r3, r4, r5, lr}
 809d9d6:	4605      	mov	r5, r0
 809d9d8:	2900      	cmp	r1, #0
 809d9da:	d045      	beq.n	809da68 <_free_r+0x94>
 809d9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 809d9e0:	1f0c      	subs	r4, r1, #4
 809d9e2:	2b00      	cmp	r3, #0
 809d9e4:	bfb8      	it	lt
 809d9e6:	18e4      	addlt	r4, r4, r3
 809d9e8:	f000 fa24 	bl	809de34 <__malloc_lock>
 809d9ec:	4a1f      	ldr	r2, [pc, #124]	; (809da6c <_free_r+0x98>)
 809d9ee:	6813      	ldr	r3, [r2, #0]
 809d9f0:	4610      	mov	r0, r2
 809d9f2:	b933      	cbnz	r3, 809da02 <_free_r+0x2e>
 809d9f4:	6063      	str	r3, [r4, #4]
 809d9f6:	6014      	str	r4, [r2, #0]
 809d9f8:	4628      	mov	r0, r5
 809d9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 809d9fe:	f000 ba1a 	b.w	809de36 <__malloc_unlock>
 809da02:	42a3      	cmp	r3, r4
 809da04:	d90c      	bls.n	809da20 <_free_r+0x4c>
 809da06:	6821      	ldr	r1, [r4, #0]
 809da08:	1862      	adds	r2, r4, r1
 809da0a:	4293      	cmp	r3, r2
 809da0c:	bf04      	itt	eq
 809da0e:	681a      	ldreq	r2, [r3, #0]
 809da10:	685b      	ldreq	r3, [r3, #4]
 809da12:	6063      	str	r3, [r4, #4]
 809da14:	bf04      	itt	eq
 809da16:	1852      	addeq	r2, r2, r1
 809da18:	6022      	streq	r2, [r4, #0]
 809da1a:	6004      	str	r4, [r0, #0]
 809da1c:	e7ec      	b.n	809d9f8 <_free_r+0x24>
 809da1e:	4613      	mov	r3, r2
 809da20:	685a      	ldr	r2, [r3, #4]
 809da22:	b10a      	cbz	r2, 809da28 <_free_r+0x54>
 809da24:	42a2      	cmp	r2, r4
 809da26:	d9fa      	bls.n	809da1e <_free_r+0x4a>
 809da28:	6819      	ldr	r1, [r3, #0]
 809da2a:	1858      	adds	r0, r3, r1
 809da2c:	42a0      	cmp	r0, r4
 809da2e:	d10b      	bne.n	809da48 <_free_r+0x74>
 809da30:	6820      	ldr	r0, [r4, #0]
 809da32:	4401      	add	r1, r0
 809da34:	1858      	adds	r0, r3, r1
 809da36:	4282      	cmp	r2, r0
 809da38:	6019      	str	r1, [r3, #0]
 809da3a:	d1dd      	bne.n	809d9f8 <_free_r+0x24>
 809da3c:	6810      	ldr	r0, [r2, #0]
 809da3e:	6852      	ldr	r2, [r2, #4]
 809da40:	605a      	str	r2, [r3, #4]
 809da42:	4401      	add	r1, r0
 809da44:	6019      	str	r1, [r3, #0]
 809da46:	e7d7      	b.n	809d9f8 <_free_r+0x24>
 809da48:	d902      	bls.n	809da50 <_free_r+0x7c>
 809da4a:	230c      	movs	r3, #12
 809da4c:	602b      	str	r3, [r5, #0]
 809da4e:	e7d3      	b.n	809d9f8 <_free_r+0x24>
 809da50:	6820      	ldr	r0, [r4, #0]
 809da52:	1821      	adds	r1, r4, r0
 809da54:	428a      	cmp	r2, r1
 809da56:	bf04      	itt	eq
 809da58:	6811      	ldreq	r1, [r2, #0]
 809da5a:	6852      	ldreq	r2, [r2, #4]
 809da5c:	6062      	str	r2, [r4, #4]
 809da5e:	bf04      	itt	eq
 809da60:	1809      	addeq	r1, r1, r0
 809da62:	6021      	streq	r1, [r4, #0]
 809da64:	605c      	str	r4, [r3, #4]
 809da66:	e7c7      	b.n	809d9f8 <_free_r+0x24>
 809da68:	bd38      	pop	{r3, r4, r5, pc}
 809da6a:	bf00      	nop
 809da6c:	2002d7e4 	.word	0x2002d7e4

0809da70 <_malloc_r>:
 809da70:	b570      	push	{r4, r5, r6, lr}
 809da72:	1ccd      	adds	r5, r1, #3
 809da74:	f025 0503 	bic.w	r5, r5, #3
 809da78:	3508      	adds	r5, #8
 809da7a:	2d0c      	cmp	r5, #12
 809da7c:	bf38      	it	cc
 809da7e:	250c      	movcc	r5, #12
 809da80:	2d00      	cmp	r5, #0
 809da82:	4606      	mov	r6, r0
 809da84:	db01      	blt.n	809da8a <_malloc_r+0x1a>
 809da86:	42a9      	cmp	r1, r5
 809da88:	d903      	bls.n	809da92 <_malloc_r+0x22>
 809da8a:	230c      	movs	r3, #12
 809da8c:	6033      	str	r3, [r6, #0]
 809da8e:	2000      	movs	r0, #0
 809da90:	bd70      	pop	{r4, r5, r6, pc}
 809da92:	f000 f9cf 	bl	809de34 <__malloc_lock>
 809da96:	4a21      	ldr	r2, [pc, #132]	; (809db1c <_malloc_r+0xac>)
 809da98:	6814      	ldr	r4, [r2, #0]
 809da9a:	4621      	mov	r1, r4
 809da9c:	b991      	cbnz	r1, 809dac4 <_malloc_r+0x54>
 809da9e:	4c20      	ldr	r4, [pc, #128]	; (809db20 <_malloc_r+0xb0>)
 809daa0:	6823      	ldr	r3, [r4, #0]
 809daa2:	b91b      	cbnz	r3, 809daac <_malloc_r+0x3c>
 809daa4:	4630      	mov	r0, r6
 809daa6:	f000 f98f 	bl	809ddc8 <_sbrk_r>
 809daaa:	6020      	str	r0, [r4, #0]
 809daac:	4629      	mov	r1, r5
 809daae:	4630      	mov	r0, r6
 809dab0:	f000 f98a 	bl	809ddc8 <_sbrk_r>
 809dab4:	1c43      	adds	r3, r0, #1
 809dab6:	d124      	bne.n	809db02 <_malloc_r+0x92>
 809dab8:	230c      	movs	r3, #12
 809daba:	6033      	str	r3, [r6, #0]
 809dabc:	4630      	mov	r0, r6
 809dabe:	f000 f9ba 	bl	809de36 <__malloc_unlock>
 809dac2:	e7e4      	b.n	809da8e <_malloc_r+0x1e>
 809dac4:	680b      	ldr	r3, [r1, #0]
 809dac6:	1b5b      	subs	r3, r3, r5
 809dac8:	d418      	bmi.n	809dafc <_malloc_r+0x8c>
 809daca:	2b0b      	cmp	r3, #11
 809dacc:	d90f      	bls.n	809daee <_malloc_r+0x7e>
 809dace:	600b      	str	r3, [r1, #0]
 809dad0:	50cd      	str	r5, [r1, r3]
 809dad2:	18cc      	adds	r4, r1, r3
 809dad4:	4630      	mov	r0, r6
 809dad6:	f000 f9ae 	bl	809de36 <__malloc_unlock>
 809dada:	f104 000b 	add.w	r0, r4, #11
 809dade:	1d23      	adds	r3, r4, #4
 809dae0:	f020 0007 	bic.w	r0, r0, #7
 809dae4:	1ac3      	subs	r3, r0, r3
 809dae6:	d0d3      	beq.n	809da90 <_malloc_r+0x20>
 809dae8:	425a      	negs	r2, r3
 809daea:	50e2      	str	r2, [r4, r3]
 809daec:	e7d0      	b.n	809da90 <_malloc_r+0x20>
 809daee:	428c      	cmp	r4, r1
 809daf0:	684b      	ldr	r3, [r1, #4]
 809daf2:	bf16      	itet	ne
 809daf4:	6063      	strne	r3, [r4, #4]
 809daf6:	6013      	streq	r3, [r2, #0]
 809daf8:	460c      	movne	r4, r1
 809dafa:	e7eb      	b.n	809dad4 <_malloc_r+0x64>
 809dafc:	460c      	mov	r4, r1
 809dafe:	6849      	ldr	r1, [r1, #4]
 809db00:	e7cc      	b.n	809da9c <_malloc_r+0x2c>
 809db02:	1cc4      	adds	r4, r0, #3
 809db04:	f024 0403 	bic.w	r4, r4, #3
 809db08:	42a0      	cmp	r0, r4
 809db0a:	d005      	beq.n	809db18 <_malloc_r+0xa8>
 809db0c:	1a21      	subs	r1, r4, r0
 809db0e:	4630      	mov	r0, r6
 809db10:	f000 f95a 	bl	809ddc8 <_sbrk_r>
 809db14:	3001      	adds	r0, #1
 809db16:	d0cf      	beq.n	809dab8 <_malloc_r+0x48>
 809db18:	6025      	str	r5, [r4, #0]
 809db1a:	e7db      	b.n	809dad4 <_malloc_r+0x64>
 809db1c:	2002d7e4 	.word	0x2002d7e4
 809db20:	2002d7e8 	.word	0x2002d7e8

0809db24 <__ssputs_r>:
 809db24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 809db28:	688e      	ldr	r6, [r1, #8]
 809db2a:	429e      	cmp	r6, r3
 809db2c:	4682      	mov	sl, r0
 809db2e:	460c      	mov	r4, r1
 809db30:	4690      	mov	r8, r2
 809db32:	4699      	mov	r9, r3
 809db34:	d837      	bhi.n	809dba6 <__ssputs_r+0x82>
 809db36:	898a      	ldrh	r2, [r1, #12]
 809db38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 809db3c:	d031      	beq.n	809dba2 <__ssputs_r+0x7e>
 809db3e:	6825      	ldr	r5, [r4, #0]
 809db40:	6909      	ldr	r1, [r1, #16]
 809db42:	1a6f      	subs	r7, r5, r1
 809db44:	6965      	ldr	r5, [r4, #20]
 809db46:	2302      	movs	r3, #2
 809db48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 809db4c:	fb95 f5f3 	sdiv	r5, r5, r3
 809db50:	f109 0301 	add.w	r3, r9, #1
 809db54:	443b      	add	r3, r7
 809db56:	429d      	cmp	r5, r3
 809db58:	bf38      	it	cc
 809db5a:	461d      	movcc	r5, r3
 809db5c:	0553      	lsls	r3, r2, #21
 809db5e:	d530      	bpl.n	809dbc2 <__ssputs_r+0x9e>
 809db60:	4629      	mov	r1, r5
 809db62:	f7ff ff85 	bl	809da70 <_malloc_r>
 809db66:	4606      	mov	r6, r0
 809db68:	b950      	cbnz	r0, 809db80 <__ssputs_r+0x5c>
 809db6a:	230c      	movs	r3, #12
 809db6c:	f8ca 3000 	str.w	r3, [sl]
 809db70:	89a3      	ldrh	r3, [r4, #12]
 809db72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 809db76:	81a3      	strh	r3, [r4, #12]
 809db78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809db7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809db80:	463a      	mov	r2, r7
 809db82:	6921      	ldr	r1, [r4, #16]
 809db84:	f7fe f93e 	bl	809be04 <memcpy>
 809db88:	89a3      	ldrh	r3, [r4, #12]
 809db8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 809db8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 809db92:	81a3      	strh	r3, [r4, #12]
 809db94:	6126      	str	r6, [r4, #16]
 809db96:	6165      	str	r5, [r4, #20]
 809db98:	443e      	add	r6, r7
 809db9a:	1bed      	subs	r5, r5, r7
 809db9c:	6026      	str	r6, [r4, #0]
 809db9e:	60a5      	str	r5, [r4, #8]
 809dba0:	464e      	mov	r6, r9
 809dba2:	454e      	cmp	r6, r9
 809dba4:	d900      	bls.n	809dba8 <__ssputs_r+0x84>
 809dba6:	464e      	mov	r6, r9
 809dba8:	4632      	mov	r2, r6
 809dbaa:	4641      	mov	r1, r8
 809dbac:	6820      	ldr	r0, [r4, #0]
 809dbae:	f000 f928 	bl	809de02 <memmove>
 809dbb2:	68a3      	ldr	r3, [r4, #8]
 809dbb4:	1b9b      	subs	r3, r3, r6
 809dbb6:	60a3      	str	r3, [r4, #8]
 809dbb8:	6823      	ldr	r3, [r4, #0]
 809dbba:	441e      	add	r6, r3
 809dbbc:	6026      	str	r6, [r4, #0]
 809dbbe:	2000      	movs	r0, #0
 809dbc0:	e7dc      	b.n	809db7c <__ssputs_r+0x58>
 809dbc2:	462a      	mov	r2, r5
 809dbc4:	f000 f938 	bl	809de38 <_realloc_r>
 809dbc8:	4606      	mov	r6, r0
 809dbca:	2800      	cmp	r0, #0
 809dbcc:	d1e2      	bne.n	809db94 <__ssputs_r+0x70>
 809dbce:	6921      	ldr	r1, [r4, #16]
 809dbd0:	4650      	mov	r0, sl
 809dbd2:	f7ff feff 	bl	809d9d4 <_free_r>
 809dbd6:	e7c8      	b.n	809db6a <__ssputs_r+0x46>

0809dbd8 <_svfiprintf_r>:
 809dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809dbdc:	461d      	mov	r5, r3
 809dbde:	898b      	ldrh	r3, [r1, #12]
 809dbe0:	061f      	lsls	r7, r3, #24
 809dbe2:	b09d      	sub	sp, #116	; 0x74
 809dbe4:	4680      	mov	r8, r0
 809dbe6:	460c      	mov	r4, r1
 809dbe8:	4616      	mov	r6, r2
 809dbea:	d50f      	bpl.n	809dc0c <_svfiprintf_r+0x34>
 809dbec:	690b      	ldr	r3, [r1, #16]
 809dbee:	b96b      	cbnz	r3, 809dc0c <_svfiprintf_r+0x34>
 809dbf0:	2140      	movs	r1, #64	; 0x40
 809dbf2:	f7ff ff3d 	bl	809da70 <_malloc_r>
 809dbf6:	6020      	str	r0, [r4, #0]
 809dbf8:	6120      	str	r0, [r4, #16]
 809dbfa:	b928      	cbnz	r0, 809dc08 <_svfiprintf_r+0x30>
 809dbfc:	230c      	movs	r3, #12
 809dbfe:	f8c8 3000 	str.w	r3, [r8]
 809dc02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 809dc06:	e0c8      	b.n	809dd9a <_svfiprintf_r+0x1c2>
 809dc08:	2340      	movs	r3, #64	; 0x40
 809dc0a:	6163      	str	r3, [r4, #20]
 809dc0c:	2300      	movs	r3, #0
 809dc0e:	9309      	str	r3, [sp, #36]	; 0x24
 809dc10:	2320      	movs	r3, #32
 809dc12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 809dc16:	2330      	movs	r3, #48	; 0x30
 809dc18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 809dc1c:	9503      	str	r5, [sp, #12]
 809dc1e:	f04f 0b01 	mov.w	fp, #1
 809dc22:	4637      	mov	r7, r6
 809dc24:	463d      	mov	r5, r7
 809dc26:	f815 3b01 	ldrb.w	r3, [r5], #1
 809dc2a:	b10b      	cbz	r3, 809dc30 <_svfiprintf_r+0x58>
 809dc2c:	2b25      	cmp	r3, #37	; 0x25
 809dc2e:	d13e      	bne.n	809dcae <_svfiprintf_r+0xd6>
 809dc30:	ebb7 0a06 	subs.w	sl, r7, r6
 809dc34:	d00b      	beq.n	809dc4e <_svfiprintf_r+0x76>
 809dc36:	4653      	mov	r3, sl
 809dc38:	4632      	mov	r2, r6
 809dc3a:	4621      	mov	r1, r4
 809dc3c:	4640      	mov	r0, r8
 809dc3e:	f7ff ff71 	bl	809db24 <__ssputs_r>
 809dc42:	3001      	adds	r0, #1
 809dc44:	f000 80a4 	beq.w	809dd90 <_svfiprintf_r+0x1b8>
 809dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809dc4a:	4453      	add	r3, sl
 809dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 809dc4e:	783b      	ldrb	r3, [r7, #0]
 809dc50:	2b00      	cmp	r3, #0
 809dc52:	f000 809d 	beq.w	809dd90 <_svfiprintf_r+0x1b8>
 809dc56:	2300      	movs	r3, #0
 809dc58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 809dc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 809dc60:	9304      	str	r3, [sp, #16]
 809dc62:	9307      	str	r3, [sp, #28]
 809dc64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 809dc68:	931a      	str	r3, [sp, #104]	; 0x68
 809dc6a:	462f      	mov	r7, r5
 809dc6c:	2205      	movs	r2, #5
 809dc6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 809dc72:	4850      	ldr	r0, [pc, #320]	; (809ddb4 <_svfiprintf_r+0x1dc>)
 809dc74:	f7e2 f9f4 	bl	8080060 <memchr>
 809dc78:	9b04      	ldr	r3, [sp, #16]
 809dc7a:	b9d0      	cbnz	r0, 809dcb2 <_svfiprintf_r+0xda>
 809dc7c:	06d9      	lsls	r1, r3, #27
 809dc7e:	bf44      	itt	mi
 809dc80:	2220      	movmi	r2, #32
 809dc82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 809dc86:	071a      	lsls	r2, r3, #28
 809dc88:	bf44      	itt	mi
 809dc8a:	222b      	movmi	r2, #43	; 0x2b
 809dc8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 809dc90:	782a      	ldrb	r2, [r5, #0]
 809dc92:	2a2a      	cmp	r2, #42	; 0x2a
 809dc94:	d015      	beq.n	809dcc2 <_svfiprintf_r+0xea>
 809dc96:	9a07      	ldr	r2, [sp, #28]
 809dc98:	462f      	mov	r7, r5
 809dc9a:	2000      	movs	r0, #0
 809dc9c:	250a      	movs	r5, #10
 809dc9e:	4639      	mov	r1, r7
 809dca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 809dca4:	3b30      	subs	r3, #48	; 0x30
 809dca6:	2b09      	cmp	r3, #9
 809dca8:	d94d      	bls.n	809dd46 <_svfiprintf_r+0x16e>
 809dcaa:	b1b8      	cbz	r0, 809dcdc <_svfiprintf_r+0x104>
 809dcac:	e00f      	b.n	809dcce <_svfiprintf_r+0xf6>
 809dcae:	462f      	mov	r7, r5
 809dcb0:	e7b8      	b.n	809dc24 <_svfiprintf_r+0x4c>
 809dcb2:	4a40      	ldr	r2, [pc, #256]	; (809ddb4 <_svfiprintf_r+0x1dc>)
 809dcb4:	1a80      	subs	r0, r0, r2
 809dcb6:	fa0b f000 	lsl.w	r0, fp, r0
 809dcba:	4318      	orrs	r0, r3
 809dcbc:	9004      	str	r0, [sp, #16]
 809dcbe:	463d      	mov	r5, r7
 809dcc0:	e7d3      	b.n	809dc6a <_svfiprintf_r+0x92>
 809dcc2:	9a03      	ldr	r2, [sp, #12]
 809dcc4:	1d11      	adds	r1, r2, #4
 809dcc6:	6812      	ldr	r2, [r2, #0]
 809dcc8:	9103      	str	r1, [sp, #12]
 809dcca:	2a00      	cmp	r2, #0
 809dccc:	db01      	blt.n	809dcd2 <_svfiprintf_r+0xfa>
 809dcce:	9207      	str	r2, [sp, #28]
 809dcd0:	e004      	b.n	809dcdc <_svfiprintf_r+0x104>
 809dcd2:	4252      	negs	r2, r2
 809dcd4:	f043 0302 	orr.w	r3, r3, #2
 809dcd8:	9207      	str	r2, [sp, #28]
 809dcda:	9304      	str	r3, [sp, #16]
 809dcdc:	783b      	ldrb	r3, [r7, #0]
 809dcde:	2b2e      	cmp	r3, #46	; 0x2e
 809dce0:	d10c      	bne.n	809dcfc <_svfiprintf_r+0x124>
 809dce2:	787b      	ldrb	r3, [r7, #1]
 809dce4:	2b2a      	cmp	r3, #42	; 0x2a
 809dce6:	d133      	bne.n	809dd50 <_svfiprintf_r+0x178>
 809dce8:	9b03      	ldr	r3, [sp, #12]
 809dcea:	1d1a      	adds	r2, r3, #4
 809dcec:	681b      	ldr	r3, [r3, #0]
 809dcee:	9203      	str	r2, [sp, #12]
 809dcf0:	2b00      	cmp	r3, #0
 809dcf2:	bfb8      	it	lt
 809dcf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 809dcf8:	3702      	adds	r7, #2
 809dcfa:	9305      	str	r3, [sp, #20]
 809dcfc:	4d2e      	ldr	r5, [pc, #184]	; (809ddb8 <_svfiprintf_r+0x1e0>)
 809dcfe:	7839      	ldrb	r1, [r7, #0]
 809dd00:	2203      	movs	r2, #3
 809dd02:	4628      	mov	r0, r5
 809dd04:	f7e2 f9ac 	bl	8080060 <memchr>
 809dd08:	b138      	cbz	r0, 809dd1a <_svfiprintf_r+0x142>
 809dd0a:	2340      	movs	r3, #64	; 0x40
 809dd0c:	1b40      	subs	r0, r0, r5
 809dd0e:	fa03 f000 	lsl.w	r0, r3, r0
 809dd12:	9b04      	ldr	r3, [sp, #16]
 809dd14:	4303      	orrs	r3, r0
 809dd16:	3701      	adds	r7, #1
 809dd18:	9304      	str	r3, [sp, #16]
 809dd1a:	7839      	ldrb	r1, [r7, #0]
 809dd1c:	4827      	ldr	r0, [pc, #156]	; (809ddbc <_svfiprintf_r+0x1e4>)
 809dd1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 809dd22:	2206      	movs	r2, #6
 809dd24:	1c7e      	adds	r6, r7, #1
 809dd26:	f7e2 f99b 	bl	8080060 <memchr>
 809dd2a:	2800      	cmp	r0, #0
 809dd2c:	d038      	beq.n	809dda0 <_svfiprintf_r+0x1c8>
 809dd2e:	4b24      	ldr	r3, [pc, #144]	; (809ddc0 <_svfiprintf_r+0x1e8>)
 809dd30:	bb13      	cbnz	r3, 809dd78 <_svfiprintf_r+0x1a0>
 809dd32:	9b03      	ldr	r3, [sp, #12]
 809dd34:	3307      	adds	r3, #7
 809dd36:	f023 0307 	bic.w	r3, r3, #7
 809dd3a:	3308      	adds	r3, #8
 809dd3c:	9303      	str	r3, [sp, #12]
 809dd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809dd40:	444b      	add	r3, r9
 809dd42:	9309      	str	r3, [sp, #36]	; 0x24
 809dd44:	e76d      	b.n	809dc22 <_svfiprintf_r+0x4a>
 809dd46:	fb05 3202 	mla	r2, r5, r2, r3
 809dd4a:	2001      	movs	r0, #1
 809dd4c:	460f      	mov	r7, r1
 809dd4e:	e7a6      	b.n	809dc9e <_svfiprintf_r+0xc6>
 809dd50:	2300      	movs	r3, #0
 809dd52:	3701      	adds	r7, #1
 809dd54:	9305      	str	r3, [sp, #20]
 809dd56:	4619      	mov	r1, r3
 809dd58:	250a      	movs	r5, #10
 809dd5a:	4638      	mov	r0, r7
 809dd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 809dd60:	3a30      	subs	r2, #48	; 0x30
 809dd62:	2a09      	cmp	r2, #9
 809dd64:	d903      	bls.n	809dd6e <_svfiprintf_r+0x196>
 809dd66:	2b00      	cmp	r3, #0
 809dd68:	d0c8      	beq.n	809dcfc <_svfiprintf_r+0x124>
 809dd6a:	9105      	str	r1, [sp, #20]
 809dd6c:	e7c6      	b.n	809dcfc <_svfiprintf_r+0x124>
 809dd6e:	fb05 2101 	mla	r1, r5, r1, r2
 809dd72:	2301      	movs	r3, #1
 809dd74:	4607      	mov	r7, r0
 809dd76:	e7f0      	b.n	809dd5a <_svfiprintf_r+0x182>
 809dd78:	ab03      	add	r3, sp, #12
 809dd7a:	9300      	str	r3, [sp, #0]
 809dd7c:	4622      	mov	r2, r4
 809dd7e:	4b11      	ldr	r3, [pc, #68]	; (809ddc4 <_svfiprintf_r+0x1ec>)
 809dd80:	a904      	add	r1, sp, #16
 809dd82:	4640      	mov	r0, r8
 809dd84:	f7fe f8e6 	bl	809bf54 <_printf_float>
 809dd88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 809dd8c:	4681      	mov	r9, r0
 809dd8e:	d1d6      	bne.n	809dd3e <_svfiprintf_r+0x166>
 809dd90:	89a3      	ldrh	r3, [r4, #12]
 809dd92:	065b      	lsls	r3, r3, #25
 809dd94:	f53f af35 	bmi.w	809dc02 <_svfiprintf_r+0x2a>
 809dd98:	9809      	ldr	r0, [sp, #36]	; 0x24
 809dd9a:	b01d      	add	sp, #116	; 0x74
 809dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809dda0:	ab03      	add	r3, sp, #12
 809dda2:	9300      	str	r3, [sp, #0]
 809dda4:	4622      	mov	r2, r4
 809dda6:	4b07      	ldr	r3, [pc, #28]	; (809ddc4 <_svfiprintf_r+0x1ec>)
 809dda8:	a904      	add	r1, sp, #16
 809ddaa:	4640      	mov	r0, r8
 809ddac:	f7fe fb88 	bl	809c4c0 <_printf_i>
 809ddb0:	e7ea      	b.n	809dd88 <_svfiprintf_r+0x1b0>
 809ddb2:	bf00      	nop
 809ddb4:	080a55bc 	.word	0x080a55bc
 809ddb8:	080a55c2 	.word	0x080a55c2
 809ddbc:	080a55c6 	.word	0x080a55c6
 809ddc0:	0809bf55 	.word	0x0809bf55
 809ddc4:	0809db25 	.word	0x0809db25

0809ddc8 <_sbrk_r>:
 809ddc8:	b538      	push	{r3, r4, r5, lr}
 809ddca:	4c06      	ldr	r4, [pc, #24]	; (809dde4 <_sbrk_r+0x1c>)
 809ddcc:	2300      	movs	r3, #0
 809ddce:	4605      	mov	r5, r0
 809ddd0:	4608      	mov	r0, r1
 809ddd2:	6023      	str	r3, [r4, #0]
 809ddd4:	f7f5 fcf2 	bl	80937bc <_sbrk>
 809ddd8:	1c43      	adds	r3, r0, #1
 809ddda:	d102      	bne.n	809dde2 <_sbrk_r+0x1a>
 809dddc:	6823      	ldr	r3, [r4, #0]
 809ddde:	b103      	cbz	r3, 809dde2 <_sbrk_r+0x1a>
 809dde0:	602b      	str	r3, [r5, #0]
 809dde2:	bd38      	pop	{r3, r4, r5, pc}
 809dde4:	2002f694 	.word	0x2002f694

0809dde8 <__ascii_wctomb>:
 809dde8:	b149      	cbz	r1, 809ddfe <__ascii_wctomb+0x16>
 809ddea:	2aff      	cmp	r2, #255	; 0xff
 809ddec:	bf85      	ittet	hi
 809ddee:	238a      	movhi	r3, #138	; 0x8a
 809ddf0:	6003      	strhi	r3, [r0, #0]
 809ddf2:	700a      	strbls	r2, [r1, #0]
 809ddf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 809ddf8:	bf98      	it	ls
 809ddfa:	2001      	movls	r0, #1
 809ddfc:	4770      	bx	lr
 809ddfe:	4608      	mov	r0, r1
 809de00:	4770      	bx	lr

0809de02 <memmove>:
 809de02:	4288      	cmp	r0, r1
 809de04:	b510      	push	{r4, lr}
 809de06:	eb01 0302 	add.w	r3, r1, r2
 809de0a:	d807      	bhi.n	809de1c <memmove+0x1a>
 809de0c:	1e42      	subs	r2, r0, #1
 809de0e:	4299      	cmp	r1, r3
 809de10:	d00a      	beq.n	809de28 <memmove+0x26>
 809de12:	f811 4b01 	ldrb.w	r4, [r1], #1
 809de16:	f802 4f01 	strb.w	r4, [r2, #1]!
 809de1a:	e7f8      	b.n	809de0e <memmove+0xc>
 809de1c:	4283      	cmp	r3, r0
 809de1e:	d9f5      	bls.n	809de0c <memmove+0xa>
 809de20:	1881      	adds	r1, r0, r2
 809de22:	1ad2      	subs	r2, r2, r3
 809de24:	42d3      	cmn	r3, r2
 809de26:	d100      	bne.n	809de2a <memmove+0x28>
 809de28:	bd10      	pop	{r4, pc}
 809de2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 809de2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 809de32:	e7f7      	b.n	809de24 <memmove+0x22>

0809de34 <__malloc_lock>:
 809de34:	4770      	bx	lr

0809de36 <__malloc_unlock>:
 809de36:	4770      	bx	lr

0809de38 <_realloc_r>:
 809de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809de3a:	4607      	mov	r7, r0
 809de3c:	4614      	mov	r4, r2
 809de3e:	460e      	mov	r6, r1
 809de40:	b921      	cbnz	r1, 809de4c <_realloc_r+0x14>
 809de42:	4611      	mov	r1, r2
 809de44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 809de48:	f7ff be12 	b.w	809da70 <_malloc_r>
 809de4c:	b922      	cbnz	r2, 809de58 <_realloc_r+0x20>
 809de4e:	f7ff fdc1 	bl	809d9d4 <_free_r>
 809de52:	4625      	mov	r5, r4
 809de54:	4628      	mov	r0, r5
 809de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 809de58:	f000 f814 	bl	809de84 <_malloc_usable_size_r>
 809de5c:	42a0      	cmp	r0, r4
 809de5e:	d20f      	bcs.n	809de80 <_realloc_r+0x48>
 809de60:	4621      	mov	r1, r4
 809de62:	4638      	mov	r0, r7
 809de64:	f7ff fe04 	bl	809da70 <_malloc_r>
 809de68:	4605      	mov	r5, r0
 809de6a:	2800      	cmp	r0, #0
 809de6c:	d0f2      	beq.n	809de54 <_realloc_r+0x1c>
 809de6e:	4631      	mov	r1, r6
 809de70:	4622      	mov	r2, r4
 809de72:	f7fd ffc7 	bl	809be04 <memcpy>
 809de76:	4631      	mov	r1, r6
 809de78:	4638      	mov	r0, r7
 809de7a:	f7ff fdab 	bl	809d9d4 <_free_r>
 809de7e:	e7e9      	b.n	809de54 <_realloc_r+0x1c>
 809de80:	4635      	mov	r5, r6
 809de82:	e7e7      	b.n	809de54 <_realloc_r+0x1c>

0809de84 <_malloc_usable_size_r>:
 809de84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 809de88:	1f18      	subs	r0, r3, #4
 809de8a:	2b00      	cmp	r3, #0
 809de8c:	bfbc      	itt	lt
 809de8e:	580b      	ldrlt	r3, [r1, r0]
 809de90:	18c0      	addlt	r0, r0, r3
 809de92:	4770      	bx	lr

0809de94 <_init>:
 809de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809de96:	bf00      	nop
 809de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 809de9a:	bc08      	pop	{r3}
 809de9c:	469e      	mov	lr, r3
 809de9e:	4770      	bx	lr

0809dea0 <_fini>:
 809dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809dea2:	bf00      	nop
 809dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 809dea6:	bc08      	pop	{r3}
 809dea8:	469e      	mov	lr, r3
 809deaa:	4770      	bx	lr
