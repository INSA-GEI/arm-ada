<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objs\arm-ada-bios.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objs\arm-ada-bios.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Oct 31 10:36:02 2017
<BR><P>
<H3>Maximum Stack Usage =        228 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BIOS_PeripheralsInit &rArr; USART_Configure &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">DoProgram_RAM_End</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[44]">ADC4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[45]">COMP1_2_3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[46]">COMP4_5_6_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[47]">COMP7_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel1_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[40]">DMA2_Channel2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[41]">DMA2_Channel3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[42]">DMA2_Channel4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[43]">DMA2_Channel5_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[50]">DoProgram_RAM</a> from flash_routines.o(.ram_text) referenced from reprog.o(i.PRG_CopyToRAM)
 <LI><a href="#[4f]">DoProgram_RAM_End</a> from flash_routines.o(.ram_text) referenced from reprog.o(i.PRG_CopyToRAM)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[12]">EXTI2_TS_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[4b]">FPU_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3a]">SPI3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32f30x.o(i.SystemInit) referenced from startup_rvds.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3d]">TIM6_DAC_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3b]">UART4_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[3c]">UART5_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_rvds.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[4a]">USBWakeUp_RMP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[48]">USB_HP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[49]">USB_LP_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_rvds.o(.text) referenced from startup_rvds.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_rvds.o(.text)
 <LI><a href="#[52]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[51]">fputc</a> from retarget.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[4c]">main</a> from bios.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[53]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ba]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[50]"></a>DoProgram_RAM</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, flash_routines.o(.ram_text))
<BR>[Address Reference Count : 1]<UL><LI> reprog.o(i.PRG_CopyToRAM)
</UL>
<P><STRONG><a name="[4f]"></a>DoProgram_RAM_End</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, flash_routines.o(.ram_text))
<BR>[Address Reference Count : 1]<UL><LI> reprog.o(i.PRG_CopyToRAM)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>SetStack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBWakeUp_RMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU8
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU16
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[57]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5b]"></a>BIOS_PeripheralsInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bios.o(i.BIOS_PeripheralsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = BIOS_PeripheralsInit &rArr; USART_Configure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Wait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>BIOS_PeripheralsReset</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bios.o(i.BIOS_PeripheralsReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIOS_PeripheralsReset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[a4]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[aa]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRXBufferLength
</UL>

<P><STRONG><a name="[a5]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f30x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[76]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoErase
</UL>

<P><STRONG><a name="[77]"></a>FLASH_ErasePage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f30x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoErase
</UL>

<P><STRONG><a name="[7d]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[69]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCloseFlash
</UL>

<P><STRONG><a name="[79]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoOpenFlash
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f30x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[5f]"></a>GLCD_Clear</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, glcd_8bits_stm32.o(i.GLCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GLCD_Clear &rArr; GLCD_SetBackColor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackColor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Panic
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>

<P><STRONG><a name="[82]"></a>GLCD_DrawFillRectangle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, glcd_8bits_stm32.o(i.GLCD_DrawFillRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GLCD_DrawFillRectangle &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GeometricCoordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UpdateProgressBar
</UL>

<P><STRONG><a name="[84]"></a>GLCD_DrawLine</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, glcd_8bits_stm32.o(i.GLCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GLCD_DrawLine &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GeometricCoordinate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateProgressBar
</UL>

<P><STRONG><a name="[70]"></a>GLCD_DrawString</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.GLCD_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GLCD_DrawString &rArr; GLCD_SetCursor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetGraphicMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Panic
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>GLCD_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.GLCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GLCD_Init &rArr; LCD_SetActiveWindow &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_output
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetActiveWindow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>

<P><STRONG><a name="[81]"></a>GLCD_SetBackColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.GLCD_SetBackColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GLCD_SetBackColor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>GLCD_SetCursor</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, glcd_8bits_stm32.o(i.GLCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLCD_SetCursor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[8d]"></a>GLCD_SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.GLCD_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GLCD_SetTextColor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UpdateProgressBar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateProgressBar
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Panic
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>GLCD_Wait</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.GLCD_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GLCD_Wait &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>

<P><STRONG><a name="[89]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f30x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Wait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f30x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_GetState
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Wait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[90]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
</UL>

<P><STRONG><a name="[71]"></a>GUI_CreateProgressBar</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, progressbar.o(i.GUI_CreateProgressBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_CreateProgressBar &rArr; GLCD_DrawLine &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[74]"></a>GUI_UpdateProgressBar</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, progressbar.o(i.GUI_UpdateProgressBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_UpdateProgressBar &rArr; GLCD_DrawFillRectangle &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[8e]"></a>KEYS_GetState</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, keys.o(i.KEYS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEYS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>KEYS_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, keys.o(i.KEYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KEYS_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Delay
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>

<P><STRONG><a name="[91]"></a>KEY_Delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keys.o(i.KEY_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f30x_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[95]"></a>PRG_CheckDownloadPattern</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, reprog.o(i.PRG_CheckDownloadPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PRG_CheckDownloadPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>PRG_CheckReprogRequest</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, reprog.o(i.PRG_CheckReprogRequest))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>PRG_ResetReprogRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, reprog.o(i.PRG_ResetReprogRequest))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>PRG_Run</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, reprog.o(i.PRG_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PRG_Run &rArr; DoCommand &rArr; GUI_UpdateProgressBar &rArr; GLCD_DrawFillRectangle &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CopyToRAM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU8
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoReset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoOpenFlash
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCloseFlash
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Wait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[65]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_AHBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[64]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[67]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[63]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[66]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
</UL>

<P><STRONG><a name="[ab]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 574 bytes, Stack size 36 bytes, stm32f30x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvds.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[5d]"></a>USART_Configure</STRONG> (Thumb, 294 bytes, Stack size 112 bytes, usart.o(i.USART_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USART_Configure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>

<P><STRONG><a name="[a7]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[a0]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f30x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[9c]"></a>USART_GetITStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f30x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>USART_GetRXBufferLength</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart.o(i.USART_GetRXBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetRXBufferLength
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>

<P><STRONG><a name="[9e]"></a>USART_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f30x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, stm32f30x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
</UL>

<P><STRONG><a name="[ac]"></a>USART_Receive</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usart.o(i.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Receive &rArr; USART_GetRXBufferLength
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CheckDownloadPattern
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRXBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>USART_Send</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(i.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[73]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[b0]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bf]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[6f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b2]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; USART_Receive &rArr; USART_GetRXBufferLength
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[51]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; USART_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[9a]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getc &rArr; fgetc &rArr; USART_Receive &rArr; USART_GetRXBufferLength
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, bios.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = main &rArr; BIOS_PeripheralsInit &rArr; USART_Configure &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_ResetReprogRequest
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CheckReprogRequest
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CheckDownloadPattern
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYS_GetState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackColor
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIOS_PeripheralsInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[97]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CopyToRAM
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>SetSysClock</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, system_stm32f30x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[80]"></a>LCD_CheckBusy</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.LCD_CheckBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_CheckBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>

<P><STRONG><a name="[83]"></a>LCD_GeometricCoordinate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.LCD_GeometricCoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillRectangle
</UL>

<P><STRONG><a name="[7e]"></a>LCD_RegisterRead</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.LCD_RegisterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_RegisterRead
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_output
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_input
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetGraphicMode
</UL>

<P><STRONG><a name="[7f]"></a>LCD_RegisterWrite</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, glcd_8bits_stm32.o(i.LCD_RegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_output
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_input
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetCursor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackColor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawLine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawFillRectangle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetGraphicMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetActiveWindow
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GeometricCoordinate
</UL>

<P><STRONG><a name="[87]"></a>LCD_RegisterWriteBuffer</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, glcd_8bits_stm32.o(i.LCD_RegisterWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_RegisterWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_output
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data_input
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[8c]"></a>LCD_SetActiveWindow</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, glcd_8bits_stm32.o(i.LCD_SetActiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_SetActiveWindow &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[88]"></a>LCD_SetGraphicMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, glcd_8bits_stm32.o(i.LCD_SetGraphicMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetGraphicMode &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[85]"></a>LCD_SetTextMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, glcd_8bits_stm32.o(i.LCD_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetTextMode &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
</UL>

<P><STRONG><a name="[92]"></a>read_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.read_data))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CheckBusy
</UL>

<P><STRONG><a name="[94]"></a>set_data_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.set_data_input))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWriteBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
</UL>

<P><STRONG><a name="[8b]"></a>set_data_output</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.set_data_output))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWriteBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
</UL>

<P><STRONG><a name="[93]"></a>write_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glcd_8bits_stm32.o(i.write_data))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWriteBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterRead
</UL>

<P><STRONG><a name="[68]"></a>DoCloseFlash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, reprog.o(i.DoCloseFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DoCloseFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[6a]"></a>DoCommand</STRONG> (Thumb, 512 bytes, Stack size 120 bytes, reprog.o(i.DoCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DoCommand &rArr; GUI_UpdateProgressBar &rArr; GLCD_DrawFillRectangle &rArr; LCD_GeometricCoordinate &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UpdateProgressBar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateProgressBar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU8
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHextoU16
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoVerify
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSetAddress
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoErase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[6c]"></a>DoErase</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, reprog.o(i.DoErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DoErase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[78]"></a>DoOpenFlash</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, reprog.o(i.DoOpenFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DoOpenFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[7a]"></a>DoReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, reprog.o(i.DoReset))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[72]"></a>DoSetAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, reprog.o(i.DoSetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[75]"></a>DoVerify</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, reprog.o(i.DoVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DoVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[6e]"></a>FromHextoU16</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, reprog.o(i.FromHextoU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FromHextoU16 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[6b]"></a>FromHextoU32</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, reprog.o(i.FromHextoU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FromHextoU32 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[6d]"></a>FromHextoU8</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, reprog.o(i.FromHextoU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FromHextoU8 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_SystemReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, reprog.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoReset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CheckDownloadPattern
</UL>

<P><STRONG><a name="[96]"></a>PRG_CopyToRAM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, reprog.o(i.PRG_CopyToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PRG_CopyToRAM &rArr; PRG_Panic &rArr; GLCD_DrawString &rArr; GLCD_SetCursor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Panic
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_Run
</UL>

<P><STRONG><a name="[98]"></a>PRG_Panic</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, reprog.o(i.PRG_Panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PRG_Panic &rArr; GLCD_DrawString &rArr; GLCD_SetCursor &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetTextColor
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRG_CopyToRAM
</UL>

<P><STRONG><a name="[af]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>

<P><STRONG><a name="[52]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
